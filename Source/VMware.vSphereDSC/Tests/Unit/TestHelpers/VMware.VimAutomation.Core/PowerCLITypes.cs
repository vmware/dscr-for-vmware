/*
Copyright(c) 2018 VMware, Inc.All rights reserved

The BSD-2 license(the "License") set forth below applies to all parts of the Desired State Configuration Resources for VMware project.You may not use this file except in compliance with the License.

BSD-2 License

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
namespace VMware.Vim
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Linq;
    using System.Net.Security;
    using System.Runtime.Serialization;
    using System.Security;
    using System.Security.Cryptography;
    using System.Security.Cryptography.X509Certificates;

    public interface VimClient
    {
        VimVersion Version { get; set; }

        object VimService { get; set; }

        ServiceContent ServiceContent { get; set; }

        string ServiceUrl { get; set; }

        int ServiceTimeout { get; set; }

        bool UseSystemProxy { get; set; }

        string UserAgent { get; set; }

        string SessionSecret { get; set; }

        Action<X509Certificate2> CertificateValidationHandler { get; set; }

        bool IgnoreServerCertificateErrors { get; set; }

        ServiceContent Connect();
        ServiceContent Connect(string serviceUrl);
        ServiceContent Connect(string server, CommunicationProtocol? protocol, ushort? port);
        UserSession Login(string username, string password);
        UserSession Login(string serviceUrl, string username, string password);
        void Logout();
        UserSession ConnectToSession(string serviceUrl, string soapSessionId);
        EntityViewBase FindEntityView(Type viewType, ManagedObjectReference beginEntity, NameValueCollection filter, string[] properties);
        List<EntityViewBase> FindEntityViews(Type viewType, ManagedObjectReference beginEntity, NameValueCollection filter, string[] properties);
        List<ViewBase> GetViews(IEnumerable<ManagedObjectReference> moRefs, string[] properties);
        List<ViewBase> GetViews(ObjectContent[] objectContent, string[] properties);
        List<ViewBase> GetViewsByMorefs(IEnumerable<ManagedObjectReference> moRefs, string[] properties);
        ViewBase GetView(ManagedObjectReference moRef, string[] properties);
        void Disconnect();
        void SaveSession(string fileName);
        void LoadSession(string fileName);
        bool IsVimVersionOrHigher(VimVersion version);
        object WaitForTask(ManagedObjectReference taskReference);
    }

    public enum ActionParameter
    {
        TargetName,
        AlarmName,
        OldStatus,
        NewStatus,
        TriggeringSummary,
        DeclaringSummary,
        EventDescription,
        Target,
        Alarm
    }

    public enum ActionType
    {
        MigrationV1,
        VmPowerV1,
        HostPowerV1,
        HostMaintenanceV1,
        StorageMigrationV1,
        StoragePlacementV1,
        PlacementV1,
        HostInfraUpdateHaV1
    }

    public enum AffinityType
    {
        Memory,
        Cpu
    }

    public enum AgentInstallFailedReason
    {
        NotEnoughSpaceOnDevice,
        PrepareToUpgradeFailed,
        AgentNotRunning,
        AgentNotReachable,
        InstallTimedout,
        SignatureVerificationFailed,
        AgentUploadFailed,
        AgentUploadTimedout,
        UnknownInstallerError
    }

    public enum AlarmFilterSpecAlarmTypeByEntity
    {
        EntityTypeAll,
        EntityTypeHost,
        EntityTypeVm
    }

    public enum AlarmFilterSpecAlarmTypeByTrigger
    {
        TriggerTypeAll,
        TriggerTypeEvent,
        TriggerTypeMetric
    }

    public enum AnswerFileValidationInfoStatus
    {
        Success,
        Failed,
        Failed_defaults
    }

    public enum ApplyHostProfileConfigurationResultStatus
    {
        Success,
        Failed,
        Reboot_failed,
        Stateless_reboot_failed,
        Check_compliance_failed,
        State_not_satisfied,
        Exit_maintenancemode_failed,
        Canceled
    }

    public enum ArrayUpdateOperation
    {
        Add,
        Remove,
        Edit
    }

    public enum AutoStartAction
    {
        None,
        SystemDefault,
        PowerOn,
        PowerOff,
        GuestShutdown,
        Suspend
    }

    public enum AutoStartWaitHeartbeatSetting
    {
        Yes,
        No,
        SystemDefault
    }

    public enum BaseConfigInfoDiskFileBackingInfoProvisioningType
    {
        Thin,
        EagerZeroedThick,
        LazyZeroedThick
    }

    public enum BatchResultResult
    {
        Success,
        Fail
    }

    public enum CannotEnableVmcpForClusterReason
    {
        APDTimeoutDisabled,
        IncompatibleHostVersion
    }

    public enum CannotMoveFaultToleranceVmMoveType
    {
        ResourcePool,
        Cluster
    }

    public enum CannotPowerOffVmInClusterOperation
    {
        Suspend,
        PowerOff,
        GuestShutdown,
        GuestSuspend
    }

    public enum CannotUseNetworkReason
    {
        NetworkReservationNotSupported,
        MismatchedNetworkPolicies,
        MismatchedDvsVersionOrVendor,
        VMotionToUnsupportedNetworkType
    }

    public enum CheckTestType
    {
        SourceTests,
        HostTests,
        ResourcePoolTests,
        DatastoreTests,
        NetworkTests
    }

    public enum ClusterComputeResourceHCIWorkflowState
    {
        In_progress,
        Done,
        Invalid
    }

    public enum ClusterDasAamNodeStateDasState
    {
        Uninitialized,
        Initialized,
        Configuring,
        Unconfiguring,
        Running,
        Error,
        AgentShutdown,
        NodeFailed
    }

    public enum ClusterDasConfigInfoHBDatastoreCandidate
    {
        UserSelectedDs,
        AllFeasibleDs,
        AllFeasibleDsWithUserPreference
    }

    public enum ClusterDasConfigInfoServiceState
    {
        Disabled,
        Enabled
    }

    public enum ClusterDasConfigInfoVmMonitoringState
    {
        VmMonitoringDisabled,
        VmMonitoringOnly,
        VmAndAppMonitoring
    }

    public enum ClusterDasFdmAvailabilityState
    {
        Uninitialized,
        Election,
        Master,
        ConnectedToMaster,
        NetworkPartitionedFromMaster,
        NetworkIsolated,
        HostDown,
        InitializationError,
        UninitializationError,
        FdmUnreachable
    }

    public enum ClusterDasVmSettingsIsolationResponse
    {
        None,
        PowerOff,
        Shutdown,
        ClusterIsolationResponse
    }

    public enum ClusterDasVmSettingsRestartPriority
    {
        Disabled,
        Lowest,
        Low,
        Medium,
        High,
        Highest,
        ClusterRestartPriority
    }

    public enum ClusterHostInfraUpdateHaModeActionOperationType
    {
        EnterQuarantine,
        ExitQuarantine,
        EnterMaintenance
    }

    public enum ClusterInfraUpdateHaConfigInfoBehaviorType
    {
        Manual,
        Automated
    }

    public enum ClusterInfraUpdateHaConfigInfoRemediationType
    {
        QuarantineMode,
        MaintenanceMode
    }

    public enum ClusterPowerOnVmOption
    {
        OverrideAutomationLevel,
        ReserveResources
    }

    public enum ClusterProfileServiceType
    {
        DRS,
        HA,
        DPM,
        FT
    }

    public enum ClusterVmComponentProtectionSettingsStorageVmReaction
    {
        Disabled,
        Warning,
        RestartConservative,
        RestartAggressive,
        ClusterDefault
    }

    public enum ClusterVmComponentProtectionSettingsVmReactionOnAPDCleared
    {
        None,
        Reset,
        UseClusterDefault
    }

    public enum ClusterVmReadinessReadyCondition
    {
        None,
        PoweredOn,
        GuestHbStatusGreen,
        AppHbStatusGreen,
        UseClusterDefault
    }

    public enum CommunicationProtocol
    {
        Http,
        Https
    }

    public enum ComplianceResultStatus
    {
        Compliant,
        NonCompliant,
        Unknown,
        Running
    }

    public enum ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState
    {
        Licensed,
        Unlicensed,
        Unknown
    }

    public enum ConfigSpecOperation
    {
        Add,
        Edit,
        Remove
    }

    public enum CustomizationLicenseDataMode
    {
        PerServer,
        PerSeat
    }

    public enum CustomizationNetBIOSMode
    {
        EnableNetBIOSViaDhcp,
        EnableNetBIOS,
        DisableNetBIOS
    }

    public enum CustomizationSysprepRebootOption
    {
        Reboot,
        Noreboot,
        Shutdown
    }

    public enum DasConfigFaultDasConfigFaultReason
    {
        HostNetworkMisconfiguration,
        HostMisconfiguration,
        InsufficientPrivileges,
        NoPrimaryAgentAvailable,
        Other,
        NoDatastoresConfigured,
        CreateConfigVvolFailed,
        VSanNotSupportedOnHost,
        DasNetworkMisconfiguration
    }

    public enum DasVmPriority
    {
        Disabled,
        Low,
        Medium,
        High
    }

    public enum DatastoreAccessible
    {
        True,
        False
    }

    public enum DatastoreSummaryMaintenanceModeState
    {
        Normal,
        EnteringMaintenance,
        InMaintenance
    }

    public enum DayOfWeek
    {
        Sunday,
        Monday,
        Tuesday,
        Wednesday,
        Thursday,
        Friday,
        Saturday
    }

    public enum DeviceNotSupportedReason
    {
        Host,
        Guest
    }

    public enum DiagnosticManagerLogCreator
    {
        Vpxd,
        Vpxa,
        Hostd,
        Serverd,
        Install,
        VpxClient,
        RecordLog
    }

    public enum DiagnosticManagerLogFormat
    {
        Plain
    }

    public enum DiagnosticPartitionStorageType
    {
        DirectAttached,
        NetworkAttached
    }

    public enum DiagnosticPartitionType
    {
        SingleHost,
        MultiHost
    }

    public enum DisallowedChangeByServiceDisallowedChange
    {
        HotExtendDisk
    }

    public enum DistributedVirtualPortgroupMetaTagName
    {
        DvsName,
        PortgroupName,
        PortIndex
    }

    public enum DistributedVirtualPortgroupPortgroupType
    {
        EarlyBinding,
        LateBinding,
        Ephemeral
    }

    public enum DistributedVirtualSwitchHostInfrastructureTrafficClass
    {
        Management,
        FaultTolerance,
        Vmotion,
        VirtualMachine,
        ISCSI,
        Nfs,
        Hbr,
        Vsan,
        Vdp
    }

    public enum DistributedVirtualSwitchHostMemberHostComponentState
    {
        Up,
        Pending,
        OutOfSync,
        Warning,
        Disconnected,
        Down
    }

    public enum DistributedVirtualSwitchNetworkResourceControlVersion
    {
        Version2,
        Version3
    }

    public enum DistributedVirtualSwitchNicTeamingPolicyMode
    {
        Loadbalance_ip,
        Loadbalance_srcmac,
        Loadbalance_srcid,
        Failover_explicit,
        Loadbalance_loadbased
    }

    public enum DistributedVirtualSwitchPortConnecteeConnecteeType
    {
        Pnic,
        VmVnic,
        HostConsoleVnic,
        HostVmkVnic
    }

    public enum DistributedVirtualSwitchProductSpecOperationType
    {
        PreInstall,
        Upgrade,
        NotifyAvailableUpgrade,
        ProceedWithUpgrade,
        UpdateBundleInfo
    }

    public enum DpmBehavior
    {
        Manual,
        Automated
    }

    public enum DrsBehavior
    {
        Manual,
        PartiallyAutomated,
        FullyAutomated
    }

    public enum DrsInjectorWorkloadCorrelationState
    {
        Correlated,
        Uncorrelated
    }

    public enum DrsRecommendationReasonCode
    {
        FairnessCpuAvg,
        FairnessMemAvg,
        JointAffin,
        AntiAffin,
        HostMaint
    }

    public enum DVPortStatusVmDirectPathGen2InactiveReasonNetwork
    {
        PortNptIncompatibleDvs,
        PortNptNoCompatibleNics,
        PortNptNoVirtualFunctionsAvailable,
        PortNptDisabledForPort
    }

    public enum DVPortStatusVmDirectPathGen2InactiveReasonOther
    {
        PortNptIncompatibleHost,
        PortNptIncompatibleConnectee
    }

    public enum DvsEventPortBlockState
    {
        Unset,
        Blocked,
        Unblocked,
        Unknown
    }

    public enum DvsFilterOnFailure
    {
        FailOpen,
        FailClosed
    }

    public enum DVSMacLimitPolicyType
    {
        Allow,
        Drop
    }

    public enum DvsNetworkRuleDirectionType
    {
        IncomingPackets,
        OutgoingPackets,
        Both
    }

    public enum EntityImportType
    {
        CreateEntityWithNewIdentifier,
        CreateEntityWithOriginalIdentifier,
        ApplyToEntitySpecified
    }

    public enum EntityType
    {
        DistributedVirtualSwitch,
        DistributedVirtualPortgroup
    }

    public enum EventAlarmExpressionComparisonOperator
    {
        Equals,
        NotEqualTo,
        StartsWith,
        DoesNotStartWith,
        EndsWith,
        DoesNotEndWith
    }

    public enum EventCategory
    {
        Info,
        Warning,
        Error,
        User
    }

    public enum EventEventSeverity
    {
        Error,
        Warning,
        Info,
        User
    }

    public enum EventFilterSpecRecursionOption
    {
        Self,
        Children,
        All
    }

    public enum FibreChannelPortType
    {
        Fabric,
        Loop,
        PointToPoint,
        Unknown
    }

    public enum FileSystemMountInfoVStorageSupportStatus
    {
        VStorageSupported,
        VStorageUnsupported,
        VStorageUnknown
    }

    public enum FolderDesiredHostState
    {
        Maintenance,
        Non_maintenance
    }

    public enum FtIssuesOnHostHostSelectionType
    {
        User,
        Vc,
        Drs
    }

    public enum GuestFileType
    {
        File,
        Directory,
        Symlink
    }

    public enum GuestInfoAppStateType
    {
        None,
        AppStateOk,
        AppStateNeedReset
    }

    public enum GuestOsDescriptorFirmwareType
    {
        Bios,
        Efi
    }

    public enum GuestOsDescriptorSupportLevel
    {
        Experimental,
        Legacy,
        Terminated,
        Supported,
        Unsupported,
        Deprecated,
        TechPreview
    }

    public enum GuestRegKeyWowSpec
    {
        WOWNative,
        WOW32,
        WOW64
    }

    public enum HealthUpdateInfoComponentType
    {
        Memory,
        Power,
        Fan,
        Network,
        Storage
    }

    public enum HostAccessMode
    {
        AccessNone,
        AccessAdmin,
        AccessNoAccess,
        AccessReadOnly,
        AccessOther
    }

    public enum HostActiveDirectoryAuthenticationCertificateDigest
    {
        SHA1
    }

    public enum HostActiveDirectoryInfoDomainMembershipStatus
    {
        Unknown,
        Ok,
        NoServers,
        ClientTrustBroken,
        ServerTrustBroken,
        InconsistentTrust,
        OtherProblem
    }

    public enum HostCapabilityFtUnsupportedReason
    {
        VMotionNotLicensed,
        MissingVMotionNic,
        MissingFTLoggingNic,
        FtNotLicensed,
        HaAgentIssue,
        UnsupportedProduct,
        CpuHvUnsupported,
        CpuHwmmuUnsupported,
        CpuHvDisabled
    }

    public enum HostCapabilityUnmapMethodSupported
    {
        Priority,
        Fixed,
        Dynamic
    }

    public enum HostCapabilityVmDirectPathGen2UnsupportedReason
    {
        HostNptIncompatibleProduct,
        HostNptIncompatibleHardware,
        HostNptDisabled
    }

    public enum HostCertificateManagerCertificateInfoCertificateStatus
    {
        Unknown,
        Expired,
        Expiring,
        ExpiringShortly,
        ExpirationImminent,
        Good
    }

    public enum HostConfigChangeMode
    {
        Modify,
        Replace
    }

    public enum HostConfigChangeOperation
    {
        Add,
        Remove,
        Edit,
        Ignore
    }

    public enum HostCpuPackageVendor
    {
        Unknown,
        Intel,
        Amd,
        Hygon
    }

    public enum HostCpuPowerManagementInfoPolicyType
    {
        Off,
        StaticPolicy,
        DynamicPolicy
    }

    public enum HostCryptoState
    {
        Incapable,
        Prepared,
        Safe
    }

    public enum HostDasErrorEventHostDasErrorReason
    {
        ConfigFailed,
        Timeout,
        CommunicationInitFailed,
        HealthCheckScriptFailed,
        AgentFailed,
        AgentShutdown,
        IsolationAddressUnpingable,
        Other
    }

    public enum HostDigestInfoDigestMethodType
    {
        SHA1,
        MD5,
        SHA256,
        SHA384,
        SHA512,
        SM3_256
    }

    public enum HostDisconnectedEventReasonCode
    {
        SslThumbprintVerifyFailed,
        LicenseExpired,
        AgentUpgrade,
        UserRequest,
        InsufficientLicenses,
        AgentOutOfDate,
        PasswordDecryptFailure,
        Unknown,
        VcVRAMCapacityExceeded
    }

    public enum HostDiskPartitionInfoPartitionFormat
    {
        Gpt,
        Mbr,
        Unknown
    }

    public enum HostDiskPartitionInfoType
    {
        None,
        Vmfs,
        LinuxNative,
        LinuxSwap,
        Extended,
        Ntfs,
        VmkDiagnostic,
        Vffs
    }

    public enum HostFeatureVersionKey
    {
        FaultTolerance
    }

    public enum HostFileSystemVolumeFileSystemType
    {
        VMFS,
        NFS,
        NFS41,
        CIFS,
        Vsan,
        VFFS,
        VVOL,
        PMEM,
        OTHER
    }

    public enum HostFirewallRuleDirection
    {
        Inbound,
        Outbound
    }

    public enum HostFirewallRulePortType
    {
        Src,
        Dst
    }

    public enum HostFirewallRuleProtocol
    {
        Tcp,
        Udp
    }

    public enum HostGraphicsConfigGraphicsType
    {
        Shared,
        SharedDirect
    }

    public enum HostGraphicsConfigSharedPassthruAssignmentPolicy
    {
        Performance,
        Consolidation
    }

    public enum HostGraphicsInfoGraphicsType
    {
        Basic,
        Shared,
        Direct,
        SharedDirect
    }

    public enum HostHardwareElementStatus
    {
        Unknown,
        Green,
        Yellow,
        Red
    }

    public enum HostHasComponentFailureHostComponentType
    {
        Datastore
    }

    public enum HostImageAcceptanceLevel
    {
        Vmware_certified,
        Vmware_accepted,
        Partner,
        Community
    }

    public enum HostIncompatibleForFaultToleranceReason
    {
        Product,
        Processor
    }

    public enum HostIncompatibleForRecordReplayReason
    {
        Product,
        Processor
    }

    public enum HostInternetScsiHbaChapAuthenticationType
    {
        ChapProhibited,
        ChapDiscouraged,
        ChapPreferred,
        ChapRequired
    }

    public enum HostInternetScsiHbaDigestType
    {
        DigestProhibited,
        DigestDiscouraged,
        DigestPreferred,
        DigestRequired
    }

    public enum HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType
    {
        DHCP,
        AutoConfigured,
        Static,
        Other
    }

    public enum HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation
    {
        Add,
        Remove
    }

    public enum HostInternetScsiHbaNetworkBindingSupportType
    {
        Notsupported,
        Optional,
        Required
    }

    public enum HostInternetScsiHbaStaticTargetTargetDiscoveryMethod
    {
        StaticMethod,
        SendTargetMethod,
        SlpMethod,
        IsnsMethod,
        UnknownMethod
    }

    public enum HostIpConfigIpV6AddressConfigType
    {
        Other,
        Manual,
        Dhcp,
        Linklayer,
        Random
    }

    public enum HostIpConfigIpV6AddressStatus
    {
        Preferred,
        Deprecated,
        Invalid,
        Inaccessible,
        Unknown,
        Tentative,
        Duplicate
    }

    public enum HostLicensableResourceKey
    {
        NumCpuPackages,
        NumCpuCores,
        MemorySize,
        MemoryForVms,
        NumVmsStarted,
        NumVmsStarting
    }

    public enum HostLockdownMode
    {
        LockdownDisabled,
        LockdownNormal,
        LockdownStrict
    }

    public enum HostLowLevelProvisioningManagerFileType
    {
        File,
        VirtualDisk,
        Directory
    }

    public enum HostLowLevelProvisioningManagerReloadTarget
    {
        CurrentConfig,
        SnapshotConfig
    }

    public enum HostMountInfoInaccessibleReason
    {
        AllPathsDown_Start,
        AllPathsDown_Timeout,
        PermanentDeviceLoss
    }

    public enum HostMountMode
    {
        ReadWrite,
        ReadOnly
    }

    public enum HostNasVolumeSecurityType
    {
        AUTH_SYS,
        SEC_KRB5,
        SEC_KRB5I
    }

    public enum HostNetStackInstanceCongestionControlAlgorithmType
    {
        Newreno,
        Cubic
    }

    public enum HostNetStackInstanceSystemStackKey
    {
        DefaultTcpipStack,
        Vmotion,
        VSphereProvisioning
    }

    public enum HostNumericSensorHealthState
    {
        Unknown,
        Green,
        Yellow,
        Red
    }

    public enum HostNumericSensorType
    {
        Fan,
        Power,
        Temperature,
        Voltage,
        Other,
        Processor,
        Memory,
        Storage,
        SystemBoard,
        Battery,
        Bios,
        Cable,
        Watchdog
    }

    public enum HostOpaqueSwitchOpaqueSwitchState
    {
        Up,
        Warning,
        Down
    }

    public enum HostPatchManagerInstallState
    {
        HostRestarted,
        ImageActive
    }

    public enum HostPatchManagerIntegrityStatus
    {
        Validated,
        KeyNotFound,
        KeyRevoked,
        KeyExpired,
        DigestMismatch,
        NotEnoughSignatures,
        ValidationError
    }

    public enum HostPatchManagerReason
    {
        Obsoleted,
        MissingPatch,
        MissingLib,
        HasDependentPatch,
        ConflictPatch,
        ConflictLib
    }

    public enum HostPowerOperationType
    {
        PowerOn,
        PowerOff
    }

    public enum HostProfileManagerAnswerFileStatus
    {
        Valid,
        Invalid,
        Unknown
    }

    public enum HostProfileManagerCompositionResultResultElementStatus
    {
        Success,
        Error
    }

    public enum HostProfileManagerCompositionValidationResultResultElementStatus
    {
        Success,
        Error
    }

    public enum HostProfileManagerTaskListRequirement
    {
        MaintenanceModeRequired,
        RebootRequired
    }

    public enum HostProfileValidationFailureInfoUpdateType
    {
        HostBased,
        Import,
        Edit,
        Compose
    }

    public enum HostProfileValidationState
    {
        Ready,
        Running,
        Failed
    }

    public enum HostProtocolEndpointPEType
    {
        Block,
        Nas
    }

    public enum HostProtocolEndpointProtocolEndpointType
    {
        Scsi,
        Nfs,
        Nfs4x
    }

    public enum HostReplayUnsupportedReason
    {
        IncompatibleProduct,
        IncompatibleCpu,
        HvDisabled,
        CpuidLimitSet,
        OldBIOS,
        Unknown
    }

    public enum HostRuntimeInfoNetStackInstanceRuntimeInfoState
    {
        Inactive,
        Active,
        Deactivating,
        Activating
    }

    public enum HostServicePolicy
    {
        On,
        Automatic,
        Off
    }

    public enum HostSnmpAgentCapability
    {
        COMPLETE,
        DIAGNOSTICS,
        CONFIGURATION
    }

    public enum HostStandbyMode
    {
        Entering,
        Exiting,
        In,
        None
    }

    public enum HostSystemConnectionState
    {
        Connected,
        NotResponding,
        Disconnected
    }

    public enum HostSystemIdentificationInfoIdentifier
    {
        AssetTag,
        ServiceTag,
        OemSpecificString,
        EnclosureSerialNumberTag,
        SerialNumberTag
    }

    public enum HostSystemPowerState
    {
        PoweredOn,
        PoweredOff,
        StandBy,
        Unknown
    }

    public enum HostSystemRemediationStateState
    {
        RemediationReady,
        PrecheckRemediationRunning,
        PrecheckRemediationComplete,
        PrecheckRemediationFailed,
        RemediationRunning,
        RemediationFailed
    }

    public enum HostTpmAttestationInfoAcceptanceStatus
    {
        NotAccepted,
        Accepted
    }

    public enum HostUnresolvedVmfsExtentUnresolvedReason
    {
        DiskIdMismatch,
        UuidConflict
    }

    public enum HostUnresolvedVmfsResolutionSpecVmfsUuidResolution
    {
        Resignature,
        ForceMount
    }

    public enum HostVirtualNicManagerNicType
    {
        Vmotion,
        FaultToleranceLogging,
        VSphereReplication,
        VSphereReplicationNFC,
        Management,
        Vsan,
        VSphereProvisioning,
        VsanWitness
    }

    public enum HostVmciAccessManagerMode
    {
        Grant,
        Replace,
        Revoke
    }

    public enum HostVmfsVolumeUnmapBandwidthPolicy
    {
        Fixed,
        Dynamic
    }

    public enum HostVmfsVolumeUnmapPriority
    {
        None,
        Low
    }

    public enum HttpNfcLeaseManifestEntryChecksumType
    {
        Sha1,
        Sha256
    }

    public enum HttpNfcLeaseMode
    {
        PushOrGet,
        Pull
    }

    public enum HttpNfcLeaseState
    {
        Initializing,
        Ready,
        Done,
        Error
    }

    public enum IncompatibleHostForVmReplicationIncompatibleReason
    {
        Rpo,
        NetCompression
    }

    public enum InternetScsiSnsDiscoveryMethod
    {
        IsnsStatic,
        IsnsDhcp,
        IsnsSlp
    }

    public enum InvalidDasConfigArgumentEntryForInvalidArgument
    {
        AdmissionControl,
        UserHeartbeatDs,
        VmConfig
    }

    public enum InvalidProfileReferenceHostReason
    {
        IncompatibleVersion,
        MissingReferenceHost
    }

    public enum IoFilterOperation
    {
        Install,
        Uninstall,
        Upgrade
    }

    public enum IoFilterType
    {
        Cache,
        Replication,
        Encryption,
        Compression,
        Inspection,
        DatastoreIoControl,
        DataProvider
    }

    public enum IscsiPortInfoPathStatus
    {
        NotUsed,
        Active,
        StandBy,
        LastActive
    }

    public enum LatencySensitivitySensitivityLevel
    {
        Low,
        Normal,
        Medium,
        High,
        Custom
    }

    public enum LicenseAssignmentFailedReason
    {
        KeyEntityMismatch,
        DowngradeDisallowed,
        InventoryNotManageableByVirtualCenter,
        HostsUnmanageableByVirtualCenterWithoutLicenseServer
    }

    public enum LicenseFeatureInfoSourceRestriction
    {
        Unrestricted,
        Served,
        File
    }

    public enum LicenseFeatureInfoState
    {
        Enabled,
        Disabled,
        Optional
    }

    public enum LicenseFeatureInfoUnit
    {
        Host,
        CpuCore,
        CpuPackage,
        Server,
        Vm
    }

    public enum LicenseManagerLicenseKey
    {
        EsxFull,
        EsxVmtn,
        EsxExpress,
        San,
        Iscsi,
        Nas,
        Vsmp,
        Backup,
        Vc,
        VcExpress,
        EsxHost,
        GsxHost,
        ServerHost,
        DrsPower,
        Vmotion,
        Drs,
        Das
    }

    public enum LicenseManagerState
    {
        Initializing,
        Normal,
        Marginal,
        Fault
    }

    public enum LicenseReservationInfoState
    {
        NotUsed,
        NoLicense,
        UnlicensedUse,
        Licensed
    }

    public enum LinkDiscoveryProtocolConfigOperationType
    {
        None,
        Listen,
        Advertise,
        Both
    }

    public enum LinkDiscoveryProtocolConfigProtocolType
    {
        Cdp,
        Lldp
    }

    public enum ManagedEntityStatus
    {
        Gray,
        Green,
        Yellow,
        Red
    }

    public enum MetricAlarmOperator
    {
        IsAbove,
        IsBelow
    }

    public enum MultipathState
    {
        Standby,
        Active,
        Disabled,
        Dead,
        Unknown
    }

    public enum NetBIOSConfigInfoMode
    {
        Unknown,
        Enabled,
        Disabled,
        EnabledViaDHCP
    }

    public enum NetIpConfigInfoIpAddressOrigin
    {
        Other,
        Manual,
        Dhcp,
        Linklayer,
        Random
    }

    public enum NetIpConfigInfoIpAddressStatus
    {
        Preferred,
        Deprecated,
        Invalid,
        Inaccessible,
        Unknown,
        Tentative,
        Duplicate
    }

    public enum NetIpStackInfoEntryType
    {
        Other,
        Invalid,
        Dynamic,
        Manual
    }

    public enum NetIpStackInfoPreference
    {
        Reserved,
        Low,
        Medium,
        High
    }

    public enum NotSupportedDeviceForFTDeviceType
    {
        VirtualVmxnet3,
        ParaVirtualSCSIController
    }

    public enum NumVirtualCpusIncompatibleReason
    {
        RecordReplay,
        FaultTolerance
    }

    public enum NvdimmInterleaveSetState
    {
        Invalid,
        Active
    }

    public enum NvdimmNamespaceDetailsHealthStatus
    {
        Normal,
        Missing,
        LabelMissing,
        InterleaveBroken,
        LabelInconsistent
    }

    public enum NvdimmNamespaceDetailsState
    {
        Invalid,
        NotInUse,
        InUse
    }

    public enum NvdimmNamespaceHealthStatus
    {
        Normal,
        Missing,
        LabelMissing,
        InterleaveBroken,
        LabelInconsistent,
        BttCorrupt,
        BadBlockSize
    }

    public enum NvdimmNamespaceState
    {
        Invalid,
        NotInUse,
        InUse
    }

    public enum NvdimmNamespaceType
    {
        BlockNamespace,
        PersistentNamespace
    }

    public enum NvdimmNvdimmHealthInfoState
    {
        Normal,
        Error
    }

    public enum NvdimmRangeType
    {
        VolatileRange,
        PersistentRange,
        ControlRange,
        BlockRange,
        VolatileVirtualDiskRange,
        VolatileVirtualCDRange,
        PersistentVirtualDiskRange,
        PersistentVirtualCDRange
    }

    public enum ObjectUpdateKind
    {
        Modify,
        Enter,
        Leave
    }

    public enum OvfConsumerOstNodeType
    {
        Envelope,
        VirtualSystem,
        VirtualSystemCollection
    }

    public enum OvfCreateImportSpecParamsDiskProvisioningType
    {
        MonolithicSparse,
        MonolithicFlat,
        TwoGbMaxExtentSparse,
        TwoGbMaxExtentFlat,
        Thin,
        Thick,
        SeSparse,
        EagerZeroedThick,
        Sparse,
        Flat
    }

    public enum PerfFormat
    {
        Normal,
        Csv
    }

    public enum PerformanceManagerUnit
    {
        Percent,
        KiloBytes,
        MegaBytes,
        MegaHertz,
        Number,
        Microsecond,
        Millisecond,
        Second,
        KiloBytesPerSecond,
        MegaBytesPerSecond,
        Watt,
        Joule,
        TeraBytes
    }

    public enum PerfStatsType
    {
        Absolute,
        Delta,
        Rate
    }

    public enum PerfSummaryType
    {
        Average,
        Maximum,
        Minimum,
        Latest,
        Summation,
        None
    }

    public enum PhysicalNicResourcePoolSchedulerDisallowedReason
    {
        UserOptOut,
        HardwareUnsupported
    }

    public enum PhysicalNicVmDirectPathGen2SupportedMode
    {
        Upt
    }

    public enum PlacementAffinityRuleRuleScope
    {
        Cluster,
        Host,
        StoragePod,
        Datastore
    }

    public enum PlacementAffinityRuleRuleType
    {
        Affinity,
        AntiAffinity,
        SoftAffinity,
        SoftAntiAffinity
    }

    public enum PlacementSpecPlacementType
    {
        Create,
        Reconfigure,
        Relocate,
        Clone
    }

    public enum PortGroupConnecteeType
    {
        VirtualMachine,
        SystemManagement,
        Host,
        Unknown
    }

    public enum ProfileExecuteResultStatus
    {
        Success,
        NeedInput,
        Error
    }

    public enum ProfileNumericComparator
    {
        LessThan,
        LessThanEqual,
        Equal,
        NotEqual,
        GreaterThanEqual,
        GreaterThan
    }

    public enum ProfileParameterMetadataRelationType
    {
        Dynamic_relation,
        Extensible_relation,
        Localizable_relation,
        Static_relation,
        Validation_relation
    }

    public enum PropertyChangeOp
    {
        Add,
        Remove,
        Assign,
        IndirectRemove
    }

    public enum QuarantineModeFaultFaultType
    {
        NoCompatibleNonQuarantinedHost,
        CorrectionDisallowed,
        CorrectionImpact
    }

    public enum QuiesceMode
    {
        Application,
        Filesystem,
        None
    }

    public enum RecommendationReasonCode
    {
        FairnessCpuAvg,
        FairnessMemAvg,
        JointAffin,
        AntiAffin,
        HostMaint,
        EnterStandby,
        ReservationCpu,
        ReservationMem,
        PowerOnVm,
        PowerSaving,
        IncreaseCapacity,
        CheckResource,
        UnreservedCapacity,
        VmHostHardAffinity,
        VmHostSoftAffinity,
        BalanceDatastoreSpaceUsage,
        BalanceDatastoreIOLoad,
        BalanceDatastoreIOPSReservation,
        DatastoreMaint,
        VirtualDiskJointAffin,
        VirtualDiskAntiAffin,
        DatastoreSpaceOutage,
        StoragePlacement,
        IolbDisabledInternal,
        XvmotionPlacement,
        NetworkBandwidthReservation,
        HostInDegradation,
        HostExitDegradation,
        MaxVmsConstraint,
        FtConstraints
    }

    public enum RecommendationType
    {
        V1
    }

    public enum ReplicationDiskConfigFaultReasonForFault
    {
        DiskNotFound,
        DiskTypeNotSupported,
        InvalidDiskKey,
        InvalidDiskReplicationId,
        DuplicateDiskReplicationId,
        InvalidPersistentFilePath,
        ReconfigureDiskReplicationIdNotAllowed
    }

    public enum ReplicationVmConfigFaultReasonForFault
    {
        IncompatibleHwVersion,
        InvalidVmReplicationId,
        InvalidGenerationNumber,
        OutOfBoundsRpoValue,
        InvalidDestinationIpAddress,
        InvalidDestinationPort,
        InvalidExtraVmOptions,
        StaleGenerationNumber,
        ReconfigureVmReplicationIdNotAllowed,
        CannotRetrieveVmReplicationConfiguration,
        ReplicationAlreadyEnabled,
        InvalidPriorConfiguration,
        ReplicationNotEnabled,
        ReplicationConfigurationFailed,
        EncryptedVm,
        InvalidThumbprint,
        IncompatibleDevice
    }

    public enum ReplicationVmFaultReasonForFault
    {
        NotConfigured,
        PoweredOff,
        Suspended,
        PoweredOn,
        OfflineReplicating,
        InvalidState,
        InvalidInstanceId,
        CloseDiskError,
        GroupExist
    }

    public enum ReplicationVmInProgressFaultActivity
    {
        FullSync,
        Delta
    }

    public enum ReplicationVmState
    {
        None,
        Paused,
        Syncing,
        Idle,
        Active,
        Error
    }

    public enum ScheduledHardwareUpgradeInfoHardwareUpgradePolicy
    {
        Never,
        OnSoftPowerOff,
        Always
    }

    public enum ScheduledHardwareUpgradeInfoHardwareUpgradeStatus
    {
        None,
        Pending,
        Success,
        Failed
    }

    public enum ScsiDiskType
    {
        Native512,
        Emulated512,
        Native4k,
        SoftwareEmulated4k,
        Unknown
    }

    public enum ScsiLunDescriptorQuality
    {
        HighQuality,
        MediumQuality,
        LowQuality,
        UnknownQuality
    }

    public enum ScsiLunState
    {
        UnknownState,
        Ok,
        Error,
        Off,
        Quiesced,
        Degraded,
        LostCommunication,
        Timeout
    }

    public enum ScsiLunType
    {
        Disk,
        Tape,
        Printer,
        Processor,
        Worm,
        Cdrom,
        Scanner,
        OpticalDevice,
        MediaChanger,
        Communications,
        StorageArrayController,
        Enclosure,
        Unknown
    }

    public enum ScsiLunVStorageSupportStatus
    {
        VStorageSupported,
        VStorageUnsupported,
        VStorageUnknown
    }

    public enum SessionManagerHttpServiceRequestSpecMethod
    {
        HttpOptions,
        HttpGet,
        HttpHead,
        HttpPost,
        HttpPut,
        HttpDelete,
        HttpTrace,
        HttpConnect
    }

    public enum SharesLevel
    {
        Low,
        Normal,
        High,
        Custom
    }

    public enum SimpleCommandEncoding
    {
        CSV,
        HEX,
        STRING
    }

    public enum SlpDiscoveryMethod
    {
        SlpDhcp,
        SlpAutoUnicast,
        SlpAutoMulticast,
        SlpManual
    }

    public enum SoftwarePackageConstraint
    {
        Equals,
        LessThan,
        LessThanEqual,
        GreaterThanEqual,
        GreaterThan
    }

    public enum SoftwarePackageVibType
    {
        Bootbank,
        Tools,
        Meta
    }

    public enum StateAlarmOperator
    {
        IsEqual,
        IsUnequal
    }

    public enum StorageDrsPodConfigInfoBehavior
    {
        Manual,
        Automated
    }

    public enum StorageDrsSpaceLoadBalanceConfigSpaceThresholdMode
    {
        Utilization,
        FreeSpace
    }

    public enum StorageIORMThresholdMode
    {
        Automatic,
        Manual
    }

    public enum StoragePlacementSpecPlacementType
    {
        Create,
        Reconfigure,
        Relocate,
        Clone
    }

    public enum TaskFilterSpecRecursionOption
    {
        Self,
        Children,
        All
    }

    public enum TaskFilterSpecTimeOption
    {
        QueuedTime,
        StartedTime,
        CompletedTime
    }

    public enum TaskInfoState
    {
        Queued,
        Running,
        Success,
        Error
    }

    public enum ThirdPartyLicenseAssignmentFailedReason
    {
        LicenseAssignmentFailed,
        ModuleNotInstalled
    }

    public enum UpgradePolicy
    {
        Manual,
        UpgradeAtPowerCycle
    }

    public enum ValidateMigrationTestType
    {
        SourceTests,
        CompatibilityTests,
        DiskAccessibilityTests,
        ResourceTests
    }

    public enum VAppAutoStartAction
    {
        None,
        PowerOn,
        PowerOff,
        GuestShutdown,
        Suspend
    }

    public enum VAppCloneSpecProvisioningType
    {
        SameAsSource,
        Thin,
        Thick
    }

    public enum VAppIPAssignmentInfoAllocationSchemes
    {
        Dhcp,
        Ovfenv
    }

    public enum VAppIPAssignmentInfoIpAllocationPolicy
    {
        DhcpPolicy,
        TransientPolicy,
        FixedPolicy,
        FixedAllocatedPolicy
    }

    public enum VAppIPAssignmentInfoProtocols
    {
        IPv4,
        IPv6
    }

    public enum VchaClusterMode
    {
        Enabled,
        Disabled,
        Maintenance
    }

    public enum VchaClusterState
    {
        Healthy,
        Degraded,
        Isolated
    }

    public enum VchaNodeRole
    {
        Active,
        Passive,
        Witness
    }

    public enum VchaNodeState
    {
        Up,
        Down
    }

    public enum VchaState
    {
        Configured,
        NotConfigured,
        Invalid,
        Prepared
    }

    public enum VFlashModuleNotSupportedReason
    {
        CacheModeNotSupported,
        CacheConsistencyTypeNotSupported,
        CacheBlockSizeNotSupported,
        CacheReservationNotSupported,
        DiskSizeNotSupported
    }

    public enum VimVersion
    {
        Vim67,
        Vim60,
        Vim65
    }

    public enum VirtualAppVAppState
    {
        Started,
        Stopped,
        Starting,
        Stopping
    }

    public enum VirtualDeviceConfigSpecFileOperation
    {
        Create,
        Destroy,
        Replace
    }

    public enum VirtualDeviceConfigSpecOperation
    {
        Add,
        Remove,
        Edit
    }

    public enum VirtualDeviceConnectInfoMigrateConnectOp
    {
        Connect,
        Disconnect,
        Unset
    }

    public enum VirtualDeviceConnectInfoStatus
    {
        Ok,
        RecoverableError,
        UnrecoverableError,
        Untried
    }

    public enum VirtualDeviceFileExtension
    {
        Iso,
        Flp,
        Vmdk,
        Dsk,
        Rdm
    }

    public enum VirtualDeviceURIBackingOptionDirection
    {
        Server,
        Client
    }

    public enum VirtualDiskAdapterType
    {
        Ide,
        BusLogic,
        LsiLogic
    }

    public enum VirtualDiskCompatibilityMode
    {
        VirtualMode,
        PhysicalMode
    }

    public enum VirtualDiskDeltaDiskFormat
    {
        RedoLogFormat,
        NativeFormat,
        SeSparseFormat
    }

    public enum VirtualDiskDeltaDiskFormatVariant
    {
        VmfsSparseVariant,
        VsanSparseVariant
    }

    public enum VirtualDiskMode
    {
        Persistent,
        Nonpersistent,
        Undoable,
        Independent_persistent,
        Independent_nonpersistent,
        Append
    }

    public enum VirtualDiskRuleSpecRuleType
    {
        Affinity,
        AntiAffinity,
        Disabled
    }

    public enum VirtualDiskSharing
    {
        SharingNone,
        SharingMultiWriter
    }

    public enum VirtualDiskType
    {
        Preallocated,
        Thin,
        SeSparse,
        Rdm,
        Rdmp,
        Raw,
        Delta,
        Sparse2Gb,
        Thick2Gb,
        EagerZeroedThick,
        SparseMonolithic,
        FlatMonolithic,
        Thick
    }

    public enum VirtualDiskVFlashCacheConfigInfoCacheConsistencyType
    {
        Strong,
        Weak
    }

    public enum VirtualDiskVFlashCacheConfigInfoCacheMode
    {
        Write_thru,
        Write_back
    }

    public enum VirtualEthernetCardLegacyNetworkDeviceName
    {
        Bridged,
        Nat,
        Hostonly
    }

    public enum VirtualEthernetCardMacType
    {
        Manual,
        Generated,
        Assigned
    }

    public enum VirtualMachineAppHeartbeatStatusType
    {
        AppStatusGray,
        AppStatusGreen,
        AppStatusRed
    }

    public enum VirtualMachineBootOptionsNetworkBootProtocolType
    {
        Ipv4,
        Ipv6
    }

    public enum VirtualMachineConfigInfoNpivWwnType
    {
        Vc,
        Host,
        External
    }

    public enum VirtualMachineConfigInfoSwapPlacementType
    {
        Inherit,
        VmDirectory,
        HostLocal
    }

    public enum VirtualMachineConfigSpecEncryptedVMotionModes
    {
        Disabled,
        Opportunistic,
        Required
    }

    public enum VirtualMachineConfigSpecNpivWwnOp
    {
        Generate,
        Set,
        Remove,
        Extend
    }

    public enum VirtualMachineConnectionState
    {
        Connected,
        Disconnected,
        Orphaned,
        Inaccessible,
        Invalid
    }

    public enum VirtualMachineCryptoState
    {
        Unlocked,
        Locked
    }

    public enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther
    {
        VmNptIncompatibleHost,
        VmNptIncompatibleNetwork
    }

    public enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm
    {
        VmNptIncompatibleGuest,
        VmNptIncompatibleGuestDriver,
        VmNptIncompatibleAdapterType,
        VmNptDisabledOrDisconnectedAdapter,
        VmNptIncompatibleAdapterFeatures,
        VmNptIncompatibleBackingType,
        VmNptInsufficientMemoryReservation,
        VmNptFaultToleranceOrRecordReplayConfigured,
        VmNptConflictingIOChainConfigured,
        VmNptMonitorBlocks,
        VmNptConflictingOperationInProgress,
        VmNptRuntimeError,
        VmNptOutOfIntrVector,
        VmNptVMCIActive
    }

    public enum VirtualMachineFaultToleranceState
    {
        NotConfigured,
        Disabled,
        Enabled,
        NeedSecondary,
        Starting,
        Running
    }

    public enum VirtualMachineFaultToleranceType
    {
        Unset,
        RecordReplay,
        Checkpointing
    }

    public enum VirtualMachineFileLayoutExFileType
    {
        Config,
        ExtendedConfig,
        DiskDescriptor,
        DiskExtent,
        DigestDescriptor,
        DigestExtent,
        DiskReplicationState,
        Log,
        Stat,
        NamespaceData,
        Nvram,
        SnapshotData,
        SnapshotMemory,
        SnapshotList,
        SnapshotManifestList,
        Suspend,
        SuspendMemory,
        Swap,
        Uwswap,
        Core,
        Screenshot,
        FtMetadata,
        GuestCustomization
    }

    public enum VirtualMachineFlagInfoMonitorType
    {
        Release,
        Debug,
        Stats
    }

    public enum VirtualMachineFlagInfoVirtualExecUsage
    {
        HvAuto,
        HvOn,
        HvOff
    }

    public enum VirtualMachineFlagInfoVirtualMmuUsage
    {
        Automatic,
        On,
        Off
    }

    public enum VirtualMachineForkConfigInfoChildType
    {
        None,
        Persistent,
        Nonpersistent
    }

    public enum VirtualMachineGuestOsFamily
    {
        WindowsGuest,
        LinuxGuest,
        NetwareGuest,
        SolarisGuest,
        DarwinGuestFamily,
        OtherGuestFamily
    }

    public enum VirtualMachineGuestOsIdentifier
    {
        DosGuest,
        Win31Guest,
        Win95Guest,
        Win98Guest,
        WinMeGuest,
        WinNTGuest,
        Win2000ProGuest,
        Win2000ServGuest,
        Win2000AdvServGuest,
        WinXPHomeGuest,
        WinXPProGuest,
        WinXPPro64Guest,
        WinNetWebGuest,
        WinNetStandardGuest,
        WinNetEnterpriseGuest,
        WinNetDatacenterGuest,
        WinNetBusinessGuest,
        WinNetStandard64Guest,
        WinNetEnterprise64Guest,
        WinLonghornGuest,
        WinLonghorn64Guest,
        WinNetDatacenter64Guest,
        WinVistaGuest,
        WinVista64Guest,
        Windows7Guest,
        Windows7_64Guest,
        Windows7Server64Guest,
        Windows8Guest,
        Windows8_64Guest,
        Windows8Server64Guest,
        Windows9Guest,
        Windows9_64Guest,
        Windows9Server64Guest,
        WindowsHyperVGuest,
        FreebsdGuest,
        Freebsd64Guest,
        Freebsd11Guest,
        Freebsd11_64Guest,
        Freebsd12Guest,
        Freebsd12_64Guest,
        RedhatGuest,
        Rhel2Guest,
        Rhel3Guest,
        Rhel3_64Guest,
        Rhel4Guest,
        Rhel4_64Guest,
        Rhel5Guest,
        Rhel5_64Guest,
        Rhel6Guest,
        Rhel6_64Guest,
        Rhel7Guest,
        Rhel7_64Guest,
        Rhel8_64Guest,
        CentosGuest,
        Centos64Guest,
        Centos6Guest,
        Centos6_64Guest,
        Centos7Guest,
        Centos7_64Guest,
        Centos8_64Guest,
        OracleLinuxGuest,
        OracleLinux64Guest,
        OracleLinux6Guest,
        OracleLinux6_64Guest,
        OracleLinux7Guest,
        OracleLinux7_64Guest,
        OracleLinux8_64Guest,
        SuseGuest,
        Suse64Guest,
        SlesGuest,
        Sles64Guest,
        Sles10Guest,
        Sles10_64Guest,
        Sles11Guest,
        Sles11_64Guest,
        Sles12Guest,
        Sles12_64Guest,
        Sles15_64Guest,
        Nld9Guest,
        OesGuest,
        SjdsGuest,
        MandrakeGuest,
        MandrivaGuest,
        Mandriva64Guest,
        TurboLinuxGuest,
        TurboLinux64Guest,
        UbuntuGuest,
        Ubuntu64Guest,
        Debian4Guest,
        Debian4_64Guest,
        Debian5Guest,
        Debian5_64Guest,
        Debian6Guest,
        Debian6_64Guest,
        Debian7Guest,
        Debian7_64Guest,
        Debian8Guest,
        Debian8_64Guest,
        Debian9Guest,
        Debian9_64Guest,
        Debian10Guest,
        Debian10_64Guest,
        Asianux3Guest,
        Asianux3_64Guest,
        Asianux4Guest,
        Asianux4_64Guest,
        Asianux5_64Guest,
        Asianux7_64Guest,
        Asianux8_64Guest,
        OpensuseGuest,
        Opensuse64Guest,
        FedoraGuest,
        Fedora64Guest,
        Coreos64Guest,
        VmwarePhoton64Guest,
        Other24xLinuxGuest,
        Other26xLinuxGuest,
        OtherLinuxGuest,
        Other3xLinuxGuest,
        Other4xLinuxGuest,
        GenericLinuxGuest,
        Other24xLinux64Guest,
        Other26xLinux64Guest,
        Other3xLinux64Guest,
        Other4xLinux64Guest,
        OtherLinux64Guest,
        Solaris6Guest,
        Solaris7Guest,
        Solaris8Guest,
        Solaris9Guest,
        Solaris10Guest,
        Solaris10_64Guest,
        Solaris11_64Guest,
        Os2Guest,
        EComStationGuest,
        EComStation2Guest,
        Netware4Guest,
        Netware5Guest,
        Netware6Guest,
        OpenServer5Guest,
        OpenServer6Guest,
        UnixWare7Guest,
        DarwinGuest,
        Darwin64Guest,
        Darwin10Guest,
        Darwin10_64Guest,
        Darwin11Guest,
        Darwin11_64Guest,
        Darwin12_64Guest,
        Darwin13_64Guest,
        Darwin14_64Guest,
        Darwin15_64Guest,
        Darwin16_64Guest,
        Darwin17_64Guest,
        Darwin18_64Guest,
        VmkernelGuest,
        Vmkernel5Guest,
        Vmkernel6Guest,
        Vmkernel65Guest,
        Amazonlinux2_64Guest,
        OtherGuest,
        OtherGuest64
    }

    public enum VirtualMachineGuestState
    {
        Running,
        ShuttingDown,
        Resetting,
        Standby,
        NotRunning,
        Unknown
    }

    public enum VirtualMachineHtSharing
    {
        Any,
        None,
        Internal
    }

    public enum VirtualMachineMemoryAllocationPolicy
    {
        SwapNone,
        SwapSome,
        SwapMost
    }

    public enum VirtualMachineMetadataManagerVmMetadataOp
    {
        Update,
        Remove
    }

    public enum VirtualMachineMetadataManagerVmMetadataOwnerOwner
    {
        ComVmwareVsphereHA
    }

    public enum VirtualMachineMovePriority
    {
        LowPriority,
        HighPriority,
        DefaultPriority
    }

    public enum VirtualMachineNeedSecondaryReason
    {
        Initializing,
        Divergence,
        LostConnection,
        PartialHardwareFailure,
        UserAction,
        CheckpointError,
        Other
    }

    public enum VirtualMachinePowerOffBehavior
    {
        PowerOff,
        Revert,
        Prompt,
        Take
    }

    public enum VirtualMachinePowerOpType
    {
        Soft,
        Hard,
        Preset
    }

    public enum VirtualMachinePowerState
    {
        PoweredOff,
        PoweredOn,
        Suspended
    }

    public enum VirtualMachineRecordReplayState
    {
        Recording,
        Replaying,
        Inactive
    }

    public enum VirtualMachineRelocateDiskMoveOptions
    {
        MoveAllDiskBackingsAndAllowSharing,
        MoveAllDiskBackingsAndDisallowSharing,
        MoveChildMostDiskBacking,
        CreateNewChildDiskBacking,
        MoveAllDiskBackingsAndConsolidate
    }

    public enum VirtualMachineRelocateTransformation
    {
        Flat,
        Sparse
    }

    public enum VirtualMachineScsiPassthroughType
    {
        Disk,
        Tape,
        Printer,
        Processor,
        Worm,
        Cdrom,
        Scanner,
        Optical,
        Media,
        Com,
        Raid,
        Unknown
    }

    public enum VirtualMachineStandbyActionType
    {
        Checkpoint,
        PowerOnSuspend
    }

    public enum VirtualMachineTargetInfoConfigurationTag
    {
        Compliant,
        ClusterWide
    }

    public enum VirtualMachineTicketType
    {
        Mks,
        Device,
        GuestControl,
        Webmks,
        GuestIntegrity
    }

    public enum VirtualMachineToolsInstallType
    {
        GuestToolsTypeUnknown,
        GuestToolsTypeMSI,
        GuestToolsTypeTar,
        GuestToolsTypeOSP,
        GuestToolsTypeOpenVMTools
    }

    public enum VirtualMachineToolsRunningStatus
    {
        GuestToolsNotRunning,
        GuestToolsRunning,
        GuestToolsExecutingScripts
    }

    public enum VirtualMachineToolsStatus
    {
        ToolsNotInstalled,
        ToolsNotRunning,
        ToolsOld,
        ToolsOk
    }

    public enum VirtualMachineToolsVersionStatus
    {
        GuestToolsNotInstalled,
        GuestToolsNeedUpgrade,
        GuestToolsCurrent,
        GuestToolsUnmanaged,
        GuestToolsTooOld,
        GuestToolsSupportedOld,
        GuestToolsSupportedNew,
        GuestToolsTooNew,
        GuestToolsBlacklisted
    }

    public enum VirtualMachineUsbInfoFamily
    {
        Audio,
        Hid,
        Hid_bootable,
        Physical,
        Communication,
        Imaging,
        Printer,
        Storage,
        Hub,
        Smart_card,
        Security,
        Video,
        Wireless,
        Bluetooth,
        Wusb,
        Pda,
        Vendor_specific,
        Other,
        UnknownFamily
    }

    public enum VirtualMachineUsbInfoSpeed
    {
        Low,
        Full,
        High,
        SuperSpeed,
        UnknownSpeed
    }

    public enum VirtualMachineVideoCardUse3dRenderer
    {
        Automatic,
        Software,
        Hardware
    }

    public enum VirtualMachineVMCIDeviceAction
    {
        Allow,
        Deny
    }

    public enum VirtualMachineVMCIDeviceDirection
    {
        Guest,
        Host,
        AnyDirection
    }

    public enum VirtualMachineVMCIDeviceProtocol
    {
        Hypervisor,
        Doorbell,
        Queuepair,
        Datagram,
        Stream,
        AnyProtocol
    }

    public enum VirtualMachineWindowsQuiesceSpecVssBackupContext
    {
        Ctx_auto,
        Ctx_backup,
        Ctx_file_share_backup
    }

    public enum VirtualPointingDeviceHostChoice
    {
        Autodetect,
        IntellimouseExplorer,
        IntellimousePs2,
        LogitechMouseman,
        Microsoft_serial,
        MouseSystems,
        MousemanSerial,
        Ps2
    }

    public enum VirtualSCSISharing
    {
        NoSharing,
        VirtualSharing,
        PhysicalSharing
    }

    public enum VirtualSerialPortEndPoint
    {
        Client,
        Server
    }

    public enum VirtualVmxnet3VrdmaOptionDeviceProtocols
    {
        Rocev1,
        Rocev2
    }

    public enum VmDasBeingResetEventReasonCode
    {
        VmtoolsHeartbeatFailure,
        AppHeartbeatFailure,
        AppImmediateResetRequest,
        VmcpResetApdCleared
    }

    public enum VmFailedStartingSecondaryEventFailureReason
    {
        IncompatibleHost,
        LoginFailed,
        RegisterVmFailed,
        MigrateFailed
    }

    public enum VmFaultToleranceConfigIssueReasonForIssue
    {
        HaNotEnabled,
        MoreThanOneSecondary,
        RecordReplayNotSupported,
        ReplayNotSupported,
        TemplateVm,
        MultipleVCPU,
        HostInactive,
        FtUnsupportedHardware,
        FtUnsupportedProduct,
        MissingVMotionNic,
        MissingFTLoggingNic,
        ThinDisk,
        VerifySSLCertificateFlagNotSet,
        HasSnapshots,
        NoConfig,
        FtSecondaryVm,
        HasLocalDisk,
        EsxAgentVm,
        Video3dEnabled,
        HasUnsupportedDisk,
        InsufficientBandwidth,
        HasNestedHVConfiguration,
        HasVFlashConfiguration,
        UnsupportedProduct,
        CpuHvUnsupported,
        CpuHwmmuUnsupported,
        CpuHvDisabled,
        HasEFIFirmware,
        TooManyVCPUs,
        TooMuchMemory
    }

    public enum VmFaultToleranceInvalidFileBackingDeviceType
    {
        VirtualFloppy,
        VirtualCdrom,
        VirtualSerialPort,
        VirtualParallelPort,
        VirtualDisk
    }

    public enum VMotionCompatibilityType
    {
        Cpu,
        Software
    }

    public enum VmShutdownOnIsolationEventOperation
    {
        Shutdown,
        PoweredOff
    }

    public enum VmwareDistributedVirtualSwitchPvlanPortType
    {
        Promiscuous,
        Isolated,
        Community
    }

    public enum VMwareDvsLacpApiVersion
    {
        SingleLag,
        MultipleLag
    }

    public enum VMwareDvsLacpLoadBalanceAlgorithm
    {
        SrcMac,
        DestMac,
        SrcDestMac,
        DestIpVlan,
        SrcIpVlan,
        SrcDestIpVlan,
        DestTcpUdpPort,
        SrcTcpUdpPort,
        SrcDestTcpUdpPort,
        DestIpTcpUdpPort,
        SrcIpTcpUdpPort,
        SrcDestIpTcpUdpPort,
        DestIpTcpUdpPortVlan,
        SrcIpTcpUdpPortVlan,
        SrcDestIpTcpUdpPortVlan,
        DestIp,
        SrcIp,
        SrcDestIp,
        Vlan,
        SrcPortId
    }

    public enum VMwareDvsMulticastFilteringMode
    {
        LegacyFiltering,
        Snooping
    }

    public enum VMwareDVSTeamingMatchStatus
    {
        IphashMatch,
        NonIphashMatch,
        IphashMismatch,
        NonIphashMismatch
    }

    public enum VMwareDVSVspanSessionEncapType
    {
        Gre,
        Erspan2,
        Erspan3
    }

    public enum VMwareDVSVspanSessionType
    {
        MixedDestMirror,
        DvPortMirror,
        RemoteMirrorSource,
        RemoteMirrorDest,
        EncapsulatedRemoteMirrorSource
    }

    public enum VMwareUplinkLacpMode
    {
        Active,
        Passive
    }

    public enum VsanDiskIssueType
    {
        NonExist,
        StampMismatch,
        Unknown
    }

    public enum VsanHostDecommissionModeObjectAction
    {
        NoAction,
        EnsureObjectAccessibility,
        EvacuateAllData
    }

    public enum VsanHostDiskResultState
    {
        InUse,
        Eligible,
        Ineligible
    }

    public enum VsanHostHealthState
    {
        Unknown,
        Healthy,
        Unhealthy
    }

    public enum VsanHostNodeState
    {
        Error,
        Disabled,
        Agent,
        Master,
        Backup,
        Starting,
        Stopping,
        EnteringMaintenanceMode,
        ExitingMaintenanceMode,
        Decommissioning
    }

    public enum VsanUpgradeSystemUpgradeHistoryDiskGroupOpType
    {
        Add,
        Remove
    }

    public enum vslmVStorageObjectControlFlag
    {
        KeepAfterDeleteVm,
        DisableRelocation,
        EnableChangedBlockTracking
    }

    public enum VStorageObjectConsumptionType
    {
        Disk
    }

    public enum WeekOfMonth
    {
        First,
        Second,
        Third,
        Fourth,
        Last
    }

    public enum WillLoseHAProtectionResolution
    {
        Svmotion,
        Relocate
    }

    public class AboutInfo : DynamicData, IEquatable<AboutInfo>
    {
        public string Name { get; set; }

        public string FullName { get; set; }

        public string Vendor { get; set; }

        public string Version { get; set; }

        public string Build { get; set; }

        public string LocaleVersion { get; set; }

        public string LocaleBuild { get; set; }

        public string OsType { get; set; }

        public string ProductLineId { get; set; }

        public string ApiType { get; set; }

        public string ApiVersion { get; set; }

        public string InstanceUuid { get; set; }

        public string LicenseProductName { get; set; }

        public string LicenseProductVersion { get; set; }

        public bool Equals(AboutInfo aboutInfo)
        {
            return (aboutInfo != null && this.Name == aboutInfo.Name && this.FullName == aboutInfo.FullName && this.Vendor == aboutInfo.Vendor && this.Version == aboutInfo.Version && this.Build == aboutInfo.Build && this.LocaleVersion == aboutInfo.LocaleVersion && this.LocaleBuild == aboutInfo.LocaleBuild && this.OsType == aboutInfo.OsType && this.ProductLineId == aboutInfo.ProductLineId && this.ApiType == aboutInfo.ApiType && this.ApiVersion == aboutInfo.ApiVersion && this.InstanceUuid == aboutInfo.InstanceUuid && this.LicenseProductName == aboutInfo.LicenseProductName && this.LicenseProductVersion == aboutInfo.LicenseProductVersion);
        }

        public override bool Equals(object aboutInfo)
        {
            return Equals(aboutInfo as AboutInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + FullName + "_" + Vendor + "_" + Version + "_" + Build + "_" + LocaleVersion + "_" + LocaleBuild + "_" + OsType + "_" + ProductLineId + "_" + ApiType + "_" + ApiVersion + "_" + InstanceUuid + "_" + LicenseProductName + "_" + LicenseProductVersion).GetHashCode();
        }
    }

    public class AccountCreatedEvent : HostEvent, IEquatable<AccountCreatedEvent>
    {
        public HostAccountSpec Spec { get; set; }

        public bool Group { get; set; }

        public bool Equals(AccountCreatedEvent accountCreatedEvent)
        {
            return (accountCreatedEvent != null && ((this.Spec == null && accountCreatedEvent.Spec == null) || (this.Spec != null && this.Spec.Equals(accountCreatedEvent.Spec))) && this.Group == accountCreatedEvent.Group);
        }

        public override bool Equals(object accountCreatedEvent)
        {
            return Equals(accountCreatedEvent as AccountCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Spec + "_" + Group).GetHashCode();
        }
    }

    public class AccountRemovedEvent : HostEvent, IEquatable<AccountRemovedEvent>
    {
        public string Account { get; set; }

        public bool Group { get; set; }

        public bool Equals(AccountRemovedEvent accountRemovedEvent)
        {
            return (accountRemovedEvent != null && this.Account == accountRemovedEvent.Account && this.Group == accountRemovedEvent.Group);
        }

        public override bool Equals(object accountRemovedEvent)
        {
            return Equals(accountRemovedEvent as AccountRemovedEvent);
        }

        public override int GetHashCode()
        {
            return (Account + "_" + Group).GetHashCode();
        }
    }

    public class AccountUpdatedEvent : HostEvent, IEquatable<AccountUpdatedEvent>
    {
        public HostAccountSpec Spec { get; set; }

        public bool Group { get; set; }

        public string PrevDescription { get; set; }

        public bool Equals(AccountUpdatedEvent accountUpdatedEvent)
        {
            return (accountUpdatedEvent != null && ((this.Spec == null && accountUpdatedEvent.Spec == null) || (this.Spec != null && this.Spec.Equals(accountUpdatedEvent.Spec))) && this.Group == accountUpdatedEvent.Group && this.PrevDescription == accountUpdatedEvent.PrevDescription);
        }

        public override bool Equals(object accountUpdatedEvent)
        {
            return Equals(accountUpdatedEvent as AccountUpdatedEvent);
        }

        public override int GetHashCode()
        {
            return (Spec + "_" + Group + "_" + PrevDescription).GetHashCode();
        }
    }

    public class Action : DynamicData, IEquatable<Action>
    {
        public bool Equals(Action action)
        {
            return (action != null && base.Equals(action));
        }

        public override bool Equals(object action)
        {
            return Equals(action as Action);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ActiveDirectoryFault : VimFault, IEquatable<ActiveDirectoryFault>
    {
        public int? ErrorCode { get; set; }

        public bool Equals(ActiveDirectoryFault activeDirectoryFault)
        {
            return (activeDirectoryFault != null && ((this.ErrorCode == null && activeDirectoryFault.ErrorCode == null) || (this.ErrorCode != null && this.ErrorCode.Equals(activeDirectoryFault.ErrorCode))));
        }

        public override bool Equals(object activeDirectoryFault)
        {
            return Equals(activeDirectoryFault as ActiveDirectoryFault);
        }

        public override int GetHashCode()
        {
            return (ErrorCode).GetHashCode();
        }
    }

    public class ActiveDirectoryProfile : ApplyProfile, IEquatable<ActiveDirectoryProfile>
    {
        public bool Equals(ActiveDirectoryProfile activeDirectoryProfile)
        {
            return (activeDirectoryProfile != null && base.Equals(activeDirectoryProfile));
        }

        public override bool Equals(object activeDirectoryProfile)
        {
            return Equals(activeDirectoryProfile as ActiveDirectoryProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ActiveVMsBlockingEVC : EVCConfigFault, IEquatable<ActiveVMsBlockingEVC>
    {
        public string EvcMode { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public string[] HostName { get; set; }

        public ActiveVMsBlockingEVC_LinkedView LinkedView { get; set; }

        public bool Equals(ActiveVMsBlockingEVC activeVMsBlockingEVC)
        {
            return (activeVMsBlockingEVC != null && this.EvcMode == activeVMsBlockingEVC.EvcMode && ((this.Host == null && activeVMsBlockingEVC.Host == null) || (this.Host != null && activeVMsBlockingEVC.Host != null && Enumerable.SequenceEqual(this.Host, activeVMsBlockingEVC.Host))) && ((this.HostName == null && activeVMsBlockingEVC.HostName == null) || (this.HostName != null && activeVMsBlockingEVC.HostName != null && Enumerable.SequenceEqual(this.HostName, activeVMsBlockingEVC.HostName))) && ((this.LinkedView == null && activeVMsBlockingEVC.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(activeVMsBlockingEVC.LinkedView))));
        }

        public override bool Equals(object activeVMsBlockingEVC)
        {
            return Equals(activeVMsBlockingEVC as ActiveVMsBlockingEVC);
        }

        public override int GetHashCode()
        {
            return (EvcMode + "_" + Host + "_" + HostName + "_" + LinkedView).GetHashCode();
        }
    }

    public class ActiveVMsBlockingEVC_LinkedView : IEquatable<ActiveVMsBlockingEVC_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(ActiveVMsBlockingEVC_LinkedView activeVMsBlockingEVC_LinkedView)
        {
            return (activeVMsBlockingEVC_LinkedView != null && ((this.Host == null && activeVMsBlockingEVC_LinkedView.Host == null) || (this.Host != null && activeVMsBlockingEVC_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, activeVMsBlockingEVC_LinkedView.Host))));
        }

        public override bool Equals(object activeVMsBlockingEVC_LinkedView)
        {
            return Equals(activeVMsBlockingEVC_LinkedView as ActiveVMsBlockingEVC_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class AdminDisabled : HostConfigFault, IEquatable<AdminDisabled>
    {
        public bool Equals(AdminDisabled adminDisabled)
        {
            return (adminDisabled != null && base.Equals(adminDisabled));
        }

        public override bool Equals(object adminDisabled)
        {
            return Equals(adminDisabled as AdminDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AdminNotDisabled : HostConfigFault, IEquatable<AdminNotDisabled>
    {
        public bool Equals(AdminNotDisabled adminNotDisabled)
        {
            return (adminNotDisabled != null && base.Equals(adminNotDisabled));
        }

        public override bool Equals(object adminNotDisabled)
        {
            return Equals(adminNotDisabled as AdminNotDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AdminPasswordNotChangedEvent : HostEvent, IEquatable<AdminPasswordNotChangedEvent>
    {
        public bool Equals(AdminPasswordNotChangedEvent adminPasswordNotChangedEvent)
        {
            return (adminPasswordNotChangedEvent != null && base.Equals(adminPasswordNotChangedEvent));
        }

        public override bool Equals(object adminPasswordNotChangedEvent)
        {
            return Equals(adminPasswordNotChangedEvent as AdminPasswordNotChangedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AffinityConfigured : MigrationFault, IEquatable<AffinityConfigured>
    {
        public string[] ConfiguredAffinity { get; set; }

        public bool Equals(AffinityConfigured affinityConfigured)
        {
            return (affinityConfigured != null && ((this.ConfiguredAffinity == null && affinityConfigured.ConfiguredAffinity == null) || (this.ConfiguredAffinity != null && affinityConfigured.ConfiguredAffinity != null && Enumerable.SequenceEqual(this.ConfiguredAffinity, affinityConfigured.ConfiguredAffinity))));
        }

        public override bool Equals(object affinityConfigured)
        {
            return Equals(affinityConfigured as AffinityConfigured);
        }

        public override int GetHashCode()
        {
            return (ConfiguredAffinity).GetHashCode();
        }
    }

    public class AfterStartupTaskScheduler : TaskScheduler, IEquatable<AfterStartupTaskScheduler>
    {
        public int Minute { get; set; }

        public bool Equals(AfterStartupTaskScheduler afterStartupTaskScheduler)
        {
            return (afterStartupTaskScheduler != null && this.Minute == afterStartupTaskScheduler.Minute);
        }

        public override bool Equals(object afterStartupTaskScheduler)
        {
            return Equals(afterStartupTaskScheduler as AfterStartupTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Minute).GetHashCode();
        }
    }

    public class AgentInstallFailed : HostConnectFault, IEquatable<AgentInstallFailed>
    {
        public string Reason { get; set; }

        public int? StatusCode { get; set; }

        public string InstallerOutput { get; set; }

        public bool Equals(AgentInstallFailed agentInstallFailed)
        {
            return (agentInstallFailed != null && this.Reason == agentInstallFailed.Reason && ((this.StatusCode == null && agentInstallFailed.StatusCode == null) || (this.StatusCode != null && this.StatusCode.Equals(agentInstallFailed.StatusCode))) && this.InstallerOutput == agentInstallFailed.InstallerOutput);
        }

        public override bool Equals(object agentInstallFailed)
        {
            return Equals(agentInstallFailed as AgentInstallFailed);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + StatusCode + "_" + InstallerOutput).GetHashCode();
        }
    }

    public class Alarm : ExtensibleManagedObject, IEquatable<Alarm>
    {
        public AlarmInfo Info { get; set; }

        public void RemoveAlarm()
        {
        }

        public void ReconfigureAlarm(AlarmSpec spec)
        {
        }

        public bool Equals(Alarm alarm)
        {
            return (alarm != null && ((this.Info == null && alarm.Info == null) || (this.Info != null && this.Info.Equals(alarm.Info))));
        }

        public override bool Equals(object alarm)
        {
            return Equals(alarm as Alarm);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class AlarmAcknowledgedEvent : AlarmEvent, IEquatable<AlarmAcknowledgedEvent>
    {
        public ManagedEntityEventArgument Source { get; set; }

        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(AlarmAcknowledgedEvent alarmAcknowledgedEvent)
        {
            return (alarmAcknowledgedEvent != null && ((this.Source == null && alarmAcknowledgedEvent.Source == null) || (this.Source != null && this.Source.Equals(alarmAcknowledgedEvent.Source))) && ((this.Entity == null && alarmAcknowledgedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmAcknowledgedEvent.Entity))));
        }

        public override bool Equals(object alarmAcknowledgedEvent)
        {
            return Equals(alarmAcknowledgedEvent as AlarmAcknowledgedEvent);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Entity).GetHashCode();
        }
    }

    public class AlarmAction : DynamicData, IEquatable<AlarmAction>
    {
        public bool Equals(AlarmAction alarmAction)
        {
            return (alarmAction != null && base.Equals(alarmAction));
        }

        public override bool Equals(object alarmAction)
        {
            return Equals(alarmAction as AlarmAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AlarmActionTriggeredEvent : AlarmEvent, IEquatable<AlarmActionTriggeredEvent>
    {
        public ManagedEntityEventArgument Source { get; set; }

        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(AlarmActionTriggeredEvent alarmActionTriggeredEvent)
        {
            return (alarmActionTriggeredEvent != null && ((this.Source == null && alarmActionTriggeredEvent.Source == null) || (this.Source != null && this.Source.Equals(alarmActionTriggeredEvent.Source))) && ((this.Entity == null && alarmActionTriggeredEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmActionTriggeredEvent.Entity))));
        }

        public override bool Equals(object alarmActionTriggeredEvent)
        {
            return Equals(alarmActionTriggeredEvent as AlarmActionTriggeredEvent);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Entity).GetHashCode();
        }
    }

    public class AlarmClearedEvent : AlarmEvent, IEquatable<AlarmClearedEvent>
    {
        public ManagedEntityEventArgument Source { get; set; }

        public ManagedEntityEventArgument Entity { get; set; }

        public string From { get; set; }

        public bool Equals(AlarmClearedEvent alarmClearedEvent)
        {
            return (alarmClearedEvent != null && ((this.Source == null && alarmClearedEvent.Source == null) || (this.Source != null && this.Source.Equals(alarmClearedEvent.Source))) && ((this.Entity == null && alarmClearedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmClearedEvent.Entity))) && this.From == alarmClearedEvent.From);
        }

        public override bool Equals(object alarmClearedEvent)
        {
            return Equals(alarmClearedEvent as AlarmClearedEvent);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Entity + "_" + From).GetHashCode();
        }
    }

    public class AlarmCreatedEvent : AlarmEvent, IEquatable<AlarmCreatedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(AlarmCreatedEvent alarmCreatedEvent)
        {
            return (alarmCreatedEvent != null && ((this.Entity == null && alarmCreatedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmCreatedEvent.Entity))));
        }

        public override bool Equals(object alarmCreatedEvent)
        {
            return Equals(alarmCreatedEvent as AlarmCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class AlarmDescription : DynamicData, IEquatable<AlarmDescription>
    {
        public TypeDescription[] Expr { get; set; }

        public ElementDescription[] StateOperator { get; set; }

        public ElementDescription[] MetricOperator { get; set; }

        public ElementDescription[] HostSystemConnectionState { get; set; }

        public ElementDescription[] VirtualMachinePowerState { get; set; }

        public ElementDescription[] DatastoreConnectionState { get; set; }

        public ElementDescription[] HostSystemPowerState { get; set; }

        public ElementDescription[] VirtualMachineGuestHeartbeatStatus { get; set; }

        public ElementDescription[] EntityStatus { get; set; }

        public TypeDescription[] Action { get; set; }

        public bool Equals(AlarmDescription alarmDescription)
        {
            return (alarmDescription != null && ((this.Expr == null && alarmDescription.Expr == null) || (this.Expr != null && alarmDescription.Expr != null && Enumerable.SequenceEqual(this.Expr, alarmDescription.Expr))) && ((this.StateOperator == null && alarmDescription.StateOperator == null) || (this.StateOperator != null && alarmDescription.StateOperator != null && Enumerable.SequenceEqual(this.StateOperator, alarmDescription.StateOperator))) && ((this.MetricOperator == null && alarmDescription.MetricOperator == null) || (this.MetricOperator != null && alarmDescription.MetricOperator != null && Enumerable.SequenceEqual(this.MetricOperator, alarmDescription.MetricOperator))) && ((this.HostSystemConnectionState == null && alarmDescription.HostSystemConnectionState == null) || (this.HostSystemConnectionState != null && alarmDescription.HostSystemConnectionState != null && Enumerable.SequenceEqual(this.HostSystemConnectionState, alarmDescription.HostSystemConnectionState))) && ((this.VirtualMachinePowerState == null && alarmDescription.VirtualMachinePowerState == null) || (this.VirtualMachinePowerState != null && alarmDescription.VirtualMachinePowerState != null && Enumerable.SequenceEqual(this.VirtualMachinePowerState, alarmDescription.VirtualMachinePowerState))) && ((this.DatastoreConnectionState == null && alarmDescription.DatastoreConnectionState == null) || (this.DatastoreConnectionState != null && alarmDescription.DatastoreConnectionState != null && Enumerable.SequenceEqual(this.DatastoreConnectionState, alarmDescription.DatastoreConnectionState))) && ((this.HostSystemPowerState == null && alarmDescription.HostSystemPowerState == null) || (this.HostSystemPowerState != null && alarmDescription.HostSystemPowerState != null && Enumerable.SequenceEqual(this.HostSystemPowerState, alarmDescription.HostSystemPowerState))) && ((this.VirtualMachineGuestHeartbeatStatus == null && alarmDescription.VirtualMachineGuestHeartbeatStatus == null) || (this.VirtualMachineGuestHeartbeatStatus != null && alarmDescription.VirtualMachineGuestHeartbeatStatus != null && Enumerable.SequenceEqual(this.VirtualMachineGuestHeartbeatStatus, alarmDescription.VirtualMachineGuestHeartbeatStatus))) && ((this.EntityStatus == null && alarmDescription.EntityStatus == null) || (this.EntityStatus != null && alarmDescription.EntityStatus != null && Enumerable.SequenceEqual(this.EntityStatus, alarmDescription.EntityStatus))) && ((this.Action == null && alarmDescription.Action == null) || (this.Action != null && alarmDescription.Action != null && Enumerable.SequenceEqual(this.Action, alarmDescription.Action))));
        }

        public override bool Equals(object alarmDescription)
        {
            return Equals(alarmDescription as AlarmDescription);
        }

        public override int GetHashCode()
        {
            return (Expr + "_" + StateOperator + "_" + MetricOperator + "_" + HostSystemConnectionState + "_" + VirtualMachinePowerState + "_" + DatastoreConnectionState + "_" + HostSystemPowerState + "_" + VirtualMachineGuestHeartbeatStatus + "_" + EntityStatus + "_" + Action).GetHashCode();
        }
    }

    public class AlarmEmailCompletedEvent : AlarmEvent, IEquatable<AlarmEmailCompletedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public string To { get; set; }

        public bool Equals(AlarmEmailCompletedEvent alarmEmailCompletedEvent)
        {
            return (alarmEmailCompletedEvent != null && ((this.Entity == null && alarmEmailCompletedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmEmailCompletedEvent.Entity))) && this.To == alarmEmailCompletedEvent.To);
        }

        public override bool Equals(object alarmEmailCompletedEvent)
        {
            return Equals(alarmEmailCompletedEvent as AlarmEmailCompletedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + To).GetHashCode();
        }
    }

    public class AlarmEmailFailedEvent : AlarmEvent, IEquatable<AlarmEmailFailedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public string To { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(AlarmEmailFailedEvent alarmEmailFailedEvent)
        {
            return (alarmEmailFailedEvent != null && ((this.Entity == null && alarmEmailFailedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmEmailFailedEvent.Entity))) && this.To == alarmEmailFailedEvent.To && ((this.Reason == null && alarmEmailFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(alarmEmailFailedEvent.Reason))));
        }

        public override bool Equals(object alarmEmailFailedEvent)
        {
            return Equals(alarmEmailFailedEvent as AlarmEmailFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + To + "_" + Reason).GetHashCode();
        }
    }

    public class AlarmEvent : Event, IEquatable<AlarmEvent>
    {
        public AlarmEventArgument Alarm { get; set; }

        public bool Equals(AlarmEvent alarmEvent)
        {
            return (alarmEvent != null && ((this.Alarm == null && alarmEvent.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmEvent.Alarm))));
        }

        public override bool Equals(object alarmEvent)
        {
            return Equals(alarmEvent as AlarmEvent);
        }

        public override int GetHashCode()
        {
            return (Alarm).GetHashCode();
        }
    }

    public class AlarmEventArgument : EntityEventArgument, IEquatable<AlarmEventArgument>
    {
        public ManagedObjectReference Alarm { get; set; }

        public AlarmEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(AlarmEventArgument alarmEventArgument)
        {
            return (alarmEventArgument != null && ((this.Alarm == null && alarmEventArgument.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmEventArgument.Alarm))) && ((this.LinkedView == null && alarmEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(alarmEventArgument.LinkedView))));
        }

        public override bool Equals(object alarmEventArgument)
        {
            return Equals(alarmEventArgument as AlarmEventArgument);
        }

        public override int GetHashCode()
        {
            return (Alarm + "_" + LinkedView).GetHashCode();
        }
    }

    public class AlarmEventArgument_LinkedView : IEquatable<AlarmEventArgument_LinkedView>
    {
        public Alarm Alarm { get; set; }

        public bool Equals(AlarmEventArgument_LinkedView alarmEventArgument_LinkedView)
        {
            return (alarmEventArgument_LinkedView != null && ((this.Alarm == null && alarmEventArgument_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmEventArgument_LinkedView.Alarm))));
        }

        public override bool Equals(object alarmEventArgument_LinkedView)
        {
            return Equals(alarmEventArgument_LinkedView as AlarmEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Alarm).GetHashCode();
        }
    }

    public class AlarmExpression : DynamicData, IEquatable<AlarmExpression>
    {
        public bool Equals(AlarmExpression alarmExpression)
        {
            return (alarmExpression != null && base.Equals(alarmExpression));
        }

        public override bool Equals(object alarmExpression)
        {
            return Equals(alarmExpression as AlarmExpression);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AlarmFilterSpec : DynamicData, IEquatable<AlarmFilterSpec>
    {
        public ManagedEntityStatus[] Status { get; set; }

        public string TypeEntity { get; set; }

        public string TypeTrigger { get; set; }

        public bool Equals(AlarmFilterSpec alarmFilterSpec)
        {
            return (alarmFilterSpec != null && ((this.Status == null && alarmFilterSpec.Status == null) || (this.Status != null && alarmFilterSpec.Status != null && Enumerable.SequenceEqual(this.Status, alarmFilterSpec.Status))) && this.TypeEntity == alarmFilterSpec.TypeEntity && this.TypeTrigger == alarmFilterSpec.TypeTrigger);
        }

        public override bool Equals(object alarmFilterSpec)
        {
            return Equals(alarmFilterSpec as AlarmFilterSpec);
        }

        public override int GetHashCode()
        {
            return (Status + "_" + TypeEntity + "_" + TypeTrigger).GetHashCode();
        }
    }

    public class AlarmInfo : AlarmSpec, IEquatable<AlarmInfo>
    {
        public string Key { get; set; }

        public ManagedObjectReference Alarm { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public DateTime LastModifiedTime { get; set; }

        public string LastModifiedUser { get; set; }

        public int CreationEventId { get; set; }

        public AlarmInfo_LinkedView LinkedView { get; set; }

        public bool Equals(AlarmInfo alarmInfo)
        {
            return (alarmInfo != null && this.Key == alarmInfo.Key && ((this.Alarm == null && alarmInfo.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmInfo.Alarm))) && ((this.Entity == null && alarmInfo.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmInfo.Entity))) && this.LastModifiedTime == alarmInfo.LastModifiedTime && this.LastModifiedUser == alarmInfo.LastModifiedUser && this.CreationEventId == alarmInfo.CreationEventId && ((this.LinkedView == null && alarmInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(alarmInfo.LinkedView))));
        }

        public override bool Equals(object alarmInfo)
        {
            return Equals(alarmInfo as AlarmInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Alarm + "_" + Entity + "_" + LastModifiedTime + "_" + LastModifiedUser + "_" + CreationEventId + "_" + LinkedView).GetHashCode();
        }
    }

    public class AlarmInfo_LinkedView : IEquatable<AlarmInfo_LinkedView>
    {
        public Alarm Alarm { get; set; }

        public ManagedEntity Entity { get; set; }

        public bool Equals(AlarmInfo_LinkedView alarmInfo_LinkedView)
        {
            return (alarmInfo_LinkedView != null && ((this.Alarm == null && alarmInfo_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmInfo_LinkedView.Alarm))) && ((this.Entity == null && alarmInfo_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmInfo_LinkedView.Entity))));
        }

        public override bool Equals(object alarmInfo_LinkedView)
        {
            return Equals(alarmInfo_LinkedView as AlarmInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Alarm + "_" + Entity).GetHashCode();
        }
    }

    public class AlarmManager : ViewBase, IEquatable<AlarmManager>
    {
        public AlarmExpression[] DefaultExpression { get; set; }

        public AlarmDescription Description { get; set; }

        public ManagedObjectReference CreateAlarm(ManagedObjectReference entity, AlarmSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference[] GetAlarm(ManagedObjectReference entity)
        {
            return default(ManagedObjectReference[]);
        }

        public bool AreAlarmActionsEnabled(ManagedObjectReference entity)
        {
            return default(bool);
        }

        public void EnableAlarmActions(ManagedObjectReference entity, bool enabled)
        {
        }

        public AlarmState[] GetAlarmState(ManagedObjectReference entity)
        {
            return default(AlarmState[]);
        }

        public void AcknowledgeAlarm(ManagedObjectReference alarm, ManagedObjectReference entity)
        {
        }

        public void ClearTriggeredAlarms(AlarmFilterSpec filter)
        {
        }

        public bool Equals(AlarmManager alarmManager)
        {
            return (alarmManager != null && ((this.DefaultExpression == null && alarmManager.DefaultExpression == null) || (this.DefaultExpression != null && alarmManager.DefaultExpression != null && Enumerable.SequenceEqual(this.DefaultExpression, alarmManager.DefaultExpression))) && ((this.Description == null && alarmManager.Description == null) || (this.Description != null && this.Description.Equals(alarmManager.Description))));
        }

        public override bool Equals(object alarmManager)
        {
            return Equals(alarmManager as AlarmManager);
        }

        public override int GetHashCode()
        {
            return (DefaultExpression + "_" + Description).GetHashCode();
        }
    }

    public class AlarmReconfiguredEvent : AlarmEvent, IEquatable<AlarmReconfiguredEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(AlarmReconfiguredEvent alarmReconfiguredEvent)
        {
            return (alarmReconfiguredEvent != null && ((this.Entity == null && alarmReconfiguredEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmReconfiguredEvent.Entity))) && ((this.ConfigChanges == null && alarmReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(alarmReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object alarmReconfiguredEvent)
        {
            return Equals(alarmReconfiguredEvent as AlarmReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + ConfigChanges).GetHashCode();
        }
    }

    public class AlarmRemovedEvent : AlarmEvent, IEquatable<AlarmRemovedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(AlarmRemovedEvent alarmRemovedEvent)
        {
            return (alarmRemovedEvent != null && ((this.Entity == null && alarmRemovedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmRemovedEvent.Entity))));
        }

        public override bool Equals(object alarmRemovedEvent)
        {
            return Equals(alarmRemovedEvent as AlarmRemovedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class AlarmScriptCompleteEvent : AlarmEvent, IEquatable<AlarmScriptCompleteEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public string Script { get; set; }

        public bool Equals(AlarmScriptCompleteEvent alarmScriptCompleteEvent)
        {
            return (alarmScriptCompleteEvent != null && ((this.Entity == null && alarmScriptCompleteEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmScriptCompleteEvent.Entity))) && this.Script == alarmScriptCompleteEvent.Script);
        }

        public override bool Equals(object alarmScriptCompleteEvent)
        {
            return Equals(alarmScriptCompleteEvent as AlarmScriptCompleteEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Script).GetHashCode();
        }
    }

    public class AlarmScriptFailedEvent : AlarmEvent, IEquatable<AlarmScriptFailedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public string Script { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(AlarmScriptFailedEvent alarmScriptFailedEvent)
        {
            return (alarmScriptFailedEvent != null && ((this.Entity == null && alarmScriptFailedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmScriptFailedEvent.Entity))) && this.Script == alarmScriptFailedEvent.Script && ((this.Reason == null && alarmScriptFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(alarmScriptFailedEvent.Reason))));
        }

        public override bool Equals(object alarmScriptFailedEvent)
        {
            return Equals(alarmScriptFailedEvent as AlarmScriptFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Script + "_" + Reason).GetHashCode();
        }
    }

    public class AlarmSetting : DynamicData, IEquatable<AlarmSetting>
    {
        public int ToleranceRange { get; set; }

        public int ReportingFrequency { get; set; }

        public bool Equals(AlarmSetting alarmSetting)
        {
            return (alarmSetting != null && this.ToleranceRange == alarmSetting.ToleranceRange && this.ReportingFrequency == alarmSetting.ReportingFrequency);
        }

        public override bool Equals(object alarmSetting)
        {
            return Equals(alarmSetting as AlarmSetting);
        }

        public override int GetHashCode()
        {
            return (ToleranceRange + "_" + ReportingFrequency).GetHashCode();
        }
    }

    public class AlarmSnmpCompletedEvent : AlarmEvent, IEquatable<AlarmSnmpCompletedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(AlarmSnmpCompletedEvent alarmSnmpCompletedEvent)
        {
            return (alarmSnmpCompletedEvent != null && ((this.Entity == null && alarmSnmpCompletedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmSnmpCompletedEvent.Entity))));
        }

        public override bool Equals(object alarmSnmpCompletedEvent)
        {
            return Equals(alarmSnmpCompletedEvent as AlarmSnmpCompletedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class AlarmSnmpFailedEvent : AlarmEvent, IEquatable<AlarmSnmpFailedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(AlarmSnmpFailedEvent alarmSnmpFailedEvent)
        {
            return (alarmSnmpFailedEvent != null && ((this.Entity == null && alarmSnmpFailedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmSnmpFailedEvent.Entity))) && ((this.Reason == null && alarmSnmpFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(alarmSnmpFailedEvent.Reason))));
        }

        public override bool Equals(object alarmSnmpFailedEvent)
        {
            return Equals(alarmSnmpFailedEvent as AlarmSnmpFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Reason).GetHashCode();
        }
    }

    public class AlarmSpec : DynamicData, IEquatable<AlarmSpec>
    {
        public string Name { get; set; }

        public string SystemName { get; set; }

        public string Description { get; set; }

        public bool Enabled { get; set; }

        public AlarmExpression Expression { get; set; }

        public AlarmAction Action { get; set; }

        public int? ActionFrequency { get; set; }

        public AlarmSetting Setting { get; set; }

        public bool Equals(AlarmSpec alarmSpec)
        {
            return (alarmSpec != null && this.Name == alarmSpec.Name && this.SystemName == alarmSpec.SystemName && this.Description == alarmSpec.Description && this.Enabled == alarmSpec.Enabled && ((this.Expression == null && alarmSpec.Expression == null) || (this.Expression != null && this.Expression.Equals(alarmSpec.Expression))) && ((this.Action == null && alarmSpec.Action == null) || (this.Action != null && this.Action.Equals(alarmSpec.Action))) && ((this.ActionFrequency == null && alarmSpec.ActionFrequency == null) || (this.ActionFrequency != null && this.ActionFrequency.Equals(alarmSpec.ActionFrequency))) && ((this.Setting == null && alarmSpec.Setting == null) || (this.Setting != null && this.Setting.Equals(alarmSpec.Setting))));
        }

        public override bool Equals(object alarmSpec)
        {
            return Equals(alarmSpec as AlarmSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + SystemName + "_" + Description + "_" + Enabled + "_" + Expression + "_" + Action + "_" + ActionFrequency + "_" + Setting).GetHashCode();
        }
    }

    public class AlarmState : DynamicData, IEquatable<AlarmState>
    {
        public string Key { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public ManagedObjectReference Alarm { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public DateTime Time { get; set; }

        public bool? Acknowledged { get; set; }

        public string AcknowledgedByUser { get; set; }

        public DateTime? AcknowledgedTime { get; set; }

        public int? EventKey { get; set; }

        public AlarmState_LinkedView LinkedView { get; set; }

        public bool Equals(AlarmState alarmState)
        {
            return (alarmState != null && this.Key == alarmState.Key && ((this.Entity == null && alarmState.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmState.Entity))) && ((this.Alarm == null && alarmState.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmState.Alarm))) && this.OverallStatus == alarmState.OverallStatus && this.Time == alarmState.Time && ((this.Acknowledged == null && alarmState.Acknowledged == null) || (this.Acknowledged != null && this.Acknowledged.Equals(alarmState.Acknowledged))) && this.AcknowledgedByUser == alarmState.AcknowledgedByUser && ((this.AcknowledgedTime == null && alarmState.AcknowledgedTime == null) || (this.AcknowledgedTime != null && this.AcknowledgedTime.Equals(alarmState.AcknowledgedTime))) && ((this.EventKey == null && alarmState.EventKey == null) || (this.EventKey != null && this.EventKey.Equals(alarmState.EventKey))) && ((this.LinkedView == null && alarmState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(alarmState.LinkedView))));
        }

        public override bool Equals(object alarmState)
        {
            return Equals(alarmState as AlarmState);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Entity + "_" + Alarm + "_" + OverallStatus + "_" + Time + "_" + Acknowledged + "_" + AcknowledgedByUser + "_" + AcknowledgedTime + "_" + EventKey + "_" + LinkedView).GetHashCode();
        }
    }

    public class AlarmState_LinkedView : IEquatable<AlarmState_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public Alarm Alarm { get; set; }

        public bool Equals(AlarmState_LinkedView alarmState_LinkedView)
        {
            return (alarmState_LinkedView != null && ((this.Entity == null && alarmState_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmState_LinkedView.Entity))) && ((this.Alarm == null && alarmState_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(alarmState_LinkedView.Alarm))));
        }

        public override bool Equals(object alarmState_LinkedView)
        {
            return Equals(alarmState_LinkedView as AlarmState_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Alarm).GetHashCode();
        }
    }

    public class AlarmStatusChangedEvent : AlarmEvent, IEquatable<AlarmStatusChangedEvent>
    {
        public ManagedEntityEventArgument Source { get; set; }

        public ManagedEntityEventArgument Entity { get; set; }

        public string From { get; set; }

        public string To { get; set; }

        public bool Equals(AlarmStatusChangedEvent alarmStatusChangedEvent)
        {
            return (alarmStatusChangedEvent != null && ((this.Source == null && alarmStatusChangedEvent.Source == null) || (this.Source != null && this.Source.Equals(alarmStatusChangedEvent.Source))) && ((this.Entity == null && alarmStatusChangedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmStatusChangedEvent.Entity))) && this.From == alarmStatusChangedEvent.From && this.To == alarmStatusChangedEvent.To);
        }

        public override bool Equals(object alarmStatusChangedEvent)
        {
            return Equals(alarmStatusChangedEvent as AlarmStatusChangedEvent);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Entity + "_" + From + "_" + To).GetHashCode();
        }
    }

    public class AlarmTriggeringAction : AlarmAction, IEquatable<AlarmTriggeringAction>
    {
        public Action Action { get; set; }

        public AlarmTriggeringActionTransitionSpec[] TransitionSpecs { get; set; }

        public bool Green2yellow { get; set; }

        public bool Yellow2red { get; set; }

        public bool Red2yellow { get; set; }

        public bool Yellow2green { get; set; }

        public bool Equals(AlarmTriggeringAction alarmTriggeringAction)
        {
            return (alarmTriggeringAction != null && ((this.Action == null && alarmTriggeringAction.Action == null) || (this.Action != null && this.Action.Equals(alarmTriggeringAction.Action))) && ((this.TransitionSpecs == null && alarmTriggeringAction.TransitionSpecs == null) || (this.TransitionSpecs != null && alarmTriggeringAction.TransitionSpecs != null && Enumerable.SequenceEqual(this.TransitionSpecs, alarmTriggeringAction.TransitionSpecs))) && this.Green2yellow == alarmTriggeringAction.Green2yellow && this.Yellow2red == alarmTriggeringAction.Yellow2red && this.Red2yellow == alarmTriggeringAction.Red2yellow && this.Yellow2green == alarmTriggeringAction.Yellow2green);
        }

        public override bool Equals(object alarmTriggeringAction)
        {
            return Equals(alarmTriggeringAction as AlarmTriggeringAction);
        }

        public override int GetHashCode()
        {
            return (Action + "_" + TransitionSpecs + "_" + Green2yellow + "_" + Yellow2red + "_" + Red2yellow + "_" + Yellow2green).GetHashCode();
        }
    }

    public class AlarmTriggeringActionTransitionSpec : DynamicData, IEquatable<AlarmTriggeringActionTransitionSpec>
    {
        public ManagedEntityStatus StartState { get; set; }

        public ManagedEntityStatus FinalState { get; set; }

        public bool Repeats { get; set; }

        public bool Equals(AlarmTriggeringActionTransitionSpec alarmTriggeringActionTransitionSpec)
        {
            return (alarmTriggeringActionTransitionSpec != null && this.StartState == alarmTriggeringActionTransitionSpec.StartState && this.FinalState == alarmTriggeringActionTransitionSpec.FinalState && this.Repeats == alarmTriggeringActionTransitionSpec.Repeats);
        }

        public override bool Equals(object alarmTriggeringActionTransitionSpec)
        {
            return Equals(alarmTriggeringActionTransitionSpec as AlarmTriggeringActionTransitionSpec);
        }

        public override int GetHashCode()
        {
            return (StartState + "_" + FinalState + "_" + Repeats).GetHashCode();
        }
    }

    public class AllVirtualMachinesLicensedEvent : LicenseEvent, IEquatable<AllVirtualMachinesLicensedEvent>
    {
        public bool Equals(AllVirtualMachinesLicensedEvent allVirtualMachinesLicensedEvent)
        {
            return (allVirtualMachinesLicensedEvent != null && base.Equals(allVirtualMachinesLicensedEvent));
        }

        public override bool Equals(object allVirtualMachinesLicensedEvent)
        {
            return Equals(allVirtualMachinesLicensedEvent as AllVirtualMachinesLicensedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AlreadyAuthenticatedSessionEvent : SessionEvent, IEquatable<AlreadyAuthenticatedSessionEvent>
    {
        public bool Equals(AlreadyAuthenticatedSessionEvent alreadyAuthenticatedSessionEvent)
        {
            return (alreadyAuthenticatedSessionEvent != null && base.Equals(alreadyAuthenticatedSessionEvent));
        }

        public override bool Equals(object alreadyAuthenticatedSessionEvent)
        {
            return Equals(alreadyAuthenticatedSessionEvent as AlreadyAuthenticatedSessionEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AlreadyBeingManaged : HostConnectFault, IEquatable<AlreadyBeingManaged>
    {
        public string IpAddress { get; set; }

        public bool Equals(AlreadyBeingManaged alreadyBeingManaged)
        {
            return (alreadyBeingManaged != null && this.IpAddress == alreadyBeingManaged.IpAddress);
        }

        public override bool Equals(object alreadyBeingManaged)
        {
            return Equals(alreadyBeingManaged as AlreadyBeingManaged);
        }

        public override int GetHashCode()
        {
            return (IpAddress).GetHashCode();
        }
    }

    public class AlreadyConnected : HostConnectFault, IEquatable<AlreadyConnected>
    {
        public string Name { get; set; }

        public bool Equals(AlreadyConnected alreadyConnected)
        {
            return (alreadyConnected != null && this.Name == alreadyConnected.Name);
        }

        public override bool Equals(object alreadyConnected)
        {
            return Equals(alreadyConnected as AlreadyConnected);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class AlreadyExists : VimFault, IEquatable<AlreadyExists>
    {
        public string Name { get; set; }

        public bool Equals(AlreadyExists alreadyExists)
        {
            return (alreadyExists != null && this.Name == alreadyExists.Name);
        }

        public override bool Equals(object alreadyExists)
        {
            return Equals(alreadyExists as AlreadyExists);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class AlreadyUpgraded : VimFault, IEquatable<AlreadyUpgraded>
    {
        public bool Equals(AlreadyUpgraded alreadyUpgraded)
        {
            return (alreadyUpgraded != null && base.Equals(alreadyUpgraded));
        }

        public override bool Equals(object alreadyUpgraded)
        {
            return Equals(alreadyUpgraded as AlreadyUpgraded);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AndAlarmExpression : AlarmExpression, IEquatable<AndAlarmExpression>
    {
        public AlarmExpression[] Expression { get; set; }

        public bool Equals(AndAlarmExpression andAlarmExpression)
        {
            return (andAlarmExpression != null && ((this.Expression == null && andAlarmExpression.Expression == null) || (this.Expression != null && andAlarmExpression.Expression != null && Enumerable.SequenceEqual(this.Expression, andAlarmExpression.Expression))));
        }

        public override bool Equals(object andAlarmExpression)
        {
            return Equals(andAlarmExpression as AndAlarmExpression);
        }

        public override int GetHashCode()
        {
            return (Expression).GetHashCode();
        }
    }

    public class AnswerFile : DynamicData, IEquatable<AnswerFile>
    {
        public ProfileDeferredPolicyOptionParameter[] UserInput { get; set; }

        public DateTime CreatedTime { get; set; }

        public DateTime ModifiedTime { get; set; }

        public bool Equals(AnswerFile answerFile)
        {
            return (answerFile != null && ((this.UserInput == null && answerFile.UserInput == null) || (this.UserInput != null && answerFile.UserInput != null && Enumerable.SequenceEqual(this.UserInput, answerFile.UserInput))) && this.CreatedTime == answerFile.CreatedTime && this.ModifiedTime == answerFile.ModifiedTime);
        }

        public override bool Equals(object answerFile)
        {
            return Equals(answerFile as AnswerFile);
        }

        public override int GetHashCode()
        {
            return (UserInput + "_" + CreatedTime + "_" + ModifiedTime).GetHashCode();
        }
    }

    public class AnswerFileCreateSpec : DynamicData, IEquatable<AnswerFileCreateSpec>
    {
        public bool? Validating { get; set; }

        public bool Equals(AnswerFileCreateSpec answerFileCreateSpec)
        {
            return (answerFileCreateSpec != null && ((this.Validating == null && answerFileCreateSpec.Validating == null) || (this.Validating != null && this.Validating.Equals(answerFileCreateSpec.Validating))));
        }

        public override bool Equals(object answerFileCreateSpec)
        {
            return Equals(answerFileCreateSpec as AnswerFileCreateSpec);
        }

        public override int GetHashCode()
        {
            return (Validating).GetHashCode();
        }
    }

    public class AnswerFileOptionsCreateSpec : AnswerFileCreateSpec, IEquatable<AnswerFileOptionsCreateSpec>
    {
        public ProfileDeferredPolicyOptionParameter[] UserInput { get; set; }

        public bool Equals(AnswerFileOptionsCreateSpec answerFileOptionsCreateSpec)
        {
            return (answerFileOptionsCreateSpec != null && ((this.UserInput == null && answerFileOptionsCreateSpec.UserInput == null) || (this.UserInput != null && answerFileOptionsCreateSpec.UserInput != null && Enumerable.SequenceEqual(this.UserInput, answerFileOptionsCreateSpec.UserInput))));
        }

        public override bool Equals(object answerFileOptionsCreateSpec)
        {
            return Equals(answerFileOptionsCreateSpec as AnswerFileOptionsCreateSpec);
        }

        public override int GetHashCode()
        {
            return (UserInput).GetHashCode();
        }
    }

    public class AnswerFileSerializedCreateSpec : AnswerFileCreateSpec, IEquatable<AnswerFileSerializedCreateSpec>
    {
        public string AnswerFileConfigString { get; set; }

        public bool Equals(AnswerFileSerializedCreateSpec answerFileSerializedCreateSpec)
        {
            return (answerFileSerializedCreateSpec != null && this.AnswerFileConfigString == answerFileSerializedCreateSpec.AnswerFileConfigString);
        }

        public override bool Equals(object answerFileSerializedCreateSpec)
        {
            return Equals(answerFileSerializedCreateSpec as AnswerFileSerializedCreateSpec);
        }

        public override int GetHashCode()
        {
            return (AnswerFileConfigString).GetHashCode();
        }
    }

    public class AnswerFileStatusError : DynamicData, IEquatable<AnswerFileStatusError>
    {
        public ProfilePropertyPath UserInputPath { get; set; }

        public LocalizableMessage ErrMsg { get; set; }

        public bool Equals(AnswerFileStatusError answerFileStatusError)
        {
            return (answerFileStatusError != null && ((this.UserInputPath == null && answerFileStatusError.UserInputPath == null) || (this.UserInputPath != null && this.UserInputPath.Equals(answerFileStatusError.UserInputPath))) && ((this.ErrMsg == null && answerFileStatusError.ErrMsg == null) || (this.ErrMsg != null && this.ErrMsg.Equals(answerFileStatusError.ErrMsg))));
        }

        public override bool Equals(object answerFileStatusError)
        {
            return Equals(answerFileStatusError as AnswerFileStatusError);
        }

        public override int GetHashCode()
        {
            return (UserInputPath + "_" + ErrMsg).GetHashCode();
        }
    }

    public class AnswerFileStatusResult : DynamicData, IEquatable<AnswerFileStatusResult>
    {
        public DateTime CheckedTime { get; set; }

        public ManagedObjectReference Host { get; set; }

        public string Status { get; set; }

        public AnswerFileStatusError[] Error { get; set; }

        public AnswerFileStatusResult_LinkedView LinkedView { get; set; }

        public bool Equals(AnswerFileStatusResult answerFileStatusResult)
        {
            return (answerFileStatusResult != null && this.CheckedTime == answerFileStatusResult.CheckedTime && ((this.Host == null && answerFileStatusResult.Host == null) || (this.Host != null && this.Host.Equals(answerFileStatusResult.Host))) && this.Status == answerFileStatusResult.Status && ((this.Error == null && answerFileStatusResult.Error == null) || (this.Error != null && answerFileStatusResult.Error != null && Enumerable.SequenceEqual(this.Error, answerFileStatusResult.Error))) && ((this.LinkedView == null && answerFileStatusResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(answerFileStatusResult.LinkedView))));
        }

        public override bool Equals(object answerFileStatusResult)
        {
            return Equals(answerFileStatusResult as AnswerFileStatusResult);
        }

        public override int GetHashCode()
        {
            return (CheckedTime + "_" + Host + "_" + Status + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class AnswerFileStatusResult_LinkedView : IEquatable<AnswerFileStatusResult_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(AnswerFileStatusResult_LinkedView answerFileStatusResult_LinkedView)
        {
            return (answerFileStatusResult_LinkedView != null && ((this.Host == null && answerFileStatusResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(answerFileStatusResult_LinkedView.Host))));
        }

        public override bool Equals(object answerFileStatusResult_LinkedView)
        {
            return Equals(answerFileStatusResult_LinkedView as AnswerFileStatusResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class AnswerFileUpdateFailed : VimFault, IEquatable<AnswerFileUpdateFailed>
    {
        public AnswerFileUpdateFailure[] Failure { get; set; }

        public bool Equals(AnswerFileUpdateFailed answerFileUpdateFailed)
        {
            return (answerFileUpdateFailed != null && ((this.Failure == null && answerFileUpdateFailed.Failure == null) || (this.Failure != null && answerFileUpdateFailed.Failure != null && Enumerable.SequenceEqual(this.Failure, answerFileUpdateFailed.Failure))));
        }

        public override bool Equals(object answerFileUpdateFailed)
        {
            return Equals(answerFileUpdateFailed as AnswerFileUpdateFailed);
        }

        public override int GetHashCode()
        {
            return (Failure).GetHashCode();
        }
    }

    public class AnswerFileUpdateFailure : DynamicData, IEquatable<AnswerFileUpdateFailure>
    {
        public ProfilePropertyPath UserInputPath { get; set; }

        public LocalizableMessage ErrMsg { get; set; }

        public bool Equals(AnswerFileUpdateFailure answerFileUpdateFailure)
        {
            return (answerFileUpdateFailure != null && ((this.UserInputPath == null && answerFileUpdateFailure.UserInputPath == null) || (this.UserInputPath != null && this.UserInputPath.Equals(answerFileUpdateFailure.UserInputPath))) && ((this.ErrMsg == null && answerFileUpdateFailure.ErrMsg == null) || (this.ErrMsg != null && this.ErrMsg.Equals(answerFileUpdateFailure.ErrMsg))));
        }

        public override bool Equals(object answerFileUpdateFailure)
        {
            return Equals(answerFileUpdateFailure as AnswerFileUpdateFailure);
        }

        public override int GetHashCode()
        {
            return (UserInputPath + "_" + ErrMsg).GetHashCode();
        }
    }

    public class ApplicationQuiesceFault : SnapshotFault, IEquatable<ApplicationQuiesceFault>
    {
        public bool Equals(ApplicationQuiesceFault applicationQuiesceFault)
        {
            return (applicationQuiesceFault != null && base.Equals(applicationQuiesceFault));
        }

        public override bool Equals(object applicationQuiesceFault)
        {
            return Equals(applicationQuiesceFault as ApplicationQuiesceFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ApplyHostProfileConfigurationResult : DynamicData, IEquatable<ApplyHostProfileConfigurationResult>
    {
        public DateTime StartTime { get; set; }

        public DateTime CompleteTime { get; set; }

        public ManagedObjectReference Host { get; set; }

        public string Status { get; set; }

        public LocalizedMethodFault[] Errors { get; set; }

        public ApplyHostProfileConfigurationResult_LinkedView LinkedView { get; set; }

        public bool Equals(ApplyHostProfileConfigurationResult applyHostProfileConfigurationResult)
        {
            return (applyHostProfileConfigurationResult != null && this.StartTime == applyHostProfileConfigurationResult.StartTime && this.CompleteTime == applyHostProfileConfigurationResult.CompleteTime && ((this.Host == null && applyHostProfileConfigurationResult.Host == null) || (this.Host != null && this.Host.Equals(applyHostProfileConfigurationResult.Host))) && this.Status == applyHostProfileConfigurationResult.Status && ((this.Errors == null && applyHostProfileConfigurationResult.Errors == null) || (this.Errors != null && applyHostProfileConfigurationResult.Errors != null && Enumerable.SequenceEqual(this.Errors, applyHostProfileConfigurationResult.Errors))) && ((this.LinkedView == null && applyHostProfileConfigurationResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(applyHostProfileConfigurationResult.LinkedView))));
        }

        public override bool Equals(object applyHostProfileConfigurationResult)
        {
            return Equals(applyHostProfileConfigurationResult as ApplyHostProfileConfigurationResult);
        }

        public override int GetHashCode()
        {
            return (StartTime + "_" + CompleteTime + "_" + Host + "_" + Status + "_" + Errors + "_" + LinkedView).GetHashCode();
        }
    }

    public class ApplyHostProfileConfigurationResult_LinkedView : IEquatable<ApplyHostProfileConfigurationResult_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ApplyHostProfileConfigurationResult_LinkedView applyHostProfileConfigurationResult_LinkedView)
        {
            return (applyHostProfileConfigurationResult_LinkedView != null && ((this.Host == null && applyHostProfileConfigurationResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(applyHostProfileConfigurationResult_LinkedView.Host))));
        }

        public override bool Equals(object applyHostProfileConfigurationResult_LinkedView)
        {
            return Equals(applyHostProfileConfigurationResult_LinkedView as ApplyHostProfileConfigurationResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ApplyHostProfileConfigurationSpec : ProfileExecuteResult, IEquatable<ApplyHostProfileConfigurationSpec>
    {
        public ManagedObjectReference Host { get; set; }

        public string[] TaskListRequirement { get; set; }

        public LocalizableMessage[] TaskDescription { get; set; }

        public bool? RebootStateless { get; set; }

        public bool? RebootHost { get; set; }

        public LocalizedMethodFault FaultData { get; set; }

        public ApplyHostProfileConfigurationSpec_LinkedView LinkedView { get; set; }

        public bool Equals(ApplyHostProfileConfigurationSpec applyHostProfileConfigurationSpec)
        {
            return (applyHostProfileConfigurationSpec != null && ((this.Host == null && applyHostProfileConfigurationSpec.Host == null) || (this.Host != null && this.Host.Equals(applyHostProfileConfigurationSpec.Host))) && ((this.TaskListRequirement == null && applyHostProfileConfigurationSpec.TaskListRequirement == null) || (this.TaskListRequirement != null && applyHostProfileConfigurationSpec.TaskListRequirement != null && Enumerable.SequenceEqual(this.TaskListRequirement, applyHostProfileConfigurationSpec.TaskListRequirement))) && ((this.TaskDescription == null && applyHostProfileConfigurationSpec.TaskDescription == null) || (this.TaskDescription != null && applyHostProfileConfigurationSpec.TaskDescription != null && Enumerable.SequenceEqual(this.TaskDescription, applyHostProfileConfigurationSpec.TaskDescription))) && ((this.RebootStateless == null && applyHostProfileConfigurationSpec.RebootStateless == null) || (this.RebootStateless != null && this.RebootStateless.Equals(applyHostProfileConfigurationSpec.RebootStateless))) && ((this.RebootHost == null && applyHostProfileConfigurationSpec.RebootHost == null) || (this.RebootHost != null && this.RebootHost.Equals(applyHostProfileConfigurationSpec.RebootHost))) && ((this.FaultData == null && applyHostProfileConfigurationSpec.FaultData == null) || (this.FaultData != null && this.FaultData.Equals(applyHostProfileConfigurationSpec.FaultData))) && ((this.LinkedView == null && applyHostProfileConfigurationSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(applyHostProfileConfigurationSpec.LinkedView))));
        }

        public override bool Equals(object applyHostProfileConfigurationSpec)
        {
            return Equals(applyHostProfileConfigurationSpec as ApplyHostProfileConfigurationSpec);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + TaskListRequirement + "_" + TaskDescription + "_" + RebootStateless + "_" + RebootHost + "_" + FaultData + "_" + LinkedView).GetHashCode();
        }
    }

    public class ApplyHostProfileConfigurationSpec_LinkedView : IEquatable<ApplyHostProfileConfigurationSpec_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ApplyHostProfileConfigurationSpec_LinkedView applyHostProfileConfigurationSpec_LinkedView)
        {
            return (applyHostProfileConfigurationSpec_LinkedView != null && ((this.Host == null && applyHostProfileConfigurationSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(applyHostProfileConfigurationSpec_LinkedView.Host))));
        }

        public override bool Equals(object applyHostProfileConfigurationSpec_LinkedView)
        {
            return Equals(applyHostProfileConfigurationSpec_LinkedView as ApplyHostProfileConfigurationSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ApplyProfile : DynamicData, IEquatable<ApplyProfile>
    {
        public bool Enabled { get; set; }

        public ProfilePolicy[] Policy { get; set; }

        public string ProfileTypeName { get; set; }

        public string ProfileVersion { get; set; }

        public ProfileApplyProfileProperty[] Property { get; set; }

        public bool? Favorite { get; set; }

        public bool? ToBeMerged { get; set; }

        public bool? ToReplaceWith { get; set; }

        public bool? ToBeDeleted { get; set; }

        public bool? CopyEnableStatus { get; set; }

        public bool? Hidden { get; set; }

        public bool Equals(ApplyProfile applyProfile)
        {
            return (applyProfile != null && this.Enabled == applyProfile.Enabled && ((this.Policy == null && applyProfile.Policy == null) || (this.Policy != null && applyProfile.Policy != null && Enumerable.SequenceEqual(this.Policy, applyProfile.Policy))) && this.ProfileTypeName == applyProfile.ProfileTypeName && this.ProfileVersion == applyProfile.ProfileVersion && ((this.Property == null && applyProfile.Property == null) || (this.Property != null && applyProfile.Property != null && Enumerable.SequenceEqual(this.Property, applyProfile.Property))) && ((this.Favorite == null && applyProfile.Favorite == null) || (this.Favorite != null && this.Favorite.Equals(applyProfile.Favorite))) && ((this.ToBeMerged == null && applyProfile.ToBeMerged == null) || (this.ToBeMerged != null && this.ToBeMerged.Equals(applyProfile.ToBeMerged))) && ((this.ToReplaceWith == null && applyProfile.ToReplaceWith == null) || (this.ToReplaceWith != null && this.ToReplaceWith.Equals(applyProfile.ToReplaceWith))) && ((this.ToBeDeleted == null && applyProfile.ToBeDeleted == null) || (this.ToBeDeleted != null && this.ToBeDeleted.Equals(applyProfile.ToBeDeleted))) && ((this.CopyEnableStatus == null && applyProfile.CopyEnableStatus == null) || (this.CopyEnableStatus != null && this.CopyEnableStatus.Equals(applyProfile.CopyEnableStatus))) && ((this.Hidden == null && applyProfile.Hidden == null) || (this.Hidden != null && this.Hidden.Equals(applyProfile.Hidden))));
        }

        public override bool Equals(object applyProfile)
        {
            return Equals(applyProfile as ApplyProfile);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + Policy + "_" + ProfileTypeName + "_" + ProfileVersion + "_" + Property + "_" + Favorite + "_" + ToBeMerged + "_" + ToReplaceWith + "_" + ToBeDeleted + "_" + CopyEnableStatus + "_" + Hidden).GetHashCode();
        }
    }

    public class ApplyStorageRecommendationResult : DynamicData, IEquatable<ApplyStorageRecommendationResult>
    {
        public ManagedObjectReference Vm { get; set; }

        public ApplyStorageRecommendationResult_LinkedView LinkedView { get; set; }

        public bool Equals(ApplyStorageRecommendationResult applyStorageRecommendationResult)
        {
            return (applyStorageRecommendationResult != null && ((this.Vm == null && applyStorageRecommendationResult.Vm == null) || (this.Vm != null && this.Vm.Equals(applyStorageRecommendationResult.Vm))) && ((this.LinkedView == null && applyStorageRecommendationResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(applyStorageRecommendationResult.LinkedView))));
        }

        public override bool Equals(object applyStorageRecommendationResult)
        {
            return Equals(applyStorageRecommendationResult as ApplyStorageRecommendationResult);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class ApplyStorageRecommendationResult_LinkedView : IEquatable<ApplyStorageRecommendationResult_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ApplyStorageRecommendationResult_LinkedView applyStorageRecommendationResult_LinkedView)
        {
            return (applyStorageRecommendationResult_LinkedView != null && ((this.Vm == null && applyStorageRecommendationResult_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(applyStorageRecommendationResult_LinkedView.Vm))));
        }

        public override bool Equals(object applyStorageRecommendationResult_LinkedView)
        {
            return Equals(applyStorageRecommendationResult_LinkedView as ApplyStorageRecommendationResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ArrayUpdateSpec : DynamicData, IEquatable<ArrayUpdateSpec>
    {
        public ArrayUpdateOperation Operation { get; set; }

        public object RemoveKey { get; set; }

        public bool Equals(ArrayUpdateSpec arrayUpdateSpec)
        {
            return (arrayUpdateSpec != null && this.Operation == arrayUpdateSpec.Operation && ((this.RemoveKey == null && arrayUpdateSpec.RemoveKey == null) || (this.RemoveKey != null && this.RemoveKey.Equals(arrayUpdateSpec.RemoveKey))));
        }

        public override bool Equals(object arrayUpdateSpec)
        {
            return Equals(arrayUpdateSpec as ArrayUpdateSpec);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + RemoveKey).GetHashCode();
        }
    }

    public class AuthenticationProfile : ApplyProfile, IEquatable<AuthenticationProfile>
    {
        public ActiveDirectoryProfile ActiveDirectory { get; set; }

        public bool Equals(AuthenticationProfile authenticationProfile)
        {
            return (authenticationProfile != null && ((this.ActiveDirectory == null && authenticationProfile.ActiveDirectory == null) || (this.ActiveDirectory != null && this.ActiveDirectory.Equals(authenticationProfile.ActiveDirectory))));
        }

        public override bool Equals(object authenticationProfile)
        {
            return Equals(authenticationProfile as AuthenticationProfile);
        }

        public override int GetHashCode()
        {
            return (ActiveDirectory).GetHashCode();
        }
    }

    public class AuthMinimumAdminPermission : VimFault, IEquatable<AuthMinimumAdminPermission>
    {
        public bool Equals(AuthMinimumAdminPermission authMinimumAdminPermission)
        {
            return (authMinimumAdminPermission != null && base.Equals(authMinimumAdminPermission));
        }

        public override bool Equals(object authMinimumAdminPermission)
        {
            return Equals(authMinimumAdminPermission as AuthMinimumAdminPermission);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AuthorizationDescription : DynamicData, IEquatable<AuthorizationDescription>
    {
        public ElementDescription[] Privilege { get; set; }

        public ElementDescription[] PrivilegeGroup { get; set; }

        public bool Equals(AuthorizationDescription authorizationDescription)
        {
            return (authorizationDescription != null && ((this.Privilege == null && authorizationDescription.Privilege == null) || (this.Privilege != null && authorizationDescription.Privilege != null && Enumerable.SequenceEqual(this.Privilege, authorizationDescription.Privilege))) && ((this.PrivilegeGroup == null && authorizationDescription.PrivilegeGroup == null) || (this.PrivilegeGroup != null && authorizationDescription.PrivilegeGroup != null && Enumerable.SequenceEqual(this.PrivilegeGroup, authorizationDescription.PrivilegeGroup))));
        }

        public override bool Equals(object authorizationDescription)
        {
            return Equals(authorizationDescription as AuthorizationDescription);
        }

        public override int GetHashCode()
        {
            return (Privilege + "_" + PrivilegeGroup).GetHashCode();
        }
    }

    public class AuthorizationEvent : Event, IEquatable<AuthorizationEvent>
    {
        public bool Equals(AuthorizationEvent authorizationEvent)
        {
            return (authorizationEvent != null && base.Equals(authorizationEvent));
        }

        public override bool Equals(object authorizationEvent)
        {
            return Equals(authorizationEvent as AuthorizationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class AuthorizationManager : ViewBase, IEquatable<AuthorizationManager>
    {
        public AuthorizationPrivilege[] PrivilegeList { get; set; }

        public AuthorizationRole[] RoleList { get; set; }

        public AuthorizationDescription Description { get; set; }

        public int AddAuthorizationRole(string name, string[] privIds)
        {
            return default(int);
        }

        public void RemoveAuthorizationRole(int roleId, bool failIfUsed)
        {
        }

        public void UpdateAuthorizationRole(int roleId, string newName, string[] privIds)
        {
        }

        public void MergePermissions(int srcRoleId, int dstRoleId)
        {
        }

        public Permission[] RetrieveRolePermissions(int roleId)
        {
            return default(Permission[]);
        }

        public Permission[] RetrieveEntityPermissions(ManagedObjectReference entity, bool inherited)
        {
            return default(Permission[]);
        }

        public Permission[] RetrieveAllPermissions()
        {
            return default(Permission[]);
        }

        public void SetEntityPermissions(ManagedObjectReference entity, Permission[] permission)
        {
        }

        public void ResetEntityPermissions(ManagedObjectReference entity, Permission[] permission)
        {
        }

        public void RemoveEntityPermission(ManagedObjectReference entity, string user, bool isGroup)
        {
        }

        public bool[] HasPrivilegeOnEntity(ManagedObjectReference entity, string sessionId, string[] privId)
        {
            return default(bool[]);
        }

        public EntityPrivilege[] HasPrivilegeOnEntities(ManagedObjectReference[] entity, string sessionId, string[] privId)
        {
            return default(EntityPrivilege[]);
        }

        public EntityPrivilege[] HasUserPrivilegeOnEntities(ManagedObjectReference[] entities, string userName, string[] privId)
        {
            return default(EntityPrivilege[]);
        }

        public UserPrivilegeResult[] FetchUserPrivilegeOnEntities(ManagedObjectReference[] entities, string userName)
        {
            return default(UserPrivilegeResult[]);
        }

        public bool Equals(AuthorizationManager authorizationManager)
        {
            return (authorizationManager != null && ((this.PrivilegeList == null && authorizationManager.PrivilegeList == null) || (this.PrivilegeList != null && authorizationManager.PrivilegeList != null && Enumerable.SequenceEqual(this.PrivilegeList, authorizationManager.PrivilegeList))) && ((this.RoleList == null && authorizationManager.RoleList == null) || (this.RoleList != null && authorizationManager.RoleList != null && Enumerable.SequenceEqual(this.RoleList, authorizationManager.RoleList))) && ((this.Description == null && authorizationManager.Description == null) || (this.Description != null && this.Description.Equals(authorizationManager.Description))));
        }

        public override bool Equals(object authorizationManager)
        {
            return Equals(authorizationManager as AuthorizationManager);
        }

        public override int GetHashCode()
        {
            return (PrivilegeList + "_" + RoleList + "_" + Description).GetHashCode();
        }
    }

    public class AuthorizationPrivilege : DynamicData, IEquatable<AuthorizationPrivilege>
    {
        public string PrivId { get; set; }

        public bool OnParent { get; set; }

        public string Name { get; set; }

        public string PrivGroupName { get; set; }

        public bool Equals(AuthorizationPrivilege authorizationPrivilege)
        {
            return (authorizationPrivilege != null && this.PrivId == authorizationPrivilege.PrivId && this.OnParent == authorizationPrivilege.OnParent && this.Name == authorizationPrivilege.Name && this.PrivGroupName == authorizationPrivilege.PrivGroupName);
        }

        public override bool Equals(object authorizationPrivilege)
        {
            return Equals(authorizationPrivilege as AuthorizationPrivilege);
        }

        public override int GetHashCode()
        {
            return (PrivId + "_" + OnParent + "_" + Name + "_" + PrivGroupName).GetHashCode();
        }
    }

    public class AuthorizationRole : DynamicData, IEquatable<AuthorizationRole>
    {
        public int RoleId { get; set; }

        public bool System { get; set; }

        public string Name { get; set; }

        public Description Info { get; set; }

        public string[] Privilege { get; set; }

        public bool Equals(AuthorizationRole authorizationRole)
        {
            return (authorizationRole != null && this.RoleId == authorizationRole.RoleId && this.System == authorizationRole.System && this.Name == authorizationRole.Name && ((this.Info == null && authorizationRole.Info == null) || (this.Info != null && this.Info.Equals(authorizationRole.Info))) && ((this.Privilege == null && authorizationRole.Privilege == null) || (this.Privilege != null && authorizationRole.Privilege != null && Enumerable.SequenceEqual(this.Privilege, authorizationRole.Privilege))));
        }

        public override bool Equals(object authorizationRole)
        {
            return Equals(authorizationRole as AuthorizationRole);
        }

        public override int GetHashCode()
        {
            return (RoleId + "_" + System + "_" + Name + "_" + Info + "_" + Privilege).GetHashCode();
        }
    }

    public class AutoStartDefaults : DynamicData, IEquatable<AutoStartDefaults>
    {
        public bool? Enabled { get; set; }

        public int? StartDelay { get; set; }

        public int? StopDelay { get; set; }

        public bool? WaitForHeartbeat { get; set; }

        public string StopAction { get; set; }

        public bool Equals(AutoStartDefaults autoStartDefaults)
        {
            return (autoStartDefaults != null && ((this.Enabled == null && autoStartDefaults.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(autoStartDefaults.Enabled))) && ((this.StartDelay == null && autoStartDefaults.StartDelay == null) || (this.StartDelay != null && this.StartDelay.Equals(autoStartDefaults.StartDelay))) && ((this.StopDelay == null && autoStartDefaults.StopDelay == null) || (this.StopDelay != null && this.StopDelay.Equals(autoStartDefaults.StopDelay))) && ((this.WaitForHeartbeat == null && autoStartDefaults.WaitForHeartbeat == null) || (this.WaitForHeartbeat != null && this.WaitForHeartbeat.Equals(autoStartDefaults.WaitForHeartbeat))) && this.StopAction == autoStartDefaults.StopAction);
        }

        public override bool Equals(object autoStartDefaults)
        {
            return Equals(autoStartDefaults as AutoStartDefaults);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + StartDelay + "_" + StopDelay + "_" + WaitForHeartbeat + "_" + StopAction).GetHashCode();
        }
    }

    public class AutoStartPowerInfo : DynamicData, IEquatable<AutoStartPowerInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public int StartOrder { get; set; }

        public int StartDelay { get; set; }

        public AutoStartWaitHeartbeatSetting WaitForHeartbeat { get; set; }

        public string StartAction { get; set; }

        public int StopDelay { get; set; }

        public string StopAction { get; set; }

        public AutoStartPowerInfo_LinkedView LinkedView { get; set; }

        public bool Equals(AutoStartPowerInfo autoStartPowerInfo)
        {
            return (autoStartPowerInfo != null && ((this.Key == null && autoStartPowerInfo.Key == null) || (this.Key != null && this.Key.Equals(autoStartPowerInfo.Key))) && this.StartOrder == autoStartPowerInfo.StartOrder && this.StartDelay == autoStartPowerInfo.StartDelay && this.WaitForHeartbeat == autoStartPowerInfo.WaitForHeartbeat && this.StartAction == autoStartPowerInfo.StartAction && this.StopDelay == autoStartPowerInfo.StopDelay && this.StopAction == autoStartPowerInfo.StopAction && ((this.LinkedView == null && autoStartPowerInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(autoStartPowerInfo.LinkedView))));
        }

        public override bool Equals(object autoStartPowerInfo)
        {
            return Equals(autoStartPowerInfo as AutoStartPowerInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + StartOrder + "_" + StartDelay + "_" + WaitForHeartbeat + "_" + StartAction + "_" + StopDelay + "_" + StopAction + "_" + LinkedView).GetHashCode();
        }
    }

    public class AutoStartPowerInfo_LinkedView : IEquatable<AutoStartPowerInfo_LinkedView>
    {
        public VirtualMachine Key { get; set; }

        public bool Equals(AutoStartPowerInfo_LinkedView autoStartPowerInfo_LinkedView)
        {
            return (autoStartPowerInfo_LinkedView != null && ((this.Key == null && autoStartPowerInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(autoStartPowerInfo_LinkedView.Key))));
        }

        public override bool Equals(object autoStartPowerInfo_LinkedView)
        {
            return Equals(autoStartPowerInfo_LinkedView as AutoStartPowerInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class BackupBlobReadFailure : DvsFault, IEquatable<BackupBlobReadFailure>
    {
        public string EntityName { get; set; }

        public string EntityType { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(BackupBlobReadFailure backupBlobReadFailure)
        {
            return (backupBlobReadFailure != null && this.EntityName == backupBlobReadFailure.EntityName && this.EntityType == backupBlobReadFailure.EntityType && ((this.Fault == null && backupBlobReadFailure.Fault == null) || (this.Fault != null && this.Fault.Equals(backupBlobReadFailure.Fault))));
        }

        public override bool Equals(object backupBlobReadFailure)
        {
            return Equals(backupBlobReadFailure as BackupBlobReadFailure);
        }

        public override int GetHashCode()
        {
            return (EntityName + "_" + EntityType + "_" + Fault).GetHashCode();
        }
    }

    public class BackupBlobWriteFailure : DvsFault, IEquatable<BackupBlobWriteFailure>
    {
        public string EntityName { get; set; }

        public string EntityType { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(BackupBlobWriteFailure backupBlobWriteFailure)
        {
            return (backupBlobWriteFailure != null && this.EntityName == backupBlobWriteFailure.EntityName && this.EntityType == backupBlobWriteFailure.EntityType && ((this.Fault == null && backupBlobWriteFailure.Fault == null) || (this.Fault != null && this.Fault.Equals(backupBlobWriteFailure.Fault))));
        }

        public override bool Equals(object backupBlobWriteFailure)
        {
            return Equals(backupBlobWriteFailure as BackupBlobWriteFailure);
        }

        public override int GetHashCode()
        {
            return (EntityName + "_" + EntityType + "_" + Fault).GetHashCode();
        }
    }

    public class BadUsernameSessionEvent : SessionEvent, IEquatable<BadUsernameSessionEvent>
    {
        public string IpAddress { get; set; }

        public bool Equals(BadUsernameSessionEvent badUsernameSessionEvent)
        {
            return (badUsernameSessionEvent != null && this.IpAddress == badUsernameSessionEvent.IpAddress);
        }

        public override bool Equals(object badUsernameSessionEvent)
        {
            return Equals(badUsernameSessionEvent as BadUsernameSessionEvent);
        }

        public override int GetHashCode()
        {
            return (IpAddress).GetHashCode();
        }
    }

    public class BaseConfigInfo : DynamicData, IEquatable<BaseConfigInfo>
    {
        public ID Id { get; set; }

        public string Name { get; set; }

        public DateTime CreateTime { get; set; }

        public bool? KeepAfterDeleteVm { get; set; }

        public bool? RelocationDisabled { get; set; }

        public bool? NativeSnapshotSupported { get; set; }

        public bool? ChangedBlockTrackingEnabled { get; set; }

        public BaseConfigInfoBackingInfo Backing { get; set; }

        public string[] Iofilter { get; set; }

        public bool Equals(BaseConfigInfo baseConfigInfo)
        {
            return (baseConfigInfo != null && ((this.Id == null && baseConfigInfo.Id == null) || (this.Id != null && this.Id.Equals(baseConfigInfo.Id))) && this.Name == baseConfigInfo.Name && this.CreateTime == baseConfigInfo.CreateTime && ((this.KeepAfterDeleteVm == null && baseConfigInfo.KeepAfterDeleteVm == null) || (this.KeepAfterDeleteVm != null && this.KeepAfterDeleteVm.Equals(baseConfigInfo.KeepAfterDeleteVm))) && ((this.RelocationDisabled == null && baseConfigInfo.RelocationDisabled == null) || (this.RelocationDisabled != null && this.RelocationDisabled.Equals(baseConfigInfo.RelocationDisabled))) && ((this.NativeSnapshotSupported == null && baseConfigInfo.NativeSnapshotSupported == null) || (this.NativeSnapshotSupported != null && this.NativeSnapshotSupported.Equals(baseConfigInfo.NativeSnapshotSupported))) && ((this.ChangedBlockTrackingEnabled == null && baseConfigInfo.ChangedBlockTrackingEnabled == null) || (this.ChangedBlockTrackingEnabled != null && this.ChangedBlockTrackingEnabled.Equals(baseConfigInfo.ChangedBlockTrackingEnabled))) && ((this.Backing == null && baseConfigInfo.Backing == null) || (this.Backing != null && this.Backing.Equals(baseConfigInfo.Backing))) && ((this.Iofilter == null && baseConfigInfo.Iofilter == null) || (this.Iofilter != null && baseConfigInfo.Iofilter != null && Enumerable.SequenceEqual(this.Iofilter, baseConfigInfo.Iofilter))));
        }

        public override bool Equals(object baseConfigInfo)
        {
            return Equals(baseConfigInfo as BaseConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + CreateTime + "_" + KeepAfterDeleteVm + "_" + RelocationDisabled + "_" + NativeSnapshotSupported + "_" + ChangedBlockTrackingEnabled + "_" + Backing + "_" + Iofilter).GetHashCode();
        }
    }

    public class BaseConfigInfoBackingInfo : DynamicData, IEquatable<BaseConfigInfoBackingInfo>
    {
        public ManagedObjectReference Datastore { get; set; }

        public BaseConfigInfoBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(BaseConfigInfoBackingInfo baseConfigInfoBackingInfo)
        {
            return (baseConfigInfoBackingInfo != null && ((this.Datastore == null && baseConfigInfoBackingInfo.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(baseConfigInfoBackingInfo.Datastore))) && ((this.LinkedView == null && baseConfigInfoBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(baseConfigInfoBackingInfo.LinkedView))));
        }

        public override bool Equals(object baseConfigInfoBackingInfo)
        {
            return Equals(baseConfigInfoBackingInfo as BaseConfigInfoBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class BaseConfigInfoBackingInfo_LinkedView : IEquatable<BaseConfigInfoBackingInfo_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(BaseConfigInfoBackingInfo_LinkedView baseConfigInfoBackingInfo_LinkedView)
        {
            return (baseConfigInfoBackingInfo_LinkedView != null && ((this.Datastore == null && baseConfigInfoBackingInfo_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(baseConfigInfoBackingInfo_LinkedView.Datastore))));
        }

        public override bool Equals(object baseConfigInfoBackingInfo_LinkedView)
        {
            return Equals(baseConfigInfoBackingInfo_LinkedView as BaseConfigInfoBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class BaseConfigInfoDiskFileBackingInfo : BaseConfigInfoFileBackingInfo, IEquatable<BaseConfigInfoDiskFileBackingInfo>
    {
        public string ProvisioningType { get; set; }

        public new BaseConfigInfoDiskFileBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(BaseConfigInfoDiskFileBackingInfo baseConfigInfoDiskFileBackingInfo)
        {
            return (baseConfigInfoDiskFileBackingInfo != null && this.ProvisioningType == baseConfigInfoDiskFileBackingInfo.ProvisioningType && ((this.LinkedView == null && baseConfigInfoDiskFileBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(baseConfigInfoDiskFileBackingInfo.LinkedView))));
        }

        public override bool Equals(object baseConfigInfoDiskFileBackingInfo)
        {
            return Equals(baseConfigInfoDiskFileBackingInfo as BaseConfigInfoDiskFileBackingInfo);
        }

        public override int GetHashCode()
        {
            return (ProvisioningType + "_" + LinkedView).GetHashCode();
        }
    }

    public class BaseConfigInfoDiskFileBackingInfo_LinkedView : BaseConfigInfoFileBackingInfo_LinkedView, IEquatable<BaseConfigInfoDiskFileBackingInfo_LinkedView>
    {
        public bool Equals(BaseConfigInfoDiskFileBackingInfo_LinkedView baseConfigInfoDiskFileBackingInfo_LinkedView)
        {
            return (baseConfigInfoDiskFileBackingInfo_LinkedView != null && base.Equals(baseConfigInfoDiskFileBackingInfo_LinkedView));
        }

        public override bool Equals(object baseConfigInfoDiskFileBackingInfo_LinkedView)
        {
            return Equals(baseConfigInfoDiskFileBackingInfo_LinkedView as BaseConfigInfoDiskFileBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class BaseConfigInfoFileBackingInfo : BaseConfigInfoBackingInfo, IEquatable<BaseConfigInfoFileBackingInfo>
    {
        public new BaseConfigInfoFileBackingInfo_LinkedView LinkedView { get; set; }

        public string FilePath { get; set; }

        public string BackingObjectId { get; set; }

        public BaseConfigInfoFileBackingInfo Parent { get; set; }

        public long? DeltaSizeInMB { get; set; }

        public bool Equals(BaseConfigInfoFileBackingInfo baseConfigInfoFileBackingInfo)
        {
            return (baseConfigInfoFileBackingInfo != null && ((this.LinkedView == null && baseConfigInfoFileBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(baseConfigInfoFileBackingInfo.LinkedView))) && this.FilePath == baseConfigInfoFileBackingInfo.FilePath && this.BackingObjectId == baseConfigInfoFileBackingInfo.BackingObjectId && ((this.Parent == null && baseConfigInfoFileBackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(baseConfigInfoFileBackingInfo.Parent))) && ((this.DeltaSizeInMB == null && baseConfigInfoFileBackingInfo.DeltaSizeInMB == null) || (this.DeltaSizeInMB != null && this.DeltaSizeInMB.Equals(baseConfigInfoFileBackingInfo.DeltaSizeInMB))));
        }

        public override bool Equals(object baseConfigInfoFileBackingInfo)
        {
            return Equals(baseConfigInfoFileBackingInfo as BaseConfigInfoFileBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LinkedView + "_" + FilePath + "_" + BackingObjectId + "_" + Parent + "_" + DeltaSizeInMB).GetHashCode();
        }
    }

    public class BaseConfigInfoFileBackingInfo_LinkedView : BaseConfigInfoBackingInfo_LinkedView, IEquatable<BaseConfigInfoFileBackingInfo_LinkedView>
    {
        public bool Equals(BaseConfigInfoFileBackingInfo_LinkedView baseConfigInfoFileBackingInfo_LinkedView)
        {
            return (baseConfigInfoFileBackingInfo_LinkedView != null && base.Equals(baseConfigInfoFileBackingInfo_LinkedView));
        }

        public override bool Equals(object baseConfigInfoFileBackingInfo_LinkedView)
        {
            return Equals(baseConfigInfoFileBackingInfo_LinkedView as BaseConfigInfoFileBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class BaseConfigInfoRawDiskMappingBackingInfo : BaseConfigInfoFileBackingInfo, IEquatable<BaseConfigInfoRawDiskMappingBackingInfo>
    {
        public string LunUuid { get; set; }

        public string CompatibilityMode { get; set; }

        public new BaseConfigInfoRawDiskMappingBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(BaseConfigInfoRawDiskMappingBackingInfo baseConfigInfoRawDiskMappingBackingInfo)
        {
            return (baseConfigInfoRawDiskMappingBackingInfo != null && this.LunUuid == baseConfigInfoRawDiskMappingBackingInfo.LunUuid && this.CompatibilityMode == baseConfigInfoRawDiskMappingBackingInfo.CompatibilityMode && ((this.LinkedView == null && baseConfigInfoRawDiskMappingBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(baseConfigInfoRawDiskMappingBackingInfo.LinkedView))));
        }

        public override bool Equals(object baseConfigInfoRawDiskMappingBackingInfo)
        {
            return Equals(baseConfigInfoRawDiskMappingBackingInfo as BaseConfigInfoRawDiskMappingBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LunUuid + "_" + CompatibilityMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class BaseConfigInfoRawDiskMappingBackingInfo_LinkedView : BaseConfigInfoFileBackingInfo_LinkedView, IEquatable<BaseConfigInfoRawDiskMappingBackingInfo_LinkedView>
    {
        public bool Equals(BaseConfigInfoRawDiskMappingBackingInfo_LinkedView baseConfigInfoRawDiskMappingBackingInfo_LinkedView)
        {
            return (baseConfigInfoRawDiskMappingBackingInfo_LinkedView != null && base.Equals(baseConfigInfoRawDiskMappingBackingInfo_LinkedView));
        }

        public override bool Equals(object baseConfigInfoRawDiskMappingBackingInfo_LinkedView)
        {
            return Equals(baseConfigInfoRawDiskMappingBackingInfo_LinkedView as BaseConfigInfoRawDiskMappingBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class BatchResult : DynamicData, IEquatable<BatchResult>
    {
        public string Result { get; set; }

        public string HostKey { get; set; }

        public ManagedObjectReference Ds { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public BatchResult_LinkedView LinkedView { get; set; }

        public bool Equals(BatchResult batchResult)
        {
            return (batchResult != null && this.Result == batchResult.Result && this.HostKey == batchResult.HostKey && ((this.Ds == null && batchResult.Ds == null) || (this.Ds != null && this.Ds.Equals(batchResult.Ds))) && ((this.Fault == null && batchResult.Fault == null) || (this.Fault != null && this.Fault.Equals(batchResult.Fault))) && ((this.LinkedView == null && batchResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(batchResult.LinkedView))));
        }

        public override bool Equals(object batchResult)
        {
            return Equals(batchResult as BatchResult);
        }

        public override int GetHashCode()
        {
            return (Result + "_" + HostKey + "_" + Ds + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class BatchResult_LinkedView : IEquatable<BatchResult_LinkedView>
    {
        public Datastore Ds { get; set; }

        public bool Equals(BatchResult_LinkedView batchResult_LinkedView)
        {
            return (batchResult_LinkedView != null && ((this.Ds == null && batchResult_LinkedView.Ds == null) || (this.Ds != null && this.Ds.Equals(batchResult_LinkedView.Ds))));
        }

        public override bool Equals(object batchResult_LinkedView)
        {
            return Equals(batchResult_LinkedView as BatchResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Ds).GetHashCode();
        }
    }

    public class BlockedByFirewall : HostConfigFault, IEquatable<BlockedByFirewall>
    {
        public bool Equals(BlockedByFirewall blockedByFirewall)
        {
            return (blockedByFirewall != null && base.Equals(blockedByFirewall));
        }

        public override bool Equals(object blockedByFirewall)
        {
            return Equals(blockedByFirewall as BlockedByFirewall);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class BoolOption : OptionType, IEquatable<BoolOption>
    {
        public bool Supported { get; set; }

        public bool DefaultValue { get; set; }

        public bool Equals(BoolOption boolOption)
        {
            return (boolOption != null && this.Supported == boolOption.Supported && this.DefaultValue == boolOption.DefaultValue);
        }

        public override bool Equals(object boolOption)
        {
            return Equals(boolOption as BoolOption);
        }

        public override int GetHashCode()
        {
            return (Supported + "_" + DefaultValue).GetHashCode();
        }
    }

    public class BoolPolicy : InheritablePolicy, IEquatable<BoolPolicy>
    {
        public bool? Value { get; set; }

        public bool Equals(BoolPolicy boolPolicy)
        {
            return (boolPolicy != null && ((this.Value == null && boolPolicy.Value == null) || (this.Value != null && this.Value.Equals(boolPolicy.Value))));
        }

        public override bool Equals(object boolPolicy)
        {
            return Equals(boolPolicy as BoolPolicy);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class CAMServerRefusedConnection : InvalidCAMServer, IEquatable<CAMServerRefusedConnection>
    {
        public bool Equals(CAMServerRefusedConnection cAMServerRefusedConnection)
        {
            return (cAMServerRefusedConnection != null && base.Equals(cAMServerRefusedConnection));
        }

        public override bool Equals(object cAMServerRefusedConnection)
        {
            return Equals(cAMServerRefusedConnection as CAMServerRefusedConnection);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CanceledHostOperationEvent : HostEvent, IEquatable<CanceledHostOperationEvent>
    {
        public bool Equals(CanceledHostOperationEvent canceledHostOperationEvent)
        {
            return (canceledHostOperationEvent != null && base.Equals(canceledHostOperationEvent));
        }

        public override bool Equals(object canceledHostOperationEvent)
        {
            return Equals(canceledHostOperationEvent as CanceledHostOperationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAccessFile : FileFault, IEquatable<CannotAccessFile>
    {
        public bool Equals(CannotAccessFile cannotAccessFile)
        {
            return (cannotAccessFile != null && base.Equals(cannotAccessFile));
        }

        public override bool Equals(object cannotAccessFile)
        {
            return Equals(cannotAccessFile as CannotAccessFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAccessLocalSource : VimFault, IEquatable<CannotAccessLocalSource>
    {
        public bool Equals(CannotAccessLocalSource cannotAccessLocalSource)
        {
            return (cannotAccessLocalSource != null && base.Equals(cannotAccessLocalSource));
        }

        public override bool Equals(object cannotAccessLocalSource)
        {
            return Equals(cannotAccessLocalSource as CannotAccessLocalSource);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAccessNetwork : CannotAccessVmDevice, IEquatable<CannotAccessNetwork>
    {
        public ManagedObjectReference Network { get; set; }

        public CannotAccessNetwork_LinkedView LinkedView { get; set; }

        public bool Equals(CannotAccessNetwork cannotAccessNetwork)
        {
            return (cannotAccessNetwork != null && ((this.Network == null && cannotAccessNetwork.Network == null) || (this.Network != null && this.Network.Equals(cannotAccessNetwork.Network))) && ((this.LinkedView == null && cannotAccessNetwork.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotAccessNetwork.LinkedView))));
        }

        public override bool Equals(object cannotAccessNetwork)
        {
            return Equals(cannotAccessNetwork as CannotAccessNetwork);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotAccessNetwork_LinkedView : IEquatable<CannotAccessNetwork_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(CannotAccessNetwork_LinkedView cannotAccessNetwork_LinkedView)
        {
            return (cannotAccessNetwork_LinkedView != null && ((this.Network == null && cannotAccessNetwork_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(cannotAccessNetwork_LinkedView.Network))));
        }

        public override bool Equals(object cannotAccessNetwork_LinkedView)
        {
            return Equals(cannotAccessNetwork_LinkedView as CannotAccessNetwork_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class CannotAccessVmComponent : VmConfigFault, IEquatable<CannotAccessVmComponent>
    {
        public bool Equals(CannotAccessVmComponent cannotAccessVmComponent)
        {
            return (cannotAccessVmComponent != null && base.Equals(cannotAccessVmComponent));
        }

        public override bool Equals(object cannotAccessVmComponent)
        {
            return Equals(cannotAccessVmComponent as CannotAccessVmComponent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAccessVmConfig : CannotAccessVmComponent, IEquatable<CannotAccessVmConfig>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(CannotAccessVmConfig cannotAccessVmConfig)
        {
            return (cannotAccessVmConfig != null && ((this.Reason == null && cannotAccessVmConfig.Reason == null) || (this.Reason != null && this.Reason.Equals(cannotAccessVmConfig.Reason))));
        }

        public override bool Equals(object cannotAccessVmConfig)
        {
            return Equals(cannotAccessVmConfig as CannotAccessVmConfig);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class CannotAccessVmDevice : CannotAccessVmComponent, IEquatable<CannotAccessVmDevice>
    {
        public string Device { get; set; }

        public string Backing { get; set; }

        public bool Connected { get; set; }

        public bool Equals(CannotAccessVmDevice cannotAccessVmDevice)
        {
            return (cannotAccessVmDevice != null && this.Device == cannotAccessVmDevice.Device && this.Backing == cannotAccessVmDevice.Backing && this.Connected == cannotAccessVmDevice.Connected);
        }

        public override bool Equals(object cannotAccessVmDevice)
        {
            return Equals(cannotAccessVmDevice as CannotAccessVmDevice);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Backing + "_" + Connected).GetHashCode();
        }
    }

    public class CannotAccessVmDisk : CannotAccessVmDevice, IEquatable<CannotAccessVmDisk>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(CannotAccessVmDisk cannotAccessVmDisk)
        {
            return (cannotAccessVmDisk != null && ((this.Fault == null && cannotAccessVmDisk.Fault == null) || (this.Fault != null && this.Fault.Equals(cannotAccessVmDisk.Fault))));
        }

        public override bool Equals(object cannotAccessVmDisk)
        {
            return Equals(cannotAccessVmDisk as CannotAccessVmDisk);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class CannotAddHostWithFTVmAsStandalone : HostConnectFault, IEquatable<CannotAddHostWithFTVmAsStandalone>
    {
        public bool Equals(CannotAddHostWithFTVmAsStandalone cannotAddHostWithFTVmAsStandalone)
        {
            return (cannotAddHostWithFTVmAsStandalone != null && base.Equals(cannotAddHostWithFTVmAsStandalone));
        }

        public override bool Equals(object cannotAddHostWithFTVmAsStandalone)
        {
            return Equals(cannotAddHostWithFTVmAsStandalone as CannotAddHostWithFTVmAsStandalone);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAddHostWithFTVmToDifferentCluster : HostConnectFault, IEquatable<CannotAddHostWithFTVmToDifferentCluster>
    {
        public bool Equals(CannotAddHostWithFTVmToDifferentCluster cannotAddHostWithFTVmToDifferentCluster)
        {
            return (cannotAddHostWithFTVmToDifferentCluster != null && base.Equals(cannotAddHostWithFTVmToDifferentCluster));
        }

        public override bool Equals(object cannotAddHostWithFTVmToDifferentCluster)
        {
            return Equals(cannotAddHostWithFTVmToDifferentCluster as CannotAddHostWithFTVmToDifferentCluster);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotAddHostWithFTVmToNonHACluster : HostConnectFault, IEquatable<CannotAddHostWithFTVmToNonHACluster>
    {
        public bool Equals(CannotAddHostWithFTVmToNonHACluster cannotAddHostWithFTVmToNonHACluster)
        {
            return (cannotAddHostWithFTVmToNonHACluster != null && base.Equals(cannotAddHostWithFTVmToNonHACluster));
        }

        public override bool Equals(object cannotAddHostWithFTVmToNonHACluster)
        {
            return Equals(cannotAddHostWithFTVmToNonHACluster as CannotAddHostWithFTVmToNonHACluster);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotChangeDrsBehaviorForFtSecondary : VmFaultToleranceIssue, IEquatable<CannotChangeDrsBehaviorForFtSecondary>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public CannotChangeDrsBehaviorForFtSecondary_LinkedView LinkedView { get; set; }

        public bool Equals(CannotChangeDrsBehaviorForFtSecondary cannotChangeDrsBehaviorForFtSecondary)
        {
            return (cannotChangeDrsBehaviorForFtSecondary != null && ((this.Vm == null && cannotChangeDrsBehaviorForFtSecondary.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotChangeDrsBehaviorForFtSecondary.Vm))) && this.VmName == cannotChangeDrsBehaviorForFtSecondary.VmName && ((this.LinkedView == null && cannotChangeDrsBehaviorForFtSecondary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotChangeDrsBehaviorForFtSecondary.LinkedView))));
        }

        public override bool Equals(object cannotChangeDrsBehaviorForFtSecondary)
        {
            return Equals(cannotChangeDrsBehaviorForFtSecondary as CannotChangeDrsBehaviorForFtSecondary);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotChangeDrsBehaviorForFtSecondary_LinkedView : IEquatable<CannotChangeDrsBehaviorForFtSecondary_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(CannotChangeDrsBehaviorForFtSecondary_LinkedView cannotChangeDrsBehaviorForFtSecondary_LinkedView)
        {
            return (cannotChangeDrsBehaviorForFtSecondary_LinkedView != null && ((this.Vm == null && cannotChangeDrsBehaviorForFtSecondary_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotChangeDrsBehaviorForFtSecondary_LinkedView.Vm))));
        }

        public override bool Equals(object cannotChangeDrsBehaviorForFtSecondary_LinkedView)
        {
            return Equals(cannotChangeDrsBehaviorForFtSecondary_LinkedView as CannotChangeDrsBehaviorForFtSecondary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class CannotChangeHaSettingsForFtSecondary : VmFaultToleranceIssue, IEquatable<CannotChangeHaSettingsForFtSecondary>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public CannotChangeHaSettingsForFtSecondary_LinkedView LinkedView { get; set; }

        public bool Equals(CannotChangeHaSettingsForFtSecondary cannotChangeHaSettingsForFtSecondary)
        {
            return (cannotChangeHaSettingsForFtSecondary != null && ((this.Vm == null && cannotChangeHaSettingsForFtSecondary.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotChangeHaSettingsForFtSecondary.Vm))) && this.VmName == cannotChangeHaSettingsForFtSecondary.VmName && ((this.LinkedView == null && cannotChangeHaSettingsForFtSecondary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotChangeHaSettingsForFtSecondary.LinkedView))));
        }

        public override bool Equals(object cannotChangeHaSettingsForFtSecondary)
        {
            return Equals(cannotChangeHaSettingsForFtSecondary as CannotChangeHaSettingsForFtSecondary);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotChangeHaSettingsForFtSecondary_LinkedView : IEquatable<CannotChangeHaSettingsForFtSecondary_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(CannotChangeHaSettingsForFtSecondary_LinkedView cannotChangeHaSettingsForFtSecondary_LinkedView)
        {
            return (cannotChangeHaSettingsForFtSecondary_LinkedView != null && ((this.Vm == null && cannotChangeHaSettingsForFtSecondary_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotChangeHaSettingsForFtSecondary_LinkedView.Vm))));
        }

        public override bool Equals(object cannotChangeHaSettingsForFtSecondary_LinkedView)
        {
            return Equals(cannotChangeHaSettingsForFtSecondary_LinkedView as CannotChangeHaSettingsForFtSecondary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class CannotChangeVsanClusterUuid : VsanFault, IEquatable<CannotChangeVsanClusterUuid>
    {
        public bool Equals(CannotChangeVsanClusterUuid cannotChangeVsanClusterUuid)
        {
            return (cannotChangeVsanClusterUuid != null && base.Equals(cannotChangeVsanClusterUuid));
        }

        public override bool Equals(object cannotChangeVsanClusterUuid)
        {
            return Equals(cannotChangeVsanClusterUuid as CannotChangeVsanClusterUuid);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotChangeVsanNodeUuid : VsanFault, IEquatable<CannotChangeVsanNodeUuid>
    {
        public bool Equals(CannotChangeVsanNodeUuid cannotChangeVsanNodeUuid)
        {
            return (cannotChangeVsanNodeUuid != null && base.Equals(cannotChangeVsanNodeUuid));
        }

        public override bool Equals(object cannotChangeVsanNodeUuid)
        {
            return Equals(cannotChangeVsanNodeUuid as CannotChangeVsanNodeUuid);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotComputeFTCompatibleHosts : VmFaultToleranceIssue, IEquatable<CannotComputeFTCompatibleHosts>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public CannotComputeFTCompatibleHosts_LinkedView LinkedView { get; set; }

        public bool Equals(CannotComputeFTCompatibleHosts cannotComputeFTCompatibleHosts)
        {
            return (cannotComputeFTCompatibleHosts != null && ((this.Vm == null && cannotComputeFTCompatibleHosts.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotComputeFTCompatibleHosts.Vm))) && this.VmName == cannotComputeFTCompatibleHosts.VmName && ((this.LinkedView == null && cannotComputeFTCompatibleHosts.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotComputeFTCompatibleHosts.LinkedView))));
        }

        public override bool Equals(object cannotComputeFTCompatibleHosts)
        {
            return Equals(cannotComputeFTCompatibleHosts as CannotComputeFTCompatibleHosts);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotComputeFTCompatibleHosts_LinkedView : IEquatable<CannotComputeFTCompatibleHosts_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(CannotComputeFTCompatibleHosts_LinkedView cannotComputeFTCompatibleHosts_LinkedView)
        {
            return (cannotComputeFTCompatibleHosts_LinkedView != null && ((this.Vm == null && cannotComputeFTCompatibleHosts_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotComputeFTCompatibleHosts_LinkedView.Vm))));
        }

        public override bool Equals(object cannotComputeFTCompatibleHosts_LinkedView)
        {
            return Equals(cannotComputeFTCompatibleHosts_LinkedView as CannotComputeFTCompatibleHosts_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class CannotCreateFile : FileFault, IEquatable<CannotCreateFile>
    {
        public bool Equals(CannotCreateFile cannotCreateFile)
        {
            return (cannotCreateFile != null && base.Equals(cannotCreateFile));
        }

        public override bool Equals(object cannotCreateFile)
        {
            return Equals(cannotCreateFile as CannotCreateFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotDecryptPasswords : CustomizationFault, IEquatable<CannotDecryptPasswords>
    {
        public bool Equals(CannotDecryptPasswords cannotDecryptPasswords)
        {
            return (cannotDecryptPasswords != null && base.Equals(cannotDecryptPasswords));
        }

        public override bool Equals(object cannotDecryptPasswords)
        {
            return Equals(cannotDecryptPasswords as CannotDecryptPasswords);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotDeleteFile : FileFault, IEquatable<CannotDeleteFile>
    {
        public bool Equals(CannotDeleteFile cannotDeleteFile)
        {
            return (cannotDeleteFile != null && base.Equals(cannotDeleteFile));
        }

        public override bool Equals(object cannotDeleteFile)
        {
            return Equals(cannotDeleteFile as CannotDeleteFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotDisableDrsOnClustersWithVApps : RuntimeFault, IEquatable<CannotDisableDrsOnClustersWithVApps>
    {
        public bool Equals(CannotDisableDrsOnClustersWithVApps cannotDisableDrsOnClustersWithVApps)
        {
            return (cannotDisableDrsOnClustersWithVApps != null && base.Equals(cannotDisableDrsOnClustersWithVApps));
        }

        public override bool Equals(object cannotDisableDrsOnClustersWithVApps)
        {
            return Equals(cannotDisableDrsOnClustersWithVApps as CannotDisableDrsOnClustersWithVApps);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotDisableSnapshot : VmConfigFault, IEquatable<CannotDisableSnapshot>
    {
        public bool Equals(CannotDisableSnapshot cannotDisableSnapshot)
        {
            return (cannotDisableSnapshot != null && base.Equals(cannotDisableSnapshot));
        }

        public override bool Equals(object cannotDisableSnapshot)
        {
            return Equals(cannotDisableSnapshot as CannotDisableSnapshot);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotDisconnectHostWithFaultToleranceVm : VimFault, IEquatable<CannotDisconnectHostWithFaultToleranceVm>
    {
        public string HostName { get; set; }

        public bool Equals(CannotDisconnectHostWithFaultToleranceVm cannotDisconnectHostWithFaultToleranceVm)
        {
            return (cannotDisconnectHostWithFaultToleranceVm != null && this.HostName == cannotDisconnectHostWithFaultToleranceVm.HostName);
        }

        public override bool Equals(object cannotDisconnectHostWithFaultToleranceVm)
        {
            return Equals(cannotDisconnectHostWithFaultToleranceVm as CannotDisconnectHostWithFaultToleranceVm);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class CannotEnableVmcpForCluster : VimFault, IEquatable<CannotEnableVmcpForCluster>
    {
        public ManagedObjectReference Host { get; set; }

        public string HostName { get; set; }

        public string Reason { get; set; }

        public CannotEnableVmcpForCluster_LinkedView LinkedView { get; set; }

        public bool Equals(CannotEnableVmcpForCluster cannotEnableVmcpForCluster)
        {
            return (cannotEnableVmcpForCluster != null && ((this.Host == null && cannotEnableVmcpForCluster.Host == null) || (this.Host != null && this.Host.Equals(cannotEnableVmcpForCluster.Host))) && this.HostName == cannotEnableVmcpForCluster.HostName && this.Reason == cannotEnableVmcpForCluster.Reason && ((this.LinkedView == null && cannotEnableVmcpForCluster.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotEnableVmcpForCluster.LinkedView))));
        }

        public override bool Equals(object cannotEnableVmcpForCluster)
        {
            return Equals(cannotEnableVmcpForCluster as CannotEnableVmcpForCluster);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + Reason + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotEnableVmcpForCluster_LinkedView : IEquatable<CannotEnableVmcpForCluster_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(CannotEnableVmcpForCluster_LinkedView cannotEnableVmcpForCluster_LinkedView)
        {
            return (cannotEnableVmcpForCluster_LinkedView != null && ((this.Host == null && cannotEnableVmcpForCluster_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(cannotEnableVmcpForCluster_LinkedView.Host))));
        }

        public override bool Equals(object cannotEnableVmcpForCluster_LinkedView)
        {
            return Equals(cannotEnableVmcpForCluster_LinkedView as CannotEnableVmcpForCluster_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class CannotModifyConfigCpuRequirements : MigrationFault, IEquatable<CannotModifyConfigCpuRequirements>
    {
        public bool Equals(CannotModifyConfigCpuRequirements cannotModifyConfigCpuRequirements)
        {
            return (cannotModifyConfigCpuRequirements != null && base.Equals(cannotModifyConfigCpuRequirements));
        }

        public override bool Equals(object cannotModifyConfigCpuRequirements)
        {
            return Equals(cannotModifyConfigCpuRequirements as CannotModifyConfigCpuRequirements);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotMoveFaultToleranceVm : VimFault, IEquatable<CannotMoveFaultToleranceVm>
    {
        public string MoveType { get; set; }

        public string VmName { get; set; }

        public bool Equals(CannotMoveFaultToleranceVm cannotMoveFaultToleranceVm)
        {
            return (cannotMoveFaultToleranceVm != null && this.MoveType == cannotMoveFaultToleranceVm.MoveType && this.VmName == cannotMoveFaultToleranceVm.VmName);
        }

        public override bool Equals(object cannotMoveFaultToleranceVm)
        {
            return Equals(cannotMoveFaultToleranceVm as CannotMoveFaultToleranceVm);
        }

        public override int GetHashCode()
        {
            return (MoveType + "_" + VmName).GetHashCode();
        }
    }

    public class CannotMoveHostWithFaultToleranceVm : VimFault, IEquatable<CannotMoveHostWithFaultToleranceVm>
    {
        public bool Equals(CannotMoveHostWithFaultToleranceVm cannotMoveHostWithFaultToleranceVm)
        {
            return (cannotMoveHostWithFaultToleranceVm != null && base.Equals(cannotMoveHostWithFaultToleranceVm));
        }

        public override bool Equals(object cannotMoveHostWithFaultToleranceVm)
        {
            return Equals(cannotMoveHostWithFaultToleranceVm as CannotMoveHostWithFaultToleranceVm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotMoveVmWithDeltaDisk : MigrationFault, IEquatable<CannotMoveVmWithDeltaDisk>
    {
        public string Device { get; set; }

        public bool Equals(CannotMoveVmWithDeltaDisk cannotMoveVmWithDeltaDisk)
        {
            return (cannotMoveVmWithDeltaDisk != null && this.Device == cannotMoveVmWithDeltaDisk.Device);
        }

        public override bool Equals(object cannotMoveVmWithDeltaDisk)
        {
            return Equals(cannotMoveVmWithDeltaDisk as CannotMoveVmWithDeltaDisk);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class CannotMoveVmWithNativeDeltaDisk : MigrationFault, IEquatable<CannotMoveVmWithNativeDeltaDisk>
    {
        public bool Equals(CannotMoveVmWithNativeDeltaDisk cannotMoveVmWithNativeDeltaDisk)
        {
            return (cannotMoveVmWithNativeDeltaDisk != null && base.Equals(cannotMoveVmWithNativeDeltaDisk));
        }

        public override bool Equals(object cannotMoveVmWithNativeDeltaDisk)
        {
            return Equals(cannotMoveVmWithNativeDeltaDisk as CannotMoveVmWithNativeDeltaDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotMoveVsanEnabledHost : VsanFault, IEquatable<CannotMoveVsanEnabledHost>
    {
        public bool Equals(CannotMoveVsanEnabledHost cannotMoveVsanEnabledHost)
        {
            return (cannotMoveVsanEnabledHost != null && base.Equals(cannotMoveVsanEnabledHost));
        }

        public override bool Equals(object cannotMoveVsanEnabledHost)
        {
            return Equals(cannotMoveVsanEnabledHost as CannotMoveVsanEnabledHost);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotPlaceWithoutPrerequisiteMoves : VimFault, IEquatable<CannotPlaceWithoutPrerequisiteMoves>
    {
        public bool Equals(CannotPlaceWithoutPrerequisiteMoves cannotPlaceWithoutPrerequisiteMoves)
        {
            return (cannotPlaceWithoutPrerequisiteMoves != null && base.Equals(cannotPlaceWithoutPrerequisiteMoves));
        }

        public override bool Equals(object cannotPlaceWithoutPrerequisiteMoves)
        {
            return Equals(cannotPlaceWithoutPrerequisiteMoves as CannotPlaceWithoutPrerequisiteMoves);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotPowerOffVmInCluster : InvalidState, IEquatable<CannotPowerOffVmInCluster>
    {
        public string Operation { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public CannotPowerOffVmInCluster_LinkedView LinkedView { get; set; }

        public bool Equals(CannotPowerOffVmInCluster cannotPowerOffVmInCluster)
        {
            return (cannotPowerOffVmInCluster != null && this.Operation == cannotPowerOffVmInCluster.Operation && ((this.Vm == null && cannotPowerOffVmInCluster.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotPowerOffVmInCluster.Vm))) && this.VmName == cannotPowerOffVmInCluster.VmName && ((this.LinkedView == null && cannotPowerOffVmInCluster.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotPowerOffVmInCluster.LinkedView))));
        }

        public override bool Equals(object cannotPowerOffVmInCluster)
        {
            return Equals(cannotPowerOffVmInCluster as CannotPowerOffVmInCluster);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotPowerOffVmInCluster_LinkedView : IEquatable<CannotPowerOffVmInCluster_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(CannotPowerOffVmInCluster_LinkedView cannotPowerOffVmInCluster_LinkedView)
        {
            return (cannotPowerOffVmInCluster_LinkedView != null && ((this.Vm == null && cannotPowerOffVmInCluster_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(cannotPowerOffVmInCluster_LinkedView.Vm))));
        }

        public override bool Equals(object cannotPowerOffVmInCluster_LinkedView)
        {
            return Equals(cannotPowerOffVmInCluster_LinkedView as CannotPowerOffVmInCluster_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class CannotReconfigureVsanWhenHaEnabled : VsanFault, IEquatable<CannotReconfigureVsanWhenHaEnabled>
    {
        public bool Equals(CannotReconfigureVsanWhenHaEnabled cannotReconfigureVsanWhenHaEnabled)
        {
            return (cannotReconfigureVsanWhenHaEnabled != null && base.Equals(cannotReconfigureVsanWhenHaEnabled));
        }

        public override bool Equals(object cannotReconfigureVsanWhenHaEnabled)
        {
            return Equals(cannotReconfigureVsanWhenHaEnabled as CannotReconfigureVsanWhenHaEnabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CannotUseNetwork : VmConfigFault, IEquatable<CannotUseNetwork>
    {
        public string Device { get; set; }

        public string Backing { get; set; }

        public bool Connected { get; set; }

        public string Reason { get; set; }

        public ManagedObjectReference Network { get; set; }

        public CannotUseNetwork_LinkedView LinkedView { get; set; }

        public bool Equals(CannotUseNetwork cannotUseNetwork)
        {
            return (cannotUseNetwork != null && this.Device == cannotUseNetwork.Device && this.Backing == cannotUseNetwork.Backing && this.Connected == cannotUseNetwork.Connected && this.Reason == cannotUseNetwork.Reason && ((this.Network == null && cannotUseNetwork.Network == null) || (this.Network != null && this.Network.Equals(cannotUseNetwork.Network))) && ((this.LinkedView == null && cannotUseNetwork.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cannotUseNetwork.LinkedView))));
        }

        public override bool Equals(object cannotUseNetwork)
        {
            return Equals(cannotUseNetwork as CannotUseNetwork);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Backing + "_" + Connected + "_" + Reason + "_" + Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class CannotUseNetwork_LinkedView : IEquatable<CannotUseNetwork_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(CannotUseNetwork_LinkedView cannotUseNetwork_LinkedView)
        {
            return (cannotUseNetwork_LinkedView != null && ((this.Network == null && cannotUseNetwork_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(cannotUseNetwork_LinkedView.Network))));
        }

        public override bool Equals(object cannotUseNetwork_LinkedView)
        {
            return Equals(cannotUseNetwork_LinkedView as CannotUseNetwork_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class Capability : DynamicData, IEquatable<Capability>
    {
        public bool ProvisioningSupported { get; set; }

        public bool MultiHostSupported { get; set; }

        public bool UserShellAccessSupported { get; set; }

        public EVCMode[] SupportedEVCMode { get; set; }

        public bool? NetworkBackupAndRestoreSupported { get; set; }

        public bool? FtDrsWithoutEvcSupported { get; set; }

        public bool? HciWorkflowSupported { get; set; }

        public bool Equals(Capability capability)
        {
            return (capability != null && this.ProvisioningSupported == capability.ProvisioningSupported && this.MultiHostSupported == capability.MultiHostSupported && this.UserShellAccessSupported == capability.UserShellAccessSupported && ((this.SupportedEVCMode == null && capability.SupportedEVCMode == null) || (this.SupportedEVCMode != null && capability.SupportedEVCMode != null && Enumerable.SequenceEqual(this.SupportedEVCMode, capability.SupportedEVCMode))) && ((this.NetworkBackupAndRestoreSupported == null && capability.NetworkBackupAndRestoreSupported == null) || (this.NetworkBackupAndRestoreSupported != null && this.NetworkBackupAndRestoreSupported.Equals(capability.NetworkBackupAndRestoreSupported))) && ((this.FtDrsWithoutEvcSupported == null && capability.FtDrsWithoutEvcSupported == null) || (this.FtDrsWithoutEvcSupported != null && this.FtDrsWithoutEvcSupported.Equals(capability.FtDrsWithoutEvcSupported))) && ((this.HciWorkflowSupported == null && capability.HciWorkflowSupported == null) || (this.HciWorkflowSupported != null && this.HciWorkflowSupported.Equals(capability.HciWorkflowSupported))));
        }

        public override bool Equals(object capability)
        {
            return Equals(capability as Capability);
        }

        public override int GetHashCode()
        {
            return (ProvisioningSupported + "_" + MultiHostSupported + "_" + UserShellAccessSupported + "_" + SupportedEVCMode + "_" + NetworkBackupAndRestoreSupported + "_" + FtDrsWithoutEvcSupported + "_" + HciWorkflowSupported).GetHashCode();
        }
    }

    public class CertificateErrorEventArg : EventArgs, IEquatable<CertificateErrorEventArg>
    {
        public object Sender { get; set; }

        public X509Certificate Certificate { get; set; }

        public X509Chain Chain { get; set; }

        public SslPolicyErrors SslPolicyErrors { get; set; }

        public bool IgnoreError { get; set; }

        public bool Equals(CertificateErrorEventArg certificateErrorEventArg)
        {
            return (certificateErrorEventArg != null && ((this.Sender == null && certificateErrorEventArg.Sender == null) || (this.Sender != null && this.Sender.Equals(certificateErrorEventArg.Sender))) && ((this.Certificate == null && certificateErrorEventArg.Certificate == null) || (this.Certificate != null && this.Certificate.Equals(certificateErrorEventArg.Certificate))) && ((this.Chain == null && certificateErrorEventArg.Chain == null) || (this.Chain != null && this.Chain.Equals(certificateErrorEventArg.Chain))) && this.SslPolicyErrors == certificateErrorEventArg.SslPolicyErrors && this.IgnoreError == certificateErrorEventArg.IgnoreError);
        }

        public override bool Equals(object certificateErrorEventArg)
        {
            return Equals(certificateErrorEventArg as CertificateErrorEventArg);
        }

        public override int GetHashCode()
        {
            return (Sender + "_" + Certificate + "_" + Chain + "_" + SslPolicyErrors + "_" + IgnoreError).GetHashCode();
        }
    }

    public class CertificateManager : ViewBase, IEquatable<CertificateManager>
    {
        public ManagedObjectReference CertMgrRefreshCACertificatesAndCRLs_Task(ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public void CertMgrRefreshCACertificatesAndCRLs(ManagedObjectReference[] host)
        {
        }

        public ManagedObjectReference CertMgrRefreshCertificates_Task(ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public void CertMgrRefreshCertificates(ManagedObjectReference[] host)
        {
        }

        public ManagedObjectReference CertMgrRevokeCertificates_Task(ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public void CertMgrRevokeCertificates(ManagedObjectReference[] host)
        {
        }

        public bool Equals(CertificateManager certificateManager)
        {
            return (certificateManager != null && base.Equals(certificateManager));
        }

        public override bool Equals(object certificateManager)
        {
            return Equals(certificateManager as CertificateManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ChangesInfoEventArgument : DynamicData, IEquatable<ChangesInfoEventArgument>
    {
        public string Modified { get; set; }

        public string Added { get; set; }

        public string Deleted { get; set; }

        public bool Equals(ChangesInfoEventArgument changesInfoEventArgument)
        {
            return (changesInfoEventArgument != null && this.Modified == changesInfoEventArgument.Modified && this.Added == changesInfoEventArgument.Added && this.Deleted == changesInfoEventArgument.Deleted);
        }

        public override bool Equals(object changesInfoEventArgument)
        {
            return Equals(changesInfoEventArgument as ChangesInfoEventArgument);
        }

        public override int GetHashCode()
        {
            return (Modified + "_" + Added + "_" + Deleted).GetHashCode();
        }
    }

    public class CheckResult : DynamicData, IEquatable<CheckResult>
    {
        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault[] Warning { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public CheckResult_LinkedView LinkedView { get; set; }

        public bool Equals(CheckResult checkResult)
        {
            return (checkResult != null && ((this.Vm == null && checkResult.Vm == null) || (this.Vm != null && this.Vm.Equals(checkResult.Vm))) && ((this.Host == null && checkResult.Host == null) || (this.Host != null && this.Host.Equals(checkResult.Host))) && ((this.Warning == null && checkResult.Warning == null) || (this.Warning != null && checkResult.Warning != null && Enumerable.SequenceEqual(this.Warning, checkResult.Warning))) && ((this.Error == null && checkResult.Error == null) || (this.Error != null && checkResult.Error != null && Enumerable.SequenceEqual(this.Error, checkResult.Error))) && ((this.LinkedView == null && checkResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(checkResult.LinkedView))));
        }

        public override bool Equals(object checkResult)
        {
            return Equals(checkResult as CheckResult);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Host + "_" + Warning + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class CheckResult_LinkedView : IEquatable<CheckResult_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem Host { get; set; }

        public bool Equals(CheckResult_LinkedView checkResult_LinkedView)
        {
            return (checkResult_LinkedView != null && ((this.Vm == null && checkResult_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(checkResult_LinkedView.Vm))) && ((this.Host == null && checkResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(checkResult_LinkedView.Host))));
        }

        public override bool Equals(object checkResult_LinkedView)
        {
            return Equals(checkResult_LinkedView as CheckResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Host).GetHashCode();
        }
    }

    public class ChoiceOption : OptionType, IEquatable<ChoiceOption>
    {
        public ElementDescription[] ChoiceInfo { get; set; }

        public int? DefaultIndex { get; set; }

        public bool Equals(ChoiceOption choiceOption)
        {
            return (choiceOption != null && ((this.ChoiceInfo == null && choiceOption.ChoiceInfo == null) || (this.ChoiceInfo != null && choiceOption.ChoiceInfo != null && Enumerable.SequenceEqual(this.ChoiceInfo, choiceOption.ChoiceInfo))) && ((this.DefaultIndex == null && choiceOption.DefaultIndex == null) || (this.DefaultIndex != null && this.DefaultIndex.Equals(choiceOption.DefaultIndex))));
        }

        public override bool Equals(object choiceOption)
        {
            return Equals(choiceOption as ChoiceOption);
        }

        public override int GetHashCode()
        {
            return (ChoiceInfo + "_" + DefaultIndex).GetHashCode();
        }
    }

    public class ClockSkew : HostConfigFault, IEquatable<ClockSkew>
    {
        public bool Equals(ClockSkew clockSkew)
        {
            return (clockSkew != null && base.Equals(clockSkew));
        }

        public override bool Equals(object clockSkew)
        {
            return Equals(clockSkew as ClockSkew);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CloneFromSnapshotNotSupported : MigrationFault, IEquatable<CloneFromSnapshotNotSupported>
    {
        public bool Equals(CloneFromSnapshotNotSupported cloneFromSnapshotNotSupported)
        {
            return (cloneFromSnapshotNotSupported != null && base.Equals(cloneFromSnapshotNotSupported));
        }

        public override bool Equals(object cloneFromSnapshotNotSupported)
        {
            return Equals(cloneFromSnapshotNotSupported as CloneFromSnapshotNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterAction : DynamicData, IEquatable<ClusterAction>
    {
        public string Type { get; set; }

        public ManagedObjectReference Target { get; set; }

        public bool Equals(ClusterAction clusterAction)
        {
            return (clusterAction != null && this.Type == clusterAction.Type && ((this.Target == null && clusterAction.Target == null) || (this.Target != null && this.Target.Equals(clusterAction.Target))));
        }

        public override bool Equals(object clusterAction)
        {
            return Equals(clusterAction as ClusterAction);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Target).GetHashCode();
        }
    }

    public class ClusterActionHistory : DynamicData, IEquatable<ClusterActionHistory>
    {
        public ClusterAction Action { get; set; }

        public DateTime Time { get; set; }

        public bool Equals(ClusterActionHistory clusterActionHistory)
        {
            return (clusterActionHistory != null && ((this.Action == null && clusterActionHistory.Action == null) || (this.Action != null && this.Action.Equals(clusterActionHistory.Action))) && this.Time == clusterActionHistory.Time);
        }

        public override bool Equals(object clusterActionHistory)
        {
            return Equals(clusterActionHistory as ClusterActionHistory);
        }

        public override int GetHashCode()
        {
            return (Action + "_" + Time).GetHashCode();
        }
    }

    public class ClusterAffinityRuleSpec : ClusterRuleInfo, IEquatable<ClusterAffinityRuleSpec>
    {
        public ManagedObjectReference[] Vm { get; set; }

        public ClusterAffinityRuleSpec_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterAffinityRuleSpec clusterAffinityRuleSpec)
        {
            return (clusterAffinityRuleSpec != null && ((this.Vm == null && clusterAffinityRuleSpec.Vm == null) || (this.Vm != null && clusterAffinityRuleSpec.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterAffinityRuleSpec.Vm))) && ((this.LinkedView == null && clusterAffinityRuleSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterAffinityRuleSpec.LinkedView))));
        }

        public override bool Equals(object clusterAffinityRuleSpec)
        {
            return Equals(clusterAffinityRuleSpec as ClusterAffinityRuleSpec);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterAffinityRuleSpec_LinkedView : IEquatable<ClusterAffinityRuleSpec_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public bool Equals(ClusterAffinityRuleSpec_LinkedView clusterAffinityRuleSpec_LinkedView)
        {
            return (clusterAffinityRuleSpec_LinkedView != null && ((this.Vm == null && clusterAffinityRuleSpec_LinkedView.Vm == null) || (this.Vm != null && clusterAffinityRuleSpec_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterAffinityRuleSpec_LinkedView.Vm))));
        }

        public override bool Equals(object clusterAffinityRuleSpec_LinkedView)
        {
            return Equals(clusterAffinityRuleSpec_LinkedView as ClusterAffinityRuleSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterAntiAffinityRuleSpec : ClusterRuleInfo, IEquatable<ClusterAntiAffinityRuleSpec>
    {
        public ManagedObjectReference[] Vm { get; set; }

        public ClusterAntiAffinityRuleSpec_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterAntiAffinityRuleSpec clusterAntiAffinityRuleSpec)
        {
            return (clusterAntiAffinityRuleSpec != null && ((this.Vm == null && clusterAntiAffinityRuleSpec.Vm == null) || (this.Vm != null && clusterAntiAffinityRuleSpec.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterAntiAffinityRuleSpec.Vm))) && ((this.LinkedView == null && clusterAntiAffinityRuleSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterAntiAffinityRuleSpec.LinkedView))));
        }

        public override bool Equals(object clusterAntiAffinityRuleSpec)
        {
            return Equals(clusterAntiAffinityRuleSpec as ClusterAntiAffinityRuleSpec);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterAntiAffinityRuleSpec_LinkedView : IEquatable<ClusterAntiAffinityRuleSpec_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public bool Equals(ClusterAntiAffinityRuleSpec_LinkedView clusterAntiAffinityRuleSpec_LinkedView)
        {
            return (clusterAntiAffinityRuleSpec_LinkedView != null && ((this.Vm == null && clusterAntiAffinityRuleSpec_LinkedView.Vm == null) || (this.Vm != null && clusterAntiAffinityRuleSpec_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterAntiAffinityRuleSpec_LinkedView.Vm))));
        }

        public override bool Equals(object clusterAntiAffinityRuleSpec_LinkedView)
        {
            return Equals(clusterAntiAffinityRuleSpec_LinkedView as ClusterAntiAffinityRuleSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterAttemptedVmInfo : DynamicData, IEquatable<ClusterAttemptedVmInfo>
    {
        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference Task { get; set; }

        public ClusterAttemptedVmInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterAttemptedVmInfo clusterAttemptedVmInfo)
        {
            return (clusterAttemptedVmInfo != null && ((this.Vm == null && clusterAttemptedVmInfo.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterAttemptedVmInfo.Vm))) && ((this.Task == null && clusterAttemptedVmInfo.Task == null) || (this.Task != null && this.Task.Equals(clusterAttemptedVmInfo.Task))) && ((this.LinkedView == null && clusterAttemptedVmInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterAttemptedVmInfo.LinkedView))));
        }

        public override bool Equals(object clusterAttemptedVmInfo)
        {
            return Equals(clusterAttemptedVmInfo as ClusterAttemptedVmInfo);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Task + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterAttemptedVmInfo_LinkedView : IEquatable<ClusterAttemptedVmInfo_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public Task Task { get; set; }

        public bool Equals(ClusterAttemptedVmInfo_LinkedView clusterAttemptedVmInfo_LinkedView)
        {
            return (clusterAttemptedVmInfo_LinkedView != null && ((this.Vm == null && clusterAttemptedVmInfo_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterAttemptedVmInfo_LinkedView.Vm))) && ((this.Task == null && clusterAttemptedVmInfo_LinkedView.Task == null) || (this.Task != null && this.Task.Equals(clusterAttemptedVmInfo_LinkedView.Task))));
        }

        public override bool Equals(object clusterAttemptedVmInfo_LinkedView)
        {
            return Equals(clusterAttemptedVmInfo_LinkedView as ClusterAttemptedVmInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Task).GetHashCode();
        }
    }

    public class ClusterComplianceCheckedEvent : ClusterEvent, IEquatable<ClusterComplianceCheckedEvent>
    {
        public ProfileEventArgument Profile { get; set; }

        public bool Equals(ClusterComplianceCheckedEvent clusterComplianceCheckedEvent)
        {
            return (clusterComplianceCheckedEvent != null && ((this.Profile == null && clusterComplianceCheckedEvent.Profile == null) || (this.Profile != null && this.Profile.Equals(clusterComplianceCheckedEvent.Profile))));
        }

        public override bool Equals(object clusterComplianceCheckedEvent)
        {
            return Equals(clusterComplianceCheckedEvent as ClusterComplianceCheckedEvent);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class ClusterComputeResource : ComputeResource, IEquatable<ClusterComputeResource>
    {
        public ClusterConfigInfo Configuration { get; set; }

        public ClusterRecommendation[] Recommendation { get; set; }

        public ClusterDrsRecommendation[] DrsRecommendation { get; set; }

        public ClusterComputeResourceHCIConfigInfo HciConfig { get; set; }

        public ClusterDrsMigration[] MigrationHistory { get; set; }

        public ClusterActionHistory[] ActionHistory { get; set; }

        public ClusterDrsFaults[] DrsFault { get; set; }

        public new ClusterComputeResource_LinkedView LinkedView { get; set; }

        public ManagedObjectReference ConfigureHCI_Task(ClusterComputeResourceHCIConfigSpec clusterSpec, ClusterComputeResourceHostConfigurationInput[] hostInputs)
        {
            return default(ManagedObjectReference);
        }

        public ClusterComputeResourceClusterConfigResult ConfigureHCI(ClusterComputeResourceHCIConfigSpec clusterSpec, ClusterComputeResourceHostConfigurationInput[] hostInputs)
        {
            return default(ClusterComputeResourceClusterConfigResult);
        }

        public ManagedObjectReference ExtendHCI_Task(ClusterComputeResourceHostConfigurationInput[] hostInputs, SDDCBase vSanConfigSpec)
        {
            return default(ManagedObjectReference);
        }

        public ClusterComputeResourceClusterConfigResult ExtendHCI(ClusterComputeResourceHostConfigurationInput[] hostInputs, SDDCBase vSanConfigSpec)
        {
            return default(ClusterComputeResourceClusterConfigResult);
        }

        public void AbandonHciWorkflow()
        {
        }

        public ClusterComputeResourceValidationResultBase[] ValidateHCIConfiguration(ClusterComputeResourceHCIConfigSpec hciConfigSpec, ManagedObjectReference[] hosts)
        {
            return default(ClusterComputeResourceValidationResultBase[]);
        }

        public ManagedObjectReference ReconfigureCluster_Task(ClusterConfigSpec spec, bool modify)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureCluster(ClusterConfigSpec spec, bool modify)
        {
        }

        public void ApplyRecommendation(string key)
        {
        }

        public void CancelRecommendation(string key)
        {
        }

        public ClusterHostRecommendation[] RecommendHostsForVm(ManagedObjectReference vm, ManagedObjectReference pool)
        {
            return default(ClusterHostRecommendation[]);
        }

        public ManagedObjectReference AddHost_Task(HostConnectSpec spec, bool asConnected, ManagedObjectReference resourcePool, string license)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference AddHost(HostConnectSpec spec, bool asConnected, ManagedObjectReference resourcePool, string license)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference MoveInto_Task(ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public void MoveInto(ManagedObjectReference[] host)
        {
        }

        public ManagedObjectReference MoveHostInto_Task(ManagedObjectReference host, ManagedObjectReference resourcePool)
        {
            return default(ManagedObjectReference);
        }

        public void MoveHostInto(ManagedObjectReference host, ManagedObjectReference resourcePool)
        {
        }

        public void RefreshRecommendation()
        {
        }

        public ManagedObjectReference EvcManager()
        {
            return default(ManagedObjectReference);
        }

        public ClusterDasAdvancedRuntimeInfo RetrieveDasAdvancedRuntimeInfo()
        {
            return default(ClusterDasAdvancedRuntimeInfo);
        }

        public ClusterEnterMaintenanceResult ClusterEnterMaintenanceMode(ManagedObjectReference[] host, OptionValue[] option)
        {
            return default(ClusterEnterMaintenanceResult);
        }

        public PlacementResult PlaceVm(PlacementSpec placementSpec)
        {
            return default(PlacementResult);
        }

        public ClusterRuleInfo[] FindRulesForVm(ManagedObjectReference vm)
        {
            return default(ClusterRuleInfo[]);
        }

        public ManagedObjectReference StampAllRulesWithUuid_Task()
        {
            return default(ManagedObjectReference);
        }

        public void StampAllRulesWithUuid()
        {
        }

        public ClusterResourceUsageSummary GetResourceUsage()
        {
            return default(ClusterResourceUsageSummary);
        }

        public bool Equals(ClusterComputeResource clusterComputeResource)
        {
            return (clusterComputeResource != null && ((this.Configuration == null && clusterComputeResource.Configuration == null) || (this.Configuration != null && this.Configuration.Equals(clusterComputeResource.Configuration))) && ((this.Recommendation == null && clusterComputeResource.Recommendation == null) || (this.Recommendation != null && clusterComputeResource.Recommendation != null && Enumerable.SequenceEqual(this.Recommendation, clusterComputeResource.Recommendation))) && ((this.DrsRecommendation == null && clusterComputeResource.DrsRecommendation == null) || (this.DrsRecommendation != null && clusterComputeResource.DrsRecommendation != null && Enumerable.SequenceEqual(this.DrsRecommendation, clusterComputeResource.DrsRecommendation))) && ((this.HciConfig == null && clusterComputeResource.HciConfig == null) || (this.HciConfig != null && this.HciConfig.Equals(clusterComputeResource.HciConfig))) && ((this.MigrationHistory == null && clusterComputeResource.MigrationHistory == null) || (this.MigrationHistory != null && clusterComputeResource.MigrationHistory != null && Enumerable.SequenceEqual(this.MigrationHistory, clusterComputeResource.MigrationHistory))) && ((this.ActionHistory == null && clusterComputeResource.ActionHistory == null) || (this.ActionHistory != null && clusterComputeResource.ActionHistory != null && Enumerable.SequenceEqual(this.ActionHistory, clusterComputeResource.ActionHistory))) && ((this.DrsFault == null && clusterComputeResource.DrsFault == null) || (this.DrsFault != null && clusterComputeResource.DrsFault != null && Enumerable.SequenceEqual(this.DrsFault, clusterComputeResource.DrsFault))) && ((this.LinkedView == null && clusterComputeResource.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResource.LinkedView))));
        }

        public override bool Equals(object clusterComputeResource)
        {
            return Equals(clusterComputeResource as ClusterComputeResource);
        }

        public override int GetHashCode()
        {
            return (Configuration + "_" + Recommendation + "_" + DrsRecommendation + "_" + HciConfig + "_" + MigrationHistory + "_" + ActionHistory + "_" + DrsFault + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResource_LinkedView : ComputeResource_LinkedView, IEquatable<ClusterComputeResource_LinkedView>
    {
        public bool Equals(ClusterComputeResource_LinkedView clusterComputeResource_LinkedView)
        {
            return (clusterComputeResource_LinkedView != null && base.Equals(clusterComputeResource_LinkedView));
        }

        public override bool Equals(object clusterComputeResource_LinkedView)
        {
            return Equals(clusterComputeResource_LinkedView as ClusterComputeResource_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterComputeResourceClusterConfigResult : DynamicData, IEquatable<ClusterComputeResourceClusterConfigResult>
    {
        public FolderFailedHostResult[] FailedHosts { get; set; }

        public ManagedObjectReference[] ConfiguredHosts { get; set; }

        public ClusterComputeResourceClusterConfigResult_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceClusterConfigResult clusterComputeResourceClusterConfigResult)
        {
            return (clusterComputeResourceClusterConfigResult != null && ((this.FailedHosts == null && clusterComputeResourceClusterConfigResult.FailedHosts == null) || (this.FailedHosts != null && clusterComputeResourceClusterConfigResult.FailedHosts != null && Enumerable.SequenceEqual(this.FailedHosts, clusterComputeResourceClusterConfigResult.FailedHosts))) && ((this.ConfiguredHosts == null && clusterComputeResourceClusterConfigResult.ConfiguredHosts == null) || (this.ConfiguredHosts != null && clusterComputeResourceClusterConfigResult.ConfiguredHosts != null && Enumerable.SequenceEqual(this.ConfiguredHosts, clusterComputeResourceClusterConfigResult.ConfiguredHosts))) && ((this.LinkedView == null && clusterComputeResourceClusterConfigResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceClusterConfigResult.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceClusterConfigResult)
        {
            return Equals(clusterComputeResourceClusterConfigResult as ClusterComputeResourceClusterConfigResult);
        }

        public override int GetHashCode()
        {
            return (FailedHosts + "_" + ConfiguredHosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceClusterConfigResult_LinkedView : IEquatable<ClusterComputeResourceClusterConfigResult_LinkedView>
    {
        public HostSystem[] ConfiguredHosts { get; set; }

        public bool Equals(ClusterComputeResourceClusterConfigResult_LinkedView clusterComputeResourceClusterConfigResult_LinkedView)
        {
            return (clusterComputeResourceClusterConfigResult_LinkedView != null && ((this.ConfiguredHosts == null && clusterComputeResourceClusterConfigResult_LinkedView.ConfiguredHosts == null) || (this.ConfiguredHosts != null && clusterComputeResourceClusterConfigResult_LinkedView.ConfiguredHosts != null && Enumerable.SequenceEqual(this.ConfiguredHosts, clusterComputeResourceClusterConfigResult_LinkedView.ConfiguredHosts))));
        }

        public override bool Equals(object clusterComputeResourceClusterConfigResult_LinkedView)
        {
            return Equals(clusterComputeResourceClusterConfigResult_LinkedView as ClusterComputeResourceClusterConfigResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ConfiguredHosts).GetHashCode();
        }
    }

    public class ClusterComputeResourceDVSConfigurationValidation : ClusterComputeResourceValidationResultBase, IEquatable<ClusterComputeResourceDVSConfigurationValidation>
    {
        public bool IsDvsValid { get; set; }

        public bool IsDvpgValid { get; set; }

        public bool Equals(ClusterComputeResourceDVSConfigurationValidation clusterComputeResourceDVSConfigurationValidation)
        {
            return (clusterComputeResourceDVSConfigurationValidation != null && this.IsDvsValid == clusterComputeResourceDVSConfigurationValidation.IsDvsValid && this.IsDvpgValid == clusterComputeResourceDVSConfigurationValidation.IsDvpgValid);
        }

        public override bool Equals(object clusterComputeResourceDVSConfigurationValidation)
        {
            return Equals(clusterComputeResourceDVSConfigurationValidation as ClusterComputeResourceDVSConfigurationValidation);
        }

        public override int GetHashCode()
        {
            return (IsDvsValid + "_" + IsDvpgValid).GetHashCode();
        }
    }

    public class ClusterComputeResourceDvsProfile : DynamicData, IEquatable<ClusterComputeResourceDvsProfile>
    {
        public string DvsName { get; set; }

        public ManagedObjectReference DvSwitch { get; set; }

        public string[] PnicDevices { get; set; }

        public ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping[] DvPortgroupMapping { get; set; }

        public ClusterComputeResourceDvsProfile_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceDvsProfile clusterComputeResourceDvsProfile)
        {
            return (clusterComputeResourceDvsProfile != null && this.DvsName == clusterComputeResourceDvsProfile.DvsName && ((this.DvSwitch == null && clusterComputeResourceDvsProfile.DvSwitch == null) || (this.DvSwitch != null && this.DvSwitch.Equals(clusterComputeResourceDvsProfile.DvSwitch))) && ((this.PnicDevices == null && clusterComputeResourceDvsProfile.PnicDevices == null) || (this.PnicDevices != null && clusterComputeResourceDvsProfile.PnicDevices != null && Enumerable.SequenceEqual(this.PnicDevices, clusterComputeResourceDvsProfile.PnicDevices))) && ((this.DvPortgroupMapping == null && clusterComputeResourceDvsProfile.DvPortgroupMapping == null) || (this.DvPortgroupMapping != null && clusterComputeResourceDvsProfile.DvPortgroupMapping != null && Enumerable.SequenceEqual(this.DvPortgroupMapping, clusterComputeResourceDvsProfile.DvPortgroupMapping))) && ((this.LinkedView == null && clusterComputeResourceDvsProfile.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceDvsProfile.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceDvsProfile)
        {
            return Equals(clusterComputeResourceDvsProfile as ClusterComputeResourceDvsProfile);
        }

        public override int GetHashCode()
        {
            return (DvsName + "_" + DvSwitch + "_" + PnicDevices + "_" + DvPortgroupMapping + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceDvsProfile_LinkedView : IEquatable<ClusterComputeResourceDvsProfile_LinkedView>
    {
        public DistributedVirtualSwitch DvSwitch { get; set; }

        public bool Equals(ClusterComputeResourceDvsProfile_LinkedView clusterComputeResourceDvsProfile_LinkedView)
        {
            return (clusterComputeResourceDvsProfile_LinkedView != null && ((this.DvSwitch == null && clusterComputeResourceDvsProfile_LinkedView.DvSwitch == null) || (this.DvSwitch != null && this.DvSwitch.Equals(clusterComputeResourceDvsProfile_LinkedView.DvSwitch))));
        }

        public override bool Equals(object clusterComputeResourceDvsProfile_LinkedView)
        {
            return Equals(clusterComputeResourceDvsProfile_LinkedView as ClusterComputeResourceDvsProfile_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DvSwitch).GetHashCode();
        }
    }

    public class ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping : DynamicData, IEquatable<ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping>
    {
        public DVPortgroupConfigSpec DvPortgroupSpec { get; set; }

        public ManagedObjectReference DvPortgroup { get; set; }

        public string Service { get; set; }

        public ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping)
        {
            return (clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping != null && ((this.DvPortgroupSpec == null && clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.DvPortgroupSpec == null) || (this.DvPortgroupSpec != null && this.DvPortgroupSpec.Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.DvPortgroupSpec))) && ((this.DvPortgroup == null && clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.DvPortgroup == null) || (this.DvPortgroup != null && this.DvPortgroup.Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.DvPortgroup))) && this.Service == clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.Service && ((this.LinkedView == null && clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping)
        {
            return Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping as ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping);
        }

        public override int GetHashCode()
        {
            return (DvPortgroupSpec + "_" + DvPortgroup + "_" + Service + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView : IEquatable<ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView>
    {
        public DistributedVirtualPortgroup DvPortgroup { get; set; }

        public bool Equals(ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView)
        {
            return (clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView != null && ((this.DvPortgroup == null && clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView.DvPortgroup == null) || (this.DvPortgroup != null && this.DvPortgroup.Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView.DvPortgroup))));
        }

        public override bool Equals(object clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView)
        {
            return Equals(clusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView as ClusterComputeResourceDvsProfileDVPortgroupSpecToServiceMapping_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DvPortgroup).GetHashCode();
        }
    }

    public class ClusterComputeResourceDVSSetting : DynamicData, IEquatable<ClusterComputeResourceDVSSetting>
    {
        public ManagedObjectReference DvSwitch { get; set; }

        public string[] PnicDevices { get; set; }

        public ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping[] DvPortgroupSetting { get; set; }

        public ClusterComputeResourceDVSSetting_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceDVSSetting clusterComputeResourceDVSSetting)
        {
            return (clusterComputeResourceDVSSetting != null && ((this.DvSwitch == null && clusterComputeResourceDVSSetting.DvSwitch == null) || (this.DvSwitch != null && this.DvSwitch.Equals(clusterComputeResourceDVSSetting.DvSwitch))) && ((this.PnicDevices == null && clusterComputeResourceDVSSetting.PnicDevices == null) || (this.PnicDevices != null && clusterComputeResourceDVSSetting.PnicDevices != null && Enumerable.SequenceEqual(this.PnicDevices, clusterComputeResourceDVSSetting.PnicDevices))) && ((this.DvPortgroupSetting == null && clusterComputeResourceDVSSetting.DvPortgroupSetting == null) || (this.DvPortgroupSetting != null && clusterComputeResourceDVSSetting.DvPortgroupSetting != null && Enumerable.SequenceEqual(this.DvPortgroupSetting, clusterComputeResourceDVSSetting.DvPortgroupSetting))) && ((this.LinkedView == null && clusterComputeResourceDVSSetting.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceDVSSetting.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceDVSSetting)
        {
            return Equals(clusterComputeResourceDVSSetting as ClusterComputeResourceDVSSetting);
        }

        public override int GetHashCode()
        {
            return (DvSwitch + "_" + PnicDevices + "_" + DvPortgroupSetting + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceDVSSetting_LinkedView : IEquatable<ClusterComputeResourceDVSSetting_LinkedView>
    {
        public DistributedVirtualSwitch DvSwitch { get; set; }

        public bool Equals(ClusterComputeResourceDVSSetting_LinkedView clusterComputeResourceDVSSetting_LinkedView)
        {
            return (clusterComputeResourceDVSSetting_LinkedView != null && ((this.DvSwitch == null && clusterComputeResourceDVSSetting_LinkedView.DvSwitch == null) || (this.DvSwitch != null && this.DvSwitch.Equals(clusterComputeResourceDVSSetting_LinkedView.DvSwitch))));
        }

        public override bool Equals(object clusterComputeResourceDVSSetting_LinkedView)
        {
            return Equals(clusterComputeResourceDVSSetting_LinkedView as ClusterComputeResourceDVSSetting_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DvSwitch).GetHashCode();
        }
    }

    public class ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping : DynamicData, IEquatable<ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping>
    {
        public ManagedObjectReference DvPortgroup { get; set; }

        public string Service { get; set; }

        public ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping clusterComputeResourceDVSSettingDVPortgroupToServiceMapping)
        {
            return (clusterComputeResourceDVSSettingDVPortgroupToServiceMapping != null && ((this.DvPortgroup == null && clusterComputeResourceDVSSettingDVPortgroupToServiceMapping.DvPortgroup == null) || (this.DvPortgroup != null && this.DvPortgroup.Equals(clusterComputeResourceDVSSettingDVPortgroupToServiceMapping.DvPortgroup))) && this.Service == clusterComputeResourceDVSSettingDVPortgroupToServiceMapping.Service && ((this.LinkedView == null && clusterComputeResourceDVSSettingDVPortgroupToServiceMapping.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceDVSSettingDVPortgroupToServiceMapping.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceDVSSettingDVPortgroupToServiceMapping)
        {
            return Equals(clusterComputeResourceDVSSettingDVPortgroupToServiceMapping as ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping);
        }

        public override int GetHashCode()
        {
            return (DvPortgroup + "_" + Service + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView : IEquatable<ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView>
    {
        public DistributedVirtualPortgroup DvPortgroup { get; set; }

        public bool Equals(ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView)
        {
            return (clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView != null && ((this.DvPortgroup == null && clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView.DvPortgroup == null) || (this.DvPortgroup != null && this.DvPortgroup.Equals(clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView.DvPortgroup))));
        }

        public override bool Equals(object clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView)
        {
            return Equals(clusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView as ClusterComputeResourceDVSSettingDVPortgroupToServiceMapping_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DvPortgroup).GetHashCode();
        }
    }

    public class ClusterComputeResourceHCIConfigInfo : DynamicData, IEquatable<ClusterComputeResourceHCIConfigInfo>
    {
        public string WorkflowState { get; set; }

        public ClusterComputeResourceDVSSetting[] DvsSetting { get; set; }

        public ManagedObjectReference[] ConfiguredHosts { get; set; }

        public ClusterComputeResourceHostConfigurationProfile HostConfigProfile { get; set; }

        public ClusterComputeResourceHCIConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceHCIConfigInfo clusterComputeResourceHCIConfigInfo)
        {
            return (clusterComputeResourceHCIConfigInfo != null && this.WorkflowState == clusterComputeResourceHCIConfigInfo.WorkflowState && ((this.DvsSetting == null && clusterComputeResourceHCIConfigInfo.DvsSetting == null) || (this.DvsSetting != null && clusterComputeResourceHCIConfigInfo.DvsSetting != null && Enumerable.SequenceEqual(this.DvsSetting, clusterComputeResourceHCIConfigInfo.DvsSetting))) && ((this.ConfiguredHosts == null && clusterComputeResourceHCIConfigInfo.ConfiguredHosts == null) || (this.ConfiguredHosts != null && clusterComputeResourceHCIConfigInfo.ConfiguredHosts != null && Enumerable.SequenceEqual(this.ConfiguredHosts, clusterComputeResourceHCIConfigInfo.ConfiguredHosts))) && ((this.HostConfigProfile == null && clusterComputeResourceHCIConfigInfo.HostConfigProfile == null) || (this.HostConfigProfile != null && this.HostConfigProfile.Equals(clusterComputeResourceHCIConfigInfo.HostConfigProfile))) && ((this.LinkedView == null && clusterComputeResourceHCIConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceHCIConfigInfo.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceHCIConfigInfo)
        {
            return Equals(clusterComputeResourceHCIConfigInfo as ClusterComputeResourceHCIConfigInfo);
        }

        public override int GetHashCode()
        {
            return (WorkflowState + "_" + DvsSetting + "_" + ConfiguredHosts + "_" + HostConfigProfile + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceHCIConfigInfo_LinkedView : IEquatable<ClusterComputeResourceHCIConfigInfo_LinkedView>
    {
        public HostSystem[] ConfiguredHosts { get; set; }

        public bool Equals(ClusterComputeResourceHCIConfigInfo_LinkedView clusterComputeResourceHCIConfigInfo_LinkedView)
        {
            return (clusterComputeResourceHCIConfigInfo_LinkedView != null && ((this.ConfiguredHosts == null && clusterComputeResourceHCIConfigInfo_LinkedView.ConfiguredHosts == null) || (this.ConfiguredHosts != null && clusterComputeResourceHCIConfigInfo_LinkedView.ConfiguredHosts != null && Enumerable.SequenceEqual(this.ConfiguredHosts, clusterComputeResourceHCIConfigInfo_LinkedView.ConfiguredHosts))));
        }

        public override bool Equals(object clusterComputeResourceHCIConfigInfo_LinkedView)
        {
            return Equals(clusterComputeResourceHCIConfigInfo_LinkedView as ClusterComputeResourceHCIConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ConfiguredHosts).GetHashCode();
        }
    }

    public class ClusterComputeResourceHCIConfigSpec : DynamicData, IEquatable<ClusterComputeResourceHCIConfigSpec>
    {
        public ClusterComputeResourceDvsProfile[] DvsProf { get; set; }

        public ClusterComputeResourceHostConfigurationProfile HostConfigProfile { get; set; }

        public SDDCBase VSanConfigSpec { get; set; }

        public ClusterComputeResourceVCProfile VcProf { get; set; }

        public bool Equals(ClusterComputeResourceHCIConfigSpec clusterComputeResourceHCIConfigSpec)
        {
            return (clusterComputeResourceHCIConfigSpec != null && ((this.DvsProf == null && clusterComputeResourceHCIConfigSpec.DvsProf == null) || (this.DvsProf != null && clusterComputeResourceHCIConfigSpec.DvsProf != null && Enumerable.SequenceEqual(this.DvsProf, clusterComputeResourceHCIConfigSpec.DvsProf))) && ((this.HostConfigProfile == null && clusterComputeResourceHCIConfigSpec.HostConfigProfile == null) || (this.HostConfigProfile != null && this.HostConfigProfile.Equals(clusterComputeResourceHCIConfigSpec.HostConfigProfile))) && ((this.VSanConfigSpec == null && clusterComputeResourceHCIConfigSpec.VSanConfigSpec == null) || (this.VSanConfigSpec != null && this.VSanConfigSpec.Equals(clusterComputeResourceHCIConfigSpec.VSanConfigSpec))) && ((this.VcProf == null && clusterComputeResourceHCIConfigSpec.VcProf == null) || (this.VcProf != null && this.VcProf.Equals(clusterComputeResourceHCIConfigSpec.VcProf))));
        }

        public override bool Equals(object clusterComputeResourceHCIConfigSpec)
        {
            return Equals(clusterComputeResourceHCIConfigSpec as ClusterComputeResourceHCIConfigSpec);
        }

        public override int GetHashCode()
        {
            return (DvsProf + "_" + HostConfigProfile + "_" + VSanConfigSpec + "_" + VcProf).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostConfigurationInput : DynamicData, IEquatable<ClusterComputeResourceHostConfigurationInput>
    {
        public ManagedObjectReference Host { get; set; }

        public ClusterComputeResourceHostVmkNicInfo[] HostVmkNics { get; set; }

        public bool? AllowedInNonMaintenanceMode { get; set; }

        public ClusterComputeResourceHostConfigurationInput_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceHostConfigurationInput clusterComputeResourceHostConfigurationInput)
        {
            return (clusterComputeResourceHostConfigurationInput != null && ((this.Host == null && clusterComputeResourceHostConfigurationInput.Host == null) || (this.Host != null && this.Host.Equals(clusterComputeResourceHostConfigurationInput.Host))) && ((this.HostVmkNics == null && clusterComputeResourceHostConfigurationInput.HostVmkNics == null) || (this.HostVmkNics != null && clusterComputeResourceHostConfigurationInput.HostVmkNics != null && Enumerable.SequenceEqual(this.HostVmkNics, clusterComputeResourceHostConfigurationInput.HostVmkNics))) && ((this.AllowedInNonMaintenanceMode == null && clusterComputeResourceHostConfigurationInput.AllowedInNonMaintenanceMode == null) || (this.AllowedInNonMaintenanceMode != null && this.AllowedInNonMaintenanceMode.Equals(clusterComputeResourceHostConfigurationInput.AllowedInNonMaintenanceMode))) && ((this.LinkedView == null && clusterComputeResourceHostConfigurationInput.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceHostConfigurationInput.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceHostConfigurationInput)
        {
            return Equals(clusterComputeResourceHostConfigurationInput as ClusterComputeResourceHostConfigurationInput);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostVmkNics + "_" + AllowedInNonMaintenanceMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostConfigurationInput_LinkedView : IEquatable<ClusterComputeResourceHostConfigurationInput_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterComputeResourceHostConfigurationInput_LinkedView clusterComputeResourceHostConfigurationInput_LinkedView)
        {
            return (clusterComputeResourceHostConfigurationInput_LinkedView != null && ((this.Host == null && clusterComputeResourceHostConfigurationInput_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterComputeResourceHostConfigurationInput_LinkedView.Host))));
        }

        public override bool Equals(object clusterComputeResourceHostConfigurationInput_LinkedView)
        {
            return Equals(clusterComputeResourceHostConfigurationInput_LinkedView as ClusterComputeResourceHostConfigurationInput_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostConfigurationProfile : DynamicData, IEquatable<ClusterComputeResourceHostConfigurationProfile>
    {
        public HostDateTimeConfig DateTimeConfig { get; set; }

        public HostLockdownMode? LockdownMode { get; set; }

        public bool Equals(ClusterComputeResourceHostConfigurationProfile clusterComputeResourceHostConfigurationProfile)
        {
            return (clusterComputeResourceHostConfigurationProfile != null && ((this.DateTimeConfig == null && clusterComputeResourceHostConfigurationProfile.DateTimeConfig == null) || (this.DateTimeConfig != null && this.DateTimeConfig.Equals(clusterComputeResourceHostConfigurationProfile.DateTimeConfig))) && ((this.LockdownMode == null && clusterComputeResourceHostConfigurationProfile.LockdownMode == null) || (this.LockdownMode != null && this.LockdownMode.Equals(clusterComputeResourceHostConfigurationProfile.LockdownMode))));
        }

        public override bool Equals(object clusterComputeResourceHostConfigurationProfile)
        {
            return Equals(clusterComputeResourceHostConfigurationProfile as ClusterComputeResourceHostConfigurationProfile);
        }

        public override int GetHashCode()
        {
            return (DateTimeConfig + "_" + LockdownMode).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostConfigurationValidation : ClusterComputeResourceValidationResultBase, IEquatable<ClusterComputeResourceHostConfigurationValidation>
    {
        public ManagedObjectReference Host { get; set; }

        public bool? IsDvsSettingValid { get; set; }

        public bool? IsVmknicSettingValid { get; set; }

        public bool? IsNtpSettingValid { get; set; }

        public bool? IsLockdownModeValid { get; set; }

        public ClusterComputeResourceHostConfigurationValidation_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterComputeResourceHostConfigurationValidation clusterComputeResourceHostConfigurationValidation)
        {
            return (clusterComputeResourceHostConfigurationValidation != null && ((this.Host == null && clusterComputeResourceHostConfigurationValidation.Host == null) || (this.Host != null && this.Host.Equals(clusterComputeResourceHostConfigurationValidation.Host))) && ((this.IsDvsSettingValid == null && clusterComputeResourceHostConfigurationValidation.IsDvsSettingValid == null) || (this.IsDvsSettingValid != null && this.IsDvsSettingValid.Equals(clusterComputeResourceHostConfigurationValidation.IsDvsSettingValid))) && ((this.IsVmknicSettingValid == null && clusterComputeResourceHostConfigurationValidation.IsVmknicSettingValid == null) || (this.IsVmknicSettingValid != null && this.IsVmknicSettingValid.Equals(clusterComputeResourceHostConfigurationValidation.IsVmknicSettingValid))) && ((this.IsNtpSettingValid == null && clusterComputeResourceHostConfigurationValidation.IsNtpSettingValid == null) || (this.IsNtpSettingValid != null && this.IsNtpSettingValid.Equals(clusterComputeResourceHostConfigurationValidation.IsNtpSettingValid))) && ((this.IsLockdownModeValid == null && clusterComputeResourceHostConfigurationValidation.IsLockdownModeValid == null) || (this.IsLockdownModeValid != null && this.IsLockdownModeValid.Equals(clusterComputeResourceHostConfigurationValidation.IsLockdownModeValid))) && ((this.LinkedView == null && clusterComputeResourceHostConfigurationValidation.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterComputeResourceHostConfigurationValidation.LinkedView))));
        }

        public override bool Equals(object clusterComputeResourceHostConfigurationValidation)
        {
            return Equals(clusterComputeResourceHostConfigurationValidation as ClusterComputeResourceHostConfigurationValidation);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + IsDvsSettingValid + "_" + IsVmknicSettingValid + "_" + IsNtpSettingValid + "_" + IsLockdownModeValid + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostConfigurationValidation_LinkedView : IEquatable<ClusterComputeResourceHostConfigurationValidation_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterComputeResourceHostConfigurationValidation_LinkedView clusterComputeResourceHostConfigurationValidation_LinkedView)
        {
            return (clusterComputeResourceHostConfigurationValidation_LinkedView != null && ((this.Host == null && clusterComputeResourceHostConfigurationValidation_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterComputeResourceHostConfigurationValidation_LinkedView.Host))));
        }

        public override bool Equals(object clusterComputeResourceHostConfigurationValidation_LinkedView)
        {
            return Equals(clusterComputeResourceHostConfigurationValidation_LinkedView as ClusterComputeResourceHostConfigurationValidation_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterComputeResourceHostVmkNicInfo : DynamicData, IEquatable<ClusterComputeResourceHostVmkNicInfo>
    {
        public HostVirtualNicSpec NicSpec { get; set; }

        public string Service { get; set; }

        public bool Equals(ClusterComputeResourceHostVmkNicInfo clusterComputeResourceHostVmkNicInfo)
        {
            return (clusterComputeResourceHostVmkNicInfo != null && ((this.NicSpec == null && clusterComputeResourceHostVmkNicInfo.NicSpec == null) || (this.NicSpec != null && this.NicSpec.Equals(clusterComputeResourceHostVmkNicInfo.NicSpec))) && this.Service == clusterComputeResourceHostVmkNicInfo.Service);
        }

        public override bool Equals(object clusterComputeResourceHostVmkNicInfo)
        {
            return Equals(clusterComputeResourceHostVmkNicInfo as ClusterComputeResourceHostVmkNicInfo);
        }

        public override int GetHashCode()
        {
            return (NicSpec + "_" + Service).GetHashCode();
        }
    }

    public class ClusterComputeResourceSummary : ComputeResourceSummary, IEquatable<ClusterComputeResourceSummary>
    {
        public int CurrentFailoverLevel { get; set; }

        public ClusterDasAdmissionControlInfo AdmissionControlInfo { get; set; }

        public int NumVmotions { get; set; }

        public int? TargetBalance { get; set; }

        public int? CurrentBalance { get; set; }

        public ClusterUsageSummary UsageSummary { get; set; }

        public string CurrentEVCModeKey { get; set; }

        public ClusterDasData DasData { get; set; }

        public bool Equals(ClusterComputeResourceSummary clusterComputeResourceSummary)
        {
            return (clusterComputeResourceSummary != null && this.CurrentFailoverLevel == clusterComputeResourceSummary.CurrentFailoverLevel && ((this.AdmissionControlInfo == null && clusterComputeResourceSummary.AdmissionControlInfo == null) || (this.AdmissionControlInfo != null && this.AdmissionControlInfo.Equals(clusterComputeResourceSummary.AdmissionControlInfo))) && this.NumVmotions == clusterComputeResourceSummary.NumVmotions && ((this.TargetBalance == null && clusterComputeResourceSummary.TargetBalance == null) || (this.TargetBalance != null && this.TargetBalance.Equals(clusterComputeResourceSummary.TargetBalance))) && ((this.CurrentBalance == null && clusterComputeResourceSummary.CurrentBalance == null) || (this.CurrentBalance != null && this.CurrentBalance.Equals(clusterComputeResourceSummary.CurrentBalance))) && ((this.UsageSummary == null && clusterComputeResourceSummary.UsageSummary == null) || (this.UsageSummary != null && this.UsageSummary.Equals(clusterComputeResourceSummary.UsageSummary))) && this.CurrentEVCModeKey == clusterComputeResourceSummary.CurrentEVCModeKey && ((this.DasData == null && clusterComputeResourceSummary.DasData == null) || (this.DasData != null && this.DasData.Equals(clusterComputeResourceSummary.DasData))));
        }

        public override bool Equals(object clusterComputeResourceSummary)
        {
            return Equals(clusterComputeResourceSummary as ClusterComputeResourceSummary);
        }

        public override int GetHashCode()
        {
            return (CurrentFailoverLevel + "_" + AdmissionControlInfo + "_" + NumVmotions + "_" + TargetBalance + "_" + CurrentBalance + "_" + UsageSummary + "_" + CurrentEVCModeKey + "_" + DasData).GetHashCode();
        }
    }

    public class ClusterComputeResourceValidationResultBase : DynamicData, IEquatable<ClusterComputeResourceValidationResultBase>
    {
        public LocalizableMessage[] Info { get; set; }

        public bool Equals(ClusterComputeResourceValidationResultBase clusterComputeResourceValidationResultBase)
        {
            return (clusterComputeResourceValidationResultBase != null && ((this.Info == null && clusterComputeResourceValidationResultBase.Info == null) || (this.Info != null && clusterComputeResourceValidationResultBase.Info != null && Enumerable.SequenceEqual(this.Info, clusterComputeResourceValidationResultBase.Info))));
        }

        public override bool Equals(object clusterComputeResourceValidationResultBase)
        {
            return Equals(clusterComputeResourceValidationResultBase as ClusterComputeResourceValidationResultBase);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterComputeResourceVCProfile : DynamicData, IEquatable<ClusterComputeResourceVCProfile>
    {
        public ClusterConfigSpecEx ClusterSpec { get; set; }

        public string EvcModeKey { get; set; }

        public bool Equals(ClusterComputeResourceVCProfile clusterComputeResourceVCProfile)
        {
            return (clusterComputeResourceVCProfile != null && ((this.ClusterSpec == null && clusterComputeResourceVCProfile.ClusterSpec == null) || (this.ClusterSpec != null && this.ClusterSpec.Equals(clusterComputeResourceVCProfile.ClusterSpec))) && this.EvcModeKey == clusterComputeResourceVCProfile.EvcModeKey);
        }

        public override bool Equals(object clusterComputeResourceVCProfile)
        {
            return Equals(clusterComputeResourceVCProfile as ClusterComputeResourceVCProfile);
        }

        public override int GetHashCode()
        {
            return (ClusterSpec + "_" + EvcModeKey).GetHashCode();
        }
    }

    public class ClusterConfigInfo : DynamicData, IEquatable<ClusterConfigInfo>
    {
        public ClusterDasConfigInfo DasConfig { get; set; }

        public ClusterDasVmConfigInfo[] DasVmConfig { get; set; }

        public ClusterDrsConfigInfo DrsConfig { get; set; }

        public ClusterDrsVmConfigInfo[] DrsVmConfig { get; set; }

        public ClusterRuleInfo[] Rule { get; set; }

        public bool Equals(ClusterConfigInfo clusterConfigInfo)
        {
            return (clusterConfigInfo != null && ((this.DasConfig == null && clusterConfigInfo.DasConfig == null) || (this.DasConfig != null && this.DasConfig.Equals(clusterConfigInfo.DasConfig))) && ((this.DasVmConfig == null && clusterConfigInfo.DasVmConfig == null) || (this.DasVmConfig != null && clusterConfigInfo.DasVmConfig != null && Enumerable.SequenceEqual(this.DasVmConfig, clusterConfigInfo.DasVmConfig))) && ((this.DrsConfig == null && clusterConfigInfo.DrsConfig == null) || (this.DrsConfig != null && this.DrsConfig.Equals(clusterConfigInfo.DrsConfig))) && ((this.DrsVmConfig == null && clusterConfigInfo.DrsVmConfig == null) || (this.DrsVmConfig != null && clusterConfigInfo.DrsVmConfig != null && Enumerable.SequenceEqual(this.DrsVmConfig, clusterConfigInfo.DrsVmConfig))) && ((this.Rule == null && clusterConfigInfo.Rule == null) || (this.Rule != null && clusterConfigInfo.Rule != null && Enumerable.SequenceEqual(this.Rule, clusterConfigInfo.Rule))));
        }

        public override bool Equals(object clusterConfigInfo)
        {
            return Equals(clusterConfigInfo as ClusterConfigInfo);
        }

        public override int GetHashCode()
        {
            return (DasConfig + "_" + DasVmConfig + "_" + DrsConfig + "_" + DrsVmConfig + "_" + Rule).GetHashCode();
        }
    }

    public class ClusterConfigInfoEx : ComputeResourceConfigInfo, IEquatable<ClusterConfigInfoEx>
    {
        public ClusterDasConfigInfo DasConfig { get; set; }

        public ClusterDasVmConfigInfo[] DasVmConfig { get; set; }

        public ClusterDrsConfigInfo DrsConfig { get; set; }

        public ClusterDrsVmConfigInfo[] DrsVmConfig { get; set; }

        public ClusterRuleInfo[] Rule { get; set; }

        public ClusterOrchestrationInfo Orchestration { get; set; }

        public ClusterVmOrchestrationInfo[] VmOrchestration { get; set; }

        public ClusterDpmConfigInfo DpmConfigInfo { get; set; }

        public ClusterDpmHostConfigInfo[] DpmHostConfig { get; set; }

        public VsanClusterConfigInfo VsanConfigInfo { get; set; }

        public VsanHostConfigInfo[] VsanHostConfig { get; set; }

        public ClusterGroupInfo[] Group { get; set; }

        public ClusterInfraUpdateHaConfigInfo InfraUpdateHaConfig { get; set; }

        public ClusterProactiveDrsConfigInfo ProactiveDrsConfig { get; set; }

        public bool Equals(ClusterConfigInfoEx clusterConfigInfoEx)
        {
            return (clusterConfigInfoEx != null && ((this.DasConfig == null && clusterConfigInfoEx.DasConfig == null) || (this.DasConfig != null && this.DasConfig.Equals(clusterConfigInfoEx.DasConfig))) && ((this.DasVmConfig == null && clusterConfigInfoEx.DasVmConfig == null) || (this.DasVmConfig != null && clusterConfigInfoEx.DasVmConfig != null && Enumerable.SequenceEqual(this.DasVmConfig, clusterConfigInfoEx.DasVmConfig))) && ((this.DrsConfig == null && clusterConfigInfoEx.DrsConfig == null) || (this.DrsConfig != null && this.DrsConfig.Equals(clusterConfigInfoEx.DrsConfig))) && ((this.DrsVmConfig == null && clusterConfigInfoEx.DrsVmConfig == null) || (this.DrsVmConfig != null && clusterConfigInfoEx.DrsVmConfig != null && Enumerable.SequenceEqual(this.DrsVmConfig, clusterConfigInfoEx.DrsVmConfig))) && ((this.Rule == null && clusterConfigInfoEx.Rule == null) || (this.Rule != null && clusterConfigInfoEx.Rule != null && Enumerable.SequenceEqual(this.Rule, clusterConfigInfoEx.Rule))) && ((this.Orchestration == null && clusterConfigInfoEx.Orchestration == null) || (this.Orchestration != null && this.Orchestration.Equals(clusterConfigInfoEx.Orchestration))) && ((this.VmOrchestration == null && clusterConfigInfoEx.VmOrchestration == null) || (this.VmOrchestration != null && clusterConfigInfoEx.VmOrchestration != null && Enumerable.SequenceEqual(this.VmOrchestration, clusterConfigInfoEx.VmOrchestration))) && ((this.DpmConfigInfo == null && clusterConfigInfoEx.DpmConfigInfo == null) || (this.DpmConfigInfo != null && this.DpmConfigInfo.Equals(clusterConfigInfoEx.DpmConfigInfo))) && ((this.DpmHostConfig == null && clusterConfigInfoEx.DpmHostConfig == null) || (this.DpmHostConfig != null && clusterConfigInfoEx.DpmHostConfig != null && Enumerable.SequenceEqual(this.DpmHostConfig, clusterConfigInfoEx.DpmHostConfig))) && ((this.VsanConfigInfo == null && clusterConfigInfoEx.VsanConfigInfo == null) || (this.VsanConfigInfo != null && this.VsanConfigInfo.Equals(clusterConfigInfoEx.VsanConfigInfo))) && ((this.VsanHostConfig == null && clusterConfigInfoEx.VsanHostConfig == null) || (this.VsanHostConfig != null && clusterConfigInfoEx.VsanHostConfig != null && Enumerable.SequenceEqual(this.VsanHostConfig, clusterConfigInfoEx.VsanHostConfig))) && ((this.Group == null && clusterConfigInfoEx.Group == null) || (this.Group != null && clusterConfigInfoEx.Group != null && Enumerable.SequenceEqual(this.Group, clusterConfigInfoEx.Group))) && ((this.InfraUpdateHaConfig == null && clusterConfigInfoEx.InfraUpdateHaConfig == null) || (this.InfraUpdateHaConfig != null && this.InfraUpdateHaConfig.Equals(clusterConfigInfoEx.InfraUpdateHaConfig))) && ((this.ProactiveDrsConfig == null && clusterConfigInfoEx.ProactiveDrsConfig == null) || (this.ProactiveDrsConfig != null && this.ProactiveDrsConfig.Equals(clusterConfigInfoEx.ProactiveDrsConfig))));
        }

        public override bool Equals(object clusterConfigInfoEx)
        {
            return Equals(clusterConfigInfoEx as ClusterConfigInfoEx);
        }

        public override int GetHashCode()
        {
            return (DasConfig + "_" + DasVmConfig + "_" + DrsConfig + "_" + DrsVmConfig + "_" + Rule + "_" + Orchestration + "_" + VmOrchestration + "_" + DpmConfigInfo + "_" + DpmHostConfig + "_" + VsanConfigInfo + "_" + VsanHostConfig + "_" + Group + "_" + InfraUpdateHaConfig + "_" + ProactiveDrsConfig).GetHashCode();
        }
    }

    public class ClusterConfigSpec : DynamicData, IEquatable<ClusterConfigSpec>
    {
        public ClusterDasConfigInfo DasConfig { get; set; }

        public ClusterDasVmConfigSpec[] DasVmConfigSpec { get; set; }

        public ClusterDrsConfigInfo DrsConfig { get; set; }

        public ClusterDrsVmConfigSpec[] DrsVmConfigSpec { get; set; }

        public ClusterRuleSpec[] RulesSpec { get; set; }

        public bool Equals(ClusterConfigSpec clusterConfigSpec)
        {
            return (clusterConfigSpec != null && ((this.DasConfig == null && clusterConfigSpec.DasConfig == null) || (this.DasConfig != null && this.DasConfig.Equals(clusterConfigSpec.DasConfig))) && ((this.DasVmConfigSpec == null && clusterConfigSpec.DasVmConfigSpec == null) || (this.DasVmConfigSpec != null && clusterConfigSpec.DasVmConfigSpec != null && Enumerable.SequenceEqual(this.DasVmConfigSpec, clusterConfigSpec.DasVmConfigSpec))) && ((this.DrsConfig == null && clusterConfigSpec.DrsConfig == null) || (this.DrsConfig != null && this.DrsConfig.Equals(clusterConfigSpec.DrsConfig))) && ((this.DrsVmConfigSpec == null && clusterConfigSpec.DrsVmConfigSpec == null) || (this.DrsVmConfigSpec != null && clusterConfigSpec.DrsVmConfigSpec != null && Enumerable.SequenceEqual(this.DrsVmConfigSpec, clusterConfigSpec.DrsVmConfigSpec))) && ((this.RulesSpec == null && clusterConfigSpec.RulesSpec == null) || (this.RulesSpec != null && clusterConfigSpec.RulesSpec != null && Enumerable.SequenceEqual(this.RulesSpec, clusterConfigSpec.RulesSpec))));
        }

        public override bool Equals(object clusterConfigSpec)
        {
            return Equals(clusterConfigSpec as ClusterConfigSpec);
        }

        public override int GetHashCode()
        {
            return (DasConfig + "_" + DasVmConfigSpec + "_" + DrsConfig + "_" + DrsVmConfigSpec + "_" + RulesSpec).GetHashCode();
        }
    }

    public class ClusterConfigSpecEx : ComputeResourceConfigSpec, IEquatable<ClusterConfigSpecEx>
    {
        public ClusterDasConfigInfo DasConfig { get; set; }

        public ClusterDasVmConfigSpec[] DasVmConfigSpec { get; set; }

        public ClusterDrsConfigInfo DrsConfig { get; set; }

        public ClusterDrsVmConfigSpec[] DrsVmConfigSpec { get; set; }

        public ClusterRuleSpec[] RulesSpec { get; set; }

        public ClusterOrchestrationInfo Orchestration { get; set; }

        public ClusterVmOrchestrationSpec[] VmOrchestrationSpec { get; set; }

        public ClusterDpmConfigInfo DpmConfig { get; set; }

        public ClusterDpmHostConfigSpec[] DpmHostConfigSpec { get; set; }

        public VsanClusterConfigInfo VsanConfig { get; set; }

        public VsanHostConfigInfo[] VsanHostConfigSpec { get; set; }

        public ClusterGroupSpec[] GroupSpec { get; set; }

        public ClusterInfraUpdateHaConfigInfo InfraUpdateHaConfig { get; set; }

        public ClusterProactiveDrsConfigInfo ProactiveDrsConfig { get; set; }

        public bool? InHciWorkflow { get; set; }

        public bool Equals(ClusterConfigSpecEx clusterConfigSpecEx)
        {
            return (clusterConfigSpecEx != null && ((this.DasConfig == null && clusterConfigSpecEx.DasConfig == null) || (this.DasConfig != null && this.DasConfig.Equals(clusterConfigSpecEx.DasConfig))) && ((this.DasVmConfigSpec == null && clusterConfigSpecEx.DasVmConfigSpec == null) || (this.DasVmConfigSpec != null && clusterConfigSpecEx.DasVmConfigSpec != null && Enumerable.SequenceEqual(this.DasVmConfigSpec, clusterConfigSpecEx.DasVmConfigSpec))) && ((this.DrsConfig == null && clusterConfigSpecEx.DrsConfig == null) || (this.DrsConfig != null && this.DrsConfig.Equals(clusterConfigSpecEx.DrsConfig))) && ((this.DrsVmConfigSpec == null && clusterConfigSpecEx.DrsVmConfigSpec == null) || (this.DrsVmConfigSpec != null && clusterConfigSpecEx.DrsVmConfigSpec != null && Enumerable.SequenceEqual(this.DrsVmConfigSpec, clusterConfigSpecEx.DrsVmConfigSpec))) && ((this.RulesSpec == null && clusterConfigSpecEx.RulesSpec == null) || (this.RulesSpec != null && clusterConfigSpecEx.RulesSpec != null && Enumerable.SequenceEqual(this.RulesSpec, clusterConfigSpecEx.RulesSpec))) && ((this.Orchestration == null && clusterConfigSpecEx.Orchestration == null) || (this.Orchestration != null && this.Orchestration.Equals(clusterConfigSpecEx.Orchestration))) && ((this.VmOrchestrationSpec == null && clusterConfigSpecEx.VmOrchestrationSpec == null) || (this.VmOrchestrationSpec != null && clusterConfigSpecEx.VmOrchestrationSpec != null && Enumerable.SequenceEqual(this.VmOrchestrationSpec, clusterConfigSpecEx.VmOrchestrationSpec))) && ((this.DpmConfig == null && clusterConfigSpecEx.DpmConfig == null) || (this.DpmConfig != null && this.DpmConfig.Equals(clusterConfigSpecEx.DpmConfig))) && ((this.DpmHostConfigSpec == null && clusterConfigSpecEx.DpmHostConfigSpec == null) || (this.DpmHostConfigSpec != null && clusterConfigSpecEx.DpmHostConfigSpec != null && Enumerable.SequenceEqual(this.DpmHostConfigSpec, clusterConfigSpecEx.DpmHostConfigSpec))) && ((this.VsanConfig == null && clusterConfigSpecEx.VsanConfig == null) || (this.VsanConfig != null && this.VsanConfig.Equals(clusterConfigSpecEx.VsanConfig))) && ((this.VsanHostConfigSpec == null && clusterConfigSpecEx.VsanHostConfigSpec == null) || (this.VsanHostConfigSpec != null && clusterConfigSpecEx.VsanHostConfigSpec != null && Enumerable.SequenceEqual(this.VsanHostConfigSpec, clusterConfigSpecEx.VsanHostConfigSpec))) && ((this.GroupSpec == null && clusterConfigSpecEx.GroupSpec == null) || (this.GroupSpec != null && clusterConfigSpecEx.GroupSpec != null && Enumerable.SequenceEqual(this.GroupSpec, clusterConfigSpecEx.GroupSpec))) && ((this.InfraUpdateHaConfig == null && clusterConfigSpecEx.InfraUpdateHaConfig == null) || (this.InfraUpdateHaConfig != null && this.InfraUpdateHaConfig.Equals(clusterConfigSpecEx.InfraUpdateHaConfig))) && ((this.ProactiveDrsConfig == null && clusterConfigSpecEx.ProactiveDrsConfig == null) || (this.ProactiveDrsConfig != null && this.ProactiveDrsConfig.Equals(clusterConfigSpecEx.ProactiveDrsConfig))) && ((this.InHciWorkflow == null && clusterConfigSpecEx.InHciWorkflow == null) || (this.InHciWorkflow != null && this.InHciWorkflow.Equals(clusterConfigSpecEx.InHciWorkflow))));
        }

        public override bool Equals(object clusterConfigSpecEx)
        {
            return Equals(clusterConfigSpecEx as ClusterConfigSpecEx);
        }

        public override int GetHashCode()
        {
            return (DasConfig + "_" + DasVmConfigSpec + "_" + DrsConfig + "_" + DrsVmConfigSpec + "_" + RulesSpec + "_" + Orchestration + "_" + VmOrchestrationSpec + "_" + DpmConfig + "_" + DpmHostConfigSpec + "_" + VsanConfig + "_" + VsanHostConfigSpec + "_" + GroupSpec + "_" + InfraUpdateHaConfig + "_" + ProactiveDrsConfig + "_" + InHciWorkflow).GetHashCode();
        }
    }

    public class ClusterCreatedEvent : ClusterEvent, IEquatable<ClusterCreatedEvent>
    {
        public FolderEventArgument Parent { get; set; }

        public bool Equals(ClusterCreatedEvent clusterCreatedEvent)
        {
            return (clusterCreatedEvent != null && ((this.Parent == null && clusterCreatedEvent.Parent == null) || (this.Parent != null && this.Parent.Equals(clusterCreatedEvent.Parent))));
        }

        public override bool Equals(object clusterCreatedEvent)
        {
            return Equals(clusterCreatedEvent as ClusterCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Parent).GetHashCode();
        }
    }

    public class ClusterDasAamHostInfo : ClusterDasHostInfo, IEquatable<ClusterDasAamHostInfo>
    {
        public ClusterDasAamNodeState[] HostDasState { get; set; }

        public string[] PrimaryHosts { get; set; }

        public bool Equals(ClusterDasAamHostInfo clusterDasAamHostInfo)
        {
            return (clusterDasAamHostInfo != null && ((this.HostDasState == null && clusterDasAamHostInfo.HostDasState == null) || (this.HostDasState != null && clusterDasAamHostInfo.HostDasState != null && Enumerable.SequenceEqual(this.HostDasState, clusterDasAamHostInfo.HostDasState))) && ((this.PrimaryHosts == null && clusterDasAamHostInfo.PrimaryHosts == null) || (this.PrimaryHosts != null && clusterDasAamHostInfo.PrimaryHosts != null && Enumerable.SequenceEqual(this.PrimaryHosts, clusterDasAamHostInfo.PrimaryHosts))));
        }

        public override bool Equals(object clusterDasAamHostInfo)
        {
            return Equals(clusterDasAamHostInfo as ClusterDasAamHostInfo);
        }

        public override int GetHashCode()
        {
            return (HostDasState + "_" + PrimaryHosts).GetHashCode();
        }
    }

    public class ClusterDasAamNodeState : DynamicData, IEquatable<ClusterDasAamNodeState>
    {
        public ManagedObjectReference Host { get; set; }

        public string Name { get; set; }

        public string ConfigState { get; set; }

        public string RuntimeState { get; set; }

        public ClusterDasAamNodeState_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasAamNodeState clusterDasAamNodeState)
        {
            return (clusterDasAamNodeState != null && ((this.Host == null && clusterDasAamNodeState.Host == null) || (this.Host != null && this.Host.Equals(clusterDasAamNodeState.Host))) && this.Name == clusterDasAamNodeState.Name && this.ConfigState == clusterDasAamNodeState.ConfigState && this.RuntimeState == clusterDasAamNodeState.RuntimeState && ((this.LinkedView == null && clusterDasAamNodeState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasAamNodeState.LinkedView))));
        }

        public override bool Equals(object clusterDasAamNodeState)
        {
            return Equals(clusterDasAamNodeState as ClusterDasAamNodeState);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Name + "_" + ConfigState + "_" + RuntimeState + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasAamNodeState_LinkedView : IEquatable<ClusterDasAamNodeState_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterDasAamNodeState_LinkedView clusterDasAamNodeState_LinkedView)
        {
            return (clusterDasAamNodeState_LinkedView != null && ((this.Host == null && clusterDasAamNodeState_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterDasAamNodeState_LinkedView.Host))));
        }

        public override bool Equals(object clusterDasAamNodeState_LinkedView)
        {
            return Equals(clusterDasAamNodeState_LinkedView as ClusterDasAamNodeState_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterDasAdmissionControlInfo : DynamicData, IEquatable<ClusterDasAdmissionControlInfo>
    {
        public bool Equals(ClusterDasAdmissionControlInfo clusterDasAdmissionControlInfo)
        {
            return (clusterDasAdmissionControlInfo != null && base.Equals(clusterDasAdmissionControlInfo));
        }

        public override bool Equals(object clusterDasAdmissionControlInfo)
        {
            return Equals(clusterDasAdmissionControlInfo as ClusterDasAdmissionControlInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterDasAdmissionControlPolicy : DynamicData, IEquatable<ClusterDasAdmissionControlPolicy>
    {
        public int? ResourceReductionToToleratePercent { get; set; }

        public bool Equals(ClusterDasAdmissionControlPolicy clusterDasAdmissionControlPolicy)
        {
            return (clusterDasAdmissionControlPolicy != null && ((this.ResourceReductionToToleratePercent == null && clusterDasAdmissionControlPolicy.ResourceReductionToToleratePercent == null) || (this.ResourceReductionToToleratePercent != null && this.ResourceReductionToToleratePercent.Equals(clusterDasAdmissionControlPolicy.ResourceReductionToToleratePercent))));
        }

        public override bool Equals(object clusterDasAdmissionControlPolicy)
        {
            return Equals(clusterDasAdmissionControlPolicy as ClusterDasAdmissionControlPolicy);
        }

        public override int GetHashCode()
        {
            return (ResourceReductionToToleratePercent).GetHashCode();
        }
    }

    public class ClusterDasAdvancedRuntimeInfo : DynamicData, IEquatable<ClusterDasAdvancedRuntimeInfo>
    {
        public ClusterDasHostInfo DasHostInfo { get; set; }

        public ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo VmcpSupported { get; set; }

        public DasHeartbeatDatastoreInfo[] HeartbeatDatastoreInfo { get; set; }

        public bool Equals(ClusterDasAdvancedRuntimeInfo clusterDasAdvancedRuntimeInfo)
        {
            return (clusterDasAdvancedRuntimeInfo != null && ((this.DasHostInfo == null && clusterDasAdvancedRuntimeInfo.DasHostInfo == null) || (this.DasHostInfo != null && this.DasHostInfo.Equals(clusterDasAdvancedRuntimeInfo.DasHostInfo))) && ((this.VmcpSupported == null && clusterDasAdvancedRuntimeInfo.VmcpSupported == null) || (this.VmcpSupported != null && this.VmcpSupported.Equals(clusterDasAdvancedRuntimeInfo.VmcpSupported))) && ((this.HeartbeatDatastoreInfo == null && clusterDasAdvancedRuntimeInfo.HeartbeatDatastoreInfo == null) || (this.HeartbeatDatastoreInfo != null && clusterDasAdvancedRuntimeInfo.HeartbeatDatastoreInfo != null && Enumerable.SequenceEqual(this.HeartbeatDatastoreInfo, clusterDasAdvancedRuntimeInfo.HeartbeatDatastoreInfo))));
        }

        public override bool Equals(object clusterDasAdvancedRuntimeInfo)
        {
            return Equals(clusterDasAdvancedRuntimeInfo as ClusterDasAdvancedRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (DasHostInfo + "_" + VmcpSupported + "_" + HeartbeatDatastoreInfo).GetHashCode();
        }
    }

    public class ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo : DynamicData, IEquatable<ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo>
    {
        public bool StorageAPDSupported { get; set; }

        public bool StoragePDLSupported { get; set; }

        public bool Equals(ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo)
        {
            return (clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo != null && this.StorageAPDSupported == clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo.StorageAPDSupported && this.StoragePDLSupported == clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo.StoragePDLSupported);
        }

        public override bool Equals(object clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo)
        {
            return Equals(clusterDasAdvancedRuntimeInfoVmcpCapabilityInfo as ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo);
        }

        public override int GetHashCode()
        {
            return (StorageAPDSupported + "_" + StoragePDLSupported).GetHashCode();
        }
    }

    public class ClusterDasConfigInfo : DynamicData, IEquatable<ClusterDasConfigInfo>
    {
        public bool? Enabled { get; set; }

        public string VmMonitoring { get; set; }

        public string HostMonitoring { get; set; }

        public string VmComponentProtecting { get; set; }

        public int? FailoverLevel { get; set; }

        public ClusterDasAdmissionControlPolicy AdmissionControlPolicy { get; set; }

        public bool? AdmissionControlEnabled { get; set; }

        public ClusterDasVmSettings DefaultVmSettings { get; set; }

        public OptionValue[] Option { get; set; }

        public ManagedObjectReference[] HeartbeatDatastore { get; set; }

        public string HBDatastoreCandidatePolicy { get; set; }

        public ClusterDasConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasConfigInfo clusterDasConfigInfo)
        {
            return (clusterDasConfigInfo != null && ((this.Enabled == null && clusterDasConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterDasConfigInfo.Enabled))) && this.VmMonitoring == clusterDasConfigInfo.VmMonitoring && this.HostMonitoring == clusterDasConfigInfo.HostMonitoring && this.VmComponentProtecting == clusterDasConfigInfo.VmComponentProtecting && ((this.FailoverLevel == null && clusterDasConfigInfo.FailoverLevel == null) || (this.FailoverLevel != null && this.FailoverLevel.Equals(clusterDasConfigInfo.FailoverLevel))) && ((this.AdmissionControlPolicy == null && clusterDasConfigInfo.AdmissionControlPolicy == null) || (this.AdmissionControlPolicy != null && this.AdmissionControlPolicy.Equals(clusterDasConfigInfo.AdmissionControlPolicy))) && ((this.AdmissionControlEnabled == null && clusterDasConfigInfo.AdmissionControlEnabled == null) || (this.AdmissionControlEnabled != null && this.AdmissionControlEnabled.Equals(clusterDasConfigInfo.AdmissionControlEnabled))) && ((this.DefaultVmSettings == null && clusterDasConfigInfo.DefaultVmSettings == null) || (this.DefaultVmSettings != null && this.DefaultVmSettings.Equals(clusterDasConfigInfo.DefaultVmSettings))) && ((this.Option == null && clusterDasConfigInfo.Option == null) || (this.Option != null && clusterDasConfigInfo.Option != null && Enumerable.SequenceEqual(this.Option, clusterDasConfigInfo.Option))) && ((this.HeartbeatDatastore == null && clusterDasConfigInfo.HeartbeatDatastore == null) || (this.HeartbeatDatastore != null && clusterDasConfigInfo.HeartbeatDatastore != null && Enumerable.SequenceEqual(this.HeartbeatDatastore, clusterDasConfigInfo.HeartbeatDatastore))) && this.HBDatastoreCandidatePolicy == clusterDasConfigInfo.HBDatastoreCandidatePolicy && ((this.LinkedView == null && clusterDasConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasConfigInfo.LinkedView))));
        }

        public override bool Equals(object clusterDasConfigInfo)
        {
            return Equals(clusterDasConfigInfo as ClusterDasConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + VmMonitoring + "_" + HostMonitoring + "_" + VmComponentProtecting + "_" + FailoverLevel + "_" + AdmissionControlPolicy + "_" + AdmissionControlEnabled + "_" + DefaultVmSettings + "_" + Option + "_" + HeartbeatDatastore + "_" + HBDatastoreCandidatePolicy + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasConfigInfo_LinkedView : IEquatable<ClusterDasConfigInfo_LinkedView>
    {
        public Datastore[] HeartbeatDatastore { get; set; }

        public bool Equals(ClusterDasConfigInfo_LinkedView clusterDasConfigInfo_LinkedView)
        {
            return (clusterDasConfigInfo_LinkedView != null && ((this.HeartbeatDatastore == null && clusterDasConfigInfo_LinkedView.HeartbeatDatastore == null) || (this.HeartbeatDatastore != null && clusterDasConfigInfo_LinkedView.HeartbeatDatastore != null && Enumerable.SequenceEqual(this.HeartbeatDatastore, clusterDasConfigInfo_LinkedView.HeartbeatDatastore))));
        }

        public override bool Equals(object clusterDasConfigInfo_LinkedView)
        {
            return Equals(clusterDasConfigInfo_LinkedView as ClusterDasConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HeartbeatDatastore).GetHashCode();
        }
    }

    public class ClusterDasData : DynamicData, IEquatable<ClusterDasData>
    {
        public bool Equals(ClusterDasData clusterDasData)
        {
            return (clusterDasData != null && base.Equals(clusterDasData));
        }

        public override bool Equals(object clusterDasData)
        {
            return Equals(clusterDasData as ClusterDasData);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterDasDataSummary : ClusterDasData, IEquatable<ClusterDasDataSummary>
    {
        public long HostListVersion { get; set; }

        public long ClusterConfigVersion { get; set; }

        public long CompatListVersion { get; set; }

        public bool Equals(ClusterDasDataSummary clusterDasDataSummary)
        {
            return (clusterDasDataSummary != null && this.HostListVersion == clusterDasDataSummary.HostListVersion && this.ClusterConfigVersion == clusterDasDataSummary.ClusterConfigVersion && this.CompatListVersion == clusterDasDataSummary.CompatListVersion);
        }

        public override bool Equals(object clusterDasDataSummary)
        {
            return Equals(clusterDasDataSummary as ClusterDasDataSummary);
        }

        public override int GetHashCode()
        {
            return (HostListVersion + "_" + ClusterConfigVersion + "_" + CompatListVersion).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfo : ClusterDasAdvancedRuntimeInfo, IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfo>
    {
        public ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo SlotInfo { get; set; }

        public int TotalSlots { get; set; }

        public int UsedSlots { get; set; }

        public int UnreservedSlots { get; set; }

        public int TotalVms { get; set; }

        public int TotalHosts { get; set; }

        public int TotalGoodHosts { get; set; }

        public ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[] HostSlots { get; set; }

        public ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots[] VmsRequiringMultipleSlots { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfo clusterDasFailoverLevelAdvancedRuntimeInfo)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfo != null && ((this.SlotInfo == null && clusterDasFailoverLevelAdvancedRuntimeInfo.SlotInfo == null) || (this.SlotInfo != null && this.SlotInfo.Equals(clusterDasFailoverLevelAdvancedRuntimeInfo.SlotInfo))) && this.TotalSlots == clusterDasFailoverLevelAdvancedRuntimeInfo.TotalSlots && this.UsedSlots == clusterDasFailoverLevelAdvancedRuntimeInfo.UsedSlots && this.UnreservedSlots == clusterDasFailoverLevelAdvancedRuntimeInfo.UnreservedSlots && this.TotalVms == clusterDasFailoverLevelAdvancedRuntimeInfo.TotalVms && this.TotalHosts == clusterDasFailoverLevelAdvancedRuntimeInfo.TotalHosts && this.TotalGoodHosts == clusterDasFailoverLevelAdvancedRuntimeInfo.TotalGoodHosts && ((this.HostSlots == null && clusterDasFailoverLevelAdvancedRuntimeInfo.HostSlots == null) || (this.HostSlots != null && clusterDasFailoverLevelAdvancedRuntimeInfo.HostSlots != null && Enumerable.SequenceEqual(this.HostSlots, clusterDasFailoverLevelAdvancedRuntimeInfo.HostSlots))) && ((this.VmsRequiringMultipleSlots == null && clusterDasFailoverLevelAdvancedRuntimeInfo.VmsRequiringMultipleSlots == null) || (this.VmsRequiringMultipleSlots != null && clusterDasFailoverLevelAdvancedRuntimeInfo.VmsRequiringMultipleSlots != null && Enumerable.SequenceEqual(this.VmsRequiringMultipleSlots, clusterDasFailoverLevelAdvancedRuntimeInfo.VmsRequiringMultipleSlots))));
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfo)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfo as ClusterDasFailoverLevelAdvancedRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (SlotInfo + "_" + TotalSlots + "_" + UsedSlots + "_" + UnreservedSlots + "_" + TotalVms + "_" + TotalHosts + "_" + TotalGoodHosts + "_" + HostSlots + "_" + VmsRequiringMultipleSlots).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots : DynamicData, IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>
    {
        public ManagedObjectReference Host { get; set; }

        public int Slots { get; set; }

        public ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots != null && ((this.Host == null && clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots.Host == null) || (this.Host != null && this.Host.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots.Host))) && this.Slots == clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots.Slots && ((this.LinkedView == null && clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots.LinkedView))));
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots as ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Slots + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView : IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView != null && ((this.Host == null && clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView.Host))));
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView as ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo : DynamicData, IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo>
    {
        public int NumVcpus { get; set; }

        public int CpuMHz { get; set; }

        public int MemoryMB { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo != null && this.NumVcpus == clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo.NumVcpus && this.CpuMHz == clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo.CpuMHz && this.MemoryMB == clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo.MemoryMB);
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo as ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo);
        }

        public override int GetHashCode()
        {
            return (NumVcpus + "_" + CpuMHz + "_" + MemoryMB).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots : DynamicData, IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>
    {
        public ManagedObjectReference Vm { get; set; }

        public int Slots { get; set; }

        public ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots != null && ((this.Vm == null && clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots.Vm))) && this.Slots == clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots.Slots && ((this.LinkedView == null && clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots.LinkedView))));
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots as ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Slots + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView : IEquatable<ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView)
        {
            return (clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView != null && ((this.Vm == null && clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView.Vm))));
        }

        public override bool Equals(object clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView)
        {
            return Equals(clusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView as ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterDasFdmHostState : DynamicData, IEquatable<ClusterDasFdmHostState>
    {
        public string State { get; set; }

        public ManagedObjectReference StateReporter { get; set; }

        public ClusterDasFdmHostState_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasFdmHostState clusterDasFdmHostState)
        {
            return (clusterDasFdmHostState != null && this.State == clusterDasFdmHostState.State && ((this.StateReporter == null && clusterDasFdmHostState.StateReporter == null) || (this.StateReporter != null && this.StateReporter.Equals(clusterDasFdmHostState.StateReporter))) && ((this.LinkedView == null && clusterDasFdmHostState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasFdmHostState.LinkedView))));
        }

        public override bool Equals(object clusterDasFdmHostState)
        {
            return Equals(clusterDasFdmHostState as ClusterDasFdmHostState);
        }

        public override int GetHashCode()
        {
            return (State + "_" + StateReporter + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasFdmHostState_LinkedView : IEquatable<ClusterDasFdmHostState_LinkedView>
    {
        public HostSystem StateReporter { get; set; }

        public bool Equals(ClusterDasFdmHostState_LinkedView clusterDasFdmHostState_LinkedView)
        {
            return (clusterDasFdmHostState_LinkedView != null && ((this.StateReporter == null && clusterDasFdmHostState_LinkedView.StateReporter == null) || (this.StateReporter != null && this.StateReporter.Equals(clusterDasFdmHostState_LinkedView.StateReporter))));
        }

        public override bool Equals(object clusterDasFdmHostState_LinkedView)
        {
            return Equals(clusterDasFdmHostState_LinkedView as ClusterDasFdmHostState_LinkedView);
        }

        public override int GetHashCode()
        {
            return (StateReporter).GetHashCode();
        }
    }

    public class ClusterDasHostInfo : DynamicData, IEquatable<ClusterDasHostInfo>
    {
        public bool Equals(ClusterDasHostInfo clusterDasHostInfo)
        {
            return (clusterDasHostInfo != null && base.Equals(clusterDasHostInfo));
        }

        public override bool Equals(object clusterDasHostInfo)
        {
            return Equals(clusterDasHostInfo as ClusterDasHostInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterDasHostRecommendation : DynamicData, IEquatable<ClusterDasHostRecommendation>
    {
        public ManagedObjectReference Host { get; set; }

        public int? DrsRating { get; set; }

        public ClusterDasHostRecommendation_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasHostRecommendation clusterDasHostRecommendation)
        {
            return (clusterDasHostRecommendation != null && ((this.Host == null && clusterDasHostRecommendation.Host == null) || (this.Host != null && this.Host.Equals(clusterDasHostRecommendation.Host))) && ((this.DrsRating == null && clusterDasHostRecommendation.DrsRating == null) || (this.DrsRating != null && this.DrsRating.Equals(clusterDasHostRecommendation.DrsRating))) && ((this.LinkedView == null && clusterDasHostRecommendation.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasHostRecommendation.LinkedView))));
        }

        public override bool Equals(object clusterDasHostRecommendation)
        {
            return Equals(clusterDasHostRecommendation as ClusterDasHostRecommendation);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + DrsRating + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasHostRecommendation_LinkedView : IEquatable<ClusterDasHostRecommendation_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterDasHostRecommendation_LinkedView clusterDasHostRecommendation_LinkedView)
        {
            return (clusterDasHostRecommendation_LinkedView != null && ((this.Host == null && clusterDasHostRecommendation_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterDasHostRecommendation_LinkedView.Host))));
        }

        public override bool Equals(object clusterDasHostRecommendation_LinkedView)
        {
            return Equals(clusterDasHostRecommendation_LinkedView as ClusterDasHostRecommendation_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterDasVmConfigInfo : DynamicData, IEquatable<ClusterDasVmConfigInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public DasVmPriority? RestartPriority { get; set; }

        public bool? PowerOffOnIsolation { get; set; }

        public ClusterDasVmSettings DasSettings { get; set; }

        public ClusterDasVmConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDasVmConfigInfo clusterDasVmConfigInfo)
        {
            return (clusterDasVmConfigInfo != null && ((this.Key == null && clusterDasVmConfigInfo.Key == null) || (this.Key != null && this.Key.Equals(clusterDasVmConfigInfo.Key))) && ((this.RestartPriority == null && clusterDasVmConfigInfo.RestartPriority == null) || (this.RestartPriority != null && this.RestartPriority.Equals(clusterDasVmConfigInfo.RestartPriority))) && ((this.PowerOffOnIsolation == null && clusterDasVmConfigInfo.PowerOffOnIsolation == null) || (this.PowerOffOnIsolation != null && this.PowerOffOnIsolation.Equals(clusterDasVmConfigInfo.PowerOffOnIsolation))) && ((this.DasSettings == null && clusterDasVmConfigInfo.DasSettings == null) || (this.DasSettings != null && this.DasSettings.Equals(clusterDasVmConfigInfo.DasSettings))) && ((this.LinkedView == null && clusterDasVmConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDasVmConfigInfo.LinkedView))));
        }

        public override bool Equals(object clusterDasVmConfigInfo)
        {
            return Equals(clusterDasVmConfigInfo as ClusterDasVmConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + RestartPriority + "_" + PowerOffOnIsolation + "_" + DasSettings + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDasVmConfigInfo_LinkedView : IEquatable<ClusterDasVmConfigInfo_LinkedView>
    {
        public VirtualMachine Key { get; set; }

        public bool Equals(ClusterDasVmConfigInfo_LinkedView clusterDasVmConfigInfo_LinkedView)
        {
            return (clusterDasVmConfigInfo_LinkedView != null && ((this.Key == null && clusterDasVmConfigInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(clusterDasVmConfigInfo_LinkedView.Key))));
        }

        public override bool Equals(object clusterDasVmConfigInfo_LinkedView)
        {
            return Equals(clusterDasVmConfigInfo_LinkedView as ClusterDasVmConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class ClusterDasVmConfigSpec : ArrayUpdateSpec, IEquatable<ClusterDasVmConfigSpec>
    {
        public ClusterDasVmConfigInfo Info { get; set; }

        public bool Equals(ClusterDasVmConfigSpec clusterDasVmConfigSpec)
        {
            return (clusterDasVmConfigSpec != null && ((this.Info == null && clusterDasVmConfigSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterDasVmConfigSpec.Info))));
        }

        public override bool Equals(object clusterDasVmConfigSpec)
        {
            return Equals(clusterDasVmConfigSpec as ClusterDasVmConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterDasVmSettings : DynamicData, IEquatable<ClusterDasVmSettings>
    {
        public string RestartPriority { get; set; }

        public int? RestartPriorityTimeout { get; set; }

        public string IsolationResponse { get; set; }

        public ClusterVmToolsMonitoringSettings VmToolsMonitoringSettings { get; set; }

        public ClusterVmComponentProtectionSettings VmComponentProtectionSettings { get; set; }

        public bool Equals(ClusterDasVmSettings clusterDasVmSettings)
        {
            return (clusterDasVmSettings != null && this.RestartPriority == clusterDasVmSettings.RestartPriority && ((this.RestartPriorityTimeout == null && clusterDasVmSettings.RestartPriorityTimeout == null) || (this.RestartPriorityTimeout != null && this.RestartPriorityTimeout.Equals(clusterDasVmSettings.RestartPriorityTimeout))) && this.IsolationResponse == clusterDasVmSettings.IsolationResponse && ((this.VmToolsMonitoringSettings == null && clusterDasVmSettings.VmToolsMonitoringSettings == null) || (this.VmToolsMonitoringSettings != null && this.VmToolsMonitoringSettings.Equals(clusterDasVmSettings.VmToolsMonitoringSettings))) && ((this.VmComponentProtectionSettings == null && clusterDasVmSettings.VmComponentProtectionSettings == null) || (this.VmComponentProtectionSettings != null && this.VmComponentProtectionSettings.Equals(clusterDasVmSettings.VmComponentProtectionSettings))));
        }

        public override bool Equals(object clusterDasVmSettings)
        {
            return Equals(clusterDasVmSettings as ClusterDasVmSettings);
        }

        public override int GetHashCode()
        {
            return (RestartPriority + "_" + RestartPriorityTimeout + "_" + IsolationResponse + "_" + VmToolsMonitoringSettings + "_" + VmComponentProtectionSettings).GetHashCode();
        }
    }

    public class ClusterDependencyRuleInfo : ClusterRuleInfo, IEquatable<ClusterDependencyRuleInfo>
    {
        public string VmGroup { get; set; }

        public string DependsOnVmGroup { get; set; }

        public bool Equals(ClusterDependencyRuleInfo clusterDependencyRuleInfo)
        {
            return (clusterDependencyRuleInfo != null && this.VmGroup == clusterDependencyRuleInfo.VmGroup && this.DependsOnVmGroup == clusterDependencyRuleInfo.DependsOnVmGroup);
        }

        public override bool Equals(object clusterDependencyRuleInfo)
        {
            return Equals(clusterDependencyRuleInfo as ClusterDependencyRuleInfo);
        }

        public override int GetHashCode()
        {
            return (VmGroup + "_" + DependsOnVmGroup).GetHashCode();
        }
    }

    public class ClusterDestroyedEvent : ClusterEvent, IEquatable<ClusterDestroyedEvent>
    {
        public bool Equals(ClusterDestroyedEvent clusterDestroyedEvent)
        {
            return (clusterDestroyedEvent != null && base.Equals(clusterDestroyedEvent));
        }

        public override bool Equals(object clusterDestroyedEvent)
        {
            return Equals(clusterDestroyedEvent as ClusterDestroyedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterDpmConfigInfo : DynamicData, IEquatable<ClusterDpmConfigInfo>
    {
        public bool? Enabled { get; set; }

        public DpmBehavior? DefaultDpmBehavior { get; set; }

        public int? HostPowerActionRate { get; set; }

        public OptionValue[] Option { get; set; }

        public bool Equals(ClusterDpmConfigInfo clusterDpmConfigInfo)
        {
            return (clusterDpmConfigInfo != null && ((this.Enabled == null && clusterDpmConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterDpmConfigInfo.Enabled))) && ((this.DefaultDpmBehavior == null && clusterDpmConfigInfo.DefaultDpmBehavior == null) || (this.DefaultDpmBehavior != null && this.DefaultDpmBehavior.Equals(clusterDpmConfigInfo.DefaultDpmBehavior))) && ((this.HostPowerActionRate == null && clusterDpmConfigInfo.HostPowerActionRate == null) || (this.HostPowerActionRate != null && this.HostPowerActionRate.Equals(clusterDpmConfigInfo.HostPowerActionRate))) && ((this.Option == null && clusterDpmConfigInfo.Option == null) || (this.Option != null && clusterDpmConfigInfo.Option != null && Enumerable.SequenceEqual(this.Option, clusterDpmConfigInfo.Option))));
        }

        public override bool Equals(object clusterDpmConfigInfo)
        {
            return Equals(clusterDpmConfigInfo as ClusterDpmConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + DefaultDpmBehavior + "_" + HostPowerActionRate + "_" + Option).GetHashCode();
        }
    }

    public class ClusterDpmHostConfigInfo : DynamicData, IEquatable<ClusterDpmHostConfigInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public bool? Enabled { get; set; }

        public DpmBehavior? Behavior { get; set; }

        public ClusterDpmHostConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDpmHostConfigInfo clusterDpmHostConfigInfo)
        {
            return (clusterDpmHostConfigInfo != null && ((this.Key == null && clusterDpmHostConfigInfo.Key == null) || (this.Key != null && this.Key.Equals(clusterDpmHostConfigInfo.Key))) && ((this.Enabled == null && clusterDpmHostConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterDpmHostConfigInfo.Enabled))) && ((this.Behavior == null && clusterDpmHostConfigInfo.Behavior == null) || (this.Behavior != null && this.Behavior.Equals(clusterDpmHostConfigInfo.Behavior))) && ((this.LinkedView == null && clusterDpmHostConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDpmHostConfigInfo.LinkedView))));
        }

        public override bool Equals(object clusterDpmHostConfigInfo)
        {
            return Equals(clusterDpmHostConfigInfo as ClusterDpmHostConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Enabled + "_" + Behavior + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDpmHostConfigInfo_LinkedView : IEquatable<ClusterDpmHostConfigInfo_LinkedView>
    {
        public HostSystem Key { get; set; }

        public bool Equals(ClusterDpmHostConfigInfo_LinkedView clusterDpmHostConfigInfo_LinkedView)
        {
            return (clusterDpmHostConfigInfo_LinkedView != null && ((this.Key == null && clusterDpmHostConfigInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(clusterDpmHostConfigInfo_LinkedView.Key))));
        }

        public override bool Equals(object clusterDpmHostConfigInfo_LinkedView)
        {
            return Equals(clusterDpmHostConfigInfo_LinkedView as ClusterDpmHostConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class ClusterDpmHostConfigSpec : ArrayUpdateSpec, IEquatable<ClusterDpmHostConfigSpec>
    {
        public ClusterDpmHostConfigInfo Info { get; set; }

        public bool Equals(ClusterDpmHostConfigSpec clusterDpmHostConfigSpec)
        {
            return (clusterDpmHostConfigSpec != null && ((this.Info == null && clusterDpmHostConfigSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterDpmHostConfigSpec.Info))));
        }

        public override bool Equals(object clusterDpmHostConfigSpec)
        {
            return Equals(clusterDpmHostConfigSpec as ClusterDpmHostConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterDrsConfigInfo : DynamicData, IEquatable<ClusterDrsConfigInfo>
    {
        public bool? Enabled { get; set; }

        public bool? EnableVmBehaviorOverrides { get; set; }

        public DrsBehavior? DefaultVmBehavior { get; set; }

        public int? VmotionRate { get; set; }

        public OptionValue[] Option { get; set; }

        public bool Equals(ClusterDrsConfigInfo clusterDrsConfigInfo)
        {
            return (clusterDrsConfigInfo != null && ((this.Enabled == null && clusterDrsConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterDrsConfigInfo.Enabled))) && ((this.EnableVmBehaviorOverrides == null && clusterDrsConfigInfo.EnableVmBehaviorOverrides == null) || (this.EnableVmBehaviorOverrides != null && this.EnableVmBehaviorOverrides.Equals(clusterDrsConfigInfo.EnableVmBehaviorOverrides))) && ((this.DefaultVmBehavior == null && clusterDrsConfigInfo.DefaultVmBehavior == null) || (this.DefaultVmBehavior != null && this.DefaultVmBehavior.Equals(clusterDrsConfigInfo.DefaultVmBehavior))) && ((this.VmotionRate == null && clusterDrsConfigInfo.VmotionRate == null) || (this.VmotionRate != null && this.VmotionRate.Equals(clusterDrsConfigInfo.VmotionRate))) && ((this.Option == null && clusterDrsConfigInfo.Option == null) || (this.Option != null && clusterDrsConfigInfo.Option != null && Enumerable.SequenceEqual(this.Option, clusterDrsConfigInfo.Option))));
        }

        public override bool Equals(object clusterDrsConfigInfo)
        {
            return Equals(clusterDrsConfigInfo as ClusterDrsConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + EnableVmBehaviorOverrides + "_" + DefaultVmBehavior + "_" + VmotionRate + "_" + Option).GetHashCode();
        }
    }

    public class ClusterDrsFaults : DynamicData, IEquatable<ClusterDrsFaults>
    {
        public string Reason { get; set; }

        public ClusterDrsFaultsFaultsByVm[] FaultsByVm { get; set; }

        public bool Equals(ClusterDrsFaults clusterDrsFaults)
        {
            return (clusterDrsFaults != null && this.Reason == clusterDrsFaults.Reason && ((this.FaultsByVm == null && clusterDrsFaults.FaultsByVm == null) || (this.FaultsByVm != null && clusterDrsFaults.FaultsByVm != null && Enumerable.SequenceEqual(this.FaultsByVm, clusterDrsFaults.FaultsByVm))));
        }

        public override bool Equals(object clusterDrsFaults)
        {
            return Equals(clusterDrsFaults as ClusterDrsFaults);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + FaultsByVm).GetHashCode();
        }
    }

    public class ClusterDrsFaultsFaultsByVirtualDisk : ClusterDrsFaultsFaultsByVm, IEquatable<ClusterDrsFaultsFaultsByVirtualDisk>
    {
        public VirtualDiskId Disk { get; set; }

        public new ClusterDrsFaultsFaultsByVirtualDisk_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDrsFaultsFaultsByVirtualDisk clusterDrsFaultsFaultsByVirtualDisk)
        {
            return (clusterDrsFaultsFaultsByVirtualDisk != null && ((this.Disk == null && clusterDrsFaultsFaultsByVirtualDisk.Disk == null) || (this.Disk != null && this.Disk.Equals(clusterDrsFaultsFaultsByVirtualDisk.Disk))) && ((this.LinkedView == null && clusterDrsFaultsFaultsByVirtualDisk.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDrsFaultsFaultsByVirtualDisk.LinkedView))));
        }

        public override bool Equals(object clusterDrsFaultsFaultsByVirtualDisk)
        {
            return Equals(clusterDrsFaultsFaultsByVirtualDisk as ClusterDrsFaultsFaultsByVirtualDisk);
        }

        public override int GetHashCode()
        {
            return (Disk + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDrsFaultsFaultsByVirtualDisk_LinkedView : ClusterDrsFaultsFaultsByVm_LinkedView, IEquatable<ClusterDrsFaultsFaultsByVirtualDisk_LinkedView>
    {
        public bool Equals(ClusterDrsFaultsFaultsByVirtualDisk_LinkedView clusterDrsFaultsFaultsByVirtualDisk_LinkedView)
        {
            return (clusterDrsFaultsFaultsByVirtualDisk_LinkedView != null && base.Equals(clusterDrsFaultsFaultsByVirtualDisk_LinkedView));
        }

        public override bool Equals(object clusterDrsFaultsFaultsByVirtualDisk_LinkedView)
        {
            return Equals(clusterDrsFaultsFaultsByVirtualDisk_LinkedView as ClusterDrsFaultsFaultsByVirtualDisk_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterDrsFaultsFaultsByVm : DynamicData, IEquatable<ClusterDrsFaultsFaultsByVm>
    {
        public ClusterDrsFaultsFaultsByVm_LinkedView LinkedView { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public LocalizedMethodFault[] Fault { get; set; }

        public bool Equals(ClusterDrsFaultsFaultsByVm clusterDrsFaultsFaultsByVm)
        {
            return (clusterDrsFaultsFaultsByVm != null && ((this.LinkedView == null && clusterDrsFaultsFaultsByVm.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDrsFaultsFaultsByVm.LinkedView))) && ((this.Vm == null && clusterDrsFaultsFaultsByVm.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDrsFaultsFaultsByVm.Vm))) && ((this.Fault == null && clusterDrsFaultsFaultsByVm.Fault == null) || (this.Fault != null && clusterDrsFaultsFaultsByVm.Fault != null && Enumerable.SequenceEqual(this.Fault, clusterDrsFaultsFaultsByVm.Fault))));
        }

        public override bool Equals(object clusterDrsFaultsFaultsByVm)
        {
            return Equals(clusterDrsFaultsFaultsByVm as ClusterDrsFaultsFaultsByVm);
        }

        public override int GetHashCode()
        {
            return (LinkedView + "_" + Vm + "_" + Fault).GetHashCode();
        }
    }

    public class ClusterDrsFaultsFaultsByVm_LinkedView : IEquatable<ClusterDrsFaultsFaultsByVm_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ClusterDrsFaultsFaultsByVm_LinkedView clusterDrsFaultsFaultsByVm_LinkedView)
        {
            return (clusterDrsFaultsFaultsByVm_LinkedView != null && ((this.Vm == null && clusterDrsFaultsFaultsByVm_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDrsFaultsFaultsByVm_LinkedView.Vm))));
        }

        public override bool Equals(object clusterDrsFaultsFaultsByVm_LinkedView)
        {
            return Equals(clusterDrsFaultsFaultsByVm_LinkedView as ClusterDrsFaultsFaultsByVm_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterDrsMigration : DynamicData, IEquatable<ClusterDrsMigration>
    {
        public string Key { get; set; }

        public DateTime Time { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public int? CpuLoad { get; set; }

        public long? MemoryLoad { get; set; }

        public ManagedObjectReference Source { get; set; }

        public int? SourceCpuLoad { get; set; }

        public long? SourceMemoryLoad { get; set; }

        public ManagedObjectReference Destination { get; set; }

        public int? DestinationCpuLoad { get; set; }

        public long? DestinationMemoryLoad { get; set; }

        public ClusterDrsMigration_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDrsMigration clusterDrsMigration)
        {
            return (clusterDrsMigration != null && this.Key == clusterDrsMigration.Key && this.Time == clusterDrsMigration.Time && ((this.Vm == null && clusterDrsMigration.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDrsMigration.Vm))) && ((this.CpuLoad == null && clusterDrsMigration.CpuLoad == null) || (this.CpuLoad != null && this.CpuLoad.Equals(clusterDrsMigration.CpuLoad))) && ((this.MemoryLoad == null && clusterDrsMigration.MemoryLoad == null) || (this.MemoryLoad != null && this.MemoryLoad.Equals(clusterDrsMigration.MemoryLoad))) && ((this.Source == null && clusterDrsMigration.Source == null) || (this.Source != null && this.Source.Equals(clusterDrsMigration.Source))) && ((this.SourceCpuLoad == null && clusterDrsMigration.SourceCpuLoad == null) || (this.SourceCpuLoad != null && this.SourceCpuLoad.Equals(clusterDrsMigration.SourceCpuLoad))) && ((this.SourceMemoryLoad == null && clusterDrsMigration.SourceMemoryLoad == null) || (this.SourceMemoryLoad != null && this.SourceMemoryLoad.Equals(clusterDrsMigration.SourceMemoryLoad))) && ((this.Destination == null && clusterDrsMigration.Destination == null) || (this.Destination != null && this.Destination.Equals(clusterDrsMigration.Destination))) && ((this.DestinationCpuLoad == null && clusterDrsMigration.DestinationCpuLoad == null) || (this.DestinationCpuLoad != null && this.DestinationCpuLoad.Equals(clusterDrsMigration.DestinationCpuLoad))) && ((this.DestinationMemoryLoad == null && clusterDrsMigration.DestinationMemoryLoad == null) || (this.DestinationMemoryLoad != null && this.DestinationMemoryLoad.Equals(clusterDrsMigration.DestinationMemoryLoad))) && ((this.LinkedView == null && clusterDrsMigration.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDrsMigration.LinkedView))));
        }

        public override bool Equals(object clusterDrsMigration)
        {
            return Equals(clusterDrsMigration as ClusterDrsMigration);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Time + "_" + Vm + "_" + CpuLoad + "_" + MemoryLoad + "_" + Source + "_" + SourceCpuLoad + "_" + SourceMemoryLoad + "_" + Destination + "_" + DestinationCpuLoad + "_" + DestinationMemoryLoad + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDrsMigration_LinkedView : IEquatable<ClusterDrsMigration_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem Source { get; set; }

        public HostSystem Destination { get; set; }

        public bool Equals(ClusterDrsMigration_LinkedView clusterDrsMigration_LinkedView)
        {
            return (clusterDrsMigration_LinkedView != null && ((this.Vm == null && clusterDrsMigration_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterDrsMigration_LinkedView.Vm))) && ((this.Source == null && clusterDrsMigration_LinkedView.Source == null) || (this.Source != null && this.Source.Equals(clusterDrsMigration_LinkedView.Source))) && ((this.Destination == null && clusterDrsMigration_LinkedView.Destination == null) || (this.Destination != null && this.Destination.Equals(clusterDrsMigration_LinkedView.Destination))));
        }

        public override bool Equals(object clusterDrsMigration_LinkedView)
        {
            return Equals(clusterDrsMigration_LinkedView as ClusterDrsMigration_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Source + "_" + Destination).GetHashCode();
        }
    }

    public class ClusterDrsRecommendation : DynamicData, IEquatable<ClusterDrsRecommendation>
    {
        public string Key { get; set; }

        public int Rating { get; set; }

        public string Reason { get; set; }

        public string ReasonText { get; set; }

        public ClusterDrsMigration[] MigrationList { get; set; }

        public bool Equals(ClusterDrsRecommendation clusterDrsRecommendation)
        {
            return (clusterDrsRecommendation != null && this.Key == clusterDrsRecommendation.Key && this.Rating == clusterDrsRecommendation.Rating && this.Reason == clusterDrsRecommendation.Reason && this.ReasonText == clusterDrsRecommendation.ReasonText && ((this.MigrationList == null && clusterDrsRecommendation.MigrationList == null) || (this.MigrationList != null && clusterDrsRecommendation.MigrationList != null && Enumerable.SequenceEqual(this.MigrationList, clusterDrsRecommendation.MigrationList))));
        }

        public override bool Equals(object clusterDrsRecommendation)
        {
            return Equals(clusterDrsRecommendation as ClusterDrsRecommendation);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Rating + "_" + Reason + "_" + ReasonText + "_" + MigrationList).GetHashCode();
        }
    }

    public class ClusterDrsVmConfigInfo : DynamicData, IEquatable<ClusterDrsVmConfigInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public bool? Enabled { get; set; }

        public DrsBehavior? Behavior { get; set; }

        public ClusterDrsVmConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterDrsVmConfigInfo clusterDrsVmConfigInfo)
        {
            return (clusterDrsVmConfigInfo != null && ((this.Key == null && clusterDrsVmConfigInfo.Key == null) || (this.Key != null && this.Key.Equals(clusterDrsVmConfigInfo.Key))) && ((this.Enabled == null && clusterDrsVmConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterDrsVmConfigInfo.Enabled))) && ((this.Behavior == null && clusterDrsVmConfigInfo.Behavior == null) || (this.Behavior != null && this.Behavior.Equals(clusterDrsVmConfigInfo.Behavior))) && ((this.LinkedView == null && clusterDrsVmConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterDrsVmConfigInfo.LinkedView))));
        }

        public override bool Equals(object clusterDrsVmConfigInfo)
        {
            return Equals(clusterDrsVmConfigInfo as ClusterDrsVmConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Enabled + "_" + Behavior + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterDrsVmConfigInfo_LinkedView : IEquatable<ClusterDrsVmConfigInfo_LinkedView>
    {
        public VirtualMachine Key { get; set; }

        public bool Equals(ClusterDrsVmConfigInfo_LinkedView clusterDrsVmConfigInfo_LinkedView)
        {
            return (clusterDrsVmConfigInfo_LinkedView != null && ((this.Key == null && clusterDrsVmConfigInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(clusterDrsVmConfigInfo_LinkedView.Key))));
        }

        public override bool Equals(object clusterDrsVmConfigInfo_LinkedView)
        {
            return Equals(clusterDrsVmConfigInfo_LinkedView as ClusterDrsVmConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class ClusterDrsVmConfigSpec : ArrayUpdateSpec, IEquatable<ClusterDrsVmConfigSpec>
    {
        public ClusterDrsVmConfigInfo Info { get; set; }

        public bool Equals(ClusterDrsVmConfigSpec clusterDrsVmConfigSpec)
        {
            return (clusterDrsVmConfigSpec != null && ((this.Info == null && clusterDrsVmConfigSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterDrsVmConfigSpec.Info))));
        }

        public override bool Equals(object clusterDrsVmConfigSpec)
        {
            return Equals(clusterDrsVmConfigSpec as ClusterDrsVmConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterEnterMaintenanceResult : DynamicData, IEquatable<ClusterEnterMaintenanceResult>
    {
        public ClusterRecommendation[] Recommendations { get; set; }

        public ClusterDrsFaults Fault { get; set; }

        public bool Equals(ClusterEnterMaintenanceResult clusterEnterMaintenanceResult)
        {
            return (clusterEnterMaintenanceResult != null && ((this.Recommendations == null && clusterEnterMaintenanceResult.Recommendations == null) || (this.Recommendations != null && clusterEnterMaintenanceResult.Recommendations != null && Enumerable.SequenceEqual(this.Recommendations, clusterEnterMaintenanceResult.Recommendations))) && ((this.Fault == null && clusterEnterMaintenanceResult.Fault == null) || (this.Fault != null && this.Fault.Equals(clusterEnterMaintenanceResult.Fault))));
        }

        public override bool Equals(object clusterEnterMaintenanceResult)
        {
            return Equals(clusterEnterMaintenanceResult as ClusterEnterMaintenanceResult);
        }

        public override int GetHashCode()
        {
            return (Recommendations + "_" + Fault).GetHashCode();
        }
    }

    public class ClusterEVCManager : ExtensibleManagedObject, IEquatable<ClusterEVCManager>
    {
        public ManagedObjectReference ManagedCluster { get; set; }

        public ClusterEVCManagerEVCState EvcState { get; set; }

        public ClusterEVCManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference ConfigureEvcMode_Task(string evcModeKey)
        {
            return default(ManagedObjectReference);
        }

        public void ConfigureEvcMode(string evcModeKey)
        {
        }

        public ManagedObjectReference DisableEvcMode_Task()
        {
            return default(ManagedObjectReference);
        }

        public void DisableEvcMode()
        {
        }

        public ManagedObjectReference CheckConfigureEvcMode_Task(string evcModeKey)
        {
            return default(ManagedObjectReference);
        }

        public ClusterEVCManagerCheckResult[] CheckConfigureEvcMode(string evcModeKey)
        {
            return default(ClusterEVCManagerCheckResult[]);
        }

        public ManagedObjectReference CheckAddHostEvc_Task(HostConnectSpec cnxSpec)
        {
            return default(ManagedObjectReference);
        }

        public ClusterEVCManagerCheckResult[] CheckAddHostEvc(HostConnectSpec cnxSpec)
        {
            return default(ClusterEVCManagerCheckResult[]);
        }

        public bool Equals(ClusterEVCManager clusterEVCManager)
        {
            return (clusterEVCManager != null && ((this.ManagedCluster == null && clusterEVCManager.ManagedCluster == null) || (this.ManagedCluster != null && this.ManagedCluster.Equals(clusterEVCManager.ManagedCluster))) && ((this.EvcState == null && clusterEVCManager.EvcState == null) || (this.EvcState != null && this.EvcState.Equals(clusterEVCManager.EvcState))) && ((this.LinkedView == null && clusterEVCManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterEVCManager.LinkedView))));
        }

        public override bool Equals(object clusterEVCManager)
        {
            return Equals(clusterEVCManager as ClusterEVCManager);
        }

        public override int GetHashCode()
        {
            return (ManagedCluster + "_" + EvcState + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterEVCManager_LinkedView : IEquatable<ClusterEVCManager_LinkedView>
    {
        public ClusterComputeResource ManagedCluster { get; set; }

        public bool Equals(ClusterEVCManager_LinkedView clusterEVCManager_LinkedView)
        {
            return (clusterEVCManager_LinkedView != null && ((this.ManagedCluster == null && clusterEVCManager_LinkedView.ManagedCluster == null) || (this.ManagedCluster != null && this.ManagedCluster.Equals(clusterEVCManager_LinkedView.ManagedCluster))));
        }

        public override bool Equals(object clusterEVCManager_LinkedView)
        {
            return Equals(clusterEVCManager_LinkedView as ClusterEVCManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ManagedCluster).GetHashCode();
        }
    }

    public class ClusterEVCManagerCheckResult : DynamicData, IEquatable<ClusterEVCManagerCheckResult>
    {
        public string EvcModeKey { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public ClusterEVCManagerCheckResult_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterEVCManagerCheckResult clusterEVCManagerCheckResult)
        {
            return (clusterEVCManagerCheckResult != null && this.EvcModeKey == clusterEVCManagerCheckResult.EvcModeKey && ((this.Error == null && clusterEVCManagerCheckResult.Error == null) || (this.Error != null && this.Error.Equals(clusterEVCManagerCheckResult.Error))) && ((this.Host == null && clusterEVCManagerCheckResult.Host == null) || (this.Host != null && clusterEVCManagerCheckResult.Host != null && Enumerable.SequenceEqual(this.Host, clusterEVCManagerCheckResult.Host))) && ((this.LinkedView == null && clusterEVCManagerCheckResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterEVCManagerCheckResult.LinkedView))));
        }

        public override bool Equals(object clusterEVCManagerCheckResult)
        {
            return Equals(clusterEVCManagerCheckResult as ClusterEVCManagerCheckResult);
        }

        public override int GetHashCode()
        {
            return (EvcModeKey + "_" + Error + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterEVCManagerCheckResult_LinkedView : IEquatable<ClusterEVCManagerCheckResult_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(ClusterEVCManagerCheckResult_LinkedView clusterEVCManagerCheckResult_LinkedView)
        {
            return (clusterEVCManagerCheckResult_LinkedView != null && ((this.Host == null && clusterEVCManagerCheckResult_LinkedView.Host == null) || (this.Host != null && clusterEVCManagerCheckResult_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, clusterEVCManagerCheckResult_LinkedView.Host))));
        }

        public override bool Equals(object clusterEVCManagerCheckResult_LinkedView)
        {
            return Equals(clusterEVCManagerCheckResult_LinkedView as ClusterEVCManagerCheckResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterEVCManagerEVCState : DynamicData, IEquatable<ClusterEVCManagerEVCState>
    {
        public EVCMode[] SupportedEVCMode { get; set; }

        public string CurrentEVCModeKey { get; set; }

        public HostCpuIdInfo[] GuaranteedCPUFeatures { get; set; }

        public HostFeatureCapability[] FeatureCapability { get; set; }

        public HostFeatureMask[] FeatureMask { get; set; }

        public VirtualMachineFeatureRequirement[] FeatureRequirement { get; set; }

        public bool Equals(ClusterEVCManagerEVCState clusterEVCManagerEVCState)
        {
            return (clusterEVCManagerEVCState != null && ((this.SupportedEVCMode == null && clusterEVCManagerEVCState.SupportedEVCMode == null) || (this.SupportedEVCMode != null && clusterEVCManagerEVCState.SupportedEVCMode != null && Enumerable.SequenceEqual(this.SupportedEVCMode, clusterEVCManagerEVCState.SupportedEVCMode))) && this.CurrentEVCModeKey == clusterEVCManagerEVCState.CurrentEVCModeKey && ((this.GuaranteedCPUFeatures == null && clusterEVCManagerEVCState.GuaranteedCPUFeatures == null) || (this.GuaranteedCPUFeatures != null && clusterEVCManagerEVCState.GuaranteedCPUFeatures != null && Enumerable.SequenceEqual(this.GuaranteedCPUFeatures, clusterEVCManagerEVCState.GuaranteedCPUFeatures))) && ((this.FeatureCapability == null && clusterEVCManagerEVCState.FeatureCapability == null) || (this.FeatureCapability != null && clusterEVCManagerEVCState.FeatureCapability != null && Enumerable.SequenceEqual(this.FeatureCapability, clusterEVCManagerEVCState.FeatureCapability))) && ((this.FeatureMask == null && clusterEVCManagerEVCState.FeatureMask == null) || (this.FeatureMask != null && clusterEVCManagerEVCState.FeatureMask != null && Enumerable.SequenceEqual(this.FeatureMask, clusterEVCManagerEVCState.FeatureMask))) && ((this.FeatureRequirement == null && clusterEVCManagerEVCState.FeatureRequirement == null) || (this.FeatureRequirement != null && clusterEVCManagerEVCState.FeatureRequirement != null && Enumerable.SequenceEqual(this.FeatureRequirement, clusterEVCManagerEVCState.FeatureRequirement))));
        }

        public override bool Equals(object clusterEVCManagerEVCState)
        {
            return Equals(clusterEVCManagerEVCState as ClusterEVCManagerEVCState);
        }

        public override int GetHashCode()
        {
            return (SupportedEVCMode + "_" + CurrentEVCModeKey + "_" + GuaranteedCPUFeatures + "_" + FeatureCapability + "_" + FeatureMask + "_" + FeatureRequirement).GetHashCode();
        }
    }

    public class ClusterEvent : Event, IEquatable<ClusterEvent>
    {
        public bool Equals(ClusterEvent clusterEvent)
        {
            return (clusterEvent != null && base.Equals(clusterEvent));
        }

        public override bool Equals(object clusterEvent)
        {
            return Equals(clusterEvent as ClusterEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterFailoverHostAdmissionControlInfo : ClusterDasAdmissionControlInfo, IEquatable<ClusterFailoverHostAdmissionControlInfo>
    {
        public ClusterFailoverHostAdmissionControlInfoHostStatus[] HostStatus { get; set; }

        public bool Equals(ClusterFailoverHostAdmissionControlInfo clusterFailoverHostAdmissionControlInfo)
        {
            return (clusterFailoverHostAdmissionControlInfo != null && ((this.HostStatus == null && clusterFailoverHostAdmissionControlInfo.HostStatus == null) || (this.HostStatus != null && clusterFailoverHostAdmissionControlInfo.HostStatus != null && Enumerable.SequenceEqual(this.HostStatus, clusterFailoverHostAdmissionControlInfo.HostStatus))));
        }

        public override bool Equals(object clusterFailoverHostAdmissionControlInfo)
        {
            return Equals(clusterFailoverHostAdmissionControlInfo as ClusterFailoverHostAdmissionControlInfo);
        }

        public override int GetHashCode()
        {
            return (HostStatus).GetHashCode();
        }
    }

    public class ClusterFailoverHostAdmissionControlInfoHostStatus : DynamicData, IEquatable<ClusterFailoverHostAdmissionControlInfoHostStatus>
    {
        public ManagedObjectReference Host { get; set; }

        public ManagedEntityStatus Status { get; set; }

        public ClusterFailoverHostAdmissionControlInfoHostStatus_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterFailoverHostAdmissionControlInfoHostStatus clusterFailoverHostAdmissionControlInfoHostStatus)
        {
            return (clusterFailoverHostAdmissionControlInfoHostStatus != null && ((this.Host == null && clusterFailoverHostAdmissionControlInfoHostStatus.Host == null) || (this.Host != null && this.Host.Equals(clusterFailoverHostAdmissionControlInfoHostStatus.Host))) && this.Status == clusterFailoverHostAdmissionControlInfoHostStatus.Status && ((this.LinkedView == null && clusterFailoverHostAdmissionControlInfoHostStatus.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterFailoverHostAdmissionControlInfoHostStatus.LinkedView))));
        }

        public override bool Equals(object clusterFailoverHostAdmissionControlInfoHostStatus)
        {
            return Equals(clusterFailoverHostAdmissionControlInfoHostStatus as ClusterFailoverHostAdmissionControlInfoHostStatus);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Status + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterFailoverHostAdmissionControlInfoHostStatus_LinkedView : IEquatable<ClusterFailoverHostAdmissionControlInfoHostStatus_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterFailoverHostAdmissionControlInfoHostStatus_LinkedView clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView)
        {
            return (clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView != null && ((this.Host == null && clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView.Host))));
        }

        public override bool Equals(object clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView)
        {
            return Equals(clusterFailoverHostAdmissionControlInfoHostStatus_LinkedView as ClusterFailoverHostAdmissionControlInfoHostStatus_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterFailoverHostAdmissionControlPolicy : ClusterDasAdmissionControlPolicy, IEquatable<ClusterFailoverHostAdmissionControlPolicy>
    {
        public ManagedObjectReference[] FailoverHosts { get; set; }

        public int? FailoverLevel { get; set; }

        public ClusterFailoverHostAdmissionControlPolicy_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterFailoverHostAdmissionControlPolicy clusterFailoverHostAdmissionControlPolicy)
        {
            return (clusterFailoverHostAdmissionControlPolicy != null && ((this.FailoverHosts == null && clusterFailoverHostAdmissionControlPolicy.FailoverHosts == null) || (this.FailoverHosts != null && clusterFailoverHostAdmissionControlPolicy.FailoverHosts != null && Enumerable.SequenceEqual(this.FailoverHosts, clusterFailoverHostAdmissionControlPolicy.FailoverHosts))) && ((this.FailoverLevel == null && clusterFailoverHostAdmissionControlPolicy.FailoverLevel == null) || (this.FailoverLevel != null && this.FailoverLevel.Equals(clusterFailoverHostAdmissionControlPolicy.FailoverLevel))) && ((this.LinkedView == null && clusterFailoverHostAdmissionControlPolicy.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterFailoverHostAdmissionControlPolicy.LinkedView))));
        }

        public override bool Equals(object clusterFailoverHostAdmissionControlPolicy)
        {
            return Equals(clusterFailoverHostAdmissionControlPolicy as ClusterFailoverHostAdmissionControlPolicy);
        }

        public override int GetHashCode()
        {
            return (FailoverHosts + "_" + FailoverLevel + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterFailoverHostAdmissionControlPolicy_LinkedView : IEquatable<ClusterFailoverHostAdmissionControlPolicy_LinkedView>
    {
        public HostSystem[] FailoverHosts { get; set; }

        public bool Equals(ClusterFailoverHostAdmissionControlPolicy_LinkedView clusterFailoverHostAdmissionControlPolicy_LinkedView)
        {
            return (clusterFailoverHostAdmissionControlPolicy_LinkedView != null && ((this.FailoverHosts == null && clusterFailoverHostAdmissionControlPolicy_LinkedView.FailoverHosts == null) || (this.FailoverHosts != null && clusterFailoverHostAdmissionControlPolicy_LinkedView.FailoverHosts != null && Enumerable.SequenceEqual(this.FailoverHosts, clusterFailoverHostAdmissionControlPolicy_LinkedView.FailoverHosts))));
        }

        public override bool Equals(object clusterFailoverHostAdmissionControlPolicy_LinkedView)
        {
            return Equals(clusterFailoverHostAdmissionControlPolicy_LinkedView as ClusterFailoverHostAdmissionControlPolicy_LinkedView);
        }

        public override int GetHashCode()
        {
            return (FailoverHosts).GetHashCode();
        }
    }

    public class ClusterFailoverLevelAdmissionControlInfo : ClusterDasAdmissionControlInfo, IEquatable<ClusterFailoverLevelAdmissionControlInfo>
    {
        public int CurrentFailoverLevel { get; set; }

        public bool Equals(ClusterFailoverLevelAdmissionControlInfo clusterFailoverLevelAdmissionControlInfo)
        {
            return (clusterFailoverLevelAdmissionControlInfo != null && this.CurrentFailoverLevel == clusterFailoverLevelAdmissionControlInfo.CurrentFailoverLevel);
        }

        public override bool Equals(object clusterFailoverLevelAdmissionControlInfo)
        {
            return Equals(clusterFailoverLevelAdmissionControlInfo as ClusterFailoverLevelAdmissionControlInfo);
        }

        public override int GetHashCode()
        {
            return (CurrentFailoverLevel).GetHashCode();
        }
    }

    public class ClusterFailoverLevelAdmissionControlPolicy : ClusterDasAdmissionControlPolicy, IEquatable<ClusterFailoverLevelAdmissionControlPolicy>
    {
        public int FailoverLevel { get; set; }

        public ClusterSlotPolicy SlotPolicy { get; set; }

        public bool Equals(ClusterFailoverLevelAdmissionControlPolicy clusterFailoverLevelAdmissionControlPolicy)
        {
            return (clusterFailoverLevelAdmissionControlPolicy != null && this.FailoverLevel == clusterFailoverLevelAdmissionControlPolicy.FailoverLevel && ((this.SlotPolicy == null && clusterFailoverLevelAdmissionControlPolicy.SlotPolicy == null) || (this.SlotPolicy != null && this.SlotPolicy.Equals(clusterFailoverLevelAdmissionControlPolicy.SlotPolicy))));
        }

        public override bool Equals(object clusterFailoverLevelAdmissionControlPolicy)
        {
            return Equals(clusterFailoverLevelAdmissionControlPolicy as ClusterFailoverLevelAdmissionControlPolicy);
        }

        public override int GetHashCode()
        {
            return (FailoverLevel + "_" + SlotPolicy).GetHashCode();
        }
    }

    public class ClusterFailoverResourcesAdmissionControlInfo : ClusterDasAdmissionControlInfo, IEquatable<ClusterFailoverResourcesAdmissionControlInfo>
    {
        public int CurrentCpuFailoverResourcesPercent { get; set; }

        public int CurrentMemoryFailoverResourcesPercent { get; set; }

        public bool Equals(ClusterFailoverResourcesAdmissionControlInfo clusterFailoverResourcesAdmissionControlInfo)
        {
            return (clusterFailoverResourcesAdmissionControlInfo != null && this.CurrentCpuFailoverResourcesPercent == clusterFailoverResourcesAdmissionControlInfo.CurrentCpuFailoverResourcesPercent && this.CurrentMemoryFailoverResourcesPercent == clusterFailoverResourcesAdmissionControlInfo.CurrentMemoryFailoverResourcesPercent);
        }

        public override bool Equals(object clusterFailoverResourcesAdmissionControlInfo)
        {
            return Equals(clusterFailoverResourcesAdmissionControlInfo as ClusterFailoverResourcesAdmissionControlInfo);
        }

        public override int GetHashCode()
        {
            return (CurrentCpuFailoverResourcesPercent + "_" + CurrentMemoryFailoverResourcesPercent).GetHashCode();
        }
    }

    public class ClusterFailoverResourcesAdmissionControlPolicy : ClusterDasAdmissionControlPolicy, IEquatable<ClusterFailoverResourcesAdmissionControlPolicy>
    {
        public int CpuFailoverResourcesPercent { get; set; }

        public int MemoryFailoverResourcesPercent { get; set; }

        public int? FailoverLevel { get; set; }

        public bool? AutoComputePercentages { get; set; }

        public bool Equals(ClusterFailoverResourcesAdmissionControlPolicy clusterFailoverResourcesAdmissionControlPolicy)
        {
            return (clusterFailoverResourcesAdmissionControlPolicy != null && this.CpuFailoverResourcesPercent == clusterFailoverResourcesAdmissionControlPolicy.CpuFailoverResourcesPercent && this.MemoryFailoverResourcesPercent == clusterFailoverResourcesAdmissionControlPolicy.MemoryFailoverResourcesPercent && ((this.FailoverLevel == null && clusterFailoverResourcesAdmissionControlPolicy.FailoverLevel == null) || (this.FailoverLevel != null && this.FailoverLevel.Equals(clusterFailoverResourcesAdmissionControlPolicy.FailoverLevel))) && ((this.AutoComputePercentages == null && clusterFailoverResourcesAdmissionControlPolicy.AutoComputePercentages == null) || (this.AutoComputePercentages != null && this.AutoComputePercentages.Equals(clusterFailoverResourcesAdmissionControlPolicy.AutoComputePercentages))));
        }

        public override bool Equals(object clusterFailoverResourcesAdmissionControlPolicy)
        {
            return Equals(clusterFailoverResourcesAdmissionControlPolicy as ClusterFailoverResourcesAdmissionControlPolicy);
        }

        public override int GetHashCode()
        {
            return (CpuFailoverResourcesPercent + "_" + MemoryFailoverResourcesPercent + "_" + FailoverLevel + "_" + AutoComputePercentages).GetHashCode();
        }
    }

    public class ClusterFixedSizeSlotPolicy : ClusterSlotPolicy, IEquatable<ClusterFixedSizeSlotPolicy>
    {
        public int Cpu { get; set; }

        public int Memory { get; set; }

        public bool Equals(ClusterFixedSizeSlotPolicy clusterFixedSizeSlotPolicy)
        {
            return (clusterFixedSizeSlotPolicy != null && this.Cpu == clusterFixedSizeSlotPolicy.Cpu && this.Memory == clusterFixedSizeSlotPolicy.Memory);
        }

        public override bool Equals(object clusterFixedSizeSlotPolicy)
        {
            return Equals(clusterFixedSizeSlotPolicy as ClusterFixedSizeSlotPolicy);
        }

        public override int GetHashCode()
        {
            return (Cpu + "_" + Memory).GetHashCode();
        }
    }

    public class ClusterGroupInfo : DynamicData, IEquatable<ClusterGroupInfo>
    {
        public string Name { get; set; }

        public bool? UserCreated { get; set; }

        public string UniqueID { get; set; }

        public bool Equals(ClusterGroupInfo clusterGroupInfo)
        {
            return (clusterGroupInfo != null && this.Name == clusterGroupInfo.Name && ((this.UserCreated == null && clusterGroupInfo.UserCreated == null) || (this.UserCreated != null && this.UserCreated.Equals(clusterGroupInfo.UserCreated))) && this.UniqueID == clusterGroupInfo.UniqueID);
        }

        public override bool Equals(object clusterGroupInfo)
        {
            return Equals(clusterGroupInfo as ClusterGroupInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + UserCreated + "_" + UniqueID).GetHashCode();
        }
    }

    public class ClusterGroupSpec : ArrayUpdateSpec, IEquatable<ClusterGroupSpec>
    {
        public ClusterGroupInfo Info { get; set; }

        public bool Equals(ClusterGroupSpec clusterGroupSpec)
        {
            return (clusterGroupSpec != null && ((this.Info == null && clusterGroupSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterGroupSpec.Info))));
        }

        public override bool Equals(object clusterGroupSpec)
        {
            return Equals(clusterGroupSpec as ClusterGroupSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterHostGroup : ClusterGroupInfo, IEquatable<ClusterHostGroup>
    {
        public ManagedObjectReference[] Host { get; set; }

        public ClusterHostGroup_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterHostGroup clusterHostGroup)
        {
            return (clusterHostGroup != null && ((this.Host == null && clusterHostGroup.Host == null) || (this.Host != null && clusterHostGroup.Host != null && Enumerable.SequenceEqual(this.Host, clusterHostGroup.Host))) && ((this.LinkedView == null && clusterHostGroup.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterHostGroup.LinkedView))));
        }

        public override bool Equals(object clusterHostGroup)
        {
            return Equals(clusterHostGroup as ClusterHostGroup);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterHostGroup_LinkedView : IEquatable<ClusterHostGroup_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(ClusterHostGroup_LinkedView clusterHostGroup_LinkedView)
        {
            return (clusterHostGroup_LinkedView != null && ((this.Host == null && clusterHostGroup_LinkedView.Host == null) || (this.Host != null && clusterHostGroup_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, clusterHostGroup_LinkedView.Host))));
        }

        public override bool Equals(object clusterHostGroup_LinkedView)
        {
            return Equals(clusterHostGroup_LinkedView as ClusterHostGroup_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterHostInfraUpdateHaModeAction : ClusterAction, IEquatable<ClusterHostInfraUpdateHaModeAction>
    {
        public string OperationType { get; set; }

        public bool Equals(ClusterHostInfraUpdateHaModeAction clusterHostInfraUpdateHaModeAction)
        {
            return (clusterHostInfraUpdateHaModeAction != null && this.OperationType == clusterHostInfraUpdateHaModeAction.OperationType);
        }

        public override bool Equals(object clusterHostInfraUpdateHaModeAction)
        {
            return Equals(clusterHostInfraUpdateHaModeAction as ClusterHostInfraUpdateHaModeAction);
        }

        public override int GetHashCode()
        {
            return (OperationType).GetHashCode();
        }
    }

    public class ClusterHostPowerAction : ClusterAction, IEquatable<ClusterHostPowerAction>
    {
        public HostPowerOperationType OperationType { get; set; }

        public int? PowerConsumptionWatt { get; set; }

        public int? CpuCapacityMHz { get; set; }

        public int? MemCapacityMB { get; set; }

        public bool Equals(ClusterHostPowerAction clusterHostPowerAction)
        {
            return (clusterHostPowerAction != null && this.OperationType == clusterHostPowerAction.OperationType && ((this.PowerConsumptionWatt == null && clusterHostPowerAction.PowerConsumptionWatt == null) || (this.PowerConsumptionWatt != null && this.PowerConsumptionWatt.Equals(clusterHostPowerAction.PowerConsumptionWatt))) && ((this.CpuCapacityMHz == null && clusterHostPowerAction.CpuCapacityMHz == null) || (this.CpuCapacityMHz != null && this.CpuCapacityMHz.Equals(clusterHostPowerAction.CpuCapacityMHz))) && ((this.MemCapacityMB == null && clusterHostPowerAction.MemCapacityMB == null) || (this.MemCapacityMB != null && this.MemCapacityMB.Equals(clusterHostPowerAction.MemCapacityMB))));
        }

        public override bool Equals(object clusterHostPowerAction)
        {
            return Equals(clusterHostPowerAction as ClusterHostPowerAction);
        }

        public override int GetHashCode()
        {
            return (OperationType + "_" + PowerConsumptionWatt + "_" + CpuCapacityMHz + "_" + MemCapacityMB).GetHashCode();
        }
    }

    public class ClusterHostRecommendation : DynamicData, IEquatable<ClusterHostRecommendation>
    {
        public ManagedObjectReference Host { get; set; }

        public int Rating { get; set; }

        public ClusterHostRecommendation_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterHostRecommendation clusterHostRecommendation)
        {
            return (clusterHostRecommendation != null && ((this.Host == null && clusterHostRecommendation.Host == null) || (this.Host != null && this.Host.Equals(clusterHostRecommendation.Host))) && this.Rating == clusterHostRecommendation.Rating && ((this.LinkedView == null && clusterHostRecommendation.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterHostRecommendation.LinkedView))));
        }

        public override bool Equals(object clusterHostRecommendation)
        {
            return Equals(clusterHostRecommendation as ClusterHostRecommendation);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Rating + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterHostRecommendation_LinkedView : IEquatable<ClusterHostRecommendation_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ClusterHostRecommendation_LinkedView clusterHostRecommendation_LinkedView)
        {
            return (clusterHostRecommendation_LinkedView != null && ((this.Host == null && clusterHostRecommendation_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(clusterHostRecommendation_LinkedView.Host))));
        }

        public override bool Equals(object clusterHostRecommendation_LinkedView)
        {
            return Equals(clusterHostRecommendation_LinkedView as ClusterHostRecommendation_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ClusterInfraUpdateHaConfigInfo : DynamicData, IEquatable<ClusterInfraUpdateHaConfigInfo>
    {
        public bool? Enabled { get; set; }

        public string Behavior { get; set; }

        public string ModerateRemediation { get; set; }

        public string SevereRemediation { get; set; }

        public string[] Providers { get; set; }

        public bool Equals(ClusterInfraUpdateHaConfigInfo clusterInfraUpdateHaConfigInfo)
        {
            return (clusterInfraUpdateHaConfigInfo != null && ((this.Enabled == null && clusterInfraUpdateHaConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterInfraUpdateHaConfigInfo.Enabled))) && this.Behavior == clusterInfraUpdateHaConfigInfo.Behavior && this.ModerateRemediation == clusterInfraUpdateHaConfigInfo.ModerateRemediation && this.SevereRemediation == clusterInfraUpdateHaConfigInfo.SevereRemediation && ((this.Providers == null && clusterInfraUpdateHaConfigInfo.Providers == null) || (this.Providers != null && clusterInfraUpdateHaConfigInfo.Providers != null && Enumerable.SequenceEqual(this.Providers, clusterInfraUpdateHaConfigInfo.Providers))));
        }

        public override bool Equals(object clusterInfraUpdateHaConfigInfo)
        {
            return Equals(clusterInfraUpdateHaConfigInfo as ClusterInfraUpdateHaConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + Behavior + "_" + ModerateRemediation + "_" + SevereRemediation + "_" + Providers).GetHashCode();
        }
    }

    public class ClusterInitialPlacementAction : ClusterAction, IEquatable<ClusterInitialPlacementAction>
    {
        public ManagedObjectReference TargetHost { get; set; }

        public ManagedObjectReference Pool { get; set; }

        public ClusterInitialPlacementAction_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterInitialPlacementAction clusterInitialPlacementAction)
        {
            return (clusterInitialPlacementAction != null && ((this.TargetHost == null && clusterInitialPlacementAction.TargetHost == null) || (this.TargetHost != null && this.TargetHost.Equals(clusterInitialPlacementAction.TargetHost))) && ((this.Pool == null && clusterInitialPlacementAction.Pool == null) || (this.Pool != null && this.Pool.Equals(clusterInitialPlacementAction.Pool))) && ((this.LinkedView == null && clusterInitialPlacementAction.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterInitialPlacementAction.LinkedView))));
        }

        public override bool Equals(object clusterInitialPlacementAction)
        {
            return Equals(clusterInitialPlacementAction as ClusterInitialPlacementAction);
        }

        public override int GetHashCode()
        {
            return (TargetHost + "_" + Pool + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterInitialPlacementAction_LinkedView : IEquatable<ClusterInitialPlacementAction_LinkedView>
    {
        public HostSystem TargetHost { get; set; }

        public ResourcePool Pool { get; set; }

        public bool Equals(ClusterInitialPlacementAction_LinkedView clusterInitialPlacementAction_LinkedView)
        {
            return (clusterInitialPlacementAction_LinkedView != null && ((this.TargetHost == null && clusterInitialPlacementAction_LinkedView.TargetHost == null) || (this.TargetHost != null && this.TargetHost.Equals(clusterInitialPlacementAction_LinkedView.TargetHost))) && ((this.Pool == null && clusterInitialPlacementAction_LinkedView.Pool == null) || (this.Pool != null && this.Pool.Equals(clusterInitialPlacementAction_LinkedView.Pool))));
        }

        public override bool Equals(object clusterInitialPlacementAction_LinkedView)
        {
            return Equals(clusterInitialPlacementAction_LinkedView as ClusterInitialPlacementAction_LinkedView);
        }

        public override int GetHashCode()
        {
            return (TargetHost + "_" + Pool).GetHashCode();
        }
    }

    public class ClusterIoFilterInfo : IoFilterInfo, IEquatable<ClusterIoFilterInfo>
    {
        public string OpType { get; set; }

        public string VibUrl { get; set; }

        public bool Equals(ClusterIoFilterInfo clusterIoFilterInfo)
        {
            return (clusterIoFilterInfo != null && this.OpType == clusterIoFilterInfo.OpType && this.VibUrl == clusterIoFilterInfo.VibUrl);
        }

        public override bool Equals(object clusterIoFilterInfo)
        {
            return Equals(clusterIoFilterInfo as ClusterIoFilterInfo);
        }

        public override int GetHashCode()
        {
            return (OpType + "_" + VibUrl).GetHashCode();
        }
    }

    public class ClusterMigrationAction : ClusterAction, IEquatable<ClusterMigrationAction>
    {
        public ClusterDrsMigration DrsMigration { get; set; }

        public bool Equals(ClusterMigrationAction clusterMigrationAction)
        {
            return (clusterMigrationAction != null && ((this.DrsMigration == null && clusterMigrationAction.DrsMigration == null) || (this.DrsMigration != null && this.DrsMigration.Equals(clusterMigrationAction.DrsMigration))));
        }

        public override bool Equals(object clusterMigrationAction)
        {
            return Equals(clusterMigrationAction as ClusterMigrationAction);
        }

        public override int GetHashCode()
        {
            return (DrsMigration).GetHashCode();
        }
    }

    public class ClusterNetworkConfigSpec : DynamicData, IEquatable<ClusterNetworkConfigSpec>
    {
        public ManagedObjectReference NetworkPortGroup { get; set; }

        public CustomizationIPSettings IpSettings { get; set; }

        public ClusterNetworkConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterNetworkConfigSpec clusterNetworkConfigSpec)
        {
            return (clusterNetworkConfigSpec != null && ((this.NetworkPortGroup == null && clusterNetworkConfigSpec.NetworkPortGroup == null) || (this.NetworkPortGroup != null && this.NetworkPortGroup.Equals(clusterNetworkConfigSpec.NetworkPortGroup))) && ((this.IpSettings == null && clusterNetworkConfigSpec.IpSettings == null) || (this.IpSettings != null && this.IpSettings.Equals(clusterNetworkConfigSpec.IpSettings))) && ((this.LinkedView == null && clusterNetworkConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterNetworkConfigSpec.LinkedView))));
        }

        public override bool Equals(object clusterNetworkConfigSpec)
        {
            return Equals(clusterNetworkConfigSpec as ClusterNetworkConfigSpec);
        }

        public override int GetHashCode()
        {
            return (NetworkPortGroup + "_" + IpSettings + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterNetworkConfigSpec_LinkedView : IEquatable<ClusterNetworkConfigSpec_LinkedView>
    {
        public Network NetworkPortGroup { get; set; }

        public bool Equals(ClusterNetworkConfigSpec_LinkedView clusterNetworkConfigSpec_LinkedView)
        {
            return (clusterNetworkConfigSpec_LinkedView != null && ((this.NetworkPortGroup == null && clusterNetworkConfigSpec_LinkedView.NetworkPortGroup == null) || (this.NetworkPortGroup != null && this.NetworkPortGroup.Equals(clusterNetworkConfigSpec_LinkedView.NetworkPortGroup))));
        }

        public override bool Equals(object clusterNetworkConfigSpec_LinkedView)
        {
            return Equals(clusterNetworkConfigSpec_LinkedView as ClusterNetworkConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (NetworkPortGroup).GetHashCode();
        }
    }

    public class ClusterNotAttemptedVmInfo : DynamicData, IEquatable<ClusterNotAttemptedVmInfo>
    {
        public ManagedObjectReference Vm { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public ClusterNotAttemptedVmInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterNotAttemptedVmInfo clusterNotAttemptedVmInfo)
        {
            return (clusterNotAttemptedVmInfo != null && ((this.Vm == null && clusterNotAttemptedVmInfo.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterNotAttemptedVmInfo.Vm))) && ((this.Fault == null && clusterNotAttemptedVmInfo.Fault == null) || (this.Fault != null && this.Fault.Equals(clusterNotAttemptedVmInfo.Fault))) && ((this.LinkedView == null && clusterNotAttemptedVmInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterNotAttemptedVmInfo.LinkedView))));
        }

        public override bool Equals(object clusterNotAttemptedVmInfo)
        {
            return Equals(clusterNotAttemptedVmInfo as ClusterNotAttemptedVmInfo);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterNotAttemptedVmInfo_LinkedView : IEquatable<ClusterNotAttemptedVmInfo_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ClusterNotAttemptedVmInfo_LinkedView clusterNotAttemptedVmInfo_LinkedView)
        {
            return (clusterNotAttemptedVmInfo_LinkedView != null && ((this.Vm == null && clusterNotAttemptedVmInfo_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterNotAttemptedVmInfo_LinkedView.Vm))));
        }

        public override bool Equals(object clusterNotAttemptedVmInfo_LinkedView)
        {
            return Equals(clusterNotAttemptedVmInfo_LinkedView as ClusterNotAttemptedVmInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterOrchestrationInfo : DynamicData, IEquatable<ClusterOrchestrationInfo>
    {
        public ClusterVmReadiness DefaultVmReadiness { get; set; }

        public bool Equals(ClusterOrchestrationInfo clusterOrchestrationInfo)
        {
            return (clusterOrchestrationInfo != null && ((this.DefaultVmReadiness == null && clusterOrchestrationInfo.DefaultVmReadiness == null) || (this.DefaultVmReadiness != null && this.DefaultVmReadiness.Equals(clusterOrchestrationInfo.DefaultVmReadiness))));
        }

        public override bool Equals(object clusterOrchestrationInfo)
        {
            return Equals(clusterOrchestrationInfo as ClusterOrchestrationInfo);
        }

        public override int GetHashCode()
        {
            return (DefaultVmReadiness).GetHashCode();
        }
    }

    public class ClusterOvercommittedEvent : ClusterEvent, IEquatable<ClusterOvercommittedEvent>
    {
        public bool Equals(ClusterOvercommittedEvent clusterOvercommittedEvent)
        {
            return (clusterOvercommittedEvent != null && base.Equals(clusterOvercommittedEvent));
        }

        public override bool Equals(object clusterOvercommittedEvent)
        {
            return Equals(clusterOvercommittedEvent as ClusterOvercommittedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterPowerOnVmResult : DynamicData, IEquatable<ClusterPowerOnVmResult>
    {
        public ClusterAttemptedVmInfo[] Attempted { get; set; }

        public ClusterNotAttemptedVmInfo[] NotAttempted { get; set; }

        public ClusterRecommendation[] Recommendations { get; set; }

        public bool Equals(ClusterPowerOnVmResult clusterPowerOnVmResult)
        {
            return (clusterPowerOnVmResult != null && ((this.Attempted == null && clusterPowerOnVmResult.Attempted == null) || (this.Attempted != null && clusterPowerOnVmResult.Attempted != null && Enumerable.SequenceEqual(this.Attempted, clusterPowerOnVmResult.Attempted))) && ((this.NotAttempted == null && clusterPowerOnVmResult.NotAttempted == null) || (this.NotAttempted != null && clusterPowerOnVmResult.NotAttempted != null && Enumerable.SequenceEqual(this.NotAttempted, clusterPowerOnVmResult.NotAttempted))) && ((this.Recommendations == null && clusterPowerOnVmResult.Recommendations == null) || (this.Recommendations != null && clusterPowerOnVmResult.Recommendations != null && Enumerable.SequenceEqual(this.Recommendations, clusterPowerOnVmResult.Recommendations))));
        }

        public override bool Equals(object clusterPowerOnVmResult)
        {
            return Equals(clusterPowerOnVmResult as ClusterPowerOnVmResult);
        }

        public override int GetHashCode()
        {
            return (Attempted + "_" + NotAttempted + "_" + Recommendations).GetHashCode();
        }
    }

    public class ClusterProactiveDrsConfigInfo : DynamicData, IEquatable<ClusterProactiveDrsConfigInfo>
    {
        public bool? Enabled { get; set; }

        public bool Equals(ClusterProactiveDrsConfigInfo clusterProactiveDrsConfigInfo)
        {
            return (clusterProactiveDrsConfigInfo != null && ((this.Enabled == null && clusterProactiveDrsConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterProactiveDrsConfigInfo.Enabled))));
        }

        public override bool Equals(object clusterProactiveDrsConfigInfo)
        {
            return Equals(clusterProactiveDrsConfigInfo as ClusterProactiveDrsConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled).GetHashCode();
        }
    }

    public class ClusterProfile : Profile, IEquatable<ClusterProfile>
    {
        public new ClusterProfile_LinkedView LinkedView { get; set; }

        public void UpdateClusterProfile(ClusterProfileConfigSpec config)
        {
        }

        public bool Equals(ClusterProfile clusterProfile)
        {
            return (clusterProfile != null && ((this.LinkedView == null && clusterProfile.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterProfile.LinkedView))));
        }

        public override bool Equals(object clusterProfile)
        {
            return Equals(clusterProfile as ClusterProfile);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class ClusterProfile_LinkedView : Profile_LinkedView, IEquatable<ClusterProfile_LinkedView>
    {
        public bool Equals(ClusterProfile_LinkedView clusterProfile_LinkedView)
        {
            return (clusterProfile_LinkedView != null && base.Equals(clusterProfile_LinkedView));
        }

        public override bool Equals(object clusterProfile_LinkedView)
        {
            return Equals(clusterProfile_LinkedView as ClusterProfile_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterProfileCompleteConfigSpec : ClusterProfileConfigSpec, IEquatable<ClusterProfileCompleteConfigSpec>
    {
        public ComplianceProfile ComplyProfile { get; set; }

        public bool Equals(ClusterProfileCompleteConfigSpec clusterProfileCompleteConfigSpec)
        {
            return (clusterProfileCompleteConfigSpec != null && ((this.ComplyProfile == null && clusterProfileCompleteConfigSpec.ComplyProfile == null) || (this.ComplyProfile != null && this.ComplyProfile.Equals(clusterProfileCompleteConfigSpec.ComplyProfile))));
        }

        public override bool Equals(object clusterProfileCompleteConfigSpec)
        {
            return Equals(clusterProfileCompleteConfigSpec as ClusterProfileCompleteConfigSpec);
        }

        public override int GetHashCode()
        {
            return (ComplyProfile).GetHashCode();
        }
    }

    public class ClusterProfileConfigInfo : ProfileConfigInfo, IEquatable<ClusterProfileConfigInfo>
    {
        public ComplianceProfile ComplyProfile { get; set; }

        public bool Equals(ClusterProfileConfigInfo clusterProfileConfigInfo)
        {
            return (clusterProfileConfigInfo != null && ((this.ComplyProfile == null && clusterProfileConfigInfo.ComplyProfile == null) || (this.ComplyProfile != null && this.ComplyProfile.Equals(clusterProfileConfigInfo.ComplyProfile))));
        }

        public override bool Equals(object clusterProfileConfigInfo)
        {
            return Equals(clusterProfileConfigInfo as ClusterProfileConfigInfo);
        }

        public override int GetHashCode()
        {
            return (ComplyProfile).GetHashCode();
        }
    }

    public class ClusterProfileConfigServiceCreateSpec : ClusterProfileConfigSpec, IEquatable<ClusterProfileConfigServiceCreateSpec>
    {
        public string[] ServiceType { get; set; }

        public bool Equals(ClusterProfileConfigServiceCreateSpec clusterProfileConfigServiceCreateSpec)
        {
            return (clusterProfileConfigServiceCreateSpec != null && ((this.ServiceType == null && clusterProfileConfigServiceCreateSpec.ServiceType == null) || (this.ServiceType != null && clusterProfileConfigServiceCreateSpec.ServiceType != null && Enumerable.SequenceEqual(this.ServiceType, clusterProfileConfigServiceCreateSpec.ServiceType))));
        }

        public override bool Equals(object clusterProfileConfigServiceCreateSpec)
        {
            return Equals(clusterProfileConfigServiceCreateSpec as ClusterProfileConfigServiceCreateSpec);
        }

        public override int GetHashCode()
        {
            return (ServiceType).GetHashCode();
        }
    }

    public class ClusterProfileConfigSpec : ClusterProfileCreateSpec, IEquatable<ClusterProfileConfigSpec>
    {
        public bool Equals(ClusterProfileConfigSpec clusterProfileConfigSpec)
        {
            return (clusterProfileConfigSpec != null && base.Equals(clusterProfileConfigSpec));
        }

        public override bool Equals(object clusterProfileConfigSpec)
        {
            return Equals(clusterProfileConfigSpec as ClusterProfileConfigSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterProfileCreateSpec : ProfileCreateSpec, IEquatable<ClusterProfileCreateSpec>
    {
        public bool Equals(ClusterProfileCreateSpec clusterProfileCreateSpec)
        {
            return (clusterProfileCreateSpec != null && base.Equals(clusterProfileCreateSpec));
        }

        public override bool Equals(object clusterProfileCreateSpec)
        {
            return Equals(clusterProfileCreateSpec as ClusterProfileCreateSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterProfileManager : ProfileManager, IEquatable<ClusterProfileManager>
    {
        public new ClusterProfileManager_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterProfileManager clusterProfileManager)
        {
            return (clusterProfileManager != null && ((this.LinkedView == null && clusterProfileManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterProfileManager.LinkedView))));
        }

        public override bool Equals(object clusterProfileManager)
        {
            return Equals(clusterProfileManager as ClusterProfileManager);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class ClusterProfileManager_LinkedView : ProfileManager_LinkedView, IEquatable<ClusterProfileManager_LinkedView>
    {
        public bool Equals(ClusterProfileManager_LinkedView clusterProfileManager_LinkedView)
        {
            return (clusterProfileManager_LinkedView != null && base.Equals(clusterProfileManager_LinkedView));
        }

        public override bool Equals(object clusterProfileManager_LinkedView)
        {
            return Equals(clusterProfileManager_LinkedView as ClusterProfileManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterRecommendation : DynamicData, IEquatable<ClusterRecommendation>
    {
        public string Key { get; set; }

        public string Type { get; set; }

        public DateTime Time { get; set; }

        public int Rating { get; set; }

        public string Reason { get; set; }

        public string ReasonText { get; set; }

        public string WarningText { get; set; }

        public LocalizableMessage WarningDetails { get; set; }

        public string[] Prerequisite { get; set; }

        public ClusterAction[] Action { get; set; }

        public ManagedObjectReference Target { get; set; }

        public bool Equals(ClusterRecommendation clusterRecommendation)
        {
            return (clusterRecommendation != null && this.Key == clusterRecommendation.Key && this.Type == clusterRecommendation.Type && this.Time == clusterRecommendation.Time && this.Rating == clusterRecommendation.Rating && this.Reason == clusterRecommendation.Reason && this.ReasonText == clusterRecommendation.ReasonText && this.WarningText == clusterRecommendation.WarningText && ((this.WarningDetails == null && clusterRecommendation.WarningDetails == null) || (this.WarningDetails != null && this.WarningDetails.Equals(clusterRecommendation.WarningDetails))) && ((this.Prerequisite == null && clusterRecommendation.Prerequisite == null) || (this.Prerequisite != null && clusterRecommendation.Prerequisite != null && Enumerable.SequenceEqual(this.Prerequisite, clusterRecommendation.Prerequisite))) && ((this.Action == null && clusterRecommendation.Action == null) || (this.Action != null && clusterRecommendation.Action != null && Enumerable.SequenceEqual(this.Action, clusterRecommendation.Action))) && ((this.Target == null && clusterRecommendation.Target == null) || (this.Target != null && this.Target.Equals(clusterRecommendation.Target))));
        }

        public override bool Equals(object clusterRecommendation)
        {
            return Equals(clusterRecommendation as ClusterRecommendation);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Type + "_" + Time + "_" + Rating + "_" + Reason + "_" + ReasonText + "_" + WarningText + "_" + WarningDetails + "_" + Prerequisite + "_" + Action + "_" + Target).GetHashCode();
        }
    }

    public class ClusterReconfiguredEvent : ClusterEvent, IEquatable<ClusterReconfiguredEvent>
    {
        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(ClusterReconfiguredEvent clusterReconfiguredEvent)
        {
            return (clusterReconfiguredEvent != null && ((this.ConfigChanges == null && clusterReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(clusterReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object clusterReconfiguredEvent)
        {
            return Equals(clusterReconfiguredEvent as ClusterReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigChanges).GetHashCode();
        }
    }

    public class ClusterResourceUsageSummary : DynamicData, IEquatable<ClusterResourceUsageSummary>
    {
        public int CpuUsedMHz { get; set; }

        public int CpuCapacityMHz { get; set; }

        public int MemUsedMB { get; set; }

        public int MemCapacityMB { get; set; }

        public long? PMemAvailableMB { get; set; }

        public long? PMemCapacityMB { get; set; }

        public long StorageUsedMB { get; set; }

        public long StorageCapacityMB { get; set; }

        public bool Equals(ClusterResourceUsageSummary clusterResourceUsageSummary)
        {
            return (clusterResourceUsageSummary != null && this.CpuUsedMHz == clusterResourceUsageSummary.CpuUsedMHz && this.CpuCapacityMHz == clusterResourceUsageSummary.CpuCapacityMHz && this.MemUsedMB == clusterResourceUsageSummary.MemUsedMB && this.MemCapacityMB == clusterResourceUsageSummary.MemCapacityMB && ((this.PMemAvailableMB == null && clusterResourceUsageSummary.PMemAvailableMB == null) || (this.PMemAvailableMB != null && this.PMemAvailableMB.Equals(clusterResourceUsageSummary.PMemAvailableMB))) && ((this.PMemCapacityMB == null && clusterResourceUsageSummary.PMemCapacityMB == null) || (this.PMemCapacityMB != null && this.PMemCapacityMB.Equals(clusterResourceUsageSummary.PMemCapacityMB))) && this.StorageUsedMB == clusterResourceUsageSummary.StorageUsedMB && this.StorageCapacityMB == clusterResourceUsageSummary.StorageCapacityMB);
        }

        public override bool Equals(object clusterResourceUsageSummary)
        {
            return Equals(clusterResourceUsageSummary as ClusterResourceUsageSummary);
        }

        public override int GetHashCode()
        {
            return (CpuUsedMHz + "_" + CpuCapacityMHz + "_" + MemUsedMB + "_" + MemCapacityMB + "_" + PMemAvailableMB + "_" + PMemCapacityMB + "_" + StorageUsedMB + "_" + StorageCapacityMB).GetHashCode();
        }
    }

    public class ClusterRuleInfo : DynamicData, IEquatable<ClusterRuleInfo>
    {
        public int? Key { get; set; }

        public ManagedEntityStatus? Status { get; set; }

        public bool? Enabled { get; set; }

        public string Name { get; set; }

        public bool? Mandatory { get; set; }

        public bool? UserCreated { get; set; }

        public bool? InCompliance { get; set; }

        public string RuleUuid { get; set; }

        public bool Equals(ClusterRuleInfo clusterRuleInfo)
        {
            return (clusterRuleInfo != null && ((this.Key == null && clusterRuleInfo.Key == null) || (this.Key != null && this.Key.Equals(clusterRuleInfo.Key))) && ((this.Status == null && clusterRuleInfo.Status == null) || (this.Status != null && this.Status.Equals(clusterRuleInfo.Status))) && ((this.Enabled == null && clusterRuleInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterRuleInfo.Enabled))) && this.Name == clusterRuleInfo.Name && ((this.Mandatory == null && clusterRuleInfo.Mandatory == null) || (this.Mandatory != null && this.Mandatory.Equals(clusterRuleInfo.Mandatory))) && ((this.UserCreated == null && clusterRuleInfo.UserCreated == null) || (this.UserCreated != null && this.UserCreated.Equals(clusterRuleInfo.UserCreated))) && ((this.InCompliance == null && clusterRuleInfo.InCompliance == null) || (this.InCompliance != null && this.InCompliance.Equals(clusterRuleInfo.InCompliance))) && this.RuleUuid == clusterRuleInfo.RuleUuid);
        }

        public override bool Equals(object clusterRuleInfo)
        {
            return Equals(clusterRuleInfo as ClusterRuleInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Status + "_" + Enabled + "_" + Name + "_" + Mandatory + "_" + UserCreated + "_" + InCompliance + "_" + RuleUuid).GetHashCode();
        }
    }

    public class ClusterRuleSpec : ArrayUpdateSpec, IEquatable<ClusterRuleSpec>
    {
        public ClusterRuleInfo Info { get; set; }

        public bool Equals(ClusterRuleSpec clusterRuleSpec)
        {
            return (clusterRuleSpec != null && ((this.Info == null && clusterRuleSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterRuleSpec.Info))));
        }

        public override bool Equals(object clusterRuleSpec)
        {
            return Equals(clusterRuleSpec as ClusterRuleSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterSlotPolicy : DynamicData, IEquatable<ClusterSlotPolicy>
    {
        public bool Equals(ClusterSlotPolicy clusterSlotPolicy)
        {
            return (clusterSlotPolicy != null && base.Equals(clusterSlotPolicy));
        }

        public override bool Equals(object clusterSlotPolicy)
        {
            return Equals(clusterSlotPolicy as ClusterSlotPolicy);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ClusterStatusChangedEvent : ClusterEvent, IEquatable<ClusterStatusChangedEvent>
    {
        public string OldStatus { get; set; }

        public string NewStatus { get; set; }

        public bool Equals(ClusterStatusChangedEvent clusterStatusChangedEvent)
        {
            return (clusterStatusChangedEvent != null && this.OldStatus == clusterStatusChangedEvent.OldStatus && this.NewStatus == clusterStatusChangedEvent.NewStatus);
        }

        public override bool Equals(object clusterStatusChangedEvent)
        {
            return Equals(clusterStatusChangedEvent as ClusterStatusChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldStatus + "_" + NewStatus).GetHashCode();
        }
    }

    public class ClusterUsageSummary : DynamicData, IEquatable<ClusterUsageSummary>
    {
        public int TotalCpuCapacityMhz { get; set; }

        public int TotalMemCapacityMB { get; set; }

        public int CpuReservationMhz { get; set; }

        public int MemReservationMB { get; set; }

        public int? PoweredOffCpuReservationMhz { get; set; }

        public int? PoweredOffMemReservationMB { get; set; }

        public int CpuDemandMhz { get; set; }

        public int MemDemandMB { get; set; }

        public long StatsGenNumber { get; set; }

        public int CpuEntitledMhz { get; set; }

        public int MemEntitledMB { get; set; }

        public int PoweredOffVmCount { get; set; }

        public int TotalVmCount { get; set; }

        public bool Equals(ClusterUsageSummary clusterUsageSummary)
        {
            return (clusterUsageSummary != null && this.TotalCpuCapacityMhz == clusterUsageSummary.TotalCpuCapacityMhz && this.TotalMemCapacityMB == clusterUsageSummary.TotalMemCapacityMB && this.CpuReservationMhz == clusterUsageSummary.CpuReservationMhz && this.MemReservationMB == clusterUsageSummary.MemReservationMB && ((this.PoweredOffCpuReservationMhz == null && clusterUsageSummary.PoweredOffCpuReservationMhz == null) || (this.PoweredOffCpuReservationMhz != null && this.PoweredOffCpuReservationMhz.Equals(clusterUsageSummary.PoweredOffCpuReservationMhz))) && ((this.PoweredOffMemReservationMB == null && clusterUsageSummary.PoweredOffMemReservationMB == null) || (this.PoweredOffMemReservationMB != null && this.PoweredOffMemReservationMB.Equals(clusterUsageSummary.PoweredOffMemReservationMB))) && this.CpuDemandMhz == clusterUsageSummary.CpuDemandMhz && this.MemDemandMB == clusterUsageSummary.MemDemandMB && this.StatsGenNumber == clusterUsageSummary.StatsGenNumber && this.CpuEntitledMhz == clusterUsageSummary.CpuEntitledMhz && this.MemEntitledMB == clusterUsageSummary.MemEntitledMB && this.PoweredOffVmCount == clusterUsageSummary.PoweredOffVmCount && this.TotalVmCount == clusterUsageSummary.TotalVmCount);
        }

        public override bool Equals(object clusterUsageSummary)
        {
            return Equals(clusterUsageSummary as ClusterUsageSummary);
        }

        public override int GetHashCode()
        {
            return (TotalCpuCapacityMhz + "_" + TotalMemCapacityMB + "_" + CpuReservationMhz + "_" + MemReservationMB + "_" + PoweredOffCpuReservationMhz + "_" + PoweredOffMemReservationMB + "_" + CpuDemandMhz + "_" + MemDemandMB + "_" + StatsGenNumber + "_" + CpuEntitledMhz + "_" + MemEntitledMB + "_" + PoweredOffVmCount + "_" + TotalVmCount).GetHashCode();
        }
    }

    public class ClusterVmComponentProtectionSettings : DynamicData, IEquatable<ClusterVmComponentProtectionSettings>
    {
        public string VmStorageProtectionForAPD { get; set; }

        public bool? EnableAPDTimeoutForHosts { get; set; }

        public int? VmTerminateDelayForAPDSec { get; set; }

        public string VmReactionOnAPDCleared { get; set; }

        public string VmStorageProtectionForPDL { get; set; }

        public bool Equals(ClusterVmComponentProtectionSettings clusterVmComponentProtectionSettings)
        {
            return (clusterVmComponentProtectionSettings != null && this.VmStorageProtectionForAPD == clusterVmComponentProtectionSettings.VmStorageProtectionForAPD && ((this.EnableAPDTimeoutForHosts == null && clusterVmComponentProtectionSettings.EnableAPDTimeoutForHosts == null) || (this.EnableAPDTimeoutForHosts != null && this.EnableAPDTimeoutForHosts.Equals(clusterVmComponentProtectionSettings.EnableAPDTimeoutForHosts))) && ((this.VmTerminateDelayForAPDSec == null && clusterVmComponentProtectionSettings.VmTerminateDelayForAPDSec == null) || (this.VmTerminateDelayForAPDSec != null && this.VmTerminateDelayForAPDSec.Equals(clusterVmComponentProtectionSettings.VmTerminateDelayForAPDSec))) && this.VmReactionOnAPDCleared == clusterVmComponentProtectionSettings.VmReactionOnAPDCleared && this.VmStorageProtectionForPDL == clusterVmComponentProtectionSettings.VmStorageProtectionForPDL);
        }

        public override bool Equals(object clusterVmComponentProtectionSettings)
        {
            return Equals(clusterVmComponentProtectionSettings as ClusterVmComponentProtectionSettings);
        }

        public override int GetHashCode()
        {
            return (VmStorageProtectionForAPD + "_" + EnableAPDTimeoutForHosts + "_" + VmTerminateDelayForAPDSec + "_" + VmReactionOnAPDCleared + "_" + VmStorageProtectionForPDL).GetHashCode();
        }
    }

    public class ClusterVmGroup : ClusterGroupInfo, IEquatable<ClusterVmGroup>
    {
        public ManagedObjectReference[] Vm { get; set; }

        public ClusterVmGroup_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterVmGroup clusterVmGroup)
        {
            return (clusterVmGroup != null && ((this.Vm == null && clusterVmGroup.Vm == null) || (this.Vm != null && clusterVmGroup.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterVmGroup.Vm))) && ((this.LinkedView == null && clusterVmGroup.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterVmGroup.LinkedView))));
        }

        public override bool Equals(object clusterVmGroup)
        {
            return Equals(clusterVmGroup as ClusterVmGroup);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterVmGroup_LinkedView : IEquatable<ClusterVmGroup_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public bool Equals(ClusterVmGroup_LinkedView clusterVmGroup_LinkedView)
        {
            return (clusterVmGroup_LinkedView != null && ((this.Vm == null && clusterVmGroup_LinkedView.Vm == null) || (this.Vm != null && clusterVmGroup_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, clusterVmGroup_LinkedView.Vm))));
        }

        public override bool Equals(object clusterVmGroup_LinkedView)
        {
            return Equals(clusterVmGroup_LinkedView as ClusterVmGroup_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterVmHostRuleInfo : ClusterRuleInfo, IEquatable<ClusterVmHostRuleInfo>
    {
        public string VmGroupName { get; set; }

        public string AffineHostGroupName { get; set; }

        public string AntiAffineHostGroupName { get; set; }

        public bool Equals(ClusterVmHostRuleInfo clusterVmHostRuleInfo)
        {
            return (clusterVmHostRuleInfo != null && this.VmGroupName == clusterVmHostRuleInfo.VmGroupName && this.AffineHostGroupName == clusterVmHostRuleInfo.AffineHostGroupName && this.AntiAffineHostGroupName == clusterVmHostRuleInfo.AntiAffineHostGroupName);
        }

        public override bool Equals(object clusterVmHostRuleInfo)
        {
            return Equals(clusterVmHostRuleInfo as ClusterVmHostRuleInfo);
        }

        public override int GetHashCode()
        {
            return (VmGroupName + "_" + AffineHostGroupName + "_" + AntiAffineHostGroupName).GetHashCode();
        }
    }

    public class ClusterVmOrchestrationInfo : DynamicData, IEquatable<ClusterVmOrchestrationInfo>
    {
        public ManagedObjectReference Vm { get; set; }

        public ClusterVmReadiness VmReadiness { get; set; }

        public ClusterVmOrchestrationInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ClusterVmOrchestrationInfo clusterVmOrchestrationInfo)
        {
            return (clusterVmOrchestrationInfo != null && ((this.Vm == null && clusterVmOrchestrationInfo.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterVmOrchestrationInfo.Vm))) && ((this.VmReadiness == null && clusterVmOrchestrationInfo.VmReadiness == null) || (this.VmReadiness != null && this.VmReadiness.Equals(clusterVmOrchestrationInfo.VmReadiness))) && ((this.LinkedView == null && clusterVmOrchestrationInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(clusterVmOrchestrationInfo.LinkedView))));
        }

        public override bool Equals(object clusterVmOrchestrationInfo)
        {
            return Equals(clusterVmOrchestrationInfo as ClusterVmOrchestrationInfo);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmReadiness + "_" + LinkedView).GetHashCode();
        }
    }

    public class ClusterVmOrchestrationInfo_LinkedView : IEquatable<ClusterVmOrchestrationInfo_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ClusterVmOrchestrationInfo_LinkedView clusterVmOrchestrationInfo_LinkedView)
        {
            return (clusterVmOrchestrationInfo_LinkedView != null && ((this.Vm == null && clusterVmOrchestrationInfo_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(clusterVmOrchestrationInfo_LinkedView.Vm))));
        }

        public override bool Equals(object clusterVmOrchestrationInfo_LinkedView)
        {
            return Equals(clusterVmOrchestrationInfo_LinkedView as ClusterVmOrchestrationInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ClusterVmOrchestrationSpec : ArrayUpdateSpec, IEquatable<ClusterVmOrchestrationSpec>
    {
        public ClusterVmOrchestrationInfo Info { get; set; }

        public bool Equals(ClusterVmOrchestrationSpec clusterVmOrchestrationSpec)
        {
            return (clusterVmOrchestrationSpec != null && ((this.Info == null && clusterVmOrchestrationSpec.Info == null) || (this.Info != null && this.Info.Equals(clusterVmOrchestrationSpec.Info))));
        }

        public override bool Equals(object clusterVmOrchestrationSpec)
        {
            return Equals(clusterVmOrchestrationSpec as ClusterVmOrchestrationSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ClusterVmReadiness : DynamicData, IEquatable<ClusterVmReadiness>
    {
        public string ReadyCondition { get; set; }

        public int? PostReadyDelay { get; set; }

        public bool Equals(ClusterVmReadiness clusterVmReadiness)
        {
            return (clusterVmReadiness != null && this.ReadyCondition == clusterVmReadiness.ReadyCondition && ((this.PostReadyDelay == null && clusterVmReadiness.PostReadyDelay == null) || (this.PostReadyDelay != null && this.PostReadyDelay.Equals(clusterVmReadiness.PostReadyDelay))));
        }

        public override bool Equals(object clusterVmReadiness)
        {
            return Equals(clusterVmReadiness as ClusterVmReadiness);
        }

        public override int GetHashCode()
        {
            return (ReadyCondition + "_" + PostReadyDelay).GetHashCode();
        }
    }

    public class ClusterVmToolsMonitoringSettings : DynamicData, IEquatable<ClusterVmToolsMonitoringSettings>
    {
        public bool? Enabled { get; set; }

        public string VmMonitoring { get; set; }

        public bool? ClusterSettings { get; set; }

        public int? FailureInterval { get; set; }

        public int? MinUpTime { get; set; }

        public int? MaxFailures { get; set; }

        public int? MaxFailureWindow { get; set; }

        public bool Equals(ClusterVmToolsMonitoringSettings clusterVmToolsMonitoringSettings)
        {
            return (clusterVmToolsMonitoringSettings != null && ((this.Enabled == null && clusterVmToolsMonitoringSettings.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(clusterVmToolsMonitoringSettings.Enabled))) && this.VmMonitoring == clusterVmToolsMonitoringSettings.VmMonitoring && ((this.ClusterSettings == null && clusterVmToolsMonitoringSettings.ClusterSettings == null) || (this.ClusterSettings != null && this.ClusterSettings.Equals(clusterVmToolsMonitoringSettings.ClusterSettings))) && ((this.FailureInterval == null && clusterVmToolsMonitoringSettings.FailureInterval == null) || (this.FailureInterval != null && this.FailureInterval.Equals(clusterVmToolsMonitoringSettings.FailureInterval))) && ((this.MinUpTime == null && clusterVmToolsMonitoringSettings.MinUpTime == null) || (this.MinUpTime != null && this.MinUpTime.Equals(clusterVmToolsMonitoringSettings.MinUpTime))) && ((this.MaxFailures == null && clusterVmToolsMonitoringSettings.MaxFailures == null) || (this.MaxFailures != null && this.MaxFailures.Equals(clusterVmToolsMonitoringSettings.MaxFailures))) && ((this.MaxFailureWindow == null && clusterVmToolsMonitoringSettings.MaxFailureWindow == null) || (this.MaxFailureWindow != null && this.MaxFailureWindow.Equals(clusterVmToolsMonitoringSettings.MaxFailureWindow))));
        }

        public override bool Equals(object clusterVmToolsMonitoringSettings)
        {
            return Equals(clusterVmToolsMonitoringSettings as ClusterVmToolsMonitoringSettings);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + VmMonitoring + "_" + ClusterSettings + "_" + FailureInterval + "_" + MinUpTime + "_" + MaxFailures + "_" + MaxFailureWindow).GetHashCode();
        }
    }

    public class CollectorAddressUnset : DvsFault, IEquatable<CollectorAddressUnset>
    {
        public bool Equals(CollectorAddressUnset collectorAddressUnset)
        {
            return (collectorAddressUnset != null && base.Equals(collectorAddressUnset));
        }

        public override bool Equals(object collectorAddressUnset)
        {
            return Equals(collectorAddressUnset as CollectorAddressUnset);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ComplianceFailure : DynamicData, IEquatable<ComplianceFailure>
    {
        public string FailureType { get; set; }

        public LocalizableMessage Message { get; set; }

        public string ExpressionName { get; set; }

        public ComplianceFailureComplianceFailureValues[] FailureValues { get; set; }

        public bool Equals(ComplianceFailure complianceFailure)
        {
            return (complianceFailure != null && this.FailureType == complianceFailure.FailureType && ((this.Message == null && complianceFailure.Message == null) || (this.Message != null && this.Message.Equals(complianceFailure.Message))) && this.ExpressionName == complianceFailure.ExpressionName && ((this.FailureValues == null && complianceFailure.FailureValues == null) || (this.FailureValues != null && complianceFailure.FailureValues != null && Enumerable.SequenceEqual(this.FailureValues, complianceFailure.FailureValues))));
        }

        public override bool Equals(object complianceFailure)
        {
            return Equals(complianceFailure as ComplianceFailure);
        }

        public override int GetHashCode()
        {
            return (FailureType + "_" + Message + "_" + ExpressionName + "_" + FailureValues).GetHashCode();
        }
    }

    public class ComplianceFailureComplianceFailureValues : DynamicData, IEquatable<ComplianceFailureComplianceFailureValues>
    {
        public string ComparisonIdentifier { get; set; }

        public string ProfileInstance { get; set; }

        public object HostValue { get; set; }

        public object ProfileValue { get; set; }

        public bool Equals(ComplianceFailureComplianceFailureValues complianceFailureComplianceFailureValues)
        {
            return (complianceFailureComplianceFailureValues != null && this.ComparisonIdentifier == complianceFailureComplianceFailureValues.ComparisonIdentifier && this.ProfileInstance == complianceFailureComplianceFailureValues.ProfileInstance && ((this.HostValue == null && complianceFailureComplianceFailureValues.HostValue == null) || (this.HostValue != null && this.HostValue.Equals(complianceFailureComplianceFailureValues.HostValue))) && ((this.ProfileValue == null && complianceFailureComplianceFailureValues.ProfileValue == null) || (this.ProfileValue != null && this.ProfileValue.Equals(complianceFailureComplianceFailureValues.ProfileValue))));
        }

        public override bool Equals(object complianceFailureComplianceFailureValues)
        {
            return Equals(complianceFailureComplianceFailureValues as ComplianceFailureComplianceFailureValues);
        }

        public override int GetHashCode()
        {
            return (ComparisonIdentifier + "_" + ProfileInstance + "_" + HostValue + "_" + ProfileValue).GetHashCode();
        }
    }

    public class ComplianceLocator : DynamicData, IEquatable<ComplianceLocator>
    {
        public string ExpressionName { get; set; }

        public ProfilePropertyPath ApplyPath { get; set; }

        public bool Equals(ComplianceLocator complianceLocator)
        {
            return (complianceLocator != null && this.ExpressionName == complianceLocator.ExpressionName && ((this.ApplyPath == null && complianceLocator.ApplyPath == null) || (this.ApplyPath != null && this.ApplyPath.Equals(complianceLocator.ApplyPath))));
        }

        public override bool Equals(object complianceLocator)
        {
            return Equals(complianceLocator as ComplianceLocator);
        }

        public override int GetHashCode()
        {
            return (ExpressionName + "_" + ApplyPath).GetHashCode();
        }
    }

    public class ComplianceProfile : DynamicData, IEquatable<ComplianceProfile>
    {
        public ProfileExpression[] Expression { get; set; }

        public string RootExpression { get; set; }

        public bool Equals(ComplianceProfile complianceProfile)
        {
            return (complianceProfile != null && ((this.Expression == null && complianceProfile.Expression == null) || (this.Expression != null && complianceProfile.Expression != null && Enumerable.SequenceEqual(this.Expression, complianceProfile.Expression))) && this.RootExpression == complianceProfile.RootExpression);
        }

        public override bool Equals(object complianceProfile)
        {
            return Equals(complianceProfile as ComplianceProfile);
        }

        public override int GetHashCode()
        {
            return (Expression + "_" + RootExpression).GetHashCode();
        }
    }

    public class ComplianceResult : DynamicData, IEquatable<ComplianceResult>
    {
        public ManagedObjectReference Profile { get; set; }

        public string ComplianceStatus { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public DateTime? CheckTime { get; set; }

        public ComplianceFailure[] Failure { get; set; }

        public ComplianceResult_LinkedView LinkedView { get; set; }

        public bool Equals(ComplianceResult complianceResult)
        {
            return (complianceResult != null && ((this.Profile == null && complianceResult.Profile == null) || (this.Profile != null && this.Profile.Equals(complianceResult.Profile))) && this.ComplianceStatus == complianceResult.ComplianceStatus && ((this.Entity == null && complianceResult.Entity == null) || (this.Entity != null && this.Entity.Equals(complianceResult.Entity))) && ((this.CheckTime == null && complianceResult.CheckTime == null) || (this.CheckTime != null && this.CheckTime.Equals(complianceResult.CheckTime))) && ((this.Failure == null && complianceResult.Failure == null) || (this.Failure != null && complianceResult.Failure != null && Enumerable.SequenceEqual(this.Failure, complianceResult.Failure))) && ((this.LinkedView == null && complianceResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(complianceResult.LinkedView))));
        }

        public override bool Equals(object complianceResult)
        {
            return Equals(complianceResult as ComplianceResult);
        }

        public override int GetHashCode()
        {
            return (Profile + "_" + ComplianceStatus + "_" + Entity + "_" + CheckTime + "_" + Failure + "_" + LinkedView).GetHashCode();
        }
    }

    public class ComplianceResult_LinkedView : IEquatable<ComplianceResult_LinkedView>
    {
        public Profile Profile { get; set; }

        public ManagedEntity Entity { get; set; }

        public bool Equals(ComplianceResult_LinkedView complianceResult_LinkedView)
        {
            return (complianceResult_LinkedView != null && ((this.Profile == null && complianceResult_LinkedView.Profile == null) || (this.Profile != null && this.Profile.Equals(complianceResult_LinkedView.Profile))) && ((this.Entity == null && complianceResult_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(complianceResult_LinkedView.Entity))));
        }

        public override bool Equals(object complianceResult_LinkedView)
        {
            return Equals(complianceResult_LinkedView as ComplianceResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Profile + "_" + Entity).GetHashCode();
        }
    }

    public class CompositePolicyOption : PolicyOption, IEquatable<CompositePolicyOption>
    {
        public PolicyOption[] Option { get; set; }

        public bool Equals(CompositePolicyOption compositePolicyOption)
        {
            return (compositePolicyOption != null && ((this.Option == null && compositePolicyOption.Option == null) || (this.Option != null && compositePolicyOption.Option != null && Enumerable.SequenceEqual(this.Option, compositePolicyOption.Option))));
        }

        public override bool Equals(object compositePolicyOption)
        {
            return Equals(compositePolicyOption as CompositePolicyOption);
        }

        public override int GetHashCode()
        {
            return (Option).GetHashCode();
        }
    }

    public class ComputeResource : ManagedEntity, IEquatable<ComputeResource>
    {
        public ManagedObjectReference ResourcePool { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public ManagedObjectReference[] Datastore { get; set; }

        public ManagedObjectReference[] Network { get; set; }

        public ComputeResourceSummary Summary { get; set; }

        public ManagedObjectReference EnvironmentBrowser { get; set; }

        public ComputeResourceConfigInfo ConfigurationEx { get; set; }

        public new ComputeResource_LinkedView LinkedView { get; set; }

        public ManagedObjectReference ReconfigureComputeResource_Task(ComputeResourceConfigSpec spec, bool modify)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureComputeResource(ComputeResourceConfigSpec spec, bool modify)
        {
        }

        public bool Equals(ComputeResource computeResource)
        {
            return (computeResource != null && ((this.ResourcePool == null && computeResource.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(computeResource.ResourcePool))) && ((this.Host == null && computeResource.Host == null) || (this.Host != null && computeResource.Host != null && Enumerable.SequenceEqual(this.Host, computeResource.Host))) && ((this.Datastore == null && computeResource.Datastore == null) || (this.Datastore != null && computeResource.Datastore != null && Enumerable.SequenceEqual(this.Datastore, computeResource.Datastore))) && ((this.Network == null && computeResource.Network == null) || (this.Network != null && computeResource.Network != null && Enumerable.SequenceEqual(this.Network, computeResource.Network))) && ((this.Summary == null && computeResource.Summary == null) || (this.Summary != null && this.Summary.Equals(computeResource.Summary))) && ((this.EnvironmentBrowser == null && computeResource.EnvironmentBrowser == null) || (this.EnvironmentBrowser != null && this.EnvironmentBrowser.Equals(computeResource.EnvironmentBrowser))) && ((this.ConfigurationEx == null && computeResource.ConfigurationEx == null) || (this.ConfigurationEx != null && this.ConfigurationEx.Equals(computeResource.ConfigurationEx))) && ((this.LinkedView == null && computeResource.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(computeResource.LinkedView))));
        }

        public override bool Equals(object computeResource)
        {
            return Equals(computeResource as ComputeResource);
        }

        public override int GetHashCode()
        {
            return (ResourcePool + "_" + Host + "_" + Datastore + "_" + Network + "_" + Summary + "_" + EnvironmentBrowser + "_" + ConfigurationEx + "_" + LinkedView).GetHashCode();
        }
    }

    public class ComputeResource_LinkedView : ManagedEntity_LinkedView, IEquatable<ComputeResource_LinkedView>
    {
        public ResourcePool ResourcePool { get; set; }

        public HostSystem[] Host { get; set; }

        public Datastore[] Datastore { get; set; }

        public Network[] Network { get; set; }

        public EnvironmentBrowser EnvironmentBrowser { get; set; }

        public bool Equals(ComputeResource_LinkedView computeResource_LinkedView)
        {
            return (computeResource_LinkedView != null && ((this.ResourcePool == null && computeResource_LinkedView.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(computeResource_LinkedView.ResourcePool))) && ((this.Host == null && computeResource_LinkedView.Host == null) || (this.Host != null && computeResource_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, computeResource_LinkedView.Host))) && ((this.Datastore == null && computeResource_LinkedView.Datastore == null) || (this.Datastore != null && computeResource_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, computeResource_LinkedView.Datastore))) && ((this.Network == null && computeResource_LinkedView.Network == null) || (this.Network != null && computeResource_LinkedView.Network != null && Enumerable.SequenceEqual(this.Network, computeResource_LinkedView.Network))) && ((this.EnvironmentBrowser == null && computeResource_LinkedView.EnvironmentBrowser == null) || (this.EnvironmentBrowser != null && this.EnvironmentBrowser.Equals(computeResource_LinkedView.EnvironmentBrowser))));
        }

        public override bool Equals(object computeResource_LinkedView)
        {
            return Equals(computeResource_LinkedView as ComputeResource_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ResourcePool + "_" + Host + "_" + Datastore + "_" + Network + "_" + EnvironmentBrowser).GetHashCode();
        }
    }

    public class ComputeResourceConfigInfo : DynamicData, IEquatable<ComputeResourceConfigInfo>
    {
        public string VmSwapPlacement { get; set; }

        public bool? SpbmEnabled { get; set; }

        public string DefaultHardwareVersionKey { get; set; }

        public bool Equals(ComputeResourceConfigInfo computeResourceConfigInfo)
        {
            return (computeResourceConfigInfo != null && this.VmSwapPlacement == computeResourceConfigInfo.VmSwapPlacement && ((this.SpbmEnabled == null && computeResourceConfigInfo.SpbmEnabled == null) || (this.SpbmEnabled != null && this.SpbmEnabled.Equals(computeResourceConfigInfo.SpbmEnabled))) && this.DefaultHardwareVersionKey == computeResourceConfigInfo.DefaultHardwareVersionKey);
        }

        public override bool Equals(object computeResourceConfigInfo)
        {
            return Equals(computeResourceConfigInfo as ComputeResourceConfigInfo);
        }

        public override int GetHashCode()
        {
            return (VmSwapPlacement + "_" + SpbmEnabled + "_" + DefaultHardwareVersionKey).GetHashCode();
        }
    }

    public class ComputeResourceConfigSpec : DynamicData, IEquatable<ComputeResourceConfigSpec>
    {
        public string VmSwapPlacement { get; set; }

        public bool? SpbmEnabled { get; set; }

        public string DefaultHardwareVersionKey { get; set; }

        public bool Equals(ComputeResourceConfigSpec computeResourceConfigSpec)
        {
            return (computeResourceConfigSpec != null && this.VmSwapPlacement == computeResourceConfigSpec.VmSwapPlacement && ((this.SpbmEnabled == null && computeResourceConfigSpec.SpbmEnabled == null) || (this.SpbmEnabled != null && this.SpbmEnabled.Equals(computeResourceConfigSpec.SpbmEnabled))) && this.DefaultHardwareVersionKey == computeResourceConfigSpec.DefaultHardwareVersionKey);
        }

        public override bool Equals(object computeResourceConfigSpec)
        {
            return Equals(computeResourceConfigSpec as ComputeResourceConfigSpec);
        }

        public override int GetHashCode()
        {
            return (VmSwapPlacement + "_" + SpbmEnabled + "_" + DefaultHardwareVersionKey).GetHashCode();
        }
    }

    public class ComputeResourceEventArgument : EntityEventArgument, IEquatable<ComputeResourceEventArgument>
    {
        public ManagedObjectReference ComputeResource { get; set; }

        public ComputeResourceEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(ComputeResourceEventArgument computeResourceEventArgument)
        {
            return (computeResourceEventArgument != null && ((this.ComputeResource == null && computeResourceEventArgument.ComputeResource == null) || (this.ComputeResource != null && this.ComputeResource.Equals(computeResourceEventArgument.ComputeResource))) && ((this.LinkedView == null && computeResourceEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(computeResourceEventArgument.LinkedView))));
        }

        public override bool Equals(object computeResourceEventArgument)
        {
            return Equals(computeResourceEventArgument as ComputeResourceEventArgument);
        }

        public override int GetHashCode()
        {
            return (ComputeResource + "_" + LinkedView).GetHashCode();
        }
    }

    public class ComputeResourceEventArgument_LinkedView : IEquatable<ComputeResourceEventArgument_LinkedView>
    {
        public ComputeResource ComputeResource { get; set; }

        public bool Equals(ComputeResourceEventArgument_LinkedView computeResourceEventArgument_LinkedView)
        {
            return (computeResourceEventArgument_LinkedView != null && ((this.ComputeResource == null && computeResourceEventArgument_LinkedView.ComputeResource == null) || (this.ComputeResource != null && this.ComputeResource.Equals(computeResourceEventArgument_LinkedView.ComputeResource))));
        }

        public override bool Equals(object computeResourceEventArgument_LinkedView)
        {
            return Equals(computeResourceEventArgument_LinkedView as ComputeResourceEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ComputeResource).GetHashCode();
        }
    }

    public class ComputeResourceHostSPBMLicenseInfo : DynamicData, IEquatable<ComputeResourceHostSPBMLicenseInfo>
    {
        public ManagedObjectReference Host { get; set; }

        public ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState LicenseState { get; set; }

        public ComputeResourceHostSPBMLicenseInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ComputeResourceHostSPBMLicenseInfo computeResourceHostSPBMLicenseInfo)
        {
            return (computeResourceHostSPBMLicenseInfo != null && ((this.Host == null && computeResourceHostSPBMLicenseInfo.Host == null) || (this.Host != null && this.Host.Equals(computeResourceHostSPBMLicenseInfo.Host))) && this.LicenseState == computeResourceHostSPBMLicenseInfo.LicenseState && ((this.LinkedView == null && computeResourceHostSPBMLicenseInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(computeResourceHostSPBMLicenseInfo.LinkedView))));
        }

        public override bool Equals(object computeResourceHostSPBMLicenseInfo)
        {
            return Equals(computeResourceHostSPBMLicenseInfo as ComputeResourceHostSPBMLicenseInfo);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LicenseState + "_" + LinkedView).GetHashCode();
        }
    }

    public class ComputeResourceHostSPBMLicenseInfo_LinkedView : IEquatable<ComputeResourceHostSPBMLicenseInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ComputeResourceHostSPBMLicenseInfo_LinkedView computeResourceHostSPBMLicenseInfo_LinkedView)
        {
            return (computeResourceHostSPBMLicenseInfo_LinkedView != null && ((this.Host == null && computeResourceHostSPBMLicenseInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(computeResourceHostSPBMLicenseInfo_LinkedView.Host))));
        }

        public override bool Equals(object computeResourceHostSPBMLicenseInfo_LinkedView)
        {
            return Equals(computeResourceHostSPBMLicenseInfo_LinkedView as ComputeResourceHostSPBMLicenseInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ComputeResourceSummary : DynamicData, IEquatable<ComputeResourceSummary>
    {
        public int TotalCpu { get; set; }

        public long TotalMemory { get; set; }

        public short NumCpuCores { get; set; }

        public short NumCpuThreads { get; set; }

        public int EffectiveCpu { get; set; }

        public long EffectiveMemory { get; set; }

        public int NumHosts { get; set; }

        public int NumEffectiveHosts { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public bool Equals(ComputeResourceSummary computeResourceSummary)
        {
            return (computeResourceSummary != null && this.TotalCpu == computeResourceSummary.TotalCpu && this.TotalMemory == computeResourceSummary.TotalMemory && this.NumCpuCores == computeResourceSummary.NumCpuCores && this.NumCpuThreads == computeResourceSummary.NumCpuThreads && this.EffectiveCpu == computeResourceSummary.EffectiveCpu && this.EffectiveMemory == computeResourceSummary.EffectiveMemory && this.NumHosts == computeResourceSummary.NumHosts && this.NumEffectiveHosts == computeResourceSummary.NumEffectiveHosts && this.OverallStatus == computeResourceSummary.OverallStatus);
        }

        public override bool Equals(object computeResourceSummary)
        {
            return Equals(computeResourceSummary as ComputeResourceSummary);
        }

        public override int GetHashCode()
        {
            return (TotalCpu + "_" + TotalMemory + "_" + NumCpuCores + "_" + NumCpuThreads + "_" + EffectiveCpu + "_" + EffectiveMemory + "_" + NumHosts + "_" + NumEffectiveHosts + "_" + OverallStatus).GetHashCode();
        }
    }

    public class ConcurrentAccess : VimFault, IEquatable<ConcurrentAccess>
    {
        public bool Equals(ConcurrentAccess concurrentAccess)
        {
            return (concurrentAccess != null && base.Equals(concurrentAccess));
        }

        public override bool Equals(object concurrentAccess)
        {
            return Equals(concurrentAccess as ConcurrentAccess);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ConfigTarget : DynamicData, IEquatable<ConfigTarget>
    {
        public int NumCpus { get; set; }

        public int NumCpuCores { get; set; }

        public int NumNumaNodes { get; set; }

        public bool SmcPresent { get; set; }

        public VirtualMachineDatastoreInfo[] Datastore { get; set; }

        public VirtualMachineNetworkInfo[] Network { get; set; }

        public OpaqueNetworkTargetInfo[] OpaqueNetwork { get; set; }

        public DistributedVirtualPortgroupInfo[] DistributedVirtualPortgroup { get; set; }

        public DistributedVirtualSwitchInfo[] DistributedVirtualSwitch { get; set; }

        public VirtualMachineCdromInfo[] CdRom { get; set; }

        public VirtualMachineSerialInfo[] Serial { get; set; }

        public VirtualMachineParallelInfo[] Parallel { get; set; }

        public VirtualMachineSoundInfo[] Sound { get; set; }

        public VirtualMachineUsbInfo[] Usb { get; set; }

        public VirtualMachineFloppyInfo[] Floppy { get; set; }

        public VirtualMachineLegacyNetworkSwitchInfo[] LegacyNetworkInfo { get; set; }

        public VirtualMachineScsiPassthroughInfo[] ScsiPassthrough { get; set; }

        public VirtualMachineScsiDiskDeviceInfo[] ScsiDisk { get; set; }

        public VirtualMachineIdeDiskDeviceInfo[] IdeDisk { get; set; }

        public int MaxMemMBOptimalPerf { get; set; }

        public ResourcePoolRuntimeInfo ResourcePool { get; set; }

        public bool? AutoVmotion { get; set; }

        public VirtualMachinePciPassthroughInfo[] PciPassthrough { get; set; }

        public VirtualMachineSriovInfo[] Sriov { get; set; }

        public VirtualMachineVFlashModuleInfo[] VFlashModule { get; set; }

        public VirtualMachinePciSharedGpuPassthroughInfo[] SharedGpuPassthroughTypes { get; set; }

        public long? AvailablePersistentMemoryReservationMB { get; set; }

        public bool Equals(ConfigTarget configTarget)
        {
            return (configTarget != null && this.NumCpus == configTarget.NumCpus && this.NumCpuCores == configTarget.NumCpuCores && this.NumNumaNodes == configTarget.NumNumaNodes && this.SmcPresent == configTarget.SmcPresent && ((this.Datastore == null && configTarget.Datastore == null) || (this.Datastore != null && configTarget.Datastore != null && Enumerable.SequenceEqual(this.Datastore, configTarget.Datastore))) && ((this.Network == null && configTarget.Network == null) || (this.Network != null && configTarget.Network != null && Enumerable.SequenceEqual(this.Network, configTarget.Network))) && ((this.OpaqueNetwork == null && configTarget.OpaqueNetwork == null) || (this.OpaqueNetwork != null && configTarget.OpaqueNetwork != null && Enumerable.SequenceEqual(this.OpaqueNetwork, configTarget.OpaqueNetwork))) && ((this.DistributedVirtualPortgroup == null && configTarget.DistributedVirtualPortgroup == null) || (this.DistributedVirtualPortgroup != null && configTarget.DistributedVirtualPortgroup != null && Enumerable.SequenceEqual(this.DistributedVirtualPortgroup, configTarget.DistributedVirtualPortgroup))) && ((this.DistributedVirtualSwitch == null && configTarget.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && configTarget.DistributedVirtualSwitch != null && Enumerable.SequenceEqual(this.DistributedVirtualSwitch, configTarget.DistributedVirtualSwitch))) && ((this.CdRom == null && configTarget.CdRom == null) || (this.CdRom != null && configTarget.CdRom != null && Enumerable.SequenceEqual(this.CdRom, configTarget.CdRom))) && ((this.Serial == null && configTarget.Serial == null) || (this.Serial != null && configTarget.Serial != null && Enumerable.SequenceEqual(this.Serial, configTarget.Serial))) && ((this.Parallel == null && configTarget.Parallel == null) || (this.Parallel != null && configTarget.Parallel != null && Enumerable.SequenceEqual(this.Parallel, configTarget.Parallel))) && ((this.Sound == null && configTarget.Sound == null) || (this.Sound != null && configTarget.Sound != null && Enumerable.SequenceEqual(this.Sound, configTarget.Sound))) && ((this.Usb == null && configTarget.Usb == null) || (this.Usb != null && configTarget.Usb != null && Enumerable.SequenceEqual(this.Usb, configTarget.Usb))) && ((this.Floppy == null && configTarget.Floppy == null) || (this.Floppy != null && configTarget.Floppy != null && Enumerable.SequenceEqual(this.Floppy, configTarget.Floppy))) && ((this.LegacyNetworkInfo == null && configTarget.LegacyNetworkInfo == null) || (this.LegacyNetworkInfo != null && configTarget.LegacyNetworkInfo != null && Enumerable.SequenceEqual(this.LegacyNetworkInfo, configTarget.LegacyNetworkInfo))) && ((this.ScsiPassthrough == null && configTarget.ScsiPassthrough == null) || (this.ScsiPassthrough != null && configTarget.ScsiPassthrough != null && Enumerable.SequenceEqual(this.ScsiPassthrough, configTarget.ScsiPassthrough))) && ((this.ScsiDisk == null && configTarget.ScsiDisk == null) || (this.ScsiDisk != null && configTarget.ScsiDisk != null && Enumerable.SequenceEqual(this.ScsiDisk, configTarget.ScsiDisk))) && ((this.IdeDisk == null && configTarget.IdeDisk == null) || (this.IdeDisk != null && configTarget.IdeDisk != null && Enumerable.SequenceEqual(this.IdeDisk, configTarget.IdeDisk))) && this.MaxMemMBOptimalPerf == configTarget.MaxMemMBOptimalPerf && ((this.ResourcePool == null && configTarget.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(configTarget.ResourcePool))) && ((this.AutoVmotion == null && configTarget.AutoVmotion == null) || (this.AutoVmotion != null && this.AutoVmotion.Equals(configTarget.AutoVmotion))) && ((this.PciPassthrough == null && configTarget.PciPassthrough == null) || (this.PciPassthrough != null && configTarget.PciPassthrough != null && Enumerable.SequenceEqual(this.PciPassthrough, configTarget.PciPassthrough))) && ((this.Sriov == null && configTarget.Sriov == null) || (this.Sriov != null && configTarget.Sriov != null && Enumerable.SequenceEqual(this.Sriov, configTarget.Sriov))) && ((this.VFlashModule == null && configTarget.VFlashModule == null) || (this.VFlashModule != null && configTarget.VFlashModule != null && Enumerable.SequenceEqual(this.VFlashModule, configTarget.VFlashModule))) && ((this.SharedGpuPassthroughTypes == null && configTarget.SharedGpuPassthroughTypes == null) || (this.SharedGpuPassthroughTypes != null && configTarget.SharedGpuPassthroughTypes != null && Enumerable.SequenceEqual(this.SharedGpuPassthroughTypes, configTarget.SharedGpuPassthroughTypes))) && ((this.AvailablePersistentMemoryReservationMB == null && configTarget.AvailablePersistentMemoryReservationMB == null) || (this.AvailablePersistentMemoryReservationMB != null && this.AvailablePersistentMemoryReservationMB.Equals(configTarget.AvailablePersistentMemoryReservationMB))));
        }

        public override bool Equals(object configTarget)
        {
            return Equals(configTarget as ConfigTarget);
        }

        public override int GetHashCode()
        {
            return (NumCpus + "_" + NumCpuCores + "_" + NumNumaNodes + "_" + SmcPresent + "_" + Datastore + "_" + Network + "_" + OpaqueNetwork + "_" + DistributedVirtualPortgroup + "_" + DistributedVirtualSwitch + "_" + CdRom + "_" + Serial + "_" + Parallel + "_" + Sound + "_" + Usb + "_" + Floppy + "_" + LegacyNetworkInfo + "_" + ScsiPassthrough + "_" + ScsiDisk + "_" + IdeDisk + "_" + MaxMemMBOptimalPerf + "_" + ResourcePool + "_" + AutoVmotion + "_" + PciPassthrough + "_" + Sriov + "_" + VFlashModule + "_" + SharedGpuPassthroughTypes + "_" + AvailablePersistentMemoryReservationMB).GetHashCode();
        }
    }

    public class ConflictingConfiguration : DvsFault, IEquatable<ConflictingConfiguration>
    {
        public ConflictingConfigurationConfig[] ConfigInConflict { get; set; }

        public bool Equals(ConflictingConfiguration conflictingConfiguration)
        {
            return (conflictingConfiguration != null && ((this.ConfigInConflict == null && conflictingConfiguration.ConfigInConflict == null) || (this.ConfigInConflict != null && conflictingConfiguration.ConfigInConflict != null && Enumerable.SequenceEqual(this.ConfigInConflict, conflictingConfiguration.ConfigInConflict))));
        }

        public override bool Equals(object conflictingConfiguration)
        {
            return Equals(conflictingConfiguration as ConflictingConfiguration);
        }

        public override int GetHashCode()
        {
            return (ConfigInConflict).GetHashCode();
        }
    }

    public class ConflictingConfigurationConfig : DynamicData, IEquatable<ConflictingConfigurationConfig>
    {
        public ManagedObjectReference Entity { get; set; }

        public string PropertyPath { get; set; }

        public ConflictingConfigurationConfig_LinkedView LinkedView { get; set; }

        public bool Equals(ConflictingConfigurationConfig conflictingConfigurationConfig)
        {
            return (conflictingConfigurationConfig != null && ((this.Entity == null && conflictingConfigurationConfig.Entity == null) || (this.Entity != null && this.Entity.Equals(conflictingConfigurationConfig.Entity))) && this.PropertyPath == conflictingConfigurationConfig.PropertyPath && ((this.LinkedView == null && conflictingConfigurationConfig.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(conflictingConfigurationConfig.LinkedView))));
        }

        public override bool Equals(object conflictingConfigurationConfig)
        {
            return Equals(conflictingConfigurationConfig as ConflictingConfigurationConfig);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + PropertyPath + "_" + LinkedView).GetHashCode();
        }
    }

    public class ConflictingConfigurationConfig_LinkedView : IEquatable<ConflictingConfigurationConfig_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(ConflictingConfigurationConfig_LinkedView conflictingConfigurationConfig_LinkedView)
        {
            return (conflictingConfigurationConfig_LinkedView != null && ((this.Entity == null && conflictingConfigurationConfig_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(conflictingConfigurationConfig_LinkedView.Entity))));
        }

        public override bool Equals(object conflictingConfigurationConfig_LinkedView)
        {
            return Equals(conflictingConfigurationConfig_LinkedView as ConflictingConfigurationConfig_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class ConflictingDatastoreFound : RuntimeFault, IEquatable<ConflictingDatastoreFound>
    {
        public string Name { get; set; }

        public string Url { get; set; }

        public bool Equals(ConflictingDatastoreFound conflictingDatastoreFound)
        {
            return (conflictingDatastoreFound != null && this.Name == conflictingDatastoreFound.Name && this.Url == conflictingDatastoreFound.Url);
        }

        public override bool Equals(object conflictingDatastoreFound)
        {
            return Equals(conflictingDatastoreFound as ConflictingDatastoreFound);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Url).GetHashCode();
        }
    }

    public class ConnectedIso : OvfExport, IEquatable<ConnectedIso>
    {
        public VirtualCdrom Cdrom { get; set; }

        public string Filename { get; set; }

        public bool Equals(ConnectedIso connectedIso)
        {
            return (connectedIso != null && ((this.Cdrom == null && connectedIso.Cdrom == null) || (this.Cdrom != null && this.Cdrom.Equals(connectedIso.Cdrom))) && this.Filename == connectedIso.Filename);
        }

        public override bool Equals(object connectedIso)
        {
            return Equals(connectedIso as ConnectedIso);
        }

        public override int GetHashCode()
        {
            return (Cdrom + "_" + Filename).GetHashCode();
        }
    }

    public class ContainerView : ManagedObjectView, IEquatable<ContainerView>
    {
        public ManagedObjectReference Container { get; set; }

        public string[] Type { get; set; }

        public bool Recursive { get; set; }

        public ContainerView_LinkedView LinkedView { get; set; }

        public bool Equals(ContainerView containerView)
        {
            return (containerView != null && ((this.Container == null && containerView.Container == null) || (this.Container != null && this.Container.Equals(containerView.Container))) && ((this.Type == null && containerView.Type == null) || (this.Type != null && containerView.Type != null && Enumerable.SequenceEqual(this.Type, containerView.Type))) && this.Recursive == containerView.Recursive && ((this.LinkedView == null && containerView.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(containerView.LinkedView))));
        }

        public override bool Equals(object containerView)
        {
            return Equals(containerView as ContainerView);
        }

        public override int GetHashCode()
        {
            return (Container + "_" + Type + "_" + Recursive + "_" + LinkedView).GetHashCode();
        }
    }

    public class ContainerView_LinkedView : IEquatable<ContainerView_LinkedView>
    {
        public ManagedEntity Container { get; set; }

        public bool Equals(ContainerView_LinkedView containerView_LinkedView)
        {
            return (containerView_LinkedView != null && ((this.Container == null && containerView_LinkedView.Container == null) || (this.Container != null && this.Container.Equals(containerView_LinkedView.Container))));
        }

        public override bool Equals(object containerView_LinkedView)
        {
            return Equals(containerView_LinkedView as ContainerView_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Container).GetHashCode();
        }
    }

    public class CpuCompatibilityUnknown : CpuIncompatible, IEquatable<CpuCompatibilityUnknown>
    {
        public new CpuCompatibilityUnknown_LinkedView LinkedView { get; set; }

        public bool Equals(CpuCompatibilityUnknown cpuCompatibilityUnknown)
        {
            return (cpuCompatibilityUnknown != null && ((this.LinkedView == null && cpuCompatibilityUnknown.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cpuCompatibilityUnknown.LinkedView))));
        }

        public override bool Equals(object cpuCompatibilityUnknown)
        {
            return Equals(cpuCompatibilityUnknown as CpuCompatibilityUnknown);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class CpuCompatibilityUnknown_LinkedView : CpuIncompatible_LinkedView, IEquatable<CpuCompatibilityUnknown_LinkedView>
    {
        public bool Equals(CpuCompatibilityUnknown_LinkedView cpuCompatibilityUnknown_LinkedView)
        {
            return (cpuCompatibilityUnknown_LinkedView != null && base.Equals(cpuCompatibilityUnknown_LinkedView));
        }

        public override bool Equals(object cpuCompatibilityUnknown_LinkedView)
        {
            return Equals(cpuCompatibilityUnknown_LinkedView as CpuCompatibilityUnknown_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CpuHotPlugNotSupported : VmConfigFault, IEquatable<CpuHotPlugNotSupported>
    {
        public bool Equals(CpuHotPlugNotSupported cpuHotPlugNotSupported)
        {
            return (cpuHotPlugNotSupported != null && base.Equals(cpuHotPlugNotSupported));
        }

        public override bool Equals(object cpuHotPlugNotSupported)
        {
            return Equals(cpuHotPlugNotSupported as CpuHotPlugNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CpuIncompatible : VirtualHardwareCompatibilityIssue, IEquatable<CpuIncompatible>
    {
        public int Level { get; set; }

        public string RegisterName { get; set; }

        public string RegisterBits { get; set; }

        public string DesiredBits { get; set; }

        public ManagedObjectReference Host { get; set; }

        public CpuIncompatible_LinkedView LinkedView { get; set; }

        public bool Equals(CpuIncompatible cpuIncompatible)
        {
            return (cpuIncompatible != null && this.Level == cpuIncompatible.Level && this.RegisterName == cpuIncompatible.RegisterName && this.RegisterBits == cpuIncompatible.RegisterBits && this.DesiredBits == cpuIncompatible.DesiredBits && ((this.Host == null && cpuIncompatible.Host == null) || (this.Host != null && this.Host.Equals(cpuIncompatible.Host))) && ((this.LinkedView == null && cpuIncompatible.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cpuIncompatible.LinkedView))));
        }

        public override bool Equals(object cpuIncompatible)
        {
            return Equals(cpuIncompatible as CpuIncompatible);
        }

        public override int GetHashCode()
        {
            return (Level + "_" + RegisterName + "_" + RegisterBits + "_" + DesiredBits + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class CpuIncompatible_LinkedView : IEquatable<CpuIncompatible_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(CpuIncompatible_LinkedView cpuIncompatible_LinkedView)
        {
            return (cpuIncompatible_LinkedView != null && ((this.Host == null && cpuIncompatible_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(cpuIncompatible_LinkedView.Host))));
        }

        public override bool Equals(object cpuIncompatible_LinkedView)
        {
            return Equals(cpuIncompatible_LinkedView as CpuIncompatible_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class CpuIncompatible1ECX : CpuIncompatible, IEquatable<CpuIncompatible1ECX>
    {
        public bool Sse3 { get; set; }

        public bool Pclmulqdq { get; set; }

        public bool Ssse3 { get; set; }

        public bool Sse41 { get; set; }

        public bool Sse42 { get; set; }

        public bool Aes { get; set; }

        public bool Other { get; set; }

        public bool OtherOnly { get; set; }

        public new CpuIncompatible1ECX_LinkedView LinkedView { get; set; }

        public bool Equals(CpuIncompatible1ECX cpuIncompatible1ECX)
        {
            return (cpuIncompatible1ECX != null && this.Sse3 == cpuIncompatible1ECX.Sse3 && this.Pclmulqdq == cpuIncompatible1ECX.Pclmulqdq && this.Ssse3 == cpuIncompatible1ECX.Ssse3 && this.Sse41 == cpuIncompatible1ECX.Sse41 && this.Sse42 == cpuIncompatible1ECX.Sse42 && this.Aes == cpuIncompatible1ECX.Aes && this.Other == cpuIncompatible1ECX.Other && this.OtherOnly == cpuIncompatible1ECX.OtherOnly && ((this.LinkedView == null && cpuIncompatible1ECX.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cpuIncompatible1ECX.LinkedView))));
        }

        public override bool Equals(object cpuIncompatible1ECX)
        {
            return Equals(cpuIncompatible1ECX as CpuIncompatible1ECX);
        }

        public override int GetHashCode()
        {
            return (Sse3 + "_" + Pclmulqdq + "_" + Ssse3 + "_" + Sse41 + "_" + Sse42 + "_" + Aes + "_" + Other + "_" + OtherOnly + "_" + LinkedView).GetHashCode();
        }
    }

    public class CpuIncompatible1ECX_LinkedView : CpuIncompatible_LinkedView, IEquatable<CpuIncompatible1ECX_LinkedView>
    {
        public bool Equals(CpuIncompatible1ECX_LinkedView cpuIncompatible1ECX_LinkedView)
        {
            return (cpuIncompatible1ECX_LinkedView != null && base.Equals(cpuIncompatible1ECX_LinkedView));
        }

        public override bool Equals(object cpuIncompatible1ECX_LinkedView)
        {
            return Equals(cpuIncompatible1ECX_LinkedView as CpuIncompatible1ECX_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CpuIncompatible81EDX : CpuIncompatible, IEquatable<CpuIncompatible81EDX>
    {
        public bool Nx { get; set; }

        public bool Ffxsr { get; set; }

        public bool Rdtscp { get; set; }

        public bool Lm { get; set; }

        public bool Other { get; set; }

        public bool OtherOnly { get; set; }

        public new CpuIncompatible81EDX_LinkedView LinkedView { get; set; }

        public bool Equals(CpuIncompatible81EDX cpuIncompatible81EDX)
        {
            return (cpuIncompatible81EDX != null && this.Nx == cpuIncompatible81EDX.Nx && this.Ffxsr == cpuIncompatible81EDX.Ffxsr && this.Rdtscp == cpuIncompatible81EDX.Rdtscp && this.Lm == cpuIncompatible81EDX.Lm && this.Other == cpuIncompatible81EDX.Other && this.OtherOnly == cpuIncompatible81EDX.OtherOnly && ((this.LinkedView == null && cpuIncompatible81EDX.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(cpuIncompatible81EDX.LinkedView))));
        }

        public override bool Equals(object cpuIncompatible81EDX)
        {
            return Equals(cpuIncompatible81EDX as CpuIncompatible81EDX);
        }

        public override int GetHashCode()
        {
            return (Nx + "_" + Ffxsr + "_" + Rdtscp + "_" + Lm + "_" + Other + "_" + OtherOnly + "_" + LinkedView).GetHashCode();
        }
    }

    public class CpuIncompatible81EDX_LinkedView : CpuIncompatible_LinkedView, IEquatable<CpuIncompatible81EDX_LinkedView>
    {
        public bool Equals(CpuIncompatible81EDX_LinkedView cpuIncompatible81EDX_LinkedView)
        {
            return (cpuIncompatible81EDX_LinkedView != null && base.Equals(cpuIncompatible81EDX_LinkedView));
        }

        public override bool Equals(object cpuIncompatible81EDX_LinkedView)
        {
            return Equals(cpuIncompatible81EDX_LinkedView as CpuIncompatible81EDX_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CreateTaskAction : Action, IEquatable<CreateTaskAction>
    {
        public string TaskTypeId { get; set; }

        public bool Cancelable { get; set; }

        public bool Equals(CreateTaskAction createTaskAction)
        {
            return (createTaskAction != null && this.TaskTypeId == createTaskAction.TaskTypeId && this.Cancelable == createTaskAction.Cancelable);
        }

        public override bool Equals(object createTaskAction)
        {
            return Equals(createTaskAction as CreateTaskAction);
        }

        public override int GetHashCode()
        {
            return (TaskTypeId + "_" + Cancelable).GetHashCode();
        }
    }

    public class CryptoKeyId : DynamicData, IEquatable<CryptoKeyId>
    {
        public string KeyId { get; set; }

        public KeyProviderId ProviderId { get; set; }

        public bool Equals(CryptoKeyId cryptoKeyId)
        {
            return (cryptoKeyId != null && this.KeyId == cryptoKeyId.KeyId && ((this.ProviderId == null && cryptoKeyId.ProviderId == null) || (this.ProviderId != null && this.ProviderId.Equals(cryptoKeyId.ProviderId))));
        }

        public override bool Equals(object cryptoKeyId)
        {
            return Equals(cryptoKeyId as CryptoKeyId);
        }

        public override int GetHashCode()
        {
            return (KeyId + "_" + ProviderId).GetHashCode();
        }
    }

    public class CryptoKeyPlain : DynamicData, IEquatable<CryptoKeyPlain>
    {
        public CryptoKeyId KeyId { get; set; }

        public string Algorithm { get; set; }

        public string KeyData { get; set; }

        public bool Equals(CryptoKeyPlain cryptoKeyPlain)
        {
            return (cryptoKeyPlain != null && ((this.KeyId == null && cryptoKeyPlain.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(cryptoKeyPlain.KeyId))) && this.Algorithm == cryptoKeyPlain.Algorithm && this.KeyData == cryptoKeyPlain.KeyData);
        }

        public override bool Equals(object cryptoKeyPlain)
        {
            return Equals(cryptoKeyPlain as CryptoKeyPlain);
        }

        public override int GetHashCode()
        {
            return (KeyId + "_" + Algorithm + "_" + KeyData).GetHashCode();
        }
    }

    public class CryptoKeyResult : DynamicData, IEquatable<CryptoKeyResult>
    {
        public CryptoKeyId KeyId { get; set; }

        public bool Success { get; set; }

        public string Reason { get; set; }

        public bool Equals(CryptoKeyResult cryptoKeyResult)
        {
            return (cryptoKeyResult != null && ((this.KeyId == null && cryptoKeyResult.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(cryptoKeyResult.KeyId))) && this.Success == cryptoKeyResult.Success && this.Reason == cryptoKeyResult.Reason);
        }

        public override bool Equals(object cryptoKeyResult)
        {
            return Equals(cryptoKeyResult as CryptoKeyResult);
        }

        public override int GetHashCode()
        {
            return (KeyId + "_" + Success + "_" + Reason).GetHashCode();
        }
    }

    public class CryptoManager : ViewBase, IEquatable<CryptoManager>
    {
        public bool Enabled { get; set; }

        public void AddKey(CryptoKeyPlain key)
        {
        }

        public CryptoKeyResult[] AddKeys(CryptoKeyPlain[] keys)
        {
            return default(CryptoKeyResult[]);
        }

        public void RemoveKey(CryptoKeyId key, bool force)
        {
        }

        public CryptoKeyResult[] RemoveKeys(CryptoKeyId[] keys, bool force)
        {
            return default(CryptoKeyResult[]);
        }

        public CryptoKeyId[] ListKeys(int? limit)
        {
            return default(CryptoKeyId[]);
        }

        public bool Equals(CryptoManager cryptoManager)
        {
            return (cryptoManager != null && this.Enabled == cryptoManager.Enabled);
        }

        public override bool Equals(object cryptoManager)
        {
            return Equals(cryptoManager as CryptoManager);
        }

        public override int GetHashCode()
        {
            return (Enabled).GetHashCode();
        }
    }

    public class CryptoManagerHost : CryptoManager, IEquatable<CryptoManagerHost>
    {
        public void CryptoManagerHostPrepare()
        {
        }

        public void CryptoManagerHostEnable(CryptoKeyPlain initialKey)
        {
        }

        public ManagedObjectReference ChangeKey_Task(CryptoKeyPlain newKey)
        {
            return default(ManagedObjectReference);
        }

        public void ChangeKey(CryptoKeyPlain newKey)
        {
        }

        public bool Equals(CryptoManagerHost cryptoManagerHost)
        {
            return (cryptoManagerHost != null && base.Equals(cryptoManagerHost));
        }

        public override bool Equals(object cryptoManagerHost)
        {
            return Equals(cryptoManagerHost as CryptoManagerHost);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CryptoManagerHostKMS : CryptoManagerHost, IEquatable<CryptoManagerHostKMS>
    {
        public bool Equals(CryptoManagerHostKMS cryptoManagerHostKMS)
        {
            return (cryptoManagerHostKMS != null && base.Equals(cryptoManagerHostKMS));
        }

        public override bool Equals(object cryptoManagerHostKMS)
        {
            return Equals(cryptoManagerHostKMS as CryptoManagerHostKMS);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CryptoManagerKmip : CryptoManager, IEquatable<CryptoManagerKmip>
    {
        public KmipClusterInfo[] KmipServers { get; set; }

        public void RegisterKmipServer(KmipServerSpec server)
        {
        }

        public void MarkDefault(KeyProviderId clusterId)
        {
        }

        public void UpdateKmipServer(KmipServerSpec server)
        {
        }

        public void RemoveKmipServer(KeyProviderId clusterId, string serverName)
        {
        }

        public KmipClusterInfo[] ListKmipServers(int? limit)
        {
            return default(KmipClusterInfo[]);
        }

        public ManagedObjectReference RetrieveKmipServersStatus_Task(KmipClusterInfo[] clusters)
        {
            return default(ManagedObjectReference);
        }

        public CryptoManagerKmipClusterStatus[] RetrieveKmipServersStatus(KmipClusterInfo[] clusters)
        {
            return default(CryptoManagerKmipClusterStatus[]);
        }

        public CryptoKeyResult GenerateKey(KeyProviderId keyProvider)
        {
            return default(CryptoKeyResult);
        }

        public CryptoManagerKmipServerCertInfo RetrieveKmipServerCert(KeyProviderId keyProvider, KmipServerInfo server)
        {
            return default(CryptoManagerKmipServerCertInfo);
        }

        public void UploadKmipServerCert(KeyProviderId cluster, string certificate)
        {
        }

        public string GenerateSelfSignedClientCert(KeyProviderId cluster)
        {
            return default(string);
        }

        public string GenerateClientCsr(KeyProviderId cluster)
        {
            return default(string);
        }

        public string RetrieveSelfSignedClientCert(KeyProviderId cluster)
        {
            return default(string);
        }

        public string RetrieveClientCsr(KeyProviderId cluster)
        {
            return default(string);
        }

        public string RetrieveClientCert(KeyProviderId cluster)
        {
            return default(string);
        }

        public void UpdateSelfSignedClientCert(KeyProviderId cluster, string certificate)
        {
        }

        public void UpdateKmsSignedCsrClientCert(KeyProviderId cluster, string certificate)
        {
        }

        public void UploadClientCert(KeyProviderId cluster, string certificate, string privateKey)
        {
        }

        public bool Equals(CryptoManagerKmip cryptoManagerKmip)
        {
            return (cryptoManagerKmip != null && ((this.KmipServers == null && cryptoManagerKmip.KmipServers == null) || (this.KmipServers != null && cryptoManagerKmip.KmipServers != null && Enumerable.SequenceEqual(this.KmipServers, cryptoManagerKmip.KmipServers))));
        }

        public override bool Equals(object cryptoManagerKmip)
        {
            return Equals(cryptoManagerKmip as CryptoManagerKmip);
        }

        public override int GetHashCode()
        {
            return (KmipServers).GetHashCode();
        }
    }

    public class CryptoManagerKmipCertificateInfo : DynamicData, IEquatable<CryptoManagerKmipCertificateInfo>
    {
        public string Subject { get; set; }

        public string Issuer { get; set; }

        public string SerialNumber { get; set; }

        public DateTime NotBefore { get; set; }

        public DateTime NotAfter { get; set; }

        public string Fingerprint { get; set; }

        public DateTime CheckTime { get; set; }

        public int? SecondsSinceValid { get; set; }

        public int? SecondsBeforeExpire { get; set; }

        public bool Equals(CryptoManagerKmipCertificateInfo cryptoManagerKmipCertificateInfo)
        {
            return (cryptoManagerKmipCertificateInfo != null && this.Subject == cryptoManagerKmipCertificateInfo.Subject && this.Issuer == cryptoManagerKmipCertificateInfo.Issuer && this.SerialNumber == cryptoManagerKmipCertificateInfo.SerialNumber && this.NotBefore == cryptoManagerKmipCertificateInfo.NotBefore && this.NotAfter == cryptoManagerKmipCertificateInfo.NotAfter && this.Fingerprint == cryptoManagerKmipCertificateInfo.Fingerprint && this.CheckTime == cryptoManagerKmipCertificateInfo.CheckTime && ((this.SecondsSinceValid == null && cryptoManagerKmipCertificateInfo.SecondsSinceValid == null) || (this.SecondsSinceValid != null && this.SecondsSinceValid.Equals(cryptoManagerKmipCertificateInfo.SecondsSinceValid))) && ((this.SecondsBeforeExpire == null && cryptoManagerKmipCertificateInfo.SecondsBeforeExpire == null) || (this.SecondsBeforeExpire != null && this.SecondsBeforeExpire.Equals(cryptoManagerKmipCertificateInfo.SecondsBeforeExpire))));
        }

        public override bool Equals(object cryptoManagerKmipCertificateInfo)
        {
            return Equals(cryptoManagerKmipCertificateInfo as CryptoManagerKmipCertificateInfo);
        }

        public override int GetHashCode()
        {
            return (Subject + "_" + Issuer + "_" + SerialNumber + "_" + NotBefore + "_" + NotAfter + "_" + Fingerprint + "_" + CheckTime + "_" + SecondsSinceValid + "_" + SecondsBeforeExpire).GetHashCode();
        }
    }

    public class CryptoManagerKmipClusterStatus : DynamicData, IEquatable<CryptoManagerKmipClusterStatus>
    {
        public KeyProviderId ClusterId { get; set; }

        public CryptoManagerKmipServerStatus[] Servers { get; set; }

        public CryptoManagerKmipCertificateInfo ClientCertInfo { get; set; }

        public bool Equals(CryptoManagerKmipClusterStatus cryptoManagerKmipClusterStatus)
        {
            return (cryptoManagerKmipClusterStatus != null && ((this.ClusterId == null && cryptoManagerKmipClusterStatus.ClusterId == null) || (this.ClusterId != null && this.ClusterId.Equals(cryptoManagerKmipClusterStatus.ClusterId))) && ((this.Servers == null && cryptoManagerKmipClusterStatus.Servers == null) || (this.Servers != null && cryptoManagerKmipClusterStatus.Servers != null && Enumerable.SequenceEqual(this.Servers, cryptoManagerKmipClusterStatus.Servers))) && ((this.ClientCertInfo == null && cryptoManagerKmipClusterStatus.ClientCertInfo == null) || (this.ClientCertInfo != null && this.ClientCertInfo.Equals(cryptoManagerKmipClusterStatus.ClientCertInfo))));
        }

        public override bool Equals(object cryptoManagerKmipClusterStatus)
        {
            return Equals(cryptoManagerKmipClusterStatus as CryptoManagerKmipClusterStatus);
        }

        public override int GetHashCode()
        {
            return (ClusterId + "_" + Servers + "_" + ClientCertInfo).GetHashCode();
        }
    }

    public class CryptoManagerKmipServerCertInfo : DynamicData, IEquatable<CryptoManagerKmipServerCertInfo>
    {
        public string Certificate { get; set; }

        public CryptoManagerKmipCertificateInfo CertInfo { get; set; }

        public bool? ClientTrustServer { get; set; }

        public bool Equals(CryptoManagerKmipServerCertInfo cryptoManagerKmipServerCertInfo)
        {
            return (cryptoManagerKmipServerCertInfo != null && this.Certificate == cryptoManagerKmipServerCertInfo.Certificate && ((this.CertInfo == null && cryptoManagerKmipServerCertInfo.CertInfo == null) || (this.CertInfo != null && this.CertInfo.Equals(cryptoManagerKmipServerCertInfo.CertInfo))) && ((this.ClientTrustServer == null && cryptoManagerKmipServerCertInfo.ClientTrustServer == null) || (this.ClientTrustServer != null && this.ClientTrustServer.Equals(cryptoManagerKmipServerCertInfo.ClientTrustServer))));
        }

        public override bool Equals(object cryptoManagerKmipServerCertInfo)
        {
            return Equals(cryptoManagerKmipServerCertInfo as CryptoManagerKmipServerCertInfo);
        }

        public override int GetHashCode()
        {
            return (Certificate + "_" + CertInfo + "_" + ClientTrustServer).GetHashCode();
        }
    }

    public class CryptoManagerKmipServerStatus : DynamicData, IEquatable<CryptoManagerKmipServerStatus>
    {
        public string Name { get; set; }

        public ManagedEntityStatus Status { get; set; }

        public string ConnectionStatus { get; set; }

        public CryptoManagerKmipCertificateInfo CertInfo { get; set; }

        public bool? ClientTrustServer { get; set; }

        public bool? ServerTrustClient { get; set; }

        public bool Equals(CryptoManagerKmipServerStatus cryptoManagerKmipServerStatus)
        {
            return (cryptoManagerKmipServerStatus != null && this.Name == cryptoManagerKmipServerStatus.Name && this.Status == cryptoManagerKmipServerStatus.Status && this.ConnectionStatus == cryptoManagerKmipServerStatus.ConnectionStatus && ((this.CertInfo == null && cryptoManagerKmipServerStatus.CertInfo == null) || (this.CertInfo != null && this.CertInfo.Equals(cryptoManagerKmipServerStatus.CertInfo))) && ((this.ClientTrustServer == null && cryptoManagerKmipServerStatus.ClientTrustServer == null) || (this.ClientTrustServer != null && this.ClientTrustServer.Equals(cryptoManagerKmipServerStatus.ClientTrustServer))) && ((this.ServerTrustClient == null && cryptoManagerKmipServerStatus.ServerTrustClient == null) || (this.ServerTrustClient != null && this.ServerTrustClient.Equals(cryptoManagerKmipServerStatus.ServerTrustClient))));
        }

        public override bool Equals(object cryptoManagerKmipServerStatus)
        {
            return Equals(cryptoManagerKmipServerStatus as CryptoManagerKmipServerStatus);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Status + "_" + ConnectionStatus + "_" + CertInfo + "_" + ClientTrustServer + "_" + ServerTrustClient).GetHashCode();
        }
    }

    public class CryptoSpec : DynamicData, IEquatable<CryptoSpec>
    {
        public bool Equals(CryptoSpec cryptoSpec)
        {
            return (cryptoSpec != null && base.Equals(cryptoSpec));
        }

        public override bool Equals(object cryptoSpec)
        {
            return Equals(cryptoSpec as CryptoSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CryptoSpecDecrypt : CryptoSpec, IEquatable<CryptoSpecDecrypt>
    {
        public bool Equals(CryptoSpecDecrypt cryptoSpecDecrypt)
        {
            return (cryptoSpecDecrypt != null && base.Equals(cryptoSpecDecrypt));
        }

        public override bool Equals(object cryptoSpecDecrypt)
        {
            return Equals(cryptoSpecDecrypt as CryptoSpecDecrypt);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CryptoSpecDeepRecrypt : CryptoSpec, IEquatable<CryptoSpecDeepRecrypt>
    {
        public CryptoKeyId NewKeyId { get; set; }

        public bool Equals(CryptoSpecDeepRecrypt cryptoSpecDeepRecrypt)
        {
            return (cryptoSpecDeepRecrypt != null && ((this.NewKeyId == null && cryptoSpecDeepRecrypt.NewKeyId == null) || (this.NewKeyId != null && this.NewKeyId.Equals(cryptoSpecDeepRecrypt.NewKeyId))));
        }

        public override bool Equals(object cryptoSpecDeepRecrypt)
        {
            return Equals(cryptoSpecDeepRecrypt as CryptoSpecDeepRecrypt);
        }

        public override int GetHashCode()
        {
            return (NewKeyId).GetHashCode();
        }
    }

    public class CryptoSpecEncrypt : CryptoSpec, IEquatable<CryptoSpecEncrypt>
    {
        public CryptoKeyId CryptoKeyId { get; set; }

        public bool Equals(CryptoSpecEncrypt cryptoSpecEncrypt)
        {
            return (cryptoSpecEncrypt != null && ((this.CryptoKeyId == null && cryptoSpecEncrypt.CryptoKeyId == null) || (this.CryptoKeyId != null && this.CryptoKeyId.Equals(cryptoSpecEncrypt.CryptoKeyId))));
        }

        public override bool Equals(object cryptoSpecEncrypt)
        {
            return Equals(cryptoSpecEncrypt as CryptoSpecEncrypt);
        }

        public override int GetHashCode()
        {
            return (CryptoKeyId).GetHashCode();
        }
    }

    public class CryptoSpecNoOp : CryptoSpec, IEquatable<CryptoSpecNoOp>
    {
        public bool Equals(CryptoSpecNoOp cryptoSpecNoOp)
        {
            return (cryptoSpecNoOp != null && base.Equals(cryptoSpecNoOp));
        }

        public override bool Equals(object cryptoSpecNoOp)
        {
            return Equals(cryptoSpecNoOp as CryptoSpecNoOp);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CryptoSpecRegister : CryptoSpecNoOp, IEquatable<CryptoSpecRegister>
    {
        public CryptoKeyId CryptoKeyId { get; set; }

        public bool Equals(CryptoSpecRegister cryptoSpecRegister)
        {
            return (cryptoSpecRegister != null && ((this.CryptoKeyId == null && cryptoSpecRegister.CryptoKeyId == null) || (this.CryptoKeyId != null && this.CryptoKeyId.Equals(cryptoSpecRegister.CryptoKeyId))));
        }

        public override bool Equals(object cryptoSpecRegister)
        {
            return Equals(cryptoSpecRegister as CryptoSpecRegister);
        }

        public override int GetHashCode()
        {
            return (CryptoKeyId).GetHashCode();
        }
    }

    public class CryptoSpecShallowRecrypt : CryptoSpec, IEquatable<CryptoSpecShallowRecrypt>
    {
        public CryptoKeyId NewKeyId { get; set; }

        public bool Equals(CryptoSpecShallowRecrypt cryptoSpecShallowRecrypt)
        {
            return (cryptoSpecShallowRecrypt != null && ((this.NewKeyId == null && cryptoSpecShallowRecrypt.NewKeyId == null) || (this.NewKeyId != null && this.NewKeyId.Equals(cryptoSpecShallowRecrypt.NewKeyId))));
        }

        public override bool Equals(object cryptoSpecShallowRecrypt)
        {
            return Equals(cryptoSpecShallowRecrypt as CryptoSpecShallowRecrypt);
        }

        public override int GetHashCode()
        {
            return (NewKeyId).GetHashCode();
        }
    }

    public class CustomFieldDef : DynamicData, IEquatable<CustomFieldDef>
    {
        public int Key { get; set; }

        public string Name { get; set; }

        public string Type { get; set; }

        public string ManagedObjectType { get; set; }

        public PrivilegePolicyDef FieldDefPrivileges { get; set; }

        public PrivilegePolicyDef FieldInstancePrivileges { get; set; }

        public bool Equals(CustomFieldDef customFieldDef)
        {
            return (customFieldDef != null && this.Key == customFieldDef.Key && this.Name == customFieldDef.Name && this.Type == customFieldDef.Type && this.ManagedObjectType == customFieldDef.ManagedObjectType && ((this.FieldDefPrivileges == null && customFieldDef.FieldDefPrivileges == null) || (this.FieldDefPrivileges != null && this.FieldDefPrivileges.Equals(customFieldDef.FieldDefPrivileges))) && ((this.FieldInstancePrivileges == null && customFieldDef.FieldInstancePrivileges == null) || (this.FieldInstancePrivileges != null && this.FieldInstancePrivileges.Equals(customFieldDef.FieldInstancePrivileges))));
        }

        public override bool Equals(object customFieldDef)
        {
            return Equals(customFieldDef as CustomFieldDef);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Type + "_" + ManagedObjectType + "_" + FieldDefPrivileges + "_" + FieldInstancePrivileges).GetHashCode();
        }
    }

    public class CustomFieldDefAddedEvent : CustomFieldDefEvent, IEquatable<CustomFieldDefAddedEvent>
    {
        public bool Equals(CustomFieldDefAddedEvent customFieldDefAddedEvent)
        {
            return (customFieldDefAddedEvent != null && base.Equals(customFieldDefAddedEvent));
        }

        public override bool Equals(object customFieldDefAddedEvent)
        {
            return Equals(customFieldDefAddedEvent as CustomFieldDefAddedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomFieldDefEvent : CustomFieldEvent, IEquatable<CustomFieldDefEvent>
    {
        public int FieldKey { get; set; }

        public string Name { get; set; }

        public bool Equals(CustomFieldDefEvent customFieldDefEvent)
        {
            return (customFieldDefEvent != null && this.FieldKey == customFieldDefEvent.FieldKey && this.Name == customFieldDefEvent.Name);
        }

        public override bool Equals(object customFieldDefEvent)
        {
            return Equals(customFieldDefEvent as CustomFieldDefEvent);
        }

        public override int GetHashCode()
        {
            return (FieldKey + "_" + Name).GetHashCode();
        }
    }

    public class CustomFieldDefRemovedEvent : CustomFieldDefEvent, IEquatable<CustomFieldDefRemovedEvent>
    {
        public bool Equals(CustomFieldDefRemovedEvent customFieldDefRemovedEvent)
        {
            return (customFieldDefRemovedEvent != null && base.Equals(customFieldDefRemovedEvent));
        }

        public override bool Equals(object customFieldDefRemovedEvent)
        {
            return Equals(customFieldDefRemovedEvent as CustomFieldDefRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomFieldDefRenamedEvent : CustomFieldDefEvent, IEquatable<CustomFieldDefRenamedEvent>
    {
        public string NewName { get; set; }

        public bool Equals(CustomFieldDefRenamedEvent customFieldDefRenamedEvent)
        {
            return (customFieldDefRenamedEvent != null && this.NewName == customFieldDefRenamedEvent.NewName);
        }

        public override bool Equals(object customFieldDefRenamedEvent)
        {
            return Equals(customFieldDefRenamedEvent as CustomFieldDefRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (NewName).GetHashCode();
        }
    }

    public class CustomFieldEvent : Event, IEquatable<CustomFieldEvent>
    {
        public bool Equals(CustomFieldEvent customFieldEvent)
        {
            return (customFieldEvent != null && base.Equals(customFieldEvent));
        }

        public override bool Equals(object customFieldEvent)
        {
            return Equals(customFieldEvent as CustomFieldEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomFieldsManager : ViewBase, IEquatable<CustomFieldsManager>
    {
        public CustomFieldDef[] Field { get; set; }

        public CustomFieldDef AddCustomFieldDef(string name, string moType, PrivilegePolicyDef fieldDefPolicy, PrivilegePolicyDef fieldPolicy)
        {
            return default(CustomFieldDef);
        }

        public void RemoveCustomFieldDef(int key)
        {
        }

        public void RenameCustomFieldDef(int key, string name)
        {
        }

        public void SetField(ManagedObjectReference entity, int key, string value)
        {
        }

        public bool Equals(CustomFieldsManager customFieldsManager)
        {
            return (customFieldsManager != null && ((this.Field == null && customFieldsManager.Field == null) || (this.Field != null && customFieldsManager.Field != null && Enumerable.SequenceEqual(this.Field, customFieldsManager.Field))));
        }

        public override bool Equals(object customFieldsManager)
        {
            return Equals(customFieldsManager as CustomFieldsManager);
        }

        public override int GetHashCode()
        {
            return (Field).GetHashCode();
        }
    }

    public class CustomFieldStringValue : CustomFieldValue, IEquatable<CustomFieldStringValue>
    {
        public string Value { get; set; }

        public bool Equals(CustomFieldStringValue customFieldStringValue)
        {
            return (customFieldStringValue != null && this.Value == customFieldStringValue.Value);
        }

        public override bool Equals(object customFieldStringValue)
        {
            return Equals(customFieldStringValue as CustomFieldStringValue);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class CustomFieldValue : DynamicData, IEquatable<CustomFieldValue>
    {
        public int Key { get; set; }

        public bool Equals(CustomFieldValue customFieldValue)
        {
            return (customFieldValue != null && this.Key == customFieldValue.Key);
        }

        public override bool Equals(object customFieldValue)
        {
            return Equals(customFieldValue as CustomFieldValue);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class CustomFieldValueChangedEvent : CustomFieldEvent, IEquatable<CustomFieldValueChangedEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public int FieldKey { get; set; }

        public string Name { get; set; }

        public string Value { get; set; }

        public string PrevState { get; set; }

        public bool Equals(CustomFieldValueChangedEvent customFieldValueChangedEvent)
        {
            return (customFieldValueChangedEvent != null && ((this.Entity == null && customFieldValueChangedEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(customFieldValueChangedEvent.Entity))) && this.FieldKey == customFieldValueChangedEvent.FieldKey && this.Name == customFieldValueChangedEvent.Name && this.Value == customFieldValueChangedEvent.Value && this.PrevState == customFieldValueChangedEvent.PrevState);
        }

        public override bool Equals(object customFieldValueChangedEvent)
        {
            return Equals(customFieldValueChangedEvent as CustomFieldValueChangedEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + FieldKey + "_" + Name + "_" + Value + "_" + PrevState).GetHashCode();
        }
    }

    public class CustomizationAdapterMapping : DynamicData, IEquatable<CustomizationAdapterMapping>
    {
        public string MacAddress { get; set; }

        public CustomizationIPSettings Adapter { get; set; }

        public bool Equals(CustomizationAdapterMapping customizationAdapterMapping)
        {
            return (customizationAdapterMapping != null && this.MacAddress == customizationAdapterMapping.MacAddress && ((this.Adapter == null && customizationAdapterMapping.Adapter == null) || (this.Adapter != null && this.Adapter.Equals(customizationAdapterMapping.Adapter))));
        }

        public override bool Equals(object customizationAdapterMapping)
        {
            return Equals(customizationAdapterMapping as CustomizationAdapterMapping);
        }

        public override int GetHashCode()
        {
            return (MacAddress + "_" + Adapter).GetHashCode();
        }
    }

    public class CustomizationAutoIpV6Generator : CustomizationIpV6Generator, IEquatable<CustomizationAutoIpV6Generator>
    {
        public bool Equals(CustomizationAutoIpV6Generator customizationAutoIpV6Generator)
        {
            return (customizationAutoIpV6Generator != null && base.Equals(customizationAutoIpV6Generator));
        }

        public override bool Equals(object customizationAutoIpV6Generator)
        {
            return Equals(customizationAutoIpV6Generator as CustomizationAutoIpV6Generator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationCustomIpGenerator : CustomizationIpGenerator, IEquatable<CustomizationCustomIpGenerator>
    {
        public string Argument { get; set; }

        public bool Equals(CustomizationCustomIpGenerator customizationCustomIpGenerator)
        {
            return (customizationCustomIpGenerator != null && this.Argument == customizationCustomIpGenerator.Argument);
        }

        public override bool Equals(object customizationCustomIpGenerator)
        {
            return Equals(customizationCustomIpGenerator as CustomizationCustomIpGenerator);
        }

        public override int GetHashCode()
        {
            return (Argument).GetHashCode();
        }
    }

    public class CustomizationCustomIpV6Generator : CustomizationIpV6Generator, IEquatable<CustomizationCustomIpV6Generator>
    {
        public string Argument { get; set; }

        public bool Equals(CustomizationCustomIpV6Generator customizationCustomIpV6Generator)
        {
            return (customizationCustomIpV6Generator != null && this.Argument == customizationCustomIpV6Generator.Argument);
        }

        public override bool Equals(object customizationCustomIpV6Generator)
        {
            return Equals(customizationCustomIpV6Generator as CustomizationCustomIpV6Generator);
        }

        public override int GetHashCode()
        {
            return (Argument).GetHashCode();
        }
    }

    public class CustomizationCustomName : CustomizationName, IEquatable<CustomizationCustomName>
    {
        public string Argument { get; set; }

        public bool Equals(CustomizationCustomName customizationCustomName)
        {
            return (customizationCustomName != null && this.Argument == customizationCustomName.Argument);
        }

        public override bool Equals(object customizationCustomName)
        {
            return Equals(customizationCustomName as CustomizationCustomName);
        }

        public override int GetHashCode()
        {
            return (Argument).GetHashCode();
        }
    }

    public class CustomizationDhcpIpGenerator : CustomizationIpGenerator, IEquatable<CustomizationDhcpIpGenerator>
    {
        public bool Equals(CustomizationDhcpIpGenerator customizationDhcpIpGenerator)
        {
            return (customizationDhcpIpGenerator != null && base.Equals(customizationDhcpIpGenerator));
        }

        public override bool Equals(object customizationDhcpIpGenerator)
        {
            return Equals(customizationDhcpIpGenerator as CustomizationDhcpIpGenerator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationDhcpIpV6Generator : CustomizationIpV6Generator, IEquatable<CustomizationDhcpIpV6Generator>
    {
        public bool Equals(CustomizationDhcpIpV6Generator customizationDhcpIpV6Generator)
        {
            return (customizationDhcpIpV6Generator != null && base.Equals(customizationDhcpIpV6Generator));
        }

        public override bool Equals(object customizationDhcpIpV6Generator)
        {
            return Equals(customizationDhcpIpV6Generator as CustomizationDhcpIpV6Generator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationEvent : VmEvent, IEquatable<CustomizationEvent>
    {
        public string LogLocation { get; set; }

        public bool Equals(CustomizationEvent customizationEvent)
        {
            return (customizationEvent != null && this.LogLocation == customizationEvent.LogLocation);
        }

        public override bool Equals(object customizationEvent)
        {
            return Equals(customizationEvent as CustomizationEvent);
        }

        public override int GetHashCode()
        {
            return (LogLocation).GetHashCode();
        }
    }

    public class CustomizationFailed : CustomizationEvent, IEquatable<CustomizationFailed>
    {
        public bool Equals(CustomizationFailed customizationFailed)
        {
            return (customizationFailed != null && base.Equals(customizationFailed));
        }

        public override bool Equals(object customizationFailed)
        {
            return Equals(customizationFailed as CustomizationFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationFault : VimFault, IEquatable<CustomizationFault>
    {
        public bool Equals(CustomizationFault customizationFault)
        {
            return (customizationFault != null && base.Equals(customizationFault));
        }

        public override bool Equals(object customizationFault)
        {
            return Equals(customizationFault as CustomizationFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationFixedIp : CustomizationIpGenerator, IEquatable<CustomizationFixedIp>
    {
        public string IpAddress { get; set; }

        public bool Equals(CustomizationFixedIp customizationFixedIp)
        {
            return (customizationFixedIp != null && this.IpAddress == customizationFixedIp.IpAddress);
        }

        public override bool Equals(object customizationFixedIp)
        {
            return Equals(customizationFixedIp as CustomizationFixedIp);
        }

        public override int GetHashCode()
        {
            return (IpAddress).GetHashCode();
        }
    }

    public class CustomizationFixedIpV6 : CustomizationIpV6Generator, IEquatable<CustomizationFixedIpV6>
    {
        public string IpAddress { get; set; }

        public int SubnetMask { get; set; }

        public bool Equals(CustomizationFixedIpV6 customizationFixedIpV6)
        {
            return (customizationFixedIpV6 != null && this.IpAddress == customizationFixedIpV6.IpAddress && this.SubnetMask == customizationFixedIpV6.SubnetMask);
        }

        public override bool Equals(object customizationFixedIpV6)
        {
            return Equals(customizationFixedIpV6 as CustomizationFixedIpV6);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + SubnetMask).GetHashCode();
        }
    }

    public class CustomizationFixedName : CustomizationName, IEquatable<CustomizationFixedName>
    {
        public string Name { get; set; }

        public bool Equals(CustomizationFixedName customizationFixedName)
        {
            return (customizationFixedName != null && this.Name == customizationFixedName.Name);
        }

        public override bool Equals(object customizationFixedName)
        {
            return Equals(customizationFixedName as CustomizationFixedName);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class CustomizationGlobalIPSettings : DynamicData, IEquatable<CustomizationGlobalIPSettings>
    {
        public string[] DnsSuffixList { get; set; }

        public string[] DnsServerList { get; set; }

        public bool Equals(CustomizationGlobalIPSettings customizationGlobalIPSettings)
        {
            return (customizationGlobalIPSettings != null && ((this.DnsSuffixList == null && customizationGlobalIPSettings.DnsSuffixList == null) || (this.DnsSuffixList != null && customizationGlobalIPSettings.DnsSuffixList != null && Enumerable.SequenceEqual(this.DnsSuffixList, customizationGlobalIPSettings.DnsSuffixList))) && ((this.DnsServerList == null && customizationGlobalIPSettings.DnsServerList == null) || (this.DnsServerList != null && customizationGlobalIPSettings.DnsServerList != null && Enumerable.SequenceEqual(this.DnsServerList, customizationGlobalIPSettings.DnsServerList))));
        }

        public override bool Equals(object customizationGlobalIPSettings)
        {
            return Equals(customizationGlobalIPSettings as CustomizationGlobalIPSettings);
        }

        public override int GetHashCode()
        {
            return (DnsSuffixList + "_" + DnsServerList).GetHashCode();
        }
    }

    public class CustomizationGuiRunOnce : DynamicData, IEquatable<CustomizationGuiRunOnce>
    {
        public string[] CommandList { get; set; }

        public bool Equals(CustomizationGuiRunOnce customizationGuiRunOnce)
        {
            return (customizationGuiRunOnce != null && ((this.CommandList == null && customizationGuiRunOnce.CommandList == null) || (this.CommandList != null && customizationGuiRunOnce.CommandList != null && Enumerable.SequenceEqual(this.CommandList, customizationGuiRunOnce.CommandList))));
        }

        public override bool Equals(object customizationGuiRunOnce)
        {
            return Equals(customizationGuiRunOnce as CustomizationGuiRunOnce);
        }

        public override int GetHashCode()
        {
            return (CommandList).GetHashCode();
        }
    }

    public class CustomizationGuiUnattended : DynamicData, IEquatable<CustomizationGuiUnattended>
    {
        public CustomizationPassword Password { get; set; }

        public int TimeZone { get; set; }

        public bool AutoLogon { get; set; }

        public int AutoLogonCount { get; set; }

        public bool Equals(CustomizationGuiUnattended customizationGuiUnattended)
        {
            return (customizationGuiUnattended != null && ((this.Password == null && customizationGuiUnattended.Password == null) || (this.Password != null && this.Password.Equals(customizationGuiUnattended.Password))) && this.TimeZone == customizationGuiUnattended.TimeZone && this.AutoLogon == customizationGuiUnattended.AutoLogon && this.AutoLogonCount == customizationGuiUnattended.AutoLogonCount);
        }

        public override bool Equals(object customizationGuiUnattended)
        {
            return Equals(customizationGuiUnattended as CustomizationGuiUnattended);
        }

        public override int GetHashCode()
        {
            return (Password + "_" + TimeZone + "_" + AutoLogon + "_" + AutoLogonCount).GetHashCode();
        }
    }

    public class CustomizationIdentification : DynamicData, IEquatable<CustomizationIdentification>
    {
        public string JoinWorkgroup { get; set; }

        public string JoinDomain { get; set; }

        public string DomainAdmin { get; set; }

        public CustomizationPassword DomainAdminPassword { get; set; }

        public bool Equals(CustomizationIdentification customizationIdentification)
        {
            return (customizationIdentification != null && this.JoinWorkgroup == customizationIdentification.JoinWorkgroup && this.JoinDomain == customizationIdentification.JoinDomain && this.DomainAdmin == customizationIdentification.DomainAdmin && ((this.DomainAdminPassword == null && customizationIdentification.DomainAdminPassword == null) || (this.DomainAdminPassword != null && this.DomainAdminPassword.Equals(customizationIdentification.DomainAdminPassword))));
        }

        public override bool Equals(object customizationIdentification)
        {
            return Equals(customizationIdentification as CustomizationIdentification);
        }

        public override int GetHashCode()
        {
            return (JoinWorkgroup + "_" + JoinDomain + "_" + DomainAdmin + "_" + DomainAdminPassword).GetHashCode();
        }
    }

    public class CustomizationIdentitySettings : DynamicData, IEquatable<CustomizationIdentitySettings>
    {
        public bool Equals(CustomizationIdentitySettings customizationIdentitySettings)
        {
            return (customizationIdentitySettings != null && base.Equals(customizationIdentitySettings));
        }

        public override bool Equals(object customizationIdentitySettings)
        {
            return Equals(customizationIdentitySettings as CustomizationIdentitySettings);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationIpGenerator : DynamicData, IEquatable<CustomizationIpGenerator>
    {
        public bool Equals(CustomizationIpGenerator customizationIpGenerator)
        {
            return (customizationIpGenerator != null && base.Equals(customizationIpGenerator));
        }

        public override bool Equals(object customizationIpGenerator)
        {
            return Equals(customizationIpGenerator as CustomizationIpGenerator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationIPSettings : DynamicData, IEquatable<CustomizationIPSettings>
    {
        public CustomizationIpGenerator Ip { get; set; }

        public string SubnetMask { get; set; }

        public string[] Gateway { get; set; }

        public CustomizationIPSettingsIpV6AddressSpec IpV6Spec { get; set; }

        public string[] DnsServerList { get; set; }

        public string DnsDomain { get; set; }

        public string PrimaryWINS { get; set; }

        public string SecondaryWINS { get; set; }

        public CustomizationNetBIOSMode? NetBIOS { get; set; }

        public bool Equals(CustomizationIPSettings customizationIPSettings)
        {
            return (customizationIPSettings != null && ((this.Ip == null && customizationIPSettings.Ip == null) || (this.Ip != null && this.Ip.Equals(customizationIPSettings.Ip))) && this.SubnetMask == customizationIPSettings.SubnetMask && ((this.Gateway == null && customizationIPSettings.Gateway == null) || (this.Gateway != null && customizationIPSettings.Gateway != null && Enumerable.SequenceEqual(this.Gateway, customizationIPSettings.Gateway))) && ((this.IpV6Spec == null && customizationIPSettings.IpV6Spec == null) || (this.IpV6Spec != null && this.IpV6Spec.Equals(customizationIPSettings.IpV6Spec))) && ((this.DnsServerList == null && customizationIPSettings.DnsServerList == null) || (this.DnsServerList != null && customizationIPSettings.DnsServerList != null && Enumerable.SequenceEqual(this.DnsServerList, customizationIPSettings.DnsServerList))) && this.DnsDomain == customizationIPSettings.DnsDomain && this.PrimaryWINS == customizationIPSettings.PrimaryWINS && this.SecondaryWINS == customizationIPSettings.SecondaryWINS && ((this.NetBIOS == null && customizationIPSettings.NetBIOS == null) || (this.NetBIOS != null && this.NetBIOS.Equals(customizationIPSettings.NetBIOS))));
        }

        public override bool Equals(object customizationIPSettings)
        {
            return Equals(customizationIPSettings as CustomizationIPSettings);
        }

        public override int GetHashCode()
        {
            return (Ip + "_" + SubnetMask + "_" + Gateway + "_" + IpV6Spec + "_" + DnsServerList + "_" + DnsDomain + "_" + PrimaryWINS + "_" + SecondaryWINS + "_" + NetBIOS).GetHashCode();
        }
    }

    public class CustomizationIPSettingsIpV6AddressSpec : DynamicData, IEquatable<CustomizationIPSettingsIpV6AddressSpec>
    {
        public CustomizationIpV6Generator[] Ip { get; set; }

        public string[] Gateway { get; set; }

        public bool Equals(CustomizationIPSettingsIpV6AddressSpec customizationIPSettingsIpV6AddressSpec)
        {
            return (customizationIPSettingsIpV6AddressSpec != null && ((this.Ip == null && customizationIPSettingsIpV6AddressSpec.Ip == null) || (this.Ip != null && customizationIPSettingsIpV6AddressSpec.Ip != null && Enumerable.SequenceEqual(this.Ip, customizationIPSettingsIpV6AddressSpec.Ip))) && ((this.Gateway == null && customizationIPSettingsIpV6AddressSpec.Gateway == null) || (this.Gateway != null && customizationIPSettingsIpV6AddressSpec.Gateway != null && Enumerable.SequenceEqual(this.Gateway, customizationIPSettingsIpV6AddressSpec.Gateway))));
        }

        public override bool Equals(object customizationIPSettingsIpV6AddressSpec)
        {
            return Equals(customizationIPSettingsIpV6AddressSpec as CustomizationIPSettingsIpV6AddressSpec);
        }

        public override int GetHashCode()
        {
            return (Ip + "_" + Gateway).GetHashCode();
        }
    }

    public class CustomizationIpV6Generator : DynamicData, IEquatable<CustomizationIpV6Generator>
    {
        public bool Equals(CustomizationIpV6Generator customizationIpV6Generator)
        {
            return (customizationIpV6Generator != null && base.Equals(customizationIpV6Generator));
        }

        public override bool Equals(object customizationIpV6Generator)
        {
            return Equals(customizationIpV6Generator as CustomizationIpV6Generator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationLicenseFilePrintData : DynamicData, IEquatable<CustomizationLicenseFilePrintData>
    {
        public CustomizationLicenseDataMode AutoMode { get; set; }

        public int? AutoUsers { get; set; }

        public bool Equals(CustomizationLicenseFilePrintData customizationLicenseFilePrintData)
        {
            return (customizationLicenseFilePrintData != null && this.AutoMode == customizationLicenseFilePrintData.AutoMode && ((this.AutoUsers == null && customizationLicenseFilePrintData.AutoUsers == null) || (this.AutoUsers != null && this.AutoUsers.Equals(customizationLicenseFilePrintData.AutoUsers))));
        }

        public override bool Equals(object customizationLicenseFilePrintData)
        {
            return Equals(customizationLicenseFilePrintData as CustomizationLicenseFilePrintData);
        }

        public override int GetHashCode()
        {
            return (AutoMode + "_" + AutoUsers).GetHashCode();
        }
    }

    public class CustomizationLinuxIdentityFailed : CustomizationFailed, IEquatable<CustomizationLinuxIdentityFailed>
    {
        public bool Equals(CustomizationLinuxIdentityFailed customizationLinuxIdentityFailed)
        {
            return (customizationLinuxIdentityFailed != null && base.Equals(customizationLinuxIdentityFailed));
        }

        public override bool Equals(object customizationLinuxIdentityFailed)
        {
            return Equals(customizationLinuxIdentityFailed as CustomizationLinuxIdentityFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationLinuxOptions : CustomizationOptions, IEquatable<CustomizationLinuxOptions>
    {
        public bool Equals(CustomizationLinuxOptions customizationLinuxOptions)
        {
            return (customizationLinuxOptions != null && base.Equals(customizationLinuxOptions));
        }

        public override bool Equals(object customizationLinuxOptions)
        {
            return Equals(customizationLinuxOptions as CustomizationLinuxOptions);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationLinuxPrep : CustomizationIdentitySettings, IEquatable<CustomizationLinuxPrep>
    {
        public CustomizationName HostName { get; set; }

        public string Domain { get; set; }

        public string TimeZone { get; set; }

        public bool? HwClockUTC { get; set; }

        public bool Equals(CustomizationLinuxPrep customizationLinuxPrep)
        {
            return (customizationLinuxPrep != null && ((this.HostName == null && customizationLinuxPrep.HostName == null) || (this.HostName != null && this.HostName.Equals(customizationLinuxPrep.HostName))) && this.Domain == customizationLinuxPrep.Domain && this.TimeZone == customizationLinuxPrep.TimeZone && ((this.HwClockUTC == null && customizationLinuxPrep.HwClockUTC == null) || (this.HwClockUTC != null && this.HwClockUTC.Equals(customizationLinuxPrep.HwClockUTC))));
        }

        public override bool Equals(object customizationLinuxPrep)
        {
            return Equals(customizationLinuxPrep as CustomizationLinuxPrep);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Domain + "_" + TimeZone + "_" + HwClockUTC).GetHashCode();
        }
    }

    public class CustomizationName : DynamicData, IEquatable<CustomizationName>
    {
        public bool Equals(CustomizationName customizationName)
        {
            return (customizationName != null && base.Equals(customizationName));
        }

        public override bool Equals(object customizationName)
        {
            return Equals(customizationName as CustomizationName);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationNetworkSetupFailed : CustomizationFailed, IEquatable<CustomizationNetworkSetupFailed>
    {
        public bool Equals(CustomizationNetworkSetupFailed customizationNetworkSetupFailed)
        {
            return (customizationNetworkSetupFailed != null && base.Equals(customizationNetworkSetupFailed));
        }

        public override bool Equals(object customizationNetworkSetupFailed)
        {
            return Equals(customizationNetworkSetupFailed as CustomizationNetworkSetupFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationOptions : DynamicData, IEquatable<CustomizationOptions>
    {
        public bool Equals(CustomizationOptions customizationOptions)
        {
            return (customizationOptions != null && base.Equals(customizationOptions));
        }

        public override bool Equals(object customizationOptions)
        {
            return Equals(customizationOptions as CustomizationOptions);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationPassword : DynamicData, IEquatable<CustomizationPassword>
    {
        public string Value { get; set; }

        public bool PlainText { get; set; }

        public bool Equals(CustomizationPassword customizationPassword)
        {
            return (customizationPassword != null && this.Value == customizationPassword.Value && this.PlainText == customizationPassword.PlainText);
        }

        public override bool Equals(object customizationPassword)
        {
            return Equals(customizationPassword as CustomizationPassword);
        }

        public override int GetHashCode()
        {
            return (Value + "_" + PlainText).GetHashCode();
        }
    }

    public class CustomizationPending : CustomizationFault, IEquatable<CustomizationPending>
    {
        public bool Equals(CustomizationPending customizationPending)
        {
            return (customizationPending != null && base.Equals(customizationPending));
        }

        public override bool Equals(object customizationPending)
        {
            return Equals(customizationPending as CustomizationPending);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationPrefixName : CustomizationName, IEquatable<CustomizationPrefixName>
    {
        public string Base { get; set; }

        public bool Equals(CustomizationPrefixName customizationPrefixName)
        {
            return (customizationPrefixName != null && this.Base == customizationPrefixName.Base);
        }

        public override bool Equals(object customizationPrefixName)
        {
            return Equals(customizationPrefixName as CustomizationPrefixName);
        }

        public override int GetHashCode()
        {
            return (Base).GetHashCode();
        }
    }

    public class CustomizationSpec : DynamicData, IEquatable<CustomizationSpec>
    {
        public CustomizationOptions Options { get; set; }

        public CustomizationIdentitySettings Identity { get; set; }

        public CustomizationGlobalIPSettings GlobalIPSettings { get; set; }

        public CustomizationAdapterMapping[] NicSettingMap { get; set; }

        public sbyte[] EncryptionKey { get; set; }

        public bool Equals(CustomizationSpec customizationSpec)
        {
            return (customizationSpec != null && ((this.Options == null && customizationSpec.Options == null) || (this.Options != null && this.Options.Equals(customizationSpec.Options))) && ((this.Identity == null && customizationSpec.Identity == null) || (this.Identity != null && this.Identity.Equals(customizationSpec.Identity))) && ((this.GlobalIPSettings == null && customizationSpec.GlobalIPSettings == null) || (this.GlobalIPSettings != null && this.GlobalIPSettings.Equals(customizationSpec.GlobalIPSettings))) && ((this.NicSettingMap == null && customizationSpec.NicSettingMap == null) || (this.NicSettingMap != null && customizationSpec.NicSettingMap != null && Enumerable.SequenceEqual(this.NicSettingMap, customizationSpec.NicSettingMap))) && ((this.EncryptionKey == null && customizationSpec.EncryptionKey == null) || (this.EncryptionKey != null && customizationSpec.EncryptionKey != null && Enumerable.SequenceEqual(this.EncryptionKey, customizationSpec.EncryptionKey))));
        }

        public override bool Equals(object customizationSpec)
        {
            return Equals(customizationSpec as CustomizationSpec);
        }

        public override int GetHashCode()
        {
            return (Options + "_" + Identity + "_" + GlobalIPSettings + "_" + NicSettingMap + "_" + EncryptionKey).GetHashCode();
        }
    }

    public class CustomizationSpecInfo : DynamicData, IEquatable<CustomizationSpecInfo>
    {
        public string Name { get; set; }

        public string Description { get; set; }

        public string Type { get; set; }

        public string ChangeVersion { get; set; }

        public DateTime? LastUpdateTime { get; set; }

        public bool Equals(CustomizationSpecInfo customizationSpecInfo)
        {
            return (customizationSpecInfo != null && this.Name == customizationSpecInfo.Name && this.Description == customizationSpecInfo.Description && this.Type == customizationSpecInfo.Type && this.ChangeVersion == customizationSpecInfo.ChangeVersion && ((this.LastUpdateTime == null && customizationSpecInfo.LastUpdateTime == null) || (this.LastUpdateTime != null && this.LastUpdateTime.Equals(customizationSpecInfo.LastUpdateTime))));
        }

        public override bool Equals(object customizationSpecInfo)
        {
            return Equals(customizationSpecInfo as CustomizationSpecInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Description + "_" + Type + "_" + ChangeVersion + "_" + LastUpdateTime).GetHashCode();
        }
    }

    public class CustomizationSpecItem : DynamicData, IEquatable<CustomizationSpecItem>
    {
        public CustomizationSpecInfo Info { get; set; }

        public CustomizationSpec Spec { get; set; }

        public bool Equals(CustomizationSpecItem customizationSpecItem)
        {
            return (customizationSpecItem != null && ((this.Info == null && customizationSpecItem.Info == null) || (this.Info != null && this.Info.Equals(customizationSpecItem.Info))) && ((this.Spec == null && customizationSpecItem.Spec == null) || (this.Spec != null && this.Spec.Equals(customizationSpecItem.Spec))));
        }

        public override bool Equals(object customizationSpecItem)
        {
            return Equals(customizationSpecItem as CustomizationSpecItem);
        }

        public override int GetHashCode()
        {
            return (Info + "_" + Spec).GetHashCode();
        }
    }

    public class CustomizationSpecManager : ViewBase, IEquatable<CustomizationSpecManager>
    {
        public CustomizationSpecInfo[] Info { get; set; }

        public sbyte[] EncryptionKey { get; set; }

        public bool DoesCustomizationSpecExist(string name)
        {
            return default(bool);
        }

        public CustomizationSpecItem GetCustomizationSpec(string name)
        {
            return default(CustomizationSpecItem);
        }

        public void CreateCustomizationSpec(CustomizationSpecItem item)
        {
        }

        public void OverwriteCustomizationSpec(CustomizationSpecItem item)
        {
        }

        public void DeleteCustomizationSpec(string name)
        {
        }

        public void DuplicateCustomizationSpec(string name, string newName)
        {
        }

        public void RenameCustomizationSpec(string name, string newName)
        {
        }

        public string CustomizationSpecItemToXml(CustomizationSpecItem item)
        {
            return default(string);
        }

        public CustomizationSpecItem XmlToCustomizationSpecItem(string specItemXml)
        {
            return default(CustomizationSpecItem);
        }

        public void CheckCustomizationResources(string guestOs)
        {
        }

        public bool Equals(CustomizationSpecManager customizationSpecManager)
        {
            return (customizationSpecManager != null && ((this.Info == null && customizationSpecManager.Info == null) || (this.Info != null && customizationSpecManager.Info != null && Enumerable.SequenceEqual(this.Info, customizationSpecManager.Info))) && ((this.EncryptionKey == null && customizationSpecManager.EncryptionKey == null) || (this.EncryptionKey != null && customizationSpecManager.EncryptionKey != null && Enumerable.SequenceEqual(this.EncryptionKey, customizationSpecManager.EncryptionKey))));
        }

        public override bool Equals(object customizationSpecManager)
        {
            return Equals(customizationSpecManager as CustomizationSpecManager);
        }

        public override int GetHashCode()
        {
            return (Info + "_" + EncryptionKey).GetHashCode();
        }
    }

    public class CustomizationStartedEvent : CustomizationEvent, IEquatable<CustomizationStartedEvent>
    {
        public bool Equals(CustomizationStartedEvent customizationStartedEvent)
        {
            return (customizationStartedEvent != null && base.Equals(customizationStartedEvent));
        }

        public override bool Equals(object customizationStartedEvent)
        {
            return Equals(customizationStartedEvent as CustomizationStartedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationStatelessIpV6Generator : CustomizationIpV6Generator, IEquatable<CustomizationStatelessIpV6Generator>
    {
        public bool Equals(CustomizationStatelessIpV6Generator customizationStatelessIpV6Generator)
        {
            return (customizationStatelessIpV6Generator != null && base.Equals(customizationStatelessIpV6Generator));
        }

        public override bool Equals(object customizationStatelessIpV6Generator)
        {
            return Equals(customizationStatelessIpV6Generator as CustomizationStatelessIpV6Generator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationSucceeded : CustomizationEvent, IEquatable<CustomizationSucceeded>
    {
        public bool Equals(CustomizationSucceeded customizationSucceeded)
        {
            return (customizationSucceeded != null && base.Equals(customizationSucceeded));
        }

        public override bool Equals(object customizationSucceeded)
        {
            return Equals(customizationSucceeded as CustomizationSucceeded);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationSysprep : CustomizationIdentitySettings, IEquatable<CustomizationSysprep>
    {
        public CustomizationGuiUnattended GuiUnattended { get; set; }

        public CustomizationUserData UserData { get; set; }

        public CustomizationGuiRunOnce GuiRunOnce { get; set; }

        public CustomizationIdentification Identification { get; set; }

        public CustomizationLicenseFilePrintData LicenseFilePrintData { get; set; }

        public bool Equals(CustomizationSysprep customizationSysprep)
        {
            return (customizationSysprep != null && ((this.GuiUnattended == null && customizationSysprep.GuiUnattended == null) || (this.GuiUnattended != null && this.GuiUnattended.Equals(customizationSysprep.GuiUnattended))) && ((this.UserData == null && customizationSysprep.UserData == null) || (this.UserData != null && this.UserData.Equals(customizationSysprep.UserData))) && ((this.GuiRunOnce == null && customizationSysprep.GuiRunOnce == null) || (this.GuiRunOnce != null && this.GuiRunOnce.Equals(customizationSysprep.GuiRunOnce))) && ((this.Identification == null && customizationSysprep.Identification == null) || (this.Identification != null && this.Identification.Equals(customizationSysprep.Identification))) && ((this.LicenseFilePrintData == null && customizationSysprep.LicenseFilePrintData == null) || (this.LicenseFilePrintData != null && this.LicenseFilePrintData.Equals(customizationSysprep.LicenseFilePrintData))));
        }

        public override bool Equals(object customizationSysprep)
        {
            return Equals(customizationSysprep as CustomizationSysprep);
        }

        public override int GetHashCode()
        {
            return (GuiUnattended + "_" + UserData + "_" + GuiRunOnce + "_" + Identification + "_" + LicenseFilePrintData).GetHashCode();
        }
    }

    public class CustomizationSysprepFailed : CustomizationFailed, IEquatable<CustomizationSysprepFailed>
    {
        public string SysprepVersion { get; set; }

        public string SystemVersion { get; set; }

        public bool Equals(CustomizationSysprepFailed customizationSysprepFailed)
        {
            return (customizationSysprepFailed != null && this.SysprepVersion == customizationSysprepFailed.SysprepVersion && this.SystemVersion == customizationSysprepFailed.SystemVersion);
        }

        public override bool Equals(object customizationSysprepFailed)
        {
            return Equals(customizationSysprepFailed as CustomizationSysprepFailed);
        }

        public override int GetHashCode()
        {
            return (SysprepVersion + "_" + SystemVersion).GetHashCode();
        }
    }

    public class CustomizationSysprepText : CustomizationIdentitySettings, IEquatable<CustomizationSysprepText>
    {
        public string Value { get; set; }

        public bool Equals(CustomizationSysprepText customizationSysprepText)
        {
            return (customizationSysprepText != null && this.Value == customizationSysprepText.Value);
        }

        public override bool Equals(object customizationSysprepText)
        {
            return Equals(customizationSysprepText as CustomizationSysprepText);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class CustomizationUnknownFailure : CustomizationFailed, IEquatable<CustomizationUnknownFailure>
    {
        public bool Equals(CustomizationUnknownFailure customizationUnknownFailure)
        {
            return (customizationUnknownFailure != null && base.Equals(customizationUnknownFailure));
        }

        public override bool Equals(object customizationUnknownFailure)
        {
            return Equals(customizationUnknownFailure as CustomizationUnknownFailure);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationUnknownIpGenerator : CustomizationIpGenerator, IEquatable<CustomizationUnknownIpGenerator>
    {
        public bool Equals(CustomizationUnknownIpGenerator customizationUnknownIpGenerator)
        {
            return (customizationUnknownIpGenerator != null && base.Equals(customizationUnknownIpGenerator));
        }

        public override bool Equals(object customizationUnknownIpGenerator)
        {
            return Equals(customizationUnknownIpGenerator as CustomizationUnknownIpGenerator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationUnknownIpV6Generator : CustomizationIpV6Generator, IEquatable<CustomizationUnknownIpV6Generator>
    {
        public bool Equals(CustomizationUnknownIpV6Generator customizationUnknownIpV6Generator)
        {
            return (customizationUnknownIpV6Generator != null && base.Equals(customizationUnknownIpV6Generator));
        }

        public override bool Equals(object customizationUnknownIpV6Generator)
        {
            return Equals(customizationUnknownIpV6Generator as CustomizationUnknownIpV6Generator);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationUnknownName : CustomizationName, IEquatable<CustomizationUnknownName>
    {
        public bool Equals(CustomizationUnknownName customizationUnknownName)
        {
            return (customizationUnknownName != null && base.Equals(customizationUnknownName));
        }

        public override bool Equals(object customizationUnknownName)
        {
            return Equals(customizationUnknownName as CustomizationUnknownName);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationUserData : DynamicData, IEquatable<CustomizationUserData>
    {
        public string FullName { get; set; }

        public string OrgName { get; set; }

        public CustomizationName ComputerName { get; set; }

        public string ProductId { get; set; }

        public bool Equals(CustomizationUserData customizationUserData)
        {
            return (customizationUserData != null && this.FullName == customizationUserData.FullName && this.OrgName == customizationUserData.OrgName && ((this.ComputerName == null && customizationUserData.ComputerName == null) || (this.ComputerName != null && this.ComputerName.Equals(customizationUserData.ComputerName))) && this.ProductId == customizationUserData.ProductId);
        }

        public override bool Equals(object customizationUserData)
        {
            return Equals(customizationUserData as CustomizationUserData);
        }

        public override int GetHashCode()
        {
            return (FullName + "_" + OrgName + "_" + ComputerName + "_" + ProductId).GetHashCode();
        }
    }

    public class CustomizationVirtualMachineName : CustomizationName, IEquatable<CustomizationVirtualMachineName>
    {
        public bool Equals(CustomizationVirtualMachineName customizationVirtualMachineName)
        {
            return (customizationVirtualMachineName != null && base.Equals(customizationVirtualMachineName));
        }

        public override bool Equals(object customizationVirtualMachineName)
        {
            return Equals(customizationVirtualMachineName as CustomizationVirtualMachineName);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class CustomizationWinOptions : CustomizationOptions, IEquatable<CustomizationWinOptions>
    {
        public bool ChangeSID { get; set; }

        public bool DeleteAccounts { get; set; }

        public CustomizationSysprepRebootOption? Reboot { get; set; }

        public bool Equals(CustomizationWinOptions customizationWinOptions)
        {
            return (customizationWinOptions != null && this.ChangeSID == customizationWinOptions.ChangeSID && this.DeleteAccounts == customizationWinOptions.DeleteAccounts && ((this.Reboot == null && customizationWinOptions.Reboot == null) || (this.Reboot != null && this.Reboot.Equals(customizationWinOptions.Reboot))));
        }

        public override bool Equals(object customizationWinOptions)
        {
            return Equals(customizationWinOptions as CustomizationWinOptions);
        }

        public override int GetHashCode()
        {
            return (ChangeSID + "_" + DeleteAccounts + "_" + Reboot).GetHashCode();
        }
    }

    public class DailyTaskScheduler : HourlyTaskScheduler, IEquatable<DailyTaskScheduler>
    {
        public int Hour { get; set; }

        public bool Equals(DailyTaskScheduler dailyTaskScheduler)
        {
            return (dailyTaskScheduler != null && this.Hour == dailyTaskScheduler.Hour);
        }

        public override bool Equals(object dailyTaskScheduler)
        {
            return Equals(dailyTaskScheduler as DailyTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Hour).GetHashCode();
        }
    }

    public class DasAdmissionControlDisabledEvent : ClusterEvent, IEquatable<DasAdmissionControlDisabledEvent>
    {
        public bool Equals(DasAdmissionControlDisabledEvent dasAdmissionControlDisabledEvent)
        {
            return (dasAdmissionControlDisabledEvent != null && base.Equals(dasAdmissionControlDisabledEvent));
        }

        public override bool Equals(object dasAdmissionControlDisabledEvent)
        {
            return Equals(dasAdmissionControlDisabledEvent as DasAdmissionControlDisabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasAdmissionControlEnabledEvent : ClusterEvent, IEquatable<DasAdmissionControlEnabledEvent>
    {
        public bool Equals(DasAdmissionControlEnabledEvent dasAdmissionControlEnabledEvent)
        {
            return (dasAdmissionControlEnabledEvent != null && base.Equals(dasAdmissionControlEnabledEvent));
        }

        public override bool Equals(object dasAdmissionControlEnabledEvent)
        {
            return Equals(dasAdmissionControlEnabledEvent as DasAdmissionControlEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasAgentFoundEvent : ClusterEvent, IEquatable<DasAgentFoundEvent>
    {
        public bool Equals(DasAgentFoundEvent dasAgentFoundEvent)
        {
            return (dasAgentFoundEvent != null && base.Equals(dasAgentFoundEvent));
        }

        public override bool Equals(object dasAgentFoundEvent)
        {
            return Equals(dasAgentFoundEvent as DasAgentFoundEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasAgentUnavailableEvent : ClusterEvent, IEquatable<DasAgentUnavailableEvent>
    {
        public bool Equals(DasAgentUnavailableEvent dasAgentUnavailableEvent)
        {
            return (dasAgentUnavailableEvent != null && base.Equals(dasAgentUnavailableEvent));
        }

        public override bool Equals(object dasAgentUnavailableEvent)
        {
            return Equals(dasAgentUnavailableEvent as DasAgentUnavailableEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasClusterIsolatedEvent : ClusterEvent, IEquatable<DasClusterIsolatedEvent>
    {
        public bool Equals(DasClusterIsolatedEvent dasClusterIsolatedEvent)
        {
            return (dasClusterIsolatedEvent != null && base.Equals(dasClusterIsolatedEvent));
        }

        public override bool Equals(object dasClusterIsolatedEvent)
        {
            return Equals(dasClusterIsolatedEvent as DasClusterIsolatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasConfigFault : VimFault, IEquatable<DasConfigFault>
    {
        public string Reason { get; set; }

        public string Output { get; set; }

        public Event[] Event { get; set; }

        public bool Equals(DasConfigFault dasConfigFault)
        {
            return (dasConfigFault != null && this.Reason == dasConfigFault.Reason && this.Output == dasConfigFault.Output && ((this.Event == null && dasConfigFault.Event == null) || (this.Event != null && dasConfigFault.Event != null && Enumerable.SequenceEqual(this.Event, dasConfigFault.Event))));
        }

        public override bool Equals(object dasConfigFault)
        {
            return Equals(dasConfigFault as DasConfigFault);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + Output + "_" + Event).GetHashCode();
        }
    }

    public class DasDisabledEvent : ClusterEvent, IEquatable<DasDisabledEvent>
    {
        public bool Equals(DasDisabledEvent dasDisabledEvent)
        {
            return (dasDisabledEvent != null && base.Equals(dasDisabledEvent));
        }

        public override bool Equals(object dasDisabledEvent)
        {
            return Equals(dasDisabledEvent as DasDisabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasEnabledEvent : ClusterEvent, IEquatable<DasEnabledEvent>
    {
        public bool Equals(DasEnabledEvent dasEnabledEvent)
        {
            return (dasEnabledEvent != null && base.Equals(dasEnabledEvent));
        }

        public override bool Equals(object dasEnabledEvent)
        {
            return Equals(dasEnabledEvent as DasEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DasHeartbeatDatastoreInfo : DynamicData, IEquatable<DasHeartbeatDatastoreInfo>
    {
        public ManagedObjectReference Datastore { get; set; }

        public ManagedObjectReference[] Hosts { get; set; }

        public DasHeartbeatDatastoreInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DasHeartbeatDatastoreInfo dasHeartbeatDatastoreInfo)
        {
            return (dasHeartbeatDatastoreInfo != null && ((this.Datastore == null && dasHeartbeatDatastoreInfo.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(dasHeartbeatDatastoreInfo.Datastore))) && ((this.Hosts == null && dasHeartbeatDatastoreInfo.Hosts == null) || (this.Hosts != null && dasHeartbeatDatastoreInfo.Hosts != null && Enumerable.SequenceEqual(this.Hosts, dasHeartbeatDatastoreInfo.Hosts))) && ((this.LinkedView == null && dasHeartbeatDatastoreInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dasHeartbeatDatastoreInfo.LinkedView))));
        }

        public override bool Equals(object dasHeartbeatDatastoreInfo)
        {
            return Equals(dasHeartbeatDatastoreInfo as DasHeartbeatDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class DasHeartbeatDatastoreInfo_LinkedView : IEquatable<DasHeartbeatDatastoreInfo_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public HostSystem[] Hosts { get; set; }

        public bool Equals(DasHeartbeatDatastoreInfo_LinkedView dasHeartbeatDatastoreInfo_LinkedView)
        {
            return (dasHeartbeatDatastoreInfo_LinkedView != null && ((this.Datastore == null && dasHeartbeatDatastoreInfo_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(dasHeartbeatDatastoreInfo_LinkedView.Datastore))) && ((this.Hosts == null && dasHeartbeatDatastoreInfo_LinkedView.Hosts == null) || (this.Hosts != null && dasHeartbeatDatastoreInfo_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, dasHeartbeatDatastoreInfo_LinkedView.Hosts))));
        }

        public override bool Equals(object dasHeartbeatDatastoreInfo_LinkedView)
        {
            return Equals(dasHeartbeatDatastoreInfo_LinkedView as DasHeartbeatDatastoreInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Hosts).GetHashCode();
        }
    }

    public class DasHostFailedEvent : ClusterEvent, IEquatable<DasHostFailedEvent>
    {
        public HostEventArgument FailedHost { get; set; }

        public bool Equals(DasHostFailedEvent dasHostFailedEvent)
        {
            return (dasHostFailedEvent != null && ((this.FailedHost == null && dasHostFailedEvent.FailedHost == null) || (this.FailedHost != null && this.FailedHost.Equals(dasHostFailedEvent.FailedHost))));
        }

        public override bool Equals(object dasHostFailedEvent)
        {
            return Equals(dasHostFailedEvent as DasHostFailedEvent);
        }

        public override int GetHashCode()
        {
            return (FailedHost).GetHashCode();
        }
    }

    public class DasHostIsolatedEvent : ClusterEvent, IEquatable<DasHostIsolatedEvent>
    {
        public HostEventArgument IsolatedHost { get; set; }

        public bool Equals(DasHostIsolatedEvent dasHostIsolatedEvent)
        {
            return (dasHostIsolatedEvent != null && ((this.IsolatedHost == null && dasHostIsolatedEvent.IsolatedHost == null) || (this.IsolatedHost != null && this.IsolatedHost.Equals(dasHostIsolatedEvent.IsolatedHost))));
        }

        public override bool Equals(object dasHostIsolatedEvent)
        {
            return Equals(dasHostIsolatedEvent as DasHostIsolatedEvent);
        }

        public override int GetHashCode()
        {
            return (IsolatedHost).GetHashCode();
        }
    }

    public class DatabaseError : RuntimeFault, IEquatable<DatabaseError>
    {
        public bool Equals(DatabaseError databaseError)
        {
            return (databaseError != null && base.Equals(databaseError));
        }

        public override bool Equals(object databaseError)
        {
            return Equals(databaseError as DatabaseError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatabaseSizeEstimate : DynamicData, IEquatable<DatabaseSizeEstimate>
    {
        public long Size { get; set; }

        public bool Equals(DatabaseSizeEstimate databaseSizeEstimate)
        {
            return (databaseSizeEstimate != null && this.Size == databaseSizeEstimate.Size);
        }

        public override bool Equals(object databaseSizeEstimate)
        {
            return Equals(databaseSizeEstimate as DatabaseSizeEstimate);
        }

        public override int GetHashCode()
        {
            return (Size).GetHashCode();
        }
    }

    public class DatabaseSizeParam : DynamicData, IEquatable<DatabaseSizeParam>
    {
        public InventoryDescription InventoryDesc { get; set; }

        public PerformanceStatisticsDescription PerfStatsDesc { get; set; }

        public bool Equals(DatabaseSizeParam databaseSizeParam)
        {
            return (databaseSizeParam != null && ((this.InventoryDesc == null && databaseSizeParam.InventoryDesc == null) || (this.InventoryDesc != null && this.InventoryDesc.Equals(databaseSizeParam.InventoryDesc))) && ((this.PerfStatsDesc == null && databaseSizeParam.PerfStatsDesc == null) || (this.PerfStatsDesc != null && this.PerfStatsDesc.Equals(databaseSizeParam.PerfStatsDesc))));
        }

        public override bool Equals(object databaseSizeParam)
        {
            return Equals(databaseSizeParam as DatabaseSizeParam);
        }

        public override int GetHashCode()
        {
            return (InventoryDesc + "_" + PerfStatsDesc).GetHashCode();
        }
    }

    public class Datacenter : ManagedEntity, IEquatable<Datacenter>
    {
        public ManagedObjectReference VmFolder { get; set; }

        public ManagedObjectReference HostFolder { get; set; }

        public ManagedObjectReference DatastoreFolder { get; set; }

        public ManagedObjectReference NetworkFolder { get; set; }

        public ManagedObjectReference[] Datastore { get; set; }

        public ManagedObjectReference[] Network { get; set; }

        public DatacenterConfigInfo Configuration { get; set; }

        public new Datacenter_LinkedView LinkedView { get; set; }

        public DatacenterBasicConnectInfo[] BatchQueryConnectInfo(HostConnectSpec[] hostSpecs)
        {
            return default(DatacenterBasicConnectInfo[]);
        }

        public HostConnectInfo QueryConnectionInfo(string hostname, int port, string username, string password, string sslThumbprint)
        {
            return default(HostConnectInfo);
        }

        public HostConnectInfo QueryConnectionInfoViaSpec(HostConnectSpec spec)
        {
            return default(HostConnectInfo);
        }

        public ManagedObjectReference PowerOnMultiVM_Task(ManagedObjectReference[] vm, OptionValue[] option)
        {
            return default(ManagedObjectReference);
        }

        public ClusterPowerOnVmResult PowerOnMultiVM(ManagedObjectReference[] vm, OptionValue[] option)
        {
            return default(ClusterPowerOnVmResult);
        }

        public VirtualMachineConfigOptionDescriptor[] queryDatacenterConfigOptionDescriptor()
        {
            return default(VirtualMachineConfigOptionDescriptor[]);
        }

        public ManagedObjectReference ReconfigureDatacenter_Task(DatacenterConfigSpec spec, bool modify)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureDatacenter(DatacenterConfigSpec spec, bool modify)
        {
        }

        public bool Equals(Datacenter datacenter)
        {
            return (datacenter != null && ((this.VmFolder == null && datacenter.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(datacenter.VmFolder))) && ((this.HostFolder == null && datacenter.HostFolder == null) || (this.HostFolder != null && this.HostFolder.Equals(datacenter.HostFolder))) && ((this.DatastoreFolder == null && datacenter.DatastoreFolder == null) || (this.DatastoreFolder != null && this.DatastoreFolder.Equals(datacenter.DatastoreFolder))) && ((this.NetworkFolder == null && datacenter.NetworkFolder == null) || (this.NetworkFolder != null && this.NetworkFolder.Equals(datacenter.NetworkFolder))) && ((this.Datastore == null && datacenter.Datastore == null) || (this.Datastore != null && datacenter.Datastore != null && Enumerable.SequenceEqual(this.Datastore, datacenter.Datastore))) && ((this.Network == null && datacenter.Network == null) || (this.Network != null && datacenter.Network != null && Enumerable.SequenceEqual(this.Network, datacenter.Network))) && ((this.Configuration == null && datacenter.Configuration == null) || (this.Configuration != null && this.Configuration.Equals(datacenter.Configuration))) && ((this.LinkedView == null && datacenter.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datacenter.LinkedView))));
        }

        public override bool Equals(object datacenter)
        {
            return Equals(datacenter as Datacenter);
        }

        public override int GetHashCode()
        {
            return (VmFolder + "_" + HostFolder + "_" + DatastoreFolder + "_" + NetworkFolder + "_" + Datastore + "_" + Network + "_" + Configuration + "_" + LinkedView).GetHashCode();
        }
    }

    public class Datacenter_LinkedView : ManagedEntity_LinkedView, IEquatable<Datacenter_LinkedView>
    {
        public Folder VmFolder { get; set; }

        public Folder HostFolder { get; set; }

        public Folder DatastoreFolder { get; set; }

        public Folder NetworkFolder { get; set; }

        public Datastore[] Datastore { get; set; }

        public Network[] Network { get; set; }

        public bool Equals(Datacenter_LinkedView datacenter_LinkedView)
        {
            return (datacenter_LinkedView != null && ((this.VmFolder == null && datacenter_LinkedView.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(datacenter_LinkedView.VmFolder))) && ((this.HostFolder == null && datacenter_LinkedView.HostFolder == null) || (this.HostFolder != null && this.HostFolder.Equals(datacenter_LinkedView.HostFolder))) && ((this.DatastoreFolder == null && datacenter_LinkedView.DatastoreFolder == null) || (this.DatastoreFolder != null && this.DatastoreFolder.Equals(datacenter_LinkedView.DatastoreFolder))) && ((this.NetworkFolder == null && datacenter_LinkedView.NetworkFolder == null) || (this.NetworkFolder != null && this.NetworkFolder.Equals(datacenter_LinkedView.NetworkFolder))) && ((this.Datastore == null && datacenter_LinkedView.Datastore == null) || (this.Datastore != null && datacenter_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, datacenter_LinkedView.Datastore))) && ((this.Network == null && datacenter_LinkedView.Network == null) || (this.Network != null && datacenter_LinkedView.Network != null && Enumerable.SequenceEqual(this.Network, datacenter_LinkedView.Network))));
        }

        public override bool Equals(object datacenter_LinkedView)
        {
            return Equals(datacenter_LinkedView as Datacenter_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmFolder + "_" + HostFolder + "_" + DatastoreFolder + "_" + NetworkFolder + "_" + Datastore + "_" + Network).GetHashCode();
        }
    }

    public class DatacenterBasicConnectInfo : DynamicData, IEquatable<DatacenterBasicConnectInfo>
    {
        public string Hostname { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public string ServerIp { get; set; }

        public int? NumVm { get; set; }

        public int? NumPoweredOnVm { get; set; }

        public AboutInfo HostProductInfo { get; set; }

        public string HardwareVendor { get; set; }

        public string HardwareModel { get; set; }

        public bool Equals(DatacenterBasicConnectInfo datacenterBasicConnectInfo)
        {
            return (datacenterBasicConnectInfo != null && this.Hostname == datacenterBasicConnectInfo.Hostname && ((this.Error == null && datacenterBasicConnectInfo.Error == null) || (this.Error != null && this.Error.Equals(datacenterBasicConnectInfo.Error))) && this.ServerIp == datacenterBasicConnectInfo.ServerIp && ((this.NumVm == null && datacenterBasicConnectInfo.NumVm == null) || (this.NumVm != null && this.NumVm.Equals(datacenterBasicConnectInfo.NumVm))) && ((this.NumPoweredOnVm == null && datacenterBasicConnectInfo.NumPoweredOnVm == null) || (this.NumPoweredOnVm != null && this.NumPoweredOnVm.Equals(datacenterBasicConnectInfo.NumPoweredOnVm))) && ((this.HostProductInfo == null && datacenterBasicConnectInfo.HostProductInfo == null) || (this.HostProductInfo != null && this.HostProductInfo.Equals(datacenterBasicConnectInfo.HostProductInfo))) && this.HardwareVendor == datacenterBasicConnectInfo.HardwareVendor && this.HardwareModel == datacenterBasicConnectInfo.HardwareModel);
        }

        public override bool Equals(object datacenterBasicConnectInfo)
        {
            return Equals(datacenterBasicConnectInfo as DatacenterBasicConnectInfo);
        }

        public override int GetHashCode()
        {
            return (Hostname + "_" + Error + "_" + ServerIp + "_" + NumVm + "_" + NumPoweredOnVm + "_" + HostProductInfo + "_" + HardwareVendor + "_" + HardwareModel).GetHashCode();
        }
    }

    public class DatacenterConfigInfo : DynamicData, IEquatable<DatacenterConfigInfo>
    {
        public string DefaultHardwareVersionKey { get; set; }

        public bool Equals(DatacenterConfigInfo datacenterConfigInfo)
        {
            return (datacenterConfigInfo != null && this.DefaultHardwareVersionKey == datacenterConfigInfo.DefaultHardwareVersionKey);
        }

        public override bool Equals(object datacenterConfigInfo)
        {
            return Equals(datacenterConfigInfo as DatacenterConfigInfo);
        }

        public override int GetHashCode()
        {
            return (DefaultHardwareVersionKey).GetHashCode();
        }
    }

    public class DatacenterConfigSpec : DynamicData, IEquatable<DatacenterConfigSpec>
    {
        public string DefaultHardwareVersionKey { get; set; }

        public bool Equals(DatacenterConfigSpec datacenterConfigSpec)
        {
            return (datacenterConfigSpec != null && this.DefaultHardwareVersionKey == datacenterConfigSpec.DefaultHardwareVersionKey);
        }

        public override bool Equals(object datacenterConfigSpec)
        {
            return Equals(datacenterConfigSpec as DatacenterConfigSpec);
        }

        public override int GetHashCode()
        {
            return (DefaultHardwareVersionKey).GetHashCode();
        }
    }

    public class DatacenterCreatedEvent : DatacenterEvent, IEquatable<DatacenterCreatedEvent>
    {
        public FolderEventArgument Parent { get; set; }

        public bool Equals(DatacenterCreatedEvent datacenterCreatedEvent)
        {
            return (datacenterCreatedEvent != null && ((this.Parent == null && datacenterCreatedEvent.Parent == null) || (this.Parent != null && this.Parent.Equals(datacenterCreatedEvent.Parent))));
        }

        public override bool Equals(object datacenterCreatedEvent)
        {
            return Equals(datacenterCreatedEvent as DatacenterCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Parent).GetHashCode();
        }
    }

    public class DatacenterEvent : Event, IEquatable<DatacenterEvent>
    {
        public bool Equals(DatacenterEvent datacenterEvent)
        {
            return (datacenterEvent != null && base.Equals(datacenterEvent));
        }

        public override bool Equals(object datacenterEvent)
        {
            return Equals(datacenterEvent as DatacenterEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatacenterEventArgument : EntityEventArgument, IEquatable<DatacenterEventArgument>
    {
        public ManagedObjectReference Datacenter { get; set; }

        public DatacenterEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(DatacenterEventArgument datacenterEventArgument)
        {
            return (datacenterEventArgument != null && ((this.Datacenter == null && datacenterEventArgument.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(datacenterEventArgument.Datacenter))) && ((this.LinkedView == null && datacenterEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datacenterEventArgument.LinkedView))));
        }

        public override bool Equals(object datacenterEventArgument)
        {
            return Equals(datacenterEventArgument as DatacenterEventArgument);
        }

        public override int GetHashCode()
        {
            return (Datacenter + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatacenterEventArgument_LinkedView : IEquatable<DatacenterEventArgument_LinkedView>
    {
        public Datacenter Datacenter { get; set; }

        public bool Equals(DatacenterEventArgument_LinkedView datacenterEventArgument_LinkedView)
        {
            return (datacenterEventArgument_LinkedView != null && ((this.Datacenter == null && datacenterEventArgument_LinkedView.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(datacenterEventArgument_LinkedView.Datacenter))));
        }

        public override bool Equals(object datacenterEventArgument_LinkedView)
        {
            return Equals(datacenterEventArgument_LinkedView as DatacenterEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datacenter).GetHashCode();
        }
    }

    public class DatacenterMismatch : MigrationFault, IEquatable<DatacenterMismatch>
    {
        public DatacenterMismatchArgument[] InvalidArgument { get; set; }

        public ManagedObjectReference ExpectedDatacenter { get; set; }

        public DatacenterMismatch_LinkedView LinkedView { get; set; }

        public bool Equals(DatacenterMismatch datacenterMismatch)
        {
            return (datacenterMismatch != null && ((this.InvalidArgument == null && datacenterMismatch.InvalidArgument == null) || (this.InvalidArgument != null && datacenterMismatch.InvalidArgument != null && Enumerable.SequenceEqual(this.InvalidArgument, datacenterMismatch.InvalidArgument))) && ((this.ExpectedDatacenter == null && datacenterMismatch.ExpectedDatacenter == null) || (this.ExpectedDatacenter != null && this.ExpectedDatacenter.Equals(datacenterMismatch.ExpectedDatacenter))) && ((this.LinkedView == null && datacenterMismatch.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datacenterMismatch.LinkedView))));
        }

        public override bool Equals(object datacenterMismatch)
        {
            return Equals(datacenterMismatch as DatacenterMismatch);
        }

        public override int GetHashCode()
        {
            return (InvalidArgument + "_" + ExpectedDatacenter + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatacenterMismatch_LinkedView : IEquatable<DatacenterMismatch_LinkedView>
    {
        public Datacenter ExpectedDatacenter { get; set; }

        public bool Equals(DatacenterMismatch_LinkedView datacenterMismatch_LinkedView)
        {
            return (datacenterMismatch_LinkedView != null && ((this.ExpectedDatacenter == null && datacenterMismatch_LinkedView.ExpectedDatacenter == null) || (this.ExpectedDatacenter != null && this.ExpectedDatacenter.Equals(datacenterMismatch_LinkedView.ExpectedDatacenter))));
        }

        public override bool Equals(object datacenterMismatch_LinkedView)
        {
            return Equals(datacenterMismatch_LinkedView as DatacenterMismatch_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ExpectedDatacenter).GetHashCode();
        }
    }

    public class DatacenterMismatchArgument : DynamicData, IEquatable<DatacenterMismatchArgument>
    {
        public ManagedObjectReference Entity { get; set; }

        public ManagedObjectReference InputDatacenter { get; set; }

        public DatacenterMismatchArgument_LinkedView LinkedView { get; set; }

        public bool Equals(DatacenterMismatchArgument datacenterMismatchArgument)
        {
            return (datacenterMismatchArgument != null && ((this.Entity == null && datacenterMismatchArgument.Entity == null) || (this.Entity != null && this.Entity.Equals(datacenterMismatchArgument.Entity))) && ((this.InputDatacenter == null && datacenterMismatchArgument.InputDatacenter == null) || (this.InputDatacenter != null && this.InputDatacenter.Equals(datacenterMismatchArgument.InputDatacenter))) && ((this.LinkedView == null && datacenterMismatchArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datacenterMismatchArgument.LinkedView))));
        }

        public override bool Equals(object datacenterMismatchArgument)
        {
            return Equals(datacenterMismatchArgument as DatacenterMismatchArgument);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + InputDatacenter + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatacenterMismatchArgument_LinkedView : IEquatable<DatacenterMismatchArgument_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public Datacenter InputDatacenter { get; set; }

        public bool Equals(DatacenterMismatchArgument_LinkedView datacenterMismatchArgument_LinkedView)
        {
            return (datacenterMismatchArgument_LinkedView != null && ((this.Entity == null && datacenterMismatchArgument_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(datacenterMismatchArgument_LinkedView.Entity))) && ((this.InputDatacenter == null && datacenterMismatchArgument_LinkedView.InputDatacenter == null) || (this.InputDatacenter != null && this.InputDatacenter.Equals(datacenterMismatchArgument_LinkedView.InputDatacenter))));
        }

        public override bool Equals(object datacenterMismatchArgument_LinkedView)
        {
            return Equals(datacenterMismatchArgument_LinkedView as DatacenterMismatchArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + InputDatacenter).GetHashCode();
        }
    }

    public class DatacenterRenamedEvent : DatacenterEvent, IEquatable<DatacenterRenamedEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(DatacenterRenamedEvent datacenterRenamedEvent)
        {
            return (datacenterRenamedEvent != null && this.OldName == datacenterRenamedEvent.OldName && this.NewName == datacenterRenamedEvent.NewName);
        }

        public override bool Equals(object datacenterRenamedEvent)
        {
            return Equals(datacenterRenamedEvent as DatacenterRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class Datastore : ManagedEntity, IEquatable<Datastore>
    {
        public DatastoreInfo Info { get; set; }

        public DatastoreSummary Summary { get; set; }

        public DatastoreHostMount[] Host { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public ManagedObjectReference Browser { get; set; }

        public DatastoreCapability Capability { get; set; }

        public StorageIORMInfo IormConfiguration { get; set; }

        public new Datastore_LinkedView LinkedView { get; set; }

        public void RefreshDatastore()
        {
        }

        public void RefreshDatastoreStorageInfo()
        {
        }

        public ManagedObjectReference UpdateVirtualMachineFiles_Task(DatastoreMountPathDatastorePair[] mountPathDatastoreMapping)
        {
            return default(ManagedObjectReference);
        }

        public UpdateVirtualMachineFilesResult UpdateVirtualMachineFiles(DatastoreMountPathDatastorePair[] mountPathDatastoreMapping)
        {
            return default(UpdateVirtualMachineFilesResult);
        }

        public void RenameDatastore(string newName)
        {
        }

        public void DestroyDatastore()
        {
        }

        public StoragePlacementResult DatastoreEnterMaintenanceMode()
        {
            return default(StoragePlacementResult);
        }

        public ManagedObjectReference DatastoreExitMaintenanceMode_Task()
        {
            return default(ManagedObjectReference);
        }

        public void DatastoreExitMaintenanceMode()
        {
        }

        public ManagedObjectReference UpdateVVolVirtualMachineFiles_Task(DatastoreVVolContainerFailoverPair[] failoverPair)
        {
            return default(ManagedObjectReference);
        }

        public VVolVmConfigFileUpdateResult UpdateVVolVirtualMachineFiles(DatastoreVVolContainerFailoverPair[] failoverPair)
        {
            return default(VVolVmConfigFileUpdateResult);
        }

        public bool Equals(Datastore datastore)
        {
            return (datastore != null && ((this.Info == null && datastore.Info == null) || (this.Info != null && this.Info.Equals(datastore.Info))) && ((this.Summary == null && datastore.Summary == null) || (this.Summary != null && this.Summary.Equals(datastore.Summary))) && ((this.Host == null && datastore.Host == null) || (this.Host != null && datastore.Host != null && Enumerable.SequenceEqual(this.Host, datastore.Host))) && ((this.Vm == null && datastore.Vm == null) || (this.Vm != null && datastore.Vm != null && Enumerable.SequenceEqual(this.Vm, datastore.Vm))) && ((this.Browser == null && datastore.Browser == null) || (this.Browser != null && this.Browser.Equals(datastore.Browser))) && ((this.Capability == null && datastore.Capability == null) || (this.Capability != null && this.Capability.Equals(datastore.Capability))) && ((this.IormConfiguration == null && datastore.IormConfiguration == null) || (this.IormConfiguration != null && this.IormConfiguration.Equals(datastore.IormConfiguration))) && ((this.LinkedView == null && datastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastore.LinkedView))));
        }

        public override bool Equals(object datastore)
        {
            return Equals(datastore as Datastore);
        }

        public override int GetHashCode()
        {
            return (Info + "_" + Summary + "_" + Host + "_" + Vm + "_" + Browser + "_" + Capability + "_" + IormConfiguration + "_" + LinkedView).GetHashCode();
        }
    }

    public class Datastore_LinkedView : ManagedEntity_LinkedView, IEquatable<Datastore_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public HostDatastoreBrowser Browser { get; set; }

        public bool Equals(Datastore_LinkedView datastore_LinkedView)
        {
            return (datastore_LinkedView != null && ((this.Vm == null && datastore_LinkedView.Vm == null) || (this.Vm != null && datastore_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, datastore_LinkedView.Vm))) && ((this.Browser == null && datastore_LinkedView.Browser == null) || (this.Browser != null && this.Browser.Equals(datastore_LinkedView.Browser))));
        }

        public override bool Equals(object datastore_LinkedView)
        {
            return Equals(datastore_LinkedView as Datastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Browser).GetHashCode();
        }
    }

    public class DatastoreCapability : DynamicData, IEquatable<DatastoreCapability>
    {
        public bool DirectoryHierarchySupported { get; set; }

        public bool RawDiskMappingsSupported { get; set; }

        public bool PerFileThinProvisioningSupported { get; set; }

        public bool StorageIORMSupported { get; set; }

        public bool NativeSnapshotSupported { get; set; }

        public bool? TopLevelDirectoryCreateSupported { get; set; }

        public bool? SeSparseSupported { get; set; }

        public bool? VmfsSparseSupported { get; set; }

        public bool? VsanSparseSupported { get; set; }

        public bool? UpitSupported { get; set; }

        public bool? VmdkExpandSupported { get; set; }

        public bool Equals(DatastoreCapability datastoreCapability)
        {
            return (datastoreCapability != null && this.DirectoryHierarchySupported == datastoreCapability.DirectoryHierarchySupported && this.RawDiskMappingsSupported == datastoreCapability.RawDiskMappingsSupported && this.PerFileThinProvisioningSupported == datastoreCapability.PerFileThinProvisioningSupported && this.StorageIORMSupported == datastoreCapability.StorageIORMSupported && this.NativeSnapshotSupported == datastoreCapability.NativeSnapshotSupported && ((this.TopLevelDirectoryCreateSupported == null && datastoreCapability.TopLevelDirectoryCreateSupported == null) || (this.TopLevelDirectoryCreateSupported != null && this.TopLevelDirectoryCreateSupported.Equals(datastoreCapability.TopLevelDirectoryCreateSupported))) && ((this.SeSparseSupported == null && datastoreCapability.SeSparseSupported == null) || (this.SeSparseSupported != null && this.SeSparseSupported.Equals(datastoreCapability.SeSparseSupported))) && ((this.VmfsSparseSupported == null && datastoreCapability.VmfsSparseSupported == null) || (this.VmfsSparseSupported != null && this.VmfsSparseSupported.Equals(datastoreCapability.VmfsSparseSupported))) && ((this.VsanSparseSupported == null && datastoreCapability.VsanSparseSupported == null) || (this.VsanSparseSupported != null && this.VsanSparseSupported.Equals(datastoreCapability.VsanSparseSupported))) && ((this.UpitSupported == null && datastoreCapability.UpitSupported == null) || (this.UpitSupported != null && this.UpitSupported.Equals(datastoreCapability.UpitSupported))) && ((this.VmdkExpandSupported == null && datastoreCapability.VmdkExpandSupported == null) || (this.VmdkExpandSupported != null && this.VmdkExpandSupported.Equals(datastoreCapability.VmdkExpandSupported))));
        }

        public override bool Equals(object datastoreCapability)
        {
            return Equals(datastoreCapability as DatastoreCapability);
        }

        public override int GetHashCode()
        {
            return (DirectoryHierarchySupported + "_" + RawDiskMappingsSupported + "_" + PerFileThinProvisioningSupported + "_" + StorageIORMSupported + "_" + NativeSnapshotSupported + "_" + TopLevelDirectoryCreateSupported + "_" + SeSparseSupported + "_" + VmfsSparseSupported + "_" + VsanSparseSupported + "_" + UpitSupported + "_" + VmdkExpandSupported).GetHashCode();
        }
    }

    public class DatastoreCapacityIncreasedEvent : DatastoreEvent, IEquatable<DatastoreCapacityIncreasedEvent>
    {
        public long OldCapacity { get; set; }

        public long NewCapacity { get; set; }

        public bool Equals(DatastoreCapacityIncreasedEvent datastoreCapacityIncreasedEvent)
        {
            return (datastoreCapacityIncreasedEvent != null && this.OldCapacity == datastoreCapacityIncreasedEvent.OldCapacity && this.NewCapacity == datastoreCapacityIncreasedEvent.NewCapacity);
        }

        public override bool Equals(object datastoreCapacityIncreasedEvent)
        {
            return Equals(datastoreCapacityIncreasedEvent as DatastoreCapacityIncreasedEvent);
        }

        public override int GetHashCode()
        {
            return (OldCapacity + "_" + NewCapacity).GetHashCode();
        }
    }

    public class DatastoreDestroyedEvent : DatastoreEvent, IEquatable<DatastoreDestroyedEvent>
    {
        public bool Equals(DatastoreDestroyedEvent datastoreDestroyedEvent)
        {
            return (datastoreDestroyedEvent != null && base.Equals(datastoreDestroyedEvent));
        }

        public override bool Equals(object datastoreDestroyedEvent)
        {
            return Equals(datastoreDestroyedEvent as DatastoreDestroyedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatastoreDiscoveredEvent : HostEvent, IEquatable<DatastoreDiscoveredEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(DatastoreDiscoveredEvent datastoreDiscoveredEvent)
        {
            return (datastoreDiscoveredEvent != null && ((this.Datastore == null && datastoreDiscoveredEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreDiscoveredEvent.Datastore))));
        }

        public override bool Equals(object datastoreDiscoveredEvent)
        {
            return Equals(datastoreDiscoveredEvent as DatastoreDiscoveredEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreDuplicatedEvent : DatastoreEvent, IEquatable<DatastoreDuplicatedEvent>
    {
        public bool Equals(DatastoreDuplicatedEvent datastoreDuplicatedEvent)
        {
            return (datastoreDuplicatedEvent != null && base.Equals(datastoreDuplicatedEvent));
        }

        public override bool Equals(object datastoreDuplicatedEvent)
        {
            return Equals(datastoreDuplicatedEvent as DatastoreDuplicatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatastoreEvent : Event, IEquatable<DatastoreEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(DatastoreEvent datastoreEvent)
        {
            return (datastoreEvent != null && ((this.Datastore == null && datastoreEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreEvent.Datastore))));
        }

        public override bool Equals(object datastoreEvent)
        {
            return Equals(datastoreEvent as DatastoreEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreEventArgument : EntityEventArgument, IEquatable<DatastoreEventArgument>
    {
        public ManagedObjectReference Datastore { get; set; }

        public DatastoreEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(DatastoreEventArgument datastoreEventArgument)
        {
            return (datastoreEventArgument != null && ((this.Datastore == null && datastoreEventArgument.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreEventArgument.Datastore))) && ((this.LinkedView == null && datastoreEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastoreEventArgument.LinkedView))));
        }

        public override bool Equals(object datastoreEventArgument)
        {
            return Equals(datastoreEventArgument as DatastoreEventArgument);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatastoreEventArgument_LinkedView : IEquatable<DatastoreEventArgument_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(DatastoreEventArgument_LinkedView datastoreEventArgument_LinkedView)
        {
            return (datastoreEventArgument_LinkedView != null && ((this.Datastore == null && datastoreEventArgument_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreEventArgument_LinkedView.Datastore))));
        }

        public override bool Equals(object datastoreEventArgument_LinkedView)
        {
            return Equals(datastoreEventArgument_LinkedView as DatastoreEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreFileCopiedEvent : DatastoreFileEvent, IEquatable<DatastoreFileCopiedEvent>
    {
        public DatastoreEventArgument SourceDatastore { get; set; }

        public string SourceFile { get; set; }

        public bool Equals(DatastoreFileCopiedEvent datastoreFileCopiedEvent)
        {
            return (datastoreFileCopiedEvent != null && ((this.SourceDatastore == null && datastoreFileCopiedEvent.SourceDatastore == null) || (this.SourceDatastore != null && this.SourceDatastore.Equals(datastoreFileCopiedEvent.SourceDatastore))) && this.SourceFile == datastoreFileCopiedEvent.SourceFile);
        }

        public override bool Equals(object datastoreFileCopiedEvent)
        {
            return Equals(datastoreFileCopiedEvent as DatastoreFileCopiedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceDatastore + "_" + SourceFile).GetHashCode();
        }
    }

    public class DatastoreFileDeletedEvent : DatastoreFileEvent, IEquatable<DatastoreFileDeletedEvent>
    {
        public bool Equals(DatastoreFileDeletedEvent datastoreFileDeletedEvent)
        {
            return (datastoreFileDeletedEvent != null && base.Equals(datastoreFileDeletedEvent));
        }

        public override bool Equals(object datastoreFileDeletedEvent)
        {
            return Equals(datastoreFileDeletedEvent as DatastoreFileDeletedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatastoreFileEvent : DatastoreEvent, IEquatable<DatastoreFileEvent>
    {
        public string TargetFile { get; set; }

        public string SourceOfOperation { get; set; }

        public bool? Succeeded { get; set; }

        public bool Equals(DatastoreFileEvent datastoreFileEvent)
        {
            return (datastoreFileEvent != null && this.TargetFile == datastoreFileEvent.TargetFile && this.SourceOfOperation == datastoreFileEvent.SourceOfOperation && ((this.Succeeded == null && datastoreFileEvent.Succeeded == null) || (this.Succeeded != null && this.Succeeded.Equals(datastoreFileEvent.Succeeded))));
        }

        public override bool Equals(object datastoreFileEvent)
        {
            return Equals(datastoreFileEvent as DatastoreFileEvent);
        }

        public override int GetHashCode()
        {
            return (TargetFile + "_" + SourceOfOperation + "_" + Succeeded).GetHashCode();
        }
    }

    public class DatastoreFileMovedEvent : DatastoreFileEvent, IEquatable<DatastoreFileMovedEvent>
    {
        public DatastoreEventArgument SourceDatastore { get; set; }

        public string SourceFile { get; set; }

        public bool Equals(DatastoreFileMovedEvent datastoreFileMovedEvent)
        {
            return (datastoreFileMovedEvent != null && ((this.SourceDatastore == null && datastoreFileMovedEvent.SourceDatastore == null) || (this.SourceDatastore != null && this.SourceDatastore.Equals(datastoreFileMovedEvent.SourceDatastore))) && this.SourceFile == datastoreFileMovedEvent.SourceFile);
        }

        public override bool Equals(object datastoreFileMovedEvent)
        {
            return Equals(datastoreFileMovedEvent as DatastoreFileMovedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceDatastore + "_" + SourceFile).GetHashCode();
        }
    }

    public class DatastoreHostMount : DynamicData, IEquatable<DatastoreHostMount>
    {
        public ManagedObjectReference Key { get; set; }

        public HostMountInfo MountInfo { get; set; }

        public DatastoreHostMount_LinkedView LinkedView { get; set; }

        public bool Equals(DatastoreHostMount datastoreHostMount)
        {
            return (datastoreHostMount != null && ((this.Key == null && datastoreHostMount.Key == null) || (this.Key != null && this.Key.Equals(datastoreHostMount.Key))) && ((this.MountInfo == null && datastoreHostMount.MountInfo == null) || (this.MountInfo != null && this.MountInfo.Equals(datastoreHostMount.MountInfo))) && ((this.LinkedView == null && datastoreHostMount.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastoreHostMount.LinkedView))));
        }

        public override bool Equals(object datastoreHostMount)
        {
            return Equals(datastoreHostMount as DatastoreHostMount);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + MountInfo + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatastoreHostMount_LinkedView : IEquatable<DatastoreHostMount_LinkedView>
    {
        public HostSystem Key { get; set; }

        public bool Equals(DatastoreHostMount_LinkedView datastoreHostMount_LinkedView)
        {
            return (datastoreHostMount_LinkedView != null && ((this.Key == null && datastoreHostMount_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(datastoreHostMount_LinkedView.Key))));
        }

        public override bool Equals(object datastoreHostMount_LinkedView)
        {
            return Equals(datastoreHostMount_LinkedView as DatastoreHostMount_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class DatastoreInfo : DynamicData, IEquatable<DatastoreInfo>
    {
        public string Name { get; set; }

        public string Url { get; set; }

        public long FreeSpace { get; set; }

        public long MaxFileSize { get; set; }

        public long? MaxVirtualDiskCapacity { get; set; }

        public long MaxMemoryFileSize { get; set; }

        public DateTime? Timestamp { get; set; }

        public string ContainerId { get; set; }

        public string AliasOf { get; set; }

        public bool Equals(DatastoreInfo datastoreInfo)
        {
            return (datastoreInfo != null && this.Name == datastoreInfo.Name && this.Url == datastoreInfo.Url && this.FreeSpace == datastoreInfo.FreeSpace && this.MaxFileSize == datastoreInfo.MaxFileSize && ((this.MaxVirtualDiskCapacity == null && datastoreInfo.MaxVirtualDiskCapacity == null) || (this.MaxVirtualDiskCapacity != null && this.MaxVirtualDiskCapacity.Equals(datastoreInfo.MaxVirtualDiskCapacity))) && this.MaxMemoryFileSize == datastoreInfo.MaxMemoryFileSize && ((this.Timestamp == null && datastoreInfo.Timestamp == null) || (this.Timestamp != null && this.Timestamp.Equals(datastoreInfo.Timestamp))) && this.ContainerId == datastoreInfo.ContainerId && this.AliasOf == datastoreInfo.AliasOf);
        }

        public override bool Equals(object datastoreInfo)
        {
            return Equals(datastoreInfo as DatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Url + "_" + FreeSpace + "_" + MaxFileSize + "_" + MaxVirtualDiskCapacity + "_" + MaxMemoryFileSize + "_" + Timestamp + "_" + ContainerId + "_" + AliasOf).GetHashCode();
        }
    }

    public class DatastoreIORMReconfiguredEvent : DatastoreEvent, IEquatable<DatastoreIORMReconfiguredEvent>
    {
        public bool Equals(DatastoreIORMReconfiguredEvent datastoreIORMReconfiguredEvent)
        {
            return (datastoreIORMReconfiguredEvent != null && base.Equals(datastoreIORMReconfiguredEvent));
        }

        public override bool Equals(object datastoreIORMReconfiguredEvent)
        {
            return Equals(datastoreIORMReconfiguredEvent as DatastoreIORMReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatastoreMountPathDatastorePair : DynamicData, IEquatable<DatastoreMountPathDatastorePair>
    {
        public string OldMountPath { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public DatastoreMountPathDatastorePair_LinkedView LinkedView { get; set; }

        public bool Equals(DatastoreMountPathDatastorePair datastoreMountPathDatastorePair)
        {
            return (datastoreMountPathDatastorePair != null && this.OldMountPath == datastoreMountPathDatastorePair.OldMountPath && ((this.Datastore == null && datastoreMountPathDatastorePair.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreMountPathDatastorePair.Datastore))) && ((this.LinkedView == null && datastoreMountPathDatastorePair.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastoreMountPathDatastorePair.LinkedView))));
        }

        public override bool Equals(object datastoreMountPathDatastorePair)
        {
            return Equals(datastoreMountPathDatastorePair as DatastoreMountPathDatastorePair);
        }

        public override int GetHashCode()
        {
            return (OldMountPath + "_" + Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatastoreMountPathDatastorePair_LinkedView : IEquatable<DatastoreMountPathDatastorePair_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(DatastoreMountPathDatastorePair_LinkedView datastoreMountPathDatastorePair_LinkedView)
        {
            return (datastoreMountPathDatastorePair_LinkedView != null && ((this.Datastore == null && datastoreMountPathDatastorePair_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreMountPathDatastorePair_LinkedView.Datastore))));
        }

        public override bool Equals(object datastoreMountPathDatastorePair_LinkedView)
        {
            return Equals(datastoreMountPathDatastorePair_LinkedView as DatastoreMountPathDatastorePair_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreNamespaceManager : ViewBase, IEquatable<DatastoreNamespaceManager>
    {
        public string CreateDirectory(ManagedObjectReference datastore, string displayName, string policy)
        {
            return default(string);
        }

        public void DeleteDirectory(ManagedObjectReference datacenter, string datastorePath)
        {
        }

        public string ConvertNamespacePathToUuidPath(ManagedObjectReference datacenter, string namespaceUrl)
        {
            return default(string);
        }

        public bool Equals(DatastoreNamespaceManager datastoreNamespaceManager)
        {
            return (datastoreNamespaceManager != null && base.Equals(datastoreNamespaceManager));
        }

        public override bool Equals(object datastoreNamespaceManager)
        {
            return Equals(datastoreNamespaceManager as DatastoreNamespaceManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DatastoreNotWritableOnHost : InvalidDatastore, IEquatable<DatastoreNotWritableOnHost>
    {
        public ManagedObjectReference Host { get; set; }

        public new DatastoreNotWritableOnHost_LinkedView LinkedView { get; set; }

        public bool Equals(DatastoreNotWritableOnHost datastoreNotWritableOnHost)
        {
            return (datastoreNotWritableOnHost != null && ((this.Host == null && datastoreNotWritableOnHost.Host == null) || (this.Host != null && this.Host.Equals(datastoreNotWritableOnHost.Host))) && ((this.LinkedView == null && datastoreNotWritableOnHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastoreNotWritableOnHost.LinkedView))));
        }

        public override bool Equals(object datastoreNotWritableOnHost)
        {
            return Equals(datastoreNotWritableOnHost as DatastoreNotWritableOnHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatastoreNotWritableOnHost_LinkedView : InvalidDatastore_LinkedView, IEquatable<DatastoreNotWritableOnHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DatastoreNotWritableOnHost_LinkedView datastoreNotWritableOnHost_LinkedView)
        {
            return (datastoreNotWritableOnHost_LinkedView != null && ((this.Host == null && datastoreNotWritableOnHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(datastoreNotWritableOnHost_LinkedView.Host))));
        }

        public override bool Equals(object datastoreNotWritableOnHost_LinkedView)
        {
            return Equals(datastoreNotWritableOnHost_LinkedView as DatastoreNotWritableOnHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DatastoreOption : DynamicData, IEquatable<DatastoreOption>
    {
        public VirtualMachineDatastoreVolumeOption[] UnsupportedVolumes { get; set; }

        public bool Equals(DatastoreOption datastoreOption)
        {
            return (datastoreOption != null && ((this.UnsupportedVolumes == null && datastoreOption.UnsupportedVolumes == null) || (this.UnsupportedVolumes != null && datastoreOption.UnsupportedVolumes != null && Enumerable.SequenceEqual(this.UnsupportedVolumes, datastoreOption.UnsupportedVolumes))));
        }

        public override bool Equals(object datastoreOption)
        {
            return Equals(datastoreOption as DatastoreOption);
        }

        public override int GetHashCode()
        {
            return (UnsupportedVolumes).GetHashCode();
        }
    }

    public class DatastorePrincipalConfigured : HostEvent, IEquatable<DatastorePrincipalConfigured>
    {
        public string DatastorePrincipal { get; set; }

        public bool Equals(DatastorePrincipalConfigured datastorePrincipalConfigured)
        {
            return (datastorePrincipalConfigured != null && this.DatastorePrincipal == datastorePrincipalConfigured.DatastorePrincipal);
        }

        public override bool Equals(object datastorePrincipalConfigured)
        {
            return Equals(datastorePrincipalConfigured as DatastorePrincipalConfigured);
        }

        public override int GetHashCode()
        {
            return (DatastorePrincipal).GetHashCode();
        }
    }

    public class DatastoreRemovedOnHostEvent : HostEvent, IEquatable<DatastoreRemovedOnHostEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(DatastoreRemovedOnHostEvent datastoreRemovedOnHostEvent)
        {
            return (datastoreRemovedOnHostEvent != null && ((this.Datastore == null && datastoreRemovedOnHostEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreRemovedOnHostEvent.Datastore))));
        }

        public override bool Equals(object datastoreRemovedOnHostEvent)
        {
            return Equals(datastoreRemovedOnHostEvent as DatastoreRemovedOnHostEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreRenamedEvent : DatastoreEvent, IEquatable<DatastoreRenamedEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(DatastoreRenamedEvent datastoreRenamedEvent)
        {
            return (datastoreRenamedEvent != null && this.OldName == datastoreRenamedEvent.OldName && this.NewName == datastoreRenamedEvent.NewName);
        }

        public override bool Equals(object datastoreRenamedEvent)
        {
            return Equals(datastoreRenamedEvent as DatastoreRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class DatastoreRenamedOnHostEvent : HostEvent, IEquatable<DatastoreRenamedOnHostEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(DatastoreRenamedOnHostEvent datastoreRenamedOnHostEvent)
        {
            return (datastoreRenamedOnHostEvent != null && this.OldName == datastoreRenamedOnHostEvent.OldName && this.NewName == datastoreRenamedOnHostEvent.NewName);
        }

        public override bool Equals(object datastoreRenamedOnHostEvent)
        {
            return Equals(datastoreRenamedOnHostEvent as DatastoreRenamedOnHostEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class DatastoreSummary : DynamicData, IEquatable<DatastoreSummary>
    {
        public ManagedObjectReference Datastore { get; set; }

        public string Name { get; set; }

        public string Url { get; set; }

        public long Capacity { get; set; }

        public long FreeSpace { get; set; }

        public long? Uncommitted { get; set; }

        public bool Accessible { get; set; }

        public bool? MultipleHostAccess { get; set; }

        public string Type { get; set; }

        public string MaintenanceMode { get; set; }

        public DatastoreSummary_LinkedView LinkedView { get; set; }

        public bool Equals(DatastoreSummary datastoreSummary)
        {
            return (datastoreSummary != null && ((this.Datastore == null && datastoreSummary.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreSummary.Datastore))) && this.Name == datastoreSummary.Name && this.Url == datastoreSummary.Url && this.Capacity == datastoreSummary.Capacity && this.FreeSpace == datastoreSummary.FreeSpace && ((this.Uncommitted == null && datastoreSummary.Uncommitted == null) || (this.Uncommitted != null && this.Uncommitted.Equals(datastoreSummary.Uncommitted))) && this.Accessible == datastoreSummary.Accessible && ((this.MultipleHostAccess == null && datastoreSummary.MultipleHostAccess == null) || (this.MultipleHostAccess != null && this.MultipleHostAccess.Equals(datastoreSummary.MultipleHostAccess))) && this.Type == datastoreSummary.Type && this.MaintenanceMode == datastoreSummary.MaintenanceMode && ((this.LinkedView == null && datastoreSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(datastoreSummary.LinkedView))));
        }

        public override bool Equals(object datastoreSummary)
        {
            return Equals(datastoreSummary as DatastoreSummary);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Name + "_" + Url + "_" + Capacity + "_" + FreeSpace + "_" + Uncommitted + "_" + Accessible + "_" + MultipleHostAccess + "_" + Type + "_" + MaintenanceMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class DatastoreSummary_LinkedView : IEquatable<DatastoreSummary_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(DatastoreSummary_LinkedView datastoreSummary_LinkedView)
        {
            return (datastoreSummary_LinkedView != null && ((this.Datastore == null && datastoreSummary_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreSummary_LinkedView.Datastore))));
        }

        public override bool Equals(object datastoreSummary_LinkedView)
        {
            return Equals(datastoreSummary_LinkedView as DatastoreSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class DatastoreVVolContainerFailoverPair : DynamicData, IEquatable<DatastoreVVolContainerFailoverPair>
    {
        public string SrcContainer { get; set; }

        public string TgtContainer { get; set; }

        public KeyValue[] VvolMapping { get; set; }

        public bool Equals(DatastoreVVolContainerFailoverPair datastoreVVolContainerFailoverPair)
        {
            return (datastoreVVolContainerFailoverPair != null && this.SrcContainer == datastoreVVolContainerFailoverPair.SrcContainer && this.TgtContainer == datastoreVVolContainerFailoverPair.TgtContainer && ((this.VvolMapping == null && datastoreVVolContainerFailoverPair.VvolMapping == null) || (this.VvolMapping != null && datastoreVVolContainerFailoverPair.VvolMapping != null && Enumerable.SequenceEqual(this.VvolMapping, datastoreVVolContainerFailoverPair.VvolMapping))));
        }

        public override bool Equals(object datastoreVVolContainerFailoverPair)
        {
            return Equals(datastoreVVolContainerFailoverPair as DatastoreVVolContainerFailoverPair);
        }

        public override int GetHashCode()
        {
            return (SrcContainer + "_" + TgtContainer + "_" + VvolMapping).GetHashCode();
        }
    }

    public class DateTimeProfile : ApplyProfile, IEquatable<DateTimeProfile>
    {
        public bool Equals(DateTimeProfile dateTimeProfile)
        {
            return (dateTimeProfile != null && base.Equals(dateTimeProfile));
        }

        public override bool Equals(object dateTimeProfile)
        {
            return Equals(dateTimeProfile as DateTimeProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DeltaDiskFormatNotSupported : VmConfigFault, IEquatable<DeltaDiskFormatNotSupported>
    {
        public ManagedObjectReference[] Datastore { get; set; }

        public string DeltaDiskFormat { get; set; }

        public DeltaDiskFormatNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(DeltaDiskFormatNotSupported deltaDiskFormatNotSupported)
        {
            return (deltaDiskFormatNotSupported != null && ((this.Datastore == null && deltaDiskFormatNotSupported.Datastore == null) || (this.Datastore != null && deltaDiskFormatNotSupported.Datastore != null && Enumerable.SequenceEqual(this.Datastore, deltaDiskFormatNotSupported.Datastore))) && this.DeltaDiskFormat == deltaDiskFormatNotSupported.DeltaDiskFormat && ((this.LinkedView == null && deltaDiskFormatNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(deltaDiskFormatNotSupported.LinkedView))));
        }

        public override bool Equals(object deltaDiskFormatNotSupported)
        {
            return Equals(deltaDiskFormatNotSupported as DeltaDiskFormatNotSupported);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + DeltaDiskFormat + "_" + LinkedView).GetHashCode();
        }
    }

    public class DeltaDiskFormatNotSupported_LinkedView : IEquatable<DeltaDiskFormatNotSupported_LinkedView>
    {
        public Datastore[] Datastore { get; set; }

        public bool Equals(DeltaDiskFormatNotSupported_LinkedView deltaDiskFormatNotSupported_LinkedView)
        {
            return (deltaDiskFormatNotSupported_LinkedView != null && ((this.Datastore == null && deltaDiskFormatNotSupported_LinkedView.Datastore == null) || (this.Datastore != null && deltaDiskFormatNotSupported_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, deltaDiskFormatNotSupported_LinkedView.Datastore))));
        }

        public override bool Equals(object deltaDiskFormatNotSupported_LinkedView)
        {
            return Equals(deltaDiskFormatNotSupported_LinkedView as DeltaDiskFormatNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class Description : DynamicData, IEquatable<Description>
    {
        public string Label { get; set; }

        public string Summary { get; set; }

        public bool Equals(Description description)
        {
            return (description != null && this.Label == description.Label && this.Summary == description.Summary);
        }

        public override bool Equals(object description)
        {
            return Equals(description as Description);
        }

        public override int GetHashCode()
        {
            return (Label + "_" + Summary).GetHashCode();
        }
    }

    public class DestinationSwitchFull : CannotAccessNetwork, IEquatable<DestinationSwitchFull>
    {
        public new DestinationSwitchFull_LinkedView LinkedView { get; set; }

        public bool Equals(DestinationSwitchFull destinationSwitchFull)
        {
            return (destinationSwitchFull != null && ((this.LinkedView == null && destinationSwitchFull.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(destinationSwitchFull.LinkedView))));
        }

        public override bool Equals(object destinationSwitchFull)
        {
            return Equals(destinationSwitchFull as DestinationSwitchFull);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class DestinationSwitchFull_LinkedView : CannotAccessNetwork_LinkedView, IEquatable<DestinationSwitchFull_LinkedView>
    {
        public bool Equals(DestinationSwitchFull_LinkedView destinationSwitchFull_LinkedView)
        {
            return (destinationSwitchFull_LinkedView != null && base.Equals(destinationSwitchFull_LinkedView));
        }

        public override bool Equals(object destinationSwitchFull_LinkedView)
        {
            return Equals(destinationSwitchFull_LinkedView as DestinationSwitchFull_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DestinationVsanDisabled : CannotMoveVsanEnabledHost, IEquatable<DestinationVsanDisabled>
    {
        public string DestinationCluster { get; set; }

        public bool Equals(DestinationVsanDisabled destinationVsanDisabled)
        {
            return (destinationVsanDisabled != null && this.DestinationCluster == destinationVsanDisabled.DestinationCluster);
        }

        public override bool Equals(object destinationVsanDisabled)
        {
            return Equals(destinationVsanDisabled as DestinationVsanDisabled);
        }

        public override int GetHashCode()
        {
            return (DestinationCluster).GetHashCode();
        }
    }

    public class DeviceBackedVirtualDiskSpec : VirtualDiskSpec, IEquatable<DeviceBackedVirtualDiskSpec>
    {
        public string Device { get; set; }

        public bool Equals(DeviceBackedVirtualDiskSpec deviceBackedVirtualDiskSpec)
        {
            return (deviceBackedVirtualDiskSpec != null && this.Device == deviceBackedVirtualDiskSpec.Device);
        }

        public override bool Equals(object deviceBackedVirtualDiskSpec)
        {
            return Equals(deviceBackedVirtualDiskSpec as DeviceBackedVirtualDiskSpec);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class DeviceBackingNotSupported : DeviceNotSupported, IEquatable<DeviceBackingNotSupported>
    {
        public string Backing { get; set; }

        public bool Equals(DeviceBackingNotSupported deviceBackingNotSupported)
        {
            return (deviceBackingNotSupported != null && this.Backing == deviceBackingNotSupported.Backing);
        }

        public override bool Equals(object deviceBackingNotSupported)
        {
            return Equals(deviceBackingNotSupported as DeviceBackingNotSupported);
        }

        public override int GetHashCode()
        {
            return (Backing).GetHashCode();
        }
    }

    public class DeviceControllerNotSupported : DeviceNotSupported, IEquatable<DeviceControllerNotSupported>
    {
        public string Controller { get; set; }

        public bool Equals(DeviceControllerNotSupported deviceControllerNotSupported)
        {
            return (deviceControllerNotSupported != null && this.Controller == deviceControllerNotSupported.Controller);
        }

        public override bool Equals(object deviceControllerNotSupported)
        {
            return Equals(deviceControllerNotSupported as DeviceControllerNotSupported);
        }

        public override int GetHashCode()
        {
            return (Controller).GetHashCode();
        }
    }

    public class DeviceGroupId : DynamicData, IEquatable<DeviceGroupId>
    {
        public string Id { get; set; }

        public bool Equals(DeviceGroupId deviceGroupId)
        {
            return (deviceGroupId != null && this.Id == deviceGroupId.Id);
        }

        public override bool Equals(object deviceGroupId)
        {
            return Equals(deviceGroupId as DeviceGroupId);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class DeviceHotPlugNotSupported : InvalidDeviceSpec, IEquatable<DeviceHotPlugNotSupported>
    {
        public bool Equals(DeviceHotPlugNotSupported deviceHotPlugNotSupported)
        {
            return (deviceHotPlugNotSupported != null && base.Equals(deviceHotPlugNotSupported));
        }

        public override bool Equals(object deviceHotPlugNotSupported)
        {
            return Equals(deviceHotPlugNotSupported as DeviceHotPlugNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DeviceNotFound : InvalidDeviceSpec, IEquatable<DeviceNotFound>
    {
        public bool Equals(DeviceNotFound deviceNotFound)
        {
            return (deviceNotFound != null && base.Equals(deviceNotFound));
        }

        public override bool Equals(object deviceNotFound)
        {
            return Equals(deviceNotFound as DeviceNotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DeviceNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<DeviceNotSupported>
    {
        public string Device { get; set; }

        public string Reason { get; set; }

        public bool Equals(DeviceNotSupported deviceNotSupported)
        {
            return (deviceNotSupported != null && this.Device == deviceNotSupported.Device && this.Reason == deviceNotSupported.Reason);
        }

        public override bool Equals(object deviceNotSupported)
        {
            return Equals(deviceNotSupported as DeviceNotSupported);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Reason).GetHashCode();
        }
    }

    public class DeviceUnsupportedForVmPlatform : InvalidDeviceSpec, IEquatable<DeviceUnsupportedForVmPlatform>
    {
        public bool Equals(DeviceUnsupportedForVmPlatform deviceUnsupportedForVmPlatform)
        {
            return (deviceUnsupportedForVmPlatform != null && base.Equals(deviceUnsupportedForVmPlatform));
        }

        public override bool Equals(object deviceUnsupportedForVmPlatform)
        {
            return Equals(deviceUnsupportedForVmPlatform as DeviceUnsupportedForVmPlatform);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DeviceUnsupportedForVmVersion : InvalidDeviceSpec, IEquatable<DeviceUnsupportedForVmVersion>
    {
        public string CurrentVersion { get; set; }

        public string ExpectedVersion { get; set; }

        public bool Equals(DeviceUnsupportedForVmVersion deviceUnsupportedForVmVersion)
        {
            return (deviceUnsupportedForVmVersion != null && this.CurrentVersion == deviceUnsupportedForVmVersion.CurrentVersion && this.ExpectedVersion == deviceUnsupportedForVmVersion.ExpectedVersion);
        }

        public override bool Equals(object deviceUnsupportedForVmVersion)
        {
            return Equals(deviceUnsupportedForVmVersion as DeviceUnsupportedForVmVersion);
        }

        public override int GetHashCode()
        {
            return (CurrentVersion + "_" + ExpectedVersion).GetHashCode();
        }
    }

    public class DiagnosticManager : ViewBase, IEquatable<DiagnosticManager>
    {
        public DiagnosticManagerLogDescriptor[] QueryDescriptions(ManagedObjectReference host)
        {
            return default(DiagnosticManagerLogDescriptor[]);
        }

        public DiagnosticManagerLogHeader BrowseDiagnosticLog(ManagedObjectReference host, string key, int? start, int? lines)
        {
            return default(DiagnosticManagerLogHeader);
        }

        public ManagedObjectReference GenerateLogBundles_Task(bool includeDefault, ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public DiagnosticManagerBundleInfo[] GenerateLogBundles(bool includeDefault, ManagedObjectReference[] host)
        {
            return default(DiagnosticManagerBundleInfo[]);
        }

        public bool Equals(DiagnosticManager diagnosticManager)
        {
            return (diagnosticManager != null && base.Equals(diagnosticManager));
        }

        public override bool Equals(object diagnosticManager)
        {
            return Equals(diagnosticManager as DiagnosticManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiagnosticManagerBundleInfo : DynamicData, IEquatable<DiagnosticManagerBundleInfo>
    {
        public ManagedObjectReference System { get; set; }

        public string Url { get; set; }

        public DiagnosticManagerBundleInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DiagnosticManagerBundleInfo diagnosticManagerBundleInfo)
        {
            return (diagnosticManagerBundleInfo != null && ((this.System == null && diagnosticManagerBundleInfo.System == null) || (this.System != null && this.System.Equals(diagnosticManagerBundleInfo.System))) && this.Url == diagnosticManagerBundleInfo.Url && ((this.LinkedView == null && diagnosticManagerBundleInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(diagnosticManagerBundleInfo.LinkedView))));
        }

        public override bool Equals(object diagnosticManagerBundleInfo)
        {
            return Equals(diagnosticManagerBundleInfo as DiagnosticManagerBundleInfo);
        }

        public override int GetHashCode()
        {
            return (System + "_" + Url + "_" + LinkedView).GetHashCode();
        }
    }

    public class DiagnosticManagerBundleInfo_LinkedView : IEquatable<DiagnosticManagerBundleInfo_LinkedView>
    {
        public HostSystem System { get; set; }

        public bool Equals(DiagnosticManagerBundleInfo_LinkedView diagnosticManagerBundleInfo_LinkedView)
        {
            return (diagnosticManagerBundleInfo_LinkedView != null && ((this.System == null && diagnosticManagerBundleInfo_LinkedView.System == null) || (this.System != null && this.System.Equals(diagnosticManagerBundleInfo_LinkedView.System))));
        }

        public override bool Equals(object diagnosticManagerBundleInfo_LinkedView)
        {
            return Equals(diagnosticManagerBundleInfo_LinkedView as DiagnosticManagerBundleInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (System).GetHashCode();
        }
    }

    public class DiagnosticManagerLogDescriptor : DynamicData, IEquatable<DiagnosticManagerLogDescriptor>
    {
        public string Key { get; set; }

        public string FileName { get; set; }

        public string Creator { get; set; }

        public string Format { get; set; }

        public string MimeType { get; set; }

        public Description Info { get; set; }

        public bool Equals(DiagnosticManagerLogDescriptor diagnosticManagerLogDescriptor)
        {
            return (diagnosticManagerLogDescriptor != null && this.Key == diagnosticManagerLogDescriptor.Key && this.FileName == diagnosticManagerLogDescriptor.FileName && this.Creator == diagnosticManagerLogDescriptor.Creator && this.Format == diagnosticManagerLogDescriptor.Format && this.MimeType == diagnosticManagerLogDescriptor.MimeType && ((this.Info == null && diagnosticManagerLogDescriptor.Info == null) || (this.Info != null && this.Info.Equals(diagnosticManagerLogDescriptor.Info))));
        }

        public override bool Equals(object diagnosticManagerLogDescriptor)
        {
            return Equals(diagnosticManagerLogDescriptor as DiagnosticManagerLogDescriptor);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + FileName + "_" + Creator + "_" + Format + "_" + MimeType + "_" + Info).GetHashCode();
        }
    }

    public class DiagnosticManagerLogHeader : DynamicData, IEquatable<DiagnosticManagerLogHeader>
    {
        public int LineStart { get; set; }

        public int LineEnd { get; set; }

        public string[] LineText { get; set; }

        public bool Equals(DiagnosticManagerLogHeader diagnosticManagerLogHeader)
        {
            return (diagnosticManagerLogHeader != null && this.LineStart == diagnosticManagerLogHeader.LineStart && this.LineEnd == diagnosticManagerLogHeader.LineEnd && ((this.LineText == null && diagnosticManagerLogHeader.LineText == null) || (this.LineText != null && diagnosticManagerLogHeader.LineText != null && Enumerable.SequenceEqual(this.LineText, diagnosticManagerLogHeader.LineText))));
        }

        public override bool Equals(object diagnosticManagerLogHeader)
        {
            return Equals(diagnosticManagerLogHeader as DiagnosticManagerLogHeader);
        }

        public override int GetHashCode()
        {
            return (LineStart + "_" + LineEnd + "_" + LineText).GetHashCode();
        }
    }

    public class DigestNotSupported : DeviceNotSupported, IEquatable<DigestNotSupported>
    {
        public bool Equals(DigestNotSupported digestNotSupported)
        {
            return (digestNotSupported != null && base.Equals(digestNotSupported));
        }

        public override bool Equals(object digestNotSupported)
        {
            return Equals(digestNotSupported as DigestNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DirectoryNotEmpty : FileFault, IEquatable<DirectoryNotEmpty>
    {
        public bool Equals(DirectoryNotEmpty directoryNotEmpty)
        {
            return (directoryNotEmpty != null && base.Equals(directoryNotEmpty));
        }

        public override bool Equals(object directoryNotEmpty)
        {
            return Equals(directoryNotEmpty as DirectoryNotEmpty);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DisableAdminNotSupported : HostConfigFault, IEquatable<DisableAdminNotSupported>
    {
        public bool Equals(DisableAdminNotSupported disableAdminNotSupported)
        {
            return (disableAdminNotSupported != null && base.Equals(disableAdminNotSupported));
        }

        public override bool Equals(object disableAdminNotSupported)
        {
            return Equals(disableAdminNotSupported as DisableAdminNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DisallowedChangeByService : RuntimeFault, IEquatable<DisallowedChangeByService>
    {
        public string ServiceName { get; set; }

        public string DisallowedChange { get; set; }

        public bool Equals(DisallowedChangeByService disallowedChangeByService)
        {
            return (disallowedChangeByService != null && this.ServiceName == disallowedChangeByService.ServiceName && this.DisallowedChange == disallowedChangeByService.DisallowedChange);
        }

        public override bool Equals(object disallowedChangeByService)
        {
            return Equals(disallowedChangeByService as DisallowedChangeByService);
        }

        public override int GetHashCode()
        {
            return (ServiceName + "_" + DisallowedChange).GetHashCode();
        }
    }

    public class DisallowedDiskModeChange : InvalidDeviceSpec, IEquatable<DisallowedDiskModeChange>
    {
        public bool Equals(DisallowedDiskModeChange disallowedDiskModeChange)
        {
            return (disallowedDiskModeChange != null && base.Equals(disallowedDiskModeChange));
        }

        public override bool Equals(object disallowedDiskModeChange)
        {
            return Equals(disallowedDiskModeChange as DisallowedDiskModeChange);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DisallowedMigrationDeviceAttached : MigrationFault, IEquatable<DisallowedMigrationDeviceAttached>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(DisallowedMigrationDeviceAttached disallowedMigrationDeviceAttached)
        {
            return (disallowedMigrationDeviceAttached != null && ((this.Fault == null && disallowedMigrationDeviceAttached.Fault == null) || (this.Fault != null && this.Fault.Equals(disallowedMigrationDeviceAttached.Fault))));
        }

        public override bool Equals(object disallowedMigrationDeviceAttached)
        {
            return Equals(disallowedMigrationDeviceAttached as DisallowedMigrationDeviceAttached);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class DisallowedOperationOnFailoverHost : RuntimeFault, IEquatable<DisallowedOperationOnFailoverHost>
    {
        public ManagedObjectReference Host { get; set; }

        public string Hostname { get; set; }

        public DisallowedOperationOnFailoverHost_LinkedView LinkedView { get; set; }

        public bool Equals(DisallowedOperationOnFailoverHost disallowedOperationOnFailoverHost)
        {
            return (disallowedOperationOnFailoverHost != null && ((this.Host == null && disallowedOperationOnFailoverHost.Host == null) || (this.Host != null && this.Host.Equals(disallowedOperationOnFailoverHost.Host))) && this.Hostname == disallowedOperationOnFailoverHost.Hostname && ((this.LinkedView == null && disallowedOperationOnFailoverHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(disallowedOperationOnFailoverHost.LinkedView))));
        }

        public override bool Equals(object disallowedOperationOnFailoverHost)
        {
            return Equals(disallowedOperationOnFailoverHost as DisallowedOperationOnFailoverHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Hostname + "_" + LinkedView).GetHashCode();
        }
    }

    public class DisallowedOperationOnFailoverHost_LinkedView : IEquatable<DisallowedOperationOnFailoverHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DisallowedOperationOnFailoverHost_LinkedView disallowedOperationOnFailoverHost_LinkedView)
        {
            return (disallowedOperationOnFailoverHost_LinkedView != null && ((this.Host == null && disallowedOperationOnFailoverHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(disallowedOperationOnFailoverHost_LinkedView.Host))));
        }

        public override bool Equals(object disallowedOperationOnFailoverHost_LinkedView)
        {
            return Equals(disallowedOperationOnFailoverHost_LinkedView as DisallowedOperationOnFailoverHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DisconnectedHostsBlockingEVC : EVCConfigFault, IEquatable<DisconnectedHostsBlockingEVC>
    {
        public bool Equals(DisconnectedHostsBlockingEVC disconnectedHostsBlockingEVC)
        {
            return (disconnectedHostsBlockingEVC != null && base.Equals(disconnectedHostsBlockingEVC));
        }

        public override bool Equals(object disconnectedHostsBlockingEVC)
        {
            return Equals(disconnectedHostsBlockingEVC as DisconnectedHostsBlockingEVC);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskChangeExtent : DynamicData, IEquatable<DiskChangeExtent>
    {
        public long Start { get; set; }

        public long Length { get; set; }

        public bool Equals(DiskChangeExtent diskChangeExtent)
        {
            return (diskChangeExtent != null && this.Start == diskChangeExtent.Start && this.Length == diskChangeExtent.Length);
        }

        public override bool Equals(object diskChangeExtent)
        {
            return Equals(diskChangeExtent as DiskChangeExtent);
        }

        public override int GetHashCode()
        {
            return (Start + "_" + Length).GetHashCode();
        }
    }

    public class DiskChangeInfo : DynamicData, IEquatable<DiskChangeInfo>
    {
        public long StartOffset { get; set; }

        public long Length { get; set; }

        public DiskChangeExtent[] ChangedArea { get; set; }

        public bool Equals(DiskChangeInfo diskChangeInfo)
        {
            return (diskChangeInfo != null && this.StartOffset == diskChangeInfo.StartOffset && this.Length == diskChangeInfo.Length && ((this.ChangedArea == null && diskChangeInfo.ChangedArea == null) || (this.ChangedArea != null && diskChangeInfo.ChangedArea != null && Enumerable.SequenceEqual(this.ChangedArea, diskChangeInfo.ChangedArea))));
        }

        public override bool Equals(object diskChangeInfo)
        {
            return Equals(diskChangeInfo as DiskChangeInfo);
        }

        public override int GetHashCode()
        {
            return (StartOffset + "_" + Length + "_" + ChangedArea).GetHashCode();
        }
    }

    public class DiskHasPartitions : VsanDiskFault, IEquatable<DiskHasPartitions>
    {
        public bool Equals(DiskHasPartitions diskHasPartitions)
        {
            return (diskHasPartitions != null && base.Equals(diskHasPartitions));
        }

        public override bool Equals(object diskHasPartitions)
        {
            return Equals(diskHasPartitions as DiskHasPartitions);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskIsLastRemainingNonSSD : VsanDiskFault, IEquatable<DiskIsLastRemainingNonSSD>
    {
        public bool Equals(DiskIsLastRemainingNonSSD diskIsLastRemainingNonSSD)
        {
            return (diskIsLastRemainingNonSSD != null && base.Equals(diskIsLastRemainingNonSSD));
        }

        public override bool Equals(object diskIsLastRemainingNonSSD)
        {
            return Equals(diskIsLastRemainingNonSSD as DiskIsLastRemainingNonSSD);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskIsNonLocal : VsanDiskFault, IEquatable<DiskIsNonLocal>
    {
        public bool Equals(DiskIsNonLocal diskIsNonLocal)
        {
            return (diskIsNonLocal != null && base.Equals(diskIsNonLocal));
        }

        public override bool Equals(object diskIsNonLocal)
        {
            return Equals(diskIsNonLocal as DiskIsNonLocal);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskIsUSB : VsanDiskFault, IEquatable<DiskIsUSB>
    {
        public bool Equals(DiskIsUSB diskIsUSB)
        {
            return (diskIsUSB != null && base.Equals(diskIsUSB));
        }

        public override bool Equals(object diskIsUSB)
        {
            return Equals(diskIsUSB as DiskIsUSB);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskMoveTypeNotSupported : MigrationFault, IEquatable<DiskMoveTypeNotSupported>
    {
        public bool Equals(DiskMoveTypeNotSupported diskMoveTypeNotSupported)
        {
            return (diskMoveTypeNotSupported != null && base.Equals(diskMoveTypeNotSupported));
        }

        public override bool Equals(object diskMoveTypeNotSupported)
        {
            return Equals(diskMoveTypeNotSupported as DiskMoveTypeNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DiskNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<DiskNotSupported>
    {
        public int Disk { get; set; }

        public bool Equals(DiskNotSupported diskNotSupported)
        {
            return (diskNotSupported != null && this.Disk == diskNotSupported.Disk);
        }

        public override bool Equals(object diskNotSupported)
        {
            return Equals(diskNotSupported as DiskNotSupported);
        }

        public override int GetHashCode()
        {
            return (Disk).GetHashCode();
        }
    }

    public class DiskTooSmall : VsanDiskFault, IEquatable<DiskTooSmall>
    {
        public bool Equals(DiskTooSmall diskTooSmall)
        {
            return (diskTooSmall != null && base.Equals(diskTooSmall));
        }

        public override bool Equals(object diskTooSmall)
        {
            return Equals(diskTooSmall as DiskTooSmall);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DistributedVirtualPort : DynamicData, IEquatable<DistributedVirtualPort>
    {
        public string Key { get; set; }

        public DVPortConfigInfo Config { get; set; }

        public string DvsUuid { get; set; }

        public string PortgroupKey { get; set; }

        public ManagedObjectReference ProxyHost { get; set; }

        public DistributedVirtualSwitchPortConnectee Connectee { get; set; }

        public bool Conflict { get; set; }

        public string ConflictPortKey { get; set; }

        public DVPortState State { get; set; }

        public int? ConnectionCookie { get; set; }

        public DateTime LastStatusChange { get; set; }

        public bool? HostLocalPort { get; set; }

        public DistributedVirtualPort_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualPort distributedVirtualPort)
        {
            return (distributedVirtualPort != null && this.Key == distributedVirtualPort.Key && ((this.Config == null && distributedVirtualPort.Config == null) || (this.Config != null && this.Config.Equals(distributedVirtualPort.Config))) && this.DvsUuid == distributedVirtualPort.DvsUuid && this.PortgroupKey == distributedVirtualPort.PortgroupKey && ((this.ProxyHost == null && distributedVirtualPort.ProxyHost == null) || (this.ProxyHost != null && this.ProxyHost.Equals(distributedVirtualPort.ProxyHost))) && ((this.Connectee == null && distributedVirtualPort.Connectee == null) || (this.Connectee != null && this.Connectee.Equals(distributedVirtualPort.Connectee))) && this.Conflict == distributedVirtualPort.Conflict && this.ConflictPortKey == distributedVirtualPort.ConflictPortKey && ((this.State == null && distributedVirtualPort.State == null) || (this.State != null && this.State.Equals(distributedVirtualPort.State))) && ((this.ConnectionCookie == null && distributedVirtualPort.ConnectionCookie == null) || (this.ConnectionCookie != null && this.ConnectionCookie.Equals(distributedVirtualPort.ConnectionCookie))) && this.LastStatusChange == distributedVirtualPort.LastStatusChange && ((this.HostLocalPort == null && distributedVirtualPort.HostLocalPort == null) || (this.HostLocalPort != null && this.HostLocalPort.Equals(distributedVirtualPort.HostLocalPort))) && ((this.LinkedView == null && distributedVirtualPort.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualPort.LinkedView))));
        }

        public override bool Equals(object distributedVirtualPort)
        {
            return Equals(distributedVirtualPort as DistributedVirtualPort);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Config + "_" + DvsUuid + "_" + PortgroupKey + "_" + ProxyHost + "_" + Connectee + "_" + Conflict + "_" + ConflictPortKey + "_" + State + "_" + ConnectionCookie + "_" + LastStatusChange + "_" + HostLocalPort + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualPort_LinkedView : IEquatable<DistributedVirtualPort_LinkedView>
    {
        public HostSystem ProxyHost { get; set; }

        public bool Equals(DistributedVirtualPort_LinkedView distributedVirtualPort_LinkedView)
        {
            return (distributedVirtualPort_LinkedView != null && ((this.ProxyHost == null && distributedVirtualPort_LinkedView.ProxyHost == null) || (this.ProxyHost != null && this.ProxyHost.Equals(distributedVirtualPort_LinkedView.ProxyHost))));
        }

        public override bool Equals(object distributedVirtualPort_LinkedView)
        {
            return Equals(distributedVirtualPort_LinkedView as DistributedVirtualPort_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ProxyHost).GetHashCode();
        }
    }

    public class DistributedVirtualPortgroup : Network, IEquatable<DistributedVirtualPortgroup>
    {
        public string Key { get; set; }

        public DVPortgroupConfigInfo Config { get; set; }

        public string[] PortKeys { get; set; }

        public new DistributedVirtualPortgroup_LinkedView LinkedView { get; set; }

        public ManagedObjectReference ReconfigureDVPortgroup_Task(DVPortgroupConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureDVPortgroup(DVPortgroupConfigSpec spec)
        {
        }

        public ManagedObjectReference DVPortgroupRollback_Task(EntityBackupConfig entityBackup)
        {
            return default(ManagedObjectReference);
        }

        public DVPortgroupConfigSpec DVPortgroupRollback(EntityBackupConfig entityBackup)
        {
            return default(DVPortgroupConfigSpec);
        }

        public bool Equals(DistributedVirtualPortgroup distributedVirtualPortgroup)
        {
            return (distributedVirtualPortgroup != null && this.Key == distributedVirtualPortgroup.Key && ((this.Config == null && distributedVirtualPortgroup.Config == null) || (this.Config != null && this.Config.Equals(distributedVirtualPortgroup.Config))) && ((this.PortKeys == null && distributedVirtualPortgroup.PortKeys == null) || (this.PortKeys != null && distributedVirtualPortgroup.PortKeys != null && Enumerable.SequenceEqual(this.PortKeys, distributedVirtualPortgroup.PortKeys))) && ((this.LinkedView == null && distributedVirtualPortgroup.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualPortgroup.LinkedView))));
        }

        public override bool Equals(object distributedVirtualPortgroup)
        {
            return Equals(distributedVirtualPortgroup as DistributedVirtualPortgroup);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Config + "_" + PortKeys + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualPortgroup_LinkedView : Network_LinkedView, IEquatable<DistributedVirtualPortgroup_LinkedView>
    {
        public bool Equals(DistributedVirtualPortgroup_LinkedView distributedVirtualPortgroup_LinkedView)
        {
            return (distributedVirtualPortgroup_LinkedView != null && base.Equals(distributedVirtualPortgroup_LinkedView));
        }

        public override bool Equals(object distributedVirtualPortgroup_LinkedView)
        {
            return Equals(distributedVirtualPortgroup_LinkedView as DistributedVirtualPortgroup_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DistributedVirtualPortgroupInfo : DynamicData, IEquatable<DistributedVirtualPortgroupInfo>
    {
        public string SwitchName { get; set; }

        public string SwitchUuid { get; set; }

        public string PortgroupName { get; set; }

        public string PortgroupKey { get; set; }

        public string PortgroupType { get; set; }

        public bool UplinkPortgroup { get; set; }

        public ManagedObjectReference Portgroup { get; set; }

        public bool? NetworkReservationSupported { get; set; }

        public DistributedVirtualPortgroupInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualPortgroupInfo distributedVirtualPortgroupInfo)
        {
            return (distributedVirtualPortgroupInfo != null && this.SwitchName == distributedVirtualPortgroupInfo.SwitchName && this.SwitchUuid == distributedVirtualPortgroupInfo.SwitchUuid && this.PortgroupName == distributedVirtualPortgroupInfo.PortgroupName && this.PortgroupKey == distributedVirtualPortgroupInfo.PortgroupKey && this.PortgroupType == distributedVirtualPortgroupInfo.PortgroupType && this.UplinkPortgroup == distributedVirtualPortgroupInfo.UplinkPortgroup && ((this.Portgroup == null && distributedVirtualPortgroupInfo.Portgroup == null) || (this.Portgroup != null && this.Portgroup.Equals(distributedVirtualPortgroupInfo.Portgroup))) && ((this.NetworkReservationSupported == null && distributedVirtualPortgroupInfo.NetworkReservationSupported == null) || (this.NetworkReservationSupported != null && this.NetworkReservationSupported.Equals(distributedVirtualPortgroupInfo.NetworkReservationSupported))) && ((this.LinkedView == null && distributedVirtualPortgroupInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualPortgroupInfo.LinkedView))));
        }

        public override bool Equals(object distributedVirtualPortgroupInfo)
        {
            return Equals(distributedVirtualPortgroupInfo as DistributedVirtualPortgroupInfo);
        }

        public override int GetHashCode()
        {
            return (SwitchName + "_" + SwitchUuid + "_" + PortgroupName + "_" + PortgroupKey + "_" + PortgroupType + "_" + UplinkPortgroup + "_" + Portgroup + "_" + NetworkReservationSupported + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualPortgroupInfo_LinkedView : IEquatable<DistributedVirtualPortgroupInfo_LinkedView>
    {
        public DistributedVirtualPortgroup Portgroup { get; set; }

        public bool Equals(DistributedVirtualPortgroupInfo_LinkedView distributedVirtualPortgroupInfo_LinkedView)
        {
            return (distributedVirtualPortgroupInfo_LinkedView != null && ((this.Portgroup == null && distributedVirtualPortgroupInfo_LinkedView.Portgroup == null) || (this.Portgroup != null && this.Portgroup.Equals(distributedVirtualPortgroupInfo_LinkedView.Portgroup))));
        }

        public override bool Equals(object distributedVirtualPortgroupInfo_LinkedView)
        {
            return Equals(distributedVirtualPortgroupInfo_LinkedView as DistributedVirtualPortgroupInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Portgroup).GetHashCode();
        }
    }

    public class DistributedVirtualSwitch : ManagedEntity, IEquatable<DistributedVirtualSwitch>
    {
        public string Uuid { get; set; }

        public DVSCapability Capability { get; set; }

        public DVSSummary Summary { get; set; }

        public DVSConfigInfo Config { get; set; }

        public DVSNetworkResourcePool[] NetworkResourcePool { get; set; }

        public ManagedObjectReference[] Portgroup { get; set; }

        public DVSRuntimeInfo Runtime { get; set; }

        public new DistributedVirtualSwitch_LinkedView LinkedView { get; set; }

        public string[] FetchDVPortKeys(DistributedVirtualSwitchPortCriteria criteria)
        {
            return default(string[]);
        }

        public DistributedVirtualPort[] FetchDVPorts(DistributedVirtualSwitchPortCriteria criteria)
        {
            return default(DistributedVirtualPort[]);
        }

        public int[] QueryUsedVlanIdInDvs()
        {
            return default(int[]);
        }

        public ManagedObjectReference ReconfigureDvs_Task(DVSConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureDvs(DVSConfigSpec spec)
        {
        }

        public ManagedObjectReference PerformDvsProductSpecOperation_Task(string operation, DistributedVirtualSwitchProductSpec productSpec)
        {
            return default(ManagedObjectReference);
        }

        public void PerformDvsProductSpecOperation(string operation, DistributedVirtualSwitchProductSpec productSpec)
        {
        }

        public ManagedObjectReference MergeDvs_Task(ManagedObjectReference dvs)
        {
            return default(ManagedObjectReference);
        }

        public void MergeDvs(ManagedObjectReference dvs)
        {
        }

        public ManagedObjectReference AddDVPortgroup_Task(DVPortgroupConfigSpec[] spec)
        {
            return default(ManagedObjectReference);
        }

        public void AddDVPortgroup(DVPortgroupConfigSpec[] spec)
        {
        }

        public ManagedObjectReference MoveDVPort_Task(string[] portKey, string destinationPortgroupKey)
        {
            return default(ManagedObjectReference);
        }

        public void MoveDVPort(string[] portKey, string destinationPortgroupKey)
        {
        }

        public void UpdateDvsCapability(DVSCapability capability)
        {
        }

        public ManagedObjectReference ReconfigureDVPort_Task(DVPortConfigSpec[] port)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureDVPort(DVPortConfigSpec[] port)
        {
        }

        public void RefreshDVPortState(string[] portKeys)
        {
        }

        public ManagedObjectReference RectifyDvsHost_Task(ManagedObjectReference[] hosts)
        {
            return default(ManagedObjectReference);
        }

        public void RectifyDvsHost(ManagedObjectReference[] hosts)
        {
        }

        public void UpdateNetworkResourcePool(DVSNetworkResourcePoolConfigSpec[] configSpec)
        {
        }

        public void AddNetworkResourcePool(DVSNetworkResourcePoolConfigSpec[] configSpec)
        {
        }

        public void RemoveNetworkResourcePool(string[] key)
        {
        }

        public ManagedObjectReference DvsReconfigureVmVnicNetworkResourcePool_Task(DvsVmVnicResourcePoolConfigSpec[] configSpec)
        {
            return default(ManagedObjectReference);
        }

        public void DvsReconfigureVmVnicNetworkResourcePool(DvsVmVnicResourcePoolConfigSpec[] configSpec)
        {
        }

        public void EnableNetworkResourceManagement(bool enable)
        {
        }

        public ManagedObjectReference DVSRollback_Task(EntityBackupConfig entityBackup)
        {
            return default(ManagedObjectReference);
        }

        public DVSConfigSpec DVSRollback(EntityBackupConfig entityBackup)
        {
            return default(DVSConfigSpec);
        }

        public ManagedObjectReference CreateDVPortgroup_Task(DVPortgroupConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateDVPortgroup(DVPortgroupConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference UpdateDVSHealthCheckConfig_Task(DVSHealthCheckConfig[] healthCheckConfig)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateDVSHealthCheckConfig(DVSHealthCheckConfig[] healthCheckConfig)
        {
        }

        public ManagedObjectReference LookupDvPortGroup(string portgroupKey)
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(DistributedVirtualSwitch distributedVirtualSwitch)
        {
            return (distributedVirtualSwitch != null && this.Uuid == distributedVirtualSwitch.Uuid && ((this.Capability == null && distributedVirtualSwitch.Capability == null) || (this.Capability != null && this.Capability.Equals(distributedVirtualSwitch.Capability))) && ((this.Summary == null && distributedVirtualSwitch.Summary == null) || (this.Summary != null && this.Summary.Equals(distributedVirtualSwitch.Summary))) && ((this.Config == null && distributedVirtualSwitch.Config == null) || (this.Config != null && this.Config.Equals(distributedVirtualSwitch.Config))) && ((this.NetworkResourcePool == null && distributedVirtualSwitch.NetworkResourcePool == null) || (this.NetworkResourcePool != null && distributedVirtualSwitch.NetworkResourcePool != null && Enumerable.SequenceEqual(this.NetworkResourcePool, distributedVirtualSwitch.NetworkResourcePool))) && ((this.Portgroup == null && distributedVirtualSwitch.Portgroup == null) || (this.Portgroup != null && distributedVirtualSwitch.Portgroup != null && Enumerable.SequenceEqual(this.Portgroup, distributedVirtualSwitch.Portgroup))) && ((this.Runtime == null && distributedVirtualSwitch.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(distributedVirtualSwitch.Runtime))) && ((this.LinkedView == null && distributedVirtualSwitch.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitch.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitch)
        {
            return Equals(distributedVirtualSwitch as DistributedVirtualSwitch);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + Capability + "_" + Summary + "_" + Config + "_" + NetworkResourcePool + "_" + Portgroup + "_" + Runtime + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitch_LinkedView : ManagedEntity_LinkedView, IEquatable<DistributedVirtualSwitch_LinkedView>
    {
        public DistributedVirtualPortgroup[] Portgroup { get; set; }

        public bool Equals(DistributedVirtualSwitch_LinkedView distributedVirtualSwitch_LinkedView)
        {
            return (distributedVirtualSwitch_LinkedView != null && ((this.Portgroup == null && distributedVirtualSwitch_LinkedView.Portgroup == null) || (this.Portgroup != null && distributedVirtualSwitch_LinkedView.Portgroup != null && Enumerable.SequenceEqual(this.Portgroup, distributedVirtualSwitch_LinkedView.Portgroup))));
        }

        public override bool Equals(object distributedVirtualSwitch_LinkedView)
        {
            return Equals(distributedVirtualSwitch_LinkedView as DistributedVirtualSwitch_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Portgroup).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMember : DynamicData, IEquatable<DistributedVirtualSwitchHostMember>
    {
        public DistributedVirtualSwitchHostMemberRuntimeState RuntimeState { get; set; }

        public DistributedVirtualSwitchHostMemberConfigInfo Config { get; set; }

        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public string[] UplinkPortKey { get; set; }

        public string Status { get; set; }

        public string StatusDetail { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMember distributedVirtualSwitchHostMember)
        {
            return (distributedVirtualSwitchHostMember != null && ((this.RuntimeState == null && distributedVirtualSwitchHostMember.RuntimeState == null) || (this.RuntimeState != null && this.RuntimeState.Equals(distributedVirtualSwitchHostMember.RuntimeState))) && ((this.Config == null && distributedVirtualSwitchHostMember.Config == null) || (this.Config != null && this.Config.Equals(distributedVirtualSwitchHostMember.Config))) && ((this.ProductInfo == null && distributedVirtualSwitchHostMember.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(distributedVirtualSwitchHostMember.ProductInfo))) && ((this.UplinkPortKey == null && distributedVirtualSwitchHostMember.UplinkPortKey == null) || (this.UplinkPortKey != null && distributedVirtualSwitchHostMember.UplinkPortKey != null && Enumerable.SequenceEqual(this.UplinkPortKey, distributedVirtualSwitchHostMember.UplinkPortKey))) && this.Status == distributedVirtualSwitchHostMember.Status && this.StatusDetail == distributedVirtualSwitchHostMember.StatusDetail);
        }

        public override bool Equals(object distributedVirtualSwitchHostMember)
        {
            return Equals(distributedVirtualSwitchHostMember as DistributedVirtualSwitchHostMember);
        }

        public override int GetHashCode()
        {
            return (RuntimeState + "_" + Config + "_" + ProductInfo + "_" + UplinkPortKey + "_" + Status + "_" + StatusDetail).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberBacking : DynamicData, IEquatable<DistributedVirtualSwitchHostMemberBacking>
    {
        public bool Equals(DistributedVirtualSwitchHostMemberBacking distributedVirtualSwitchHostMemberBacking)
        {
            return (distributedVirtualSwitchHostMemberBacking != null && base.Equals(distributedVirtualSwitchHostMemberBacking));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberBacking)
        {
            return Equals(distributedVirtualSwitchHostMemberBacking as DistributedVirtualSwitchHostMemberBacking);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberConfigInfo : DynamicData, IEquatable<DistributedVirtualSwitchHostMemberConfigInfo>
    {
        public ManagedObjectReference Host { get; set; }

        public int MaxProxySwitchPorts { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public DistributedVirtualSwitchHostMemberBacking Backing { get; set; }

        public DistributedVirtualSwitchHostMemberConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberConfigInfo distributedVirtualSwitchHostMemberConfigInfo)
        {
            return (distributedVirtualSwitchHostMemberConfigInfo != null && ((this.Host == null && distributedVirtualSwitchHostMemberConfigInfo.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchHostMemberConfigInfo.Host))) && this.MaxProxySwitchPorts == distributedVirtualSwitchHostMemberConfigInfo.MaxProxySwitchPorts && ((this.VendorSpecificConfig == null && distributedVirtualSwitchHostMemberConfigInfo.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && distributedVirtualSwitchHostMemberConfigInfo.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, distributedVirtualSwitchHostMemberConfigInfo.VendorSpecificConfig))) && ((this.Backing == null && distributedVirtualSwitchHostMemberConfigInfo.Backing == null) || (this.Backing != null && this.Backing.Equals(distributedVirtualSwitchHostMemberConfigInfo.Backing))) && ((this.LinkedView == null && distributedVirtualSwitchHostMemberConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchHostMemberConfigInfo.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberConfigInfo)
        {
            return Equals(distributedVirtualSwitchHostMemberConfigInfo as DistributedVirtualSwitchHostMemberConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + MaxProxySwitchPorts + "_" + VendorSpecificConfig + "_" + Backing + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberConfigInfo_LinkedView : IEquatable<DistributedVirtualSwitchHostMemberConfigInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberConfigInfo_LinkedView distributedVirtualSwitchHostMemberConfigInfo_LinkedView)
        {
            return (distributedVirtualSwitchHostMemberConfigInfo_LinkedView != null && ((this.Host == null && distributedVirtualSwitchHostMemberConfigInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchHostMemberConfigInfo_LinkedView.Host))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberConfigInfo_LinkedView)
        {
            return Equals(distributedVirtualSwitchHostMemberConfigInfo_LinkedView as DistributedVirtualSwitchHostMemberConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberConfigSpec : DynamicData, IEquatable<DistributedVirtualSwitchHostMemberConfigSpec>
    {
        public string Operation { get; set; }

        public ManagedObjectReference Host { get; set; }

        public DistributedVirtualSwitchHostMemberBacking Backing { get; set; }

        public int? MaxProxySwitchPorts { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public DistributedVirtualSwitchHostMemberConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberConfigSpec distributedVirtualSwitchHostMemberConfigSpec)
        {
            return (distributedVirtualSwitchHostMemberConfigSpec != null && this.Operation == distributedVirtualSwitchHostMemberConfigSpec.Operation && ((this.Host == null && distributedVirtualSwitchHostMemberConfigSpec.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchHostMemberConfigSpec.Host))) && ((this.Backing == null && distributedVirtualSwitchHostMemberConfigSpec.Backing == null) || (this.Backing != null && this.Backing.Equals(distributedVirtualSwitchHostMemberConfigSpec.Backing))) && ((this.MaxProxySwitchPorts == null && distributedVirtualSwitchHostMemberConfigSpec.MaxProxySwitchPorts == null) || (this.MaxProxySwitchPorts != null && this.MaxProxySwitchPorts.Equals(distributedVirtualSwitchHostMemberConfigSpec.MaxProxySwitchPorts))) && ((this.VendorSpecificConfig == null && distributedVirtualSwitchHostMemberConfigSpec.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && distributedVirtualSwitchHostMemberConfigSpec.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, distributedVirtualSwitchHostMemberConfigSpec.VendorSpecificConfig))) && ((this.LinkedView == null && distributedVirtualSwitchHostMemberConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchHostMemberConfigSpec.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberConfigSpec)
        {
            return Equals(distributedVirtualSwitchHostMemberConfigSpec as DistributedVirtualSwitchHostMemberConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + Host + "_" + Backing + "_" + MaxProxySwitchPorts + "_" + VendorSpecificConfig + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberConfigSpec_LinkedView : IEquatable<DistributedVirtualSwitchHostMemberConfigSpec_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberConfigSpec_LinkedView distributedVirtualSwitchHostMemberConfigSpec_LinkedView)
        {
            return (distributedVirtualSwitchHostMemberConfigSpec_LinkedView != null && ((this.Host == null && distributedVirtualSwitchHostMemberConfigSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchHostMemberConfigSpec_LinkedView.Host))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberConfigSpec_LinkedView)
        {
            return Equals(distributedVirtualSwitchHostMemberConfigSpec_LinkedView as DistributedVirtualSwitchHostMemberConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberPnicBacking : DistributedVirtualSwitchHostMemberBacking, IEquatable<DistributedVirtualSwitchHostMemberPnicBacking>
    {
        public DistributedVirtualSwitchHostMemberPnicSpec[] PnicSpec { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberPnicBacking distributedVirtualSwitchHostMemberPnicBacking)
        {
            return (distributedVirtualSwitchHostMemberPnicBacking != null && ((this.PnicSpec == null && distributedVirtualSwitchHostMemberPnicBacking.PnicSpec == null) || (this.PnicSpec != null && distributedVirtualSwitchHostMemberPnicBacking.PnicSpec != null && Enumerable.SequenceEqual(this.PnicSpec, distributedVirtualSwitchHostMemberPnicBacking.PnicSpec))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberPnicBacking)
        {
            return Equals(distributedVirtualSwitchHostMemberPnicBacking as DistributedVirtualSwitchHostMemberPnicBacking);
        }

        public override int GetHashCode()
        {
            return (PnicSpec).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberPnicSpec : DynamicData, IEquatable<DistributedVirtualSwitchHostMemberPnicSpec>
    {
        public string PnicDevice { get; set; }

        public string UplinkPortKey { get; set; }

        public string UplinkPortgroupKey { get; set; }

        public int? ConnectionCookie { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberPnicSpec distributedVirtualSwitchHostMemberPnicSpec)
        {
            return (distributedVirtualSwitchHostMemberPnicSpec != null && this.PnicDevice == distributedVirtualSwitchHostMemberPnicSpec.PnicDevice && this.UplinkPortKey == distributedVirtualSwitchHostMemberPnicSpec.UplinkPortKey && this.UplinkPortgroupKey == distributedVirtualSwitchHostMemberPnicSpec.UplinkPortgroupKey && ((this.ConnectionCookie == null && distributedVirtualSwitchHostMemberPnicSpec.ConnectionCookie == null) || (this.ConnectionCookie != null && this.ConnectionCookie.Equals(distributedVirtualSwitchHostMemberPnicSpec.ConnectionCookie))));
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberPnicSpec)
        {
            return Equals(distributedVirtualSwitchHostMemberPnicSpec as DistributedVirtualSwitchHostMemberPnicSpec);
        }

        public override int GetHashCode()
        {
            return (PnicDevice + "_" + UplinkPortKey + "_" + UplinkPortgroupKey + "_" + ConnectionCookie).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostMemberRuntimeState : DynamicData, IEquatable<DistributedVirtualSwitchHostMemberRuntimeState>
    {
        public int CurrentMaxProxySwitchPorts { get; set; }

        public bool Equals(DistributedVirtualSwitchHostMemberRuntimeState distributedVirtualSwitchHostMemberRuntimeState)
        {
            return (distributedVirtualSwitchHostMemberRuntimeState != null && this.CurrentMaxProxySwitchPorts == distributedVirtualSwitchHostMemberRuntimeState.CurrentMaxProxySwitchPorts);
        }

        public override bool Equals(object distributedVirtualSwitchHostMemberRuntimeState)
        {
            return Equals(distributedVirtualSwitchHostMemberRuntimeState as DistributedVirtualSwitchHostMemberRuntimeState);
        }

        public override int GetHashCode()
        {
            return (CurrentMaxProxySwitchPorts).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchHostProductSpec : DynamicData, IEquatable<DistributedVirtualSwitchHostProductSpec>
    {
        public string ProductLineId { get; set; }

        public string Version { get; set; }

        public bool Equals(DistributedVirtualSwitchHostProductSpec distributedVirtualSwitchHostProductSpec)
        {
            return (distributedVirtualSwitchHostProductSpec != null && this.ProductLineId == distributedVirtualSwitchHostProductSpec.ProductLineId && this.Version == distributedVirtualSwitchHostProductSpec.Version);
        }

        public override bool Equals(object distributedVirtualSwitchHostProductSpec)
        {
            return Equals(distributedVirtualSwitchHostProductSpec as DistributedVirtualSwitchHostProductSpec);
        }

        public override int GetHashCode()
        {
            return (ProductLineId + "_" + Version).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchInfo : DynamicData, IEquatable<DistributedVirtualSwitchInfo>
    {
        public string SwitchName { get; set; }

        public string SwitchUuid { get; set; }

        public ManagedObjectReference DistributedVirtualSwitch { get; set; }

        public bool? NetworkReservationSupported { get; set; }

        public DistributedVirtualSwitchInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchInfo distributedVirtualSwitchInfo)
        {
            return (distributedVirtualSwitchInfo != null && this.SwitchName == distributedVirtualSwitchInfo.SwitchName && this.SwitchUuid == distributedVirtualSwitchInfo.SwitchUuid && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchInfo.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchInfo.DistributedVirtualSwitch))) && ((this.NetworkReservationSupported == null && distributedVirtualSwitchInfo.NetworkReservationSupported == null) || (this.NetworkReservationSupported != null && this.NetworkReservationSupported.Equals(distributedVirtualSwitchInfo.NetworkReservationSupported))) && ((this.LinkedView == null && distributedVirtualSwitchInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchInfo.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchInfo)
        {
            return Equals(distributedVirtualSwitchInfo as DistributedVirtualSwitchInfo);
        }

        public override int GetHashCode()
        {
            return (SwitchName + "_" + SwitchUuid + "_" + DistributedVirtualSwitch + "_" + NetworkReservationSupported + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchInfo_LinkedView : IEquatable<DistributedVirtualSwitchInfo_LinkedView>
    {
        public DistributedVirtualSwitch DistributedVirtualSwitch { get; set; }

        public bool Equals(DistributedVirtualSwitchInfo_LinkedView distributedVirtualSwitchInfo_LinkedView)
        {
            return (distributedVirtualSwitchInfo_LinkedView != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchInfo_LinkedView.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchInfo_LinkedView.DistributedVirtualSwitch))));
        }

        public override bool Equals(object distributedVirtualSwitchInfo_LinkedView)
        {
            return Equals(distributedVirtualSwitchInfo_LinkedView as DistributedVirtualSwitchInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchKeyedOpaqueBlob : DynamicData, IEquatable<DistributedVirtualSwitchKeyedOpaqueBlob>
    {
        public string Key { get; set; }

        public string OpaqueData { get; set; }

        public bool Equals(DistributedVirtualSwitchKeyedOpaqueBlob distributedVirtualSwitchKeyedOpaqueBlob)
        {
            return (distributedVirtualSwitchKeyedOpaqueBlob != null && this.Key == distributedVirtualSwitchKeyedOpaqueBlob.Key && this.OpaqueData == distributedVirtualSwitchKeyedOpaqueBlob.OpaqueData);
        }

        public override bool Equals(object distributedVirtualSwitchKeyedOpaqueBlob)
        {
            return Equals(distributedVirtualSwitchKeyedOpaqueBlob as DistributedVirtualSwitchKeyedOpaqueBlob);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + OpaqueData).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManager : ViewBase, IEquatable<DistributedVirtualSwitchManager>
    {
        public DistributedVirtualSwitchProductSpec[] QueryAvailableDvsSpec(bool? recommended)
        {
            return default(DistributedVirtualSwitchProductSpec[]);
        }

        public ManagedObjectReference[] QueryCompatibleHostForNewDvs(ManagedObjectReference container, bool recursive, DistributedVirtualSwitchProductSpec switchProductSpec)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference[] QueryCompatibleHostForExistingDvs(ManagedObjectReference container, bool recursive, ManagedObjectReference dvs)
        {
            return default(ManagedObjectReference[]);
        }

        public DistributedVirtualSwitchHostProductSpec[] QueryDvsCompatibleHostSpec(DistributedVirtualSwitchProductSpec switchProductSpec)
        {
            return default(DistributedVirtualSwitchHostProductSpec[]);
        }

        public DVSFeatureCapability QueryDvsFeatureCapability(DistributedVirtualSwitchProductSpec switchProductSpec)
        {
            return default(DVSFeatureCapability);
        }

        public ManagedObjectReference QueryDvsByUuid(string uuid)
        {
            return default(ManagedObjectReference);
        }

        public DVSManagerDvsConfigTarget QueryDvsConfigTarget(ManagedObjectReference host, ManagedObjectReference dvs)
        {
            return default(DVSManagerDvsConfigTarget);
        }

        public DistributedVirtualSwitchManagerCompatibilityResult[] QueryDvsCheckCompatibility(DistributedVirtualSwitchManagerHostContainer hostContainer, DistributedVirtualSwitchManagerDvsProductSpec dvsProductSpec, DistributedVirtualSwitchManagerHostDvsFilterSpec[] hostFilterSpec)
        {
            return default(DistributedVirtualSwitchManagerCompatibilityResult[]);
        }

        public ManagedObjectReference RectifyDvsOnHost_Task(ManagedObjectReference[] hosts)
        {
            return default(ManagedObjectReference);
        }

        public void RectifyDvsOnHost(ManagedObjectReference[] hosts)
        {
        }

        public ManagedObjectReference DVSManagerExportEntity_Task(SelectionSet[] selectionSet)
        {
            return default(ManagedObjectReference);
        }

        public EntityBackupConfig[] DVSManagerExportEntity(SelectionSet[] selectionSet)
        {
            return default(EntityBackupConfig[]);
        }

        public ManagedObjectReference DVSManagerImportEntity_Task(EntityBackupConfig[] entityBackup, string importType)
        {
            return default(ManagedObjectReference);
        }

        public DistributedVirtualSwitchManagerImportResult DVSManagerImportEntity(EntityBackupConfig[] entityBackup, string importType)
        {
            return default(DistributedVirtualSwitchManagerImportResult);
        }

        public ManagedObjectReference DVSManagerLookupDvPortGroup(string switchUuid, string portgroupKey)
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(DistributedVirtualSwitchManager distributedVirtualSwitchManager)
        {
            return (distributedVirtualSwitchManager != null && base.Equals(distributedVirtualSwitchManager));
        }

        public override bool Equals(object distributedVirtualSwitchManager)
        {
            return Equals(distributedVirtualSwitchManager as DistributedVirtualSwitchManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerCompatibilityResult : DynamicData, IEquatable<DistributedVirtualSwitchManagerCompatibilityResult>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public DistributedVirtualSwitchManagerCompatibilityResult_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerCompatibilityResult distributedVirtualSwitchManagerCompatibilityResult)
        {
            return (distributedVirtualSwitchManagerCompatibilityResult != null && ((this.Host == null && distributedVirtualSwitchManagerCompatibilityResult.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchManagerCompatibilityResult.Host))) && ((this.Error == null && distributedVirtualSwitchManagerCompatibilityResult.Error == null) || (this.Error != null && distributedVirtualSwitchManagerCompatibilityResult.Error != null && Enumerable.SequenceEqual(this.Error, distributedVirtualSwitchManagerCompatibilityResult.Error))) && ((this.LinkedView == null && distributedVirtualSwitchManagerCompatibilityResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerCompatibilityResult.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerCompatibilityResult)
        {
            return Equals(distributedVirtualSwitchManagerCompatibilityResult as DistributedVirtualSwitchManagerCompatibilityResult);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerCompatibilityResult_LinkedView : IEquatable<DistributedVirtualSwitchManagerCompatibilityResult_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerCompatibilityResult_LinkedView distributedVirtualSwitchManagerCompatibilityResult_LinkedView)
        {
            return (distributedVirtualSwitchManagerCompatibilityResult_LinkedView != null && ((this.Host == null && distributedVirtualSwitchManagerCompatibilityResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(distributedVirtualSwitchManagerCompatibilityResult_LinkedView.Host))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerCompatibilityResult_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerCompatibilityResult_LinkedView as DistributedVirtualSwitchManagerCompatibilityResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerDvsProductSpec : DynamicData, IEquatable<DistributedVirtualSwitchManagerDvsProductSpec>
    {
        public DistributedVirtualSwitchProductSpec NewSwitchProductSpec { get; set; }

        public ManagedObjectReference DistributedVirtualSwitch { get; set; }

        public DistributedVirtualSwitchManagerDvsProductSpec_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerDvsProductSpec distributedVirtualSwitchManagerDvsProductSpec)
        {
            return (distributedVirtualSwitchManagerDvsProductSpec != null && ((this.NewSwitchProductSpec == null && distributedVirtualSwitchManagerDvsProductSpec.NewSwitchProductSpec == null) || (this.NewSwitchProductSpec != null && this.NewSwitchProductSpec.Equals(distributedVirtualSwitchManagerDvsProductSpec.NewSwitchProductSpec))) && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerDvsProductSpec.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchManagerDvsProductSpec.DistributedVirtualSwitch))) && ((this.LinkedView == null && distributedVirtualSwitchManagerDvsProductSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerDvsProductSpec.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerDvsProductSpec)
        {
            return Equals(distributedVirtualSwitchManagerDvsProductSpec as DistributedVirtualSwitchManagerDvsProductSpec);
        }

        public override int GetHashCode()
        {
            return (NewSwitchProductSpec + "_" + DistributedVirtualSwitch + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerDvsProductSpec_LinkedView : IEquatable<DistributedVirtualSwitchManagerDvsProductSpec_LinkedView>
    {
        public DistributedVirtualSwitch DistributedVirtualSwitch { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerDvsProductSpec_LinkedView distributedVirtualSwitchManagerDvsProductSpec_LinkedView)
        {
            return (distributedVirtualSwitchManagerDvsProductSpec_LinkedView != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerDvsProductSpec_LinkedView.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchManagerDvsProductSpec_LinkedView.DistributedVirtualSwitch))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerDvsProductSpec_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerDvsProductSpec_LinkedView as DistributedVirtualSwitchManagerDvsProductSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostArrayFilter : DistributedVirtualSwitchManagerHostDvsFilterSpec, IEquatable<DistributedVirtualSwitchManagerHostArrayFilter>
    {
        public ManagedObjectReference[] Host { get; set; }

        public DistributedVirtualSwitchManagerHostArrayFilter_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostArrayFilter distributedVirtualSwitchManagerHostArrayFilter)
        {
            return (distributedVirtualSwitchManagerHostArrayFilter != null && ((this.Host == null && distributedVirtualSwitchManagerHostArrayFilter.Host == null) || (this.Host != null && distributedVirtualSwitchManagerHostArrayFilter.Host != null && Enumerable.SequenceEqual(this.Host, distributedVirtualSwitchManagerHostArrayFilter.Host))) && ((this.LinkedView == null && distributedVirtualSwitchManagerHostArrayFilter.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerHostArrayFilter.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostArrayFilter)
        {
            return Equals(distributedVirtualSwitchManagerHostArrayFilter as DistributedVirtualSwitchManagerHostArrayFilter);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostArrayFilter_LinkedView : IEquatable<DistributedVirtualSwitchManagerHostArrayFilter_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostArrayFilter_LinkedView distributedVirtualSwitchManagerHostArrayFilter_LinkedView)
        {
            return (distributedVirtualSwitchManagerHostArrayFilter_LinkedView != null && ((this.Host == null && distributedVirtualSwitchManagerHostArrayFilter_LinkedView.Host == null) || (this.Host != null && distributedVirtualSwitchManagerHostArrayFilter_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, distributedVirtualSwitchManagerHostArrayFilter_LinkedView.Host))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostArrayFilter_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerHostArrayFilter_LinkedView as DistributedVirtualSwitchManagerHostArrayFilter_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostContainer : DynamicData, IEquatable<DistributedVirtualSwitchManagerHostContainer>
    {
        public ManagedObjectReference Container { get; set; }

        public bool Recursive { get; set; }

        public DistributedVirtualSwitchManagerHostContainer_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostContainer distributedVirtualSwitchManagerHostContainer)
        {
            return (distributedVirtualSwitchManagerHostContainer != null && ((this.Container == null && distributedVirtualSwitchManagerHostContainer.Container == null) || (this.Container != null && this.Container.Equals(distributedVirtualSwitchManagerHostContainer.Container))) && this.Recursive == distributedVirtualSwitchManagerHostContainer.Recursive && ((this.LinkedView == null && distributedVirtualSwitchManagerHostContainer.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerHostContainer.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostContainer)
        {
            return Equals(distributedVirtualSwitchManagerHostContainer as DistributedVirtualSwitchManagerHostContainer);
        }

        public override int GetHashCode()
        {
            return (Container + "_" + Recursive + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostContainer_LinkedView : IEquatable<DistributedVirtualSwitchManagerHostContainer_LinkedView>
    {
        public ManagedEntity Container { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostContainer_LinkedView distributedVirtualSwitchManagerHostContainer_LinkedView)
        {
            return (distributedVirtualSwitchManagerHostContainer_LinkedView != null && ((this.Container == null && distributedVirtualSwitchManagerHostContainer_LinkedView.Container == null) || (this.Container != null && this.Container.Equals(distributedVirtualSwitchManagerHostContainer_LinkedView.Container))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostContainer_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerHostContainer_LinkedView as DistributedVirtualSwitchManagerHostContainer_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Container).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostContainerFilter : DistributedVirtualSwitchManagerHostDvsFilterSpec, IEquatable<DistributedVirtualSwitchManagerHostContainerFilter>
    {
        public DistributedVirtualSwitchManagerHostContainer HostContainer { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostContainerFilter distributedVirtualSwitchManagerHostContainerFilter)
        {
            return (distributedVirtualSwitchManagerHostContainerFilter != null && ((this.HostContainer == null && distributedVirtualSwitchManagerHostContainerFilter.HostContainer == null) || (this.HostContainer != null && this.HostContainer.Equals(distributedVirtualSwitchManagerHostContainerFilter.HostContainer))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostContainerFilter)
        {
            return Equals(distributedVirtualSwitchManagerHostContainerFilter as DistributedVirtualSwitchManagerHostContainerFilter);
        }

        public override int GetHashCode()
        {
            return (HostContainer).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostDvsFilterSpec : DynamicData, IEquatable<DistributedVirtualSwitchManagerHostDvsFilterSpec>
    {
        public bool Inclusive { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostDvsFilterSpec distributedVirtualSwitchManagerHostDvsFilterSpec)
        {
            return (distributedVirtualSwitchManagerHostDvsFilterSpec != null && this.Inclusive == distributedVirtualSwitchManagerHostDvsFilterSpec.Inclusive);
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostDvsFilterSpec)
        {
            return Equals(distributedVirtualSwitchManagerHostDvsFilterSpec as DistributedVirtualSwitchManagerHostDvsFilterSpec);
        }

        public override int GetHashCode()
        {
            return (Inclusive).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostDvsMembershipFilter : DistributedVirtualSwitchManagerHostDvsFilterSpec, IEquatable<DistributedVirtualSwitchManagerHostDvsMembershipFilter>
    {
        public ManagedObjectReference DistributedVirtualSwitch { get; set; }

        public DistributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostDvsMembershipFilter distributedVirtualSwitchManagerHostDvsMembershipFilter)
        {
            return (distributedVirtualSwitchManagerHostDvsMembershipFilter != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerHostDvsMembershipFilter.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchManagerHostDvsMembershipFilter.DistributedVirtualSwitch))) && ((this.LinkedView == null && distributedVirtualSwitchManagerHostDvsMembershipFilter.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerHostDvsMembershipFilter.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostDvsMembershipFilter)
        {
            return Equals(distributedVirtualSwitchManagerHostDvsMembershipFilter as DistributedVirtualSwitchManagerHostDvsMembershipFilter);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView : IEquatable<DistributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView>
    {
        public DistributedVirtualSwitch DistributedVirtualSwitch { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView)
        {
            return (distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView.DistributedVirtualSwitch))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView as DistributedVirtualSwitchManagerHostDvsMembershipFilter_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerImportResult : DynamicData, IEquatable<DistributedVirtualSwitchManagerImportResult>
    {
        public ManagedObjectReference[] DistributedVirtualSwitch { get; set; }

        public ManagedObjectReference[] DistributedVirtualPortgroup { get; set; }

        public ImportOperationBulkFaultFaultOnImport[] ImportFault { get; set; }

        public DistributedVirtualSwitchManagerImportResult_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerImportResult distributedVirtualSwitchManagerImportResult)
        {
            return (distributedVirtualSwitchManagerImportResult != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerImportResult.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && distributedVirtualSwitchManagerImportResult.DistributedVirtualSwitch != null && Enumerable.SequenceEqual(this.DistributedVirtualSwitch, distributedVirtualSwitchManagerImportResult.DistributedVirtualSwitch))) && ((this.DistributedVirtualPortgroup == null && distributedVirtualSwitchManagerImportResult.DistributedVirtualPortgroup == null) || (this.DistributedVirtualPortgroup != null && distributedVirtualSwitchManagerImportResult.DistributedVirtualPortgroup != null && Enumerable.SequenceEqual(this.DistributedVirtualPortgroup, distributedVirtualSwitchManagerImportResult.DistributedVirtualPortgroup))) && ((this.ImportFault == null && distributedVirtualSwitchManagerImportResult.ImportFault == null) || (this.ImportFault != null && distributedVirtualSwitchManagerImportResult.ImportFault != null && Enumerable.SequenceEqual(this.ImportFault, distributedVirtualSwitchManagerImportResult.ImportFault))) && ((this.LinkedView == null && distributedVirtualSwitchManagerImportResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchManagerImportResult.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerImportResult)
        {
            return Equals(distributedVirtualSwitchManagerImportResult as DistributedVirtualSwitchManagerImportResult);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch + "_" + DistributedVirtualPortgroup + "_" + ImportFault + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchManagerImportResult_LinkedView : IEquatable<DistributedVirtualSwitchManagerImportResult_LinkedView>
    {
        public DistributedVirtualSwitch[] DistributedVirtualSwitch { get; set; }

        public DistributedVirtualPortgroup[] DistributedVirtualPortgroup { get; set; }

        public bool Equals(DistributedVirtualSwitchManagerImportResult_LinkedView distributedVirtualSwitchManagerImportResult_LinkedView)
        {
            return (distributedVirtualSwitchManagerImportResult_LinkedView != null && ((this.DistributedVirtualSwitch == null && distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualSwitch != null && Enumerable.SequenceEqual(this.DistributedVirtualSwitch, distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualSwitch))) && ((this.DistributedVirtualPortgroup == null && distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualPortgroup == null) || (this.DistributedVirtualPortgroup != null && distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualPortgroup != null && Enumerable.SequenceEqual(this.DistributedVirtualPortgroup, distributedVirtualSwitchManagerImportResult_LinkedView.DistributedVirtualPortgroup))));
        }

        public override bool Equals(object distributedVirtualSwitchManagerImportResult_LinkedView)
        {
            return Equals(distributedVirtualSwitchManagerImportResult_LinkedView as DistributedVirtualSwitchManagerImportResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch + "_" + DistributedVirtualPortgroup).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortConnectee : DynamicData, IEquatable<DistributedVirtualSwitchPortConnectee>
    {
        public ManagedObjectReference ConnectedEntity { get; set; }

        public string NicKey { get; set; }

        public string Type { get; set; }

        public string AddressHint { get; set; }

        public DistributedVirtualSwitchPortConnectee_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchPortConnectee distributedVirtualSwitchPortConnectee)
        {
            return (distributedVirtualSwitchPortConnectee != null && ((this.ConnectedEntity == null && distributedVirtualSwitchPortConnectee.ConnectedEntity == null) || (this.ConnectedEntity != null && this.ConnectedEntity.Equals(distributedVirtualSwitchPortConnectee.ConnectedEntity))) && this.NicKey == distributedVirtualSwitchPortConnectee.NicKey && this.Type == distributedVirtualSwitchPortConnectee.Type && this.AddressHint == distributedVirtualSwitchPortConnectee.AddressHint && ((this.LinkedView == null && distributedVirtualSwitchPortConnectee.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchPortConnectee.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchPortConnectee)
        {
            return Equals(distributedVirtualSwitchPortConnectee as DistributedVirtualSwitchPortConnectee);
        }

        public override int GetHashCode()
        {
            return (ConnectedEntity + "_" + NicKey + "_" + Type + "_" + AddressHint + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortConnectee_LinkedView : IEquatable<DistributedVirtualSwitchPortConnectee_LinkedView>
    {
        public ManagedEntity ConnectedEntity { get; set; }

        public bool Equals(DistributedVirtualSwitchPortConnectee_LinkedView distributedVirtualSwitchPortConnectee_LinkedView)
        {
            return (distributedVirtualSwitchPortConnectee_LinkedView != null && ((this.ConnectedEntity == null && distributedVirtualSwitchPortConnectee_LinkedView.ConnectedEntity == null) || (this.ConnectedEntity != null && this.ConnectedEntity.Equals(distributedVirtualSwitchPortConnectee_LinkedView.ConnectedEntity))));
        }

        public override bool Equals(object distributedVirtualSwitchPortConnectee_LinkedView)
        {
            return Equals(distributedVirtualSwitchPortConnectee_LinkedView as DistributedVirtualSwitchPortConnectee_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ConnectedEntity).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortConnection : DynamicData, IEquatable<DistributedVirtualSwitchPortConnection>
    {
        public string SwitchUuid { get; set; }

        public string PortgroupKey { get; set; }

        public string PortKey { get; set; }

        public int? ConnectionCookie { get; set; }

        public bool Equals(DistributedVirtualSwitchPortConnection distributedVirtualSwitchPortConnection)
        {
            return (distributedVirtualSwitchPortConnection != null && this.SwitchUuid == distributedVirtualSwitchPortConnection.SwitchUuid && this.PortgroupKey == distributedVirtualSwitchPortConnection.PortgroupKey && this.PortKey == distributedVirtualSwitchPortConnection.PortKey && ((this.ConnectionCookie == null && distributedVirtualSwitchPortConnection.ConnectionCookie == null) || (this.ConnectionCookie != null && this.ConnectionCookie.Equals(distributedVirtualSwitchPortConnection.ConnectionCookie))));
        }

        public override bool Equals(object distributedVirtualSwitchPortConnection)
        {
            return Equals(distributedVirtualSwitchPortConnection as DistributedVirtualSwitchPortConnection);
        }

        public override int GetHashCode()
        {
            return (SwitchUuid + "_" + PortgroupKey + "_" + PortKey + "_" + ConnectionCookie).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortCriteria : DynamicData, IEquatable<DistributedVirtualSwitchPortCriteria>
    {
        public bool? Connected { get; set; }

        public bool? Active { get; set; }

        public bool? UplinkPort { get; set; }

        public ManagedObjectReference Scope { get; set; }

        public string[] PortgroupKey { get; set; }

        public bool? Inside { get; set; }

        public string[] PortKey { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public DistributedVirtualSwitchPortCriteria_LinkedView LinkedView { get; set; }

        public bool Equals(DistributedVirtualSwitchPortCriteria distributedVirtualSwitchPortCriteria)
        {
            return (distributedVirtualSwitchPortCriteria != null && ((this.Connected == null && distributedVirtualSwitchPortCriteria.Connected == null) || (this.Connected != null && this.Connected.Equals(distributedVirtualSwitchPortCriteria.Connected))) && ((this.Active == null && distributedVirtualSwitchPortCriteria.Active == null) || (this.Active != null && this.Active.Equals(distributedVirtualSwitchPortCriteria.Active))) && ((this.UplinkPort == null && distributedVirtualSwitchPortCriteria.UplinkPort == null) || (this.UplinkPort != null && this.UplinkPort.Equals(distributedVirtualSwitchPortCriteria.UplinkPort))) && ((this.Scope == null && distributedVirtualSwitchPortCriteria.Scope == null) || (this.Scope != null && this.Scope.Equals(distributedVirtualSwitchPortCriteria.Scope))) && ((this.PortgroupKey == null && distributedVirtualSwitchPortCriteria.PortgroupKey == null) || (this.PortgroupKey != null && distributedVirtualSwitchPortCriteria.PortgroupKey != null && Enumerable.SequenceEqual(this.PortgroupKey, distributedVirtualSwitchPortCriteria.PortgroupKey))) && ((this.Inside == null && distributedVirtualSwitchPortCriteria.Inside == null) || (this.Inside != null && this.Inside.Equals(distributedVirtualSwitchPortCriteria.Inside))) && ((this.PortKey == null && distributedVirtualSwitchPortCriteria.PortKey == null) || (this.PortKey != null && distributedVirtualSwitchPortCriteria.PortKey != null && Enumerable.SequenceEqual(this.PortKey, distributedVirtualSwitchPortCriteria.PortKey))) && ((this.Host == null && distributedVirtualSwitchPortCriteria.Host == null) || (this.Host != null && distributedVirtualSwitchPortCriteria.Host != null && Enumerable.SequenceEqual(this.Host, distributedVirtualSwitchPortCriteria.Host))) && ((this.LinkedView == null && distributedVirtualSwitchPortCriteria.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(distributedVirtualSwitchPortCriteria.LinkedView))));
        }

        public override bool Equals(object distributedVirtualSwitchPortCriteria)
        {
            return Equals(distributedVirtualSwitchPortCriteria as DistributedVirtualSwitchPortCriteria);
        }

        public override int GetHashCode()
        {
            return (Connected + "_" + Active + "_" + UplinkPort + "_" + Scope + "_" + PortgroupKey + "_" + Inside + "_" + PortKey + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortCriteria_LinkedView : IEquatable<DistributedVirtualSwitchPortCriteria_LinkedView>
    {
        public ManagedEntity Scope { get; set; }

        public HostSystem[] Host { get; set; }

        public bool Equals(DistributedVirtualSwitchPortCriteria_LinkedView distributedVirtualSwitchPortCriteria_LinkedView)
        {
            return (distributedVirtualSwitchPortCriteria_LinkedView != null && ((this.Scope == null && distributedVirtualSwitchPortCriteria_LinkedView.Scope == null) || (this.Scope != null && this.Scope.Equals(distributedVirtualSwitchPortCriteria_LinkedView.Scope))) && ((this.Host == null && distributedVirtualSwitchPortCriteria_LinkedView.Host == null) || (this.Host != null && distributedVirtualSwitchPortCriteria_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, distributedVirtualSwitchPortCriteria_LinkedView.Host))));
        }

        public override bool Equals(object distributedVirtualSwitchPortCriteria_LinkedView)
        {
            return Equals(distributedVirtualSwitchPortCriteria_LinkedView as DistributedVirtualSwitchPortCriteria_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Scope + "_" + Host).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchPortStatistics : DynamicData, IEquatable<DistributedVirtualSwitchPortStatistics>
    {
        public long PacketsInMulticast { get; set; }

        public long PacketsOutMulticast { get; set; }

        public long BytesInMulticast { get; set; }

        public long BytesOutMulticast { get; set; }

        public long PacketsInUnicast { get; set; }

        public long PacketsOutUnicast { get; set; }

        public long BytesInUnicast { get; set; }

        public long BytesOutUnicast { get; set; }

        public long PacketsInBroadcast { get; set; }

        public long PacketsOutBroadcast { get; set; }

        public long BytesInBroadcast { get; set; }

        public long BytesOutBroadcast { get; set; }

        public long PacketsInDropped { get; set; }

        public long PacketsOutDropped { get; set; }

        public long PacketsInException { get; set; }

        public long PacketsOutException { get; set; }

        public long? BytesInFromPnic { get; set; }

        public long? BytesOutToPnic { get; set; }

        public bool Equals(DistributedVirtualSwitchPortStatistics distributedVirtualSwitchPortStatistics)
        {
            return (distributedVirtualSwitchPortStatistics != null && this.PacketsInMulticast == distributedVirtualSwitchPortStatistics.PacketsInMulticast && this.PacketsOutMulticast == distributedVirtualSwitchPortStatistics.PacketsOutMulticast && this.BytesInMulticast == distributedVirtualSwitchPortStatistics.BytesInMulticast && this.BytesOutMulticast == distributedVirtualSwitchPortStatistics.BytesOutMulticast && this.PacketsInUnicast == distributedVirtualSwitchPortStatistics.PacketsInUnicast && this.PacketsOutUnicast == distributedVirtualSwitchPortStatistics.PacketsOutUnicast && this.BytesInUnicast == distributedVirtualSwitchPortStatistics.BytesInUnicast && this.BytesOutUnicast == distributedVirtualSwitchPortStatistics.BytesOutUnicast && this.PacketsInBroadcast == distributedVirtualSwitchPortStatistics.PacketsInBroadcast && this.PacketsOutBroadcast == distributedVirtualSwitchPortStatistics.PacketsOutBroadcast && this.BytesInBroadcast == distributedVirtualSwitchPortStatistics.BytesInBroadcast && this.BytesOutBroadcast == distributedVirtualSwitchPortStatistics.BytesOutBroadcast && this.PacketsInDropped == distributedVirtualSwitchPortStatistics.PacketsInDropped && this.PacketsOutDropped == distributedVirtualSwitchPortStatistics.PacketsOutDropped && this.PacketsInException == distributedVirtualSwitchPortStatistics.PacketsInException && this.PacketsOutException == distributedVirtualSwitchPortStatistics.PacketsOutException && ((this.BytesInFromPnic == null && distributedVirtualSwitchPortStatistics.BytesInFromPnic == null) || (this.BytesInFromPnic != null && this.BytesInFromPnic.Equals(distributedVirtualSwitchPortStatistics.BytesInFromPnic))) && ((this.BytesOutToPnic == null && distributedVirtualSwitchPortStatistics.BytesOutToPnic == null) || (this.BytesOutToPnic != null && this.BytesOutToPnic.Equals(distributedVirtualSwitchPortStatistics.BytesOutToPnic))));
        }

        public override bool Equals(object distributedVirtualSwitchPortStatistics)
        {
            return Equals(distributedVirtualSwitchPortStatistics as DistributedVirtualSwitchPortStatistics);
        }

        public override int GetHashCode()
        {
            return (PacketsInMulticast + "_" + PacketsOutMulticast + "_" + BytesInMulticast + "_" + BytesOutMulticast + "_" + PacketsInUnicast + "_" + PacketsOutUnicast + "_" + BytesInUnicast + "_" + BytesOutUnicast + "_" + PacketsInBroadcast + "_" + PacketsOutBroadcast + "_" + BytesInBroadcast + "_" + BytesOutBroadcast + "_" + PacketsInDropped + "_" + PacketsOutDropped + "_" + PacketsInException + "_" + PacketsOutException + "_" + BytesInFromPnic + "_" + BytesOutToPnic).GetHashCode();
        }
    }

    public class DistributedVirtualSwitchProductSpec : DynamicData, IEquatable<DistributedVirtualSwitchProductSpec>
    {
        public string Name { get; set; }

        public string Vendor { get; set; }

        public string Version { get; set; }

        public string Build { get; set; }

        public string ForwardingClass { get; set; }

        public string BundleId { get; set; }

        public string BundleUrl { get; set; }

        public bool Equals(DistributedVirtualSwitchProductSpec distributedVirtualSwitchProductSpec)
        {
            return (distributedVirtualSwitchProductSpec != null && this.Name == distributedVirtualSwitchProductSpec.Name && this.Vendor == distributedVirtualSwitchProductSpec.Vendor && this.Version == distributedVirtualSwitchProductSpec.Version && this.Build == distributedVirtualSwitchProductSpec.Build && this.ForwardingClass == distributedVirtualSwitchProductSpec.ForwardingClass && this.BundleId == distributedVirtualSwitchProductSpec.BundleId && this.BundleUrl == distributedVirtualSwitchProductSpec.BundleUrl);
        }

        public override bool Equals(object distributedVirtualSwitchProductSpec)
        {
            return Equals(distributedVirtualSwitchProductSpec as DistributedVirtualSwitchProductSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Vendor + "_" + Version + "_" + Build + "_" + ForwardingClass + "_" + BundleId + "_" + BundleUrl).GetHashCode();
        }
    }

    public class DomainNotFound : ActiveDirectoryFault, IEquatable<DomainNotFound>
    {
        public string DomainName { get; set; }

        public bool Equals(DomainNotFound domainNotFound)
        {
            return (domainNotFound != null && this.DomainName == domainNotFound.DomainName);
        }

        public override bool Equals(object domainNotFound)
        {
            return Equals(domainNotFound as DomainNotFound);
        }

        public override int GetHashCode()
        {
            return (DomainName).GetHashCode();
        }
    }

    public class DrsDisabledEvent : ClusterEvent, IEquatable<DrsDisabledEvent>
    {
        public bool Equals(DrsDisabledEvent drsDisabledEvent)
        {
            return (drsDisabledEvent != null && base.Equals(drsDisabledEvent));
        }

        public override bool Equals(object drsDisabledEvent)
        {
            return Equals(drsDisabledEvent as DrsDisabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsDisabledOnVm : VimFault, IEquatable<DrsDisabledOnVm>
    {
        public bool Equals(DrsDisabledOnVm drsDisabledOnVm)
        {
            return (drsDisabledOnVm != null && base.Equals(drsDisabledOnVm));
        }

        public override bool Equals(object drsDisabledOnVm)
        {
            return Equals(drsDisabledOnVm as DrsDisabledOnVm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsEnabledEvent : ClusterEvent, IEquatable<DrsEnabledEvent>
    {
        public string Behavior { get; set; }

        public bool Equals(DrsEnabledEvent drsEnabledEvent)
        {
            return (drsEnabledEvent != null && this.Behavior == drsEnabledEvent.Behavior);
        }

        public override bool Equals(object drsEnabledEvent)
        {
            return Equals(drsEnabledEvent as DrsEnabledEvent);
        }

        public override int GetHashCode()
        {
            return (Behavior).GetHashCode();
        }
    }

    public class DrsEnteredStandbyModeEvent : EnteredStandbyModeEvent, IEquatable<DrsEnteredStandbyModeEvent>
    {
        public bool Equals(DrsEnteredStandbyModeEvent drsEnteredStandbyModeEvent)
        {
            return (drsEnteredStandbyModeEvent != null && base.Equals(drsEnteredStandbyModeEvent));
        }

        public override bool Equals(object drsEnteredStandbyModeEvent)
        {
            return Equals(drsEnteredStandbyModeEvent as DrsEnteredStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsEnteringStandbyModeEvent : EnteringStandbyModeEvent, IEquatable<DrsEnteringStandbyModeEvent>
    {
        public bool Equals(DrsEnteringStandbyModeEvent drsEnteringStandbyModeEvent)
        {
            return (drsEnteringStandbyModeEvent != null && base.Equals(drsEnteringStandbyModeEvent));
        }

        public override bool Equals(object drsEnteringStandbyModeEvent)
        {
            return Equals(drsEnteringStandbyModeEvent as DrsEnteringStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsExitedStandbyModeEvent : ExitedStandbyModeEvent, IEquatable<DrsExitedStandbyModeEvent>
    {
        public bool Equals(DrsExitedStandbyModeEvent drsExitedStandbyModeEvent)
        {
            return (drsExitedStandbyModeEvent != null && base.Equals(drsExitedStandbyModeEvent));
        }

        public override bool Equals(object drsExitedStandbyModeEvent)
        {
            return Equals(drsExitedStandbyModeEvent as DrsExitedStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsExitingStandbyModeEvent : ExitingStandbyModeEvent, IEquatable<DrsExitingStandbyModeEvent>
    {
        public bool Equals(DrsExitingStandbyModeEvent drsExitingStandbyModeEvent)
        {
            return (drsExitingStandbyModeEvent != null && base.Equals(drsExitingStandbyModeEvent));
        }

        public override bool Equals(object drsExitingStandbyModeEvent)
        {
            return Equals(drsExitingStandbyModeEvent as DrsExitingStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsExitStandbyModeFailedEvent : ExitStandbyModeFailedEvent, IEquatable<DrsExitStandbyModeFailedEvent>
    {
        public bool Equals(DrsExitStandbyModeFailedEvent drsExitStandbyModeFailedEvent)
        {
            return (drsExitStandbyModeFailedEvent != null && base.Equals(drsExitStandbyModeFailedEvent));
        }

        public override bool Equals(object drsExitStandbyModeFailedEvent)
        {
            return Equals(drsExitStandbyModeFailedEvent as DrsExitStandbyModeFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsInvocationFailedEvent : ClusterEvent, IEquatable<DrsInvocationFailedEvent>
    {
        public bool Equals(DrsInvocationFailedEvent drsInvocationFailedEvent)
        {
            return (drsInvocationFailedEvent != null && base.Equals(drsInvocationFailedEvent));
        }

        public override bool Equals(object drsInvocationFailedEvent)
        {
            return Equals(drsInvocationFailedEvent as DrsInvocationFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsRecoveredFromFailureEvent : ClusterEvent, IEquatable<DrsRecoveredFromFailureEvent>
    {
        public bool Equals(DrsRecoveredFromFailureEvent drsRecoveredFromFailureEvent)
        {
            return (drsRecoveredFromFailureEvent != null && base.Equals(drsRecoveredFromFailureEvent));
        }

        public override bool Equals(object drsRecoveredFromFailureEvent)
        {
            return Equals(drsRecoveredFromFailureEvent as DrsRecoveredFromFailureEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsResourceConfigureFailedEvent : HostEvent, IEquatable<DrsResourceConfigureFailedEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(DrsResourceConfigureFailedEvent drsResourceConfigureFailedEvent)
        {
            return (drsResourceConfigureFailedEvent != null && ((this.Reason == null && drsResourceConfigureFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(drsResourceConfigureFailedEvent.Reason))));
        }

        public override bool Equals(object drsResourceConfigureFailedEvent)
        {
            return Equals(drsResourceConfigureFailedEvent as DrsResourceConfigureFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class DrsResourceConfigureSyncedEvent : HostEvent, IEquatable<DrsResourceConfigureSyncedEvent>
    {
        public bool Equals(DrsResourceConfigureSyncedEvent drsResourceConfigureSyncedEvent)
        {
            return (drsResourceConfigureSyncedEvent != null && base.Equals(drsResourceConfigureSyncedEvent));
        }

        public override bool Equals(object drsResourceConfigureSyncedEvent)
        {
            return Equals(drsResourceConfigureSyncedEvent as DrsResourceConfigureSyncedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsRuleComplianceEvent : VmEvent, IEquatable<DrsRuleComplianceEvent>
    {
        public bool Equals(DrsRuleComplianceEvent drsRuleComplianceEvent)
        {
            return (drsRuleComplianceEvent != null && base.Equals(drsRuleComplianceEvent));
        }

        public override bool Equals(object drsRuleComplianceEvent)
        {
            return Equals(drsRuleComplianceEvent as DrsRuleComplianceEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsRuleViolationEvent : VmEvent, IEquatable<DrsRuleViolationEvent>
    {
        public bool Equals(DrsRuleViolationEvent drsRuleViolationEvent)
        {
            return (drsRuleViolationEvent != null && base.Equals(drsRuleViolationEvent));
        }

        public override bool Equals(object drsRuleViolationEvent)
        {
            return Equals(drsRuleViolationEvent as DrsRuleViolationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsSoftRuleViolationEvent : VmEvent, IEquatable<DrsSoftRuleViolationEvent>
    {
        public bool Equals(DrsSoftRuleViolationEvent drsSoftRuleViolationEvent)
        {
            return (drsSoftRuleViolationEvent != null && base.Equals(drsSoftRuleViolationEvent));
        }

        public override bool Equals(object drsSoftRuleViolationEvent)
        {
            return Equals(drsSoftRuleViolationEvent as DrsSoftRuleViolationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsVmMigratedEvent : VmMigratedEvent, IEquatable<DrsVmMigratedEvent>
    {
        public bool Equals(DrsVmMigratedEvent drsVmMigratedEvent)
        {
            return (drsVmMigratedEvent != null && base.Equals(drsVmMigratedEvent));
        }

        public override bool Equals(object drsVmMigratedEvent)
        {
            return Equals(drsVmMigratedEvent as DrsVmMigratedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DrsVmotionIncompatibleFault : VirtualHardwareCompatibilityIssue, IEquatable<DrsVmotionIncompatibleFault>
    {
        public ManagedObjectReference Host { get; set; }

        public DrsVmotionIncompatibleFault_LinkedView LinkedView { get; set; }

        public bool Equals(DrsVmotionIncompatibleFault drsVmotionIncompatibleFault)
        {
            return (drsVmotionIncompatibleFault != null && ((this.Host == null && drsVmotionIncompatibleFault.Host == null) || (this.Host != null && this.Host.Equals(drsVmotionIncompatibleFault.Host))) && ((this.LinkedView == null && drsVmotionIncompatibleFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(drsVmotionIncompatibleFault.LinkedView))));
        }

        public override bool Equals(object drsVmotionIncompatibleFault)
        {
            return Equals(drsVmotionIncompatibleFault as DrsVmotionIncompatibleFault);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class DrsVmotionIncompatibleFault_LinkedView : IEquatable<DrsVmotionIncompatibleFault_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DrsVmotionIncompatibleFault_LinkedView drsVmotionIncompatibleFault_LinkedView)
        {
            return (drsVmotionIncompatibleFault_LinkedView != null && ((this.Host == null && drsVmotionIncompatibleFault_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(drsVmotionIncompatibleFault_LinkedView.Host))));
        }

        public override bool Equals(object drsVmotionIncompatibleFault_LinkedView)
        {
            return Equals(drsVmotionIncompatibleFault_LinkedView as DrsVmotionIncompatibleFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DrsVmPoweredOnEvent : VmPoweredOnEvent, IEquatable<DrsVmPoweredOnEvent>
    {
        public bool Equals(DrsVmPoweredOnEvent drsVmPoweredOnEvent)
        {
            return (drsVmPoweredOnEvent != null && base.Equals(drsVmPoweredOnEvent));
        }

        public override bool Equals(object drsVmPoweredOnEvent)
        {
            return Equals(drsVmPoweredOnEvent as DrsVmPoweredOnEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DuplicateDisks : VsanDiskFault, IEquatable<DuplicateDisks>
    {
        public bool Equals(DuplicateDisks duplicateDisks)
        {
            return (duplicateDisks != null && base.Equals(duplicateDisks));
        }

        public override bool Equals(object duplicateDisks)
        {
            return Equals(duplicateDisks as DuplicateDisks);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DuplicateIpDetectedEvent : HostEvent, IEquatable<DuplicateIpDetectedEvent>
    {
        public string DuplicateIP { get; set; }

        public string MacAddress { get; set; }

        public bool Equals(DuplicateIpDetectedEvent duplicateIpDetectedEvent)
        {
            return (duplicateIpDetectedEvent != null && this.DuplicateIP == duplicateIpDetectedEvent.DuplicateIP && this.MacAddress == duplicateIpDetectedEvent.MacAddress);
        }

        public override bool Equals(object duplicateIpDetectedEvent)
        {
            return Equals(duplicateIpDetectedEvent as DuplicateIpDetectedEvent);
        }

        public override int GetHashCode()
        {
            return (DuplicateIP + "_" + MacAddress).GetHashCode();
        }
    }

    public class DuplicateName : VimFault, IEquatable<DuplicateName>
    {
        public string Name { get; set; }

        public ManagedObjectReference Object { get; set; }

        public bool Equals(DuplicateName duplicateName)
        {
            return (duplicateName != null && this.Name == duplicateName.Name && ((this.Object == null && duplicateName.Object == null) || (this.Object != null && this.Object.Equals(duplicateName.Object))));
        }

        public override bool Equals(object duplicateName)
        {
            return Equals(duplicateName as DuplicateName);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Object).GetHashCode();
        }
    }

    public class DuplicateVsanNetworkInterface : VsanFault, IEquatable<DuplicateVsanNetworkInterface>
    {
        public string Device { get; set; }

        public bool Equals(DuplicateVsanNetworkInterface duplicateVsanNetworkInterface)
        {
            return (duplicateVsanNetworkInterface != null && this.Device == duplicateVsanNetworkInterface.Device);
        }

        public override bool Equals(object duplicateVsanNetworkInterface)
        {
            return Equals(duplicateVsanNetworkInterface as DuplicateVsanNetworkInterface);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class DvpgImportEvent : DVPortgroupEvent, IEquatable<DvpgImportEvent>
    {
        public string ImportType { get; set; }

        public bool Equals(DvpgImportEvent dvpgImportEvent)
        {
            return (dvpgImportEvent != null && this.ImportType == dvpgImportEvent.ImportType);
        }

        public override bool Equals(object dvpgImportEvent)
        {
            return Equals(dvpgImportEvent as DvpgImportEvent);
        }

        public override int GetHashCode()
        {
            return (ImportType).GetHashCode();
        }
    }

    public class DvpgRestoreEvent : DVPortgroupEvent, IEquatable<DvpgRestoreEvent>
    {
        public bool Equals(DvpgRestoreEvent dvpgRestoreEvent)
        {
            return (dvpgRestoreEvent != null && base.Equals(dvpgRestoreEvent));
        }

        public override bool Equals(object dvpgRestoreEvent)
        {
            return Equals(dvpgRestoreEvent as DvpgRestoreEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVPortConfigInfo : DynamicData, IEquatable<DVPortConfigInfo>
    {
        public string Name { get; set; }

        public ManagedObjectReference[] Scope { get; set; }

        public string Description { get; set; }

        public DVPortSetting Setting { get; set; }

        public string ConfigVersion { get; set; }

        public DVPortConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DVPortConfigInfo dVPortConfigInfo)
        {
            return (dVPortConfigInfo != null && this.Name == dVPortConfigInfo.Name && ((this.Scope == null && dVPortConfigInfo.Scope == null) || (this.Scope != null && dVPortConfigInfo.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortConfigInfo.Scope))) && this.Description == dVPortConfigInfo.Description && ((this.Setting == null && dVPortConfigInfo.Setting == null) || (this.Setting != null && this.Setting.Equals(dVPortConfigInfo.Setting))) && this.ConfigVersion == dVPortConfigInfo.ConfigVersion && ((this.LinkedView == null && dVPortConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVPortConfigInfo.LinkedView))));
        }

        public override bool Equals(object dVPortConfigInfo)
        {
            return Equals(dVPortConfigInfo as DVPortConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Scope + "_" + Description + "_" + Setting + "_" + ConfigVersion + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVPortConfigInfo_LinkedView : IEquatable<DVPortConfigInfo_LinkedView>
    {
        public ManagedEntity[] Scope { get; set; }

        public bool Equals(DVPortConfigInfo_LinkedView dVPortConfigInfo_LinkedView)
        {
            return (dVPortConfigInfo_LinkedView != null && ((this.Scope == null && dVPortConfigInfo_LinkedView.Scope == null) || (this.Scope != null && dVPortConfigInfo_LinkedView.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortConfigInfo_LinkedView.Scope))));
        }

        public override bool Equals(object dVPortConfigInfo_LinkedView)
        {
            return Equals(dVPortConfigInfo_LinkedView as DVPortConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Scope).GetHashCode();
        }
    }

    public class DVPortConfigSpec : DynamicData, IEquatable<DVPortConfigSpec>
    {
        public string Operation { get; set; }

        public string Key { get; set; }

        public string Name { get; set; }

        public ManagedObjectReference[] Scope { get; set; }

        public string Description { get; set; }

        public DVPortSetting Setting { get; set; }

        public string ConfigVersion { get; set; }

        public DVPortConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(DVPortConfigSpec dVPortConfigSpec)
        {
            return (dVPortConfigSpec != null && this.Operation == dVPortConfigSpec.Operation && this.Key == dVPortConfigSpec.Key && this.Name == dVPortConfigSpec.Name && ((this.Scope == null && dVPortConfigSpec.Scope == null) || (this.Scope != null && dVPortConfigSpec.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortConfigSpec.Scope))) && this.Description == dVPortConfigSpec.Description && ((this.Setting == null && dVPortConfigSpec.Setting == null) || (this.Setting != null && this.Setting.Equals(dVPortConfigSpec.Setting))) && this.ConfigVersion == dVPortConfigSpec.ConfigVersion && ((this.LinkedView == null && dVPortConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVPortConfigSpec.LinkedView))));
        }

        public override bool Equals(object dVPortConfigSpec)
        {
            return Equals(dVPortConfigSpec as DVPortConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + Key + "_" + Name + "_" + Scope + "_" + Description + "_" + Setting + "_" + ConfigVersion + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVPortConfigSpec_LinkedView : IEquatable<DVPortConfigSpec_LinkedView>
    {
        public ManagedEntity[] Scope { get; set; }

        public bool Equals(DVPortConfigSpec_LinkedView dVPortConfigSpec_LinkedView)
        {
            return (dVPortConfigSpec_LinkedView != null && ((this.Scope == null && dVPortConfigSpec_LinkedView.Scope == null) || (this.Scope != null && dVPortConfigSpec_LinkedView.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortConfigSpec_LinkedView.Scope))));
        }

        public override bool Equals(object dVPortConfigSpec_LinkedView)
        {
            return Equals(dVPortConfigSpec_LinkedView as DVPortConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Scope).GetHashCode();
        }
    }

    public class DVPortgroupConfigInfo : DynamicData, IEquatable<DVPortgroupConfigInfo>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public int NumPorts { get; set; }

        public ManagedObjectReference DistributedVirtualSwitch { get; set; }

        public DVPortSetting DefaultPortConfig { get; set; }

        public string Description { get; set; }

        public string Type { get; set; }

        public DVPortgroupPolicy Policy { get; set; }

        public string PortNameFormat { get; set; }

        public ManagedObjectReference[] Scope { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public string ConfigVersion { get; set; }

        public bool? AutoExpand { get; set; }

        public string VmVnicNetworkResourcePoolKey { get; set; }

        public bool? Uplink { get; set; }

        public DVPortgroupConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DVPortgroupConfigInfo dVPortgroupConfigInfo)
        {
            return (dVPortgroupConfigInfo != null && this.Key == dVPortgroupConfigInfo.Key && this.Name == dVPortgroupConfigInfo.Name && this.NumPorts == dVPortgroupConfigInfo.NumPorts && ((this.DistributedVirtualSwitch == null && dVPortgroupConfigInfo.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(dVPortgroupConfigInfo.DistributedVirtualSwitch))) && ((this.DefaultPortConfig == null && dVPortgroupConfigInfo.DefaultPortConfig == null) || (this.DefaultPortConfig != null && this.DefaultPortConfig.Equals(dVPortgroupConfigInfo.DefaultPortConfig))) && this.Description == dVPortgroupConfigInfo.Description && this.Type == dVPortgroupConfigInfo.Type && ((this.Policy == null && dVPortgroupConfigInfo.Policy == null) || (this.Policy != null && this.Policy.Equals(dVPortgroupConfigInfo.Policy))) && this.PortNameFormat == dVPortgroupConfigInfo.PortNameFormat && ((this.Scope == null && dVPortgroupConfigInfo.Scope == null) || (this.Scope != null && dVPortgroupConfigInfo.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortgroupConfigInfo.Scope))) && ((this.VendorSpecificConfig == null && dVPortgroupConfigInfo.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && dVPortgroupConfigInfo.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, dVPortgroupConfigInfo.VendorSpecificConfig))) && this.ConfigVersion == dVPortgroupConfigInfo.ConfigVersion && ((this.AutoExpand == null && dVPortgroupConfigInfo.AutoExpand == null) || (this.AutoExpand != null && this.AutoExpand.Equals(dVPortgroupConfigInfo.AutoExpand))) && this.VmVnicNetworkResourcePoolKey == dVPortgroupConfigInfo.VmVnicNetworkResourcePoolKey && ((this.Uplink == null && dVPortgroupConfigInfo.Uplink == null) || (this.Uplink != null && this.Uplink.Equals(dVPortgroupConfigInfo.Uplink))) && ((this.LinkedView == null && dVPortgroupConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVPortgroupConfigInfo.LinkedView))));
        }

        public override bool Equals(object dVPortgroupConfigInfo)
        {
            return Equals(dVPortgroupConfigInfo as DVPortgroupConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + NumPorts + "_" + DistributedVirtualSwitch + "_" + DefaultPortConfig + "_" + Description + "_" + Type + "_" + Policy + "_" + PortNameFormat + "_" + Scope + "_" + VendorSpecificConfig + "_" + ConfigVersion + "_" + AutoExpand + "_" + VmVnicNetworkResourcePoolKey + "_" + Uplink + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVPortgroupConfigInfo_LinkedView : IEquatable<DVPortgroupConfigInfo_LinkedView>
    {
        public DistributedVirtualSwitch DistributedVirtualSwitch { get; set; }

        public ManagedEntity[] Scope { get; set; }

        public bool Equals(DVPortgroupConfigInfo_LinkedView dVPortgroupConfigInfo_LinkedView)
        {
            return (dVPortgroupConfigInfo_LinkedView != null && ((this.DistributedVirtualSwitch == null && dVPortgroupConfigInfo_LinkedView.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && this.DistributedVirtualSwitch.Equals(dVPortgroupConfigInfo_LinkedView.DistributedVirtualSwitch))) && ((this.Scope == null && dVPortgroupConfigInfo_LinkedView.Scope == null) || (this.Scope != null && dVPortgroupConfigInfo_LinkedView.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortgroupConfigInfo_LinkedView.Scope))));
        }

        public override bool Equals(object dVPortgroupConfigInfo_LinkedView)
        {
            return Equals(dVPortgroupConfigInfo_LinkedView as DVPortgroupConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualSwitch + "_" + Scope).GetHashCode();
        }
    }

    public class DVPortgroupConfigSpec : DynamicData, IEquatable<DVPortgroupConfigSpec>
    {
        public string ConfigVersion { get; set; }

        public string Name { get; set; }

        public int? NumPorts { get; set; }

        public string PortNameFormat { get; set; }

        public DVPortSetting DefaultPortConfig { get; set; }

        public string Description { get; set; }

        public string Type { get; set; }

        public ManagedObjectReference[] Scope { get; set; }

        public DVPortgroupPolicy Policy { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public bool? AutoExpand { get; set; }

        public string VmVnicNetworkResourcePoolKey { get; set; }

        public DVPortgroupConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(DVPortgroupConfigSpec dVPortgroupConfigSpec)
        {
            return (dVPortgroupConfigSpec != null && this.ConfigVersion == dVPortgroupConfigSpec.ConfigVersion && this.Name == dVPortgroupConfigSpec.Name && ((this.NumPorts == null && dVPortgroupConfigSpec.NumPorts == null) || (this.NumPorts != null && this.NumPorts.Equals(dVPortgroupConfigSpec.NumPorts))) && this.PortNameFormat == dVPortgroupConfigSpec.PortNameFormat && ((this.DefaultPortConfig == null && dVPortgroupConfigSpec.DefaultPortConfig == null) || (this.DefaultPortConfig != null && this.DefaultPortConfig.Equals(dVPortgroupConfigSpec.DefaultPortConfig))) && this.Description == dVPortgroupConfigSpec.Description && this.Type == dVPortgroupConfigSpec.Type && ((this.Scope == null && dVPortgroupConfigSpec.Scope == null) || (this.Scope != null && dVPortgroupConfigSpec.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortgroupConfigSpec.Scope))) && ((this.Policy == null && dVPortgroupConfigSpec.Policy == null) || (this.Policy != null && this.Policy.Equals(dVPortgroupConfigSpec.Policy))) && ((this.VendorSpecificConfig == null && dVPortgroupConfigSpec.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && dVPortgroupConfigSpec.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, dVPortgroupConfigSpec.VendorSpecificConfig))) && ((this.AutoExpand == null && dVPortgroupConfigSpec.AutoExpand == null) || (this.AutoExpand != null && this.AutoExpand.Equals(dVPortgroupConfigSpec.AutoExpand))) && this.VmVnicNetworkResourcePoolKey == dVPortgroupConfigSpec.VmVnicNetworkResourcePoolKey && ((this.LinkedView == null && dVPortgroupConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVPortgroupConfigSpec.LinkedView))));
        }

        public override bool Equals(object dVPortgroupConfigSpec)
        {
            return Equals(dVPortgroupConfigSpec as DVPortgroupConfigSpec);
        }

        public override int GetHashCode()
        {
            return (ConfigVersion + "_" + Name + "_" + NumPorts + "_" + PortNameFormat + "_" + DefaultPortConfig + "_" + Description + "_" + Type + "_" + Scope + "_" + Policy + "_" + VendorSpecificConfig + "_" + AutoExpand + "_" + VmVnicNetworkResourcePoolKey + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVPortgroupConfigSpec_LinkedView : IEquatable<DVPortgroupConfigSpec_LinkedView>
    {
        public ManagedEntity[] Scope { get; set; }

        public bool Equals(DVPortgroupConfigSpec_LinkedView dVPortgroupConfigSpec_LinkedView)
        {
            return (dVPortgroupConfigSpec_LinkedView != null && ((this.Scope == null && dVPortgroupConfigSpec_LinkedView.Scope == null) || (this.Scope != null && dVPortgroupConfigSpec_LinkedView.Scope != null && Enumerable.SequenceEqual(this.Scope, dVPortgroupConfigSpec_LinkedView.Scope))));
        }

        public override bool Equals(object dVPortgroupConfigSpec_LinkedView)
        {
            return Equals(dVPortgroupConfigSpec_LinkedView as DVPortgroupConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Scope).GetHashCode();
        }
    }

    public class DVPortgroupCreatedEvent : DVPortgroupEvent, IEquatable<DVPortgroupCreatedEvent>
    {
        public bool Equals(DVPortgroupCreatedEvent dVPortgroupCreatedEvent)
        {
            return (dVPortgroupCreatedEvent != null && base.Equals(dVPortgroupCreatedEvent));
        }

        public override bool Equals(object dVPortgroupCreatedEvent)
        {
            return Equals(dVPortgroupCreatedEvent as DVPortgroupCreatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVPortgroupDestroyedEvent : DVPortgroupEvent, IEquatable<DVPortgroupDestroyedEvent>
    {
        public bool Equals(DVPortgroupDestroyedEvent dVPortgroupDestroyedEvent)
        {
            return (dVPortgroupDestroyedEvent != null && base.Equals(dVPortgroupDestroyedEvent));
        }

        public override bool Equals(object dVPortgroupDestroyedEvent)
        {
            return Equals(dVPortgroupDestroyedEvent as DVPortgroupDestroyedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVPortgroupEvent : Event, IEquatable<DVPortgroupEvent>
    {
        public bool Equals(DVPortgroupEvent dVPortgroupEvent)
        {
            return (dVPortgroupEvent != null && base.Equals(dVPortgroupEvent));
        }

        public override bool Equals(object dVPortgroupEvent)
        {
            return Equals(dVPortgroupEvent as DVPortgroupEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVPortgroupPolicy : DynamicData, IEquatable<DVPortgroupPolicy>
    {
        public bool BlockOverrideAllowed { get; set; }

        public bool ShapingOverrideAllowed { get; set; }

        public bool VendorConfigOverrideAllowed { get; set; }

        public bool LivePortMovingAllowed { get; set; }

        public bool PortConfigResetAtDisconnect { get; set; }

        public bool? NetworkResourcePoolOverrideAllowed { get; set; }

        public bool? TrafficFilterOverrideAllowed { get; set; }

        public bool Equals(DVPortgroupPolicy dVPortgroupPolicy)
        {
            return (dVPortgroupPolicy != null && this.BlockOverrideAllowed == dVPortgroupPolicy.BlockOverrideAllowed && this.ShapingOverrideAllowed == dVPortgroupPolicy.ShapingOverrideAllowed && this.VendorConfigOverrideAllowed == dVPortgroupPolicy.VendorConfigOverrideAllowed && this.LivePortMovingAllowed == dVPortgroupPolicy.LivePortMovingAllowed && this.PortConfigResetAtDisconnect == dVPortgroupPolicy.PortConfigResetAtDisconnect && ((this.NetworkResourcePoolOverrideAllowed == null && dVPortgroupPolicy.NetworkResourcePoolOverrideAllowed == null) || (this.NetworkResourcePoolOverrideAllowed != null && this.NetworkResourcePoolOverrideAllowed.Equals(dVPortgroupPolicy.NetworkResourcePoolOverrideAllowed))) && ((this.TrafficFilterOverrideAllowed == null && dVPortgroupPolicy.TrafficFilterOverrideAllowed == null) || (this.TrafficFilterOverrideAllowed != null && this.TrafficFilterOverrideAllowed.Equals(dVPortgroupPolicy.TrafficFilterOverrideAllowed))));
        }

        public override bool Equals(object dVPortgroupPolicy)
        {
            return Equals(dVPortgroupPolicy as DVPortgroupPolicy);
        }

        public override int GetHashCode()
        {
            return (BlockOverrideAllowed + "_" + ShapingOverrideAllowed + "_" + VendorConfigOverrideAllowed + "_" + LivePortMovingAllowed + "_" + PortConfigResetAtDisconnect + "_" + NetworkResourcePoolOverrideAllowed + "_" + TrafficFilterOverrideAllowed).GetHashCode();
        }
    }

    public class DVPortgroupReconfiguredEvent : DVPortgroupEvent, IEquatable<DVPortgroupReconfiguredEvent>
    {
        public DVPortgroupConfigSpec ConfigSpec { get; set; }

        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(DVPortgroupReconfiguredEvent dVPortgroupReconfiguredEvent)
        {
            return (dVPortgroupReconfiguredEvent != null && ((this.ConfigSpec == null && dVPortgroupReconfiguredEvent.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(dVPortgroupReconfiguredEvent.ConfigSpec))) && ((this.ConfigChanges == null && dVPortgroupReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(dVPortgroupReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object dVPortgroupReconfiguredEvent)
        {
            return Equals(dVPortgroupReconfiguredEvent as DVPortgroupReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + ConfigChanges).GetHashCode();
        }
    }

    public class DVPortgroupRenamedEvent : DVPortgroupEvent, IEquatable<DVPortgroupRenamedEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(DVPortgroupRenamedEvent dVPortgroupRenamedEvent)
        {
            return (dVPortgroupRenamedEvent != null && this.OldName == dVPortgroupRenamedEvent.OldName && this.NewName == dVPortgroupRenamedEvent.NewName);
        }

        public override bool Equals(object dVPortgroupRenamedEvent)
        {
            return Equals(dVPortgroupRenamedEvent as DVPortgroupRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class DVPortgroupSelection : SelectionSet, IEquatable<DVPortgroupSelection>
    {
        public string DvsUuid { get; set; }

        public string[] PortgroupKey { get; set; }

        public bool Equals(DVPortgroupSelection dVPortgroupSelection)
        {
            return (dVPortgroupSelection != null && this.DvsUuid == dVPortgroupSelection.DvsUuid && ((this.PortgroupKey == null && dVPortgroupSelection.PortgroupKey == null) || (this.PortgroupKey != null && dVPortgroupSelection.PortgroupKey != null && Enumerable.SequenceEqual(this.PortgroupKey, dVPortgroupSelection.PortgroupKey))));
        }

        public override bool Equals(object dVPortgroupSelection)
        {
            return Equals(dVPortgroupSelection as DVPortgroupSelection);
        }

        public override int GetHashCode()
        {
            return (DvsUuid + "_" + PortgroupKey).GetHashCode();
        }
    }

    public class DVPortNotSupported : DeviceBackingNotSupported, IEquatable<DVPortNotSupported>
    {
        public bool Equals(DVPortNotSupported dVPortNotSupported)
        {
            return (dVPortNotSupported != null && base.Equals(dVPortNotSupported));
        }

        public override bool Equals(object dVPortNotSupported)
        {
            return Equals(dVPortNotSupported as DVPortNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVPortSetting : DynamicData, IEquatable<DVPortSetting>
    {
        public BoolPolicy Blocked { get; set; }

        public BoolPolicy VmDirectPathGen2Allowed { get; set; }

        public DVSTrafficShapingPolicy InShapingPolicy { get; set; }

        public DVSTrafficShapingPolicy OutShapingPolicy { get; set; }

        public DVSVendorSpecificConfig VendorSpecificConfig { get; set; }

        public StringPolicy NetworkResourcePoolKey { get; set; }

        public DvsFilterPolicy FilterPolicy { get; set; }

        public bool Equals(DVPortSetting dVPortSetting)
        {
            return (dVPortSetting != null && ((this.Blocked == null && dVPortSetting.Blocked == null) || (this.Blocked != null && this.Blocked.Equals(dVPortSetting.Blocked))) && ((this.VmDirectPathGen2Allowed == null && dVPortSetting.VmDirectPathGen2Allowed == null) || (this.VmDirectPathGen2Allowed != null && this.VmDirectPathGen2Allowed.Equals(dVPortSetting.VmDirectPathGen2Allowed))) && ((this.InShapingPolicy == null && dVPortSetting.InShapingPolicy == null) || (this.InShapingPolicy != null && this.InShapingPolicy.Equals(dVPortSetting.InShapingPolicy))) && ((this.OutShapingPolicy == null && dVPortSetting.OutShapingPolicy == null) || (this.OutShapingPolicy != null && this.OutShapingPolicy.Equals(dVPortSetting.OutShapingPolicy))) && ((this.VendorSpecificConfig == null && dVPortSetting.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && this.VendorSpecificConfig.Equals(dVPortSetting.VendorSpecificConfig))) && ((this.NetworkResourcePoolKey == null && dVPortSetting.NetworkResourcePoolKey == null) || (this.NetworkResourcePoolKey != null && this.NetworkResourcePoolKey.Equals(dVPortSetting.NetworkResourcePoolKey))) && ((this.FilterPolicy == null && dVPortSetting.FilterPolicy == null) || (this.FilterPolicy != null && this.FilterPolicy.Equals(dVPortSetting.FilterPolicy))));
        }

        public override bool Equals(object dVPortSetting)
        {
            return Equals(dVPortSetting as DVPortSetting);
        }

        public override int GetHashCode()
        {
            return (Blocked + "_" + VmDirectPathGen2Allowed + "_" + InShapingPolicy + "_" + OutShapingPolicy + "_" + VendorSpecificConfig + "_" + NetworkResourcePoolKey + "_" + FilterPolicy).GetHashCode();
        }
    }

    public class DVPortState : DynamicData, IEquatable<DVPortState>
    {
        public DVPortStatus RuntimeInfo { get; set; }

        public DistributedVirtualSwitchPortStatistics Stats { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificState { get; set; }

        public bool Equals(DVPortState dVPortState)
        {
            return (dVPortState != null && ((this.RuntimeInfo == null && dVPortState.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dVPortState.RuntimeInfo))) && ((this.Stats == null && dVPortState.Stats == null) || (this.Stats != null && this.Stats.Equals(dVPortState.Stats))) && ((this.VendorSpecificState == null && dVPortState.VendorSpecificState == null) || (this.VendorSpecificState != null && dVPortState.VendorSpecificState != null && Enumerable.SequenceEqual(this.VendorSpecificState, dVPortState.VendorSpecificState))));
        }

        public override bool Equals(object dVPortState)
        {
            return Equals(dVPortState as DVPortState);
        }

        public override int GetHashCode()
        {
            return (RuntimeInfo + "_" + Stats + "_" + VendorSpecificState).GetHashCode();
        }
    }

    public class DVPortStatus : DynamicData, IEquatable<DVPortStatus>
    {
        public bool LinkUp { get; set; }

        public bool Blocked { get; set; }

        public NumericRange[] VlanIds { get; set; }

        public bool? TrunkingMode { get; set; }

        public int? Mtu { get; set; }

        public string LinkPeer { get; set; }

        public string MacAddress { get; set; }

        public string StatusDetail { get; set; }

        public bool? VmDirectPathGen2Active { get; set; }

        public string[] VmDirectPathGen2InactiveReasonNetwork { get; set; }

        public string[] VmDirectPathGen2InactiveReasonOther { get; set; }

        public string VmDirectPathGen2InactiveReasonExtended { get; set; }

        public bool Equals(DVPortStatus dVPortStatus)
        {
            return (dVPortStatus != null && this.LinkUp == dVPortStatus.LinkUp && this.Blocked == dVPortStatus.Blocked && ((this.VlanIds == null && dVPortStatus.VlanIds == null) || (this.VlanIds != null && dVPortStatus.VlanIds != null && Enumerable.SequenceEqual(this.VlanIds, dVPortStatus.VlanIds))) && ((this.TrunkingMode == null && dVPortStatus.TrunkingMode == null) || (this.TrunkingMode != null && this.TrunkingMode.Equals(dVPortStatus.TrunkingMode))) && ((this.Mtu == null && dVPortStatus.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(dVPortStatus.Mtu))) && this.LinkPeer == dVPortStatus.LinkPeer && this.MacAddress == dVPortStatus.MacAddress && this.StatusDetail == dVPortStatus.StatusDetail && ((this.VmDirectPathGen2Active == null && dVPortStatus.VmDirectPathGen2Active == null) || (this.VmDirectPathGen2Active != null && this.VmDirectPathGen2Active.Equals(dVPortStatus.VmDirectPathGen2Active))) && ((this.VmDirectPathGen2InactiveReasonNetwork == null && dVPortStatus.VmDirectPathGen2InactiveReasonNetwork == null) || (this.VmDirectPathGen2InactiveReasonNetwork != null && dVPortStatus.VmDirectPathGen2InactiveReasonNetwork != null && Enumerable.SequenceEqual(this.VmDirectPathGen2InactiveReasonNetwork, dVPortStatus.VmDirectPathGen2InactiveReasonNetwork))) && ((this.VmDirectPathGen2InactiveReasonOther == null && dVPortStatus.VmDirectPathGen2InactiveReasonOther == null) || (this.VmDirectPathGen2InactiveReasonOther != null && dVPortStatus.VmDirectPathGen2InactiveReasonOther != null && Enumerable.SequenceEqual(this.VmDirectPathGen2InactiveReasonOther, dVPortStatus.VmDirectPathGen2InactiveReasonOther))) && this.VmDirectPathGen2InactiveReasonExtended == dVPortStatus.VmDirectPathGen2InactiveReasonExtended);
        }

        public override bool Equals(object dVPortStatus)
        {
            return Equals(dVPortStatus as DVPortStatus);
        }

        public override int GetHashCode()
        {
            return (LinkUp + "_" + Blocked + "_" + VlanIds + "_" + TrunkingMode + "_" + Mtu + "_" + LinkPeer + "_" + MacAddress + "_" + StatusDetail + "_" + VmDirectPathGen2Active + "_" + VmDirectPathGen2InactiveReasonNetwork + "_" + VmDirectPathGen2InactiveReasonOther + "_" + VmDirectPathGen2InactiveReasonExtended).GetHashCode();
        }
    }

    public class DvsAcceptNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsAcceptNetworkRuleAction>
    {
        public bool Equals(DvsAcceptNetworkRuleAction dvsAcceptNetworkRuleAction)
        {
            return (dvsAcceptNetworkRuleAction != null && base.Equals(dvsAcceptNetworkRuleAction));
        }

        public override bool Equals(object dvsAcceptNetworkRuleAction)
        {
            return Equals(dvsAcceptNetworkRuleAction as DvsAcceptNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsApplyOperationFault : DvsFault, IEquatable<DvsApplyOperationFault>
    {
        public DvsApplyOperationFaultFaultOnObject[] ObjectFault { get; set; }

        public bool Equals(DvsApplyOperationFault dvsApplyOperationFault)
        {
            return (dvsApplyOperationFault != null && ((this.ObjectFault == null && dvsApplyOperationFault.ObjectFault == null) || (this.ObjectFault != null && dvsApplyOperationFault.ObjectFault != null && Enumerable.SequenceEqual(this.ObjectFault, dvsApplyOperationFault.ObjectFault))));
        }

        public override bool Equals(object dvsApplyOperationFault)
        {
            return Equals(dvsApplyOperationFault as DvsApplyOperationFault);
        }

        public override int GetHashCode()
        {
            return (ObjectFault).GetHashCode();
        }
    }

    public class DvsApplyOperationFaultFaultOnObject : DynamicData, IEquatable<DvsApplyOperationFaultFaultOnObject>
    {
        public string ObjectId { get; set; }

        public string Type { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(DvsApplyOperationFaultFaultOnObject dvsApplyOperationFaultFaultOnObject)
        {
            return (dvsApplyOperationFaultFaultOnObject != null && this.ObjectId == dvsApplyOperationFaultFaultOnObject.ObjectId && this.Type == dvsApplyOperationFaultFaultOnObject.Type && ((this.Fault == null && dvsApplyOperationFaultFaultOnObject.Fault == null) || (this.Fault != null && this.Fault.Equals(dvsApplyOperationFaultFaultOnObject.Fault))));
        }

        public override bool Equals(object dvsApplyOperationFaultFaultOnObject)
        {
            return Equals(dvsApplyOperationFaultFaultOnObject as DvsApplyOperationFaultFaultOnObject);
        }

        public override int GetHashCode()
        {
            return (ObjectId + "_" + Type + "_" + Fault).GetHashCode();
        }
    }

    public class DVSBackupRestoreCapability : DynamicData, IEquatable<DVSBackupRestoreCapability>
    {
        public bool BackupRestoreSupported { get; set; }

        public bool Equals(DVSBackupRestoreCapability dVSBackupRestoreCapability)
        {
            return (dVSBackupRestoreCapability != null && this.BackupRestoreSupported == dVSBackupRestoreCapability.BackupRestoreSupported);
        }

        public override bool Equals(object dVSBackupRestoreCapability)
        {
            return Equals(dVSBackupRestoreCapability as DVSBackupRestoreCapability);
        }

        public override int GetHashCode()
        {
            return (BackupRestoreSupported).GetHashCode();
        }
    }

    public class DVSCapability : DynamicData, IEquatable<DVSCapability>
    {
        public bool? DvsOperationSupported { get; set; }

        public bool? DvPortGroupOperationSupported { get; set; }

        public bool? DvPortOperationSupported { get; set; }

        public DistributedVirtualSwitchHostProductSpec[] CompatibleHostComponentProductInfo { get; set; }

        public DVSFeatureCapability FeaturesSupported { get; set; }

        public bool Equals(DVSCapability dVSCapability)
        {
            return (dVSCapability != null && ((this.DvsOperationSupported == null && dVSCapability.DvsOperationSupported == null) || (this.DvsOperationSupported != null && this.DvsOperationSupported.Equals(dVSCapability.DvsOperationSupported))) && ((this.DvPortGroupOperationSupported == null && dVSCapability.DvPortGroupOperationSupported == null) || (this.DvPortGroupOperationSupported != null && this.DvPortGroupOperationSupported.Equals(dVSCapability.DvPortGroupOperationSupported))) && ((this.DvPortOperationSupported == null && dVSCapability.DvPortOperationSupported == null) || (this.DvPortOperationSupported != null && this.DvPortOperationSupported.Equals(dVSCapability.DvPortOperationSupported))) && ((this.CompatibleHostComponentProductInfo == null && dVSCapability.CompatibleHostComponentProductInfo == null) || (this.CompatibleHostComponentProductInfo != null && dVSCapability.CompatibleHostComponentProductInfo != null && Enumerable.SequenceEqual(this.CompatibleHostComponentProductInfo, dVSCapability.CompatibleHostComponentProductInfo))) && ((this.FeaturesSupported == null && dVSCapability.FeaturesSupported == null) || (this.FeaturesSupported != null && this.FeaturesSupported.Equals(dVSCapability.FeaturesSupported))));
        }

        public override bool Equals(object dVSCapability)
        {
            return Equals(dVSCapability as DVSCapability);
        }

        public override int GetHashCode()
        {
            return (DvsOperationSupported + "_" + DvPortGroupOperationSupported + "_" + DvPortOperationSupported + "_" + CompatibleHostComponentProductInfo + "_" + FeaturesSupported).GetHashCode();
        }
    }

    public class DVSConfigInfo : DynamicData, IEquatable<DVSConfigInfo>
    {
        public string Uuid { get; set; }

        public string Name { get; set; }

        public int NumStandalonePorts { get; set; }

        public int NumPorts { get; set; }

        public int MaxPorts { get; set; }

        public DVSUplinkPortPolicy UplinkPortPolicy { get; set; }

        public ManagedObjectReference[] UplinkPortgroup { get; set; }

        public DVPortSetting DefaultPortConfig { get; set; }

        public DistributedVirtualSwitchHostMember[] Host { get; set; }

        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public DistributedVirtualSwitchProductSpec TargetInfo { get; set; }

        public string ExtensionKey { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public DVSPolicy Policy { get; set; }

        public string Description { get; set; }

        public string ConfigVersion { get; set; }

        public DVSContactInfo Contact { get; set; }

        public string SwitchIpAddress { get; set; }

        public DateTime CreateTime { get; set; }

        public bool NetworkResourceManagementEnabled { get; set; }

        public int? DefaultProxySwitchMaxNumPorts { get; set; }

        public DVSHealthCheckConfig[] HealthCheckConfig { get; set; }

        public DvsHostInfrastructureTrafficResource[] InfrastructureTrafficResourceConfig { get; set; }

        public DvsHostInfrastructureTrafficResource[] NetResourcePoolTrafficResourceConfig { get; set; }

        public string NetworkResourceControlVersion { get; set; }

        public DVSVmVnicNetworkResourcePool[] VmVnicNetworkResourcePool { get; set; }

        public int? PnicCapacityRatioForReservation { get; set; }

        public DVSConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(DVSConfigInfo dVSConfigInfo)
        {
            return (dVSConfigInfo != null && this.Uuid == dVSConfigInfo.Uuid && this.Name == dVSConfigInfo.Name && this.NumStandalonePorts == dVSConfigInfo.NumStandalonePorts && this.NumPorts == dVSConfigInfo.NumPorts && this.MaxPorts == dVSConfigInfo.MaxPorts && ((this.UplinkPortPolicy == null && dVSConfigInfo.UplinkPortPolicy == null) || (this.UplinkPortPolicy != null && this.UplinkPortPolicy.Equals(dVSConfigInfo.UplinkPortPolicy))) && ((this.UplinkPortgroup == null && dVSConfigInfo.UplinkPortgroup == null) || (this.UplinkPortgroup != null && dVSConfigInfo.UplinkPortgroup != null && Enumerable.SequenceEqual(this.UplinkPortgroup, dVSConfigInfo.UplinkPortgroup))) && ((this.DefaultPortConfig == null && dVSConfigInfo.DefaultPortConfig == null) || (this.DefaultPortConfig != null && this.DefaultPortConfig.Equals(dVSConfigInfo.DefaultPortConfig))) && ((this.Host == null && dVSConfigInfo.Host == null) || (this.Host != null && dVSConfigInfo.Host != null && Enumerable.SequenceEqual(this.Host, dVSConfigInfo.Host))) && ((this.ProductInfo == null && dVSConfigInfo.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dVSConfigInfo.ProductInfo))) && ((this.TargetInfo == null && dVSConfigInfo.TargetInfo == null) || (this.TargetInfo != null && this.TargetInfo.Equals(dVSConfigInfo.TargetInfo))) && this.ExtensionKey == dVSConfigInfo.ExtensionKey && ((this.VendorSpecificConfig == null && dVSConfigInfo.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && dVSConfigInfo.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, dVSConfigInfo.VendorSpecificConfig))) && ((this.Policy == null && dVSConfigInfo.Policy == null) || (this.Policy != null && this.Policy.Equals(dVSConfigInfo.Policy))) && this.Description == dVSConfigInfo.Description && this.ConfigVersion == dVSConfigInfo.ConfigVersion && ((this.Contact == null && dVSConfigInfo.Contact == null) || (this.Contact != null && this.Contact.Equals(dVSConfigInfo.Contact))) && this.SwitchIpAddress == dVSConfigInfo.SwitchIpAddress && this.CreateTime == dVSConfigInfo.CreateTime && this.NetworkResourceManagementEnabled == dVSConfigInfo.NetworkResourceManagementEnabled && ((this.DefaultProxySwitchMaxNumPorts == null && dVSConfigInfo.DefaultProxySwitchMaxNumPorts == null) || (this.DefaultProxySwitchMaxNumPorts != null && this.DefaultProxySwitchMaxNumPorts.Equals(dVSConfigInfo.DefaultProxySwitchMaxNumPorts))) && ((this.HealthCheckConfig == null && dVSConfigInfo.HealthCheckConfig == null) || (this.HealthCheckConfig != null && dVSConfigInfo.HealthCheckConfig != null && Enumerable.SequenceEqual(this.HealthCheckConfig, dVSConfigInfo.HealthCheckConfig))) && ((this.InfrastructureTrafficResourceConfig == null && dVSConfigInfo.InfrastructureTrafficResourceConfig == null) || (this.InfrastructureTrafficResourceConfig != null && dVSConfigInfo.InfrastructureTrafficResourceConfig != null && Enumerable.SequenceEqual(this.InfrastructureTrafficResourceConfig, dVSConfigInfo.InfrastructureTrafficResourceConfig))) && ((this.NetResourcePoolTrafficResourceConfig == null && dVSConfigInfo.NetResourcePoolTrafficResourceConfig == null) || (this.NetResourcePoolTrafficResourceConfig != null && dVSConfigInfo.NetResourcePoolTrafficResourceConfig != null && Enumerable.SequenceEqual(this.NetResourcePoolTrafficResourceConfig, dVSConfigInfo.NetResourcePoolTrafficResourceConfig))) && this.NetworkResourceControlVersion == dVSConfigInfo.NetworkResourceControlVersion && ((this.VmVnicNetworkResourcePool == null && dVSConfigInfo.VmVnicNetworkResourcePool == null) || (this.VmVnicNetworkResourcePool != null && dVSConfigInfo.VmVnicNetworkResourcePool != null && Enumerable.SequenceEqual(this.VmVnicNetworkResourcePool, dVSConfigInfo.VmVnicNetworkResourcePool))) && ((this.PnicCapacityRatioForReservation == null && dVSConfigInfo.PnicCapacityRatioForReservation == null) || (this.PnicCapacityRatioForReservation != null && this.PnicCapacityRatioForReservation.Equals(dVSConfigInfo.PnicCapacityRatioForReservation))) && ((this.LinkedView == null && dVSConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVSConfigInfo.LinkedView))));
        }

        public override bool Equals(object dVSConfigInfo)
        {
            return Equals(dVSConfigInfo as DVSConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + Name + "_" + NumStandalonePorts + "_" + NumPorts + "_" + MaxPorts + "_" + UplinkPortPolicy + "_" + UplinkPortgroup + "_" + DefaultPortConfig + "_" + Host + "_" + ProductInfo + "_" + TargetInfo + "_" + ExtensionKey + "_" + VendorSpecificConfig + "_" + Policy + "_" + Description + "_" + ConfigVersion + "_" + Contact + "_" + SwitchIpAddress + "_" + CreateTime + "_" + NetworkResourceManagementEnabled + "_" + DefaultProxySwitchMaxNumPorts + "_" + HealthCheckConfig + "_" + InfrastructureTrafficResourceConfig + "_" + NetResourcePoolTrafficResourceConfig + "_" + NetworkResourceControlVersion + "_" + VmVnicNetworkResourcePool + "_" + PnicCapacityRatioForReservation + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVSConfigInfo_LinkedView : IEquatable<DVSConfigInfo_LinkedView>
    {
        public DistributedVirtualPortgroup[] UplinkPortgroup { get; set; }

        public bool Equals(DVSConfigInfo_LinkedView dVSConfigInfo_LinkedView)
        {
            return (dVSConfigInfo_LinkedView != null && ((this.UplinkPortgroup == null && dVSConfigInfo_LinkedView.UplinkPortgroup == null) || (this.UplinkPortgroup != null && dVSConfigInfo_LinkedView.UplinkPortgroup != null && Enumerable.SequenceEqual(this.UplinkPortgroup, dVSConfigInfo_LinkedView.UplinkPortgroup))));
        }

        public override bool Equals(object dVSConfigInfo_LinkedView)
        {
            return Equals(dVSConfigInfo_LinkedView as DVSConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (UplinkPortgroup).GetHashCode();
        }
    }

    public class DVSConfigSpec : DynamicData, IEquatable<DVSConfigSpec>
    {
        public string ConfigVersion { get; set; }

        public string Name { get; set; }

        public int? NumStandalonePorts { get; set; }

        public int? MaxPorts { get; set; }

        public DVSUplinkPortPolicy UplinkPortPolicy { get; set; }

        public ManagedObjectReference[] UplinkPortgroup { get; set; }

        public DVPortSetting DefaultPortConfig { get; set; }

        public DistributedVirtualSwitchHostMemberConfigSpec[] Host { get; set; }

        public string ExtensionKey { get; set; }

        public string Description { get; set; }

        public DVSPolicy Policy { get; set; }

        public DistributedVirtualSwitchKeyedOpaqueBlob[] VendorSpecificConfig { get; set; }

        public DVSContactInfo Contact { get; set; }

        public string SwitchIpAddress { get; set; }

        public int? DefaultProxySwitchMaxNumPorts { get; set; }

        public DvsHostInfrastructureTrafficResource[] InfrastructureTrafficResourceConfig { get; set; }

        public DvsHostInfrastructureTrafficResource[] NetResourcePoolTrafficResourceConfig { get; set; }

        public string NetworkResourceControlVersion { get; set; }

        public DVSConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(DVSConfigSpec dVSConfigSpec)
        {
            return (dVSConfigSpec != null && this.ConfigVersion == dVSConfigSpec.ConfigVersion && this.Name == dVSConfigSpec.Name && ((this.NumStandalonePorts == null && dVSConfigSpec.NumStandalonePorts == null) || (this.NumStandalonePorts != null && this.NumStandalonePorts.Equals(dVSConfigSpec.NumStandalonePorts))) && ((this.MaxPorts == null && dVSConfigSpec.MaxPorts == null) || (this.MaxPorts != null && this.MaxPorts.Equals(dVSConfigSpec.MaxPorts))) && ((this.UplinkPortPolicy == null && dVSConfigSpec.UplinkPortPolicy == null) || (this.UplinkPortPolicy != null && this.UplinkPortPolicy.Equals(dVSConfigSpec.UplinkPortPolicy))) && ((this.UplinkPortgroup == null && dVSConfigSpec.UplinkPortgroup == null) || (this.UplinkPortgroup != null && dVSConfigSpec.UplinkPortgroup != null && Enumerable.SequenceEqual(this.UplinkPortgroup, dVSConfigSpec.UplinkPortgroup))) && ((this.DefaultPortConfig == null && dVSConfigSpec.DefaultPortConfig == null) || (this.DefaultPortConfig != null && this.DefaultPortConfig.Equals(dVSConfigSpec.DefaultPortConfig))) && ((this.Host == null && dVSConfigSpec.Host == null) || (this.Host != null && dVSConfigSpec.Host != null && Enumerable.SequenceEqual(this.Host, dVSConfigSpec.Host))) && this.ExtensionKey == dVSConfigSpec.ExtensionKey && this.Description == dVSConfigSpec.Description && ((this.Policy == null && dVSConfigSpec.Policy == null) || (this.Policy != null && this.Policy.Equals(dVSConfigSpec.Policy))) && ((this.VendorSpecificConfig == null && dVSConfigSpec.VendorSpecificConfig == null) || (this.VendorSpecificConfig != null && dVSConfigSpec.VendorSpecificConfig != null && Enumerable.SequenceEqual(this.VendorSpecificConfig, dVSConfigSpec.VendorSpecificConfig))) && ((this.Contact == null && dVSConfigSpec.Contact == null) || (this.Contact != null && this.Contact.Equals(dVSConfigSpec.Contact))) && this.SwitchIpAddress == dVSConfigSpec.SwitchIpAddress && ((this.DefaultProxySwitchMaxNumPorts == null && dVSConfigSpec.DefaultProxySwitchMaxNumPorts == null) || (this.DefaultProxySwitchMaxNumPorts != null && this.DefaultProxySwitchMaxNumPorts.Equals(dVSConfigSpec.DefaultProxySwitchMaxNumPorts))) && ((this.InfrastructureTrafficResourceConfig == null && dVSConfigSpec.InfrastructureTrafficResourceConfig == null) || (this.InfrastructureTrafficResourceConfig != null && dVSConfigSpec.InfrastructureTrafficResourceConfig != null && Enumerable.SequenceEqual(this.InfrastructureTrafficResourceConfig, dVSConfigSpec.InfrastructureTrafficResourceConfig))) && ((this.NetResourcePoolTrafficResourceConfig == null && dVSConfigSpec.NetResourcePoolTrafficResourceConfig == null) || (this.NetResourcePoolTrafficResourceConfig != null && dVSConfigSpec.NetResourcePoolTrafficResourceConfig != null && Enumerable.SequenceEqual(this.NetResourcePoolTrafficResourceConfig, dVSConfigSpec.NetResourcePoolTrafficResourceConfig))) && this.NetworkResourceControlVersion == dVSConfigSpec.NetworkResourceControlVersion && ((this.LinkedView == null && dVSConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVSConfigSpec.LinkedView))));
        }

        public override bool Equals(object dVSConfigSpec)
        {
            return Equals(dVSConfigSpec as DVSConfigSpec);
        }

        public override int GetHashCode()
        {
            return (ConfigVersion + "_" + Name + "_" + NumStandalonePorts + "_" + MaxPorts + "_" + UplinkPortPolicy + "_" + UplinkPortgroup + "_" + DefaultPortConfig + "_" + Host + "_" + ExtensionKey + "_" + Description + "_" + Policy + "_" + VendorSpecificConfig + "_" + Contact + "_" + SwitchIpAddress + "_" + DefaultProxySwitchMaxNumPorts + "_" + InfrastructureTrafficResourceConfig + "_" + NetResourcePoolTrafficResourceConfig + "_" + NetworkResourceControlVersion + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVSConfigSpec_LinkedView : IEquatable<DVSConfigSpec_LinkedView>
    {
        public DistributedVirtualPortgroup[] UplinkPortgroup { get; set; }

        public bool Equals(DVSConfigSpec_LinkedView dVSConfigSpec_LinkedView)
        {
            return (dVSConfigSpec_LinkedView != null && ((this.UplinkPortgroup == null && dVSConfigSpec_LinkedView.UplinkPortgroup == null) || (this.UplinkPortgroup != null && dVSConfigSpec_LinkedView.UplinkPortgroup != null && Enumerable.SequenceEqual(this.UplinkPortgroup, dVSConfigSpec_LinkedView.UplinkPortgroup))));
        }

        public override bool Equals(object dVSConfigSpec_LinkedView)
        {
            return Equals(dVSConfigSpec_LinkedView as DVSConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (UplinkPortgroup).GetHashCode();
        }
    }

    public class DVSContactInfo : DynamicData, IEquatable<DVSContactInfo>
    {
        public string Name { get; set; }

        public string Contact { get; set; }

        public bool Equals(DVSContactInfo dVSContactInfo)
        {
            return (dVSContactInfo != null && this.Name == dVSContactInfo.Name && this.Contact == dVSContactInfo.Contact);
        }

        public override bool Equals(object dVSContactInfo)
        {
            return Equals(dVSContactInfo as DVSContactInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Contact).GetHashCode();
        }
    }

    public class DvsCopyNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsCopyNetworkRuleAction>
    {
        public bool Equals(DvsCopyNetworkRuleAction dvsCopyNetworkRuleAction)
        {
            return (dvsCopyNetworkRuleAction != null && base.Equals(dvsCopyNetworkRuleAction));
        }

        public override bool Equals(object dvsCopyNetworkRuleAction)
        {
            return Equals(dvsCopyNetworkRuleAction as DvsCopyNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsCreatedEvent : DvsEvent, IEquatable<DvsCreatedEvent>
    {
        public FolderEventArgument Parent { get; set; }

        public bool Equals(DvsCreatedEvent dvsCreatedEvent)
        {
            return (dvsCreatedEvent != null && ((this.Parent == null && dvsCreatedEvent.Parent == null) || (this.Parent != null && this.Parent.Equals(dvsCreatedEvent.Parent))));
        }

        public override bool Equals(object dvsCreatedEvent)
        {
            return Equals(dvsCreatedEvent as DvsCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Parent).GetHashCode();
        }
    }

    public class DVSCreateSpec : DynamicData, IEquatable<DVSCreateSpec>
    {
        public DVSConfigSpec ConfigSpec { get; set; }

        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public DVSCapability Capability { get; set; }

        public bool Equals(DVSCreateSpec dVSCreateSpec)
        {
            return (dVSCreateSpec != null && ((this.ConfigSpec == null && dVSCreateSpec.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(dVSCreateSpec.ConfigSpec))) && ((this.ProductInfo == null && dVSCreateSpec.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dVSCreateSpec.ProductInfo))) && ((this.Capability == null && dVSCreateSpec.Capability == null) || (this.Capability != null && this.Capability.Equals(dVSCreateSpec.Capability))));
        }

        public override bool Equals(object dVSCreateSpec)
        {
            return Equals(dVSCreateSpec as DVSCreateSpec);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + ProductInfo + "_" + Capability).GetHashCode();
        }
    }

    public class DvsDestroyedEvent : DvsEvent, IEquatable<DvsDestroyedEvent>
    {
        public bool Equals(DvsDestroyedEvent dvsDestroyedEvent)
        {
            return (dvsDestroyedEvent != null && base.Equals(dvsDestroyedEvent));
        }

        public override bool Equals(object dvsDestroyedEvent)
        {
            return Equals(dvsDestroyedEvent as DvsDestroyedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsDropNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsDropNetworkRuleAction>
    {
        public bool Equals(DvsDropNetworkRuleAction dvsDropNetworkRuleAction)
        {
            return (dvsDropNetworkRuleAction != null && base.Equals(dvsDropNetworkRuleAction));
        }

        public override bool Equals(object dvsDropNetworkRuleAction)
        {
            return Equals(dvsDropNetworkRuleAction as DvsDropNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsEvent : Event, IEquatable<DvsEvent>
    {
        public bool Equals(DvsEvent dvsEvent)
        {
            return (dvsEvent != null && base.Equals(dvsEvent));
        }

        public override bool Equals(object dvsEvent)
        {
            return Equals(dvsEvent as DvsEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsEventArgument : EntityEventArgument, IEquatable<DvsEventArgument>
    {
        public ManagedObjectReference Dvs { get; set; }

        public DvsEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(DvsEventArgument dvsEventArgument)
        {
            return (dvsEventArgument != null && ((this.Dvs == null && dvsEventArgument.Dvs == null) || (this.Dvs != null && this.Dvs.Equals(dvsEventArgument.Dvs))) && ((this.LinkedView == null && dvsEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dvsEventArgument.LinkedView))));
        }

        public override bool Equals(object dvsEventArgument)
        {
            return Equals(dvsEventArgument as DvsEventArgument);
        }

        public override int GetHashCode()
        {
            return (Dvs + "_" + LinkedView).GetHashCode();
        }
    }

    public class DvsEventArgument_LinkedView : IEquatable<DvsEventArgument_LinkedView>
    {
        public DistributedVirtualSwitch Dvs { get; set; }

        public bool Equals(DvsEventArgument_LinkedView dvsEventArgument_LinkedView)
        {
            return (dvsEventArgument_LinkedView != null && ((this.Dvs == null && dvsEventArgument_LinkedView.Dvs == null) || (this.Dvs != null && this.Dvs.Equals(dvsEventArgument_LinkedView.Dvs))));
        }

        public override bool Equals(object dvsEventArgument_LinkedView)
        {
            return Equals(dvsEventArgument_LinkedView as DvsEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Dvs).GetHashCode();
        }
    }

    public class DVSFailureCriteria : InheritablePolicy, IEquatable<DVSFailureCriteria>
    {
        public StringPolicy CheckSpeed { get; set; }

        public IntPolicy Speed { get; set; }

        public BoolPolicy CheckDuplex { get; set; }

        public BoolPolicy FullDuplex { get; set; }

        public BoolPolicy CheckErrorPercent { get; set; }

        public IntPolicy Percentage { get; set; }

        public BoolPolicy CheckBeacon { get; set; }

        public bool Equals(DVSFailureCriteria dVSFailureCriteria)
        {
            return (dVSFailureCriteria != null && ((this.CheckSpeed == null && dVSFailureCriteria.CheckSpeed == null) || (this.CheckSpeed != null && this.CheckSpeed.Equals(dVSFailureCriteria.CheckSpeed))) && ((this.Speed == null && dVSFailureCriteria.Speed == null) || (this.Speed != null && this.Speed.Equals(dVSFailureCriteria.Speed))) && ((this.CheckDuplex == null && dVSFailureCriteria.CheckDuplex == null) || (this.CheckDuplex != null && this.CheckDuplex.Equals(dVSFailureCriteria.CheckDuplex))) && ((this.FullDuplex == null && dVSFailureCriteria.FullDuplex == null) || (this.FullDuplex != null && this.FullDuplex.Equals(dVSFailureCriteria.FullDuplex))) && ((this.CheckErrorPercent == null && dVSFailureCriteria.CheckErrorPercent == null) || (this.CheckErrorPercent != null && this.CheckErrorPercent.Equals(dVSFailureCriteria.CheckErrorPercent))) && ((this.Percentage == null && dVSFailureCriteria.Percentage == null) || (this.Percentage != null && this.Percentage.Equals(dVSFailureCriteria.Percentage))) && ((this.CheckBeacon == null && dVSFailureCriteria.CheckBeacon == null) || (this.CheckBeacon != null && this.CheckBeacon.Equals(dVSFailureCriteria.CheckBeacon))));
        }

        public override bool Equals(object dVSFailureCriteria)
        {
            return Equals(dVSFailureCriteria as DVSFailureCriteria);
        }

        public override int GetHashCode()
        {
            return (CheckSpeed + "_" + Speed + "_" + CheckDuplex + "_" + FullDuplex + "_" + CheckErrorPercent + "_" + Percentage + "_" + CheckBeacon).GetHashCode();
        }
    }

    public class DvsFault : VimFault, IEquatable<DvsFault>
    {
        public bool Equals(DvsFault dvsFault)
        {
            return (dvsFault != null && base.Equals(dvsFault));
        }

        public override bool Equals(object dvsFault)
        {
            return Equals(dvsFault as DvsFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVSFeatureCapability : DynamicData, IEquatable<DVSFeatureCapability>
    {
        public bool NetworkResourceManagementSupported { get; set; }

        public bool VmDirectPathGen2Supported { get; set; }

        public string[] NicTeamingPolicy { get; set; }

        public int? NetworkResourcePoolHighShareValue { get; set; }

        public DVSNetworkResourceManagementCapability NetworkResourceManagementCapability { get; set; }

        public DVSHealthCheckCapability HealthCheckCapability { get; set; }

        public DVSRollbackCapability RollbackCapability { get; set; }

        public DVSBackupRestoreCapability BackupRestoreCapability { get; set; }

        public bool? NetworkFilterSupported { get; set; }

        public bool? MacLearningSupported { get; set; }

        public bool Equals(DVSFeatureCapability dVSFeatureCapability)
        {
            return (dVSFeatureCapability != null && this.NetworkResourceManagementSupported == dVSFeatureCapability.NetworkResourceManagementSupported && this.VmDirectPathGen2Supported == dVSFeatureCapability.VmDirectPathGen2Supported && ((this.NicTeamingPolicy == null && dVSFeatureCapability.NicTeamingPolicy == null) || (this.NicTeamingPolicy != null && dVSFeatureCapability.NicTeamingPolicy != null && Enumerable.SequenceEqual(this.NicTeamingPolicy, dVSFeatureCapability.NicTeamingPolicy))) && ((this.NetworkResourcePoolHighShareValue == null && dVSFeatureCapability.NetworkResourcePoolHighShareValue == null) || (this.NetworkResourcePoolHighShareValue != null && this.NetworkResourcePoolHighShareValue.Equals(dVSFeatureCapability.NetworkResourcePoolHighShareValue))) && ((this.NetworkResourceManagementCapability == null && dVSFeatureCapability.NetworkResourceManagementCapability == null) || (this.NetworkResourceManagementCapability != null && this.NetworkResourceManagementCapability.Equals(dVSFeatureCapability.NetworkResourceManagementCapability))) && ((this.HealthCheckCapability == null && dVSFeatureCapability.HealthCheckCapability == null) || (this.HealthCheckCapability != null && this.HealthCheckCapability.Equals(dVSFeatureCapability.HealthCheckCapability))) && ((this.RollbackCapability == null && dVSFeatureCapability.RollbackCapability == null) || (this.RollbackCapability != null && this.RollbackCapability.Equals(dVSFeatureCapability.RollbackCapability))) && ((this.BackupRestoreCapability == null && dVSFeatureCapability.BackupRestoreCapability == null) || (this.BackupRestoreCapability != null && this.BackupRestoreCapability.Equals(dVSFeatureCapability.BackupRestoreCapability))) && ((this.NetworkFilterSupported == null && dVSFeatureCapability.NetworkFilterSupported == null) || (this.NetworkFilterSupported != null && this.NetworkFilterSupported.Equals(dVSFeatureCapability.NetworkFilterSupported))) && ((this.MacLearningSupported == null && dVSFeatureCapability.MacLearningSupported == null) || (this.MacLearningSupported != null && this.MacLearningSupported.Equals(dVSFeatureCapability.MacLearningSupported))));
        }

        public override bool Equals(object dVSFeatureCapability)
        {
            return Equals(dVSFeatureCapability as DVSFeatureCapability);
        }

        public override int GetHashCode()
        {
            return (NetworkResourceManagementSupported + "_" + VmDirectPathGen2Supported + "_" + NicTeamingPolicy + "_" + NetworkResourcePoolHighShareValue + "_" + NetworkResourceManagementCapability + "_" + HealthCheckCapability + "_" + RollbackCapability + "_" + BackupRestoreCapability + "_" + NetworkFilterSupported + "_" + MacLearningSupported).GetHashCode();
        }
    }

    public class DvsFilterConfig : InheritablePolicy, IEquatable<DvsFilterConfig>
    {
        public string Key { get; set; }

        public string AgentName { get; set; }

        public string SlotNumber { get; set; }

        public DvsFilterParameter Parameters { get; set; }

        public string OnFailure { get; set; }

        public bool Equals(DvsFilterConfig dvsFilterConfig)
        {
            return (dvsFilterConfig != null && this.Key == dvsFilterConfig.Key && this.AgentName == dvsFilterConfig.AgentName && this.SlotNumber == dvsFilterConfig.SlotNumber && ((this.Parameters == null && dvsFilterConfig.Parameters == null) || (this.Parameters != null && this.Parameters.Equals(dvsFilterConfig.Parameters))) && this.OnFailure == dvsFilterConfig.OnFailure);
        }

        public override bool Equals(object dvsFilterConfig)
        {
            return Equals(dvsFilterConfig as DvsFilterConfig);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + AgentName + "_" + SlotNumber + "_" + Parameters + "_" + OnFailure).GetHashCode();
        }
    }

    public class DvsFilterConfigSpec : DvsFilterConfig, IEquatable<DvsFilterConfigSpec>
    {
        public string Operation { get; set; }

        public bool Equals(DvsFilterConfigSpec dvsFilterConfigSpec)
        {
            return (dvsFilterConfigSpec != null && this.Operation == dvsFilterConfigSpec.Operation);
        }

        public override bool Equals(object dvsFilterConfigSpec)
        {
            return Equals(dvsFilterConfigSpec as DvsFilterConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation).GetHashCode();
        }
    }

    public class DvsFilterParameter : DynamicData, IEquatable<DvsFilterParameter>
    {
        public string[] Parameters { get; set; }

        public bool Equals(DvsFilterParameter dvsFilterParameter)
        {
            return (dvsFilterParameter != null && ((this.Parameters == null && dvsFilterParameter.Parameters == null) || (this.Parameters != null && dvsFilterParameter.Parameters != null && Enumerable.SequenceEqual(this.Parameters, dvsFilterParameter.Parameters))));
        }

        public override bool Equals(object dvsFilterParameter)
        {
            return Equals(dvsFilterParameter as DvsFilterParameter);
        }

        public override int GetHashCode()
        {
            return (Parameters).GetHashCode();
        }
    }

    public class DvsFilterPolicy : InheritablePolicy, IEquatable<DvsFilterPolicy>
    {
        public DvsFilterConfig[] FilterConfig { get; set; }

        public bool Equals(DvsFilterPolicy dvsFilterPolicy)
        {
            return (dvsFilterPolicy != null && ((this.FilterConfig == null && dvsFilterPolicy.FilterConfig == null) || (this.FilterConfig != null && dvsFilterPolicy.FilterConfig != null && Enumerable.SequenceEqual(this.FilterConfig, dvsFilterPolicy.FilterConfig))));
        }

        public override bool Equals(object dvsFilterPolicy)
        {
            return Equals(dvsFilterPolicy as DvsFilterPolicy);
        }

        public override int GetHashCode()
        {
            return (FilterConfig).GetHashCode();
        }
    }

    public class DvsGreEncapNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsGreEncapNetworkRuleAction>
    {
        public SingleIp EncapsulationIp { get; set; }

        public bool Equals(DvsGreEncapNetworkRuleAction dvsGreEncapNetworkRuleAction)
        {
            return (dvsGreEncapNetworkRuleAction != null && ((this.EncapsulationIp == null && dvsGreEncapNetworkRuleAction.EncapsulationIp == null) || (this.EncapsulationIp != null && this.EncapsulationIp.Equals(dvsGreEncapNetworkRuleAction.EncapsulationIp))));
        }

        public override bool Equals(object dvsGreEncapNetworkRuleAction)
        {
            return Equals(dvsGreEncapNetworkRuleAction as DvsGreEncapNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return (EncapsulationIp).GetHashCode();
        }
    }

    public class DVSHealthCheckCapability : DynamicData, IEquatable<DVSHealthCheckCapability>
    {
        public bool Equals(DVSHealthCheckCapability dVSHealthCheckCapability)
        {
            return (dVSHealthCheckCapability != null && base.Equals(dVSHealthCheckCapability));
        }

        public override bool Equals(object dVSHealthCheckCapability)
        {
            return Equals(dVSHealthCheckCapability as DVSHealthCheckCapability);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVSHealthCheckConfig : DynamicData, IEquatable<DVSHealthCheckConfig>
    {
        public bool? Enable { get; set; }

        public int? Interval { get; set; }

        public bool Equals(DVSHealthCheckConfig dVSHealthCheckConfig)
        {
            return (dVSHealthCheckConfig != null && ((this.Enable == null && dVSHealthCheckConfig.Enable == null) || (this.Enable != null && this.Enable.Equals(dVSHealthCheckConfig.Enable))) && ((this.Interval == null && dVSHealthCheckConfig.Interval == null) || (this.Interval != null && this.Interval.Equals(dVSHealthCheckConfig.Interval))));
        }

        public override bool Equals(object dVSHealthCheckConfig)
        {
            return Equals(dVSHealthCheckConfig as DVSHealthCheckConfig);
        }

        public override int GetHashCode()
        {
            return (Enable + "_" + Interval).GetHashCode();
        }
    }

    public class DvsHealthStatusChangeEvent : HostEvent, IEquatable<DvsHealthStatusChangeEvent>
    {
        public string SwitchUuid { get; set; }

        public HostMemberHealthCheckResult HealthResult { get; set; }

        public bool Equals(DvsHealthStatusChangeEvent dvsHealthStatusChangeEvent)
        {
            return (dvsHealthStatusChangeEvent != null && this.SwitchUuid == dvsHealthStatusChangeEvent.SwitchUuid && ((this.HealthResult == null && dvsHealthStatusChangeEvent.HealthResult == null) || (this.HealthResult != null && this.HealthResult.Equals(dvsHealthStatusChangeEvent.HealthResult))));
        }

        public override bool Equals(object dvsHealthStatusChangeEvent)
        {
            return Equals(dvsHealthStatusChangeEvent as DvsHealthStatusChangeEvent);
        }

        public override int GetHashCode()
        {
            return (SwitchUuid + "_" + HealthResult).GetHashCode();
        }
    }

    public class DvsHostBackInSyncEvent : DvsEvent, IEquatable<DvsHostBackInSyncEvent>
    {
        public HostEventArgument HostBackInSync { get; set; }

        public bool Equals(DvsHostBackInSyncEvent dvsHostBackInSyncEvent)
        {
            return (dvsHostBackInSyncEvent != null && ((this.HostBackInSync == null && dvsHostBackInSyncEvent.HostBackInSync == null) || (this.HostBackInSync != null && this.HostBackInSync.Equals(dvsHostBackInSyncEvent.HostBackInSync))));
        }

        public override bool Equals(object dvsHostBackInSyncEvent)
        {
            return Equals(dvsHostBackInSyncEvent as DvsHostBackInSyncEvent);
        }

        public override int GetHashCode()
        {
            return (HostBackInSync).GetHashCode();
        }
    }

    public class DvsHostInfrastructureTrafficResource : DynamicData, IEquatable<DvsHostInfrastructureTrafficResource>
    {
        public string Key { get; set; }

        public string Description { get; set; }

        public DvsHostInfrastructureTrafficResourceAllocation AllocationInfo { get; set; }

        public bool Equals(DvsHostInfrastructureTrafficResource dvsHostInfrastructureTrafficResource)
        {
            return (dvsHostInfrastructureTrafficResource != null && this.Key == dvsHostInfrastructureTrafficResource.Key && this.Description == dvsHostInfrastructureTrafficResource.Description && ((this.AllocationInfo == null && dvsHostInfrastructureTrafficResource.AllocationInfo == null) || (this.AllocationInfo != null && this.AllocationInfo.Equals(dvsHostInfrastructureTrafficResource.AllocationInfo))));
        }

        public override bool Equals(object dvsHostInfrastructureTrafficResource)
        {
            return Equals(dvsHostInfrastructureTrafficResource as DvsHostInfrastructureTrafficResource);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Description + "_" + AllocationInfo).GetHashCode();
        }
    }

    public class DvsHostInfrastructureTrafficResourceAllocation : DynamicData, IEquatable<DvsHostInfrastructureTrafficResourceAllocation>
    {
        public long? Limit { get; set; }

        public SharesInfo Shares { get; set; }

        public long? Reservation { get; set; }

        public bool Equals(DvsHostInfrastructureTrafficResourceAllocation dvsHostInfrastructureTrafficResourceAllocation)
        {
            return (dvsHostInfrastructureTrafficResourceAllocation != null && ((this.Limit == null && dvsHostInfrastructureTrafficResourceAllocation.Limit == null) || (this.Limit != null && this.Limit.Equals(dvsHostInfrastructureTrafficResourceAllocation.Limit))) && ((this.Shares == null && dvsHostInfrastructureTrafficResourceAllocation.Shares == null) || (this.Shares != null && this.Shares.Equals(dvsHostInfrastructureTrafficResourceAllocation.Shares))) && ((this.Reservation == null && dvsHostInfrastructureTrafficResourceAllocation.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(dvsHostInfrastructureTrafficResourceAllocation.Reservation))));
        }

        public override bool Equals(object dvsHostInfrastructureTrafficResourceAllocation)
        {
            return Equals(dvsHostInfrastructureTrafficResourceAllocation as DvsHostInfrastructureTrafficResourceAllocation);
        }

        public override int GetHashCode()
        {
            return (Limit + "_" + Shares + "_" + Reservation).GetHashCode();
        }
    }

    public class DvsHostJoinedEvent : DvsEvent, IEquatable<DvsHostJoinedEvent>
    {
        public HostEventArgument HostJoined { get; set; }

        public bool Equals(DvsHostJoinedEvent dvsHostJoinedEvent)
        {
            return (dvsHostJoinedEvent != null && ((this.HostJoined == null && dvsHostJoinedEvent.HostJoined == null) || (this.HostJoined != null && this.HostJoined.Equals(dvsHostJoinedEvent.HostJoined))));
        }

        public override bool Equals(object dvsHostJoinedEvent)
        {
            return Equals(dvsHostJoinedEvent as DvsHostJoinedEvent);
        }

        public override int GetHashCode()
        {
            return (HostJoined).GetHashCode();
        }
    }

    public class DvsHostLeftEvent : DvsEvent, IEquatable<DvsHostLeftEvent>
    {
        public HostEventArgument HostLeft { get; set; }

        public bool Equals(DvsHostLeftEvent dvsHostLeftEvent)
        {
            return (dvsHostLeftEvent != null && ((this.HostLeft == null && dvsHostLeftEvent.HostLeft == null) || (this.HostLeft != null && this.HostLeft.Equals(dvsHostLeftEvent.HostLeft))));
        }

        public override bool Equals(object dvsHostLeftEvent)
        {
            return Equals(dvsHostLeftEvent as DvsHostLeftEvent);
        }

        public override int GetHashCode()
        {
            return (HostLeft).GetHashCode();
        }
    }

    public class DVSHostLocalPortInfo : DynamicData, IEquatable<DVSHostLocalPortInfo>
    {
        public string SwitchUuid { get; set; }

        public string PortKey { get; set; }

        public DVPortSetting Setting { get; set; }

        public string Vnic { get; set; }

        public bool Equals(DVSHostLocalPortInfo dVSHostLocalPortInfo)
        {
            return (dVSHostLocalPortInfo != null && this.SwitchUuid == dVSHostLocalPortInfo.SwitchUuid && this.PortKey == dVSHostLocalPortInfo.PortKey && ((this.Setting == null && dVSHostLocalPortInfo.Setting == null) || (this.Setting != null && this.Setting.Equals(dVSHostLocalPortInfo.Setting))) && this.Vnic == dVSHostLocalPortInfo.Vnic);
        }

        public override bool Equals(object dVSHostLocalPortInfo)
        {
            return Equals(dVSHostLocalPortInfo as DVSHostLocalPortInfo);
        }

        public override int GetHashCode()
        {
            return (SwitchUuid + "_" + PortKey + "_" + Setting + "_" + Vnic).GetHashCode();
        }
    }

    public class DvsHostStatusUpdated : DvsEvent, IEquatable<DvsHostStatusUpdated>
    {
        public HostEventArgument HostMember { get; set; }

        public string OldStatus { get; set; }

        public string NewStatus { get; set; }

        public string OldStatusDetail { get; set; }

        public string NewStatusDetail { get; set; }

        public bool Equals(DvsHostStatusUpdated dvsHostStatusUpdated)
        {
            return (dvsHostStatusUpdated != null && ((this.HostMember == null && dvsHostStatusUpdated.HostMember == null) || (this.HostMember != null && this.HostMember.Equals(dvsHostStatusUpdated.HostMember))) && this.OldStatus == dvsHostStatusUpdated.OldStatus && this.NewStatus == dvsHostStatusUpdated.NewStatus && this.OldStatusDetail == dvsHostStatusUpdated.OldStatusDetail && this.NewStatusDetail == dvsHostStatusUpdated.NewStatusDetail);
        }

        public override bool Equals(object dvsHostStatusUpdated)
        {
            return Equals(dvsHostStatusUpdated as DvsHostStatusUpdated);
        }

        public override int GetHashCode()
        {
            return (HostMember + "_" + OldStatus + "_" + NewStatus + "_" + OldStatusDetail + "_" + NewStatusDetail).GetHashCode();
        }
    }

    public class DvsHostVNicProfile : DvsVNicProfile, IEquatable<DvsHostVNicProfile>
    {
        public bool Equals(DvsHostVNicProfile dvsHostVNicProfile)
        {
            return (dvsHostVNicProfile != null && base.Equals(dvsHostVNicProfile));
        }

        public override bool Equals(object dvsHostVNicProfile)
        {
            return Equals(dvsHostVNicProfile as DvsHostVNicProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsHostWentOutOfSyncEvent : DvsEvent, IEquatable<DvsHostWentOutOfSyncEvent>
    {
        public DvsOutOfSyncHostArgument HostOutOfSync { get; set; }

        public bool Equals(DvsHostWentOutOfSyncEvent dvsHostWentOutOfSyncEvent)
        {
            return (dvsHostWentOutOfSyncEvent != null && ((this.HostOutOfSync == null && dvsHostWentOutOfSyncEvent.HostOutOfSync == null) || (this.HostOutOfSync != null && this.HostOutOfSync.Equals(dvsHostWentOutOfSyncEvent.HostOutOfSync))));
        }

        public override bool Equals(object dvsHostWentOutOfSyncEvent)
        {
            return Equals(dvsHostWentOutOfSyncEvent as DvsHostWentOutOfSyncEvent);
        }

        public override int GetHashCode()
        {
            return (HostOutOfSync).GetHashCode();
        }
    }

    public class DvsImportEvent : DvsEvent, IEquatable<DvsImportEvent>
    {
        public string ImportType { get; set; }

        public bool Equals(DvsImportEvent dvsImportEvent)
        {
            return (dvsImportEvent != null && this.ImportType == dvsImportEvent.ImportType);
        }

        public override bool Equals(object dvsImportEvent)
        {
            return Equals(dvsImportEvent as DvsImportEvent);
        }

        public override int GetHashCode()
        {
            return (ImportType).GetHashCode();
        }
    }

    public class DvsIpNetworkRuleQualifier : DvsNetworkRuleQualifier, IEquatable<DvsIpNetworkRuleQualifier>
    {
        public IpAddress SourceAddress { get; set; }

        public IpAddress DestinationAddress { get; set; }

        public IntExpression Protocol { get; set; }

        public DvsIpPort SourceIpPort { get; set; }

        public DvsIpPort DestinationIpPort { get; set; }

        public IntExpression TcpFlags { get; set; }

        public bool Equals(DvsIpNetworkRuleQualifier dvsIpNetworkRuleQualifier)
        {
            return (dvsIpNetworkRuleQualifier != null && ((this.SourceAddress == null && dvsIpNetworkRuleQualifier.SourceAddress == null) || (this.SourceAddress != null && this.SourceAddress.Equals(dvsIpNetworkRuleQualifier.SourceAddress))) && ((this.DestinationAddress == null && dvsIpNetworkRuleQualifier.DestinationAddress == null) || (this.DestinationAddress != null && this.DestinationAddress.Equals(dvsIpNetworkRuleQualifier.DestinationAddress))) && ((this.Protocol == null && dvsIpNetworkRuleQualifier.Protocol == null) || (this.Protocol != null && this.Protocol.Equals(dvsIpNetworkRuleQualifier.Protocol))) && ((this.SourceIpPort == null && dvsIpNetworkRuleQualifier.SourceIpPort == null) || (this.SourceIpPort != null && this.SourceIpPort.Equals(dvsIpNetworkRuleQualifier.SourceIpPort))) && ((this.DestinationIpPort == null && dvsIpNetworkRuleQualifier.DestinationIpPort == null) || (this.DestinationIpPort != null && this.DestinationIpPort.Equals(dvsIpNetworkRuleQualifier.DestinationIpPort))) && ((this.TcpFlags == null && dvsIpNetworkRuleQualifier.TcpFlags == null) || (this.TcpFlags != null && this.TcpFlags.Equals(dvsIpNetworkRuleQualifier.TcpFlags))));
        }

        public override bool Equals(object dvsIpNetworkRuleQualifier)
        {
            return Equals(dvsIpNetworkRuleQualifier as DvsIpNetworkRuleQualifier);
        }

        public override int GetHashCode()
        {
            return (SourceAddress + "_" + DestinationAddress + "_" + Protocol + "_" + SourceIpPort + "_" + DestinationIpPort + "_" + TcpFlags).GetHashCode();
        }
    }

    public class DvsIpPort : NegatableExpression, IEquatable<DvsIpPort>
    {
        public bool Equals(DvsIpPort dvsIpPort)
        {
            return (dvsIpPort != null && base.Equals(dvsIpPort));
        }

        public override bool Equals(object dvsIpPort)
        {
            return Equals(dvsIpPort as DvsIpPort);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsIpPortRange : DvsIpPort, IEquatable<DvsIpPortRange>
    {
        public int StartPortNumber { get; set; }

        public int EndPortNumber { get; set; }

        public bool Equals(DvsIpPortRange dvsIpPortRange)
        {
            return (dvsIpPortRange != null && this.StartPortNumber == dvsIpPortRange.StartPortNumber && this.EndPortNumber == dvsIpPortRange.EndPortNumber);
        }

        public override bool Equals(object dvsIpPortRange)
        {
            return Equals(dvsIpPortRange as DvsIpPortRange);
        }

        public override int GetHashCode()
        {
            return (StartPortNumber + "_" + EndPortNumber).GetHashCode();
        }
    }

    public class DvsLogNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsLogNetworkRuleAction>
    {
        public bool Equals(DvsLogNetworkRuleAction dvsLogNetworkRuleAction)
        {
            return (dvsLogNetworkRuleAction != null && base.Equals(dvsLogNetworkRuleAction));
        }

        public override bool Equals(object dvsLogNetworkRuleAction)
        {
            return Equals(dvsLogNetworkRuleAction as DvsLogNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVSMacLearningPolicy : InheritablePolicy, IEquatable<DVSMacLearningPolicy>
    {
        public bool Enabled { get; set; }

        public bool? AllowUnicastFlooding { get; set; }

        public int? Limit { get; set; }

        public string LimitPolicy { get; set; }

        public bool Equals(DVSMacLearningPolicy dVSMacLearningPolicy)
        {
            return (dVSMacLearningPolicy != null && this.Enabled == dVSMacLearningPolicy.Enabled && ((this.AllowUnicastFlooding == null && dVSMacLearningPolicy.AllowUnicastFlooding == null) || (this.AllowUnicastFlooding != null && this.AllowUnicastFlooding.Equals(dVSMacLearningPolicy.AllowUnicastFlooding))) && ((this.Limit == null && dVSMacLearningPolicy.Limit == null) || (this.Limit != null && this.Limit.Equals(dVSMacLearningPolicy.Limit))) && this.LimitPolicy == dVSMacLearningPolicy.LimitPolicy);
        }

        public override bool Equals(object dVSMacLearningPolicy)
        {
            return Equals(dVSMacLearningPolicy as DVSMacLearningPolicy);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + AllowUnicastFlooding + "_" + Limit + "_" + LimitPolicy).GetHashCode();
        }
    }

    public class DVSMacManagementPolicy : InheritablePolicy, IEquatable<DVSMacManagementPolicy>
    {
        public bool? AllowPromiscuous { get; set; }

        public bool? MacChanges { get; set; }

        public bool? ForgedTransmits { get; set; }

        public DVSMacLearningPolicy MacLearningPolicy { get; set; }

        public bool Equals(DVSMacManagementPolicy dVSMacManagementPolicy)
        {
            return (dVSMacManagementPolicy != null && ((this.AllowPromiscuous == null && dVSMacManagementPolicy.AllowPromiscuous == null) || (this.AllowPromiscuous != null && this.AllowPromiscuous.Equals(dVSMacManagementPolicy.AllowPromiscuous))) && ((this.MacChanges == null && dVSMacManagementPolicy.MacChanges == null) || (this.MacChanges != null && this.MacChanges.Equals(dVSMacManagementPolicy.MacChanges))) && ((this.ForgedTransmits == null && dVSMacManagementPolicy.ForgedTransmits == null) || (this.ForgedTransmits != null && this.ForgedTransmits.Equals(dVSMacManagementPolicy.ForgedTransmits))) && ((this.MacLearningPolicy == null && dVSMacManagementPolicy.MacLearningPolicy == null) || (this.MacLearningPolicy != null && this.MacLearningPolicy.Equals(dVSMacManagementPolicy.MacLearningPolicy))));
        }

        public override bool Equals(object dVSMacManagementPolicy)
        {
            return Equals(dVSMacManagementPolicy as DVSMacManagementPolicy);
        }

        public override int GetHashCode()
        {
            return (AllowPromiscuous + "_" + MacChanges + "_" + ForgedTransmits + "_" + MacLearningPolicy).GetHashCode();
        }
    }

    public class DvsMacNetworkRuleQualifier : DvsNetworkRuleQualifier, IEquatable<DvsMacNetworkRuleQualifier>
    {
        public MacAddress SourceAddress { get; set; }

        public MacAddress DestinationAddress { get; set; }

        public IntExpression Protocol { get; set; }

        public IntExpression VlanId { get; set; }

        public bool Equals(DvsMacNetworkRuleQualifier dvsMacNetworkRuleQualifier)
        {
            return (dvsMacNetworkRuleQualifier != null && ((this.SourceAddress == null && dvsMacNetworkRuleQualifier.SourceAddress == null) || (this.SourceAddress != null && this.SourceAddress.Equals(dvsMacNetworkRuleQualifier.SourceAddress))) && ((this.DestinationAddress == null && dvsMacNetworkRuleQualifier.DestinationAddress == null) || (this.DestinationAddress != null && this.DestinationAddress.Equals(dvsMacNetworkRuleQualifier.DestinationAddress))) && ((this.Protocol == null && dvsMacNetworkRuleQualifier.Protocol == null) || (this.Protocol != null && this.Protocol.Equals(dvsMacNetworkRuleQualifier.Protocol))) && ((this.VlanId == null && dvsMacNetworkRuleQualifier.VlanId == null) || (this.VlanId != null && this.VlanId.Equals(dvsMacNetworkRuleQualifier.VlanId))));
        }

        public override bool Equals(object dvsMacNetworkRuleQualifier)
        {
            return Equals(dvsMacNetworkRuleQualifier as DvsMacNetworkRuleQualifier);
        }

        public override int GetHashCode()
        {
            return (SourceAddress + "_" + DestinationAddress + "_" + Protocol + "_" + VlanId).GetHashCode();
        }
    }

    public class DvsMacRewriteNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsMacRewriteNetworkRuleAction>
    {
        public string RewriteMac { get; set; }

        public bool Equals(DvsMacRewriteNetworkRuleAction dvsMacRewriteNetworkRuleAction)
        {
            return (dvsMacRewriteNetworkRuleAction != null && this.RewriteMac == dvsMacRewriteNetworkRuleAction.RewriteMac);
        }

        public override bool Equals(object dvsMacRewriteNetworkRuleAction)
        {
            return Equals(dvsMacRewriteNetworkRuleAction as DvsMacRewriteNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return (RewriteMac).GetHashCode();
        }
    }

    public class DVSManagerDvsConfigTarget : DynamicData, IEquatable<DVSManagerDvsConfigTarget>
    {
        public DistributedVirtualPortgroupInfo[] DistributedVirtualPortgroup { get; set; }

        public DistributedVirtualSwitchInfo[] DistributedVirtualSwitch { get; set; }

        public bool Equals(DVSManagerDvsConfigTarget dVSManagerDvsConfigTarget)
        {
            return (dVSManagerDvsConfigTarget != null && ((this.DistributedVirtualPortgroup == null && dVSManagerDvsConfigTarget.DistributedVirtualPortgroup == null) || (this.DistributedVirtualPortgroup != null && dVSManagerDvsConfigTarget.DistributedVirtualPortgroup != null && Enumerable.SequenceEqual(this.DistributedVirtualPortgroup, dVSManagerDvsConfigTarget.DistributedVirtualPortgroup))) && ((this.DistributedVirtualSwitch == null && dVSManagerDvsConfigTarget.DistributedVirtualSwitch == null) || (this.DistributedVirtualSwitch != null && dVSManagerDvsConfigTarget.DistributedVirtualSwitch != null && Enumerable.SequenceEqual(this.DistributedVirtualSwitch, dVSManagerDvsConfigTarget.DistributedVirtualSwitch))));
        }

        public override bool Equals(object dVSManagerDvsConfigTarget)
        {
            return Equals(dVSManagerDvsConfigTarget as DVSManagerDvsConfigTarget);
        }

        public override int GetHashCode()
        {
            return (DistributedVirtualPortgroup + "_" + DistributedVirtualSwitch).GetHashCode();
        }
    }

    public class DvsMergedEvent : DvsEvent, IEquatable<DvsMergedEvent>
    {
        public DvsEventArgument SourceDvs { get; set; }

        public DvsEventArgument DestinationDvs { get; set; }

        public bool Equals(DvsMergedEvent dvsMergedEvent)
        {
            return (dvsMergedEvent != null && ((this.SourceDvs == null && dvsMergedEvent.SourceDvs == null) || (this.SourceDvs != null && this.SourceDvs.Equals(dvsMergedEvent.SourceDvs))) && ((this.DestinationDvs == null && dvsMergedEvent.DestinationDvs == null) || (this.DestinationDvs != null && this.DestinationDvs.Equals(dvsMergedEvent.DestinationDvs))));
        }

        public override bool Equals(object dvsMergedEvent)
        {
            return Equals(dvsMergedEvent as DvsMergedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceDvs + "_" + DestinationDvs).GetHashCode();
        }
    }

    public class DVSNameArrayUplinkPortPolicy : DVSUplinkPortPolicy, IEquatable<DVSNameArrayUplinkPortPolicy>
    {
        public string[] UplinkPortName { get; set; }

        public bool Equals(DVSNameArrayUplinkPortPolicy dVSNameArrayUplinkPortPolicy)
        {
            return (dVSNameArrayUplinkPortPolicy != null && ((this.UplinkPortName == null && dVSNameArrayUplinkPortPolicy.UplinkPortName == null) || (this.UplinkPortName != null && dVSNameArrayUplinkPortPolicy.UplinkPortName != null && Enumerable.SequenceEqual(this.UplinkPortName, dVSNameArrayUplinkPortPolicy.UplinkPortName))));
        }

        public override bool Equals(object dVSNameArrayUplinkPortPolicy)
        {
            return Equals(dVSNameArrayUplinkPortPolicy as DVSNameArrayUplinkPortPolicy);
        }

        public override int GetHashCode()
        {
            return (UplinkPortName).GetHashCode();
        }
    }

    public class DVSNetworkResourceManagementCapability : DynamicData, IEquatable<DVSNetworkResourceManagementCapability>
    {
        public bool NetworkResourceManagementSupported { get; set; }

        public int NetworkResourcePoolHighShareValue { get; set; }

        public bool QosSupported { get; set; }

        public bool UserDefinedNetworkResourcePoolsSupported { get; set; }

        public bool? NetworkResourceControlVersion3Supported { get; set; }

        public bool? UserDefinedInfraTrafficPoolSupported { get; set; }

        public bool Equals(DVSNetworkResourceManagementCapability dVSNetworkResourceManagementCapability)
        {
            return (dVSNetworkResourceManagementCapability != null && this.NetworkResourceManagementSupported == dVSNetworkResourceManagementCapability.NetworkResourceManagementSupported && this.NetworkResourcePoolHighShareValue == dVSNetworkResourceManagementCapability.NetworkResourcePoolHighShareValue && this.QosSupported == dVSNetworkResourceManagementCapability.QosSupported && this.UserDefinedNetworkResourcePoolsSupported == dVSNetworkResourceManagementCapability.UserDefinedNetworkResourcePoolsSupported && ((this.NetworkResourceControlVersion3Supported == null && dVSNetworkResourceManagementCapability.NetworkResourceControlVersion3Supported == null) || (this.NetworkResourceControlVersion3Supported != null && this.NetworkResourceControlVersion3Supported.Equals(dVSNetworkResourceManagementCapability.NetworkResourceControlVersion3Supported))) && ((this.UserDefinedInfraTrafficPoolSupported == null && dVSNetworkResourceManagementCapability.UserDefinedInfraTrafficPoolSupported == null) || (this.UserDefinedInfraTrafficPoolSupported != null && this.UserDefinedInfraTrafficPoolSupported.Equals(dVSNetworkResourceManagementCapability.UserDefinedInfraTrafficPoolSupported))));
        }

        public override bool Equals(object dVSNetworkResourceManagementCapability)
        {
            return Equals(dVSNetworkResourceManagementCapability as DVSNetworkResourceManagementCapability);
        }

        public override int GetHashCode()
        {
            return (NetworkResourceManagementSupported + "_" + NetworkResourcePoolHighShareValue + "_" + QosSupported + "_" + UserDefinedNetworkResourcePoolsSupported + "_" + NetworkResourceControlVersion3Supported + "_" + UserDefinedInfraTrafficPoolSupported).GetHashCode();
        }
    }

    public class DVSNetworkResourcePool : DynamicData, IEquatable<DVSNetworkResourcePool>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public string ConfigVersion { get; set; }

        public DVSNetworkResourcePoolAllocationInfo AllocationInfo { get; set; }

        public bool Equals(DVSNetworkResourcePool dVSNetworkResourcePool)
        {
            return (dVSNetworkResourcePool != null && this.Key == dVSNetworkResourcePool.Key && this.Name == dVSNetworkResourcePool.Name && this.Description == dVSNetworkResourcePool.Description && this.ConfigVersion == dVSNetworkResourcePool.ConfigVersion && ((this.AllocationInfo == null && dVSNetworkResourcePool.AllocationInfo == null) || (this.AllocationInfo != null && this.AllocationInfo.Equals(dVSNetworkResourcePool.AllocationInfo))));
        }

        public override bool Equals(object dVSNetworkResourcePool)
        {
            return Equals(dVSNetworkResourcePool as DVSNetworkResourcePool);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Description + "_" + ConfigVersion + "_" + AllocationInfo).GetHashCode();
        }
    }

    public class DVSNetworkResourcePoolAllocationInfo : DynamicData, IEquatable<DVSNetworkResourcePoolAllocationInfo>
    {
        public long? Limit { get; set; }

        public SharesInfo Shares { get; set; }

        public int? PriorityTag { get; set; }

        public bool Equals(DVSNetworkResourcePoolAllocationInfo dVSNetworkResourcePoolAllocationInfo)
        {
            return (dVSNetworkResourcePoolAllocationInfo != null && ((this.Limit == null && dVSNetworkResourcePoolAllocationInfo.Limit == null) || (this.Limit != null && this.Limit.Equals(dVSNetworkResourcePoolAllocationInfo.Limit))) && ((this.Shares == null && dVSNetworkResourcePoolAllocationInfo.Shares == null) || (this.Shares != null && this.Shares.Equals(dVSNetworkResourcePoolAllocationInfo.Shares))) && ((this.PriorityTag == null && dVSNetworkResourcePoolAllocationInfo.PriorityTag == null) || (this.PriorityTag != null && this.PriorityTag.Equals(dVSNetworkResourcePoolAllocationInfo.PriorityTag))));
        }

        public override bool Equals(object dVSNetworkResourcePoolAllocationInfo)
        {
            return Equals(dVSNetworkResourcePoolAllocationInfo as DVSNetworkResourcePoolAllocationInfo);
        }

        public override int GetHashCode()
        {
            return (Limit + "_" + Shares + "_" + PriorityTag).GetHashCode();
        }
    }

    public class DVSNetworkResourcePoolConfigSpec : DynamicData, IEquatable<DVSNetworkResourcePoolConfigSpec>
    {
        public string Key { get; set; }

        public string ConfigVersion { get; set; }

        public DVSNetworkResourcePoolAllocationInfo AllocationInfo { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public bool Equals(DVSNetworkResourcePoolConfigSpec dVSNetworkResourcePoolConfigSpec)
        {
            return (dVSNetworkResourcePoolConfigSpec != null && this.Key == dVSNetworkResourcePoolConfigSpec.Key && this.ConfigVersion == dVSNetworkResourcePoolConfigSpec.ConfigVersion && ((this.AllocationInfo == null && dVSNetworkResourcePoolConfigSpec.AllocationInfo == null) || (this.AllocationInfo != null && this.AllocationInfo.Equals(dVSNetworkResourcePoolConfigSpec.AllocationInfo))) && this.Name == dVSNetworkResourcePoolConfigSpec.Name && this.Description == dVSNetworkResourcePoolConfigSpec.Description);
        }

        public override bool Equals(object dVSNetworkResourcePoolConfigSpec)
        {
            return Equals(dVSNetworkResourcePoolConfigSpec as DVSNetworkResourcePoolConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ConfigVersion + "_" + AllocationInfo + "_" + Name + "_" + Description).GetHashCode();
        }
    }

    public class DvsNetworkRuleAction : DynamicData, IEquatable<DvsNetworkRuleAction>
    {
        public bool Equals(DvsNetworkRuleAction dvsNetworkRuleAction)
        {
            return (dvsNetworkRuleAction != null && base.Equals(dvsNetworkRuleAction));
        }

        public override bool Equals(object dvsNetworkRuleAction)
        {
            return Equals(dvsNetworkRuleAction as DvsNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsNetworkRuleQualifier : DynamicData, IEquatable<DvsNetworkRuleQualifier>
    {
        public string Key { get; set; }

        public bool Equals(DvsNetworkRuleQualifier dvsNetworkRuleQualifier)
        {
            return (dvsNetworkRuleQualifier != null && this.Key == dvsNetworkRuleQualifier.Key);
        }

        public override bool Equals(object dvsNetworkRuleQualifier)
        {
            return Equals(dvsNetworkRuleQualifier as DvsNetworkRuleQualifier);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class DvsNotAuthorized : DvsFault, IEquatable<DvsNotAuthorized>
    {
        public string SessionExtensionKey { get; set; }

        public string DvsExtensionKey { get; set; }

        public bool Equals(DvsNotAuthorized dvsNotAuthorized)
        {
            return (dvsNotAuthorized != null && this.SessionExtensionKey == dvsNotAuthorized.SessionExtensionKey && this.DvsExtensionKey == dvsNotAuthorized.DvsExtensionKey);
        }

        public override bool Equals(object dvsNotAuthorized)
        {
            return Equals(dvsNotAuthorized as DvsNotAuthorized);
        }

        public override int GetHashCode()
        {
            return (SessionExtensionKey + "_" + DvsExtensionKey).GetHashCode();
        }
    }

    public class DvsOperationBulkFault : DvsFault, IEquatable<DvsOperationBulkFault>
    {
        public DvsOperationBulkFaultFaultOnHost[] HostFault { get; set; }

        public bool Equals(DvsOperationBulkFault dvsOperationBulkFault)
        {
            return (dvsOperationBulkFault != null && ((this.HostFault == null && dvsOperationBulkFault.HostFault == null) || (this.HostFault != null && dvsOperationBulkFault.HostFault != null && Enumerable.SequenceEqual(this.HostFault, dvsOperationBulkFault.HostFault))));
        }

        public override bool Equals(object dvsOperationBulkFault)
        {
            return Equals(dvsOperationBulkFault as DvsOperationBulkFault);
        }

        public override int GetHashCode()
        {
            return (HostFault).GetHashCode();
        }
    }

    public class DvsOperationBulkFaultFaultOnHost : DynamicData, IEquatable<DvsOperationBulkFaultFaultOnHost>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public DvsOperationBulkFaultFaultOnHost_LinkedView LinkedView { get; set; }

        public bool Equals(DvsOperationBulkFaultFaultOnHost dvsOperationBulkFaultFaultOnHost)
        {
            return (dvsOperationBulkFaultFaultOnHost != null && ((this.Host == null && dvsOperationBulkFaultFaultOnHost.Host == null) || (this.Host != null && this.Host.Equals(dvsOperationBulkFaultFaultOnHost.Host))) && ((this.Fault == null && dvsOperationBulkFaultFaultOnHost.Fault == null) || (this.Fault != null && this.Fault.Equals(dvsOperationBulkFaultFaultOnHost.Fault))) && ((this.LinkedView == null && dvsOperationBulkFaultFaultOnHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dvsOperationBulkFaultFaultOnHost.LinkedView))));
        }

        public override bool Equals(object dvsOperationBulkFaultFaultOnHost)
        {
            return Equals(dvsOperationBulkFaultFaultOnHost as DvsOperationBulkFaultFaultOnHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class DvsOperationBulkFaultFaultOnHost_LinkedView : IEquatable<DvsOperationBulkFaultFaultOnHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(DvsOperationBulkFaultFaultOnHost_LinkedView dvsOperationBulkFaultFaultOnHost_LinkedView)
        {
            return (dvsOperationBulkFaultFaultOnHost_LinkedView != null && ((this.Host == null && dvsOperationBulkFaultFaultOnHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(dvsOperationBulkFaultFaultOnHost_LinkedView.Host))));
        }

        public override bool Equals(object dvsOperationBulkFaultFaultOnHost_LinkedView)
        {
            return Equals(dvsOperationBulkFaultFaultOnHost_LinkedView as DvsOperationBulkFaultFaultOnHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class DvsOutOfSyncHostArgument : DynamicData, IEquatable<DvsOutOfSyncHostArgument>
    {
        public HostEventArgument OutOfSyncHost { get; set; }

        public string[] ConfigParamters { get; set; }

        public bool Equals(DvsOutOfSyncHostArgument dvsOutOfSyncHostArgument)
        {
            return (dvsOutOfSyncHostArgument != null && ((this.OutOfSyncHost == null && dvsOutOfSyncHostArgument.OutOfSyncHost == null) || (this.OutOfSyncHost != null && this.OutOfSyncHost.Equals(dvsOutOfSyncHostArgument.OutOfSyncHost))) && ((this.ConfigParamters == null && dvsOutOfSyncHostArgument.ConfigParamters == null) || (this.ConfigParamters != null && dvsOutOfSyncHostArgument.ConfigParamters != null && Enumerable.SequenceEqual(this.ConfigParamters, dvsOutOfSyncHostArgument.ConfigParamters))));
        }

        public override bool Equals(object dvsOutOfSyncHostArgument)
        {
            return Equals(dvsOutOfSyncHostArgument as DvsOutOfSyncHostArgument);
        }

        public override int GetHashCode()
        {
            return (OutOfSyncHost + "_" + ConfigParamters).GetHashCode();
        }
    }

    public class DVSPolicy : DynamicData, IEquatable<DVSPolicy>
    {
        public bool? AutoPreInstallAllowed { get; set; }

        public bool? AutoUpgradeAllowed { get; set; }

        public bool? PartialUpgradeAllowed { get; set; }

        public bool Equals(DVSPolicy dVSPolicy)
        {
            return (dVSPolicy != null && ((this.AutoPreInstallAllowed == null && dVSPolicy.AutoPreInstallAllowed == null) || (this.AutoPreInstallAllowed != null && this.AutoPreInstallAllowed.Equals(dVSPolicy.AutoPreInstallAllowed))) && ((this.AutoUpgradeAllowed == null && dVSPolicy.AutoUpgradeAllowed == null) || (this.AutoUpgradeAllowed != null && this.AutoUpgradeAllowed.Equals(dVSPolicy.AutoUpgradeAllowed))) && ((this.PartialUpgradeAllowed == null && dVSPolicy.PartialUpgradeAllowed == null) || (this.PartialUpgradeAllowed != null && this.PartialUpgradeAllowed.Equals(dVSPolicy.PartialUpgradeAllowed))));
        }

        public override bool Equals(object dVSPolicy)
        {
            return Equals(dVSPolicy as DVSPolicy);
        }

        public override int GetHashCode()
        {
            return (AutoPreInstallAllowed + "_" + AutoUpgradeAllowed + "_" + PartialUpgradeAllowed).GetHashCode();
        }
    }

    public class DvsPortBlockedEvent : DvsEvent, IEquatable<DvsPortBlockedEvent>
    {
        public string PortKey { get; set; }

        public string StatusDetail { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public string PrevBlockState { get; set; }

        public bool Equals(DvsPortBlockedEvent dvsPortBlockedEvent)
        {
            return (dvsPortBlockedEvent != null && this.PortKey == dvsPortBlockedEvent.PortKey && this.StatusDetail == dvsPortBlockedEvent.StatusDetail && ((this.RuntimeInfo == null && dvsPortBlockedEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortBlockedEvent.RuntimeInfo))) && this.PrevBlockState == dvsPortBlockedEvent.PrevBlockState);
        }

        public override bool Equals(object dvsPortBlockedEvent)
        {
            return Equals(dvsPortBlockedEvent as DvsPortBlockedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + StatusDetail + "_" + RuntimeInfo + "_" + PrevBlockState).GetHashCode();
        }
    }

    public class DvsPortConnectedEvent : DvsEvent, IEquatable<DvsPortConnectedEvent>
    {
        public string PortKey { get; set; }

        public DistributedVirtualSwitchPortConnectee Connectee { get; set; }

        public bool Equals(DvsPortConnectedEvent dvsPortConnectedEvent)
        {
            return (dvsPortConnectedEvent != null && this.PortKey == dvsPortConnectedEvent.PortKey && ((this.Connectee == null && dvsPortConnectedEvent.Connectee == null) || (this.Connectee != null && this.Connectee.Equals(dvsPortConnectedEvent.Connectee))));
        }

        public override bool Equals(object dvsPortConnectedEvent)
        {
            return Equals(dvsPortConnectedEvent as DvsPortConnectedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + Connectee).GetHashCode();
        }
    }

    public class DvsPortCreatedEvent : DvsEvent, IEquatable<DvsPortCreatedEvent>
    {
        public string[] PortKey { get; set; }

        public bool Equals(DvsPortCreatedEvent dvsPortCreatedEvent)
        {
            return (dvsPortCreatedEvent != null && ((this.PortKey == null && dvsPortCreatedEvent.PortKey == null) || (this.PortKey != null && dvsPortCreatedEvent.PortKey != null && Enumerable.SequenceEqual(this.PortKey, dvsPortCreatedEvent.PortKey))));
        }

        public override bool Equals(object dvsPortCreatedEvent)
        {
            return Equals(dvsPortCreatedEvent as DvsPortCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey).GetHashCode();
        }
    }

    public class DvsPortDeletedEvent : DvsEvent, IEquatable<DvsPortDeletedEvent>
    {
        public string[] PortKey { get; set; }

        public bool Equals(DvsPortDeletedEvent dvsPortDeletedEvent)
        {
            return (dvsPortDeletedEvent != null && ((this.PortKey == null && dvsPortDeletedEvent.PortKey == null) || (this.PortKey != null && dvsPortDeletedEvent.PortKey != null && Enumerable.SequenceEqual(this.PortKey, dvsPortDeletedEvent.PortKey))));
        }

        public override bool Equals(object dvsPortDeletedEvent)
        {
            return Equals(dvsPortDeletedEvent as DvsPortDeletedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey).GetHashCode();
        }
    }

    public class DvsPortDisconnectedEvent : DvsEvent, IEquatable<DvsPortDisconnectedEvent>
    {
        public string PortKey { get; set; }

        public DistributedVirtualSwitchPortConnectee Connectee { get; set; }

        public bool Equals(DvsPortDisconnectedEvent dvsPortDisconnectedEvent)
        {
            return (dvsPortDisconnectedEvent != null && this.PortKey == dvsPortDisconnectedEvent.PortKey && ((this.Connectee == null && dvsPortDisconnectedEvent.Connectee == null) || (this.Connectee != null && this.Connectee.Equals(dvsPortDisconnectedEvent.Connectee))));
        }

        public override bool Equals(object dvsPortDisconnectedEvent)
        {
            return Equals(dvsPortDisconnectedEvent as DvsPortDisconnectedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + Connectee).GetHashCode();
        }
    }

    public class DvsPortEnteredPassthruEvent : DvsEvent, IEquatable<DvsPortEnteredPassthruEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public bool Equals(DvsPortEnteredPassthruEvent dvsPortEnteredPassthruEvent)
        {
            return (dvsPortEnteredPassthruEvent != null && this.PortKey == dvsPortEnteredPassthruEvent.PortKey && ((this.RuntimeInfo == null && dvsPortEnteredPassthruEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortEnteredPassthruEvent.RuntimeInfo))));
        }

        public override bool Equals(object dvsPortEnteredPassthruEvent)
        {
            return Equals(dvsPortEnteredPassthruEvent as DvsPortEnteredPassthruEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo).GetHashCode();
        }
    }

    public class DvsPortExitedPassthruEvent : DvsEvent, IEquatable<DvsPortExitedPassthruEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public bool Equals(DvsPortExitedPassthruEvent dvsPortExitedPassthruEvent)
        {
            return (dvsPortExitedPassthruEvent != null && this.PortKey == dvsPortExitedPassthruEvent.PortKey && ((this.RuntimeInfo == null && dvsPortExitedPassthruEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortExitedPassthruEvent.RuntimeInfo))));
        }

        public override bool Equals(object dvsPortExitedPassthruEvent)
        {
            return Equals(dvsPortExitedPassthruEvent as DvsPortExitedPassthruEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo).GetHashCode();
        }
    }

    public class DvsPortJoinPortgroupEvent : DvsEvent, IEquatable<DvsPortJoinPortgroupEvent>
    {
        public string PortKey { get; set; }

        public string PortgroupKey { get; set; }

        public string PortgroupName { get; set; }

        public bool Equals(DvsPortJoinPortgroupEvent dvsPortJoinPortgroupEvent)
        {
            return (dvsPortJoinPortgroupEvent != null && this.PortKey == dvsPortJoinPortgroupEvent.PortKey && this.PortgroupKey == dvsPortJoinPortgroupEvent.PortgroupKey && this.PortgroupName == dvsPortJoinPortgroupEvent.PortgroupName);
        }

        public override bool Equals(object dvsPortJoinPortgroupEvent)
        {
            return Equals(dvsPortJoinPortgroupEvent as DvsPortJoinPortgroupEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + PortgroupKey + "_" + PortgroupName).GetHashCode();
        }
    }

    public class DvsPortLeavePortgroupEvent : DvsEvent, IEquatable<DvsPortLeavePortgroupEvent>
    {
        public string PortKey { get; set; }

        public string PortgroupKey { get; set; }

        public string PortgroupName { get; set; }

        public bool Equals(DvsPortLeavePortgroupEvent dvsPortLeavePortgroupEvent)
        {
            return (dvsPortLeavePortgroupEvent != null && this.PortKey == dvsPortLeavePortgroupEvent.PortKey && this.PortgroupKey == dvsPortLeavePortgroupEvent.PortgroupKey && this.PortgroupName == dvsPortLeavePortgroupEvent.PortgroupName);
        }

        public override bool Equals(object dvsPortLeavePortgroupEvent)
        {
            return Equals(dvsPortLeavePortgroupEvent as DvsPortLeavePortgroupEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + PortgroupKey + "_" + PortgroupName).GetHashCode();
        }
    }

    public class DvsPortLinkDownEvent : DvsEvent, IEquatable<DvsPortLinkDownEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public bool Equals(DvsPortLinkDownEvent dvsPortLinkDownEvent)
        {
            return (dvsPortLinkDownEvent != null && this.PortKey == dvsPortLinkDownEvent.PortKey && ((this.RuntimeInfo == null && dvsPortLinkDownEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortLinkDownEvent.RuntimeInfo))));
        }

        public override bool Equals(object dvsPortLinkDownEvent)
        {
            return Equals(dvsPortLinkDownEvent as DvsPortLinkDownEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo).GetHashCode();
        }
    }

    public class DvsPortLinkUpEvent : DvsEvent, IEquatable<DvsPortLinkUpEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public bool Equals(DvsPortLinkUpEvent dvsPortLinkUpEvent)
        {
            return (dvsPortLinkUpEvent != null && this.PortKey == dvsPortLinkUpEvent.PortKey && ((this.RuntimeInfo == null && dvsPortLinkUpEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortLinkUpEvent.RuntimeInfo))));
        }

        public override bool Equals(object dvsPortLinkUpEvent)
        {
            return Equals(dvsPortLinkUpEvent as DvsPortLinkUpEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo).GetHashCode();
        }
    }

    public class DvsPortReconfiguredEvent : DvsEvent, IEquatable<DvsPortReconfiguredEvent>
    {
        public string[] PortKey { get; set; }

        public ChangesInfoEventArgument[] ConfigChanges { get; set; }

        public bool Equals(DvsPortReconfiguredEvent dvsPortReconfiguredEvent)
        {
            return (dvsPortReconfiguredEvent != null && ((this.PortKey == null && dvsPortReconfiguredEvent.PortKey == null) || (this.PortKey != null && dvsPortReconfiguredEvent.PortKey != null && Enumerable.SequenceEqual(this.PortKey, dvsPortReconfiguredEvent.PortKey))) && ((this.ConfigChanges == null && dvsPortReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && dvsPortReconfiguredEvent.ConfigChanges != null && Enumerable.SequenceEqual(this.ConfigChanges, dvsPortReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object dvsPortReconfiguredEvent)
        {
            return Equals(dvsPortReconfiguredEvent as DvsPortReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + ConfigChanges).GetHashCode();
        }
    }

    public class DvsPortRuntimeChangeEvent : DvsEvent, IEquatable<DvsPortRuntimeChangeEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public bool Equals(DvsPortRuntimeChangeEvent dvsPortRuntimeChangeEvent)
        {
            return (dvsPortRuntimeChangeEvent != null && this.PortKey == dvsPortRuntimeChangeEvent.PortKey && ((this.RuntimeInfo == null && dvsPortRuntimeChangeEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortRuntimeChangeEvent.RuntimeInfo))));
        }

        public override bool Equals(object dvsPortRuntimeChangeEvent)
        {
            return Equals(dvsPortRuntimeChangeEvent as DvsPortRuntimeChangeEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo).GetHashCode();
        }
    }

    public class DvsPortUnblockedEvent : DvsEvent, IEquatable<DvsPortUnblockedEvent>
    {
        public string PortKey { get; set; }

        public DVPortStatus RuntimeInfo { get; set; }

        public string PrevBlockState { get; set; }

        public bool Equals(DvsPortUnblockedEvent dvsPortUnblockedEvent)
        {
            return (dvsPortUnblockedEvent != null && this.PortKey == dvsPortUnblockedEvent.PortKey && ((this.RuntimeInfo == null && dvsPortUnblockedEvent.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(dvsPortUnblockedEvent.RuntimeInfo))) && this.PrevBlockState == dvsPortUnblockedEvent.PrevBlockState);
        }

        public override bool Equals(object dvsPortUnblockedEvent)
        {
            return Equals(dvsPortUnblockedEvent as DvsPortUnblockedEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + RuntimeInfo + "_" + PrevBlockState).GetHashCode();
        }
    }

    public class DvsPortVendorSpecificStateChangeEvent : DvsEvent, IEquatable<DvsPortVendorSpecificStateChangeEvent>
    {
        public string PortKey { get; set; }

        public bool Equals(DvsPortVendorSpecificStateChangeEvent dvsPortVendorSpecificStateChangeEvent)
        {
            return (dvsPortVendorSpecificStateChangeEvent != null && this.PortKey == dvsPortVendorSpecificStateChangeEvent.PortKey);
        }

        public override bool Equals(object dvsPortVendorSpecificStateChangeEvent)
        {
            return Equals(dvsPortVendorSpecificStateChangeEvent as DvsPortVendorSpecificStateChangeEvent);
        }

        public override int GetHashCode()
        {
            return (PortKey).GetHashCode();
        }
    }

    public class DvsProfile : ApplyProfile, IEquatable<DvsProfile>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public PnicUplinkProfile[] Uplink { get; set; }

        public bool Equals(DvsProfile dvsProfile)
        {
            return (dvsProfile != null && this.Key == dvsProfile.Key && this.Name == dvsProfile.Name && ((this.Uplink == null && dvsProfile.Uplink == null) || (this.Uplink != null && dvsProfile.Uplink != null && Enumerable.SequenceEqual(this.Uplink, dvsProfile.Uplink))));
        }

        public override bool Equals(object dvsProfile)
        {
            return Equals(dvsProfile as DvsProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Uplink).GetHashCode();
        }
    }

    public class DvsPuntNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsPuntNetworkRuleAction>
    {
        public bool Equals(DvsPuntNetworkRuleAction dvsPuntNetworkRuleAction)
        {
            return (dvsPuntNetworkRuleAction != null && base.Equals(dvsPuntNetworkRuleAction));
        }

        public override bool Equals(object dvsPuntNetworkRuleAction)
        {
            return Equals(dvsPuntNetworkRuleAction as DvsPuntNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsRateLimitNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsRateLimitNetworkRuleAction>
    {
        public int PacketsPerSecond { get; set; }

        public bool Equals(DvsRateLimitNetworkRuleAction dvsRateLimitNetworkRuleAction)
        {
            return (dvsRateLimitNetworkRuleAction != null && this.PacketsPerSecond == dvsRateLimitNetworkRuleAction.PacketsPerSecond);
        }

        public override bool Equals(object dvsRateLimitNetworkRuleAction)
        {
            return Equals(dvsRateLimitNetworkRuleAction as DvsRateLimitNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return (PacketsPerSecond).GetHashCode();
        }
    }

    public class DvsReconfiguredEvent : DvsEvent, IEquatable<DvsReconfiguredEvent>
    {
        public DVSConfigSpec ConfigSpec { get; set; }

        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(DvsReconfiguredEvent dvsReconfiguredEvent)
        {
            return (dvsReconfiguredEvent != null && ((this.ConfigSpec == null && dvsReconfiguredEvent.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(dvsReconfiguredEvent.ConfigSpec))) && ((this.ConfigChanges == null && dvsReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(dvsReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object dvsReconfiguredEvent)
        {
            return Equals(dvsReconfiguredEvent as DvsReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + ConfigChanges).GetHashCode();
        }
    }

    public class DvsRenamedEvent : DvsEvent, IEquatable<DvsRenamedEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(DvsRenamedEvent dvsRenamedEvent)
        {
            return (dvsRenamedEvent != null && this.OldName == dvsRenamedEvent.OldName && this.NewName == dvsRenamedEvent.NewName);
        }

        public override bool Equals(object dvsRenamedEvent)
        {
            return Equals(dvsRenamedEvent as DvsRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class DvsResourceRuntimeInfo : DynamicData, IEquatable<DvsResourceRuntimeInfo>
    {
        public int? Capacity { get; set; }

        public int? Usage { get; set; }

        public int? Available { get; set; }

        public DvsVnicAllocatedResource[] AllocatedResource { get; set; }

        public DvsVmVnicNetworkResourcePoolRuntimeInfo[] VmVnicNetworkResourcePoolRuntime { get; set; }

        public bool Equals(DvsResourceRuntimeInfo dvsResourceRuntimeInfo)
        {
            return (dvsResourceRuntimeInfo != null && ((this.Capacity == null && dvsResourceRuntimeInfo.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(dvsResourceRuntimeInfo.Capacity))) && ((this.Usage == null && dvsResourceRuntimeInfo.Usage == null) || (this.Usage != null && this.Usage.Equals(dvsResourceRuntimeInfo.Usage))) && ((this.Available == null && dvsResourceRuntimeInfo.Available == null) || (this.Available != null && this.Available.Equals(dvsResourceRuntimeInfo.Available))) && ((this.AllocatedResource == null && dvsResourceRuntimeInfo.AllocatedResource == null) || (this.AllocatedResource != null && dvsResourceRuntimeInfo.AllocatedResource != null && Enumerable.SequenceEqual(this.AllocatedResource, dvsResourceRuntimeInfo.AllocatedResource))) && ((this.VmVnicNetworkResourcePoolRuntime == null && dvsResourceRuntimeInfo.VmVnicNetworkResourcePoolRuntime == null) || (this.VmVnicNetworkResourcePoolRuntime != null && dvsResourceRuntimeInfo.VmVnicNetworkResourcePoolRuntime != null && Enumerable.SequenceEqual(this.VmVnicNetworkResourcePoolRuntime, dvsResourceRuntimeInfo.VmVnicNetworkResourcePoolRuntime))));
        }

        public override bool Equals(object dvsResourceRuntimeInfo)
        {
            return Equals(dvsResourceRuntimeInfo as DvsResourceRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (Capacity + "_" + Usage + "_" + Available + "_" + AllocatedResource + "_" + VmVnicNetworkResourcePoolRuntime).GetHashCode();
        }
    }

    public class DvsRestoreEvent : DvsEvent, IEquatable<DvsRestoreEvent>
    {
        public bool Equals(DvsRestoreEvent dvsRestoreEvent)
        {
            return (dvsRestoreEvent != null && base.Equals(dvsRestoreEvent));
        }

        public override bool Equals(object dvsRestoreEvent)
        {
            return Equals(dvsRestoreEvent as DvsRestoreEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVSRollbackCapability : DynamicData, IEquatable<DVSRollbackCapability>
    {
        public bool RollbackSupported { get; set; }

        public bool Equals(DVSRollbackCapability dVSRollbackCapability)
        {
            return (dVSRollbackCapability != null && this.RollbackSupported == dVSRollbackCapability.RollbackSupported);
        }

        public override bool Equals(object dVSRollbackCapability)
        {
            return Equals(dVSRollbackCapability as DVSRollbackCapability);
        }

        public override int GetHashCode()
        {
            return (RollbackSupported).GetHashCode();
        }
    }

    public class DVSRuntimeInfo : DynamicData, IEquatable<DVSRuntimeInfo>
    {
        public HostMemberRuntimeInfo[] HostMemberRuntime { get; set; }

        public DvsResourceRuntimeInfo ResourceRuntimeInfo { get; set; }

        public bool Equals(DVSRuntimeInfo dVSRuntimeInfo)
        {
            return (dVSRuntimeInfo != null && ((this.HostMemberRuntime == null && dVSRuntimeInfo.HostMemberRuntime == null) || (this.HostMemberRuntime != null && dVSRuntimeInfo.HostMemberRuntime != null && Enumerable.SequenceEqual(this.HostMemberRuntime, dVSRuntimeInfo.HostMemberRuntime))) && ((this.ResourceRuntimeInfo == null && dVSRuntimeInfo.ResourceRuntimeInfo == null) || (this.ResourceRuntimeInfo != null && this.ResourceRuntimeInfo.Equals(dVSRuntimeInfo.ResourceRuntimeInfo))));
        }

        public override bool Equals(object dVSRuntimeInfo)
        {
            return Equals(dVSRuntimeInfo as DVSRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (HostMemberRuntime + "_" + ResourceRuntimeInfo).GetHashCode();
        }
    }

    public class DvsScopeViolated : DvsFault, IEquatable<DvsScopeViolated>
    {
        public ManagedObjectReference[] Scope { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public DvsScopeViolated_LinkedView LinkedView { get; set; }

        public bool Equals(DvsScopeViolated dvsScopeViolated)
        {
            return (dvsScopeViolated != null && ((this.Scope == null && dvsScopeViolated.Scope == null) || (this.Scope != null && dvsScopeViolated.Scope != null && Enumerable.SequenceEqual(this.Scope, dvsScopeViolated.Scope))) && ((this.Entity == null && dvsScopeViolated.Entity == null) || (this.Entity != null && this.Entity.Equals(dvsScopeViolated.Entity))) && ((this.LinkedView == null && dvsScopeViolated.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dvsScopeViolated.LinkedView))));
        }

        public override bool Equals(object dvsScopeViolated)
        {
            return Equals(dvsScopeViolated as DvsScopeViolated);
        }

        public override int GetHashCode()
        {
            return (Scope + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class DvsScopeViolated_LinkedView : IEquatable<DvsScopeViolated_LinkedView>
    {
        public ManagedEntity[] Scope { get; set; }

        public ManagedEntity Entity { get; set; }

        public bool Equals(DvsScopeViolated_LinkedView dvsScopeViolated_LinkedView)
        {
            return (dvsScopeViolated_LinkedView != null && ((this.Scope == null && dvsScopeViolated_LinkedView.Scope == null) || (this.Scope != null && dvsScopeViolated_LinkedView.Scope != null && Enumerable.SequenceEqual(this.Scope, dvsScopeViolated_LinkedView.Scope))) && ((this.Entity == null && dvsScopeViolated_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(dvsScopeViolated_LinkedView.Entity))));
        }

        public override bool Equals(object dvsScopeViolated_LinkedView)
        {
            return Equals(dvsScopeViolated_LinkedView as DvsScopeViolated_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Scope + "_" + Entity).GetHashCode();
        }
    }

    public class DVSSecurityPolicy : InheritablePolicy, IEquatable<DVSSecurityPolicy>
    {
        public BoolPolicy AllowPromiscuous { get; set; }

        public BoolPolicy MacChanges { get; set; }

        public BoolPolicy ForgedTransmits { get; set; }

        public bool Equals(DVSSecurityPolicy dVSSecurityPolicy)
        {
            return (dVSSecurityPolicy != null && ((this.AllowPromiscuous == null && dVSSecurityPolicy.AllowPromiscuous == null) || (this.AllowPromiscuous != null && this.AllowPromiscuous.Equals(dVSSecurityPolicy.AllowPromiscuous))) && ((this.MacChanges == null && dVSSecurityPolicy.MacChanges == null) || (this.MacChanges != null && this.MacChanges.Equals(dVSSecurityPolicy.MacChanges))) && ((this.ForgedTransmits == null && dVSSecurityPolicy.ForgedTransmits == null) || (this.ForgedTransmits != null && this.ForgedTransmits.Equals(dVSSecurityPolicy.ForgedTransmits))));
        }

        public override bool Equals(object dVSSecurityPolicy)
        {
            return Equals(dVSSecurityPolicy as DVSSecurityPolicy);
        }

        public override int GetHashCode()
        {
            return (AllowPromiscuous + "_" + MacChanges + "_" + ForgedTransmits).GetHashCode();
        }
    }

    public class DVSSelection : SelectionSet, IEquatable<DVSSelection>
    {
        public string DvsUuid { get; set; }

        public bool Equals(DVSSelection dVSSelection)
        {
            return (dVSSelection != null && this.DvsUuid == dVSSelection.DvsUuid);
        }

        public override bool Equals(object dVSSelection)
        {
            return Equals(dVSSelection as DVSSelection);
        }

        public override int GetHashCode()
        {
            return (DvsUuid).GetHashCode();
        }
    }

    public class DvsServiceConsoleVNicProfile : DvsVNicProfile, IEquatable<DvsServiceConsoleVNicProfile>
    {
        public bool Equals(DvsServiceConsoleVNicProfile dvsServiceConsoleVNicProfile)
        {
            return (dvsServiceConsoleVNicProfile != null && base.Equals(dvsServiceConsoleVNicProfile));
        }

        public override bool Equals(object dvsServiceConsoleVNicProfile)
        {
            return Equals(dvsServiceConsoleVNicProfile as DvsServiceConsoleVNicProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DvsSingleIpPort : DvsIpPort, IEquatable<DvsSingleIpPort>
    {
        public int PortNumber { get; set; }

        public bool Equals(DvsSingleIpPort dvsSingleIpPort)
        {
            return (dvsSingleIpPort != null && this.PortNumber == dvsSingleIpPort.PortNumber);
        }

        public override bool Equals(object dvsSingleIpPort)
        {
            return Equals(dvsSingleIpPort as DvsSingleIpPort);
        }

        public override int GetHashCode()
        {
            return (PortNumber).GetHashCode();
        }
    }

    public class DVSSummary : DynamicData, IEquatable<DVSSummary>
    {
        public string Name { get; set; }

        public string Uuid { get; set; }

        public int NumPorts { get; set; }

        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public ManagedObjectReference[] HostMember { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public string[] PortgroupName { get; set; }

        public string Description { get; set; }

        public DVSContactInfo Contact { get; set; }

        public int? NumHosts { get; set; }

        public DVSSummary_LinkedView LinkedView { get; set; }

        public bool Equals(DVSSummary dVSSummary)
        {
            return (dVSSummary != null && this.Name == dVSSummary.Name && this.Uuid == dVSSummary.Uuid && this.NumPorts == dVSSummary.NumPorts && ((this.ProductInfo == null && dVSSummary.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dVSSummary.ProductInfo))) && ((this.HostMember == null && dVSSummary.HostMember == null) || (this.HostMember != null && dVSSummary.HostMember != null && Enumerable.SequenceEqual(this.HostMember, dVSSummary.HostMember))) && ((this.Vm == null && dVSSummary.Vm == null) || (this.Vm != null && dVSSummary.Vm != null && Enumerable.SequenceEqual(this.Vm, dVSSummary.Vm))) && ((this.Host == null && dVSSummary.Host == null) || (this.Host != null && dVSSummary.Host != null && Enumerable.SequenceEqual(this.Host, dVSSummary.Host))) && ((this.PortgroupName == null && dVSSummary.PortgroupName == null) || (this.PortgroupName != null && dVSSummary.PortgroupName != null && Enumerable.SequenceEqual(this.PortgroupName, dVSSummary.PortgroupName))) && this.Description == dVSSummary.Description && ((this.Contact == null && dVSSummary.Contact == null) || (this.Contact != null && this.Contact.Equals(dVSSummary.Contact))) && ((this.NumHosts == null && dVSSummary.NumHosts == null) || (this.NumHosts != null && this.NumHosts.Equals(dVSSummary.NumHosts))) && ((this.LinkedView == null && dVSSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dVSSummary.LinkedView))));
        }

        public override bool Equals(object dVSSummary)
        {
            return Equals(dVSSummary as DVSSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Uuid + "_" + NumPorts + "_" + ProductInfo + "_" + HostMember + "_" + Vm + "_" + Host + "_" + PortgroupName + "_" + Description + "_" + Contact + "_" + NumHosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class DVSSummary_LinkedView : IEquatable<DVSSummary_LinkedView>
    {
        public HostSystem[] HostMember { get; set; }

        public VirtualMachine[] Vm { get; set; }

        public HostSystem[] Host { get; set; }

        public bool Equals(DVSSummary_LinkedView dVSSummary_LinkedView)
        {
            return (dVSSummary_LinkedView != null && ((this.HostMember == null && dVSSummary_LinkedView.HostMember == null) || (this.HostMember != null && dVSSummary_LinkedView.HostMember != null && Enumerable.SequenceEqual(this.HostMember, dVSSummary_LinkedView.HostMember))) && ((this.Vm == null && dVSSummary_LinkedView.Vm == null) || (this.Vm != null && dVSSummary_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, dVSSummary_LinkedView.Vm))) && ((this.Host == null && dVSSummary_LinkedView.Host == null) || (this.Host != null && dVSSummary_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, dVSSummary_LinkedView.Host))));
        }

        public override bool Equals(object dVSSummary_LinkedView)
        {
            return Equals(dVSSummary_LinkedView as DVSSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HostMember + "_" + Vm + "_" + Host).GetHashCode();
        }
    }

    public class DvsSystemTrafficNetworkRuleQualifier : DvsNetworkRuleQualifier, IEquatable<DvsSystemTrafficNetworkRuleQualifier>
    {
        public StringExpression TypeOfSystemTraffic { get; set; }

        public bool Equals(DvsSystemTrafficNetworkRuleQualifier dvsSystemTrafficNetworkRuleQualifier)
        {
            return (dvsSystemTrafficNetworkRuleQualifier != null && ((this.TypeOfSystemTraffic == null && dvsSystemTrafficNetworkRuleQualifier.TypeOfSystemTraffic == null) || (this.TypeOfSystemTraffic != null && this.TypeOfSystemTraffic.Equals(dvsSystemTrafficNetworkRuleQualifier.TypeOfSystemTraffic))));
        }

        public override bool Equals(object dvsSystemTrafficNetworkRuleQualifier)
        {
            return Equals(dvsSystemTrafficNetworkRuleQualifier as DvsSystemTrafficNetworkRuleQualifier);
        }

        public override int GetHashCode()
        {
            return (TypeOfSystemTraffic).GetHashCode();
        }
    }

    public class DvsTrafficFilterConfig : DvsFilterConfig, IEquatable<DvsTrafficFilterConfig>
    {
        public DvsTrafficRuleset TrafficRuleset { get; set; }

        public bool Equals(DvsTrafficFilterConfig dvsTrafficFilterConfig)
        {
            return (dvsTrafficFilterConfig != null && ((this.TrafficRuleset == null && dvsTrafficFilterConfig.TrafficRuleset == null) || (this.TrafficRuleset != null && this.TrafficRuleset.Equals(dvsTrafficFilterConfig.TrafficRuleset))));
        }

        public override bool Equals(object dvsTrafficFilterConfig)
        {
            return Equals(dvsTrafficFilterConfig as DvsTrafficFilterConfig);
        }

        public override int GetHashCode()
        {
            return (TrafficRuleset).GetHashCode();
        }
    }

    public class DvsTrafficFilterConfigSpec : DvsTrafficFilterConfig, IEquatable<DvsTrafficFilterConfigSpec>
    {
        public string Operation { get; set; }

        public bool Equals(DvsTrafficFilterConfigSpec dvsTrafficFilterConfigSpec)
        {
            return (dvsTrafficFilterConfigSpec != null && this.Operation == dvsTrafficFilterConfigSpec.Operation);
        }

        public override bool Equals(object dvsTrafficFilterConfigSpec)
        {
            return Equals(dvsTrafficFilterConfigSpec as DvsTrafficFilterConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation).GetHashCode();
        }
    }

    public class DvsTrafficRule : DynamicData, IEquatable<DvsTrafficRule>
    {
        public string Key { get; set; }

        public string Description { get; set; }

        public int? Sequence { get; set; }

        public DvsNetworkRuleQualifier[] Qualifier { get; set; }

        public DvsNetworkRuleAction Action { get; set; }

        public string Direction { get; set; }

        public bool Equals(DvsTrafficRule dvsTrafficRule)
        {
            return (dvsTrafficRule != null && this.Key == dvsTrafficRule.Key && this.Description == dvsTrafficRule.Description && ((this.Sequence == null && dvsTrafficRule.Sequence == null) || (this.Sequence != null && this.Sequence.Equals(dvsTrafficRule.Sequence))) && ((this.Qualifier == null && dvsTrafficRule.Qualifier == null) || (this.Qualifier != null && dvsTrafficRule.Qualifier != null && Enumerable.SequenceEqual(this.Qualifier, dvsTrafficRule.Qualifier))) && ((this.Action == null && dvsTrafficRule.Action == null) || (this.Action != null && this.Action.Equals(dvsTrafficRule.Action))) && this.Direction == dvsTrafficRule.Direction);
        }

        public override bool Equals(object dvsTrafficRule)
        {
            return Equals(dvsTrafficRule as DvsTrafficRule);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Description + "_" + Sequence + "_" + Qualifier + "_" + Action + "_" + Direction).GetHashCode();
        }
    }

    public class DvsTrafficRuleset : DynamicData, IEquatable<DvsTrafficRuleset>
    {
        public string Key { get; set; }

        public bool? Enabled { get; set; }

        public int? Precedence { get; set; }

        public DvsTrafficRule[] Rules { get; set; }

        public bool Equals(DvsTrafficRuleset dvsTrafficRuleset)
        {
            return (dvsTrafficRuleset != null && this.Key == dvsTrafficRuleset.Key && ((this.Enabled == null && dvsTrafficRuleset.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(dvsTrafficRuleset.Enabled))) && ((this.Precedence == null && dvsTrafficRuleset.Precedence == null) || (this.Precedence != null && this.Precedence.Equals(dvsTrafficRuleset.Precedence))) && ((this.Rules == null && dvsTrafficRuleset.Rules == null) || (this.Rules != null && dvsTrafficRuleset.Rules != null && Enumerable.SequenceEqual(this.Rules, dvsTrafficRuleset.Rules))));
        }

        public override bool Equals(object dvsTrafficRuleset)
        {
            return Equals(dvsTrafficRuleset as DvsTrafficRuleset);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Enabled + "_" + Precedence + "_" + Rules).GetHashCode();
        }
    }

    public class DVSTrafficShapingPolicy : InheritablePolicy, IEquatable<DVSTrafficShapingPolicy>
    {
        public BoolPolicy Enabled { get; set; }

        public LongPolicy AverageBandwidth { get; set; }

        public LongPolicy PeakBandwidth { get; set; }

        public LongPolicy BurstSize { get; set; }

        public bool Equals(DVSTrafficShapingPolicy dVSTrafficShapingPolicy)
        {
            return (dVSTrafficShapingPolicy != null && ((this.Enabled == null && dVSTrafficShapingPolicy.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(dVSTrafficShapingPolicy.Enabled))) && ((this.AverageBandwidth == null && dVSTrafficShapingPolicy.AverageBandwidth == null) || (this.AverageBandwidth != null && this.AverageBandwidth.Equals(dVSTrafficShapingPolicy.AverageBandwidth))) && ((this.PeakBandwidth == null && dVSTrafficShapingPolicy.PeakBandwidth == null) || (this.PeakBandwidth != null && this.PeakBandwidth.Equals(dVSTrafficShapingPolicy.PeakBandwidth))) && ((this.BurstSize == null && dVSTrafficShapingPolicy.BurstSize == null) || (this.BurstSize != null && this.BurstSize.Equals(dVSTrafficShapingPolicy.BurstSize))));
        }

        public override bool Equals(object dVSTrafficShapingPolicy)
        {
            return Equals(dVSTrafficShapingPolicy as DVSTrafficShapingPolicy);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + AverageBandwidth + "_" + PeakBandwidth + "_" + BurstSize).GetHashCode();
        }
    }

    public class DvsUpdateTagNetworkRuleAction : DvsNetworkRuleAction, IEquatable<DvsUpdateTagNetworkRuleAction>
    {
        public int? QosTag { get; set; }

        public int? DscpTag { get; set; }

        public bool Equals(DvsUpdateTagNetworkRuleAction dvsUpdateTagNetworkRuleAction)
        {
            return (dvsUpdateTagNetworkRuleAction != null && ((this.QosTag == null && dvsUpdateTagNetworkRuleAction.QosTag == null) || (this.QosTag != null && this.QosTag.Equals(dvsUpdateTagNetworkRuleAction.QosTag))) && ((this.DscpTag == null && dvsUpdateTagNetworkRuleAction.DscpTag == null) || (this.DscpTag != null && this.DscpTag.Equals(dvsUpdateTagNetworkRuleAction.DscpTag))));
        }

        public override bool Equals(object dvsUpdateTagNetworkRuleAction)
        {
            return Equals(dvsUpdateTagNetworkRuleAction as DvsUpdateTagNetworkRuleAction);
        }

        public override int GetHashCode()
        {
            return (QosTag + "_" + DscpTag).GetHashCode();
        }
    }

    public class DvsUpgradeAvailableEvent : DvsEvent, IEquatable<DvsUpgradeAvailableEvent>
    {
        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public bool Equals(DvsUpgradeAvailableEvent dvsUpgradeAvailableEvent)
        {
            return (dvsUpgradeAvailableEvent != null && ((this.ProductInfo == null && dvsUpgradeAvailableEvent.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dvsUpgradeAvailableEvent.ProductInfo))));
        }

        public override bool Equals(object dvsUpgradeAvailableEvent)
        {
            return Equals(dvsUpgradeAvailableEvent as DvsUpgradeAvailableEvent);
        }

        public override int GetHashCode()
        {
            return (ProductInfo).GetHashCode();
        }
    }

    public class DvsUpgradedEvent : DvsEvent, IEquatable<DvsUpgradedEvent>
    {
        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public bool Equals(DvsUpgradedEvent dvsUpgradedEvent)
        {
            return (dvsUpgradedEvent != null && ((this.ProductInfo == null && dvsUpgradedEvent.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dvsUpgradedEvent.ProductInfo))));
        }

        public override bool Equals(object dvsUpgradedEvent)
        {
            return Equals(dvsUpgradedEvent as DvsUpgradedEvent);
        }

        public override int GetHashCode()
        {
            return (ProductInfo).GetHashCode();
        }
    }

    public class DvsUpgradeInProgressEvent : DvsEvent, IEquatable<DvsUpgradeInProgressEvent>
    {
        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public bool Equals(DvsUpgradeInProgressEvent dvsUpgradeInProgressEvent)
        {
            return (dvsUpgradeInProgressEvent != null && ((this.ProductInfo == null && dvsUpgradeInProgressEvent.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dvsUpgradeInProgressEvent.ProductInfo))));
        }

        public override bool Equals(object dvsUpgradeInProgressEvent)
        {
            return Equals(dvsUpgradeInProgressEvent as DvsUpgradeInProgressEvent);
        }

        public override int GetHashCode()
        {
            return (ProductInfo).GetHashCode();
        }
    }

    public class DvsUpgradeRejectedEvent : DvsEvent, IEquatable<DvsUpgradeRejectedEvent>
    {
        public DistributedVirtualSwitchProductSpec ProductInfo { get; set; }

        public bool Equals(DvsUpgradeRejectedEvent dvsUpgradeRejectedEvent)
        {
            return (dvsUpgradeRejectedEvent != null && ((this.ProductInfo == null && dvsUpgradeRejectedEvent.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(dvsUpgradeRejectedEvent.ProductInfo))));
        }

        public override bool Equals(object dvsUpgradeRejectedEvent)
        {
            return Equals(dvsUpgradeRejectedEvent as DvsUpgradeRejectedEvent);
        }

        public override int GetHashCode()
        {
            return (ProductInfo).GetHashCode();
        }
    }

    public class DVSUplinkPortPolicy : DynamicData, IEquatable<DVSUplinkPortPolicy>
    {
        public bool Equals(DVSUplinkPortPolicy dVSUplinkPortPolicy)
        {
            return (dVSUplinkPortPolicy != null && base.Equals(dVSUplinkPortPolicy));
        }

        public override bool Equals(object dVSUplinkPortPolicy)
        {
            return Equals(dVSUplinkPortPolicy as DVSUplinkPortPolicy);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DVSVendorSpecificConfig : InheritablePolicy, IEquatable<DVSVendorSpecificConfig>
    {
        public DistributedVirtualSwitchKeyedOpaqueBlob[] KeyValue { get; set; }

        public bool Equals(DVSVendorSpecificConfig dVSVendorSpecificConfig)
        {
            return (dVSVendorSpecificConfig != null && ((this.KeyValue == null && dVSVendorSpecificConfig.KeyValue == null) || (this.KeyValue != null && dVSVendorSpecificConfig.KeyValue != null && Enumerable.SequenceEqual(this.KeyValue, dVSVendorSpecificConfig.KeyValue))));
        }

        public override bool Equals(object dVSVendorSpecificConfig)
        {
            return Equals(dVSVendorSpecificConfig as DVSVendorSpecificConfig);
        }

        public override int GetHashCode()
        {
            return (KeyValue).GetHashCode();
        }
    }

    public class DVSVmVnicNetworkResourcePool : DynamicData, IEquatable<DVSVmVnicNetworkResourcePool>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public string ConfigVersion { get; set; }

        public DvsVmVnicResourceAllocation AllocationInfo { get; set; }

        public bool Equals(DVSVmVnicNetworkResourcePool dVSVmVnicNetworkResourcePool)
        {
            return (dVSVmVnicNetworkResourcePool != null && this.Key == dVSVmVnicNetworkResourcePool.Key && this.Name == dVSVmVnicNetworkResourcePool.Name && this.Description == dVSVmVnicNetworkResourcePool.Description && this.ConfigVersion == dVSVmVnicNetworkResourcePool.ConfigVersion && ((this.AllocationInfo == null && dVSVmVnicNetworkResourcePool.AllocationInfo == null) || (this.AllocationInfo != null && this.AllocationInfo.Equals(dVSVmVnicNetworkResourcePool.AllocationInfo))));
        }

        public override bool Equals(object dVSVmVnicNetworkResourcePool)
        {
            return Equals(dVSVmVnicNetworkResourcePool as DVSVmVnicNetworkResourcePool);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Description + "_" + ConfigVersion + "_" + AllocationInfo).GetHashCode();
        }
    }

    public class DvsVmVnicNetworkResourcePoolRuntimeInfo : DynamicData, IEquatable<DvsVmVnicNetworkResourcePoolRuntimeInfo>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public int? Capacity { get; set; }

        public int? Usage { get; set; }

        public int? Available { get; set; }

        public string Status { get; set; }

        public DvsVnicAllocatedResource[] AllocatedResource { get; set; }

        public bool Equals(DvsVmVnicNetworkResourcePoolRuntimeInfo dvsVmVnicNetworkResourcePoolRuntimeInfo)
        {
            return (dvsVmVnicNetworkResourcePoolRuntimeInfo != null && this.Key == dvsVmVnicNetworkResourcePoolRuntimeInfo.Key && this.Name == dvsVmVnicNetworkResourcePoolRuntimeInfo.Name && ((this.Capacity == null && dvsVmVnicNetworkResourcePoolRuntimeInfo.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(dvsVmVnicNetworkResourcePoolRuntimeInfo.Capacity))) && ((this.Usage == null && dvsVmVnicNetworkResourcePoolRuntimeInfo.Usage == null) || (this.Usage != null && this.Usage.Equals(dvsVmVnicNetworkResourcePoolRuntimeInfo.Usage))) && ((this.Available == null && dvsVmVnicNetworkResourcePoolRuntimeInfo.Available == null) || (this.Available != null && this.Available.Equals(dvsVmVnicNetworkResourcePoolRuntimeInfo.Available))) && this.Status == dvsVmVnicNetworkResourcePoolRuntimeInfo.Status && ((this.AllocatedResource == null && dvsVmVnicNetworkResourcePoolRuntimeInfo.AllocatedResource == null) || (this.AllocatedResource != null && dvsVmVnicNetworkResourcePoolRuntimeInfo.AllocatedResource != null && Enumerable.SequenceEqual(this.AllocatedResource, dvsVmVnicNetworkResourcePoolRuntimeInfo.AllocatedResource))));
        }

        public override bool Equals(object dvsVmVnicNetworkResourcePoolRuntimeInfo)
        {
            return Equals(dvsVmVnicNetworkResourcePoolRuntimeInfo as DvsVmVnicNetworkResourcePoolRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Capacity + "_" + Usage + "_" + Available + "_" + Status + "_" + AllocatedResource).GetHashCode();
        }
    }

    public class DvsVmVnicResourceAllocation : DynamicData, IEquatable<DvsVmVnicResourceAllocation>
    {
        public long? ReservationQuota { get; set; }

        public bool Equals(DvsVmVnicResourceAllocation dvsVmVnicResourceAllocation)
        {
            return (dvsVmVnicResourceAllocation != null && ((this.ReservationQuota == null && dvsVmVnicResourceAllocation.ReservationQuota == null) || (this.ReservationQuota != null && this.ReservationQuota.Equals(dvsVmVnicResourceAllocation.ReservationQuota))));
        }

        public override bool Equals(object dvsVmVnicResourceAllocation)
        {
            return Equals(dvsVmVnicResourceAllocation as DvsVmVnicResourceAllocation);
        }

        public override int GetHashCode()
        {
            return (ReservationQuota).GetHashCode();
        }
    }

    public class DvsVmVnicResourcePoolConfigSpec : DynamicData, IEquatable<DvsVmVnicResourcePoolConfigSpec>
    {
        public string Operation { get; set; }

        public string Key { get; set; }

        public string ConfigVersion { get; set; }

        public DvsVmVnicResourceAllocation AllocationInfo { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public bool Equals(DvsVmVnicResourcePoolConfigSpec dvsVmVnicResourcePoolConfigSpec)
        {
            return (dvsVmVnicResourcePoolConfigSpec != null && this.Operation == dvsVmVnicResourcePoolConfigSpec.Operation && this.Key == dvsVmVnicResourcePoolConfigSpec.Key && this.ConfigVersion == dvsVmVnicResourcePoolConfigSpec.ConfigVersion && ((this.AllocationInfo == null && dvsVmVnicResourcePoolConfigSpec.AllocationInfo == null) || (this.AllocationInfo != null && this.AllocationInfo.Equals(dvsVmVnicResourcePoolConfigSpec.AllocationInfo))) && this.Name == dvsVmVnicResourcePoolConfigSpec.Name && this.Description == dvsVmVnicResourcePoolConfigSpec.Description);
        }

        public override bool Equals(object dvsVmVnicResourcePoolConfigSpec)
        {
            return Equals(dvsVmVnicResourcePoolConfigSpec as DvsVmVnicResourcePoolConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + Key + "_" + ConfigVersion + "_" + AllocationInfo + "_" + Name + "_" + Description).GetHashCode();
        }
    }

    public class DvsVnicAllocatedResource : DynamicData, IEquatable<DvsVnicAllocatedResource>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VnicKey { get; set; }

        public long? Reservation { get; set; }

        public DvsVnicAllocatedResource_LinkedView LinkedView { get; set; }

        public bool Equals(DvsVnicAllocatedResource dvsVnicAllocatedResource)
        {
            return (dvsVnicAllocatedResource != null && ((this.Vm == null && dvsVnicAllocatedResource.Vm == null) || (this.Vm != null && this.Vm.Equals(dvsVnicAllocatedResource.Vm))) && this.VnicKey == dvsVnicAllocatedResource.VnicKey && ((this.Reservation == null && dvsVnicAllocatedResource.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(dvsVnicAllocatedResource.Reservation))) && ((this.LinkedView == null && dvsVnicAllocatedResource.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(dvsVnicAllocatedResource.LinkedView))));
        }

        public override bool Equals(object dvsVnicAllocatedResource)
        {
            return Equals(dvsVnicAllocatedResource as DvsVnicAllocatedResource);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VnicKey + "_" + Reservation + "_" + LinkedView).GetHashCode();
        }
    }

    public class DvsVnicAllocatedResource_LinkedView : IEquatable<DvsVnicAllocatedResource_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(DvsVnicAllocatedResource_LinkedView dvsVnicAllocatedResource_LinkedView)
        {
            return (dvsVnicAllocatedResource_LinkedView != null && ((this.Vm == null && dvsVnicAllocatedResource_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(dvsVnicAllocatedResource_LinkedView.Vm))));
        }

        public override bool Equals(object dvsVnicAllocatedResource_LinkedView)
        {
            return Equals(dvsVnicAllocatedResource_LinkedView as DvsVnicAllocatedResource_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class DvsVNicProfile : ApplyProfile, IEquatable<DvsVNicProfile>
    {
        public string Key { get; set; }

        public IpAddressProfile IpConfig { get; set; }

        public bool Equals(DvsVNicProfile dvsVNicProfile)
        {
            return (dvsVNicProfile != null && this.Key == dvsVNicProfile.Key && ((this.IpConfig == null && dvsVNicProfile.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(dvsVNicProfile.IpConfig))));
        }

        public override bool Equals(object dvsVNicProfile)
        {
            return Equals(dvsVNicProfile as DvsVNicProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + IpConfig).GetHashCode();
        }
    }

    public class DynamicArray : IEquatable<DynamicArray>
    {
        public object[] Val { get; set; }

        public bool Equals(DynamicArray dynamicArray)
        {
            return (dynamicArray != null && ((this.Val == null && dynamicArray.Val == null) || (this.Val != null && dynamicArray.Val != null && Enumerable.SequenceEqual(this.Val, dynamicArray.Val))));
        }

        public override bool Equals(object dynamicArray)
        {
            return Equals(dynamicArray as DynamicArray);
        }

        public override int GetHashCode()
        {
            return (Val).GetHashCode();
        }
    }

    public class DynamicData : IEquatable<DynamicData>
    {
        public bool Equals(DynamicData dynamicData)
        {
            return (dynamicData != null);
        }

        public override bool Equals(object dynamicData)
        {
            return Equals(dynamicData as DynamicData);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class DynamicProperty : IEquatable<DynamicProperty>
    {
        public string Name { get; set; }

        public object Val { get; set; }

        public bool Equals(DynamicProperty dynamicProperty)
        {
            return (dynamicProperty != null && this.Name == dynamicProperty.Name && ((this.Val == null && dynamicProperty.Val == null) || (this.Val != null && this.Val.Equals(dynamicProperty.Val))));
        }

        public override bool Equals(object dynamicProperty)
        {
            return Equals(dynamicProperty as DynamicProperty);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Val).GetHashCode();
        }
    }

    public class EightHostLimitViolated : VmConfigFault, IEquatable<EightHostLimitViolated>
    {
        public bool Equals(EightHostLimitViolated eightHostLimitViolated)
        {
            return (eightHostLimitViolated != null && base.Equals(eightHostLimitViolated));
        }

        public override bool Equals(object eightHostLimitViolated)
        {
            return Equals(eightHostLimitViolated as EightHostLimitViolated);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ElementDescription : Description, IEquatable<ElementDescription>
    {
        public string Key { get; set; }

        public bool Equals(ElementDescription elementDescription)
        {
            return (elementDescription != null && this.Key == elementDescription.Key);
        }

        public override bool Equals(object elementDescription)
        {
            return Equals(elementDescription as ElementDescription);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class EncryptionKeyRequired : InvalidState, IEquatable<EncryptionKeyRequired>
    {
        public CryptoKeyId[] RequiredKey { get; set; }

        public bool Equals(EncryptionKeyRequired encryptionKeyRequired)
        {
            return (encryptionKeyRequired != null && ((this.RequiredKey == null && encryptionKeyRequired.RequiredKey == null) || (this.RequiredKey != null && encryptionKeyRequired.RequiredKey != null && Enumerable.SequenceEqual(this.RequiredKey, encryptionKeyRequired.RequiredKey))));
        }

        public override bool Equals(object encryptionKeyRequired)
        {
            return Equals(encryptionKeyRequired as EncryptionKeyRequired);
        }

        public override int GetHashCode()
        {
            return (RequiredKey).GetHashCode();
        }
    }

    public class EnteredMaintenanceModeEvent : HostEvent, IEquatable<EnteredMaintenanceModeEvent>
    {
        public bool Equals(EnteredMaintenanceModeEvent enteredMaintenanceModeEvent)
        {
            return (enteredMaintenanceModeEvent != null && base.Equals(enteredMaintenanceModeEvent));
        }

        public override bool Equals(object enteredMaintenanceModeEvent)
        {
            return Equals(enteredMaintenanceModeEvent as EnteredMaintenanceModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EnteredStandbyModeEvent : HostEvent, IEquatable<EnteredStandbyModeEvent>
    {
        public bool Equals(EnteredStandbyModeEvent enteredStandbyModeEvent)
        {
            return (enteredStandbyModeEvent != null && base.Equals(enteredStandbyModeEvent));
        }

        public override bool Equals(object enteredStandbyModeEvent)
        {
            return Equals(enteredStandbyModeEvent as EnteredStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EnteringMaintenanceModeEvent : HostEvent, IEquatable<EnteringMaintenanceModeEvent>
    {
        public bool Equals(EnteringMaintenanceModeEvent enteringMaintenanceModeEvent)
        {
            return (enteringMaintenanceModeEvent != null && base.Equals(enteringMaintenanceModeEvent));
        }

        public override bool Equals(object enteringMaintenanceModeEvent)
        {
            return Equals(enteringMaintenanceModeEvent as EnteringMaintenanceModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EnteringStandbyModeEvent : HostEvent, IEquatable<EnteringStandbyModeEvent>
    {
        public bool Equals(EnteringStandbyModeEvent enteringStandbyModeEvent)
        {
            return (enteringStandbyModeEvent != null && base.Equals(enteringStandbyModeEvent));
        }

        public override bool Equals(object enteringStandbyModeEvent)
        {
            return Equals(enteringStandbyModeEvent as EnteringStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EntityBackup : DynamicData, IEquatable<EntityBackup>
    {
        public bool Equals(EntityBackup entityBackup)
        {
            return (entityBackup != null && base.Equals(entityBackup));
        }

        public override bool Equals(object entityBackup)
        {
            return Equals(entityBackup as EntityBackup);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EntityBackupConfig : DynamicData, IEquatable<EntityBackupConfig>
    {
        public string EntityType { get; set; }

        public byte[] ConfigBlob { get; set; }

        public string Key { get; set; }

        public string Name { get; set; }

        public ManagedObjectReference Container { get; set; }

        public string ConfigVersion { get; set; }

        public EntityBackupConfig_LinkedView LinkedView { get; set; }

        public bool Equals(EntityBackupConfig entityBackupConfig)
        {
            return (entityBackupConfig != null && this.EntityType == entityBackupConfig.EntityType && ((this.ConfigBlob == null && entityBackupConfig.ConfigBlob == null) || (this.ConfigBlob != null && entityBackupConfig.ConfigBlob != null && Enumerable.SequenceEqual(this.ConfigBlob, entityBackupConfig.ConfigBlob))) && this.Key == entityBackupConfig.Key && this.Name == entityBackupConfig.Name && ((this.Container == null && entityBackupConfig.Container == null) || (this.Container != null && this.Container.Equals(entityBackupConfig.Container))) && this.ConfigVersion == entityBackupConfig.ConfigVersion && ((this.LinkedView == null && entityBackupConfig.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(entityBackupConfig.LinkedView))));
        }

        public override bool Equals(object entityBackupConfig)
        {
            return Equals(entityBackupConfig as EntityBackupConfig);
        }

        public override int GetHashCode()
        {
            return (EntityType + "_" + ConfigBlob + "_" + Key + "_" + Name + "_" + Container + "_" + ConfigVersion + "_" + LinkedView).GetHashCode();
        }
    }

    public class EntityBackupConfig_LinkedView : IEquatable<EntityBackupConfig_LinkedView>
    {
        public ManagedEntity Container { get; set; }

        public bool Equals(EntityBackupConfig_LinkedView entityBackupConfig_LinkedView)
        {
            return (entityBackupConfig_LinkedView != null && ((this.Container == null && entityBackupConfig_LinkedView.Container == null) || (this.Container != null && this.Container.Equals(entityBackupConfig_LinkedView.Container))));
        }

        public override bool Equals(object entityBackupConfig_LinkedView)
        {
            return Equals(entityBackupConfig_LinkedView as EntityBackupConfig_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Container).GetHashCode();
        }
    }

    public class EntityEventArgument : EventArgument, IEquatable<EntityEventArgument>
    {
        public string Name { get; set; }

        public bool Equals(EntityEventArgument entityEventArgument)
        {
            return (entityEventArgument != null && this.Name == entityEventArgument.Name);
        }

        public override bool Equals(object entityEventArgument)
        {
            return Equals(entityEventArgument as EntityEventArgument);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class EntityPrivilege : DynamicData, IEquatable<EntityPrivilege>
    {
        public ManagedObjectReference Entity { get; set; }

        public PrivilegeAvailability[] PrivAvailability { get; set; }

        public EntityPrivilege_LinkedView LinkedView { get; set; }

        public bool Equals(EntityPrivilege entityPrivilege)
        {
            return (entityPrivilege != null && ((this.Entity == null && entityPrivilege.Entity == null) || (this.Entity != null && this.Entity.Equals(entityPrivilege.Entity))) && ((this.PrivAvailability == null && entityPrivilege.PrivAvailability == null) || (this.PrivAvailability != null && entityPrivilege.PrivAvailability != null && Enumerable.SequenceEqual(this.PrivAvailability, entityPrivilege.PrivAvailability))) && ((this.LinkedView == null && entityPrivilege.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(entityPrivilege.LinkedView))));
        }

        public override bool Equals(object entityPrivilege)
        {
            return Equals(entityPrivilege as EntityPrivilege);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + PrivAvailability + "_" + LinkedView).GetHashCode();
        }
    }

    public class EntityPrivilege_LinkedView : IEquatable<EntityPrivilege_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(EntityPrivilege_LinkedView entityPrivilege_LinkedView)
        {
            return (entityPrivilege_LinkedView != null && ((this.Entity == null && entityPrivilege_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(entityPrivilege_LinkedView.Entity))));
        }

        public override bool Equals(object entityPrivilege_LinkedView)
        {
            return Equals(entityPrivilege_LinkedView as EntityPrivilege_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class EntityViewBase : ExtensibleManagedObject, IEquatable<EntityViewBase>
    {
        public TaskHistoryCollector GetTaskCollectorView(TaskFilterSpecRecursionOption recursionOption, TaskFilterSpec taskFilterSpec)
        {
            return default(TaskHistoryCollector);
        }

        public TaskHistoryCollector GetEntityOnlyTasksCollectorView(TaskFilterSpec taskFilterSpec)
        {
            return default(TaskHistoryCollector);
        }

        public TaskHistoryCollector GetAllTasksView(TaskFilterSpec taskFilterSpec)
        {
            return default(TaskHistoryCollector);
        }

        public EventHistoryCollector GetEventCollectorView(EventFilterSpecRecursionOption recursionOption, EventFilterSpec eventFilterSpec)
        {
            return default(EventHistoryCollector);
        }

        public EventHistoryCollector GetEntityOnlyEventsCollectorView(EventFilterSpec eventFilterSpec)
        {
            return default(EventHistoryCollector);
        }

        public EventHistoryCollector GetAllEventsView(EventFilterSpec eventFilterSpec)
        {
            return default(EventHistoryCollector);
        }

        public bool Equals(EntityViewBase entityViewBase)
        {
            return (entityViewBase != null && base.Equals(entityViewBase));
        }

        public override bool Equals(object entityViewBase)
        {
            return Equals(entityViewBase as EntityViewBase);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EnumDescription : DynamicData, IEquatable<EnumDescription>
    {
        public string Key { get; set; }

        public ElementDescription[] Tags { get; set; }

        public bool Equals(EnumDescription enumDescription)
        {
            return (enumDescription != null && this.Key == enumDescription.Key && ((this.Tags == null && enumDescription.Tags == null) || (this.Tags != null && enumDescription.Tags != null && Enumerable.SequenceEqual(this.Tags, enumDescription.Tags))));
        }

        public override bool Equals(object enumDescription)
        {
            return Equals(enumDescription as EnumDescription);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Tags).GetHashCode();
        }
    }

    public class EnvironmentBrowser : ViewBase, IEquatable<EnvironmentBrowser>
    {
        public ManagedObjectReference DatastoreBrowser { get; set; }

        public EnvironmentBrowser_LinkedView LinkedView { get; set; }

        public VirtualMachineConfigOptionDescriptor[] QueryConfigOptionDescriptor()
        {
            return default(VirtualMachineConfigOptionDescriptor[]);
        }

        public VirtualMachineConfigOption QueryConfigOption(string key, ManagedObjectReference host)
        {
            return default(VirtualMachineConfigOption);
        }

        public VirtualMachineConfigOption QueryConfigOptionEx(EnvironmentBrowserConfigOptionQuerySpec spec)
        {
            return default(VirtualMachineConfigOption);
        }

        public ConfigTarget QueryConfigTarget(ManagedObjectReference host)
        {
            return default(ConfigTarget);
        }

        public HostCapability QueryTargetCapabilities(ManagedObjectReference host)
        {
            return default(HostCapability);
        }

        public bool Equals(EnvironmentBrowser environmentBrowser)
        {
            return (environmentBrowser != null && ((this.DatastoreBrowser == null && environmentBrowser.DatastoreBrowser == null) || (this.DatastoreBrowser != null && this.DatastoreBrowser.Equals(environmentBrowser.DatastoreBrowser))) && ((this.LinkedView == null && environmentBrowser.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(environmentBrowser.LinkedView))));
        }

        public override bool Equals(object environmentBrowser)
        {
            return Equals(environmentBrowser as EnvironmentBrowser);
        }

        public override int GetHashCode()
        {
            return (DatastoreBrowser + "_" + LinkedView).GetHashCode();
        }
    }

    public class EnvironmentBrowser_LinkedView : IEquatable<EnvironmentBrowser_LinkedView>
    {
        public HostDatastoreBrowser DatastoreBrowser { get; set; }

        public bool Equals(EnvironmentBrowser_LinkedView environmentBrowser_LinkedView)
        {
            return (environmentBrowser_LinkedView != null && ((this.DatastoreBrowser == null && environmentBrowser_LinkedView.DatastoreBrowser == null) || (this.DatastoreBrowser != null && this.DatastoreBrowser.Equals(environmentBrowser_LinkedView.DatastoreBrowser))));
        }

        public override bool Equals(object environmentBrowser_LinkedView)
        {
            return Equals(environmentBrowser_LinkedView as EnvironmentBrowser_LinkedView);
        }

        public override int GetHashCode()
        {
            return (DatastoreBrowser).GetHashCode();
        }
    }

    public class EnvironmentBrowserConfigOptionQuerySpec : DynamicData, IEquatable<EnvironmentBrowserConfigOptionQuerySpec>
    {
        public string Key { get; set; }

        public ManagedObjectReference Host { get; set; }

        public string[] GuestId { get; set; }

        public EnvironmentBrowserConfigOptionQuerySpec_LinkedView LinkedView { get; set; }

        public bool Equals(EnvironmentBrowserConfigOptionQuerySpec environmentBrowserConfigOptionQuerySpec)
        {
            return (environmentBrowserConfigOptionQuerySpec != null && this.Key == environmentBrowserConfigOptionQuerySpec.Key && ((this.Host == null && environmentBrowserConfigOptionQuerySpec.Host == null) || (this.Host != null && this.Host.Equals(environmentBrowserConfigOptionQuerySpec.Host))) && ((this.GuestId == null && environmentBrowserConfigOptionQuerySpec.GuestId == null) || (this.GuestId != null && environmentBrowserConfigOptionQuerySpec.GuestId != null && Enumerable.SequenceEqual(this.GuestId, environmentBrowserConfigOptionQuerySpec.GuestId))) && ((this.LinkedView == null && environmentBrowserConfigOptionQuerySpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(environmentBrowserConfigOptionQuerySpec.LinkedView))));
        }

        public override bool Equals(object environmentBrowserConfigOptionQuerySpec)
        {
            return Equals(environmentBrowserConfigOptionQuerySpec as EnvironmentBrowserConfigOptionQuerySpec);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Host + "_" + GuestId + "_" + LinkedView).GetHashCode();
        }
    }

    public class EnvironmentBrowserConfigOptionQuerySpec_LinkedView : IEquatable<EnvironmentBrowserConfigOptionQuerySpec_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(EnvironmentBrowserConfigOptionQuerySpec_LinkedView environmentBrowserConfigOptionQuerySpec_LinkedView)
        {
            return (environmentBrowserConfigOptionQuerySpec_LinkedView != null && ((this.Host == null && environmentBrowserConfigOptionQuerySpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(environmentBrowserConfigOptionQuerySpec_LinkedView.Host))));
        }

        public override bool Equals(object environmentBrowserConfigOptionQuerySpec_LinkedView)
        {
            return Equals(environmentBrowserConfigOptionQuerySpec_LinkedView as EnvironmentBrowserConfigOptionQuerySpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class ErrorUpgradeEvent : UpgradeEvent, IEquatable<ErrorUpgradeEvent>
    {
        public bool Equals(ErrorUpgradeEvent errorUpgradeEvent)
        {
            return (errorUpgradeEvent != null && base.Equals(errorUpgradeEvent));
        }

        public override bool Equals(object errorUpgradeEvent)
        {
            return Equals(errorUpgradeEvent as ErrorUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EvaluationLicenseSource : LicenseSource, IEquatable<EvaluationLicenseSource>
    {
        public long? RemainingHours { get; set; }

        public bool Equals(EvaluationLicenseSource evaluationLicenseSource)
        {
            return (evaluationLicenseSource != null && ((this.RemainingHours == null && evaluationLicenseSource.RemainingHours == null) || (this.RemainingHours != null && this.RemainingHours.Equals(evaluationLicenseSource.RemainingHours))));
        }

        public override bool Equals(object evaluationLicenseSource)
        {
            return Equals(evaluationLicenseSource as EvaluationLicenseSource);
        }

        public override int GetHashCode()
        {
            return (RemainingHours).GetHashCode();
        }
    }

    public class EVCAdmissionFailed : NotSupportedHostInCluster, IEquatable<EVCAdmissionFailed>
    {
        public LocalizedMethodFault[] Faults { get; set; }

        public bool Equals(EVCAdmissionFailed eVCAdmissionFailed)
        {
            return (eVCAdmissionFailed != null && ((this.Faults == null && eVCAdmissionFailed.Faults == null) || (this.Faults != null && eVCAdmissionFailed.Faults != null && Enumerable.SequenceEqual(this.Faults, eVCAdmissionFailed.Faults))));
        }

        public override bool Equals(object eVCAdmissionFailed)
        {
            return Equals(eVCAdmissionFailed as EVCAdmissionFailed);
        }

        public override int GetHashCode()
        {
            return (Faults).GetHashCode();
        }
    }

    public class EVCAdmissionFailedCPUFeaturesForMode : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedCPUFeaturesForMode>
    {
        public string CurrentEVCModeKey { get; set; }

        public bool Equals(EVCAdmissionFailedCPUFeaturesForMode eVCAdmissionFailedCPUFeaturesForMode)
        {
            return (eVCAdmissionFailedCPUFeaturesForMode != null && this.CurrentEVCModeKey == eVCAdmissionFailedCPUFeaturesForMode.CurrentEVCModeKey);
        }

        public override bool Equals(object eVCAdmissionFailedCPUFeaturesForMode)
        {
            return Equals(eVCAdmissionFailedCPUFeaturesForMode as EVCAdmissionFailedCPUFeaturesForMode);
        }

        public override int GetHashCode()
        {
            return (CurrentEVCModeKey).GetHashCode();
        }
    }

    public class EVCAdmissionFailedCPUModel : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedCPUModel>
    {
        public bool Equals(EVCAdmissionFailedCPUModel eVCAdmissionFailedCPUModel)
        {
            return (eVCAdmissionFailedCPUModel != null && base.Equals(eVCAdmissionFailedCPUModel));
        }

        public override bool Equals(object eVCAdmissionFailedCPUModel)
        {
            return Equals(eVCAdmissionFailedCPUModel as EVCAdmissionFailedCPUModel);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCAdmissionFailedCPUModelForMode : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedCPUModelForMode>
    {
        public string CurrentEVCModeKey { get; set; }

        public bool Equals(EVCAdmissionFailedCPUModelForMode eVCAdmissionFailedCPUModelForMode)
        {
            return (eVCAdmissionFailedCPUModelForMode != null && this.CurrentEVCModeKey == eVCAdmissionFailedCPUModelForMode.CurrentEVCModeKey);
        }

        public override bool Equals(object eVCAdmissionFailedCPUModelForMode)
        {
            return Equals(eVCAdmissionFailedCPUModelForMode as EVCAdmissionFailedCPUModelForMode);
        }

        public override int GetHashCode()
        {
            return (CurrentEVCModeKey).GetHashCode();
        }
    }

    public class EVCAdmissionFailedCPUVendor : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedCPUVendor>
    {
        public string ClusterCPUVendor { get; set; }

        public string HostCPUVendor { get; set; }

        public bool Equals(EVCAdmissionFailedCPUVendor eVCAdmissionFailedCPUVendor)
        {
            return (eVCAdmissionFailedCPUVendor != null && this.ClusterCPUVendor == eVCAdmissionFailedCPUVendor.ClusterCPUVendor && this.HostCPUVendor == eVCAdmissionFailedCPUVendor.HostCPUVendor);
        }

        public override bool Equals(object eVCAdmissionFailedCPUVendor)
        {
            return Equals(eVCAdmissionFailedCPUVendor as EVCAdmissionFailedCPUVendor);
        }

        public override int GetHashCode()
        {
            return (ClusterCPUVendor + "_" + HostCPUVendor).GetHashCode();
        }
    }

    public class EVCAdmissionFailedCPUVendorUnknown : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedCPUVendorUnknown>
    {
        public bool Equals(EVCAdmissionFailedCPUVendorUnknown eVCAdmissionFailedCPUVendorUnknown)
        {
            return (eVCAdmissionFailedCPUVendorUnknown != null && base.Equals(eVCAdmissionFailedCPUVendorUnknown));
        }

        public override bool Equals(object eVCAdmissionFailedCPUVendorUnknown)
        {
            return Equals(eVCAdmissionFailedCPUVendorUnknown as EVCAdmissionFailedCPUVendorUnknown);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCAdmissionFailedHostDisconnected : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedHostDisconnected>
    {
        public bool Equals(EVCAdmissionFailedHostDisconnected eVCAdmissionFailedHostDisconnected)
        {
            return (eVCAdmissionFailedHostDisconnected != null && base.Equals(eVCAdmissionFailedHostDisconnected));
        }

        public override bool Equals(object eVCAdmissionFailedHostDisconnected)
        {
            return Equals(eVCAdmissionFailedHostDisconnected as EVCAdmissionFailedHostDisconnected);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCAdmissionFailedHostSoftware : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedHostSoftware>
    {
        public bool Equals(EVCAdmissionFailedHostSoftware eVCAdmissionFailedHostSoftware)
        {
            return (eVCAdmissionFailedHostSoftware != null && base.Equals(eVCAdmissionFailedHostSoftware));
        }

        public override bool Equals(object eVCAdmissionFailedHostSoftware)
        {
            return Equals(eVCAdmissionFailedHostSoftware as EVCAdmissionFailedHostSoftware);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCAdmissionFailedHostSoftwareForMode : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedHostSoftwareForMode>
    {
        public bool Equals(EVCAdmissionFailedHostSoftwareForMode eVCAdmissionFailedHostSoftwareForMode)
        {
            return (eVCAdmissionFailedHostSoftwareForMode != null && base.Equals(eVCAdmissionFailedHostSoftwareForMode));
        }

        public override bool Equals(object eVCAdmissionFailedHostSoftwareForMode)
        {
            return Equals(eVCAdmissionFailedHostSoftwareForMode as EVCAdmissionFailedHostSoftwareForMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCAdmissionFailedVmActive : EVCAdmissionFailed, IEquatable<EVCAdmissionFailedVmActive>
    {
        public bool Equals(EVCAdmissionFailedVmActive eVCAdmissionFailedVmActive)
        {
            return (eVCAdmissionFailedVmActive != null && base.Equals(eVCAdmissionFailedVmActive));
        }

        public override bool Equals(object eVCAdmissionFailedVmActive)
        {
            return Equals(eVCAdmissionFailedVmActive as EVCAdmissionFailedVmActive);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EVCConfigFault : VimFault, IEquatable<EVCConfigFault>
    {
        public LocalizedMethodFault[] Faults { get; set; }

        public bool Equals(EVCConfigFault eVCConfigFault)
        {
            return (eVCConfigFault != null && ((this.Faults == null && eVCConfigFault.Faults == null) || (this.Faults != null && eVCConfigFault.Faults != null && Enumerable.SequenceEqual(this.Faults, eVCConfigFault.Faults))));
        }

        public override bool Equals(object eVCConfigFault)
        {
            return Equals(eVCConfigFault as EVCConfigFault);
        }

        public override int GetHashCode()
        {
            return (Faults).GetHashCode();
        }
    }

    public class EVCMode : ElementDescription, IEquatable<EVCMode>
    {
        public HostCpuIdInfo[] GuaranteedCPUFeatures { get; set; }

        public HostFeatureCapability[] FeatureCapability { get; set; }

        public HostFeatureMask[] FeatureMask { get; set; }

        public VirtualMachineFeatureRequirement[] FeatureRequirement { get; set; }

        public string Vendor { get; set; }

        public string[] Track { get; set; }

        public int VendorTier { get; set; }

        public bool Equals(EVCMode eVCMode)
        {
            return (eVCMode != null && ((this.GuaranteedCPUFeatures == null && eVCMode.GuaranteedCPUFeatures == null) || (this.GuaranteedCPUFeatures != null && eVCMode.GuaranteedCPUFeatures != null && Enumerable.SequenceEqual(this.GuaranteedCPUFeatures, eVCMode.GuaranteedCPUFeatures))) && ((this.FeatureCapability == null && eVCMode.FeatureCapability == null) || (this.FeatureCapability != null && eVCMode.FeatureCapability != null && Enumerable.SequenceEqual(this.FeatureCapability, eVCMode.FeatureCapability))) && ((this.FeatureMask == null && eVCMode.FeatureMask == null) || (this.FeatureMask != null && eVCMode.FeatureMask != null && Enumerable.SequenceEqual(this.FeatureMask, eVCMode.FeatureMask))) && ((this.FeatureRequirement == null && eVCMode.FeatureRequirement == null) || (this.FeatureRequirement != null && eVCMode.FeatureRequirement != null && Enumerable.SequenceEqual(this.FeatureRequirement, eVCMode.FeatureRequirement))) && this.Vendor == eVCMode.Vendor && ((this.Track == null && eVCMode.Track == null) || (this.Track != null && eVCMode.Track != null && Enumerable.SequenceEqual(this.Track, eVCMode.Track))) && this.VendorTier == eVCMode.VendorTier);
        }

        public override bool Equals(object eVCMode)
        {
            return Equals(eVCMode as EVCMode);
        }

        public override int GetHashCode()
        {
            return (GuaranteedCPUFeatures + "_" + FeatureCapability + "_" + FeatureMask + "_" + FeatureRequirement + "_" + Vendor + "_" + Track + "_" + VendorTier).GetHashCode();
        }
    }

    public class EVCModeIllegalByVendor : EVCConfigFault, IEquatable<EVCModeIllegalByVendor>
    {
        public string ClusterCPUVendor { get; set; }

        public string ModeCPUVendor { get; set; }

        public bool Equals(EVCModeIllegalByVendor eVCModeIllegalByVendor)
        {
            return (eVCModeIllegalByVendor != null && this.ClusterCPUVendor == eVCModeIllegalByVendor.ClusterCPUVendor && this.ModeCPUVendor == eVCModeIllegalByVendor.ModeCPUVendor);
        }

        public override bool Equals(object eVCModeIllegalByVendor)
        {
            return Equals(eVCModeIllegalByVendor as EVCModeIllegalByVendor);
        }

        public override int GetHashCode()
        {
            return (ClusterCPUVendor + "_" + ModeCPUVendor).GetHashCode();
        }
    }

    public class EVCModeUnsupportedByHosts : EVCConfigFault, IEquatable<EVCModeUnsupportedByHosts>
    {
        public string EvcMode { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public string[] HostName { get; set; }

        public EVCModeUnsupportedByHosts_LinkedView LinkedView { get; set; }

        public bool Equals(EVCModeUnsupportedByHosts eVCModeUnsupportedByHosts)
        {
            return (eVCModeUnsupportedByHosts != null && this.EvcMode == eVCModeUnsupportedByHosts.EvcMode && ((this.Host == null && eVCModeUnsupportedByHosts.Host == null) || (this.Host != null && eVCModeUnsupportedByHosts.Host != null && Enumerable.SequenceEqual(this.Host, eVCModeUnsupportedByHosts.Host))) && ((this.HostName == null && eVCModeUnsupportedByHosts.HostName == null) || (this.HostName != null && eVCModeUnsupportedByHosts.HostName != null && Enumerable.SequenceEqual(this.HostName, eVCModeUnsupportedByHosts.HostName))) && ((this.LinkedView == null && eVCModeUnsupportedByHosts.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(eVCModeUnsupportedByHosts.LinkedView))));
        }

        public override bool Equals(object eVCModeUnsupportedByHosts)
        {
            return Equals(eVCModeUnsupportedByHosts as EVCModeUnsupportedByHosts);
        }

        public override int GetHashCode()
        {
            return (EvcMode + "_" + Host + "_" + HostName + "_" + LinkedView).GetHashCode();
        }
    }

    public class EVCModeUnsupportedByHosts_LinkedView : IEquatable<EVCModeUnsupportedByHosts_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(EVCModeUnsupportedByHosts_LinkedView eVCModeUnsupportedByHosts_LinkedView)
        {
            return (eVCModeUnsupportedByHosts_LinkedView != null && ((this.Host == null && eVCModeUnsupportedByHosts_LinkedView.Host == null) || (this.Host != null && eVCModeUnsupportedByHosts_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, eVCModeUnsupportedByHosts_LinkedView.Host))));
        }

        public override bool Equals(object eVCModeUnsupportedByHosts_LinkedView)
        {
            return Equals(eVCModeUnsupportedByHosts_LinkedView as EVCModeUnsupportedByHosts_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class EVCUnsupportedByHostHardware : EVCConfigFault, IEquatable<EVCUnsupportedByHostHardware>
    {
        public ManagedObjectReference[] Host { get; set; }

        public string[] HostName { get; set; }

        public EVCUnsupportedByHostHardware_LinkedView LinkedView { get; set; }

        public bool Equals(EVCUnsupportedByHostHardware eVCUnsupportedByHostHardware)
        {
            return (eVCUnsupportedByHostHardware != null && ((this.Host == null && eVCUnsupportedByHostHardware.Host == null) || (this.Host != null && eVCUnsupportedByHostHardware.Host != null && Enumerable.SequenceEqual(this.Host, eVCUnsupportedByHostHardware.Host))) && ((this.HostName == null && eVCUnsupportedByHostHardware.HostName == null) || (this.HostName != null && eVCUnsupportedByHostHardware.HostName != null && Enumerable.SequenceEqual(this.HostName, eVCUnsupportedByHostHardware.HostName))) && ((this.LinkedView == null && eVCUnsupportedByHostHardware.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(eVCUnsupportedByHostHardware.LinkedView))));
        }

        public override bool Equals(object eVCUnsupportedByHostHardware)
        {
            return Equals(eVCUnsupportedByHostHardware as EVCUnsupportedByHostHardware);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + LinkedView).GetHashCode();
        }
    }

    public class EVCUnsupportedByHostHardware_LinkedView : IEquatable<EVCUnsupportedByHostHardware_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(EVCUnsupportedByHostHardware_LinkedView eVCUnsupportedByHostHardware_LinkedView)
        {
            return (eVCUnsupportedByHostHardware_LinkedView != null && ((this.Host == null && eVCUnsupportedByHostHardware_LinkedView.Host == null) || (this.Host != null && eVCUnsupportedByHostHardware_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, eVCUnsupportedByHostHardware_LinkedView.Host))));
        }

        public override bool Equals(object eVCUnsupportedByHostHardware_LinkedView)
        {
            return Equals(eVCUnsupportedByHostHardware_LinkedView as EVCUnsupportedByHostHardware_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class EVCUnsupportedByHostSoftware : EVCConfigFault, IEquatable<EVCUnsupportedByHostSoftware>
    {
        public ManagedObjectReference[] Host { get; set; }

        public string[] HostName { get; set; }

        public EVCUnsupportedByHostSoftware_LinkedView LinkedView { get; set; }

        public bool Equals(EVCUnsupportedByHostSoftware eVCUnsupportedByHostSoftware)
        {
            return (eVCUnsupportedByHostSoftware != null && ((this.Host == null && eVCUnsupportedByHostSoftware.Host == null) || (this.Host != null && eVCUnsupportedByHostSoftware.Host != null && Enumerable.SequenceEqual(this.Host, eVCUnsupportedByHostSoftware.Host))) && ((this.HostName == null && eVCUnsupportedByHostSoftware.HostName == null) || (this.HostName != null && eVCUnsupportedByHostSoftware.HostName != null && Enumerable.SequenceEqual(this.HostName, eVCUnsupportedByHostSoftware.HostName))) && ((this.LinkedView == null && eVCUnsupportedByHostSoftware.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(eVCUnsupportedByHostSoftware.LinkedView))));
        }

        public override bool Equals(object eVCUnsupportedByHostSoftware)
        {
            return Equals(eVCUnsupportedByHostSoftware as EVCUnsupportedByHostSoftware);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + LinkedView).GetHashCode();
        }
    }

    public class EVCUnsupportedByHostSoftware_LinkedView : IEquatable<EVCUnsupportedByHostSoftware_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(EVCUnsupportedByHostSoftware_LinkedView eVCUnsupportedByHostSoftware_LinkedView)
        {
            return (eVCUnsupportedByHostSoftware_LinkedView != null && ((this.Host == null && eVCUnsupportedByHostSoftware_LinkedView.Host == null) || (this.Host != null && eVCUnsupportedByHostSoftware_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, eVCUnsupportedByHostSoftware_LinkedView.Host))));
        }

        public override bool Equals(object eVCUnsupportedByHostSoftware_LinkedView)
        {
            return Equals(eVCUnsupportedByHostSoftware_LinkedView as EVCUnsupportedByHostSoftware_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class Event : DynamicData, IEquatable<Event>
    {
        public int Key { get; set; }

        public int ChainId { get; set; }

        public DateTime CreatedTime { get; set; }

        public string UserName { get; set; }

        public DatacenterEventArgument Datacenter { get; set; }

        public ComputeResourceEventArgument ComputeResource { get; set; }

        public HostEventArgument Host { get; set; }

        public VmEventArgument Vm { get; set; }

        public DatastoreEventArgument Ds { get; set; }

        public NetworkEventArgument Net { get; set; }

        public DvsEventArgument Dvs { get; set; }

        public string FullFormattedMessage { get; set; }

        public string ChangeTag { get; set; }

        public bool Equals(Event _event)
        {
            return (_event != null && this.Key == _event.Key && this.ChainId == _event.ChainId && this.CreatedTime == _event.CreatedTime && this.UserName == _event.UserName && ((this.Datacenter == null && _event.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(_event.Datacenter))) && ((this.ComputeResource == null && _event.ComputeResource == null) || (this.ComputeResource != null && this.ComputeResource.Equals(_event.ComputeResource))) && ((this.Host == null && _event.Host == null) || (this.Host != null && this.Host.Equals(_event.Host))) && ((this.Vm == null && _event.Vm == null) || (this.Vm != null && this.Vm.Equals(_event.Vm))) && ((this.Ds == null && _event.Ds == null) || (this.Ds != null && this.Ds.Equals(_event.Ds))) && ((this.Net == null && _event.Net == null) || (this.Net != null && this.Net.Equals(_event.Net))) && ((this.Dvs == null && _event.Dvs == null) || (this.Dvs != null && this.Dvs.Equals(_event.Dvs))) && this.FullFormattedMessage == _event.FullFormattedMessage && this.ChangeTag == _event.ChangeTag);
        }

        public override bool Equals(object _event)
        {
            return Equals(_event as Event);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ChainId + "_" + CreatedTime + "_" + UserName + "_" + Datacenter + "_" + ComputeResource + "_" + Host + "_" + Vm + "_" + Ds + "_" + Net + "_" + Dvs + "_" + FullFormattedMessage + "_" + ChangeTag).GetHashCode();
        }
    }

    public class EventAlarmExpression : AlarmExpression, IEquatable<EventAlarmExpression>
    {
        public EventAlarmExpressionComparison[] Comparisons { get; set; }

        public string EventType { get; set; }

        public string EventTypeId { get; set; }

        public string ObjectType { get; set; }

        public ManagedEntityStatus? Status { get; set; }

        public bool Equals(EventAlarmExpression eventAlarmExpression)
        {
            return (eventAlarmExpression != null && ((this.Comparisons == null && eventAlarmExpression.Comparisons == null) || (this.Comparisons != null && eventAlarmExpression.Comparisons != null && Enumerable.SequenceEqual(this.Comparisons, eventAlarmExpression.Comparisons))) && this.EventType == eventAlarmExpression.EventType && this.EventTypeId == eventAlarmExpression.EventTypeId && this.ObjectType == eventAlarmExpression.ObjectType && ((this.Status == null && eventAlarmExpression.Status == null) || (this.Status != null && this.Status.Equals(eventAlarmExpression.Status))));
        }

        public override bool Equals(object eventAlarmExpression)
        {
            return Equals(eventAlarmExpression as EventAlarmExpression);
        }

        public override int GetHashCode()
        {
            return (Comparisons + "_" + EventType + "_" + EventTypeId + "_" + ObjectType + "_" + Status).GetHashCode();
        }
    }

    public class EventAlarmExpressionComparison : DynamicData, IEquatable<EventAlarmExpressionComparison>
    {
        public string AttributeName { get; set; }

        public string Operator { get; set; }

        public string Value { get; set; }

        public bool Equals(EventAlarmExpressionComparison eventAlarmExpressionComparison)
        {
            return (eventAlarmExpressionComparison != null && this.AttributeName == eventAlarmExpressionComparison.AttributeName && this.Operator == eventAlarmExpressionComparison.Operator && this.Value == eventAlarmExpressionComparison.Value);
        }

        public override bool Equals(object eventAlarmExpressionComparison)
        {
            return Equals(eventAlarmExpressionComparison as EventAlarmExpressionComparison);
        }

        public override int GetHashCode()
        {
            return (AttributeName + "_" + Operator + "_" + Value).GetHashCode();
        }
    }

    public class EventArgDesc : DynamicData, IEquatable<EventArgDesc>
    {
        public string Name { get; set; }

        public string Type { get; set; }

        public ElementDescription Description { get; set; }

        public bool Equals(EventArgDesc eventArgDesc)
        {
            return (eventArgDesc != null && this.Name == eventArgDesc.Name && this.Type == eventArgDesc.Type && ((this.Description == null && eventArgDesc.Description == null) || (this.Description != null && this.Description.Equals(eventArgDesc.Description))));
        }

        public override bool Equals(object eventArgDesc)
        {
            return Equals(eventArgDesc as EventArgDesc);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Type + "_" + Description).GetHashCode();
        }
    }

    public class EventArgument : DynamicData, IEquatable<EventArgument>
    {
        public bool Equals(EventArgument eventArgument)
        {
            return (eventArgument != null && base.Equals(eventArgument));
        }

        public override bool Equals(object eventArgument)
        {
            return Equals(eventArgument as EventArgument);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EventDescription : DynamicData, IEquatable<EventDescription>
    {
        public ElementDescription[] Category { get; set; }

        public EventDescriptionEventDetail[] EventInfo { get; set; }

        public EnumDescription[] EnumeratedTypes { get; set; }

        public bool Equals(EventDescription eventDescription)
        {
            return (eventDescription != null && ((this.Category == null && eventDescription.Category == null) || (this.Category != null && eventDescription.Category != null && Enumerable.SequenceEqual(this.Category, eventDescription.Category))) && ((this.EventInfo == null && eventDescription.EventInfo == null) || (this.EventInfo != null && eventDescription.EventInfo != null && Enumerable.SequenceEqual(this.EventInfo, eventDescription.EventInfo))) && ((this.EnumeratedTypes == null && eventDescription.EnumeratedTypes == null) || (this.EnumeratedTypes != null && eventDescription.EnumeratedTypes != null && Enumerable.SequenceEqual(this.EnumeratedTypes, eventDescription.EnumeratedTypes))));
        }

        public override bool Equals(object eventDescription)
        {
            return Equals(eventDescription as EventDescription);
        }

        public override int GetHashCode()
        {
            return (Category + "_" + EventInfo + "_" + EnumeratedTypes).GetHashCode();
        }
    }

    public class EventDescriptionEventDetail : DynamicData, IEquatable<EventDescriptionEventDetail>
    {
        public string Key { get; set; }

        public string Description { get; set; }

        public string Category { get; set; }

        public string FormatOnDatacenter { get; set; }

        public string FormatOnComputeResource { get; set; }

        public string FormatOnHost { get; set; }

        public string FormatOnVm { get; set; }

        public string FullFormat { get; set; }

        public string LongDescription { get; set; }

        public bool Equals(EventDescriptionEventDetail eventDescriptionEventDetail)
        {
            return (eventDescriptionEventDetail != null && this.Key == eventDescriptionEventDetail.Key && this.Description == eventDescriptionEventDetail.Description && this.Category == eventDescriptionEventDetail.Category && this.FormatOnDatacenter == eventDescriptionEventDetail.FormatOnDatacenter && this.FormatOnComputeResource == eventDescriptionEventDetail.FormatOnComputeResource && this.FormatOnHost == eventDescriptionEventDetail.FormatOnHost && this.FormatOnVm == eventDescriptionEventDetail.FormatOnVm && this.FullFormat == eventDescriptionEventDetail.FullFormat && this.LongDescription == eventDescriptionEventDetail.LongDescription);
        }

        public override bool Equals(object eventDescriptionEventDetail)
        {
            return Equals(eventDescriptionEventDetail as EventDescriptionEventDetail);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Description + "_" + Category + "_" + FormatOnDatacenter + "_" + FormatOnComputeResource + "_" + FormatOnHost + "_" + FormatOnVm + "_" + FullFormat + "_" + LongDescription).GetHashCode();
        }
    }

    public class EventEx : Event, IEquatable<EventEx>
    {
        public string EventTypeId { get; set; }

        public string Severity { get; set; }

        public string Message { get; set; }

        public KeyAnyValue[] Arguments { get; set; }

        public string ObjectId { get; set; }

        public string ObjectType { get; set; }

        public string ObjectName { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(EventEx eventEx)
        {
            return (eventEx != null && this.EventTypeId == eventEx.EventTypeId && this.Severity == eventEx.Severity && this.Message == eventEx.Message && ((this.Arguments == null && eventEx.Arguments == null) || (this.Arguments != null && eventEx.Arguments != null && Enumerable.SequenceEqual(this.Arguments, eventEx.Arguments))) && this.ObjectId == eventEx.ObjectId && this.ObjectType == eventEx.ObjectType && this.ObjectName == eventEx.ObjectName && ((this.Fault == null && eventEx.Fault == null) || (this.Fault != null && this.Fault.Equals(eventEx.Fault))));
        }

        public override bool Equals(object eventEx)
        {
            return Equals(eventEx as EventEx);
        }

        public override int GetHashCode()
        {
            return (EventTypeId + "_" + Severity + "_" + Message + "_" + Arguments + "_" + ObjectId + "_" + ObjectType + "_" + ObjectName + "_" + Fault).GetHashCode();
        }
    }

    public class EventFilterSpec : DynamicData, IEquatable<EventFilterSpec>
    {
        public EventFilterSpecByEntity Entity { get; set; }

        public EventFilterSpecByTime Time { get; set; }

        public EventFilterSpecByUsername UserName { get; set; }

        public int? EventChainId { get; set; }

        public ManagedObjectReference Alarm { get; set; }

        public ManagedObjectReference ScheduledTask { get; set; }

        public bool? DisableFullMessage { get; set; }

        public string[] Category { get; set; }

        public string[] Type { get; set; }

        public string[] Tag { get; set; }

        public string[] EventTypeId { get; set; }

        public int? MaxCount { get; set; }

        public EventFilterSpec_LinkedView LinkedView { get; set; }

        public bool Equals(EventFilterSpec eventFilterSpec)
        {
            return (eventFilterSpec != null && ((this.Entity == null && eventFilterSpec.Entity == null) || (this.Entity != null && this.Entity.Equals(eventFilterSpec.Entity))) && ((this.Time == null && eventFilterSpec.Time == null) || (this.Time != null && this.Time.Equals(eventFilterSpec.Time))) && ((this.UserName == null && eventFilterSpec.UserName == null) || (this.UserName != null && this.UserName.Equals(eventFilterSpec.UserName))) && ((this.EventChainId == null && eventFilterSpec.EventChainId == null) || (this.EventChainId != null && this.EventChainId.Equals(eventFilterSpec.EventChainId))) && ((this.Alarm == null && eventFilterSpec.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(eventFilterSpec.Alarm))) && ((this.ScheduledTask == null && eventFilterSpec.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(eventFilterSpec.ScheduledTask))) && ((this.DisableFullMessage == null && eventFilterSpec.DisableFullMessage == null) || (this.DisableFullMessage != null && this.DisableFullMessage.Equals(eventFilterSpec.DisableFullMessage))) && ((this.Category == null && eventFilterSpec.Category == null) || (this.Category != null && eventFilterSpec.Category != null && Enumerable.SequenceEqual(this.Category, eventFilterSpec.Category))) && ((this.Type == null && eventFilterSpec.Type == null) || (this.Type != null && eventFilterSpec.Type != null && Enumerable.SequenceEqual(this.Type, eventFilterSpec.Type))) && ((this.Tag == null && eventFilterSpec.Tag == null) || (this.Tag != null && eventFilterSpec.Tag != null && Enumerable.SequenceEqual(this.Tag, eventFilterSpec.Tag))) && ((this.EventTypeId == null && eventFilterSpec.EventTypeId == null) || (this.EventTypeId != null && eventFilterSpec.EventTypeId != null && Enumerable.SequenceEqual(this.EventTypeId, eventFilterSpec.EventTypeId))) && ((this.MaxCount == null && eventFilterSpec.MaxCount == null) || (this.MaxCount != null && this.MaxCount.Equals(eventFilterSpec.MaxCount))) && ((this.LinkedView == null && eventFilterSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(eventFilterSpec.LinkedView))));
        }

        public override bool Equals(object eventFilterSpec)
        {
            return Equals(eventFilterSpec as EventFilterSpec);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Time + "_" + UserName + "_" + EventChainId + "_" + Alarm + "_" + ScheduledTask + "_" + DisableFullMessage + "_" + Category + "_" + Type + "_" + Tag + "_" + EventTypeId + "_" + MaxCount + "_" + LinkedView).GetHashCode();
        }
    }

    public class EventFilterSpec_LinkedView : IEquatable<EventFilterSpec_LinkedView>
    {
        public Alarm Alarm { get; set; }

        public ScheduledTask ScheduledTask { get; set; }

        public bool Equals(EventFilterSpec_LinkedView eventFilterSpec_LinkedView)
        {
            return (eventFilterSpec_LinkedView != null && ((this.Alarm == null && eventFilterSpec_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(eventFilterSpec_LinkedView.Alarm))) && ((this.ScheduledTask == null && eventFilterSpec_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(eventFilterSpec_LinkedView.ScheduledTask))));
        }

        public override bool Equals(object eventFilterSpec_LinkedView)
        {
            return Equals(eventFilterSpec_LinkedView as EventFilterSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Alarm + "_" + ScheduledTask).GetHashCode();
        }
    }

    public class EventFilterSpecByEntity : DynamicData, IEquatable<EventFilterSpecByEntity>
    {
        public ManagedObjectReference Entity { get; set; }

        public EventFilterSpecRecursionOption Recursion { get; set; }

        public EventFilterSpecByEntity_LinkedView LinkedView { get; set; }

        public bool Equals(EventFilterSpecByEntity eventFilterSpecByEntity)
        {
            return (eventFilterSpecByEntity != null && ((this.Entity == null && eventFilterSpecByEntity.Entity == null) || (this.Entity != null && this.Entity.Equals(eventFilterSpecByEntity.Entity))) && this.Recursion == eventFilterSpecByEntity.Recursion && ((this.LinkedView == null && eventFilterSpecByEntity.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(eventFilterSpecByEntity.LinkedView))));
        }

        public override bool Equals(object eventFilterSpecByEntity)
        {
            return Equals(eventFilterSpecByEntity as EventFilterSpecByEntity);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Recursion + "_" + LinkedView).GetHashCode();
        }
    }

    public class EventFilterSpecByEntity_LinkedView : IEquatable<EventFilterSpecByEntity_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(EventFilterSpecByEntity_LinkedView eventFilterSpecByEntity_LinkedView)
        {
            return (eventFilterSpecByEntity_LinkedView != null && ((this.Entity == null && eventFilterSpecByEntity_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(eventFilterSpecByEntity_LinkedView.Entity))));
        }

        public override bool Equals(object eventFilterSpecByEntity_LinkedView)
        {
            return Equals(eventFilterSpecByEntity_LinkedView as EventFilterSpecByEntity_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class EventFilterSpecByTime : DynamicData, IEquatable<EventFilterSpecByTime>
    {
        public DateTime? BeginTime { get; set; }

        public DateTime? EndTime { get; set; }

        public bool Equals(EventFilterSpecByTime eventFilterSpecByTime)
        {
            return (eventFilterSpecByTime != null && ((this.BeginTime == null && eventFilterSpecByTime.BeginTime == null) || (this.BeginTime != null && this.BeginTime.Equals(eventFilterSpecByTime.BeginTime))) && ((this.EndTime == null && eventFilterSpecByTime.EndTime == null) || (this.EndTime != null && this.EndTime.Equals(eventFilterSpecByTime.EndTime))));
        }

        public override bool Equals(object eventFilterSpecByTime)
        {
            return Equals(eventFilterSpecByTime as EventFilterSpecByTime);
        }

        public override int GetHashCode()
        {
            return (BeginTime + "_" + EndTime).GetHashCode();
        }
    }

    public class EventFilterSpecByUsername : DynamicData, IEquatable<EventFilterSpecByUsername>
    {
        public bool SystemUser { get; set; }

        public string[] UserList { get; set; }

        public bool Equals(EventFilterSpecByUsername eventFilterSpecByUsername)
        {
            return (eventFilterSpecByUsername != null && this.SystemUser == eventFilterSpecByUsername.SystemUser && ((this.UserList == null && eventFilterSpecByUsername.UserList == null) || (this.UserList != null && eventFilterSpecByUsername.UserList != null && Enumerable.SequenceEqual(this.UserList, eventFilterSpecByUsername.UserList))));
        }

        public override bool Equals(object eventFilterSpecByUsername)
        {
            return Equals(eventFilterSpecByUsername as EventFilterSpecByUsername);
        }

        public override int GetHashCode()
        {
            return (SystemUser + "_" + UserList).GetHashCode();
        }
    }

    public class EventHistoryCollector : HistoryCollector, IEquatable<EventHistoryCollector>
    {
        public Event[] LatestPage { get; set; }

        public Event[] ReadNextEvents(int maxCount)
        {
            return default(Event[]);
        }

        public Event[] ReadPreviousEvents(int maxCount)
        {
            return default(Event[]);
        }

        public bool Equals(EventHistoryCollector eventHistoryCollector)
        {
            return (eventHistoryCollector != null && ((this.LatestPage == null && eventHistoryCollector.LatestPage == null) || (this.LatestPage != null && eventHistoryCollector.LatestPage != null && Enumerable.SequenceEqual(this.LatestPage, eventHistoryCollector.LatestPage))));
        }

        public override bool Equals(object eventHistoryCollector)
        {
            return Equals(eventHistoryCollector as EventHistoryCollector);
        }

        public override int GetHashCode()
        {
            return (LatestPage).GetHashCode();
        }
    }

    public class EventManager : ViewBase, IEquatable<EventManager>
    {
        public EventDescription Description { get; set; }

        public Event LatestEvent { get; set; }

        public int MaxCollector { get; set; }

        public EventArgDesc[] RetrieveArgumentDescription(string eventTypeId)
        {
            return default(EventArgDesc[]);
        }

        public ManagedObjectReference CreateCollectorForEvents(EventFilterSpec filter)
        {
            return default(ManagedObjectReference);
        }

        public void LogUserEvent(ManagedObjectReference entity, string msg)
        {
        }

        public Event[] QueryEvents(EventFilterSpec filter)
        {
            return default(Event[]);
        }

        public void PostEvent(Event eventToPost, TaskInfo taskInfo)
        {
        }

        public bool Equals(EventManager eventManager)
        {
            return (eventManager != null && ((this.Description == null && eventManager.Description == null) || (this.Description != null && this.Description.Equals(eventManager.Description))) && ((this.LatestEvent == null && eventManager.LatestEvent == null) || (this.LatestEvent != null && this.LatestEvent.Equals(eventManager.LatestEvent))) && this.MaxCollector == eventManager.MaxCollector);
        }

        public override bool Equals(object eventManager)
        {
            return Equals(eventManager as EventManager);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + LatestEvent + "_" + MaxCollector).GetHashCode();
        }
    }

    public class ExitedStandbyModeEvent : HostEvent, IEquatable<ExitedStandbyModeEvent>
    {
        public bool Equals(ExitedStandbyModeEvent exitedStandbyModeEvent)
        {
            return (exitedStandbyModeEvent != null && base.Equals(exitedStandbyModeEvent));
        }

        public override bool Equals(object exitedStandbyModeEvent)
        {
            return Equals(exitedStandbyModeEvent as ExitedStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExitingStandbyModeEvent : HostEvent, IEquatable<ExitingStandbyModeEvent>
    {
        public bool Equals(ExitingStandbyModeEvent exitingStandbyModeEvent)
        {
            return (exitingStandbyModeEvent != null && base.Equals(exitingStandbyModeEvent));
        }

        public override bool Equals(object exitingStandbyModeEvent)
        {
            return Equals(exitingStandbyModeEvent as ExitingStandbyModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExitMaintenanceModeEvent : HostEvent, IEquatable<ExitMaintenanceModeEvent>
    {
        public bool Equals(ExitMaintenanceModeEvent exitMaintenanceModeEvent)
        {
            return (exitMaintenanceModeEvent != null && base.Equals(exitMaintenanceModeEvent));
        }

        public override bool Equals(object exitMaintenanceModeEvent)
        {
            return Equals(exitMaintenanceModeEvent as ExitMaintenanceModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExitStandbyModeFailedEvent : HostEvent, IEquatable<ExitStandbyModeFailedEvent>
    {
        public bool Equals(ExitStandbyModeFailedEvent exitStandbyModeFailedEvent)
        {
            return (exitStandbyModeFailedEvent != null && base.Equals(exitStandbyModeFailedEvent));
        }

        public override bool Equals(object exitStandbyModeFailedEvent)
        {
            return Equals(exitStandbyModeFailedEvent as ExitStandbyModeFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExpiredAddonLicense : ExpiredFeatureLicense, IEquatable<ExpiredAddonLicense>
    {
        public bool Equals(ExpiredAddonLicense expiredAddonLicense)
        {
            return (expiredAddonLicense != null && base.Equals(expiredAddonLicense));
        }

        public override bool Equals(object expiredAddonLicense)
        {
            return Equals(expiredAddonLicense as ExpiredAddonLicense);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExpiredEditionLicense : ExpiredFeatureLicense, IEquatable<ExpiredEditionLicense>
    {
        public bool Equals(ExpiredEditionLicense expiredEditionLicense)
        {
            return (expiredEditionLicense != null && base.Equals(expiredEditionLicense));
        }

        public override bool Equals(object expiredEditionLicense)
        {
            return Equals(expiredEditionLicense as ExpiredEditionLicense);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ExpiredFeatureLicense : NotEnoughLicenses, IEquatable<ExpiredFeatureLicense>
    {
        public string Feature { get; set; }

        public int Count { get; set; }

        public DateTime ExpirationDate { get; set; }

        public bool Equals(ExpiredFeatureLicense expiredFeatureLicense)
        {
            return (expiredFeatureLicense != null && this.Feature == expiredFeatureLicense.Feature && this.Count == expiredFeatureLicense.Count && this.ExpirationDate == expiredFeatureLicense.ExpirationDate);
        }

        public override bool Equals(object expiredFeatureLicense)
        {
            return Equals(expiredFeatureLicense as ExpiredFeatureLicense);
        }

        public override int GetHashCode()
        {
            return (Feature + "_" + Count + "_" + ExpirationDate).GetHashCode();
        }
    }

    public class ExtendedDescription : Description, IEquatable<ExtendedDescription>
    {
        public string MessageCatalogKeyPrefix { get; set; }

        public KeyAnyValue[] MessageArg { get; set; }

        public bool Equals(ExtendedDescription extendedDescription)
        {
            return (extendedDescription != null && this.MessageCatalogKeyPrefix == extendedDescription.MessageCatalogKeyPrefix && ((this.MessageArg == null && extendedDescription.MessageArg == null) || (this.MessageArg != null && extendedDescription.MessageArg != null && Enumerable.SequenceEqual(this.MessageArg, extendedDescription.MessageArg))));
        }

        public override bool Equals(object extendedDescription)
        {
            return Equals(extendedDescription as ExtendedDescription);
        }

        public override int GetHashCode()
        {
            return (MessageCatalogKeyPrefix + "_" + MessageArg).GetHashCode();
        }
    }

    public class ExtendedElementDescription : ElementDescription, IEquatable<ExtendedElementDescription>
    {
        public string MessageCatalogKeyPrefix { get; set; }

        public KeyAnyValue[] MessageArg { get; set; }

        public bool Equals(ExtendedElementDescription extendedElementDescription)
        {
            return (extendedElementDescription != null && this.MessageCatalogKeyPrefix == extendedElementDescription.MessageCatalogKeyPrefix && ((this.MessageArg == null && extendedElementDescription.MessageArg == null) || (this.MessageArg != null && extendedElementDescription.MessageArg != null && Enumerable.SequenceEqual(this.MessageArg, extendedElementDescription.MessageArg))));
        }

        public override bool Equals(object extendedElementDescription)
        {
            return Equals(extendedElementDescription as ExtendedElementDescription);
        }

        public override int GetHashCode()
        {
            return (MessageCatalogKeyPrefix + "_" + MessageArg).GetHashCode();
        }
    }

    public class ExtendedEvent : GeneralEvent, IEquatable<ExtendedEvent>
    {
        public string EventTypeId { get; set; }

        public ManagedObjectReference ManagedObject { get; set; }

        public ExtendedEventPair[] Data { get; set; }

        public bool Equals(ExtendedEvent extendedEvent)
        {
            return (extendedEvent != null && this.EventTypeId == extendedEvent.EventTypeId && ((this.ManagedObject == null && extendedEvent.ManagedObject == null) || (this.ManagedObject != null && this.ManagedObject.Equals(extendedEvent.ManagedObject))) && ((this.Data == null && extendedEvent.Data == null) || (this.Data != null && extendedEvent.Data != null && Enumerable.SequenceEqual(this.Data, extendedEvent.Data))));
        }

        public override bool Equals(object extendedEvent)
        {
            return Equals(extendedEvent as ExtendedEvent);
        }

        public override int GetHashCode()
        {
            return (EventTypeId + "_" + ManagedObject + "_" + Data).GetHashCode();
        }
    }

    public class ExtendedEventPair : DynamicData, IEquatable<ExtendedEventPair>
    {
        public string Key { get; set; }

        public string Value { get; set; }

        public bool Equals(ExtendedEventPair extendedEventPair)
        {
            return (extendedEventPair != null && this.Key == extendedEventPair.Key && this.Value == extendedEventPair.Value);
        }

        public override bool Equals(object extendedEventPair)
        {
            return Equals(extendedEventPair as ExtendedEventPair);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value).GetHashCode();
        }
    }

    public class ExtendedFault : VimFault, IEquatable<ExtendedFault>
    {
        public string FaultTypeId { get; set; }

        public KeyValue[] Data { get; set; }

        public bool Equals(ExtendedFault extendedFault)
        {
            return (extendedFault != null && this.FaultTypeId == extendedFault.FaultTypeId && ((this.Data == null && extendedFault.Data == null) || (this.Data != null && extendedFault.Data != null && Enumerable.SequenceEqual(this.Data, extendedFault.Data))));
        }

        public override bool Equals(object extendedFault)
        {
            return Equals(extendedFault as ExtendedFault);
        }

        public override int GetHashCode()
        {
            return (FaultTypeId + "_" + Data).GetHashCode();
        }
    }

    public class ExtensibleManagedObject : ViewBase, IEquatable<ExtensibleManagedObject>
    {
        public CustomFieldValue[] Value { get; set; }

        public CustomFieldDef[] AvailableField { get; set; }

        public void setCustomValue(string key, string value)
        {
        }

        public bool Equals(ExtensibleManagedObject extensibleManagedObject)
        {
            return (extensibleManagedObject != null && ((this.Value == null && extensibleManagedObject.Value == null) || (this.Value != null && extensibleManagedObject.Value != null && Enumerable.SequenceEqual(this.Value, extensibleManagedObject.Value))) && ((this.AvailableField == null && extensibleManagedObject.AvailableField == null) || (this.AvailableField != null && extensibleManagedObject.AvailableField != null && Enumerable.SequenceEqual(this.AvailableField, extensibleManagedObject.AvailableField))));
        }

        public override bool Equals(object extensibleManagedObject)
        {
            return Equals(extensibleManagedObject as ExtensibleManagedObject);
        }

        public override int GetHashCode()
        {
            return (Value + "_" + AvailableField).GetHashCode();
        }
    }

    public class Extension : DynamicData, IEquatable<Extension>
    {
        public Description Description { get; set; }

        public string Key { get; set; }

        public string Company { get; set; }

        public string Type { get; set; }

        public string Version { get; set; }

        public string SubjectName { get; set; }

        public ExtensionServerInfo[] Server { get; set; }

        public ExtensionClientInfo[] Client { get; set; }

        public ExtensionTaskTypeInfo[] TaskList { get; set; }

        public ExtensionEventTypeInfo[] EventList { get; set; }

        public ExtensionFaultTypeInfo[] FaultList { get; set; }

        public ExtensionPrivilegeInfo[] PrivilegeList { get; set; }

        public ExtensionResourceInfo[] ResourceList { get; set; }

        public DateTime LastHeartbeatTime { get; set; }

        public ExtensionHealthInfo HealthInfo { get; set; }

        public ExtensionOvfConsumerInfo OvfConsumerInfo { get; set; }

        public ExtExtendedProductInfo ExtendedProductInfo { get; set; }

        public ExtManagedEntityInfo[] ManagedEntityInfo { get; set; }

        public bool? ShownInSolutionManager { get; set; }

        public ExtSolutionManagerInfo SolutionManagerInfo { get; set; }

        public bool Equals(Extension extension)
        {
            return (extension != null && ((this.Description == null && extension.Description == null) || (this.Description != null && this.Description.Equals(extension.Description))) && this.Key == extension.Key && this.Company == extension.Company && this.Type == extension.Type && this.Version == extension.Version && this.SubjectName == extension.SubjectName && ((this.Server == null && extension.Server == null) || (this.Server != null && extension.Server != null && Enumerable.SequenceEqual(this.Server, extension.Server))) && ((this.Client == null && extension.Client == null) || (this.Client != null && extension.Client != null && Enumerable.SequenceEqual(this.Client, extension.Client))) && ((this.TaskList == null && extension.TaskList == null) || (this.TaskList != null && extension.TaskList != null && Enumerable.SequenceEqual(this.TaskList, extension.TaskList))) && ((this.EventList == null && extension.EventList == null) || (this.EventList != null && extension.EventList != null && Enumerable.SequenceEqual(this.EventList, extension.EventList))) && ((this.FaultList == null && extension.FaultList == null) || (this.FaultList != null && extension.FaultList != null && Enumerable.SequenceEqual(this.FaultList, extension.FaultList))) && ((this.PrivilegeList == null && extension.PrivilegeList == null) || (this.PrivilegeList != null && extension.PrivilegeList != null && Enumerable.SequenceEqual(this.PrivilegeList, extension.PrivilegeList))) && ((this.ResourceList == null && extension.ResourceList == null) || (this.ResourceList != null && extension.ResourceList != null && Enumerable.SequenceEqual(this.ResourceList, extension.ResourceList))) && this.LastHeartbeatTime == extension.LastHeartbeatTime && ((this.HealthInfo == null && extension.HealthInfo == null) || (this.HealthInfo != null && this.HealthInfo.Equals(extension.HealthInfo))) && ((this.OvfConsumerInfo == null && extension.OvfConsumerInfo == null) || (this.OvfConsumerInfo != null && this.OvfConsumerInfo.Equals(extension.OvfConsumerInfo))) && ((this.ExtendedProductInfo == null && extension.ExtendedProductInfo == null) || (this.ExtendedProductInfo != null && this.ExtendedProductInfo.Equals(extension.ExtendedProductInfo))) && ((this.ManagedEntityInfo == null && extension.ManagedEntityInfo == null) || (this.ManagedEntityInfo != null && extension.ManagedEntityInfo != null && Enumerable.SequenceEqual(this.ManagedEntityInfo, extension.ManagedEntityInfo))) && ((this.ShownInSolutionManager == null && extension.ShownInSolutionManager == null) || (this.ShownInSolutionManager != null && this.ShownInSolutionManager.Equals(extension.ShownInSolutionManager))) && ((this.SolutionManagerInfo == null && extension.SolutionManagerInfo == null) || (this.SolutionManagerInfo != null && this.SolutionManagerInfo.Equals(extension.SolutionManagerInfo))));
        }

        public override bool Equals(object extension)
        {
            return Equals(extension as Extension);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + Key + "_" + Company + "_" + Type + "_" + Version + "_" + SubjectName + "_" + Server + "_" + Client + "_" + TaskList + "_" + EventList + "_" + FaultList + "_" + PrivilegeList + "_" + ResourceList + "_" + LastHeartbeatTime + "_" + HealthInfo + "_" + OvfConsumerInfo + "_" + ExtendedProductInfo + "_" + ManagedEntityInfo + "_" + ShownInSolutionManager + "_" + SolutionManagerInfo).GetHashCode();
        }
    }

    public class ExtensionClientInfo : DynamicData, IEquatable<ExtensionClientInfo>
    {
        public string Version { get; set; }

        public Description Description { get; set; }

        public string Company { get; set; }

        public string Type { get; set; }

        public string Url { get; set; }

        public bool Equals(ExtensionClientInfo extensionClientInfo)
        {
            return (extensionClientInfo != null && this.Version == extensionClientInfo.Version && ((this.Description == null && extensionClientInfo.Description == null) || (this.Description != null && this.Description.Equals(extensionClientInfo.Description))) && this.Company == extensionClientInfo.Company && this.Type == extensionClientInfo.Type && this.Url == extensionClientInfo.Url);
        }

        public override bool Equals(object extensionClientInfo)
        {
            return Equals(extensionClientInfo as ExtensionClientInfo);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + Description + "_" + Company + "_" + Type + "_" + Url).GetHashCode();
        }
    }

    public class ExtensionEventTypeInfo : DynamicData, IEquatable<ExtensionEventTypeInfo>
    {
        public string EventID { get; set; }

        public string EventTypeSchema { get; set; }

        public bool Equals(ExtensionEventTypeInfo extensionEventTypeInfo)
        {
            return (extensionEventTypeInfo != null && this.EventID == extensionEventTypeInfo.EventID && this.EventTypeSchema == extensionEventTypeInfo.EventTypeSchema);
        }

        public override bool Equals(object extensionEventTypeInfo)
        {
            return Equals(extensionEventTypeInfo as ExtensionEventTypeInfo);
        }

        public override int GetHashCode()
        {
            return (EventID + "_" + EventTypeSchema).GetHashCode();
        }
    }

    public class ExtensionFaultTypeInfo : DynamicData, IEquatable<ExtensionFaultTypeInfo>
    {
        public string FaultID { get; set; }

        public bool Equals(ExtensionFaultTypeInfo extensionFaultTypeInfo)
        {
            return (extensionFaultTypeInfo != null && this.FaultID == extensionFaultTypeInfo.FaultID);
        }

        public override bool Equals(object extensionFaultTypeInfo)
        {
            return Equals(extensionFaultTypeInfo as ExtensionFaultTypeInfo);
        }

        public override int GetHashCode()
        {
            return (FaultID).GetHashCode();
        }
    }

    public class ExtensionHealthInfo : DynamicData, IEquatable<ExtensionHealthInfo>
    {
        public string Url { get; set; }

        public bool Equals(ExtensionHealthInfo extensionHealthInfo)
        {
            return (extensionHealthInfo != null && this.Url == extensionHealthInfo.Url);
        }

        public override bool Equals(object extensionHealthInfo)
        {
            return Equals(extensionHealthInfo as ExtensionHealthInfo);
        }

        public override int GetHashCode()
        {
            return (Url).GetHashCode();
        }
    }

    public class ExtensionManager : ViewBase, IEquatable<ExtensionManager>
    {
        public Extension[] ExtensionList { get; set; }

        public void UnregisterExtension(string extensionKey)
        {
        }

        public Extension FindExtension(string extensionKey)
        {
            return default(Extension);
        }

        public void RegisterExtension(Extension extension)
        {
        }

        public void UpdateExtension(Extension extension)
        {
        }

        public string GetPublicKey()
        {
            return default(string);
        }

        public void SetPublicKey(string extensionKey, string publicKey)
        {
        }

        public void SetExtensionCertificate(string extensionKey, string certificatePem)
        {
        }

        public ManagedObjectReference[] QueryManagedBy(string extensionKey)
        {
            return default(ManagedObjectReference[]);
        }

        public ExtensionManagerIpAllocationUsage[] QueryExtensionIpAllocationUsage(string[] extensionKeys)
        {
            return default(ExtensionManagerIpAllocationUsage[]);
        }

        public bool Equals(ExtensionManager extensionManager)
        {
            return (extensionManager != null && ((this.ExtensionList == null && extensionManager.ExtensionList == null) || (this.ExtensionList != null && extensionManager.ExtensionList != null && Enumerable.SequenceEqual(this.ExtensionList, extensionManager.ExtensionList))));
        }

        public override bool Equals(object extensionManager)
        {
            return Equals(extensionManager as ExtensionManager);
        }

        public override int GetHashCode()
        {
            return (ExtensionList).GetHashCode();
        }
    }

    public class ExtensionManagerIpAllocationUsage : DynamicData, IEquatable<ExtensionManagerIpAllocationUsage>
    {
        public string ExtensionKey { get; set; }

        public int NumAddresses { get; set; }

        public bool Equals(ExtensionManagerIpAllocationUsage extensionManagerIpAllocationUsage)
        {
            return (extensionManagerIpAllocationUsage != null && this.ExtensionKey == extensionManagerIpAllocationUsage.ExtensionKey && this.NumAddresses == extensionManagerIpAllocationUsage.NumAddresses);
        }

        public override bool Equals(object extensionManagerIpAllocationUsage)
        {
            return Equals(extensionManagerIpAllocationUsage as ExtensionManagerIpAllocationUsage);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + NumAddresses).GetHashCode();
        }
    }

    public class ExtensionOvfConsumerInfo : DynamicData, IEquatable<ExtensionOvfConsumerInfo>
    {
        public string CallbackUrl { get; set; }

        public string[] SectionType { get; set; }

        public bool Equals(ExtensionOvfConsumerInfo extensionOvfConsumerInfo)
        {
            return (extensionOvfConsumerInfo != null && this.CallbackUrl == extensionOvfConsumerInfo.CallbackUrl && ((this.SectionType == null && extensionOvfConsumerInfo.SectionType == null) || (this.SectionType != null && extensionOvfConsumerInfo.SectionType != null && Enumerable.SequenceEqual(this.SectionType, extensionOvfConsumerInfo.SectionType))));
        }

        public override bool Equals(object extensionOvfConsumerInfo)
        {
            return Equals(extensionOvfConsumerInfo as ExtensionOvfConsumerInfo);
        }

        public override int GetHashCode()
        {
            return (CallbackUrl + "_" + SectionType).GetHashCode();
        }
    }

    public class ExtensionPrivilegeInfo : DynamicData, IEquatable<ExtensionPrivilegeInfo>
    {
        public string PrivID { get; set; }

        public string PrivGroupName { get; set; }

        public bool Equals(ExtensionPrivilegeInfo extensionPrivilegeInfo)
        {
            return (extensionPrivilegeInfo != null && this.PrivID == extensionPrivilegeInfo.PrivID && this.PrivGroupName == extensionPrivilegeInfo.PrivGroupName);
        }

        public override bool Equals(object extensionPrivilegeInfo)
        {
            return Equals(extensionPrivilegeInfo as ExtensionPrivilegeInfo);
        }

        public override int GetHashCode()
        {
            return (PrivID + "_" + PrivGroupName).GetHashCode();
        }
    }

    public class ExtensionResourceInfo : DynamicData, IEquatable<ExtensionResourceInfo>
    {
        public string Locale { get; set; }

        public string Module { get; set; }

        public KeyValue[] Data { get; set; }

        public bool Equals(ExtensionResourceInfo extensionResourceInfo)
        {
            return (extensionResourceInfo != null && this.Locale == extensionResourceInfo.Locale && this.Module == extensionResourceInfo.Module && ((this.Data == null && extensionResourceInfo.Data == null) || (this.Data != null && extensionResourceInfo.Data != null && Enumerable.SequenceEqual(this.Data, extensionResourceInfo.Data))));
        }

        public override bool Equals(object extensionResourceInfo)
        {
            return Equals(extensionResourceInfo as ExtensionResourceInfo);
        }

        public override int GetHashCode()
        {
            return (Locale + "_" + Module + "_" + Data).GetHashCode();
        }
    }

    public class ExtensionServerInfo : DynamicData, IEquatable<ExtensionServerInfo>
    {
        public string Url { get; set; }

        public Description Description { get; set; }

        public string Company { get; set; }

        public string Type { get; set; }

        public string[] AdminEmail { get; set; }

        public string ServerThumbprint { get; set; }

        public bool Equals(ExtensionServerInfo extensionServerInfo)
        {
            return (extensionServerInfo != null && this.Url == extensionServerInfo.Url && ((this.Description == null && extensionServerInfo.Description == null) || (this.Description != null && this.Description.Equals(extensionServerInfo.Description))) && this.Company == extensionServerInfo.Company && this.Type == extensionServerInfo.Type && ((this.AdminEmail == null && extensionServerInfo.AdminEmail == null) || (this.AdminEmail != null && extensionServerInfo.AdminEmail != null && Enumerable.SequenceEqual(this.AdminEmail, extensionServerInfo.AdminEmail))) && this.ServerThumbprint == extensionServerInfo.ServerThumbprint);
        }

        public override bool Equals(object extensionServerInfo)
        {
            return Equals(extensionServerInfo as ExtensionServerInfo);
        }

        public override int GetHashCode()
        {
            return (Url + "_" + Description + "_" + Company + "_" + Type + "_" + AdminEmail + "_" + ServerThumbprint).GetHashCode();
        }
    }

    public class ExtensionTaskTypeInfo : DynamicData, IEquatable<ExtensionTaskTypeInfo>
    {
        public string TaskID { get; set; }

        public bool Equals(ExtensionTaskTypeInfo extensionTaskTypeInfo)
        {
            return (extensionTaskTypeInfo != null && this.TaskID == extensionTaskTypeInfo.TaskID);
        }

        public override bool Equals(object extensionTaskTypeInfo)
        {
            return Equals(extensionTaskTypeInfo as ExtensionTaskTypeInfo);
        }

        public override int GetHashCode()
        {
            return (TaskID).GetHashCode();
        }
    }

    public class ExtExtendedProductInfo : DynamicData, IEquatable<ExtExtendedProductInfo>
    {
        public string CompanyUrl { get; set; }

        public string ProductUrl { get; set; }

        public string ManagementUrl { get; set; }

        public ManagedObjectReference Self { get; set; }

        public ExtExtendedProductInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ExtExtendedProductInfo extExtendedProductInfo)
        {
            return (extExtendedProductInfo != null && this.CompanyUrl == extExtendedProductInfo.CompanyUrl && this.ProductUrl == extExtendedProductInfo.ProductUrl && this.ManagementUrl == extExtendedProductInfo.ManagementUrl && ((this.Self == null && extExtendedProductInfo.Self == null) || (this.Self != null && this.Self.Equals(extExtendedProductInfo.Self))) && ((this.LinkedView == null && extExtendedProductInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(extExtendedProductInfo.LinkedView))));
        }

        public override bool Equals(object extExtendedProductInfo)
        {
            return Equals(extExtendedProductInfo as ExtExtendedProductInfo);
        }

        public override int GetHashCode()
        {
            return (CompanyUrl + "_" + ProductUrl + "_" + ManagementUrl + "_" + Self + "_" + LinkedView).GetHashCode();
        }
    }

    public class ExtExtendedProductInfo_LinkedView : IEquatable<ExtExtendedProductInfo_LinkedView>
    {
        public ManagedEntity Self { get; set; }

        public bool Equals(ExtExtendedProductInfo_LinkedView extExtendedProductInfo_LinkedView)
        {
            return (extExtendedProductInfo_LinkedView != null && ((this.Self == null && extExtendedProductInfo_LinkedView.Self == null) || (this.Self != null && this.Self.Equals(extExtendedProductInfo_LinkedView.Self))));
        }

        public override bool Equals(object extExtendedProductInfo_LinkedView)
        {
            return Equals(extExtendedProductInfo_LinkedView as ExtExtendedProductInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Self).GetHashCode();
        }
    }

    public class ExtManagedEntityInfo : DynamicData, IEquatable<ExtManagedEntityInfo>
    {
        public string Type { get; set; }

        public string SmallIconUrl { get; set; }

        public string IconUrl { get; set; }

        public string Description { get; set; }

        public bool Equals(ExtManagedEntityInfo extManagedEntityInfo)
        {
            return (extManagedEntityInfo != null && this.Type == extManagedEntityInfo.Type && this.SmallIconUrl == extManagedEntityInfo.SmallIconUrl && this.IconUrl == extManagedEntityInfo.IconUrl && this.Description == extManagedEntityInfo.Description);
        }

        public override bool Equals(object extManagedEntityInfo)
        {
            return Equals(extManagedEntityInfo as ExtManagedEntityInfo);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + SmallIconUrl + "_" + IconUrl + "_" + Description).GetHashCode();
        }
    }

    public class ExtSolutionManagerInfo : DynamicData, IEquatable<ExtSolutionManagerInfo>
    {
        public ExtSolutionManagerInfoTabInfo[] Tab { get; set; }

        public string SmallIconUrl { get; set; }

        public bool Equals(ExtSolutionManagerInfo extSolutionManagerInfo)
        {
            return (extSolutionManagerInfo != null && ((this.Tab == null && extSolutionManagerInfo.Tab == null) || (this.Tab != null && extSolutionManagerInfo.Tab != null && Enumerable.SequenceEqual(this.Tab, extSolutionManagerInfo.Tab))) && this.SmallIconUrl == extSolutionManagerInfo.SmallIconUrl);
        }

        public override bool Equals(object extSolutionManagerInfo)
        {
            return Equals(extSolutionManagerInfo as ExtSolutionManagerInfo);
        }

        public override int GetHashCode()
        {
            return (Tab + "_" + SmallIconUrl).GetHashCode();
        }
    }

    public class ExtSolutionManagerInfoTabInfo : DynamicData, IEquatable<ExtSolutionManagerInfoTabInfo>
    {
        public string Label { get; set; }

        public string Url { get; set; }

        public bool Equals(ExtSolutionManagerInfoTabInfo extSolutionManagerInfoTabInfo)
        {
            return (extSolutionManagerInfoTabInfo != null && this.Label == extSolutionManagerInfoTabInfo.Label && this.Url == extSolutionManagerInfoTabInfo.Url);
        }

        public override bool Equals(object extSolutionManagerInfoTabInfo)
        {
            return Equals(extSolutionManagerInfoTabInfo as ExtSolutionManagerInfoTabInfo);
        }

        public override int GetHashCode()
        {
            return (Label + "_" + Url).GetHashCode();
        }
    }

    public class FailoverClusterConfigurator : ViewBase, IEquatable<FailoverClusterConfigurator>
    {
        public string[] DisabledConfigureMethod { get; set; }

        public ManagedObjectReference prepareVcha_Task(VchaClusterNetworkSpec networkSpec)
        {
            return default(ManagedObjectReference);
        }

        public void prepareVcha(VchaClusterNetworkSpec networkSpec)
        {
        }

        public ManagedObjectReference deployVcha_Task(VchaClusterDeploymentSpec deploymentSpec)
        {
            return default(ManagedObjectReference);
        }

        public void deployVcha(VchaClusterDeploymentSpec deploymentSpec)
        {
        }

        public ManagedObjectReference configureVcha_Task(VchaClusterConfigSpec configSpec)
        {
            return default(ManagedObjectReference);
        }

        public void configureVcha(VchaClusterConfigSpec configSpec)
        {
        }

        public ManagedObjectReference createPassiveNode_Task(PassiveNodeDeploymentSpec passiveDeploymentSpec, SourceNodeSpec sourceVcSpec)
        {
            return default(ManagedObjectReference);
        }

        public void createPassiveNode(PassiveNodeDeploymentSpec passiveDeploymentSpec, SourceNodeSpec sourceVcSpec)
        {
        }

        public ManagedObjectReference createWitnessNode_Task(NodeDeploymentSpec witnessDeploymentSpec, SourceNodeSpec sourceVcSpec)
        {
            return default(ManagedObjectReference);
        }

        public void createWitnessNode(NodeDeploymentSpec witnessDeploymentSpec, SourceNodeSpec sourceVcSpec)
        {
        }

        public VchaClusterConfigInfo getVchaConfig()
        {
            return default(VchaClusterConfigInfo);
        }

        public ManagedObjectReference destroyVcha_Task()
        {
            return default(ManagedObjectReference);
        }

        public void destroyVcha()
        {
        }

        public bool Equals(FailoverClusterConfigurator failoverClusterConfigurator)
        {
            return (failoverClusterConfigurator != null && ((this.DisabledConfigureMethod == null && failoverClusterConfigurator.DisabledConfigureMethod == null) || (this.DisabledConfigureMethod != null && failoverClusterConfigurator.DisabledConfigureMethod != null && Enumerable.SequenceEqual(this.DisabledConfigureMethod, failoverClusterConfigurator.DisabledConfigureMethod))));
        }

        public override bool Equals(object failoverClusterConfigurator)
        {
            return Equals(failoverClusterConfigurator as FailoverClusterConfigurator);
        }

        public override int GetHashCode()
        {
            return (DisabledConfigureMethod).GetHashCode();
        }
    }

    public class FailoverClusterManager : ViewBase, IEquatable<FailoverClusterManager>
    {
        public string[] DisabledClusterMethod { get; set; }

        public ManagedObjectReference setClusterMode_Task(string mode)
        {
            return default(ManagedObjectReference);
        }

        public void setClusterMode(string mode)
        {
        }

        public string getClusterMode()
        {
            return default(string);
        }

        public VchaClusterHealth GetVchaClusterHealth()
        {
            return default(VchaClusterHealth);
        }

        public ManagedObjectReference initiateFailover_Task(bool planned)
        {
            return default(ManagedObjectReference);
        }

        public void initiateFailover(bool planned)
        {
        }

        public bool Equals(FailoverClusterManager failoverClusterManager)
        {
            return (failoverClusterManager != null && ((this.DisabledClusterMethod == null && failoverClusterManager.DisabledClusterMethod == null) || (this.DisabledClusterMethod != null && failoverClusterManager.DisabledClusterMethod != null && Enumerable.SequenceEqual(this.DisabledClusterMethod, failoverClusterManager.DisabledClusterMethod))));
        }

        public override bool Equals(object failoverClusterManager)
        {
            return Equals(failoverClusterManager as FailoverClusterManager);
        }

        public override int GetHashCode()
        {
            return (DisabledClusterMethod).GetHashCode();
        }
    }

    public class FailoverLevelRestored : ClusterEvent, IEquatable<FailoverLevelRestored>
    {
        public bool Equals(FailoverLevelRestored failoverLevelRestored)
        {
            return (failoverLevelRestored != null && base.Equals(failoverLevelRestored));
        }

        public override bool Equals(object failoverLevelRestored)
        {
            return Equals(failoverLevelRestored as FailoverLevelRestored);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FailoverNodeInfo : DynamicData, IEquatable<FailoverNodeInfo>
    {
        public CustomizationIPSettings ClusterIpSettings { get; set; }

        public CustomizationIPSettings FailoverIp { get; set; }

        public string BiosUuid { get; set; }

        public bool Equals(FailoverNodeInfo failoverNodeInfo)
        {
            return (failoverNodeInfo != null && ((this.ClusterIpSettings == null && failoverNodeInfo.ClusterIpSettings == null) || (this.ClusterIpSettings != null && this.ClusterIpSettings.Equals(failoverNodeInfo.ClusterIpSettings))) && ((this.FailoverIp == null && failoverNodeInfo.FailoverIp == null) || (this.FailoverIp != null && this.FailoverIp.Equals(failoverNodeInfo.FailoverIp))) && this.BiosUuid == failoverNodeInfo.BiosUuid);
        }

        public override bool Equals(object failoverNodeInfo)
        {
            return Equals(failoverNodeInfo as FailoverNodeInfo);
        }

        public override int GetHashCode()
        {
            return (ClusterIpSettings + "_" + FailoverIp + "_" + BiosUuid).GetHashCode();
        }
    }

    public class FailToEnableSPBM : NotEnoughLicenses, IEquatable<FailToEnableSPBM>
    {
        public ManagedObjectReference Cs { get; set; }

        public string CsName { get; set; }

        public ComputeResourceHostSPBMLicenseInfo[] HostLicenseStates { get; set; }

        public FailToEnableSPBM_LinkedView LinkedView { get; set; }

        public bool Equals(FailToEnableSPBM failToEnableSPBM)
        {
            return (failToEnableSPBM != null && ((this.Cs == null && failToEnableSPBM.Cs == null) || (this.Cs != null && this.Cs.Equals(failToEnableSPBM.Cs))) && this.CsName == failToEnableSPBM.CsName && ((this.HostLicenseStates == null && failToEnableSPBM.HostLicenseStates == null) || (this.HostLicenseStates != null && failToEnableSPBM.HostLicenseStates != null && Enumerable.SequenceEqual(this.HostLicenseStates, failToEnableSPBM.HostLicenseStates))) && ((this.LinkedView == null && failToEnableSPBM.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(failToEnableSPBM.LinkedView))));
        }

        public override bool Equals(object failToEnableSPBM)
        {
            return Equals(failToEnableSPBM as FailToEnableSPBM);
        }

        public override int GetHashCode()
        {
            return (Cs + "_" + CsName + "_" + HostLicenseStates + "_" + LinkedView).GetHashCode();
        }
    }

    public class FailToEnableSPBM_LinkedView : IEquatable<FailToEnableSPBM_LinkedView>
    {
        public ComputeResource Cs { get; set; }

        public bool Equals(FailToEnableSPBM_LinkedView failToEnableSPBM_LinkedView)
        {
            return (failToEnableSPBM_LinkedView != null && ((this.Cs == null && failToEnableSPBM_LinkedView.Cs == null) || (this.Cs != null && this.Cs.Equals(failToEnableSPBM_LinkedView.Cs))));
        }

        public override bool Equals(object failToEnableSPBM_LinkedView)
        {
            return Equals(failToEnableSPBM_LinkedView as FailToEnableSPBM_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Cs).GetHashCode();
        }
    }

    public class FailToLockFaultToleranceVMs : RuntimeFault, IEquatable<FailToLockFaultToleranceVMs>
    {
        public string VmName { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference AlreadyLockedVm { get; set; }

        public FailToLockFaultToleranceVMs_LinkedView LinkedView { get; set; }

        public bool Equals(FailToLockFaultToleranceVMs failToLockFaultToleranceVMs)
        {
            return (failToLockFaultToleranceVMs != null && this.VmName == failToLockFaultToleranceVMs.VmName && ((this.Vm == null && failToLockFaultToleranceVMs.Vm == null) || (this.Vm != null && this.Vm.Equals(failToLockFaultToleranceVMs.Vm))) && ((this.AlreadyLockedVm == null && failToLockFaultToleranceVMs.AlreadyLockedVm == null) || (this.AlreadyLockedVm != null && this.AlreadyLockedVm.Equals(failToLockFaultToleranceVMs.AlreadyLockedVm))) && ((this.LinkedView == null && failToLockFaultToleranceVMs.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(failToLockFaultToleranceVMs.LinkedView))));
        }

        public override bool Equals(object failToLockFaultToleranceVMs)
        {
            return Equals(failToLockFaultToleranceVMs as FailToLockFaultToleranceVMs);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + Vm + "_" + AlreadyLockedVm + "_" + LinkedView).GetHashCode();
        }
    }

    public class FailToLockFaultToleranceVMs_LinkedView : IEquatable<FailToLockFaultToleranceVMs_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public VirtualMachine AlreadyLockedVm { get; set; }

        public bool Equals(FailToLockFaultToleranceVMs_LinkedView failToLockFaultToleranceVMs_LinkedView)
        {
            return (failToLockFaultToleranceVMs_LinkedView != null && ((this.Vm == null && failToLockFaultToleranceVMs_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(failToLockFaultToleranceVMs_LinkedView.Vm))) && ((this.AlreadyLockedVm == null && failToLockFaultToleranceVMs_LinkedView.AlreadyLockedVm == null) || (this.AlreadyLockedVm != null && this.AlreadyLockedVm.Equals(failToLockFaultToleranceVMs_LinkedView.AlreadyLockedVm))));
        }

        public override bool Equals(object failToLockFaultToleranceVMs_LinkedView)
        {
            return Equals(failToLockFaultToleranceVMs_LinkedView as FailToLockFaultToleranceVMs_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + AlreadyLockedVm).GetHashCode();
        }
    }

    public class FaultDomainId : DynamicData, IEquatable<FaultDomainId>
    {
        public string Id { get; set; }

        public bool Equals(FaultDomainId faultDomainId)
        {
            return (faultDomainId != null && this.Id == faultDomainId.Id);
        }

        public override bool Equals(object faultDomainId)
        {
            return Equals(faultDomainId as FaultDomainId);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class FaultsByHost : DynamicData, IEquatable<FaultsByHost>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault[] Faults { get; set; }

        public FaultsByHost_LinkedView LinkedView { get; set; }

        public bool Equals(FaultsByHost faultsByHost)
        {
            return (faultsByHost != null && ((this.Host == null && faultsByHost.Host == null) || (this.Host != null && this.Host.Equals(faultsByHost.Host))) && ((this.Faults == null && faultsByHost.Faults == null) || (this.Faults != null && faultsByHost.Faults != null && Enumerable.SequenceEqual(this.Faults, faultsByHost.Faults))) && ((this.LinkedView == null && faultsByHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultsByHost.LinkedView))));
        }

        public override bool Equals(object faultsByHost)
        {
            return Equals(faultsByHost as FaultsByHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Faults + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultsByHost_LinkedView : IEquatable<FaultsByHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(FaultsByHost_LinkedView faultsByHost_LinkedView)
        {
            return (faultsByHost_LinkedView != null && ((this.Host == null && faultsByHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(faultsByHost_LinkedView.Host))));
        }

        public override bool Equals(object faultsByHost_LinkedView)
        {
            return Equals(faultsByHost_LinkedView as FaultsByHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class FaultsByVM : DynamicData, IEquatable<FaultsByVM>
    {
        public ManagedObjectReference Vm { get; set; }

        public LocalizedMethodFault[] Faults { get; set; }

        public FaultsByVM_LinkedView LinkedView { get; set; }

        public bool Equals(FaultsByVM faultsByVM)
        {
            return (faultsByVM != null && ((this.Vm == null && faultsByVM.Vm == null) || (this.Vm != null && this.Vm.Equals(faultsByVM.Vm))) && ((this.Faults == null && faultsByVM.Faults == null) || (this.Faults != null && faultsByVM.Faults != null && Enumerable.SequenceEqual(this.Faults, faultsByVM.Faults))) && ((this.LinkedView == null && faultsByVM.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultsByVM.LinkedView))));
        }

        public override bool Equals(object faultsByVM)
        {
            return Equals(faultsByVM as FaultsByVM);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Faults + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultsByVM_LinkedView : IEquatable<FaultsByVM_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(FaultsByVM_LinkedView faultsByVM_LinkedView)
        {
            return (faultsByVM_LinkedView != null && ((this.Vm == null && faultsByVM_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(faultsByVM_LinkedView.Vm))));
        }

        public override bool Equals(object faultsByVM_LinkedView)
        {
            return Equals(faultsByVM_LinkedView as FaultsByVM_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class FaultToleranceAntiAffinityViolated : MigrationFault, IEquatable<FaultToleranceAntiAffinityViolated>
    {
        public string HostName { get; set; }

        public ManagedObjectReference Host { get; set; }

        public FaultToleranceAntiAffinityViolated_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceAntiAffinityViolated faultToleranceAntiAffinityViolated)
        {
            return (faultToleranceAntiAffinityViolated != null && this.HostName == faultToleranceAntiAffinityViolated.HostName && ((this.Host == null && faultToleranceAntiAffinityViolated.Host == null) || (this.Host != null && this.Host.Equals(faultToleranceAntiAffinityViolated.Host))) && ((this.LinkedView == null && faultToleranceAntiAffinityViolated.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceAntiAffinityViolated.LinkedView))));
        }

        public override bool Equals(object faultToleranceAntiAffinityViolated)
        {
            return Equals(faultToleranceAntiAffinityViolated as FaultToleranceAntiAffinityViolated);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceAntiAffinityViolated_LinkedView : IEquatable<FaultToleranceAntiAffinityViolated_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(FaultToleranceAntiAffinityViolated_LinkedView faultToleranceAntiAffinityViolated_LinkedView)
        {
            return (faultToleranceAntiAffinityViolated_LinkedView != null && ((this.Host == null && faultToleranceAntiAffinityViolated_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(faultToleranceAntiAffinityViolated_LinkedView.Host))));
        }

        public override bool Equals(object faultToleranceAntiAffinityViolated_LinkedView)
        {
            return Equals(faultToleranceAntiAffinityViolated_LinkedView as FaultToleranceAntiAffinityViolated_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class FaultToleranceCannotEditMem : VmConfigFault, IEquatable<FaultToleranceCannotEditMem>
    {
        public string VmName { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public FaultToleranceCannotEditMem_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceCannotEditMem faultToleranceCannotEditMem)
        {
            return (faultToleranceCannotEditMem != null && this.VmName == faultToleranceCannotEditMem.VmName && ((this.Vm == null && faultToleranceCannotEditMem.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceCannotEditMem.Vm))) && ((this.LinkedView == null && faultToleranceCannotEditMem.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceCannotEditMem.LinkedView))));
        }

        public override bool Equals(object faultToleranceCannotEditMem)
        {
            return Equals(faultToleranceCannotEditMem as FaultToleranceCannotEditMem);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceCannotEditMem_LinkedView : IEquatable<FaultToleranceCannotEditMem_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(FaultToleranceCannotEditMem_LinkedView faultToleranceCannotEditMem_LinkedView)
        {
            return (faultToleranceCannotEditMem_LinkedView != null && ((this.Vm == null && faultToleranceCannotEditMem_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceCannotEditMem_LinkedView.Vm))));
        }

        public override bool Equals(object faultToleranceCannotEditMem_LinkedView)
        {
            return Equals(faultToleranceCannotEditMem_LinkedView as FaultToleranceCannotEditMem_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class FaultToleranceConfigInfo : DynamicData, IEquatable<FaultToleranceConfigInfo>
    {
        public int Role { get; set; }

        public string[] InstanceUuids { get; set; }

        public string[] ConfigPaths { get; set; }

        public bool? Orphaned { get; set; }

        public bool Equals(FaultToleranceConfigInfo faultToleranceConfigInfo)
        {
            return (faultToleranceConfigInfo != null && this.Role == faultToleranceConfigInfo.Role && ((this.InstanceUuids == null && faultToleranceConfigInfo.InstanceUuids == null) || (this.InstanceUuids != null && faultToleranceConfigInfo.InstanceUuids != null && Enumerable.SequenceEqual(this.InstanceUuids, faultToleranceConfigInfo.InstanceUuids))) && ((this.ConfigPaths == null && faultToleranceConfigInfo.ConfigPaths == null) || (this.ConfigPaths != null && faultToleranceConfigInfo.ConfigPaths != null && Enumerable.SequenceEqual(this.ConfigPaths, faultToleranceConfigInfo.ConfigPaths))) && ((this.Orphaned == null && faultToleranceConfigInfo.Orphaned == null) || (this.Orphaned != null && this.Orphaned.Equals(faultToleranceConfigInfo.Orphaned))));
        }

        public override bool Equals(object faultToleranceConfigInfo)
        {
            return Equals(faultToleranceConfigInfo as FaultToleranceConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Role + "_" + InstanceUuids + "_" + ConfigPaths + "_" + Orphaned).GetHashCode();
        }
    }

    public class FaultToleranceConfigSpec : DynamicData, IEquatable<FaultToleranceConfigSpec>
    {
        public FaultToleranceMetaSpec MetaDataPath { get; set; }

        public FaultToleranceVMConfigSpec SecondaryVmSpec { get; set; }

        public bool Equals(FaultToleranceConfigSpec faultToleranceConfigSpec)
        {
            return (faultToleranceConfigSpec != null && ((this.MetaDataPath == null && faultToleranceConfigSpec.MetaDataPath == null) || (this.MetaDataPath != null && this.MetaDataPath.Equals(faultToleranceConfigSpec.MetaDataPath))) && ((this.SecondaryVmSpec == null && faultToleranceConfigSpec.SecondaryVmSpec == null) || (this.SecondaryVmSpec != null && this.SecondaryVmSpec.Equals(faultToleranceConfigSpec.SecondaryVmSpec))));
        }

        public override bool Equals(object faultToleranceConfigSpec)
        {
            return Equals(faultToleranceConfigSpec as FaultToleranceConfigSpec);
        }

        public override int GetHashCode()
        {
            return (MetaDataPath + "_" + SecondaryVmSpec).GetHashCode();
        }
    }

    public class FaultToleranceCpuIncompatible : CpuIncompatible, IEquatable<FaultToleranceCpuIncompatible>
    {
        public bool Model { get; set; }

        public bool Family { get; set; }

        public bool Stepping { get; set; }

        public new FaultToleranceCpuIncompatible_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceCpuIncompatible faultToleranceCpuIncompatible)
        {
            return (faultToleranceCpuIncompatible != null && this.Model == faultToleranceCpuIncompatible.Model && this.Family == faultToleranceCpuIncompatible.Family && this.Stepping == faultToleranceCpuIncompatible.Stepping && ((this.LinkedView == null && faultToleranceCpuIncompatible.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceCpuIncompatible.LinkedView))));
        }

        public override bool Equals(object faultToleranceCpuIncompatible)
        {
            return Equals(faultToleranceCpuIncompatible as FaultToleranceCpuIncompatible);
        }

        public override int GetHashCode()
        {
            return (Model + "_" + Family + "_" + Stepping + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceCpuIncompatible_LinkedView : CpuIncompatible_LinkedView, IEquatable<FaultToleranceCpuIncompatible_LinkedView>
    {
        public bool Equals(FaultToleranceCpuIncompatible_LinkedView faultToleranceCpuIncompatible_LinkedView)
        {
            return (faultToleranceCpuIncompatible_LinkedView != null && base.Equals(faultToleranceCpuIncompatible_LinkedView));
        }

        public override bool Equals(object faultToleranceCpuIncompatible_LinkedView)
        {
            return Equals(faultToleranceCpuIncompatible_LinkedView as FaultToleranceCpuIncompatible_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FaultToleranceDiskSpec : DynamicData, IEquatable<FaultToleranceDiskSpec>
    {
        public VirtualDevice Disk { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public FaultToleranceDiskSpec_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceDiskSpec faultToleranceDiskSpec)
        {
            return (faultToleranceDiskSpec != null && ((this.Disk == null && faultToleranceDiskSpec.Disk == null) || (this.Disk != null && this.Disk.Equals(faultToleranceDiskSpec.Disk))) && ((this.Datastore == null && faultToleranceDiskSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(faultToleranceDiskSpec.Datastore))) && ((this.LinkedView == null && faultToleranceDiskSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceDiskSpec.LinkedView))));
        }

        public override bool Equals(object faultToleranceDiskSpec)
        {
            return Equals(faultToleranceDiskSpec as FaultToleranceDiskSpec);
        }

        public override int GetHashCode()
        {
            return (Disk + "_" + Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceDiskSpec_LinkedView : IEquatable<FaultToleranceDiskSpec_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(FaultToleranceDiskSpec_LinkedView faultToleranceDiskSpec_LinkedView)
        {
            return (faultToleranceDiskSpec_LinkedView != null && ((this.Datastore == null && faultToleranceDiskSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(faultToleranceDiskSpec_LinkedView.Datastore))));
        }

        public override bool Equals(object faultToleranceDiskSpec_LinkedView)
        {
            return Equals(faultToleranceDiskSpec_LinkedView as FaultToleranceDiskSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class FaultToleranceMetaSpec : DynamicData, IEquatable<FaultToleranceMetaSpec>
    {
        public ManagedObjectReference MetaDataDatastore { get; set; }

        public FaultToleranceMetaSpec_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceMetaSpec faultToleranceMetaSpec)
        {
            return (faultToleranceMetaSpec != null && ((this.MetaDataDatastore == null && faultToleranceMetaSpec.MetaDataDatastore == null) || (this.MetaDataDatastore != null && this.MetaDataDatastore.Equals(faultToleranceMetaSpec.MetaDataDatastore))) && ((this.LinkedView == null && faultToleranceMetaSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceMetaSpec.LinkedView))));
        }

        public override bool Equals(object faultToleranceMetaSpec)
        {
            return Equals(faultToleranceMetaSpec as FaultToleranceMetaSpec);
        }

        public override int GetHashCode()
        {
            return (MetaDataDatastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceMetaSpec_LinkedView : IEquatable<FaultToleranceMetaSpec_LinkedView>
    {
        public Datastore MetaDataDatastore { get; set; }

        public bool Equals(FaultToleranceMetaSpec_LinkedView faultToleranceMetaSpec_LinkedView)
        {
            return (faultToleranceMetaSpec_LinkedView != null && ((this.MetaDataDatastore == null && faultToleranceMetaSpec_LinkedView.MetaDataDatastore == null) || (this.MetaDataDatastore != null && this.MetaDataDatastore.Equals(faultToleranceMetaSpec_LinkedView.MetaDataDatastore))));
        }

        public override bool Equals(object faultToleranceMetaSpec_LinkedView)
        {
            return Equals(faultToleranceMetaSpec_LinkedView as FaultToleranceMetaSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (MetaDataDatastore).GetHashCode();
        }
    }

    public class FaultToleranceNeedsThickDisk : MigrationFault, IEquatable<FaultToleranceNeedsThickDisk>
    {
        public string VmName { get; set; }

        public bool Equals(FaultToleranceNeedsThickDisk faultToleranceNeedsThickDisk)
        {
            return (faultToleranceNeedsThickDisk != null && this.VmName == faultToleranceNeedsThickDisk.VmName);
        }

        public override bool Equals(object faultToleranceNeedsThickDisk)
        {
            return Equals(faultToleranceNeedsThickDisk as FaultToleranceNeedsThickDisk);
        }

        public override int GetHashCode()
        {
            return (VmName).GetHashCode();
        }
    }

    public class FaultToleranceNotLicensed : VmFaultToleranceIssue, IEquatable<FaultToleranceNotLicensed>
    {
        public string HostName { get; set; }

        public bool Equals(FaultToleranceNotLicensed faultToleranceNotLicensed)
        {
            return (faultToleranceNotLicensed != null && this.HostName == faultToleranceNotLicensed.HostName);
        }

        public override bool Equals(object faultToleranceNotLicensed)
        {
            return Equals(faultToleranceNotLicensed as FaultToleranceNotLicensed);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class FaultToleranceNotSameBuild : MigrationFault, IEquatable<FaultToleranceNotSameBuild>
    {
        public string Build { get; set; }

        public bool Equals(FaultToleranceNotSameBuild faultToleranceNotSameBuild)
        {
            return (faultToleranceNotSameBuild != null && this.Build == faultToleranceNotSameBuild.Build);
        }

        public override bool Equals(object faultToleranceNotSameBuild)
        {
            return Equals(faultToleranceNotSameBuild as FaultToleranceNotSameBuild);
        }

        public override int GetHashCode()
        {
            return (Build).GetHashCode();
        }
    }

    public class FaultTolerancePrimaryConfigInfo : FaultToleranceConfigInfo, IEquatable<FaultTolerancePrimaryConfigInfo>
    {
        public ManagedObjectReference[] Secondaries { get; set; }

        public FaultTolerancePrimaryConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(FaultTolerancePrimaryConfigInfo faultTolerancePrimaryConfigInfo)
        {
            return (faultTolerancePrimaryConfigInfo != null && ((this.Secondaries == null && faultTolerancePrimaryConfigInfo.Secondaries == null) || (this.Secondaries != null && faultTolerancePrimaryConfigInfo.Secondaries != null && Enumerable.SequenceEqual(this.Secondaries, faultTolerancePrimaryConfigInfo.Secondaries))) && ((this.LinkedView == null && faultTolerancePrimaryConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultTolerancePrimaryConfigInfo.LinkedView))));
        }

        public override bool Equals(object faultTolerancePrimaryConfigInfo)
        {
            return Equals(faultTolerancePrimaryConfigInfo as FaultTolerancePrimaryConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Secondaries + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultTolerancePrimaryConfigInfo_LinkedView : IEquatable<FaultTolerancePrimaryConfigInfo_LinkedView>
    {
        public VirtualMachine[] Secondaries { get; set; }

        public bool Equals(FaultTolerancePrimaryConfigInfo_LinkedView faultTolerancePrimaryConfigInfo_LinkedView)
        {
            return (faultTolerancePrimaryConfigInfo_LinkedView != null && ((this.Secondaries == null && faultTolerancePrimaryConfigInfo_LinkedView.Secondaries == null) || (this.Secondaries != null && faultTolerancePrimaryConfigInfo_LinkedView.Secondaries != null && Enumerable.SequenceEqual(this.Secondaries, faultTolerancePrimaryConfigInfo_LinkedView.Secondaries))));
        }

        public override bool Equals(object faultTolerancePrimaryConfigInfo_LinkedView)
        {
            return Equals(faultTolerancePrimaryConfigInfo_LinkedView as FaultTolerancePrimaryConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Secondaries).GetHashCode();
        }
    }

    public class FaultTolerancePrimaryPowerOnNotAttempted : VmFaultToleranceIssue, IEquatable<FaultTolerancePrimaryPowerOnNotAttempted>
    {
        public ManagedObjectReference SecondaryVm { get; set; }

        public ManagedObjectReference PrimaryVm { get; set; }

        public FaultTolerancePrimaryPowerOnNotAttempted_LinkedView LinkedView { get; set; }

        public bool Equals(FaultTolerancePrimaryPowerOnNotAttempted faultTolerancePrimaryPowerOnNotAttempted)
        {
            return (faultTolerancePrimaryPowerOnNotAttempted != null && ((this.SecondaryVm == null && faultTolerancePrimaryPowerOnNotAttempted.SecondaryVm == null) || (this.SecondaryVm != null && this.SecondaryVm.Equals(faultTolerancePrimaryPowerOnNotAttempted.SecondaryVm))) && ((this.PrimaryVm == null && faultTolerancePrimaryPowerOnNotAttempted.PrimaryVm == null) || (this.PrimaryVm != null && this.PrimaryVm.Equals(faultTolerancePrimaryPowerOnNotAttempted.PrimaryVm))) && ((this.LinkedView == null && faultTolerancePrimaryPowerOnNotAttempted.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultTolerancePrimaryPowerOnNotAttempted.LinkedView))));
        }

        public override bool Equals(object faultTolerancePrimaryPowerOnNotAttempted)
        {
            return Equals(faultTolerancePrimaryPowerOnNotAttempted as FaultTolerancePrimaryPowerOnNotAttempted);
        }

        public override int GetHashCode()
        {
            return (SecondaryVm + "_" + PrimaryVm + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultTolerancePrimaryPowerOnNotAttempted_LinkedView : IEquatable<FaultTolerancePrimaryPowerOnNotAttempted_LinkedView>
    {
        public VirtualMachine SecondaryVm { get; set; }

        public VirtualMachine PrimaryVm { get; set; }

        public bool Equals(FaultTolerancePrimaryPowerOnNotAttempted_LinkedView faultTolerancePrimaryPowerOnNotAttempted_LinkedView)
        {
            return (faultTolerancePrimaryPowerOnNotAttempted_LinkedView != null && ((this.SecondaryVm == null && faultTolerancePrimaryPowerOnNotAttempted_LinkedView.SecondaryVm == null) || (this.SecondaryVm != null && this.SecondaryVm.Equals(faultTolerancePrimaryPowerOnNotAttempted_LinkedView.SecondaryVm))) && ((this.PrimaryVm == null && faultTolerancePrimaryPowerOnNotAttempted_LinkedView.PrimaryVm == null) || (this.PrimaryVm != null && this.PrimaryVm.Equals(faultTolerancePrimaryPowerOnNotAttempted_LinkedView.PrimaryVm))));
        }

        public override bool Equals(object faultTolerancePrimaryPowerOnNotAttempted_LinkedView)
        {
            return Equals(faultTolerancePrimaryPowerOnNotAttempted_LinkedView as FaultTolerancePrimaryPowerOnNotAttempted_LinkedView);
        }

        public override int GetHashCode()
        {
            return (SecondaryVm + "_" + PrimaryVm).GetHashCode();
        }
    }

    public class FaultToleranceSecondaryConfigInfo : FaultToleranceConfigInfo, IEquatable<FaultToleranceSecondaryConfigInfo>
    {
        public ManagedObjectReference PrimaryVM { get; set; }

        public FaultToleranceSecondaryConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceSecondaryConfigInfo faultToleranceSecondaryConfigInfo)
        {
            return (faultToleranceSecondaryConfigInfo != null && ((this.PrimaryVM == null && faultToleranceSecondaryConfigInfo.PrimaryVM == null) || (this.PrimaryVM != null && this.PrimaryVM.Equals(faultToleranceSecondaryConfigInfo.PrimaryVM))) && ((this.LinkedView == null && faultToleranceSecondaryConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceSecondaryConfigInfo.LinkedView))));
        }

        public override bool Equals(object faultToleranceSecondaryConfigInfo)
        {
            return Equals(faultToleranceSecondaryConfigInfo as FaultToleranceSecondaryConfigInfo);
        }

        public override int GetHashCode()
        {
            return (PrimaryVM + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceSecondaryConfigInfo_LinkedView : IEquatable<FaultToleranceSecondaryConfigInfo_LinkedView>
    {
        public VirtualMachine PrimaryVM { get; set; }

        public bool Equals(FaultToleranceSecondaryConfigInfo_LinkedView faultToleranceSecondaryConfigInfo_LinkedView)
        {
            return (faultToleranceSecondaryConfigInfo_LinkedView != null && ((this.PrimaryVM == null && faultToleranceSecondaryConfigInfo_LinkedView.PrimaryVM == null) || (this.PrimaryVM != null && this.PrimaryVM.Equals(faultToleranceSecondaryConfigInfo_LinkedView.PrimaryVM))));
        }

        public override bool Equals(object faultToleranceSecondaryConfigInfo_LinkedView)
        {
            return Equals(faultToleranceSecondaryConfigInfo_LinkedView as FaultToleranceSecondaryConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (PrimaryVM).GetHashCode();
        }
    }

    public class FaultToleranceSecondaryOpResult : DynamicData, IEquatable<FaultToleranceSecondaryOpResult>
    {
        public ManagedObjectReference Vm { get; set; }

        public bool PowerOnAttempted { get; set; }

        public ClusterPowerOnVmResult PowerOnResult { get; set; }

        public FaultToleranceSecondaryOpResult_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceSecondaryOpResult faultToleranceSecondaryOpResult)
        {
            return (faultToleranceSecondaryOpResult != null && ((this.Vm == null && faultToleranceSecondaryOpResult.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceSecondaryOpResult.Vm))) && this.PowerOnAttempted == faultToleranceSecondaryOpResult.PowerOnAttempted && ((this.PowerOnResult == null && faultToleranceSecondaryOpResult.PowerOnResult == null) || (this.PowerOnResult != null && this.PowerOnResult.Equals(faultToleranceSecondaryOpResult.PowerOnResult))) && ((this.LinkedView == null && faultToleranceSecondaryOpResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceSecondaryOpResult.LinkedView))));
        }

        public override bool Equals(object faultToleranceSecondaryOpResult)
        {
            return Equals(faultToleranceSecondaryOpResult as FaultToleranceSecondaryOpResult);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + PowerOnAttempted + "_" + PowerOnResult + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceSecondaryOpResult_LinkedView : IEquatable<FaultToleranceSecondaryOpResult_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(FaultToleranceSecondaryOpResult_LinkedView faultToleranceSecondaryOpResult_LinkedView)
        {
            return (faultToleranceSecondaryOpResult_LinkedView != null && ((this.Vm == null && faultToleranceSecondaryOpResult_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceSecondaryOpResult_LinkedView.Vm))));
        }

        public override bool Equals(object faultToleranceSecondaryOpResult_LinkedView)
        {
            return Equals(faultToleranceSecondaryOpResult_LinkedView as FaultToleranceSecondaryOpResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class FaultToleranceVMConfigSpec : DynamicData, IEquatable<FaultToleranceVMConfigSpec>
    {
        public ManagedObjectReference VmConfig { get; set; }

        public FaultToleranceDiskSpec[] Disks { get; set; }

        public FaultToleranceVMConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceVMConfigSpec faultToleranceVMConfigSpec)
        {
            return (faultToleranceVMConfigSpec != null && ((this.VmConfig == null && faultToleranceVMConfigSpec.VmConfig == null) || (this.VmConfig != null && this.VmConfig.Equals(faultToleranceVMConfigSpec.VmConfig))) && ((this.Disks == null && faultToleranceVMConfigSpec.Disks == null) || (this.Disks != null && faultToleranceVMConfigSpec.Disks != null && Enumerable.SequenceEqual(this.Disks, faultToleranceVMConfigSpec.Disks))) && ((this.LinkedView == null && faultToleranceVMConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceVMConfigSpec.LinkedView))));
        }

        public override bool Equals(object faultToleranceVMConfigSpec)
        {
            return Equals(faultToleranceVMConfigSpec as FaultToleranceVMConfigSpec);
        }

        public override int GetHashCode()
        {
            return (VmConfig + "_" + Disks + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceVMConfigSpec_LinkedView : IEquatable<FaultToleranceVMConfigSpec_LinkedView>
    {
        public Datastore VmConfig { get; set; }

        public bool Equals(FaultToleranceVMConfigSpec_LinkedView faultToleranceVMConfigSpec_LinkedView)
        {
            return (faultToleranceVMConfigSpec_LinkedView != null && ((this.VmConfig == null && faultToleranceVMConfigSpec_LinkedView.VmConfig == null) || (this.VmConfig != null && this.VmConfig.Equals(faultToleranceVMConfigSpec_LinkedView.VmConfig))));
        }

        public override bool Equals(object faultToleranceVMConfigSpec_LinkedView)
        {
            return Equals(faultToleranceVMConfigSpec_LinkedView as FaultToleranceVMConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmConfig).GetHashCode();
        }
    }

    public class FaultToleranceVmNotDasProtected : VimFault, IEquatable<FaultToleranceVmNotDasProtected>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public FaultToleranceVmNotDasProtected_LinkedView LinkedView { get; set; }

        public bool Equals(FaultToleranceVmNotDasProtected faultToleranceVmNotDasProtected)
        {
            return (faultToleranceVmNotDasProtected != null && ((this.Vm == null && faultToleranceVmNotDasProtected.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceVmNotDasProtected.Vm))) && this.VmName == faultToleranceVmNotDasProtected.VmName && ((this.LinkedView == null && faultToleranceVmNotDasProtected.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(faultToleranceVmNotDasProtected.LinkedView))));
        }

        public override bool Equals(object faultToleranceVmNotDasProtected)
        {
            return Equals(faultToleranceVmNotDasProtected as FaultToleranceVmNotDasProtected);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class FaultToleranceVmNotDasProtected_LinkedView : IEquatable<FaultToleranceVmNotDasProtected_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(FaultToleranceVmNotDasProtected_LinkedView faultToleranceVmNotDasProtected_LinkedView)
        {
            return (faultToleranceVmNotDasProtected_LinkedView != null && ((this.Vm == null && faultToleranceVmNotDasProtected_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(faultToleranceVmNotDasProtected_LinkedView.Vm))));
        }

        public override bool Equals(object faultToleranceVmNotDasProtected_LinkedView)
        {
            return Equals(faultToleranceVmNotDasProtected_LinkedView as FaultToleranceVmNotDasProtected_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class FcoeConfig : DynamicData, IEquatable<FcoeConfig>
    {
        public int PriorityClass { get; set; }

        public string SourceMac { get; set; }

        public FcoeConfigVlanRange[] VlanRange { get; set; }

        public FcoeConfigFcoeCapabilities Capabilities { get; set; }

        public bool FcoeActive { get; set; }

        public bool Equals(FcoeConfig fcoeConfig)
        {
            return (fcoeConfig != null && this.PriorityClass == fcoeConfig.PriorityClass && this.SourceMac == fcoeConfig.SourceMac && ((this.VlanRange == null && fcoeConfig.VlanRange == null) || (this.VlanRange != null && fcoeConfig.VlanRange != null && Enumerable.SequenceEqual(this.VlanRange, fcoeConfig.VlanRange))) && ((this.Capabilities == null && fcoeConfig.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(fcoeConfig.Capabilities))) && this.FcoeActive == fcoeConfig.FcoeActive);
        }

        public override bool Equals(object fcoeConfig)
        {
            return Equals(fcoeConfig as FcoeConfig);
        }

        public override int GetHashCode()
        {
            return (PriorityClass + "_" + SourceMac + "_" + VlanRange + "_" + Capabilities + "_" + FcoeActive).GetHashCode();
        }
    }

    public class FcoeConfigFcoeCapabilities : DynamicData, IEquatable<FcoeConfigFcoeCapabilities>
    {
        public bool PriorityClass { get; set; }

        public bool SourceMacAddress { get; set; }

        public bool VlanRange { get; set; }

        public bool Equals(FcoeConfigFcoeCapabilities fcoeConfigFcoeCapabilities)
        {
            return (fcoeConfigFcoeCapabilities != null && this.PriorityClass == fcoeConfigFcoeCapabilities.PriorityClass && this.SourceMacAddress == fcoeConfigFcoeCapabilities.SourceMacAddress && this.VlanRange == fcoeConfigFcoeCapabilities.VlanRange);
        }

        public override bool Equals(object fcoeConfigFcoeCapabilities)
        {
            return Equals(fcoeConfigFcoeCapabilities as FcoeConfigFcoeCapabilities);
        }

        public override int GetHashCode()
        {
            return (PriorityClass + "_" + SourceMacAddress + "_" + VlanRange).GetHashCode();
        }
    }

    public class FcoeConfigFcoeSpecification : DynamicData, IEquatable<FcoeConfigFcoeSpecification>
    {
        public string UnderlyingPnic { get; set; }

        public int? PriorityClass { get; set; }

        public string SourceMac { get; set; }

        public FcoeConfigVlanRange[] VlanRange { get; set; }

        public bool Equals(FcoeConfigFcoeSpecification fcoeConfigFcoeSpecification)
        {
            return (fcoeConfigFcoeSpecification != null && this.UnderlyingPnic == fcoeConfigFcoeSpecification.UnderlyingPnic && ((this.PriorityClass == null && fcoeConfigFcoeSpecification.PriorityClass == null) || (this.PriorityClass != null && this.PriorityClass.Equals(fcoeConfigFcoeSpecification.PriorityClass))) && this.SourceMac == fcoeConfigFcoeSpecification.SourceMac && ((this.VlanRange == null && fcoeConfigFcoeSpecification.VlanRange == null) || (this.VlanRange != null && fcoeConfigFcoeSpecification.VlanRange != null && Enumerable.SequenceEqual(this.VlanRange, fcoeConfigFcoeSpecification.VlanRange))));
        }

        public override bool Equals(object fcoeConfigFcoeSpecification)
        {
            return Equals(fcoeConfigFcoeSpecification as FcoeConfigFcoeSpecification);
        }

        public override int GetHashCode()
        {
            return (UnderlyingPnic + "_" + PriorityClass + "_" + SourceMac + "_" + VlanRange).GetHashCode();
        }
    }

    public class FcoeConfigVlanRange : DynamicData, IEquatable<FcoeConfigVlanRange>
    {
        public int VlanLow { get; set; }

        public int VlanHigh { get; set; }

        public bool Equals(FcoeConfigVlanRange fcoeConfigVlanRange)
        {
            return (fcoeConfigVlanRange != null && this.VlanLow == fcoeConfigVlanRange.VlanLow && this.VlanHigh == fcoeConfigVlanRange.VlanHigh);
        }

        public override bool Equals(object fcoeConfigVlanRange)
        {
            return Equals(fcoeConfigVlanRange as FcoeConfigVlanRange);
        }

        public override int GetHashCode()
        {
            return (VlanLow + "_" + VlanHigh).GetHashCode();
        }
    }

    public class FcoeFault : VimFault, IEquatable<FcoeFault>
    {
        public bool Equals(FcoeFault fcoeFault)
        {
            return (fcoeFault != null && base.Equals(fcoeFault));
        }

        public override bool Equals(object fcoeFault)
        {
            return Equals(fcoeFault as FcoeFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FcoeFaultPnicHasNoPortSet : FcoeFault, IEquatable<FcoeFaultPnicHasNoPortSet>
    {
        public string NicDevice { get; set; }

        public bool Equals(FcoeFaultPnicHasNoPortSet fcoeFaultPnicHasNoPortSet)
        {
            return (fcoeFaultPnicHasNoPortSet != null && this.NicDevice == fcoeFaultPnicHasNoPortSet.NicDevice);
        }

        public override bool Equals(object fcoeFaultPnicHasNoPortSet)
        {
            return Equals(fcoeFaultPnicHasNoPortSet as FcoeFaultPnicHasNoPortSet);
        }

        public override int GetHashCode()
        {
            return (NicDevice).GetHashCode();
        }
    }

    public class FeatureRequirementsNotMet : VirtualHardwareCompatibilityIssue, IEquatable<FeatureRequirementsNotMet>
    {
        public VirtualMachineFeatureRequirement[] FeatureRequirement { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference Host { get; set; }

        public FeatureRequirementsNotMet_LinkedView LinkedView { get; set; }

        public bool Equals(FeatureRequirementsNotMet featureRequirementsNotMet)
        {
            return (featureRequirementsNotMet != null && ((this.FeatureRequirement == null && featureRequirementsNotMet.FeatureRequirement == null) || (this.FeatureRequirement != null && featureRequirementsNotMet.FeatureRequirement != null && Enumerable.SequenceEqual(this.FeatureRequirement, featureRequirementsNotMet.FeatureRequirement))) && ((this.Vm == null && featureRequirementsNotMet.Vm == null) || (this.Vm != null && this.Vm.Equals(featureRequirementsNotMet.Vm))) && ((this.Host == null && featureRequirementsNotMet.Host == null) || (this.Host != null && this.Host.Equals(featureRequirementsNotMet.Host))) && ((this.LinkedView == null && featureRequirementsNotMet.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(featureRequirementsNotMet.LinkedView))));
        }

        public override bool Equals(object featureRequirementsNotMet)
        {
            return Equals(featureRequirementsNotMet as FeatureRequirementsNotMet);
        }

        public override int GetHashCode()
        {
            return (FeatureRequirement + "_" + Vm + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class FeatureRequirementsNotMet_LinkedView : IEquatable<FeatureRequirementsNotMet_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem Host { get; set; }

        public bool Equals(FeatureRequirementsNotMet_LinkedView featureRequirementsNotMet_LinkedView)
        {
            return (featureRequirementsNotMet_LinkedView != null && ((this.Vm == null && featureRequirementsNotMet_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(featureRequirementsNotMet_LinkedView.Vm))) && ((this.Host == null && featureRequirementsNotMet_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(featureRequirementsNotMet_LinkedView.Host))));
        }

        public override bool Equals(object featureRequirementsNotMet_LinkedView)
        {
            return Equals(featureRequirementsNotMet_LinkedView as FeatureRequirementsNotMet_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Host).GetHashCode();
        }
    }

    public class FileAlreadyExists : FileFault, IEquatable<FileAlreadyExists>
    {
        public bool Equals(FileAlreadyExists fileAlreadyExists)
        {
            return (fileAlreadyExists != null && base.Equals(fileAlreadyExists));
        }

        public override bool Equals(object fileAlreadyExists)
        {
            return Equals(fileAlreadyExists as FileAlreadyExists);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileBackedPortNotSupported : DeviceNotSupported, IEquatable<FileBackedPortNotSupported>
    {
        public bool Equals(FileBackedPortNotSupported fileBackedPortNotSupported)
        {
            return (fileBackedPortNotSupported != null && base.Equals(fileBackedPortNotSupported));
        }

        public override bool Equals(object fileBackedPortNotSupported)
        {
            return Equals(fileBackedPortNotSupported as FileBackedPortNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileBackedVirtualDiskSpec : VirtualDiskSpec, IEquatable<FileBackedVirtualDiskSpec>
    {
        public long CapacityKb { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public CryptoSpec Crypto { get; set; }

        public bool Equals(FileBackedVirtualDiskSpec fileBackedVirtualDiskSpec)
        {
            return (fileBackedVirtualDiskSpec != null && this.CapacityKb == fileBackedVirtualDiskSpec.CapacityKb && ((this.Profile == null && fileBackedVirtualDiskSpec.Profile == null) || (this.Profile != null && fileBackedVirtualDiskSpec.Profile != null && Enumerable.SequenceEqual(this.Profile, fileBackedVirtualDiskSpec.Profile))) && ((this.Crypto == null && fileBackedVirtualDiskSpec.Crypto == null) || (this.Crypto != null && this.Crypto.Equals(fileBackedVirtualDiskSpec.Crypto))));
        }

        public override bool Equals(object fileBackedVirtualDiskSpec)
        {
            return Equals(fileBackedVirtualDiskSpec as FileBackedVirtualDiskSpec);
        }

        public override int GetHashCode()
        {
            return (CapacityKb + "_" + Profile + "_" + Crypto).GetHashCode();
        }
    }

    public class FileFault : VimFault, IEquatable<FileFault>
    {
        public string File { get; set; }

        public bool Equals(FileFault fileFault)
        {
            return (fileFault != null && this.File == fileFault.File);
        }

        public override bool Equals(object fileFault)
        {
            return Equals(fileFault as FileFault);
        }

        public override int GetHashCode()
        {
            return (File).GetHashCode();
        }
    }

    public class FileInfo : DynamicData, IEquatable<FileInfo>
    {
        public string Path { get; set; }

        public string FriendlyName { get; set; }

        public long? FileSize { get; set; }

        public DateTime? Modification { get; set; }

        public string Owner { get; set; }

        public bool Equals(FileInfo fileInfo)
        {
            return (fileInfo != null && this.Path == fileInfo.Path && this.FriendlyName == fileInfo.FriendlyName && ((this.FileSize == null && fileInfo.FileSize == null) || (this.FileSize != null && this.FileSize.Equals(fileInfo.FileSize))) && ((this.Modification == null && fileInfo.Modification == null) || (this.Modification != null && this.Modification.Equals(fileInfo.Modification))) && this.Owner == fileInfo.Owner);
        }

        public override bool Equals(object fileInfo)
        {
            return Equals(fileInfo as FileInfo);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + FriendlyName + "_" + FileSize + "_" + Modification + "_" + Owner).GetHashCode();
        }
    }

    public class FileLocked : FileFault, IEquatable<FileLocked>
    {
        public bool Equals(FileLocked fileLocked)
        {
            return (fileLocked != null && base.Equals(fileLocked));
        }

        public override bool Equals(object fileLocked)
        {
            return Equals(fileLocked as FileLocked);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileManager : ViewBase, IEquatable<FileManager>
    {
        public ManagedObjectReference MoveDatastoreFile_Task(string sourceName, ManagedObjectReference sourceDatacenter, string destinationName, ManagedObjectReference destinationDatacenter, bool? force)
        {
            return default(ManagedObjectReference);
        }

        public void MoveDatastoreFile(string sourceName, ManagedObjectReference sourceDatacenter, string destinationName, ManagedObjectReference destinationDatacenter, bool? force)
        {
        }

        public ManagedObjectReference CopyDatastoreFile_Task(string sourceName, ManagedObjectReference sourceDatacenter, string destinationName, ManagedObjectReference destinationDatacenter, bool? force)
        {
            return default(ManagedObjectReference);
        }

        public void CopyDatastoreFile(string sourceName, ManagedObjectReference sourceDatacenter, string destinationName, ManagedObjectReference destinationDatacenter, bool? force)
        {
        }

        public ManagedObjectReference DeleteDatastoreFile_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void DeleteDatastoreFile(string name, ManagedObjectReference datacenter)
        {
        }

        public void MakeDirectory(string name, ManagedObjectReference datacenter, bool? createParentDirectories)
        {
        }

        public void ChangeOwner(string name, ManagedObjectReference datacenter, string owner)
        {
        }

        public bool Equals(FileManager fileManager)
        {
            return (fileManager != null && base.Equals(fileManager));
        }

        public override bool Equals(object fileManager)
        {
            return Equals(fileManager as FileManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileNameTooLong : FileFault, IEquatable<FileNameTooLong>
    {
        public bool Equals(FileNameTooLong fileNameTooLong)
        {
            return (fileNameTooLong != null && base.Equals(fileNameTooLong));
        }

        public override bool Equals(object fileNameTooLong)
        {
            return Equals(fileNameTooLong as FileNameTooLong);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileNotFound : FileFault, IEquatable<FileNotFound>
    {
        public bool Equals(FileNotFound fileNotFound)
        {
            return (fileNotFound != null && base.Equals(fileNotFound));
        }

        public override bool Equals(object fileNotFound)
        {
            return Equals(fileNotFound as FileNotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileNotWritable : FileFault, IEquatable<FileNotWritable>
    {
        public bool Equals(FileNotWritable fileNotWritable)
        {
            return (fileNotWritable != null && base.Equals(fileNotWritable));
        }

        public override bool Equals(object fileNotWritable)
        {
            return Equals(fileNotWritable as FileNotWritable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileQuery : DynamicData, IEquatable<FileQuery>
    {
        public bool Equals(FileQuery fileQuery)
        {
            return (fileQuery != null && base.Equals(fileQuery));
        }

        public override bool Equals(object fileQuery)
        {
            return Equals(fileQuery as FileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileQueryFlags : DynamicData, IEquatable<FileQueryFlags>
    {
        public bool FileType { get; set; }

        public bool FileSize { get; set; }

        public bool Modification { get; set; }

        public bool FileOwner { get; set; }

        public bool Equals(FileQueryFlags fileQueryFlags)
        {
            return (fileQueryFlags != null && this.FileType == fileQueryFlags.FileType && this.FileSize == fileQueryFlags.FileSize && this.Modification == fileQueryFlags.Modification && this.FileOwner == fileQueryFlags.FileOwner);
        }

        public override bool Equals(object fileQueryFlags)
        {
            return Equals(fileQueryFlags as FileQueryFlags);
        }

        public override int GetHashCode()
        {
            return (FileType + "_" + FileSize + "_" + Modification + "_" + FileOwner).GetHashCode();
        }
    }

    public class FilesystemQuiesceFault : SnapshotFault, IEquatable<FilesystemQuiesceFault>
    {
        public bool Equals(FilesystemQuiesceFault filesystemQuiesceFault)
        {
            return (filesystemQuiesceFault != null && base.Equals(filesystemQuiesceFault));
        }

        public override bool Equals(object filesystemQuiesceFault)
        {
            return Equals(filesystemQuiesceFault as FilesystemQuiesceFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FileTooLarge : FileFault, IEquatable<FileTooLarge>
    {
        public string Datastore { get; set; }

        public long FileSize { get; set; }

        public long? MaxFileSize { get; set; }

        public bool Equals(FileTooLarge fileTooLarge)
        {
            return (fileTooLarge != null && this.Datastore == fileTooLarge.Datastore && this.FileSize == fileTooLarge.FileSize && ((this.MaxFileSize == null && fileTooLarge.MaxFileSize == null) || (this.MaxFileSize != null && this.MaxFileSize.Equals(fileTooLarge.MaxFileSize))));
        }

        public override bool Equals(object fileTooLarge)
        {
            return Equals(fileTooLarge as FileTooLarge);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + FileSize + "_" + MaxFileSize).GetHashCode();
        }
    }

    public class FileTransferInformation : DynamicData, IEquatable<FileTransferInformation>
    {
        public GuestFileAttributes Attributes { get; set; }

        public long Size { get; set; }

        public string Url { get; set; }

        public bool Equals(FileTransferInformation fileTransferInformation)
        {
            return (fileTransferInformation != null && ((this.Attributes == null && fileTransferInformation.Attributes == null) || (this.Attributes != null && this.Attributes.Equals(fileTransferInformation.Attributes))) && this.Size == fileTransferInformation.Size && this.Url == fileTransferInformation.Url);
        }

        public override bool Equals(object fileTransferInformation)
        {
            return Equals(fileTransferInformation as FileTransferInformation);
        }

        public override int GetHashCode()
        {
            return (Attributes + "_" + Size + "_" + Url).GetHashCode();
        }
    }

    public class FilterInUse : ResourceInUse, IEquatable<FilterInUse>
    {
        public VirtualDiskId[] Disk { get; set; }

        public bool Equals(FilterInUse filterInUse)
        {
            return (filterInUse != null && ((this.Disk == null && filterInUse.Disk == null) || (this.Disk != null && filterInUse.Disk != null && Enumerable.SequenceEqual(this.Disk, filterInUse.Disk))));
        }

        public override bool Equals(object filterInUse)
        {
            return Equals(filterInUse as FilterInUse);
        }

        public override int GetHashCode()
        {
            return (Disk).GetHashCode();
        }
    }

    public class FirewallProfile : ApplyProfile, IEquatable<FirewallProfile>
    {
        public FirewallProfileRulesetProfile[] Ruleset { get; set; }

        public bool Equals(FirewallProfile firewallProfile)
        {
            return (firewallProfile != null && ((this.Ruleset == null && firewallProfile.Ruleset == null) || (this.Ruleset != null && firewallProfile.Ruleset != null && Enumerable.SequenceEqual(this.Ruleset, firewallProfile.Ruleset))));
        }

        public override bool Equals(object firewallProfile)
        {
            return Equals(firewallProfile as FirewallProfile);
        }

        public override int GetHashCode()
        {
            return (Ruleset).GetHashCode();
        }
    }

    public class FirewallProfileRulesetProfile : ApplyProfile, IEquatable<FirewallProfileRulesetProfile>
    {
        public string Key { get; set; }

        public bool Equals(FirewallProfileRulesetProfile firewallProfileRulesetProfile)
        {
            return (firewallProfileRulesetProfile != null && this.Key == firewallProfileRulesetProfile.Key);
        }

        public override bool Equals(object firewallProfileRulesetProfile)
        {
            return Equals(firewallProfileRulesetProfile as FirewallProfileRulesetProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class FloatOption : OptionType, IEquatable<FloatOption>
    {
        public float Min { get; set; }

        public float Max { get; set; }

        public float DefaultValue { get; set; }

        public bool Equals(FloatOption floatOption)
        {
            return (floatOption != null && this.Min == floatOption.Min && this.Max == floatOption.Max && this.DefaultValue == floatOption.DefaultValue);
        }

        public override bool Equals(object floatOption)
        {
            return Equals(floatOption as FloatOption);
        }

        public override int GetHashCode()
        {
            return (Min + "_" + Max + "_" + DefaultValue).GetHashCode();
        }
    }

    public class FloppyImageFileInfo : FileInfo, IEquatable<FloppyImageFileInfo>
    {
        public bool Equals(FloppyImageFileInfo floppyImageFileInfo)
        {
            return (floppyImageFileInfo != null && base.Equals(floppyImageFileInfo));
        }

        public override bool Equals(object floppyImageFileInfo)
        {
            return Equals(floppyImageFileInfo as FloppyImageFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FloppyImageFileQuery : FileQuery, IEquatable<FloppyImageFileQuery>
    {
        public bool Equals(FloppyImageFileQuery floppyImageFileQuery)
        {
            return (floppyImageFileQuery != null && base.Equals(floppyImageFileQuery));
        }

        public override bool Equals(object floppyImageFileQuery)
        {
            return Equals(floppyImageFileQuery as FloppyImageFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class Folder : ManagedEntity, IEquatable<Folder>
    {
        public string[] ChildType { get; set; }

        public ManagedObjectReference[] ChildEntity { get; set; }

        public new Folder_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateFolder(string name)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference MoveIntoFolder_Task(ManagedObjectReference[] list)
        {
            return default(ManagedObjectReference);
        }

        public void MoveIntoFolder(ManagedObjectReference[] list)
        {
        }

        public ManagedObjectReference CreateVM_Task(VirtualMachineConfigSpec config, ManagedObjectReference pool, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateVM(VirtualMachineConfigSpec config, ManagedObjectReference pool, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference RegisterVM_Task(string path, string name, bool asTemplate, ManagedObjectReference pool, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference RegisterVM(string path, string name, bool asTemplate, ManagedObjectReference pool, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateCluster(string name, ClusterConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateClusterEx(string name, ClusterConfigSpecEx spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference AddStandaloneHost_Task(HostConnectSpec spec, ComputeResourceConfigSpec compResSpec, bool addConnected, string license)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference AddStandaloneHost(HostConnectSpec spec, ComputeResourceConfigSpec compResSpec, bool addConnected, string license)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateDatacenter(string name)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference UnregisterAndDestroy_Task()
        {
            return default(ManagedObjectReference);
        }

        public void UnregisterAndDestroy()
        {
        }

        public ManagedObjectReference CreateDVS_Task(DVSCreateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateDVS(DVSCreateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateStoragePod(string name)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference BatchAddStandaloneHosts_Task(FolderNewHostSpec[] newHosts, ComputeResourceConfigSpec compResSpec, bool addConnected)
        {
            return default(ManagedObjectReference);
        }

        public FolderBatchAddStandaloneHostsResult BatchAddStandaloneHosts(FolderNewHostSpec[] newHosts, ComputeResourceConfigSpec compResSpec, bool addConnected)
        {
            return default(FolderBatchAddStandaloneHostsResult);
        }

        public ManagedObjectReference BatchAddHostsToCluster_Task(ManagedObjectReference cluster, FolderNewHostSpec[] newHosts, ManagedObjectReference[] existingHosts, ComputeResourceConfigSpec compResSpec, string desiredState)
        {
            return default(ManagedObjectReference);
        }

        public FolderBatchAddHostsToClusterResult BatchAddHostsToCluster(ManagedObjectReference cluster, FolderNewHostSpec[] newHosts, ManagedObjectReference[] existingHosts, ComputeResourceConfigSpec compResSpec, string desiredState)
        {
            return default(FolderBatchAddHostsToClusterResult);
        }

        public bool Equals(Folder folder)
        {
            return (folder != null && ((this.ChildType == null && folder.ChildType == null) || (this.ChildType != null && folder.ChildType != null && Enumerable.SequenceEqual(this.ChildType, folder.ChildType))) && ((this.ChildEntity == null && folder.ChildEntity == null) || (this.ChildEntity != null && folder.ChildEntity != null && Enumerable.SequenceEqual(this.ChildEntity, folder.ChildEntity))) && ((this.LinkedView == null && folder.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(folder.LinkedView))));
        }

        public override bool Equals(object folder)
        {
            return Equals(folder as Folder);
        }

        public override int GetHashCode()
        {
            return (ChildType + "_" + ChildEntity + "_" + LinkedView).GetHashCode();
        }
    }

    public class Folder_LinkedView : ManagedEntity_LinkedView, IEquatable<Folder_LinkedView>
    {
        public ManagedEntity[] ChildEntity { get; set; }

        public bool Equals(Folder_LinkedView folder_LinkedView)
        {
            return (folder_LinkedView != null && ((this.ChildEntity == null && folder_LinkedView.ChildEntity == null) || (this.ChildEntity != null && folder_LinkedView.ChildEntity != null && Enumerable.SequenceEqual(this.ChildEntity, folder_LinkedView.ChildEntity))));
        }

        public override bool Equals(object folder_LinkedView)
        {
            return Equals(folder_LinkedView as Folder_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ChildEntity).GetHashCode();
        }
    }

    public class FolderBatchAddHostsToClusterResult : DynamicData, IEquatable<FolderBatchAddHostsToClusterResult>
    {
        public ManagedObjectReference[] HostsAddedToCluster { get; set; }

        public FolderFailedHostResult[] HostsFailedInventoryAdd { get; set; }

        public FolderFailedHostResult[] HostsFailedMoveToCluster { get; set; }

        public FolderBatchAddHostsToClusterResult_LinkedView LinkedView { get; set; }

        public bool Equals(FolderBatchAddHostsToClusterResult folderBatchAddHostsToClusterResult)
        {
            return (folderBatchAddHostsToClusterResult != null && ((this.HostsAddedToCluster == null && folderBatchAddHostsToClusterResult.HostsAddedToCluster == null) || (this.HostsAddedToCluster != null && folderBatchAddHostsToClusterResult.HostsAddedToCluster != null && Enumerable.SequenceEqual(this.HostsAddedToCluster, folderBatchAddHostsToClusterResult.HostsAddedToCluster))) && ((this.HostsFailedInventoryAdd == null && folderBatchAddHostsToClusterResult.HostsFailedInventoryAdd == null) || (this.HostsFailedInventoryAdd != null && folderBatchAddHostsToClusterResult.HostsFailedInventoryAdd != null && Enumerable.SequenceEqual(this.HostsFailedInventoryAdd, folderBatchAddHostsToClusterResult.HostsFailedInventoryAdd))) && ((this.HostsFailedMoveToCluster == null && folderBatchAddHostsToClusterResult.HostsFailedMoveToCluster == null) || (this.HostsFailedMoveToCluster != null && folderBatchAddHostsToClusterResult.HostsFailedMoveToCluster != null && Enumerable.SequenceEqual(this.HostsFailedMoveToCluster, folderBatchAddHostsToClusterResult.HostsFailedMoveToCluster))) && ((this.LinkedView == null && folderBatchAddHostsToClusterResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(folderBatchAddHostsToClusterResult.LinkedView))));
        }

        public override bool Equals(object folderBatchAddHostsToClusterResult)
        {
            return Equals(folderBatchAddHostsToClusterResult as FolderBatchAddHostsToClusterResult);
        }

        public override int GetHashCode()
        {
            return (HostsAddedToCluster + "_" + HostsFailedInventoryAdd + "_" + HostsFailedMoveToCluster + "_" + LinkedView).GetHashCode();
        }
    }

    public class FolderBatchAddHostsToClusterResult_LinkedView : IEquatable<FolderBatchAddHostsToClusterResult_LinkedView>
    {
        public HostSystem[] HostsAddedToCluster { get; set; }

        public bool Equals(FolderBatchAddHostsToClusterResult_LinkedView folderBatchAddHostsToClusterResult_LinkedView)
        {
            return (folderBatchAddHostsToClusterResult_LinkedView != null && ((this.HostsAddedToCluster == null && folderBatchAddHostsToClusterResult_LinkedView.HostsAddedToCluster == null) || (this.HostsAddedToCluster != null && folderBatchAddHostsToClusterResult_LinkedView.HostsAddedToCluster != null && Enumerable.SequenceEqual(this.HostsAddedToCluster, folderBatchAddHostsToClusterResult_LinkedView.HostsAddedToCluster))));
        }

        public override bool Equals(object folderBatchAddHostsToClusterResult_LinkedView)
        {
            return Equals(folderBatchAddHostsToClusterResult_LinkedView as FolderBatchAddHostsToClusterResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HostsAddedToCluster).GetHashCode();
        }
    }

    public class FolderBatchAddStandaloneHostsResult : DynamicData, IEquatable<FolderBatchAddStandaloneHostsResult>
    {
        public ManagedObjectReference[] AddedHosts { get; set; }

        public FolderFailedHostResult[] HostsFailedInventoryAdd { get; set; }

        public FolderBatchAddStandaloneHostsResult_LinkedView LinkedView { get; set; }

        public bool Equals(FolderBatchAddStandaloneHostsResult folderBatchAddStandaloneHostsResult)
        {
            return (folderBatchAddStandaloneHostsResult != null && ((this.AddedHosts == null && folderBatchAddStandaloneHostsResult.AddedHosts == null) || (this.AddedHosts != null && folderBatchAddStandaloneHostsResult.AddedHosts != null && Enumerable.SequenceEqual(this.AddedHosts, folderBatchAddStandaloneHostsResult.AddedHosts))) && ((this.HostsFailedInventoryAdd == null && folderBatchAddStandaloneHostsResult.HostsFailedInventoryAdd == null) || (this.HostsFailedInventoryAdd != null && folderBatchAddStandaloneHostsResult.HostsFailedInventoryAdd != null && Enumerable.SequenceEqual(this.HostsFailedInventoryAdd, folderBatchAddStandaloneHostsResult.HostsFailedInventoryAdd))) && ((this.LinkedView == null && folderBatchAddStandaloneHostsResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(folderBatchAddStandaloneHostsResult.LinkedView))));
        }

        public override bool Equals(object folderBatchAddStandaloneHostsResult)
        {
            return Equals(folderBatchAddStandaloneHostsResult as FolderBatchAddStandaloneHostsResult);
        }

        public override int GetHashCode()
        {
            return (AddedHosts + "_" + HostsFailedInventoryAdd + "_" + LinkedView).GetHashCode();
        }
    }

    public class FolderBatchAddStandaloneHostsResult_LinkedView : IEquatable<FolderBatchAddStandaloneHostsResult_LinkedView>
    {
        public HostSystem[] AddedHosts { get; set; }

        public bool Equals(FolderBatchAddStandaloneHostsResult_LinkedView folderBatchAddStandaloneHostsResult_LinkedView)
        {
            return (folderBatchAddStandaloneHostsResult_LinkedView != null && ((this.AddedHosts == null && folderBatchAddStandaloneHostsResult_LinkedView.AddedHosts == null) || (this.AddedHosts != null && folderBatchAddStandaloneHostsResult_LinkedView.AddedHosts != null && Enumerable.SequenceEqual(this.AddedHosts, folderBatchAddStandaloneHostsResult_LinkedView.AddedHosts))));
        }

        public override bool Equals(object folderBatchAddStandaloneHostsResult_LinkedView)
        {
            return Equals(folderBatchAddStandaloneHostsResult_LinkedView as FolderBatchAddStandaloneHostsResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (AddedHosts).GetHashCode();
        }
    }

    public class FolderEventArgument : EntityEventArgument, IEquatable<FolderEventArgument>
    {
        public ManagedObjectReference Folder { get; set; }

        public FolderEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(FolderEventArgument folderEventArgument)
        {
            return (folderEventArgument != null && ((this.Folder == null && folderEventArgument.Folder == null) || (this.Folder != null && this.Folder.Equals(folderEventArgument.Folder))) && ((this.LinkedView == null && folderEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(folderEventArgument.LinkedView))));
        }

        public override bool Equals(object folderEventArgument)
        {
            return Equals(folderEventArgument as FolderEventArgument);
        }

        public override int GetHashCode()
        {
            return (Folder + "_" + LinkedView).GetHashCode();
        }
    }

    public class FolderEventArgument_LinkedView : IEquatable<FolderEventArgument_LinkedView>
    {
        public Folder Folder { get; set; }

        public bool Equals(FolderEventArgument_LinkedView folderEventArgument_LinkedView)
        {
            return (folderEventArgument_LinkedView != null && ((this.Folder == null && folderEventArgument_LinkedView.Folder == null) || (this.Folder != null && this.Folder.Equals(folderEventArgument_LinkedView.Folder))));
        }

        public override bool Equals(object folderEventArgument_LinkedView)
        {
            return Equals(folderEventArgument_LinkedView as FolderEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Folder).GetHashCode();
        }
    }

    public class FolderFailedHostResult : DynamicData, IEquatable<FolderFailedHostResult>
    {
        public string HostName { get; set; }

        public ManagedObjectReference Host { get; set; }

        public LocalizableMessage Context { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public FolderFailedHostResult_LinkedView LinkedView { get; set; }

        public bool Equals(FolderFailedHostResult folderFailedHostResult)
        {
            return (folderFailedHostResult != null && this.HostName == folderFailedHostResult.HostName && ((this.Host == null && folderFailedHostResult.Host == null) || (this.Host != null && this.Host.Equals(folderFailedHostResult.Host))) && ((this.Context == null && folderFailedHostResult.Context == null) || (this.Context != null && this.Context.Equals(folderFailedHostResult.Context))) && ((this.Fault == null && folderFailedHostResult.Fault == null) || (this.Fault != null && this.Fault.Equals(folderFailedHostResult.Fault))) && ((this.LinkedView == null && folderFailedHostResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(folderFailedHostResult.LinkedView))));
        }

        public override bool Equals(object folderFailedHostResult)
        {
            return Equals(folderFailedHostResult as FolderFailedHostResult);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Host + "_" + Context + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class FolderFailedHostResult_LinkedView : IEquatable<FolderFailedHostResult_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(FolderFailedHostResult_LinkedView folderFailedHostResult_LinkedView)
        {
            return (folderFailedHostResult_LinkedView != null && ((this.Host == null && folderFailedHostResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(folderFailedHostResult_LinkedView.Host))));
        }

        public override bool Equals(object folderFailedHostResult_LinkedView)
        {
            return Equals(folderFailedHostResult_LinkedView as FolderFailedHostResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class FolderFileInfo : FileInfo, IEquatable<FolderFileInfo>
    {
        public bool Equals(FolderFileInfo folderFileInfo)
        {
            return (folderFileInfo != null && base.Equals(folderFileInfo));
        }

        public override bool Equals(object folderFileInfo)
        {
            return Equals(folderFileInfo as FolderFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FolderFileQuery : FileQuery, IEquatable<FolderFileQuery>
    {
        public bool Equals(FolderFileQuery folderFileQuery)
        {
            return (folderFileQuery != null && base.Equals(folderFileQuery));
        }

        public override bool Equals(object folderFileQuery)
        {
            return Equals(folderFileQuery as FolderFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class FolderNewHostSpec : DynamicData, IEquatable<FolderNewHostSpec>
    {
        public HostConnectSpec HostCnxSpec { get; set; }

        public string EsxLicense { get; set; }

        public bool Equals(FolderNewHostSpec folderNewHostSpec)
        {
            return (folderNewHostSpec != null && ((this.HostCnxSpec == null && folderNewHostSpec.HostCnxSpec == null) || (this.HostCnxSpec != null && this.HostCnxSpec.Equals(folderNewHostSpec.HostCnxSpec))) && this.EsxLicense == folderNewHostSpec.EsxLicense);
        }

        public override bool Equals(object folderNewHostSpec)
        {
            return Equals(folderNewHostSpec as FolderNewHostSpec);
        }

        public override int GetHashCode()
        {
            return (HostCnxSpec + "_" + EsxLicense).GetHashCode();
        }
    }

    public class FtIssuesOnHost : VmFaultToleranceIssue, IEquatable<FtIssuesOnHost>
    {
        public ManagedObjectReference Host { get; set; }

        public string HostName { get; set; }

        public LocalizedMethodFault[] Errors { get; set; }

        public FtIssuesOnHost_LinkedView LinkedView { get; set; }

        public bool Equals(FtIssuesOnHost ftIssuesOnHost)
        {
            return (ftIssuesOnHost != null && ((this.Host == null && ftIssuesOnHost.Host == null) || (this.Host != null && this.Host.Equals(ftIssuesOnHost.Host))) && this.HostName == ftIssuesOnHost.HostName && ((this.Errors == null && ftIssuesOnHost.Errors == null) || (this.Errors != null && ftIssuesOnHost.Errors != null && Enumerable.SequenceEqual(this.Errors, ftIssuesOnHost.Errors))) && ((this.LinkedView == null && ftIssuesOnHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ftIssuesOnHost.LinkedView))));
        }

        public override bool Equals(object ftIssuesOnHost)
        {
            return Equals(ftIssuesOnHost as FtIssuesOnHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + Errors + "_" + LinkedView).GetHashCode();
        }
    }

    public class FtIssuesOnHost_LinkedView : IEquatable<FtIssuesOnHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(FtIssuesOnHost_LinkedView ftIssuesOnHost_LinkedView)
        {
            return (ftIssuesOnHost_LinkedView != null && ((this.Host == null && ftIssuesOnHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(ftIssuesOnHost_LinkedView.Host))));
        }

        public override bool Equals(object ftIssuesOnHost_LinkedView)
        {
            return Equals(ftIssuesOnHost_LinkedView as FtIssuesOnHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class FullStorageVMotionNotSupported : MigrationFeatureNotSupported, IEquatable<FullStorageVMotionNotSupported>
    {
        public new FullStorageVMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(FullStorageVMotionNotSupported fullStorageVMotionNotSupported)
        {
            return (fullStorageVMotionNotSupported != null && ((this.LinkedView == null && fullStorageVMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(fullStorageVMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object fullStorageVMotionNotSupported)
        {
            return Equals(fullStorageVMotionNotSupported as FullStorageVMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class FullStorageVMotionNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<FullStorageVMotionNotSupported_LinkedView>
    {
        public bool Equals(FullStorageVMotionNotSupported_LinkedView fullStorageVMotionNotSupported_LinkedView)
        {
            return (fullStorageVMotionNotSupported_LinkedView != null && base.Equals(fullStorageVMotionNotSupported_LinkedView));
        }

        public override bool Equals(object fullStorageVMotionNotSupported_LinkedView)
        {
            return Equals(fullStorageVMotionNotSupported_LinkedView as FullStorageVMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GatewayConnectFault : HostConnectFault, IEquatable<GatewayConnectFault>
    {
        public string GatewayType { get; set; }

        public string GatewayId { get; set; }

        public string GatewayInfo { get; set; }

        public LocalizableMessage Details { get; set; }

        public bool Equals(GatewayConnectFault gatewayConnectFault)
        {
            return (gatewayConnectFault != null && this.GatewayType == gatewayConnectFault.GatewayType && this.GatewayId == gatewayConnectFault.GatewayId && this.GatewayInfo == gatewayConnectFault.GatewayInfo && ((this.Details == null && gatewayConnectFault.Details == null) || (this.Details != null && this.Details.Equals(gatewayConnectFault.Details))));
        }

        public override bool Equals(object gatewayConnectFault)
        {
            return Equals(gatewayConnectFault as GatewayConnectFault);
        }

        public override int GetHashCode()
        {
            return (GatewayType + "_" + GatewayId + "_" + GatewayInfo + "_" + Details).GetHashCode();
        }
    }

    public class GatewayHostNotReachable : GatewayToHostConnectFault, IEquatable<GatewayHostNotReachable>
    {
        public bool Equals(GatewayHostNotReachable gatewayHostNotReachable)
        {
            return (gatewayHostNotReachable != null && base.Equals(gatewayHostNotReachable));
        }

        public override bool Equals(object gatewayHostNotReachable)
        {
            return Equals(gatewayHostNotReachable as GatewayHostNotReachable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GatewayNotFound : GatewayConnectFault, IEquatable<GatewayNotFound>
    {
        public bool Equals(GatewayNotFound gatewayNotFound)
        {
            return (gatewayNotFound != null && base.Equals(gatewayNotFound));
        }

        public override bool Equals(object gatewayNotFound)
        {
            return Equals(gatewayNotFound as GatewayNotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GatewayNotReachable : GatewayConnectFault, IEquatable<GatewayNotReachable>
    {
        public bool Equals(GatewayNotReachable gatewayNotReachable)
        {
            return (gatewayNotReachable != null && base.Equals(gatewayNotReachable));
        }

        public override bool Equals(object gatewayNotReachable)
        {
            return Equals(gatewayNotReachable as GatewayNotReachable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GatewayOperationRefused : GatewayConnectFault, IEquatable<GatewayOperationRefused>
    {
        public bool Equals(GatewayOperationRefused gatewayOperationRefused)
        {
            return (gatewayOperationRefused != null && base.Equals(gatewayOperationRefused));
        }

        public override bool Equals(object gatewayOperationRefused)
        {
            return Equals(gatewayOperationRefused as GatewayOperationRefused);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GatewayToHostAuthFault : GatewayToHostConnectFault, IEquatable<GatewayToHostAuthFault>
    {
        public string[] InvalidProperties { get; set; }

        public string[] MissingProperties { get; set; }

        public bool Equals(GatewayToHostAuthFault gatewayToHostAuthFault)
        {
            return (gatewayToHostAuthFault != null && ((this.InvalidProperties == null && gatewayToHostAuthFault.InvalidProperties == null) || (this.InvalidProperties != null && gatewayToHostAuthFault.InvalidProperties != null && Enumerable.SequenceEqual(this.InvalidProperties, gatewayToHostAuthFault.InvalidProperties))) && ((this.MissingProperties == null && gatewayToHostAuthFault.MissingProperties == null) || (this.MissingProperties != null && gatewayToHostAuthFault.MissingProperties != null && Enumerable.SequenceEqual(this.MissingProperties, gatewayToHostAuthFault.MissingProperties))));
        }

        public override bool Equals(object gatewayToHostAuthFault)
        {
            return Equals(gatewayToHostAuthFault as GatewayToHostAuthFault);
        }

        public override int GetHashCode()
        {
            return (InvalidProperties + "_" + MissingProperties).GetHashCode();
        }
    }

    public class GatewayToHostConnectFault : GatewayConnectFault, IEquatable<GatewayToHostConnectFault>
    {
        public string Hostname { get; set; }

        public int? Port { get; set; }

        public bool Equals(GatewayToHostConnectFault gatewayToHostConnectFault)
        {
            return (gatewayToHostConnectFault != null && this.Hostname == gatewayToHostConnectFault.Hostname && ((this.Port == null && gatewayToHostConnectFault.Port == null) || (this.Port != null && this.Port.Equals(gatewayToHostConnectFault.Port))));
        }

        public override bool Equals(object gatewayToHostConnectFault)
        {
            return Equals(gatewayToHostConnectFault as GatewayToHostConnectFault);
        }

        public override int GetHashCode()
        {
            return (Hostname + "_" + Port).GetHashCode();
        }
    }

    public class GatewayToHostTrustVerifyFault : GatewayToHostConnectFault, IEquatable<GatewayToHostTrustVerifyFault>
    {
        public string VerificationToken { get; set; }

        public KeyValue[] PropertiesToVerify { get; set; }

        public bool Equals(GatewayToHostTrustVerifyFault gatewayToHostTrustVerifyFault)
        {
            return (gatewayToHostTrustVerifyFault != null && this.VerificationToken == gatewayToHostTrustVerifyFault.VerificationToken && ((this.PropertiesToVerify == null && gatewayToHostTrustVerifyFault.PropertiesToVerify == null) || (this.PropertiesToVerify != null && gatewayToHostTrustVerifyFault.PropertiesToVerify != null && Enumerable.SequenceEqual(this.PropertiesToVerify, gatewayToHostTrustVerifyFault.PropertiesToVerify))));
        }

        public override bool Equals(object gatewayToHostTrustVerifyFault)
        {
            return Equals(gatewayToHostTrustVerifyFault as GatewayToHostTrustVerifyFault);
        }

        public override int GetHashCode()
        {
            return (VerificationToken + "_" + PropertiesToVerify).GetHashCode();
        }
    }

    public class GeneralEvent : Event, IEquatable<GeneralEvent>
    {
        public string Message { get; set; }

        public bool Equals(GeneralEvent generalEvent)
        {
            return (generalEvent != null && this.Message == generalEvent.Message);
        }

        public override bool Equals(object generalEvent)
        {
            return Equals(generalEvent as GeneralEvent);
        }

        public override int GetHashCode()
        {
            return (Message).GetHashCode();
        }
    }

    public class GeneralHostErrorEvent : GeneralEvent, IEquatable<GeneralHostErrorEvent>
    {
        public bool Equals(GeneralHostErrorEvent generalHostErrorEvent)
        {
            return (generalHostErrorEvent != null && base.Equals(generalHostErrorEvent));
        }

        public override bool Equals(object generalHostErrorEvent)
        {
            return Equals(generalHostErrorEvent as GeneralHostErrorEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GeneralHostInfoEvent : GeneralEvent, IEquatable<GeneralHostInfoEvent>
    {
        public bool Equals(GeneralHostInfoEvent generalHostInfoEvent)
        {
            return (generalHostInfoEvent != null && base.Equals(generalHostInfoEvent));
        }

        public override bool Equals(object generalHostInfoEvent)
        {
            return Equals(generalHostInfoEvent as GeneralHostInfoEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GeneralHostWarningEvent : GeneralEvent, IEquatable<GeneralHostWarningEvent>
    {
        public bool Equals(GeneralHostWarningEvent generalHostWarningEvent)
        {
            return (generalHostWarningEvent != null && base.Equals(generalHostWarningEvent));
        }

        public override bool Equals(object generalHostWarningEvent)
        {
            return Equals(generalHostWarningEvent as GeneralHostWarningEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GeneralUserEvent : GeneralEvent, IEquatable<GeneralUserEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(GeneralUserEvent generalUserEvent)
        {
            return (generalUserEvent != null && ((this.Entity == null && generalUserEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(generalUserEvent.Entity))));
        }

        public override bool Equals(object generalUserEvent)
        {
            return Equals(generalUserEvent as GeneralUserEvent);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class GeneralVmErrorEvent : GeneralEvent, IEquatable<GeneralVmErrorEvent>
    {
        public bool Equals(GeneralVmErrorEvent generalVmErrorEvent)
        {
            return (generalVmErrorEvent != null && base.Equals(generalVmErrorEvent));
        }

        public override bool Equals(object generalVmErrorEvent)
        {
            return Equals(generalVmErrorEvent as GeneralVmErrorEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GeneralVmInfoEvent : GeneralEvent, IEquatable<GeneralVmInfoEvent>
    {
        public bool Equals(GeneralVmInfoEvent generalVmInfoEvent)
        {
            return (generalVmInfoEvent != null && base.Equals(generalVmInfoEvent));
        }

        public override bool Equals(object generalVmInfoEvent)
        {
            return Equals(generalVmInfoEvent as GeneralVmInfoEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GeneralVmWarningEvent : GeneralEvent, IEquatable<GeneralVmWarningEvent>
    {
        public bool Equals(GeneralVmWarningEvent generalVmWarningEvent)
        {
            return (generalVmWarningEvent != null && base.Equals(generalVmWarningEvent));
        }

        public override bool Equals(object generalVmWarningEvent)
        {
            return Equals(generalVmWarningEvent as GeneralVmWarningEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GenericDrsFault : VimFault, IEquatable<GenericDrsFault>
    {
        public LocalizedMethodFault[] HostFaults { get; set; }

        public bool Equals(GenericDrsFault genericDrsFault)
        {
            return (genericDrsFault != null && ((this.HostFaults == null && genericDrsFault.HostFaults == null) || (this.HostFaults != null && genericDrsFault.HostFaults != null && Enumerable.SequenceEqual(this.HostFaults, genericDrsFault.HostFaults))));
        }

        public override bool Equals(object genericDrsFault)
        {
            return Equals(genericDrsFault as GenericDrsFault);
        }

        public override int GetHashCode()
        {
            return (HostFaults).GetHashCode();
        }
    }

    public class GenericVmConfigFault : VmConfigFault, IEquatable<GenericVmConfigFault>
    {
        public string Reason { get; set; }

        public bool Equals(GenericVmConfigFault genericVmConfigFault)
        {
            return (genericVmConfigFault != null && this.Reason == genericVmConfigFault.Reason);
        }

        public override bool Equals(object genericVmConfigFault)
        {
            return Equals(genericVmConfigFault as GenericVmConfigFault);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class GhostDvsProxySwitchDetectedEvent : HostEvent, IEquatable<GhostDvsProxySwitchDetectedEvent>
    {
        public string[] SwitchUuid { get; set; }

        public bool Equals(GhostDvsProxySwitchDetectedEvent ghostDvsProxySwitchDetectedEvent)
        {
            return (ghostDvsProxySwitchDetectedEvent != null && ((this.SwitchUuid == null && ghostDvsProxySwitchDetectedEvent.SwitchUuid == null) || (this.SwitchUuid != null && ghostDvsProxySwitchDetectedEvent.SwitchUuid != null && Enumerable.SequenceEqual(this.SwitchUuid, ghostDvsProxySwitchDetectedEvent.SwitchUuid))));
        }

        public override bool Equals(object ghostDvsProxySwitchDetectedEvent)
        {
            return Equals(ghostDvsProxySwitchDetectedEvent as GhostDvsProxySwitchDetectedEvent);
        }

        public override int GetHashCode()
        {
            return (SwitchUuid).GetHashCode();
        }
    }

    public class GhostDvsProxySwitchRemovedEvent : HostEvent, IEquatable<GhostDvsProxySwitchRemovedEvent>
    {
        public string[] SwitchUuid { get; set; }

        public bool Equals(GhostDvsProxySwitchRemovedEvent ghostDvsProxySwitchRemovedEvent)
        {
            return (ghostDvsProxySwitchRemovedEvent != null && ((this.SwitchUuid == null && ghostDvsProxySwitchRemovedEvent.SwitchUuid == null) || (this.SwitchUuid != null && ghostDvsProxySwitchRemovedEvent.SwitchUuid != null && Enumerable.SequenceEqual(this.SwitchUuid, ghostDvsProxySwitchRemovedEvent.SwitchUuid))));
        }

        public override bool Equals(object ghostDvsProxySwitchRemovedEvent)
        {
            return Equals(ghostDvsProxySwitchRemovedEvent as GhostDvsProxySwitchRemovedEvent);
        }

        public override int GetHashCode()
        {
            return (SwitchUuid).GetHashCode();
        }
    }

    public class GlobalMessageChangedEvent : SessionEvent, IEquatable<GlobalMessageChangedEvent>
    {
        public string Message { get; set; }

        public string PrevMessage { get; set; }

        public bool Equals(GlobalMessageChangedEvent globalMessageChangedEvent)
        {
            return (globalMessageChangedEvent != null && this.Message == globalMessageChangedEvent.Message && this.PrevMessage == globalMessageChangedEvent.PrevMessage);
        }

        public override bool Equals(object globalMessageChangedEvent)
        {
            return Equals(globalMessageChangedEvent as GlobalMessageChangedEvent);
        }

        public override int GetHashCode()
        {
            return (Message + "_" + PrevMessage).GetHashCode();
        }
    }

    public class GroupAlarmAction : AlarmAction, IEquatable<GroupAlarmAction>
    {
        public AlarmAction[] Action { get; set; }

        public bool Equals(GroupAlarmAction groupAlarmAction)
        {
            return (groupAlarmAction != null && ((this.Action == null && groupAlarmAction.Action == null) || (this.Action != null && groupAlarmAction.Action != null && Enumerable.SequenceEqual(this.Action, groupAlarmAction.Action))));
        }

        public override bool Equals(object groupAlarmAction)
        {
            return Equals(groupAlarmAction as GroupAlarmAction);
        }

        public override int GetHashCode()
        {
            return (Action).GetHashCode();
        }
    }

    public class GuestAliases : DynamicData, IEquatable<GuestAliases>
    {
        public string Base64Cert { get; set; }

        public GuestAuthAliasInfo[] Aliases { get; set; }

        public bool Equals(GuestAliases guestAliases)
        {
            return (guestAliases != null && this.Base64Cert == guestAliases.Base64Cert && ((this.Aliases == null && guestAliases.Aliases == null) || (this.Aliases != null && guestAliases.Aliases != null && Enumerable.SequenceEqual(this.Aliases, guestAliases.Aliases))));
        }

        public override bool Equals(object guestAliases)
        {
            return Equals(guestAliases as GuestAliases);
        }

        public override int GetHashCode()
        {
            return (Base64Cert + "_" + Aliases).GetHashCode();
        }
    }

    public class GuestAliasManager : ViewBase, IEquatable<GuestAliasManager>
    {
        public void AddGuestAlias(ManagedObjectReference vm, GuestAuthentication auth, string username, bool mapCert, string base64Cert, GuestAuthAliasInfo aliasInfo)
        {
        }

        public void RemoveGuestAlias(ManagedObjectReference vm, GuestAuthentication auth, string username, string base64Cert, GuestAuthSubject subject)
        {
        }

        public void RemoveGuestAliasByCert(ManagedObjectReference vm, GuestAuthentication auth, string username, string base64Cert)
        {
        }

        public GuestAliases[] ListGuestAliases(ManagedObjectReference vm, GuestAuthentication auth, string username)
        {
            return default(GuestAliases[]);
        }

        public GuestMappedAliases[] ListGuestMappedAliases(ManagedObjectReference vm, GuestAuthentication auth)
        {
            return default(GuestMappedAliases[]);
        }

        public bool Equals(GuestAliasManager guestAliasManager)
        {
            return (guestAliasManager != null && base.Equals(guestAliasManager));
        }

        public override bool Equals(object guestAliasManager)
        {
            return Equals(guestAliasManager as GuestAliasManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestAuthAliasInfo : DynamicData, IEquatable<GuestAuthAliasInfo>
    {
        public GuestAuthSubject Subject { get; set; }

        public string Comment { get; set; }

        public bool Equals(GuestAuthAliasInfo guestAuthAliasInfo)
        {
            return (guestAuthAliasInfo != null && ((this.Subject == null && guestAuthAliasInfo.Subject == null) || (this.Subject != null && this.Subject.Equals(guestAuthAliasInfo.Subject))) && this.Comment == guestAuthAliasInfo.Comment);
        }

        public override bool Equals(object guestAuthAliasInfo)
        {
            return Equals(guestAuthAliasInfo as GuestAuthAliasInfo);
        }

        public override int GetHashCode()
        {
            return (Subject + "_" + Comment).GetHashCode();
        }
    }

    public class GuestAuthAnySubject : GuestAuthSubject, IEquatable<GuestAuthAnySubject>
    {
        public bool Equals(GuestAuthAnySubject guestAuthAnySubject)
        {
            return (guestAuthAnySubject != null && base.Equals(guestAuthAnySubject));
        }

        public override bool Equals(object guestAuthAnySubject)
        {
            return Equals(guestAuthAnySubject as GuestAuthAnySubject);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestAuthentication : DynamicData, IEquatable<GuestAuthentication>
    {
        public bool InteractiveSession { get; set; }

        public bool Equals(GuestAuthentication guestAuthentication)
        {
            return (guestAuthentication != null && this.InteractiveSession == guestAuthentication.InteractiveSession);
        }

        public override bool Equals(object guestAuthentication)
        {
            return Equals(guestAuthentication as GuestAuthentication);
        }

        public override int GetHashCode()
        {
            return (InteractiveSession).GetHashCode();
        }
    }

    public class GuestAuthenticationChallenge : GuestOperationsFault, IEquatable<GuestAuthenticationChallenge>
    {
        public GuestAuthentication ServerChallenge { get; set; }

        public long SessionID { get; set; }

        public bool Equals(GuestAuthenticationChallenge guestAuthenticationChallenge)
        {
            return (guestAuthenticationChallenge != null && ((this.ServerChallenge == null && guestAuthenticationChallenge.ServerChallenge == null) || (this.ServerChallenge != null && this.ServerChallenge.Equals(guestAuthenticationChallenge.ServerChallenge))) && this.SessionID == guestAuthenticationChallenge.SessionID);
        }

        public override bool Equals(object guestAuthenticationChallenge)
        {
            return Equals(guestAuthenticationChallenge as GuestAuthenticationChallenge);
        }

        public override int GetHashCode()
        {
            return (ServerChallenge + "_" + SessionID).GetHashCode();
        }
    }

    public class GuestAuthManager : ViewBase, IEquatable<GuestAuthManager>
    {
        public void ValidateCredentialsInGuest(ManagedObjectReference vm, GuestAuthentication auth)
        {
        }

        public GuestAuthentication AcquireCredentialsInGuest(ManagedObjectReference vm, GuestAuthentication requestedAuth, long? sessionID)
        {
            return default(GuestAuthentication);
        }

        public void ReleaseCredentialsInGuest(ManagedObjectReference vm, GuestAuthentication auth)
        {
        }

        public bool Equals(GuestAuthManager guestAuthManager)
        {
            return (guestAuthManager != null && base.Equals(guestAuthManager));
        }

        public override bool Equals(object guestAuthManager)
        {
            return Equals(guestAuthManager as GuestAuthManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestAuthNamedSubject : GuestAuthSubject, IEquatable<GuestAuthNamedSubject>
    {
        public string Name { get; set; }

        public bool Equals(GuestAuthNamedSubject guestAuthNamedSubject)
        {
            return (guestAuthNamedSubject != null && this.Name == guestAuthNamedSubject.Name);
        }

        public override bool Equals(object guestAuthNamedSubject)
        {
            return Equals(guestAuthNamedSubject as GuestAuthNamedSubject);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class GuestAuthSubject : DynamicData, IEquatable<GuestAuthSubject>
    {
        public bool Equals(GuestAuthSubject guestAuthSubject)
        {
            return (guestAuthSubject != null && base.Equals(guestAuthSubject));
        }

        public override bool Equals(object guestAuthSubject)
        {
            return Equals(guestAuthSubject as GuestAuthSubject);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestComponentsOutOfDate : GuestOperationsFault, IEquatable<GuestComponentsOutOfDate>
    {
        public bool Equals(GuestComponentsOutOfDate guestComponentsOutOfDate)
        {
            return (guestComponentsOutOfDate != null && base.Equals(guestComponentsOutOfDate));
        }

        public override bool Equals(object guestComponentsOutOfDate)
        {
            return Equals(guestComponentsOutOfDate as GuestComponentsOutOfDate);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestDiskInfo : DynamicData, IEquatable<GuestDiskInfo>
    {
        public string DiskPath { get; set; }

        public long? Capacity { get; set; }

        public long? FreeSpace { get; set; }

        public bool Equals(GuestDiskInfo guestDiskInfo)
        {
            return (guestDiskInfo != null && this.DiskPath == guestDiskInfo.DiskPath && ((this.Capacity == null && guestDiskInfo.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(guestDiskInfo.Capacity))) && ((this.FreeSpace == null && guestDiskInfo.FreeSpace == null) || (this.FreeSpace != null && this.FreeSpace.Equals(guestDiskInfo.FreeSpace))));
        }

        public override bool Equals(object guestDiskInfo)
        {
            return Equals(guestDiskInfo as GuestDiskInfo);
        }

        public override int GetHashCode()
        {
            return (DiskPath + "_" + Capacity + "_" + FreeSpace).GetHashCode();
        }
    }

    public class GuestFileAttributes : DynamicData, IEquatable<GuestFileAttributes>
    {
        public DateTime? ModificationTime { get; set; }

        public DateTime? AccessTime { get; set; }

        public string SymlinkTarget { get; set; }

        public bool Equals(GuestFileAttributes guestFileAttributes)
        {
            return (guestFileAttributes != null && ((this.ModificationTime == null && guestFileAttributes.ModificationTime == null) || (this.ModificationTime != null && this.ModificationTime.Equals(guestFileAttributes.ModificationTime))) && ((this.AccessTime == null && guestFileAttributes.AccessTime == null) || (this.AccessTime != null && this.AccessTime.Equals(guestFileAttributes.AccessTime))) && this.SymlinkTarget == guestFileAttributes.SymlinkTarget);
        }

        public override bool Equals(object guestFileAttributes)
        {
            return Equals(guestFileAttributes as GuestFileAttributes);
        }

        public override int GetHashCode()
        {
            return (ModificationTime + "_" + AccessTime + "_" + SymlinkTarget).GetHashCode();
        }
    }

    public class GuestFileInfo : DynamicData, IEquatable<GuestFileInfo>
    {
        public string Path { get; set; }

        public string Type { get; set; }

        public long Size { get; set; }

        public GuestFileAttributes Attributes { get; set; }

        public bool Equals(GuestFileInfo guestFileInfo)
        {
            return (guestFileInfo != null && this.Path == guestFileInfo.Path && this.Type == guestFileInfo.Type && this.Size == guestFileInfo.Size && ((this.Attributes == null && guestFileInfo.Attributes == null) || (this.Attributes != null && this.Attributes.Equals(guestFileInfo.Attributes))));
        }

        public override bool Equals(object guestFileInfo)
        {
            return Equals(guestFileInfo as GuestFileInfo);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + Type + "_" + Size + "_" + Attributes).GetHashCode();
        }
    }

    public class GuestFileManager : ViewBase, IEquatable<GuestFileManager>
    {
        public void MakeDirectoryInGuest(ManagedObjectReference vm, GuestAuthentication auth, string directoryPath, bool createParentDirectories)
        {
        }

        public void DeleteFileInGuest(ManagedObjectReference vm, GuestAuthentication auth, string filePath)
        {
        }

        public void DeleteDirectoryInGuest(ManagedObjectReference vm, GuestAuthentication auth, string directoryPath, bool recursive)
        {
        }

        public void MoveDirectoryInGuest(ManagedObjectReference vm, GuestAuthentication auth, string srcDirectoryPath, string dstDirectoryPath)
        {
        }

        public void MoveFileInGuest(ManagedObjectReference vm, GuestAuthentication auth, string srcFilePath, string dstFilePath, bool overwrite)
        {
        }

        public string CreateTemporaryFileInGuest(ManagedObjectReference vm, GuestAuthentication auth, string prefix, string suffix, string directoryPath)
        {
            return default(string);
        }

        public string CreateTemporaryDirectoryInGuest(ManagedObjectReference vm, GuestAuthentication auth, string prefix, string suffix, string directoryPath)
        {
            return default(string);
        }

        public GuestListFileInfo ListFilesInGuest(ManagedObjectReference vm, GuestAuthentication auth, string filePath, int? index, int? maxResults, string matchPattern)
        {
            return default(GuestListFileInfo);
        }

        public void ChangeFileAttributesInGuest(ManagedObjectReference vm, GuestAuthentication auth, string guestFilePath, GuestFileAttributes fileAttributes)
        {
        }

        public FileTransferInformation InitiateFileTransferFromGuest(ManagedObjectReference vm, GuestAuthentication auth, string guestFilePath)
        {
            return default(FileTransferInformation);
        }

        public string InitiateFileTransferToGuest(ManagedObjectReference vm, GuestAuthentication auth, string guestFilePath, GuestFileAttributes fileAttributes, long fileSize, bool overwrite)
        {
            return default(string);
        }

        public bool Equals(GuestFileManager guestFileManager)
        {
            return (guestFileManager != null && base.Equals(guestFileManager));
        }

        public override bool Equals(object guestFileManager)
        {
            return Equals(guestFileManager as GuestFileManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestInfo : DynamicData, IEquatable<GuestInfo>
    {
        public VirtualMachineToolsStatus? ToolsStatus { get; set; }

        public string ToolsVersionStatus { get; set; }

        public string ToolsVersionStatus2 { get; set; }

        public string ToolsRunningStatus { get; set; }

        public string ToolsVersion { get; set; }

        public string ToolsInstallType { get; set; }

        public string GuestId { get; set; }

        public string GuestFamily { get; set; }

        public string GuestFullName { get; set; }

        public string HostName { get; set; }

        public string IpAddress { get; set; }

        public GuestNicInfo[] Net { get; set; }

        public GuestStackInfo[] IpStack { get; set; }

        public GuestDiskInfo[] Disk { get; set; }

        public GuestScreenInfo Screen { get; set; }

        public string GuestState { get; set; }

        public string AppHeartbeatStatus { get; set; }

        public bool? GuestKernelCrashed { get; set; }

        public string AppState { get; set; }

        public bool? GuestOperationsReady { get; set; }

        public bool? InteractiveGuestOperationsReady { get; set; }

        public bool? GuestStateChangeSupported { get; set; }

        public GuestInfoNamespaceGenerationInfo[] GenerationInfo { get; set; }

        public bool Equals(GuestInfo guestInfo)
        {
            return (guestInfo != null && ((this.ToolsStatus == null && guestInfo.ToolsStatus == null) || (this.ToolsStatus != null && this.ToolsStatus.Equals(guestInfo.ToolsStatus))) && this.ToolsVersionStatus == guestInfo.ToolsVersionStatus && this.ToolsVersionStatus2 == guestInfo.ToolsVersionStatus2 && this.ToolsRunningStatus == guestInfo.ToolsRunningStatus && this.ToolsVersion == guestInfo.ToolsVersion && this.ToolsInstallType == guestInfo.ToolsInstallType && this.GuestId == guestInfo.GuestId && this.GuestFamily == guestInfo.GuestFamily && this.GuestFullName == guestInfo.GuestFullName && this.HostName == guestInfo.HostName && this.IpAddress == guestInfo.IpAddress && ((this.Net == null && guestInfo.Net == null) || (this.Net != null && guestInfo.Net != null && Enumerable.SequenceEqual(this.Net, guestInfo.Net))) && ((this.IpStack == null && guestInfo.IpStack == null) || (this.IpStack != null && guestInfo.IpStack != null && Enumerable.SequenceEqual(this.IpStack, guestInfo.IpStack))) && ((this.Disk == null && guestInfo.Disk == null) || (this.Disk != null && guestInfo.Disk != null && Enumerable.SequenceEqual(this.Disk, guestInfo.Disk))) && ((this.Screen == null && guestInfo.Screen == null) || (this.Screen != null && this.Screen.Equals(guestInfo.Screen))) && this.GuestState == guestInfo.GuestState && this.AppHeartbeatStatus == guestInfo.AppHeartbeatStatus && ((this.GuestKernelCrashed == null && guestInfo.GuestKernelCrashed == null) || (this.GuestKernelCrashed != null && this.GuestKernelCrashed.Equals(guestInfo.GuestKernelCrashed))) && this.AppState == guestInfo.AppState && ((this.GuestOperationsReady == null && guestInfo.GuestOperationsReady == null) || (this.GuestOperationsReady != null && this.GuestOperationsReady.Equals(guestInfo.GuestOperationsReady))) && ((this.InteractiveGuestOperationsReady == null && guestInfo.InteractiveGuestOperationsReady == null) || (this.InteractiveGuestOperationsReady != null && this.InteractiveGuestOperationsReady.Equals(guestInfo.InteractiveGuestOperationsReady))) && ((this.GuestStateChangeSupported == null && guestInfo.GuestStateChangeSupported == null) || (this.GuestStateChangeSupported != null && this.GuestStateChangeSupported.Equals(guestInfo.GuestStateChangeSupported))) && ((this.GenerationInfo == null && guestInfo.GenerationInfo == null) || (this.GenerationInfo != null && guestInfo.GenerationInfo != null && Enumerable.SequenceEqual(this.GenerationInfo, guestInfo.GenerationInfo))));
        }

        public override bool Equals(object guestInfo)
        {
            return Equals(guestInfo as GuestInfo);
        }

        public override int GetHashCode()
        {
            return (ToolsStatus + "_" + ToolsVersionStatus + "_" + ToolsVersionStatus2 + "_" + ToolsRunningStatus + "_" + ToolsVersion + "_" + ToolsInstallType + "_" + GuestId + "_" + GuestFamily + "_" + GuestFullName + "_" + HostName + "_" + IpAddress + "_" + Net + "_" + IpStack + "_" + Disk + "_" + Screen + "_" + GuestState + "_" + AppHeartbeatStatus + "_" + GuestKernelCrashed + "_" + AppState + "_" + GuestOperationsReady + "_" + InteractiveGuestOperationsReady + "_" + GuestStateChangeSupported + "_" + GenerationInfo).GetHashCode();
        }
    }

    public class GuestInfoNamespaceGenerationInfo : DynamicData, IEquatable<GuestInfoNamespaceGenerationInfo>
    {
        public string Key { get; set; }

        public int GenerationNo { get; set; }

        public bool Equals(GuestInfoNamespaceGenerationInfo guestInfoNamespaceGenerationInfo)
        {
            return (guestInfoNamespaceGenerationInfo != null && this.Key == guestInfoNamespaceGenerationInfo.Key && this.GenerationNo == guestInfoNamespaceGenerationInfo.GenerationNo);
        }

        public override bool Equals(object guestInfoNamespaceGenerationInfo)
        {
            return Equals(guestInfoNamespaceGenerationInfo as GuestInfoNamespaceGenerationInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + GenerationNo).GetHashCode();
        }
    }

    public class GuestListFileInfo : DynamicData, IEquatable<GuestListFileInfo>
    {
        public GuestFileInfo[] Files { get; set; }

        public int Remaining { get; set; }

        public bool Equals(GuestListFileInfo guestListFileInfo)
        {
            return (guestListFileInfo != null && ((this.Files == null && guestListFileInfo.Files == null) || (this.Files != null && guestListFileInfo.Files != null && Enumerable.SequenceEqual(this.Files, guestListFileInfo.Files))) && this.Remaining == guestListFileInfo.Remaining);
        }

        public override bool Equals(object guestListFileInfo)
        {
            return Equals(guestListFileInfo as GuestListFileInfo);
        }

        public override int GetHashCode()
        {
            return (Files + "_" + Remaining).GetHashCode();
        }
    }

    public class GuestMappedAliases : DynamicData, IEquatable<GuestMappedAliases>
    {
        public string Base64Cert { get; set; }

        public string Username { get; set; }

        public GuestAuthSubject[] Subjects { get; set; }

        public bool Equals(GuestMappedAliases guestMappedAliases)
        {
            return (guestMappedAliases != null && this.Base64Cert == guestMappedAliases.Base64Cert && this.Username == guestMappedAliases.Username && ((this.Subjects == null && guestMappedAliases.Subjects == null) || (this.Subjects != null && guestMappedAliases.Subjects != null && Enumerable.SequenceEqual(this.Subjects, guestMappedAliases.Subjects))));
        }

        public override bool Equals(object guestMappedAliases)
        {
            return Equals(guestMappedAliases as GuestMappedAliases);
        }

        public override int GetHashCode()
        {
            return (Base64Cert + "_" + Username + "_" + Subjects).GetHashCode();
        }
    }

    public class GuestMultipleMappings : GuestOperationsFault, IEquatable<GuestMultipleMappings>
    {
        public bool Equals(GuestMultipleMappings guestMultipleMappings)
        {
            return (guestMultipleMappings != null && base.Equals(guestMultipleMappings));
        }

        public override bool Equals(object guestMultipleMappings)
        {
            return Equals(guestMultipleMappings as GuestMultipleMappings);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestNicInfo : DynamicData, IEquatable<GuestNicInfo>
    {
        public string Network { get; set; }

        public string[] IpAddress { get; set; }

        public string MacAddress { get; set; }

        public bool Connected { get; set; }

        public int DeviceConfigId { get; set; }

        public NetDnsConfigInfo DnsConfig { get; set; }

        public NetIpConfigInfo IpConfig { get; set; }

        public NetBIOSConfigInfo NetBIOSConfig { get; set; }

        public bool Equals(GuestNicInfo guestNicInfo)
        {
            return (guestNicInfo != null && this.Network == guestNicInfo.Network && ((this.IpAddress == null && guestNicInfo.IpAddress == null) || (this.IpAddress != null && guestNicInfo.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, guestNicInfo.IpAddress))) && this.MacAddress == guestNicInfo.MacAddress && this.Connected == guestNicInfo.Connected && this.DeviceConfigId == guestNicInfo.DeviceConfigId && ((this.DnsConfig == null && guestNicInfo.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(guestNicInfo.DnsConfig))) && ((this.IpConfig == null && guestNicInfo.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(guestNicInfo.IpConfig))) && ((this.NetBIOSConfig == null && guestNicInfo.NetBIOSConfig == null) || (this.NetBIOSConfig != null && this.NetBIOSConfig.Equals(guestNicInfo.NetBIOSConfig))));
        }

        public override bool Equals(object guestNicInfo)
        {
            return Equals(guestNicInfo as GuestNicInfo);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + IpAddress + "_" + MacAddress + "_" + Connected + "_" + DeviceConfigId + "_" + DnsConfig + "_" + IpConfig + "_" + NetBIOSConfig).GetHashCode();
        }
    }

    public class GuestOperationsFault : VimFault, IEquatable<GuestOperationsFault>
    {
        public bool Equals(GuestOperationsFault guestOperationsFault)
        {
            return (guestOperationsFault != null && base.Equals(guestOperationsFault));
        }

        public override bool Equals(object guestOperationsFault)
        {
            return Equals(guestOperationsFault as GuestOperationsFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestOperationsManager : ViewBase, IEquatable<GuestOperationsManager>
    {
        public ManagedObjectReference AuthManager { get; set; }

        public ManagedObjectReference FileManager { get; set; }

        public ManagedObjectReference ProcessManager { get; set; }

        public ManagedObjectReference GuestWindowsRegistryManager { get; set; }

        public ManagedObjectReference AliasManager { get; set; }

        public GuestOperationsManager_LinkedView LinkedView { get; set; }

        public bool Equals(GuestOperationsManager guestOperationsManager)
        {
            return (guestOperationsManager != null && ((this.AuthManager == null && guestOperationsManager.AuthManager == null) || (this.AuthManager != null && this.AuthManager.Equals(guestOperationsManager.AuthManager))) && ((this.FileManager == null && guestOperationsManager.FileManager == null) || (this.FileManager != null && this.FileManager.Equals(guestOperationsManager.FileManager))) && ((this.ProcessManager == null && guestOperationsManager.ProcessManager == null) || (this.ProcessManager != null && this.ProcessManager.Equals(guestOperationsManager.ProcessManager))) && ((this.GuestWindowsRegistryManager == null && guestOperationsManager.GuestWindowsRegistryManager == null) || (this.GuestWindowsRegistryManager != null && this.GuestWindowsRegistryManager.Equals(guestOperationsManager.GuestWindowsRegistryManager))) && ((this.AliasManager == null && guestOperationsManager.AliasManager == null) || (this.AliasManager != null && this.AliasManager.Equals(guestOperationsManager.AliasManager))) && ((this.LinkedView == null && guestOperationsManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(guestOperationsManager.LinkedView))));
        }

        public override bool Equals(object guestOperationsManager)
        {
            return Equals(guestOperationsManager as GuestOperationsManager);
        }

        public override int GetHashCode()
        {
            return (AuthManager + "_" + FileManager + "_" + ProcessManager + "_" + GuestWindowsRegistryManager + "_" + AliasManager + "_" + LinkedView).GetHashCode();
        }
    }

    public class GuestOperationsManager_LinkedView : IEquatable<GuestOperationsManager_LinkedView>
    {
        public GuestAuthManager AuthManager { get; set; }

        public GuestFileManager FileManager { get; set; }

        public GuestProcessManager ProcessManager { get; set; }

        public GuestWindowsRegistryManager GuestWindowsRegistryManager { get; set; }

        public GuestAliasManager AliasManager { get; set; }

        public bool Equals(GuestOperationsManager_LinkedView guestOperationsManager_LinkedView)
        {
            return (guestOperationsManager_LinkedView != null && ((this.AuthManager == null && guestOperationsManager_LinkedView.AuthManager == null) || (this.AuthManager != null && this.AuthManager.Equals(guestOperationsManager_LinkedView.AuthManager))) && ((this.FileManager == null && guestOperationsManager_LinkedView.FileManager == null) || (this.FileManager != null && this.FileManager.Equals(guestOperationsManager_LinkedView.FileManager))) && ((this.ProcessManager == null && guestOperationsManager_LinkedView.ProcessManager == null) || (this.ProcessManager != null && this.ProcessManager.Equals(guestOperationsManager_LinkedView.ProcessManager))) && ((this.GuestWindowsRegistryManager == null && guestOperationsManager_LinkedView.GuestWindowsRegistryManager == null) || (this.GuestWindowsRegistryManager != null && this.GuestWindowsRegistryManager.Equals(guestOperationsManager_LinkedView.GuestWindowsRegistryManager))) && ((this.AliasManager == null && guestOperationsManager_LinkedView.AliasManager == null) || (this.AliasManager != null && this.AliasManager.Equals(guestOperationsManager_LinkedView.AliasManager))));
        }

        public override bool Equals(object guestOperationsManager_LinkedView)
        {
            return Equals(guestOperationsManager_LinkedView as GuestOperationsManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (AuthManager + "_" + FileManager + "_" + ProcessManager + "_" + GuestWindowsRegistryManager + "_" + AliasManager).GetHashCode();
        }
    }

    public class GuestOperationsUnavailable : GuestOperationsFault, IEquatable<GuestOperationsUnavailable>
    {
        public bool Equals(GuestOperationsUnavailable guestOperationsUnavailable)
        {
            return (guestOperationsUnavailable != null && base.Equals(guestOperationsUnavailable));
        }

        public override bool Equals(object guestOperationsUnavailable)
        {
            return Equals(guestOperationsUnavailable as GuestOperationsUnavailable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestOsDescriptor : DynamicData, IEquatable<GuestOsDescriptor>
    {
        public string Id { get; set; }

        public string Family { get; set; }

        public string FullName { get; set; }

        public int SupportedMaxCPUs { get; set; }

        public int NumSupportedPhysicalSockets { get; set; }

        public int NumSupportedCoresPerSocket { get; set; }

        public int SupportedMinMemMB { get; set; }

        public int SupportedMaxMemMB { get; set; }

        public int RecommendedMemMB { get; set; }

        public int RecommendedColorDepth { get; set; }

        public string[] SupportedDiskControllerList { get; set; }

        public string RecommendedSCSIController { get; set; }

        public string RecommendedDiskController { get; set; }

        public int SupportedNumDisks { get; set; }

        public int RecommendedDiskSizeMB { get; set; }

        public string RecommendedCdromController { get; set; }

        public string[] SupportedEthernetCard { get; set; }

        public string RecommendedEthernetCard { get; set; }

        public bool? SupportsSlaveDisk { get; set; }

        public HostCpuIdInfo[] CpuFeatureMask { get; set; }

        public bool SmcRequired { get; set; }

        public bool SupportsWakeOnLan { get; set; }

        public bool SupportsVMI { get; set; }

        public bool SupportsMemoryHotAdd { get; set; }

        public bool SupportsCpuHotAdd { get; set; }

        public bool SupportsCpuHotRemove { get; set; }

        public string[] SupportedFirmware { get; set; }

        public string RecommendedFirmware { get; set; }

        public string[] SupportedUSBControllerList { get; set; }

        public string RecommendedUSBController { get; set; }

        public bool Supports3D { get; set; }

        public bool Recommended3D { get; set; }

        public bool SmcRecommended { get; set; }

        public bool Ich7mRecommended { get; set; }

        public bool UsbRecommended { get; set; }

        public string SupportLevel { get; set; }

        public bool SupportedForCreate { get; set; }

        public IntOption VRAMSizeInKB { get; set; }

        public int NumSupportedFloppyDevices { get; set; }

        public string[] WakeOnLanEthernetCard { get; set; }

        public bool SupportsPvscsiControllerForBoot { get; set; }

        public bool DiskUuidEnabled { get; set; }

        public bool SupportsHotPlugPCI { get; set; }

        public bool? SupportsSecureBoot { get; set; }

        public bool? DefaultSecureBoot { get; set; }

        public bool? PersistentMemorySupported { get; set; }

        public long? SupportedMinPersistentMemoryMB { get; set; }

        public long? SupportedMaxPersistentMemoryMB { get; set; }

        public long? RecommendedPersistentMemoryMB { get; set; }

        public bool? PersistentMemoryHotAddSupported { get; set; }

        public bool? PersistentMemoryHotRemoveSupported { get; set; }

        public bool? PersistentMemoryColdGrowthSupported { get; set; }

        public long? PersistentMemoryColdGrowthGranularityMB { get; set; }

        public bool? PersistentMemoryHotGrowthSupported { get; set; }

        public long? PersistentMemoryHotGrowthGranularityMB { get; set; }

        public int? NumRecommendedPhysicalSockets { get; set; }

        public int? NumRecommendedCoresPerSocket { get; set; }

        public BoolOption VvtdSupported { get; set; }

        public BoolOption VbsSupported { get; set; }

        public bool? SupportsTPM20 { get; set; }

        public bool Equals(GuestOsDescriptor guestOsDescriptor)
        {
            return (guestOsDescriptor != null && this.Id == guestOsDescriptor.Id && this.Family == guestOsDescriptor.Family && this.FullName == guestOsDescriptor.FullName && this.SupportedMaxCPUs == guestOsDescriptor.SupportedMaxCPUs && this.NumSupportedPhysicalSockets == guestOsDescriptor.NumSupportedPhysicalSockets && this.NumSupportedCoresPerSocket == guestOsDescriptor.NumSupportedCoresPerSocket && this.SupportedMinMemMB == guestOsDescriptor.SupportedMinMemMB && this.SupportedMaxMemMB == guestOsDescriptor.SupportedMaxMemMB && this.RecommendedMemMB == guestOsDescriptor.RecommendedMemMB && this.RecommendedColorDepth == guestOsDescriptor.RecommendedColorDepth && ((this.SupportedDiskControllerList == null && guestOsDescriptor.SupportedDiskControllerList == null) || (this.SupportedDiskControllerList != null && guestOsDescriptor.SupportedDiskControllerList != null && Enumerable.SequenceEqual(this.SupportedDiskControllerList, guestOsDescriptor.SupportedDiskControllerList))) && this.RecommendedSCSIController == guestOsDescriptor.RecommendedSCSIController && this.RecommendedDiskController == guestOsDescriptor.RecommendedDiskController && this.SupportedNumDisks == guestOsDescriptor.SupportedNumDisks && this.RecommendedDiskSizeMB == guestOsDescriptor.RecommendedDiskSizeMB && this.RecommendedCdromController == guestOsDescriptor.RecommendedCdromController && ((this.SupportedEthernetCard == null && guestOsDescriptor.SupportedEthernetCard == null) || (this.SupportedEthernetCard != null && guestOsDescriptor.SupportedEthernetCard != null && Enumerable.SequenceEqual(this.SupportedEthernetCard, guestOsDescriptor.SupportedEthernetCard))) && this.RecommendedEthernetCard == guestOsDescriptor.RecommendedEthernetCard && ((this.SupportsSlaveDisk == null && guestOsDescriptor.SupportsSlaveDisk == null) || (this.SupportsSlaveDisk != null && this.SupportsSlaveDisk.Equals(guestOsDescriptor.SupportsSlaveDisk))) && ((this.CpuFeatureMask == null && guestOsDescriptor.CpuFeatureMask == null) || (this.CpuFeatureMask != null && guestOsDescriptor.CpuFeatureMask != null && Enumerable.SequenceEqual(this.CpuFeatureMask, guestOsDescriptor.CpuFeatureMask))) && this.SmcRequired == guestOsDescriptor.SmcRequired && this.SupportsWakeOnLan == guestOsDescriptor.SupportsWakeOnLan && this.SupportsVMI == guestOsDescriptor.SupportsVMI && this.SupportsMemoryHotAdd == guestOsDescriptor.SupportsMemoryHotAdd && this.SupportsCpuHotAdd == guestOsDescriptor.SupportsCpuHotAdd && this.SupportsCpuHotRemove == guestOsDescriptor.SupportsCpuHotRemove && ((this.SupportedFirmware == null && guestOsDescriptor.SupportedFirmware == null) || (this.SupportedFirmware != null && guestOsDescriptor.SupportedFirmware != null && Enumerable.SequenceEqual(this.SupportedFirmware, guestOsDescriptor.SupportedFirmware))) && this.RecommendedFirmware == guestOsDescriptor.RecommendedFirmware && ((this.SupportedUSBControllerList == null && guestOsDescriptor.SupportedUSBControllerList == null) || (this.SupportedUSBControllerList != null && guestOsDescriptor.SupportedUSBControllerList != null && Enumerable.SequenceEqual(this.SupportedUSBControllerList, guestOsDescriptor.SupportedUSBControllerList))) && this.RecommendedUSBController == guestOsDescriptor.RecommendedUSBController && this.Supports3D == guestOsDescriptor.Supports3D && this.Recommended3D == guestOsDescriptor.Recommended3D && this.SmcRecommended == guestOsDescriptor.SmcRecommended && this.Ich7mRecommended == guestOsDescriptor.Ich7mRecommended && this.UsbRecommended == guestOsDescriptor.UsbRecommended && this.SupportLevel == guestOsDescriptor.SupportLevel && this.SupportedForCreate == guestOsDescriptor.SupportedForCreate && ((this.VRAMSizeInKB == null && guestOsDescriptor.VRAMSizeInKB == null) || (this.VRAMSizeInKB != null && this.VRAMSizeInKB.Equals(guestOsDescriptor.VRAMSizeInKB))) && this.NumSupportedFloppyDevices == guestOsDescriptor.NumSupportedFloppyDevices && ((this.WakeOnLanEthernetCard == null && guestOsDescriptor.WakeOnLanEthernetCard == null) || (this.WakeOnLanEthernetCard != null && guestOsDescriptor.WakeOnLanEthernetCard != null && Enumerable.SequenceEqual(this.WakeOnLanEthernetCard, guestOsDescriptor.WakeOnLanEthernetCard))) && this.SupportsPvscsiControllerForBoot == guestOsDescriptor.SupportsPvscsiControllerForBoot && this.DiskUuidEnabled == guestOsDescriptor.DiskUuidEnabled && this.SupportsHotPlugPCI == guestOsDescriptor.SupportsHotPlugPCI && ((this.SupportsSecureBoot == null && guestOsDescriptor.SupportsSecureBoot == null) || (this.SupportsSecureBoot != null && this.SupportsSecureBoot.Equals(guestOsDescriptor.SupportsSecureBoot))) && ((this.DefaultSecureBoot == null && guestOsDescriptor.DefaultSecureBoot == null) || (this.DefaultSecureBoot != null && this.DefaultSecureBoot.Equals(guestOsDescriptor.DefaultSecureBoot))) && ((this.PersistentMemorySupported == null && guestOsDescriptor.PersistentMemorySupported == null) || (this.PersistentMemorySupported != null && this.PersistentMemorySupported.Equals(guestOsDescriptor.PersistentMemorySupported))) && ((this.SupportedMinPersistentMemoryMB == null && guestOsDescriptor.SupportedMinPersistentMemoryMB == null) || (this.SupportedMinPersistentMemoryMB != null && this.SupportedMinPersistentMemoryMB.Equals(guestOsDescriptor.SupportedMinPersistentMemoryMB))) && ((this.SupportedMaxPersistentMemoryMB == null && guestOsDescriptor.SupportedMaxPersistentMemoryMB == null) || (this.SupportedMaxPersistentMemoryMB != null && this.SupportedMaxPersistentMemoryMB.Equals(guestOsDescriptor.SupportedMaxPersistentMemoryMB))) && ((this.RecommendedPersistentMemoryMB == null && guestOsDescriptor.RecommendedPersistentMemoryMB == null) || (this.RecommendedPersistentMemoryMB != null && this.RecommendedPersistentMemoryMB.Equals(guestOsDescriptor.RecommendedPersistentMemoryMB))) && ((this.PersistentMemoryHotAddSupported == null && guestOsDescriptor.PersistentMemoryHotAddSupported == null) || (this.PersistentMemoryHotAddSupported != null && this.PersistentMemoryHotAddSupported.Equals(guestOsDescriptor.PersistentMemoryHotAddSupported))) && ((this.PersistentMemoryHotRemoveSupported == null && guestOsDescriptor.PersistentMemoryHotRemoveSupported == null) || (this.PersistentMemoryHotRemoveSupported != null && this.PersistentMemoryHotRemoveSupported.Equals(guestOsDescriptor.PersistentMemoryHotRemoveSupported))) && ((this.PersistentMemoryColdGrowthSupported == null && guestOsDescriptor.PersistentMemoryColdGrowthSupported == null) || (this.PersistentMemoryColdGrowthSupported != null && this.PersistentMemoryColdGrowthSupported.Equals(guestOsDescriptor.PersistentMemoryColdGrowthSupported))) && ((this.PersistentMemoryColdGrowthGranularityMB == null && guestOsDescriptor.PersistentMemoryColdGrowthGranularityMB == null) || (this.PersistentMemoryColdGrowthGranularityMB != null && this.PersistentMemoryColdGrowthGranularityMB.Equals(guestOsDescriptor.PersistentMemoryColdGrowthGranularityMB))) && ((this.PersistentMemoryHotGrowthSupported == null && guestOsDescriptor.PersistentMemoryHotGrowthSupported == null) || (this.PersistentMemoryHotGrowthSupported != null && this.PersistentMemoryHotGrowthSupported.Equals(guestOsDescriptor.PersistentMemoryHotGrowthSupported))) && ((this.PersistentMemoryHotGrowthGranularityMB == null && guestOsDescriptor.PersistentMemoryHotGrowthGranularityMB == null) || (this.PersistentMemoryHotGrowthGranularityMB != null && this.PersistentMemoryHotGrowthGranularityMB.Equals(guestOsDescriptor.PersistentMemoryHotGrowthGranularityMB))) && ((this.NumRecommendedPhysicalSockets == null && guestOsDescriptor.NumRecommendedPhysicalSockets == null) || (this.NumRecommendedPhysicalSockets != null && this.NumRecommendedPhysicalSockets.Equals(guestOsDescriptor.NumRecommendedPhysicalSockets))) && ((this.NumRecommendedCoresPerSocket == null && guestOsDescriptor.NumRecommendedCoresPerSocket == null) || (this.NumRecommendedCoresPerSocket != null && this.NumRecommendedCoresPerSocket.Equals(guestOsDescriptor.NumRecommendedCoresPerSocket))) && ((this.VvtdSupported == null && guestOsDescriptor.VvtdSupported == null) || (this.VvtdSupported != null && this.VvtdSupported.Equals(guestOsDescriptor.VvtdSupported))) && ((this.VbsSupported == null && guestOsDescriptor.VbsSupported == null) || (this.VbsSupported != null && this.VbsSupported.Equals(guestOsDescriptor.VbsSupported))) && ((this.SupportsTPM20 == null && guestOsDescriptor.SupportsTPM20 == null) || (this.SupportsTPM20 != null && this.SupportsTPM20.Equals(guestOsDescriptor.SupportsTPM20))));
        }

        public override bool Equals(object guestOsDescriptor)
        {
            return Equals(guestOsDescriptor as GuestOsDescriptor);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Family + "_" + FullName + "_" + SupportedMaxCPUs + "_" + NumSupportedPhysicalSockets + "_" + NumSupportedCoresPerSocket + "_" + SupportedMinMemMB + "_" + SupportedMaxMemMB + "_" + RecommendedMemMB + "_" + RecommendedColorDepth + "_" + SupportedDiskControllerList + "_" + RecommendedSCSIController + "_" + RecommendedDiskController + "_" + SupportedNumDisks + "_" + RecommendedDiskSizeMB + "_" + RecommendedCdromController + "_" + SupportedEthernetCard + "_" + RecommendedEthernetCard + "_" + SupportsSlaveDisk + "_" + CpuFeatureMask + "_" + SmcRequired + "_" + SupportsWakeOnLan + "_" + SupportsVMI + "_" + SupportsMemoryHotAdd + "_" + SupportsCpuHotAdd + "_" + SupportsCpuHotRemove + "_" + SupportedFirmware + "_" + RecommendedFirmware + "_" + SupportedUSBControllerList + "_" + RecommendedUSBController + "_" + Supports3D + "_" + Recommended3D + "_" + SmcRecommended + "_" + Ich7mRecommended + "_" + UsbRecommended + "_" + SupportLevel + "_" + SupportedForCreate + "_" + VRAMSizeInKB + "_" + NumSupportedFloppyDevices + "_" + WakeOnLanEthernetCard + "_" + SupportsPvscsiControllerForBoot + "_" + DiskUuidEnabled + "_" + SupportsHotPlugPCI + "_" + SupportsSecureBoot + "_" + DefaultSecureBoot + "_" + PersistentMemorySupported + "_" + SupportedMinPersistentMemoryMB + "_" + SupportedMaxPersistentMemoryMB + "_" + RecommendedPersistentMemoryMB + "_" + PersistentMemoryHotAddSupported + "_" + PersistentMemoryHotRemoveSupported + "_" + PersistentMemoryColdGrowthSupported + "_" + PersistentMemoryColdGrowthGranularityMB + "_" + PersistentMemoryHotGrowthSupported + "_" + PersistentMemoryHotGrowthGranularityMB + "_" + NumRecommendedPhysicalSockets + "_" + NumRecommendedCoresPerSocket + "_" + VvtdSupported + "_" + VbsSupported + "_" + SupportsTPM20).GetHashCode();
        }
    }

    public class GuestPermissionDenied : GuestOperationsFault, IEquatable<GuestPermissionDenied>
    {
        public bool Equals(GuestPermissionDenied guestPermissionDenied)
        {
            return (guestPermissionDenied != null && base.Equals(guestPermissionDenied));
        }

        public override bool Equals(object guestPermissionDenied)
        {
            return Equals(guestPermissionDenied as GuestPermissionDenied);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestPosixFileAttributes : GuestFileAttributes, IEquatable<GuestPosixFileAttributes>
    {
        public int? OwnerId { get; set; }

        public int? GroupId { get; set; }

        public long? Permissions { get; set; }

        public bool Equals(GuestPosixFileAttributes guestPosixFileAttributes)
        {
            return (guestPosixFileAttributes != null && ((this.OwnerId == null && guestPosixFileAttributes.OwnerId == null) || (this.OwnerId != null && this.OwnerId.Equals(guestPosixFileAttributes.OwnerId))) && ((this.GroupId == null && guestPosixFileAttributes.GroupId == null) || (this.GroupId != null && this.GroupId.Equals(guestPosixFileAttributes.GroupId))) && ((this.Permissions == null && guestPosixFileAttributes.Permissions == null) || (this.Permissions != null && this.Permissions.Equals(guestPosixFileAttributes.Permissions))));
        }

        public override bool Equals(object guestPosixFileAttributes)
        {
            return Equals(guestPosixFileAttributes as GuestPosixFileAttributes);
        }

        public override int GetHashCode()
        {
            return (OwnerId + "_" + GroupId + "_" + Permissions).GetHashCode();
        }
    }

    public class GuestProcessInfo : DynamicData, IEquatable<GuestProcessInfo>
    {
        public string Name { get; set; }

        public long Pid { get; set; }

        public string Owner { get; set; }

        public string CmdLine { get; set; }

        public DateTime StartTime { get; set; }

        public DateTime? EndTime { get; set; }

        public int? ExitCode { get; set; }

        public bool Equals(GuestProcessInfo guestProcessInfo)
        {
            return (guestProcessInfo != null && this.Name == guestProcessInfo.Name && this.Pid == guestProcessInfo.Pid && this.Owner == guestProcessInfo.Owner && this.CmdLine == guestProcessInfo.CmdLine && this.StartTime == guestProcessInfo.StartTime && ((this.EndTime == null && guestProcessInfo.EndTime == null) || (this.EndTime != null && this.EndTime.Equals(guestProcessInfo.EndTime))) && ((this.ExitCode == null && guestProcessInfo.ExitCode == null) || (this.ExitCode != null && this.ExitCode.Equals(guestProcessInfo.ExitCode))));
        }

        public override bool Equals(object guestProcessInfo)
        {
            return Equals(guestProcessInfo as GuestProcessInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Pid + "_" + Owner + "_" + CmdLine + "_" + StartTime + "_" + EndTime + "_" + ExitCode).GetHashCode();
        }
    }

    public class GuestProcessManager : ViewBase, IEquatable<GuestProcessManager>
    {
        public long StartProgramInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestProgramSpec spec)
        {
            return default(long);
        }

        public GuestProcessInfo[] ListProcessesInGuest(ManagedObjectReference vm, GuestAuthentication auth, long[] pids)
        {
            return default(GuestProcessInfo[]);
        }

        public void TerminateProcessInGuest(ManagedObjectReference vm, GuestAuthentication auth, long pid)
        {
        }

        public string[] ReadEnvironmentVariableInGuest(ManagedObjectReference vm, GuestAuthentication auth, string[] names)
        {
            return default(string[]);
        }

        public bool Equals(GuestProcessManager guestProcessManager)
        {
            return (guestProcessManager != null && base.Equals(guestProcessManager));
        }

        public override bool Equals(object guestProcessManager)
        {
            return Equals(guestProcessManager as GuestProcessManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestProcessNotFound : GuestOperationsFault, IEquatable<GuestProcessNotFound>
    {
        public long Pid { get; set; }

        public bool Equals(GuestProcessNotFound guestProcessNotFound)
        {
            return (guestProcessNotFound != null && this.Pid == guestProcessNotFound.Pid);
        }

        public override bool Equals(object guestProcessNotFound)
        {
            return Equals(guestProcessNotFound as GuestProcessNotFound);
        }

        public override int GetHashCode()
        {
            return (Pid).GetHashCode();
        }
    }

    public class GuestProgramSpec : DynamicData, IEquatable<GuestProgramSpec>
    {
        public string ProgramPath { get; set; }

        public string Arguments { get; set; }

        public string WorkingDirectory { get; set; }

        public string[] EnvVariables { get; set; }

        public bool Equals(GuestProgramSpec guestProgramSpec)
        {
            return (guestProgramSpec != null && this.ProgramPath == guestProgramSpec.ProgramPath && this.Arguments == guestProgramSpec.Arguments && this.WorkingDirectory == guestProgramSpec.WorkingDirectory && ((this.EnvVariables == null && guestProgramSpec.EnvVariables == null) || (this.EnvVariables != null && guestProgramSpec.EnvVariables != null && Enumerable.SequenceEqual(this.EnvVariables, guestProgramSpec.EnvVariables))));
        }

        public override bool Equals(object guestProgramSpec)
        {
            return Equals(guestProgramSpec as GuestProgramSpec);
        }

        public override int GetHashCode()
        {
            return (ProgramPath + "_" + Arguments + "_" + WorkingDirectory + "_" + EnvVariables).GetHashCode();
        }
    }

    public class GuestRegistryFault : GuestOperationsFault, IEquatable<GuestRegistryFault>
    {
        public long WindowsSystemErrorCode { get; set; }

        public bool Equals(GuestRegistryFault guestRegistryFault)
        {
            return (guestRegistryFault != null && this.WindowsSystemErrorCode == guestRegistryFault.WindowsSystemErrorCode);
        }

        public override bool Equals(object guestRegistryFault)
        {
            return Equals(guestRegistryFault as GuestRegistryFault);
        }

        public override int GetHashCode()
        {
            return (WindowsSystemErrorCode).GetHashCode();
        }
    }

    public class GuestRegistryKeyAlreadyExists : GuestRegistryKeyFault, IEquatable<GuestRegistryKeyAlreadyExists>
    {
        public bool Equals(GuestRegistryKeyAlreadyExists guestRegistryKeyAlreadyExists)
        {
            return (guestRegistryKeyAlreadyExists != null && base.Equals(guestRegistryKeyAlreadyExists));
        }

        public override bool Equals(object guestRegistryKeyAlreadyExists)
        {
            return Equals(guestRegistryKeyAlreadyExists as GuestRegistryKeyAlreadyExists);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegistryKeyFault : GuestRegistryFault, IEquatable<GuestRegistryKeyFault>
    {
        public string KeyName { get; set; }

        public bool Equals(GuestRegistryKeyFault guestRegistryKeyFault)
        {
            return (guestRegistryKeyFault != null && this.KeyName == guestRegistryKeyFault.KeyName);
        }

        public override bool Equals(object guestRegistryKeyFault)
        {
            return Equals(guestRegistryKeyFault as GuestRegistryKeyFault);
        }

        public override int GetHashCode()
        {
            return (KeyName).GetHashCode();
        }
    }

    public class GuestRegistryKeyHasSubkeys : GuestRegistryKeyFault, IEquatable<GuestRegistryKeyHasSubkeys>
    {
        public bool Equals(GuestRegistryKeyHasSubkeys guestRegistryKeyHasSubkeys)
        {
            return (guestRegistryKeyHasSubkeys != null && base.Equals(guestRegistryKeyHasSubkeys));
        }

        public override bool Equals(object guestRegistryKeyHasSubkeys)
        {
            return Equals(guestRegistryKeyHasSubkeys as GuestRegistryKeyHasSubkeys);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegistryKeyInvalid : GuestRegistryKeyFault, IEquatable<GuestRegistryKeyInvalid>
    {
        public bool Equals(GuestRegistryKeyInvalid guestRegistryKeyInvalid)
        {
            return (guestRegistryKeyInvalid != null && base.Equals(guestRegistryKeyInvalid));
        }

        public override bool Equals(object guestRegistryKeyInvalid)
        {
            return Equals(guestRegistryKeyInvalid as GuestRegistryKeyInvalid);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegistryKeyParentVolatile : GuestRegistryKeyFault, IEquatable<GuestRegistryKeyParentVolatile>
    {
        public bool Equals(GuestRegistryKeyParentVolatile guestRegistryKeyParentVolatile)
        {
            return (guestRegistryKeyParentVolatile != null && base.Equals(guestRegistryKeyParentVolatile));
        }

        public override bool Equals(object guestRegistryKeyParentVolatile)
        {
            return Equals(guestRegistryKeyParentVolatile as GuestRegistryKeyParentVolatile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegistryValueFault : GuestRegistryFault, IEquatable<GuestRegistryValueFault>
    {
        public string KeyName { get; set; }

        public string ValueName { get; set; }

        public bool Equals(GuestRegistryValueFault guestRegistryValueFault)
        {
            return (guestRegistryValueFault != null && this.KeyName == guestRegistryValueFault.KeyName && this.ValueName == guestRegistryValueFault.ValueName);
        }

        public override bool Equals(object guestRegistryValueFault)
        {
            return Equals(guestRegistryValueFault as GuestRegistryValueFault);
        }

        public override int GetHashCode()
        {
            return (KeyName + "_" + ValueName).GetHashCode();
        }
    }

    public class GuestRegistryValueNotFound : GuestRegistryValueFault, IEquatable<GuestRegistryValueNotFound>
    {
        public bool Equals(GuestRegistryValueNotFound guestRegistryValueNotFound)
        {
            return (guestRegistryValueNotFound != null && base.Equals(guestRegistryValueNotFound));
        }

        public override bool Equals(object guestRegistryValueNotFound)
        {
            return Equals(guestRegistryValueNotFound as GuestRegistryValueNotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegKeyNameSpec : DynamicData, IEquatable<GuestRegKeyNameSpec>
    {
        public string RegistryPath { get; set; }

        public string WowBitness { get; set; }

        public bool Equals(GuestRegKeyNameSpec guestRegKeyNameSpec)
        {
            return (guestRegKeyNameSpec != null && this.RegistryPath == guestRegKeyNameSpec.RegistryPath && this.WowBitness == guestRegKeyNameSpec.WowBitness);
        }

        public override bool Equals(object guestRegKeyNameSpec)
        {
            return Equals(guestRegKeyNameSpec as GuestRegKeyNameSpec);
        }

        public override int GetHashCode()
        {
            return (RegistryPath + "_" + WowBitness).GetHashCode();
        }
    }

    public class GuestRegKeyRecordSpec : DynamicData, IEquatable<GuestRegKeyRecordSpec>
    {
        public GuestRegKeySpec Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(GuestRegKeyRecordSpec guestRegKeyRecordSpec)
        {
            return (guestRegKeyRecordSpec != null && ((this.Key == null && guestRegKeyRecordSpec.Key == null) || (this.Key != null && this.Key.Equals(guestRegKeyRecordSpec.Key))) && ((this.Fault == null && guestRegKeyRecordSpec.Fault == null) || (this.Fault != null && this.Fault.Equals(guestRegKeyRecordSpec.Fault))));
        }

        public override bool Equals(object guestRegKeyRecordSpec)
        {
            return Equals(guestRegKeyRecordSpec as GuestRegKeyRecordSpec);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Fault).GetHashCode();
        }
    }

    public class GuestRegKeySpec : DynamicData, IEquatable<GuestRegKeySpec>
    {
        public GuestRegKeyNameSpec KeyName { get; set; }

        public string ClassType { get; set; }

        public DateTime LastWritten { get; set; }

        public bool Equals(GuestRegKeySpec guestRegKeySpec)
        {
            return (guestRegKeySpec != null && ((this.KeyName == null && guestRegKeySpec.KeyName == null) || (this.KeyName != null && this.KeyName.Equals(guestRegKeySpec.KeyName))) && this.ClassType == guestRegKeySpec.ClassType && this.LastWritten == guestRegKeySpec.LastWritten);
        }

        public override bool Equals(object guestRegKeySpec)
        {
            return Equals(guestRegKeySpec as GuestRegKeySpec);
        }

        public override int GetHashCode()
        {
            return (KeyName + "_" + ClassType + "_" + LastWritten).GetHashCode();
        }
    }

    public class GuestRegValueBinarySpec : GuestRegValueDataSpec, IEquatable<GuestRegValueBinarySpec>
    {
        public byte[] Value { get; set; }

        public bool Equals(GuestRegValueBinarySpec guestRegValueBinarySpec)
        {
            return (guestRegValueBinarySpec != null && ((this.Value == null && guestRegValueBinarySpec.Value == null) || (this.Value != null && guestRegValueBinarySpec.Value != null && Enumerable.SequenceEqual(this.Value, guestRegValueBinarySpec.Value))));
        }

        public override bool Equals(object guestRegValueBinarySpec)
        {
            return Equals(guestRegValueBinarySpec as GuestRegValueBinarySpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestRegValueDataSpec : DynamicData, IEquatable<GuestRegValueDataSpec>
    {
        public bool Equals(GuestRegValueDataSpec guestRegValueDataSpec)
        {
            return (guestRegValueDataSpec != null && base.Equals(guestRegValueDataSpec));
        }

        public override bool Equals(object guestRegValueDataSpec)
        {
            return Equals(guestRegValueDataSpec as GuestRegValueDataSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class GuestRegValueDwordSpec : GuestRegValueDataSpec, IEquatable<GuestRegValueDwordSpec>
    {
        public int Value { get; set; }

        public bool Equals(GuestRegValueDwordSpec guestRegValueDwordSpec)
        {
            return (guestRegValueDwordSpec != null && this.Value == guestRegValueDwordSpec.Value);
        }

        public override bool Equals(object guestRegValueDwordSpec)
        {
            return Equals(guestRegValueDwordSpec as GuestRegValueDwordSpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestRegValueExpandStringSpec : GuestRegValueDataSpec, IEquatable<GuestRegValueExpandStringSpec>
    {
        public string Value { get; set; }

        public bool Equals(GuestRegValueExpandStringSpec guestRegValueExpandStringSpec)
        {
            return (guestRegValueExpandStringSpec != null && this.Value == guestRegValueExpandStringSpec.Value);
        }

        public override bool Equals(object guestRegValueExpandStringSpec)
        {
            return Equals(guestRegValueExpandStringSpec as GuestRegValueExpandStringSpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestRegValueMultiStringSpec : GuestRegValueDataSpec, IEquatable<GuestRegValueMultiStringSpec>
    {
        public string[] Value { get; set; }

        public bool Equals(GuestRegValueMultiStringSpec guestRegValueMultiStringSpec)
        {
            return (guestRegValueMultiStringSpec != null && ((this.Value == null && guestRegValueMultiStringSpec.Value == null) || (this.Value != null && guestRegValueMultiStringSpec.Value != null && Enumerable.SequenceEqual(this.Value, guestRegValueMultiStringSpec.Value))));
        }

        public override bool Equals(object guestRegValueMultiStringSpec)
        {
            return Equals(guestRegValueMultiStringSpec as GuestRegValueMultiStringSpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestRegValueNameSpec : DynamicData, IEquatable<GuestRegValueNameSpec>
    {
        public GuestRegKeyNameSpec KeyName { get; set; }

        public string Name { get; set; }

        public bool Equals(GuestRegValueNameSpec guestRegValueNameSpec)
        {
            return (guestRegValueNameSpec != null && ((this.KeyName == null && guestRegValueNameSpec.KeyName == null) || (this.KeyName != null && this.KeyName.Equals(guestRegValueNameSpec.KeyName))) && this.Name == guestRegValueNameSpec.Name);
        }

        public override bool Equals(object guestRegValueNameSpec)
        {
            return Equals(guestRegValueNameSpec as GuestRegValueNameSpec);
        }

        public override int GetHashCode()
        {
            return (KeyName + "_" + Name).GetHashCode();
        }
    }

    public class GuestRegValueQwordSpec : GuestRegValueDataSpec, IEquatable<GuestRegValueQwordSpec>
    {
        public long Value { get; set; }

        public bool Equals(GuestRegValueQwordSpec guestRegValueQwordSpec)
        {
            return (guestRegValueQwordSpec != null && this.Value == guestRegValueQwordSpec.Value);
        }

        public override bool Equals(object guestRegValueQwordSpec)
        {
            return Equals(guestRegValueQwordSpec as GuestRegValueQwordSpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestRegValueSpec : DynamicData, IEquatable<GuestRegValueSpec>
    {
        public GuestRegValueNameSpec Name { get; set; }

        public GuestRegValueDataSpec Data { get; set; }

        public bool Equals(GuestRegValueSpec guestRegValueSpec)
        {
            return (guestRegValueSpec != null && ((this.Name == null && guestRegValueSpec.Name == null) || (this.Name != null && this.Name.Equals(guestRegValueSpec.Name))) && ((this.Data == null && guestRegValueSpec.Data == null) || (this.Data != null && this.Data.Equals(guestRegValueSpec.Data))));
        }

        public override bool Equals(object guestRegValueSpec)
        {
            return Equals(guestRegValueSpec as GuestRegValueSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Data).GetHashCode();
        }
    }

    public class GuestRegValueStringSpec : GuestRegValueDataSpec, IEquatable<GuestRegValueStringSpec>
    {
        public string Value { get; set; }

        public bool Equals(GuestRegValueStringSpec guestRegValueStringSpec)
        {
            return (guestRegValueStringSpec != null && this.Value == guestRegValueStringSpec.Value);
        }

        public override bool Equals(object guestRegValueStringSpec)
        {
            return Equals(guestRegValueStringSpec as GuestRegValueStringSpec);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class GuestScreenInfo : DynamicData, IEquatable<GuestScreenInfo>
    {
        public int Width { get; set; }

        public int Height { get; set; }

        public bool Equals(GuestScreenInfo guestScreenInfo)
        {
            return (guestScreenInfo != null && this.Width == guestScreenInfo.Width && this.Height == guestScreenInfo.Height);
        }

        public override bool Equals(object guestScreenInfo)
        {
            return Equals(guestScreenInfo as GuestScreenInfo);
        }

        public override int GetHashCode()
        {
            return (Width + "_" + Height).GetHashCode();
        }
    }

    public class GuestStackInfo : DynamicData, IEquatable<GuestStackInfo>
    {
        public NetDnsConfigInfo DnsConfig { get; set; }

        public NetIpRouteConfigInfo IpRouteConfig { get; set; }

        public KeyValue[] IpStackConfig { get; set; }

        public NetDhcpConfigInfo DhcpConfig { get; set; }

        public bool Equals(GuestStackInfo guestStackInfo)
        {
            return (guestStackInfo != null && ((this.DnsConfig == null && guestStackInfo.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(guestStackInfo.DnsConfig))) && ((this.IpRouteConfig == null && guestStackInfo.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(guestStackInfo.IpRouteConfig))) && ((this.IpStackConfig == null && guestStackInfo.IpStackConfig == null) || (this.IpStackConfig != null && guestStackInfo.IpStackConfig != null && Enumerable.SequenceEqual(this.IpStackConfig, guestStackInfo.IpStackConfig))) && ((this.DhcpConfig == null && guestStackInfo.DhcpConfig == null) || (this.DhcpConfig != null && this.DhcpConfig.Equals(guestStackInfo.DhcpConfig))));
        }

        public override bool Equals(object guestStackInfo)
        {
            return Equals(guestStackInfo as GuestStackInfo);
        }

        public override int GetHashCode()
        {
            return (DnsConfig + "_" + IpRouteConfig + "_" + IpStackConfig + "_" + DhcpConfig).GetHashCode();
        }
    }

    public class GuestWindowsFileAttributes : GuestFileAttributes, IEquatable<GuestWindowsFileAttributes>
    {
        public bool? Hidden { get; set; }

        public bool? ReadOnly { get; set; }

        public DateTime? CreateTime { get; set; }

        public bool Equals(GuestWindowsFileAttributes guestWindowsFileAttributes)
        {
            return (guestWindowsFileAttributes != null && ((this.Hidden == null && guestWindowsFileAttributes.Hidden == null) || (this.Hidden != null && this.Hidden.Equals(guestWindowsFileAttributes.Hidden))) && ((this.ReadOnly == null && guestWindowsFileAttributes.ReadOnly == null) || (this.ReadOnly != null && this.ReadOnly.Equals(guestWindowsFileAttributes.ReadOnly))) && ((this.CreateTime == null && guestWindowsFileAttributes.CreateTime == null) || (this.CreateTime != null && this.CreateTime.Equals(guestWindowsFileAttributes.CreateTime))));
        }

        public override bool Equals(object guestWindowsFileAttributes)
        {
            return Equals(guestWindowsFileAttributes as GuestWindowsFileAttributes);
        }

        public override int GetHashCode()
        {
            return (Hidden + "_" + ReadOnly + "_" + CreateTime).GetHashCode();
        }
    }

    public class GuestWindowsProgramSpec : GuestProgramSpec, IEquatable<GuestWindowsProgramSpec>
    {
        public bool StartMinimized { get; set; }

        public bool Equals(GuestWindowsProgramSpec guestWindowsProgramSpec)
        {
            return (guestWindowsProgramSpec != null && this.StartMinimized == guestWindowsProgramSpec.StartMinimized);
        }

        public override bool Equals(object guestWindowsProgramSpec)
        {
            return Equals(guestWindowsProgramSpec as GuestWindowsProgramSpec);
        }

        public override int GetHashCode()
        {
            return (StartMinimized).GetHashCode();
        }
    }

    public class GuestWindowsRegistryManager : ViewBase, IEquatable<GuestWindowsRegistryManager>
    {
        public void CreateRegistryKeyInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegKeyNameSpec keyName, bool isVolatile, string classType)
        {
        }

        public GuestRegKeyRecordSpec[] ListRegistryKeysInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegKeyNameSpec keyName, bool recursive, string matchPattern)
        {
            return default(GuestRegKeyRecordSpec[]);
        }

        public void DeleteRegistryKeyInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegKeyNameSpec keyName, bool recursive)
        {
        }

        public void SetRegistryValueInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegValueSpec value)
        {
        }

        public GuestRegValueSpec[] ListRegistryValuesInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegKeyNameSpec keyName, bool expandStrings, string matchPattern)
        {
            return default(GuestRegValueSpec[]);
        }

        public void DeleteRegistryValueInGuest(ManagedObjectReference vm, GuestAuthentication auth, GuestRegValueNameSpec valueName)
        {
        }

        public bool Equals(GuestWindowsRegistryManager guestWindowsRegistryManager)
        {
            return (guestWindowsRegistryManager != null && base.Equals(guestWindowsRegistryManager));
        }

        public override bool Equals(object guestWindowsRegistryManager)
        {
            return Equals(guestWindowsRegistryManager as GuestWindowsRegistryManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HAErrorsAtDest : MigrationFault, IEquatable<HAErrorsAtDest>
    {
        public bool Equals(HAErrorsAtDest hAErrorsAtDest)
        {
            return (hAErrorsAtDest != null && base.Equals(hAErrorsAtDest));
        }

        public override bool Equals(object hAErrorsAtDest)
        {
            return Equals(hAErrorsAtDest as HAErrorsAtDest);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HbrDiskMigrationAction : ClusterAction, IEquatable<HbrDiskMigrationAction>
    {
        public string CollectionId { get; set; }

        public string CollectionName { get; set; }

        public string[] DiskIds { get; set; }

        public ManagedObjectReference Source { get; set; }

        public ManagedObjectReference Destination { get; set; }

        public long SizeTransferred { get; set; }

        public float? SpaceUtilSrcBefore { get; set; }

        public float? SpaceUtilDstBefore { get; set; }

        public float? SpaceUtilSrcAfter { get; set; }

        public float? SpaceUtilDstAfter { get; set; }

        public float? IoLatencySrcBefore { get; set; }

        public float? IoLatencyDstBefore { get; set; }

        public HbrDiskMigrationAction_LinkedView LinkedView { get; set; }

        public bool Equals(HbrDiskMigrationAction hbrDiskMigrationAction)
        {
            return (hbrDiskMigrationAction != null && this.CollectionId == hbrDiskMigrationAction.CollectionId && this.CollectionName == hbrDiskMigrationAction.CollectionName && ((this.DiskIds == null && hbrDiskMigrationAction.DiskIds == null) || (this.DiskIds != null && hbrDiskMigrationAction.DiskIds != null && Enumerable.SequenceEqual(this.DiskIds, hbrDiskMigrationAction.DiskIds))) && ((this.Source == null && hbrDiskMigrationAction.Source == null) || (this.Source != null && this.Source.Equals(hbrDiskMigrationAction.Source))) && ((this.Destination == null && hbrDiskMigrationAction.Destination == null) || (this.Destination != null && this.Destination.Equals(hbrDiskMigrationAction.Destination))) && this.SizeTransferred == hbrDiskMigrationAction.SizeTransferred && ((this.SpaceUtilSrcBefore == null && hbrDiskMigrationAction.SpaceUtilSrcBefore == null) || (this.SpaceUtilSrcBefore != null && this.SpaceUtilSrcBefore.Equals(hbrDiskMigrationAction.SpaceUtilSrcBefore))) && ((this.SpaceUtilDstBefore == null && hbrDiskMigrationAction.SpaceUtilDstBefore == null) || (this.SpaceUtilDstBefore != null && this.SpaceUtilDstBefore.Equals(hbrDiskMigrationAction.SpaceUtilDstBefore))) && ((this.SpaceUtilSrcAfter == null && hbrDiskMigrationAction.SpaceUtilSrcAfter == null) || (this.SpaceUtilSrcAfter != null && this.SpaceUtilSrcAfter.Equals(hbrDiskMigrationAction.SpaceUtilSrcAfter))) && ((this.SpaceUtilDstAfter == null && hbrDiskMigrationAction.SpaceUtilDstAfter == null) || (this.SpaceUtilDstAfter != null && this.SpaceUtilDstAfter.Equals(hbrDiskMigrationAction.SpaceUtilDstAfter))) && ((this.IoLatencySrcBefore == null && hbrDiskMigrationAction.IoLatencySrcBefore == null) || (this.IoLatencySrcBefore != null && this.IoLatencySrcBefore.Equals(hbrDiskMigrationAction.IoLatencySrcBefore))) && ((this.IoLatencyDstBefore == null && hbrDiskMigrationAction.IoLatencyDstBefore == null) || (this.IoLatencyDstBefore != null && this.IoLatencyDstBefore.Equals(hbrDiskMigrationAction.IoLatencyDstBefore))) && ((this.LinkedView == null && hbrDiskMigrationAction.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hbrDiskMigrationAction.LinkedView))));
        }

        public override bool Equals(object hbrDiskMigrationAction)
        {
            return Equals(hbrDiskMigrationAction as HbrDiskMigrationAction);
        }

        public override int GetHashCode()
        {
            return (CollectionId + "_" + CollectionName + "_" + DiskIds + "_" + Source + "_" + Destination + "_" + SizeTransferred + "_" + SpaceUtilSrcBefore + "_" + SpaceUtilDstBefore + "_" + SpaceUtilSrcAfter + "_" + SpaceUtilDstAfter + "_" + IoLatencySrcBefore + "_" + IoLatencyDstBefore + "_" + LinkedView).GetHashCode();
        }
    }

    public class HbrDiskMigrationAction_LinkedView : IEquatable<HbrDiskMigrationAction_LinkedView>
    {
        public Datastore Source { get; set; }

        public Datastore Destination { get; set; }

        public bool Equals(HbrDiskMigrationAction_LinkedView hbrDiskMigrationAction_LinkedView)
        {
            return (hbrDiskMigrationAction_LinkedView != null && ((this.Source == null && hbrDiskMigrationAction_LinkedView.Source == null) || (this.Source != null && this.Source.Equals(hbrDiskMigrationAction_LinkedView.Source))) && ((this.Destination == null && hbrDiskMigrationAction_LinkedView.Destination == null) || (this.Destination != null && this.Destination.Equals(hbrDiskMigrationAction_LinkedView.Destination))));
        }

        public override bool Equals(object hbrDiskMigrationAction_LinkedView)
        {
            return Equals(hbrDiskMigrationAction_LinkedView as HbrDiskMigrationAction_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Destination).GetHashCode();
        }
    }

    public class HbrManagerReplicationVmInfo : DynamicData, IEquatable<HbrManagerReplicationVmInfo>
    {
        public string State { get; set; }

        public ReplicationVmProgressInfo ProgressInfo { get; set; }

        public string ImageId { get; set; }

        public LocalizedMethodFault LastError { get; set; }

        public bool Equals(HbrManagerReplicationVmInfo hbrManagerReplicationVmInfo)
        {
            return (hbrManagerReplicationVmInfo != null && this.State == hbrManagerReplicationVmInfo.State && ((this.ProgressInfo == null && hbrManagerReplicationVmInfo.ProgressInfo == null) || (this.ProgressInfo != null && this.ProgressInfo.Equals(hbrManagerReplicationVmInfo.ProgressInfo))) && this.ImageId == hbrManagerReplicationVmInfo.ImageId && ((this.LastError == null && hbrManagerReplicationVmInfo.LastError == null) || (this.LastError != null && this.LastError.Equals(hbrManagerReplicationVmInfo.LastError))));
        }

        public override bool Equals(object hbrManagerReplicationVmInfo)
        {
            return Equals(hbrManagerReplicationVmInfo as HbrManagerReplicationVmInfo);
        }

        public override int GetHashCode()
        {
            return (State + "_" + ProgressInfo + "_" + ImageId + "_" + LastError).GetHashCode();
        }
    }

    public class HbrManagerVmReplicationCapability : DynamicData, IEquatable<HbrManagerVmReplicationCapability>
    {
        public ManagedObjectReference Vm { get; set; }

        public string SupportedQuiesceMode { get; set; }

        public bool CompressionSupported { get; set; }

        public long MaxSupportedSourceDiskCapacity { get; set; }

        public long? MinRpo { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public HbrManagerVmReplicationCapability_LinkedView LinkedView { get; set; }

        public bool Equals(HbrManagerVmReplicationCapability hbrManagerVmReplicationCapability)
        {
            return (hbrManagerVmReplicationCapability != null && ((this.Vm == null && hbrManagerVmReplicationCapability.Vm == null) || (this.Vm != null && this.Vm.Equals(hbrManagerVmReplicationCapability.Vm))) && this.SupportedQuiesceMode == hbrManagerVmReplicationCapability.SupportedQuiesceMode && this.CompressionSupported == hbrManagerVmReplicationCapability.CompressionSupported && this.MaxSupportedSourceDiskCapacity == hbrManagerVmReplicationCapability.MaxSupportedSourceDiskCapacity && ((this.MinRpo == null && hbrManagerVmReplicationCapability.MinRpo == null) || (this.MinRpo != null && this.MinRpo.Equals(hbrManagerVmReplicationCapability.MinRpo))) && ((this.Fault == null && hbrManagerVmReplicationCapability.Fault == null) || (this.Fault != null && this.Fault.Equals(hbrManagerVmReplicationCapability.Fault))) && ((this.LinkedView == null && hbrManagerVmReplicationCapability.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hbrManagerVmReplicationCapability.LinkedView))));
        }

        public override bool Equals(object hbrManagerVmReplicationCapability)
        {
            return Equals(hbrManagerVmReplicationCapability as HbrManagerVmReplicationCapability);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + SupportedQuiesceMode + "_" + CompressionSupported + "_" + MaxSupportedSourceDiskCapacity + "_" + MinRpo + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class HbrManagerVmReplicationCapability_LinkedView : IEquatable<HbrManagerVmReplicationCapability_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(HbrManagerVmReplicationCapability_LinkedView hbrManagerVmReplicationCapability_LinkedView)
        {
            return (hbrManagerVmReplicationCapability_LinkedView != null && ((this.Vm == null && hbrManagerVmReplicationCapability_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(hbrManagerVmReplicationCapability_LinkedView.Vm))));
        }

        public override bool Equals(object hbrManagerVmReplicationCapability_LinkedView)
        {
            return Equals(hbrManagerVmReplicationCapability_LinkedView as HbrManagerVmReplicationCapability_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class HealthStatusChangedEvent : Event, IEquatable<HealthStatusChangedEvent>
    {
        public string ComponentId { get; set; }

        public string OldStatus { get; set; }

        public string NewStatus { get; set; }

        public string ComponentName { get; set; }

        public string ServiceId { get; set; }

        public bool Equals(HealthStatusChangedEvent healthStatusChangedEvent)
        {
            return (healthStatusChangedEvent != null && this.ComponentId == healthStatusChangedEvent.ComponentId && this.OldStatus == healthStatusChangedEvent.OldStatus && this.NewStatus == healthStatusChangedEvent.NewStatus && this.ComponentName == healthStatusChangedEvent.ComponentName && this.ServiceId == healthStatusChangedEvent.ServiceId);
        }

        public override bool Equals(object healthStatusChangedEvent)
        {
            return Equals(healthStatusChangedEvent as HealthStatusChangedEvent);
        }

        public override int GetHashCode()
        {
            return (ComponentId + "_" + OldStatus + "_" + NewStatus + "_" + ComponentName + "_" + ServiceId).GetHashCode();
        }
    }

    public class HealthSystemRuntime : DynamicData, IEquatable<HealthSystemRuntime>
    {
        public HostSystemHealthInfo SystemHealthInfo { get; set; }

        public HostHardwareStatusInfo HardwareStatusInfo { get; set; }

        public bool Equals(HealthSystemRuntime healthSystemRuntime)
        {
            return (healthSystemRuntime != null && ((this.SystemHealthInfo == null && healthSystemRuntime.SystemHealthInfo == null) || (this.SystemHealthInfo != null && this.SystemHealthInfo.Equals(healthSystemRuntime.SystemHealthInfo))) && ((this.HardwareStatusInfo == null && healthSystemRuntime.HardwareStatusInfo == null) || (this.HardwareStatusInfo != null && this.HardwareStatusInfo.Equals(healthSystemRuntime.HardwareStatusInfo))));
        }

        public override bool Equals(object healthSystemRuntime)
        {
            return Equals(healthSystemRuntime as HealthSystemRuntime);
        }

        public override int GetHashCode()
        {
            return (SystemHealthInfo + "_" + HardwareStatusInfo).GetHashCode();
        }
    }

    public class HealthUpdate : DynamicData, IEquatable<HealthUpdate>
    {
        public ManagedObjectReference Entity { get; set; }

        public string HealthUpdateInfoId { get; set; }

        public string Id { get; set; }

        public ManagedEntityStatus Status { get; set; }

        public string Remediation { get; set; }

        public HealthUpdate_LinkedView LinkedView { get; set; }

        public bool Equals(HealthUpdate healthUpdate)
        {
            return (healthUpdate != null && ((this.Entity == null && healthUpdate.Entity == null) || (this.Entity != null && this.Entity.Equals(healthUpdate.Entity))) && this.HealthUpdateInfoId == healthUpdate.HealthUpdateInfoId && this.Id == healthUpdate.Id && this.Status == healthUpdate.Status && this.Remediation == healthUpdate.Remediation && ((this.LinkedView == null && healthUpdate.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(healthUpdate.LinkedView))));
        }

        public override bool Equals(object healthUpdate)
        {
            return Equals(healthUpdate as HealthUpdate);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + HealthUpdateInfoId + "_" + Id + "_" + Status + "_" + Remediation + "_" + LinkedView).GetHashCode();
        }
    }

    public class HealthUpdate_LinkedView : IEquatable<HealthUpdate_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(HealthUpdate_LinkedView healthUpdate_LinkedView)
        {
            return (healthUpdate_LinkedView != null && ((this.Entity == null && healthUpdate_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(healthUpdate_LinkedView.Entity))));
        }

        public override bool Equals(object healthUpdate_LinkedView)
        {
            return Equals(healthUpdate_LinkedView as HealthUpdate_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class HealthUpdateInfo : DynamicData, IEquatable<HealthUpdateInfo>
    {
        public string Id { get; set; }

        public string ComponentType { get; set; }

        public string Description { get; set; }

        public bool Equals(HealthUpdateInfo healthUpdateInfo)
        {
            return (healthUpdateInfo != null && this.Id == healthUpdateInfo.Id && this.ComponentType == healthUpdateInfo.ComponentType && this.Description == healthUpdateInfo.Description);
        }

        public override bool Equals(object healthUpdateInfo)
        {
            return Equals(healthUpdateInfo as HealthUpdateInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + ComponentType + "_" + Description).GetHashCode();
        }
    }

    public class HealthUpdateManager : ViewBase, IEquatable<HealthUpdateManager>
    {
        public string RegisterHealthUpdateProvider(string name, HealthUpdateInfo[] healthUpdateInfo)
        {
            return default(string);
        }

        public void UnregisterHealthUpdateProvider(string providerId)
        {
        }

        public string[] QueryProviderList()
        {
            return default(string[]);
        }

        public bool HasProvider(string id)
        {
            return default(bool);
        }

        public string QueryProviderName(string id)
        {
            return default(string);
        }

        public HealthUpdateInfo[] QueryHealthUpdateInfos(string providerId)
        {
            return default(HealthUpdateInfo[]);
        }

        public void AddMonitoredEntities(string providerId, ManagedObjectReference[] entities)
        {
        }

        public void RemoveMonitoredEntities(string providerId, ManagedObjectReference[] entities)
        {
        }

        public ManagedObjectReference[] QueryMonitoredEntities(string providerId)
        {
            return default(ManagedObjectReference[]);
        }

        public bool HasMonitoredEntity(string providerId, ManagedObjectReference entity)
        {
            return default(bool);
        }

        public ManagedObjectReference[] QueryUnmonitoredHosts(string providerId, ManagedObjectReference cluster)
        {
            return default(ManagedObjectReference[]);
        }

        public void PostHealthUpdates(string providerId, HealthUpdate[] updates)
        {
        }

        public HealthUpdate[] QueryHealthUpdates(string providerId)
        {
            return default(HealthUpdate[]);
        }

        public string AddFilter(string providerId, string filterName, string[] infoIds)
        {
            return default(string);
        }

        public string[] QueryFilterList(string providerId)
        {
            return default(string[]);
        }

        public string QueryFilterName(string filterId)
        {
            return default(string);
        }

        public string[] QueryFilterInfoIds(string filterId)
        {
            return default(string[]);
        }

        public ManagedObjectReference[] QueryFilterEntities(string filterId)
        {
            return default(ManagedObjectReference[]);
        }

        public void AddFilterEntities(string filterId, ManagedObjectReference[] entities)
        {
        }

        public void RemoveFilterEntities(string filterId, ManagedObjectReference[] entities)
        {
        }

        public void RemoveFilter(string filterId)
        {
        }

        public bool Equals(HealthUpdateManager healthUpdateManager)
        {
            return (healthUpdateManager != null && base.Equals(healthUpdateManager));
        }

        public override bool Equals(object healthUpdateManager)
        {
            return Equals(healthUpdateManager as HealthUpdateManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HeterogenousHostsBlockingEVC : EVCConfigFault, IEquatable<HeterogenousHostsBlockingEVC>
    {
        public bool Equals(HeterogenousHostsBlockingEVC heterogenousHostsBlockingEVC)
        {
            return (heterogenousHostsBlockingEVC != null && base.Equals(heterogenousHostsBlockingEVC));
        }

        public override bool Equals(object heterogenousHostsBlockingEVC)
        {
            return Equals(heterogenousHostsBlockingEVC as HeterogenousHostsBlockingEVC);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HistoryCollector : ViewBase, IEquatable<HistoryCollector>
    {
        public object Filter { get; set; }

        public void SetCollectorPageSize(int maxCount)
        {
        }

        public void RewindCollector()
        {
        }

        public void ResetCollector()
        {
        }

        public void DestroyCollector()
        {
        }

        public bool Equals(HistoryCollector historyCollector)
        {
            return (historyCollector != null && ((this.Filter == null && historyCollector.Filter == null) || (this.Filter != null && this.Filter.Equals(historyCollector.Filter))));
        }

        public override bool Equals(object historyCollector)
        {
            return Equals(historyCollector as HistoryCollector);
        }

        public override int GetHashCode()
        {
            return (Filter).GetHashCode();
        }
    }

    public class HostAccessControlEntry : DynamicData, IEquatable<HostAccessControlEntry>
    {
        public string Principal { get; set; }

        public bool Group { get; set; }

        public HostAccessMode AccessMode { get; set; }

        public bool Equals(HostAccessControlEntry hostAccessControlEntry)
        {
            return (hostAccessControlEntry != null && this.Principal == hostAccessControlEntry.Principal && this.Group == hostAccessControlEntry.Group && this.AccessMode == hostAccessControlEntry.AccessMode);
        }

        public override bool Equals(object hostAccessControlEntry)
        {
            return Equals(hostAccessControlEntry as HostAccessControlEntry);
        }

        public override int GetHashCode()
        {
            return (Principal + "_" + Group + "_" + AccessMode).GetHashCode();
        }
    }

    public class HostAccessManager : ViewBase, IEquatable<HostAccessManager>
    {
        public HostLockdownMode LockdownMode { get; set; }

        public HostAccessControlEntry[] RetrieveHostAccessControlEntries()
        {
            return default(HostAccessControlEntry[]);
        }

        public void ChangeAccessMode(string principal, bool isGroup, HostAccessMode accessMode)
        {
        }

        public string[] QuerySystemUsers()
        {
            return default(string[]);
        }

        public void UpdateSystemUsers(string[] users)
        {
        }

        public string[] QueryLockdownExceptions()
        {
            return default(string[]);
        }

        public void UpdateLockdownExceptions(string[] users)
        {
        }

        public void ChangeLockdownMode(HostLockdownMode mode)
        {
        }

        public bool Equals(HostAccessManager hostAccessManager)
        {
            return (hostAccessManager != null && this.LockdownMode == hostAccessManager.LockdownMode);
        }

        public override bool Equals(object hostAccessManager)
        {
            return Equals(hostAccessManager as HostAccessManager);
        }

        public override int GetHashCode()
        {
            return (LockdownMode).GetHashCode();
        }
    }

    public class HostAccessRestrictedToManagementServer : NotSupported, IEquatable<HostAccessRestrictedToManagementServer>
    {
        public string ManagementServer { get; set; }

        public bool Equals(HostAccessRestrictedToManagementServer hostAccessRestrictedToManagementServer)
        {
            return (hostAccessRestrictedToManagementServer != null && this.ManagementServer == hostAccessRestrictedToManagementServer.ManagementServer);
        }

        public override bool Equals(object hostAccessRestrictedToManagementServer)
        {
            return Equals(hostAccessRestrictedToManagementServer as HostAccessRestrictedToManagementServer);
        }

        public override int GetHashCode()
        {
            return (ManagementServer).GetHashCode();
        }
    }

    public class HostAccountSpec : DynamicData, IEquatable<HostAccountSpec>
    {
        public string Id { get; set; }

        public string Password { get; set; }

        public string Description { get; set; }

        public bool Equals(HostAccountSpec hostAccountSpec)
        {
            return (hostAccountSpec != null && this.Id == hostAccountSpec.Id && this.Password == hostAccountSpec.Password && this.Description == hostAccountSpec.Description);
        }

        public override bool Equals(object hostAccountSpec)
        {
            return Equals(hostAccountSpec as HostAccountSpec);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Password + "_" + Description).GetHashCode();
        }
    }

    public class HostActiveDirectory : DynamicData, IEquatable<HostActiveDirectory>
    {
        public string ChangeOperation { get; set; }

        public HostActiveDirectorySpec Spec { get; set; }

        public bool Equals(HostActiveDirectory hostActiveDirectory)
        {
            return (hostActiveDirectory != null && this.ChangeOperation == hostActiveDirectory.ChangeOperation && ((this.Spec == null && hostActiveDirectory.Spec == null) || (this.Spec != null && this.Spec.Equals(hostActiveDirectory.Spec))));
        }

        public override bool Equals(object hostActiveDirectory)
        {
            return Equals(hostActiveDirectory as HostActiveDirectory);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Spec).GetHashCode();
        }
    }

    public class HostActiveDirectoryAuthentication : HostDirectoryStore, IEquatable<HostActiveDirectoryAuthentication>
    {
        public ManagedObjectReference JoinDomain_Task(string domainName, string userName, string password)
        {
            return default(ManagedObjectReference);
        }

        public void JoinDomain(string domainName, string userName, string password)
        {
        }

        public ManagedObjectReference JoinDomainWithCAM_Task(string domainName, string camServer)
        {
            return default(ManagedObjectReference);
        }

        public void JoinDomainWithCAM(string domainName, string camServer)
        {
        }

        public ManagedObjectReference ImportCertificateForCAM_Task(string certPath, string camServer)
        {
            return default(ManagedObjectReference);
        }

        public void ImportCertificateForCAM(string certPath, string camServer)
        {
        }

        public ManagedObjectReference LeaveCurrentDomain_Task(bool force)
        {
            return default(ManagedObjectReference);
        }

        public void LeaveCurrentDomain(bool force)
        {
        }

        public void EnableSmartCardAuthentication()
        {
        }

        public void InstallSmartCardTrustAnchor(string cert)
        {
        }

        public void ReplaceSmartCardTrustAnchors(string[] certs)
        {
        }

        public void RemoveSmartCardTrustAnchor(string issuer, string serial)
        {
        }

        public void RemoveSmartCardTrustAnchorByFingerprint(string fingerprint, string digest)
        {
        }

        public string[] ListSmartCardTrustAnchors()
        {
            return default(string[]);
        }

        public void DisableSmartCardAuthentication()
        {
        }

        public bool Equals(HostActiveDirectoryAuthentication hostActiveDirectoryAuthentication)
        {
            return (hostActiveDirectoryAuthentication != null && base.Equals(hostActiveDirectoryAuthentication));
        }

        public override bool Equals(object hostActiveDirectoryAuthentication)
        {
            return Equals(hostActiveDirectoryAuthentication as HostActiveDirectoryAuthentication);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostActiveDirectoryInfo : HostDirectoryStoreInfo, IEquatable<HostActiveDirectoryInfo>
    {
        public string JoinedDomain { get; set; }

        public string[] TrustedDomain { get; set; }

        public string DomainMembershipStatus { get; set; }

        public bool? SmartCardAuthenticationEnabled { get; set; }

        public bool Equals(HostActiveDirectoryInfo hostActiveDirectoryInfo)
        {
            return (hostActiveDirectoryInfo != null && this.JoinedDomain == hostActiveDirectoryInfo.JoinedDomain && ((this.TrustedDomain == null && hostActiveDirectoryInfo.TrustedDomain == null) || (this.TrustedDomain != null && hostActiveDirectoryInfo.TrustedDomain != null && Enumerable.SequenceEqual(this.TrustedDomain, hostActiveDirectoryInfo.TrustedDomain))) && this.DomainMembershipStatus == hostActiveDirectoryInfo.DomainMembershipStatus && ((this.SmartCardAuthenticationEnabled == null && hostActiveDirectoryInfo.SmartCardAuthenticationEnabled == null) || (this.SmartCardAuthenticationEnabled != null && this.SmartCardAuthenticationEnabled.Equals(hostActiveDirectoryInfo.SmartCardAuthenticationEnabled))));
        }

        public override bool Equals(object hostActiveDirectoryInfo)
        {
            return Equals(hostActiveDirectoryInfo as HostActiveDirectoryInfo);
        }

        public override int GetHashCode()
        {
            return (JoinedDomain + "_" + TrustedDomain + "_" + DomainMembershipStatus + "_" + SmartCardAuthenticationEnabled).GetHashCode();
        }
    }

    public class HostActiveDirectorySpec : DynamicData, IEquatable<HostActiveDirectorySpec>
    {
        public string DomainName { get; set; }

        public string UserName { get; set; }

        public string Password { get; set; }

        public string CamServer { get; set; }

        public string Thumbprint { get; set; }

        public bool? SmartCardAuthenticationEnabled { get; set; }

        public string[] SmartCardTrustAnchors { get; set; }

        public bool Equals(HostActiveDirectorySpec hostActiveDirectorySpec)
        {
            return (hostActiveDirectorySpec != null && this.DomainName == hostActiveDirectorySpec.DomainName && this.UserName == hostActiveDirectorySpec.UserName && this.Password == hostActiveDirectorySpec.Password && this.CamServer == hostActiveDirectorySpec.CamServer && this.Thumbprint == hostActiveDirectorySpec.Thumbprint && ((this.SmartCardAuthenticationEnabled == null && hostActiveDirectorySpec.SmartCardAuthenticationEnabled == null) || (this.SmartCardAuthenticationEnabled != null && this.SmartCardAuthenticationEnabled.Equals(hostActiveDirectorySpec.SmartCardAuthenticationEnabled))) && ((this.SmartCardTrustAnchors == null && hostActiveDirectorySpec.SmartCardTrustAnchors == null) || (this.SmartCardTrustAnchors != null && hostActiveDirectorySpec.SmartCardTrustAnchors != null && Enumerable.SequenceEqual(this.SmartCardTrustAnchors, hostActiveDirectorySpec.SmartCardTrustAnchors))));
        }

        public override bool Equals(object hostActiveDirectorySpec)
        {
            return Equals(hostActiveDirectorySpec as HostActiveDirectorySpec);
        }

        public override int GetHashCode()
        {
            return (DomainName + "_" + UserName + "_" + Password + "_" + CamServer + "_" + Thumbprint + "_" + SmartCardAuthenticationEnabled + "_" + SmartCardTrustAnchors).GetHashCode();
        }
    }

    public class HostAddedEvent : HostEvent, IEquatable<HostAddedEvent>
    {
        public bool Equals(HostAddedEvent hostAddedEvent)
        {
            return (hostAddedEvent != null && base.Equals(hostAddedEvent));
        }

        public override bool Equals(object hostAddedEvent)
        {
            return Equals(hostAddedEvent as HostAddedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostAddFailedEvent : HostEvent, IEquatable<HostAddFailedEvent>
    {
        public string Hostname { get; set; }

        public bool Equals(HostAddFailedEvent hostAddFailedEvent)
        {
            return (hostAddFailedEvent != null && this.Hostname == hostAddFailedEvent.Hostname);
        }

        public override bool Equals(object hostAddFailedEvent)
        {
            return Equals(hostAddFailedEvent as HostAddFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Hostname).GetHashCode();
        }
    }

    public class HostAdminDisableEvent : HostEvent, IEquatable<HostAdminDisableEvent>
    {
        public bool Equals(HostAdminDisableEvent hostAdminDisableEvent)
        {
            return (hostAdminDisableEvent != null && base.Equals(hostAdminDisableEvent));
        }

        public override bool Equals(object hostAdminDisableEvent)
        {
            return Equals(hostAdminDisableEvent as HostAdminDisableEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostAdminEnableEvent : HostEvent, IEquatable<HostAdminEnableEvent>
    {
        public bool Equals(HostAdminEnableEvent hostAdminEnableEvent)
        {
            return (hostAdminEnableEvent != null && base.Equals(hostAdminEnableEvent));
        }

        public override bool Equals(object hostAdminEnableEvent)
        {
            return Equals(hostAdminEnableEvent as HostAdminEnableEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostApplyProfile : ApplyProfile, IEquatable<HostApplyProfile>
    {
        public HostMemoryProfile Memory { get; set; }

        public StorageProfile Storage { get; set; }

        public NetworkProfile Network { get; set; }

        public DateTimeProfile Datetime { get; set; }

        public FirewallProfile Firewall { get; set; }

        public SecurityProfile Security { get; set; }

        public ServiceProfile[] Service { get; set; }

        public OptionProfile[] Option { get; set; }

        public UserProfile[] UserAccount { get; set; }

        public UserGroupProfile[] UsergroupAccount { get; set; }

        public AuthenticationProfile Authentication { get; set; }

        public bool Equals(HostApplyProfile hostApplyProfile)
        {
            return (hostApplyProfile != null && ((this.Memory == null && hostApplyProfile.Memory == null) || (this.Memory != null && this.Memory.Equals(hostApplyProfile.Memory))) && ((this.Storage == null && hostApplyProfile.Storage == null) || (this.Storage != null && this.Storage.Equals(hostApplyProfile.Storage))) && ((this.Network == null && hostApplyProfile.Network == null) || (this.Network != null && this.Network.Equals(hostApplyProfile.Network))) && ((this.Datetime == null && hostApplyProfile.Datetime == null) || (this.Datetime != null && this.Datetime.Equals(hostApplyProfile.Datetime))) && ((this.Firewall == null && hostApplyProfile.Firewall == null) || (this.Firewall != null && this.Firewall.Equals(hostApplyProfile.Firewall))) && ((this.Security == null && hostApplyProfile.Security == null) || (this.Security != null && this.Security.Equals(hostApplyProfile.Security))) && ((this.Service == null && hostApplyProfile.Service == null) || (this.Service != null && hostApplyProfile.Service != null && Enumerable.SequenceEqual(this.Service, hostApplyProfile.Service))) && ((this.Option == null && hostApplyProfile.Option == null) || (this.Option != null && hostApplyProfile.Option != null && Enumerable.SequenceEqual(this.Option, hostApplyProfile.Option))) && ((this.UserAccount == null && hostApplyProfile.UserAccount == null) || (this.UserAccount != null && hostApplyProfile.UserAccount != null && Enumerable.SequenceEqual(this.UserAccount, hostApplyProfile.UserAccount))) && ((this.UsergroupAccount == null && hostApplyProfile.UsergroupAccount == null) || (this.UsergroupAccount != null && hostApplyProfile.UsergroupAccount != null && Enumerable.SequenceEqual(this.UsergroupAccount, hostApplyProfile.UsergroupAccount))) && ((this.Authentication == null && hostApplyProfile.Authentication == null) || (this.Authentication != null && this.Authentication.Equals(hostApplyProfile.Authentication))));
        }

        public override bool Equals(object hostApplyProfile)
        {
            return Equals(hostApplyProfile as HostApplyProfile);
        }

        public override int GetHashCode()
        {
            return (Memory + "_" + Storage + "_" + Network + "_" + Datetime + "_" + Firewall + "_" + Security + "_" + Service + "_" + Option + "_" + UserAccount + "_" + UsergroupAccount + "_" + Authentication).GetHashCode();
        }
    }

    public class HostAuthenticationManager : ViewBase, IEquatable<HostAuthenticationManager>
    {
        public HostAuthenticationManagerInfo Info { get; set; }

        public ManagedObjectReference[] SupportedStore { get; set; }

        public HostAuthenticationManager_LinkedView LinkedView { get; set; }

        public bool Equals(HostAuthenticationManager hostAuthenticationManager)
        {
            return (hostAuthenticationManager != null && ((this.Info == null && hostAuthenticationManager.Info == null) || (this.Info != null && this.Info.Equals(hostAuthenticationManager.Info))) && ((this.SupportedStore == null && hostAuthenticationManager.SupportedStore == null) || (this.SupportedStore != null && hostAuthenticationManager.SupportedStore != null && Enumerable.SequenceEqual(this.SupportedStore, hostAuthenticationManager.SupportedStore))) && ((this.LinkedView == null && hostAuthenticationManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostAuthenticationManager.LinkedView))));
        }

        public override bool Equals(object hostAuthenticationManager)
        {
            return Equals(hostAuthenticationManager as HostAuthenticationManager);
        }

        public override int GetHashCode()
        {
            return (Info + "_" + SupportedStore + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostAuthenticationManager_LinkedView : IEquatable<HostAuthenticationManager_LinkedView>
    {
        public HostAuthenticationStore[] SupportedStore { get; set; }

        public bool Equals(HostAuthenticationManager_LinkedView hostAuthenticationManager_LinkedView)
        {
            return (hostAuthenticationManager_LinkedView != null && ((this.SupportedStore == null && hostAuthenticationManager_LinkedView.SupportedStore == null) || (this.SupportedStore != null && hostAuthenticationManager_LinkedView.SupportedStore != null && Enumerable.SequenceEqual(this.SupportedStore, hostAuthenticationManager_LinkedView.SupportedStore))));
        }

        public override bool Equals(object hostAuthenticationManager_LinkedView)
        {
            return Equals(hostAuthenticationManager_LinkedView as HostAuthenticationManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (SupportedStore).GetHashCode();
        }
    }

    public class HostAuthenticationManagerInfo : DynamicData, IEquatable<HostAuthenticationManagerInfo>
    {
        public HostAuthenticationStoreInfo[] AuthConfig { get; set; }

        public bool Equals(HostAuthenticationManagerInfo hostAuthenticationManagerInfo)
        {
            return (hostAuthenticationManagerInfo != null && ((this.AuthConfig == null && hostAuthenticationManagerInfo.AuthConfig == null) || (this.AuthConfig != null && hostAuthenticationManagerInfo.AuthConfig != null && Enumerable.SequenceEqual(this.AuthConfig, hostAuthenticationManagerInfo.AuthConfig))));
        }

        public override bool Equals(object hostAuthenticationManagerInfo)
        {
            return Equals(hostAuthenticationManagerInfo as HostAuthenticationManagerInfo);
        }

        public override int GetHashCode()
        {
            return (AuthConfig).GetHashCode();
        }
    }

    public class HostAuthenticationStore : ViewBase, IEquatable<HostAuthenticationStore>
    {
        public HostAuthenticationStoreInfo Info { get; set; }

        public bool Equals(HostAuthenticationStore hostAuthenticationStore)
        {
            return (hostAuthenticationStore != null && ((this.Info == null && hostAuthenticationStore.Info == null) || (this.Info != null && this.Info.Equals(hostAuthenticationStore.Info))));
        }

        public override bool Equals(object hostAuthenticationStore)
        {
            return Equals(hostAuthenticationStore as HostAuthenticationStore);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class HostAuthenticationStoreInfo : DynamicData, IEquatable<HostAuthenticationStoreInfo>
    {
        public bool Enabled { get; set; }

        public bool Equals(HostAuthenticationStoreInfo hostAuthenticationStoreInfo)
        {
            return (hostAuthenticationStoreInfo != null && this.Enabled == hostAuthenticationStoreInfo.Enabled);
        }

        public override bool Equals(object hostAuthenticationStoreInfo)
        {
            return Equals(hostAuthenticationStoreInfo as HostAuthenticationStoreInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled).GetHashCode();
        }
    }

    public class HostAutoStartManager : ViewBase, IEquatable<HostAutoStartManager>
    {
        public HostAutoStartManagerConfig Config { get; set; }

        public void ReconfigureAutostart(HostAutoStartManagerConfig spec)
        {
        }

        public void AutoStartPowerOn()
        {
        }

        public void AutoStartPowerOff()
        {
        }

        public bool Equals(HostAutoStartManager hostAutoStartManager)
        {
            return (hostAutoStartManager != null && ((this.Config == null && hostAutoStartManager.Config == null) || (this.Config != null && this.Config.Equals(hostAutoStartManager.Config))));
        }

        public override bool Equals(object hostAutoStartManager)
        {
            return Equals(hostAutoStartManager as HostAutoStartManager);
        }

        public override int GetHashCode()
        {
            return (Config).GetHashCode();
        }
    }

    public class HostAutoStartManagerConfig : DynamicData, IEquatable<HostAutoStartManagerConfig>
    {
        public AutoStartDefaults Defaults { get; set; }

        public AutoStartPowerInfo[] PowerInfo { get; set; }

        public bool Equals(HostAutoStartManagerConfig hostAutoStartManagerConfig)
        {
            return (hostAutoStartManagerConfig != null && ((this.Defaults == null && hostAutoStartManagerConfig.Defaults == null) || (this.Defaults != null && this.Defaults.Equals(hostAutoStartManagerConfig.Defaults))) && ((this.PowerInfo == null && hostAutoStartManagerConfig.PowerInfo == null) || (this.PowerInfo != null && hostAutoStartManagerConfig.PowerInfo != null && Enumerable.SequenceEqual(this.PowerInfo, hostAutoStartManagerConfig.PowerInfo))));
        }

        public override bool Equals(object hostAutoStartManagerConfig)
        {
            return Equals(hostAutoStartManagerConfig as HostAutoStartManagerConfig);
        }

        public override int GetHashCode()
        {
            return (Defaults + "_" + PowerInfo).GetHashCode();
        }
    }

    public class HostBIOSInfo : DynamicData, IEquatable<HostBIOSInfo>
    {
        public string BiosVersion { get; set; }

        public DateTime? ReleaseDate { get; set; }

        public string Vendor { get; set; }

        public int? MajorRelease { get; set; }

        public int? MinorRelease { get; set; }

        public int? FirmwareMajorRelease { get; set; }

        public int? FirmwareMinorRelease { get; set; }

        public bool Equals(HostBIOSInfo hostBIOSInfo)
        {
            return (hostBIOSInfo != null && this.BiosVersion == hostBIOSInfo.BiosVersion && ((this.ReleaseDate == null && hostBIOSInfo.ReleaseDate == null) || (this.ReleaseDate != null && this.ReleaseDate.Equals(hostBIOSInfo.ReleaseDate))) && this.Vendor == hostBIOSInfo.Vendor && ((this.MajorRelease == null && hostBIOSInfo.MajorRelease == null) || (this.MajorRelease != null && this.MajorRelease.Equals(hostBIOSInfo.MajorRelease))) && ((this.MinorRelease == null && hostBIOSInfo.MinorRelease == null) || (this.MinorRelease != null && this.MinorRelease.Equals(hostBIOSInfo.MinorRelease))) && ((this.FirmwareMajorRelease == null && hostBIOSInfo.FirmwareMajorRelease == null) || (this.FirmwareMajorRelease != null && this.FirmwareMajorRelease.Equals(hostBIOSInfo.FirmwareMajorRelease))) && ((this.FirmwareMinorRelease == null && hostBIOSInfo.FirmwareMinorRelease == null) || (this.FirmwareMinorRelease != null && this.FirmwareMinorRelease.Equals(hostBIOSInfo.FirmwareMinorRelease))));
        }

        public override bool Equals(object hostBIOSInfo)
        {
            return Equals(hostBIOSInfo as HostBIOSInfo);
        }

        public override int GetHashCode()
        {
            return (BiosVersion + "_" + ReleaseDate + "_" + Vendor + "_" + MajorRelease + "_" + MinorRelease + "_" + FirmwareMajorRelease + "_" + FirmwareMinorRelease).GetHashCode();
        }
    }

    public class HostBlockAdapterTargetTransport : HostTargetTransport, IEquatable<HostBlockAdapterTargetTransport>
    {
        public bool Equals(HostBlockAdapterTargetTransport hostBlockAdapterTargetTransport)
        {
            return (hostBlockAdapterTargetTransport != null && base.Equals(hostBlockAdapterTargetTransport));
        }

        public override bool Equals(object hostBlockAdapterTargetTransport)
        {
            return Equals(hostBlockAdapterTargetTransport as HostBlockAdapterTargetTransport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostBlockHba : HostHostBusAdapter, IEquatable<HostBlockHba>
    {
        public bool Equals(HostBlockHba hostBlockHba)
        {
            return (hostBlockHba != null && base.Equals(hostBlockHba));
        }

        public override bool Equals(object hostBlockHba)
        {
            return Equals(hostBlockHba as HostBlockHba);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostBootDevice : DynamicData, IEquatable<HostBootDevice>
    {
        public string Key { get; set; }

        public string Description { get; set; }

        public bool Equals(HostBootDevice hostBootDevice)
        {
            return (hostBootDevice != null && this.Key == hostBootDevice.Key && this.Description == hostBootDevice.Description);
        }

        public override bool Equals(object hostBootDevice)
        {
            return Equals(hostBootDevice as HostBootDevice);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Description).GetHashCode();
        }
    }

    public class HostBootDeviceInfo : DynamicData, IEquatable<HostBootDeviceInfo>
    {
        public HostBootDevice[] BootDevices { get; set; }

        public string CurrentBootDeviceKey { get; set; }

        public bool Equals(HostBootDeviceInfo hostBootDeviceInfo)
        {
            return (hostBootDeviceInfo != null && ((this.BootDevices == null && hostBootDeviceInfo.BootDevices == null) || (this.BootDevices != null && hostBootDeviceInfo.BootDevices != null && Enumerable.SequenceEqual(this.BootDevices, hostBootDeviceInfo.BootDevices))) && this.CurrentBootDeviceKey == hostBootDeviceInfo.CurrentBootDeviceKey);
        }

        public override bool Equals(object hostBootDeviceInfo)
        {
            return Equals(hostBootDeviceInfo as HostBootDeviceInfo);
        }

        public override int GetHashCode()
        {
            return (BootDevices + "_" + CurrentBootDeviceKey).GetHashCode();
        }
    }

    public class HostBootDeviceSystem : ViewBase, IEquatable<HostBootDeviceSystem>
    {
        public HostBootDeviceInfo QueryBootDevices()
        {
            return default(HostBootDeviceInfo);
        }

        public void UpdateBootDevice(string key)
        {
        }

        public bool Equals(HostBootDeviceSystem hostBootDeviceSystem)
        {
            return (hostBootDeviceSystem != null && base.Equals(hostBootDeviceSystem));
        }

        public override bool Equals(object hostBootDeviceSystem)
        {
            return Equals(hostBootDeviceSystem as HostBootDeviceSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCacheConfigurationInfo : DynamicData, IEquatable<HostCacheConfigurationInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public long SwapSize { get; set; }

        public HostCacheConfigurationInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostCacheConfigurationInfo hostCacheConfigurationInfo)
        {
            return (hostCacheConfigurationInfo != null && ((this.Key == null && hostCacheConfigurationInfo.Key == null) || (this.Key != null && this.Key.Equals(hostCacheConfigurationInfo.Key))) && this.SwapSize == hostCacheConfigurationInfo.SwapSize && ((this.LinkedView == null && hostCacheConfigurationInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostCacheConfigurationInfo.LinkedView))));
        }

        public override bool Equals(object hostCacheConfigurationInfo)
        {
            return Equals(hostCacheConfigurationInfo as HostCacheConfigurationInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + SwapSize + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostCacheConfigurationInfo_LinkedView : IEquatable<HostCacheConfigurationInfo_LinkedView>
    {
        public Datastore Key { get; set; }

        public bool Equals(HostCacheConfigurationInfo_LinkedView hostCacheConfigurationInfo_LinkedView)
        {
            return (hostCacheConfigurationInfo_LinkedView != null && ((this.Key == null && hostCacheConfigurationInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(hostCacheConfigurationInfo_LinkedView.Key))));
        }

        public override bool Equals(object hostCacheConfigurationInfo_LinkedView)
        {
            return Equals(hostCacheConfigurationInfo_LinkedView as HostCacheConfigurationInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class HostCacheConfigurationManager : ViewBase, IEquatable<HostCacheConfigurationManager>
    {
        public HostCacheConfigurationInfo[] CacheConfigurationInfo { get; set; }

        public ManagedObjectReference ConfigureHostCache_Task(HostCacheConfigurationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void ConfigureHostCache(HostCacheConfigurationSpec spec)
        {
        }

        public bool Equals(HostCacheConfigurationManager hostCacheConfigurationManager)
        {
            return (hostCacheConfigurationManager != null && ((this.CacheConfigurationInfo == null && hostCacheConfigurationManager.CacheConfigurationInfo == null) || (this.CacheConfigurationInfo != null && hostCacheConfigurationManager.CacheConfigurationInfo != null && Enumerable.SequenceEqual(this.CacheConfigurationInfo, hostCacheConfigurationManager.CacheConfigurationInfo))));
        }

        public override bool Equals(object hostCacheConfigurationManager)
        {
            return Equals(hostCacheConfigurationManager as HostCacheConfigurationManager);
        }

        public override int GetHashCode()
        {
            return (CacheConfigurationInfo).GetHashCode();
        }
    }

    public class HostCacheConfigurationSpec : DynamicData, IEquatable<HostCacheConfigurationSpec>
    {
        public ManagedObjectReference Datastore { get; set; }

        public long SwapSize { get; set; }

        public HostCacheConfigurationSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostCacheConfigurationSpec hostCacheConfigurationSpec)
        {
            return (hostCacheConfigurationSpec != null && ((this.Datastore == null && hostCacheConfigurationSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(hostCacheConfigurationSpec.Datastore))) && this.SwapSize == hostCacheConfigurationSpec.SwapSize && ((this.LinkedView == null && hostCacheConfigurationSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostCacheConfigurationSpec.LinkedView))));
        }

        public override bool Equals(object hostCacheConfigurationSpec)
        {
            return Equals(hostCacheConfigurationSpec as HostCacheConfigurationSpec);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + SwapSize + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostCacheConfigurationSpec_LinkedView : IEquatable<HostCacheConfigurationSpec_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(HostCacheConfigurationSpec_LinkedView hostCacheConfigurationSpec_LinkedView)
        {
            return (hostCacheConfigurationSpec_LinkedView != null && ((this.Datastore == null && hostCacheConfigurationSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(hostCacheConfigurationSpec_LinkedView.Datastore))));
        }

        public override bool Equals(object hostCacheConfigurationSpec_LinkedView)
        {
            return Equals(hostCacheConfigurationSpec_LinkedView as HostCacheConfigurationSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class HostCapability : DynamicData, IEquatable<HostCapability>
    {
        public bool RecursiveResourcePoolsSupported { get; set; }

        public bool CpuMemoryResourceConfigurationSupported { get; set; }

        public bool RebootSupported { get; set; }

        public bool ShutdownSupported { get; set; }

        public bool VmotionSupported { get; set; }

        public bool StandbySupported { get; set; }

        public bool? IpmiSupported { get; set; }

        public int? MaxSupportedVMs { get; set; }

        public int? MaxRunningVMs { get; set; }

        public int? MaxSupportedVcpus { get; set; }

        public int? MaxRegisteredVMs { get; set; }

        public bool DatastorePrincipalSupported { get; set; }

        public bool SanSupported { get; set; }

        public bool NfsSupported { get; set; }

        public bool IscsiSupported { get; set; }

        public bool VlanTaggingSupported { get; set; }

        public bool NicTeamingSupported { get; set; }

        public bool HighGuestMemSupported { get; set; }

        public bool MaintenanceModeSupported { get; set; }

        public bool SuspendedRelocateSupported { get; set; }

        public bool RestrictedSnapshotRelocateSupported { get; set; }

        public bool PerVmSwapFiles { get; set; }

        public bool LocalSwapDatastoreSupported { get; set; }

        public bool UnsharedSwapVMotionSupported { get; set; }

        public bool BackgroundSnapshotsSupported { get; set; }

        public bool PreAssignedPCIUnitNumbersSupported { get; set; }

        public bool ScreenshotSupported { get; set; }

        public bool ScaledScreenshotSupported { get; set; }

        public bool StorageVMotionSupported { get; set; }

        public bool VmotionWithStorageVMotionSupported { get; set; }

        public bool? VmotionAcrossNetworkSupported { get; set; }

        public int? MaxNumDisksSVMotion { get; set; }

        public bool HbrNicSelectionSupported { get; set; }

        public bool VrNfcNicSelectionSupported { get; set; }

        public bool RecordReplaySupported { get; set; }

        public bool FtSupported { get; set; }

        public string ReplayUnsupportedReason { get; set; }

        public string[] ReplayCompatibilityIssues { get; set; }

        public bool SmpFtSupported { get; set; }

        public string[] FtCompatibilityIssues { get; set; }

        public string[] SmpFtCompatibilityIssues { get; set; }

        public int? MaxVcpusPerFtVm { get; set; }

        public bool? LoginBySSLThumbprintSupported { get; set; }

        public bool CloneFromSnapshotSupported { get; set; }

        public bool DeltaDiskBackingsSupported { get; set; }

        public bool PerVMNetworkTrafficShapingSupported { get; set; }

        public bool TpmSupported { get; set; }

        public string TpmVersion { get; set; }

        public bool? TxtEnabled { get; set; }

        public HostCpuIdInfo[] SupportedCpuFeature { get; set; }

        public bool VirtualExecUsageSupported { get; set; }

        public bool StorageIORMSupported { get; set; }

        public bool VmDirectPathGen2Supported { get; set; }

        public string[] VmDirectPathGen2UnsupportedReason { get; set; }

        public string VmDirectPathGen2UnsupportedReasonExtended { get; set; }

        public int[] SupportedVmfsMajorVersion { get; set; }

        public bool VStorageCapable { get; set; }

        public bool SnapshotRelayoutSupported { get; set; }

        public bool? FirewallIpRulesSupported { get; set; }

        public bool? ServicePackageInfoSupported { get; set; }

        public int? MaxHostRunningVms { get; set; }

        public int? MaxHostSupportedVcpus { get; set; }

        public bool VmfsDatastoreMountCapable { get; set; }

        public bool EightPlusHostVmfsSharedAccessSupported { get; set; }

        public bool NestedHVSupported { get; set; }

        public bool VPMCSupported { get; set; }

        public bool InterVMCommunicationThroughVMCISupported { get; set; }

        public bool? ScheduledHardwareUpgradeSupported { get; set; }

        public bool FeatureCapabilitiesSupported { get; set; }

        public bool LatencySensitivitySupported { get; set; }

        public bool? StoragePolicySupported { get; set; }

        public bool Accel3dSupported { get; set; }

        public bool? ReliableMemoryAware { get; set; }

        public bool? MultipleNetworkStackInstanceSupported { get; set; }

        public bool? MessageBusProxySupported { get; set; }

        public bool? VsanSupported { get; set; }

        public bool? VFlashSupported { get; set; }

        public bool? HostAccessManagerSupported { get; set; }

        public bool ProvisioningNicSelectionSupported { get; set; }

        public bool? Nfs41Supported { get; set; }

        public bool? Nfs41Krb5iSupported { get; set; }

        public bool? TurnDiskLocatorLedSupported { get; set; }

        public bool? VirtualVolumeDatastoreSupported { get; set; }

        public bool? MarkAsSsdSupported { get; set; }

        public bool? MarkAsLocalSupported { get; set; }

        public bool? SmartCardAuthenticationSupported { get; set; }

        public bool? PMemSupported { get; set; }

        public bool? PMemSnapshotSupported { get; set; }

        public bool? CryptoSupported { get; set; }

        public bool? OneKVolumeAPIsSupported { get; set; }

        public bool? GatewayOnNicSupported { get; set; }

        public bool? UpitSupported { get; set; }

        public bool? CpuHwMmuSupported { get; set; }

        public bool? EncryptedVMotionSupported { get; set; }

        public bool? EncryptionChangeOnAddRemoveSupported { get; set; }

        public bool? EncryptionHotOperationSupported { get; set; }

        public bool? EncryptionWithSnapshotsSupported { get; set; }

        public bool? EncryptionFaultToleranceSupported { get; set; }

        public bool? EncryptionMemorySaveSupported { get; set; }

        public bool? EncryptionRDMSupported { get; set; }

        public bool? EncryptionVFlashSupported { get; set; }

        public bool? EncryptionCBRCSupported { get; set; }

        public bool? EncryptionHBRSupported { get; set; }

        public bool? FtEfiSupported { get; set; }

        public string UnmapMethodSupported { get; set; }

        public int? MaxMemMBPerFtVm { get; set; }

        public bool? VirtualMmuUsageIgnored { get; set; }

        public bool? VirtualExecUsageIgnored { get; set; }

        public bool? VmCreateDateSupported { get; set; }

        public bool? Vmfs3EOLSupported { get; set; }

        public bool? FtVmcpSupported { get; set; }

        public bool? QuickBootSupported { get; set; }

        public bool Equals(HostCapability hostCapability)
        {
            return (hostCapability != null && this.RecursiveResourcePoolsSupported == hostCapability.RecursiveResourcePoolsSupported && this.CpuMemoryResourceConfigurationSupported == hostCapability.CpuMemoryResourceConfigurationSupported && this.RebootSupported == hostCapability.RebootSupported && this.ShutdownSupported == hostCapability.ShutdownSupported && this.VmotionSupported == hostCapability.VmotionSupported && this.StandbySupported == hostCapability.StandbySupported && ((this.IpmiSupported == null && hostCapability.IpmiSupported == null) || (this.IpmiSupported != null && this.IpmiSupported.Equals(hostCapability.IpmiSupported))) && ((this.MaxSupportedVMs == null && hostCapability.MaxSupportedVMs == null) || (this.MaxSupportedVMs != null && this.MaxSupportedVMs.Equals(hostCapability.MaxSupportedVMs))) && ((this.MaxRunningVMs == null && hostCapability.MaxRunningVMs == null) || (this.MaxRunningVMs != null && this.MaxRunningVMs.Equals(hostCapability.MaxRunningVMs))) && ((this.MaxSupportedVcpus == null && hostCapability.MaxSupportedVcpus == null) || (this.MaxSupportedVcpus != null && this.MaxSupportedVcpus.Equals(hostCapability.MaxSupportedVcpus))) && ((this.MaxRegisteredVMs == null && hostCapability.MaxRegisteredVMs == null) || (this.MaxRegisteredVMs != null && this.MaxRegisteredVMs.Equals(hostCapability.MaxRegisteredVMs))) && this.DatastorePrincipalSupported == hostCapability.DatastorePrincipalSupported && this.SanSupported == hostCapability.SanSupported && this.NfsSupported == hostCapability.NfsSupported && this.IscsiSupported == hostCapability.IscsiSupported && this.VlanTaggingSupported == hostCapability.VlanTaggingSupported && this.NicTeamingSupported == hostCapability.NicTeamingSupported && this.HighGuestMemSupported == hostCapability.HighGuestMemSupported && this.MaintenanceModeSupported == hostCapability.MaintenanceModeSupported && this.SuspendedRelocateSupported == hostCapability.SuspendedRelocateSupported && this.RestrictedSnapshotRelocateSupported == hostCapability.RestrictedSnapshotRelocateSupported && this.PerVmSwapFiles == hostCapability.PerVmSwapFiles && this.LocalSwapDatastoreSupported == hostCapability.LocalSwapDatastoreSupported && this.UnsharedSwapVMotionSupported == hostCapability.UnsharedSwapVMotionSupported && this.BackgroundSnapshotsSupported == hostCapability.BackgroundSnapshotsSupported && this.PreAssignedPCIUnitNumbersSupported == hostCapability.PreAssignedPCIUnitNumbersSupported && this.ScreenshotSupported == hostCapability.ScreenshotSupported && this.ScaledScreenshotSupported == hostCapability.ScaledScreenshotSupported && this.StorageVMotionSupported == hostCapability.StorageVMotionSupported && this.VmotionWithStorageVMotionSupported == hostCapability.VmotionWithStorageVMotionSupported && ((this.VmotionAcrossNetworkSupported == null && hostCapability.VmotionAcrossNetworkSupported == null) || (this.VmotionAcrossNetworkSupported != null && this.VmotionAcrossNetworkSupported.Equals(hostCapability.VmotionAcrossNetworkSupported))) && ((this.MaxNumDisksSVMotion == null && hostCapability.MaxNumDisksSVMotion == null) || (this.MaxNumDisksSVMotion != null && this.MaxNumDisksSVMotion.Equals(hostCapability.MaxNumDisksSVMotion))) && this.HbrNicSelectionSupported == hostCapability.HbrNicSelectionSupported && this.VrNfcNicSelectionSupported == hostCapability.VrNfcNicSelectionSupported && this.RecordReplaySupported == hostCapability.RecordReplaySupported && this.FtSupported == hostCapability.FtSupported && this.ReplayUnsupportedReason == hostCapability.ReplayUnsupportedReason && ((this.ReplayCompatibilityIssues == null && hostCapability.ReplayCompatibilityIssues == null) || (this.ReplayCompatibilityIssues != null && hostCapability.ReplayCompatibilityIssues != null && Enumerable.SequenceEqual(this.ReplayCompatibilityIssues, hostCapability.ReplayCompatibilityIssues))) && this.SmpFtSupported == hostCapability.SmpFtSupported && ((this.FtCompatibilityIssues == null && hostCapability.FtCompatibilityIssues == null) || (this.FtCompatibilityIssues != null && hostCapability.FtCompatibilityIssues != null && Enumerable.SequenceEqual(this.FtCompatibilityIssues, hostCapability.FtCompatibilityIssues))) && ((this.SmpFtCompatibilityIssues == null && hostCapability.SmpFtCompatibilityIssues == null) || (this.SmpFtCompatibilityIssues != null && hostCapability.SmpFtCompatibilityIssues != null && Enumerable.SequenceEqual(this.SmpFtCompatibilityIssues, hostCapability.SmpFtCompatibilityIssues))) && ((this.MaxVcpusPerFtVm == null && hostCapability.MaxVcpusPerFtVm == null) || (this.MaxVcpusPerFtVm != null && this.MaxVcpusPerFtVm.Equals(hostCapability.MaxVcpusPerFtVm))) && ((this.LoginBySSLThumbprintSupported == null && hostCapability.LoginBySSLThumbprintSupported == null) || (this.LoginBySSLThumbprintSupported != null && this.LoginBySSLThumbprintSupported.Equals(hostCapability.LoginBySSLThumbprintSupported))) && this.CloneFromSnapshotSupported == hostCapability.CloneFromSnapshotSupported && this.DeltaDiskBackingsSupported == hostCapability.DeltaDiskBackingsSupported && this.PerVMNetworkTrafficShapingSupported == hostCapability.PerVMNetworkTrafficShapingSupported && this.TpmSupported == hostCapability.TpmSupported && this.TpmVersion == hostCapability.TpmVersion && ((this.TxtEnabled == null && hostCapability.TxtEnabled == null) || (this.TxtEnabled != null && this.TxtEnabled.Equals(hostCapability.TxtEnabled))) && ((this.SupportedCpuFeature == null && hostCapability.SupportedCpuFeature == null) || (this.SupportedCpuFeature != null && hostCapability.SupportedCpuFeature != null && Enumerable.SequenceEqual(this.SupportedCpuFeature, hostCapability.SupportedCpuFeature))) && this.VirtualExecUsageSupported == hostCapability.VirtualExecUsageSupported && this.StorageIORMSupported == hostCapability.StorageIORMSupported && this.VmDirectPathGen2Supported == hostCapability.VmDirectPathGen2Supported && ((this.VmDirectPathGen2UnsupportedReason == null && hostCapability.VmDirectPathGen2UnsupportedReason == null) || (this.VmDirectPathGen2UnsupportedReason != null && hostCapability.VmDirectPathGen2UnsupportedReason != null && Enumerable.SequenceEqual(this.VmDirectPathGen2UnsupportedReason, hostCapability.VmDirectPathGen2UnsupportedReason))) && this.VmDirectPathGen2UnsupportedReasonExtended == hostCapability.VmDirectPathGen2UnsupportedReasonExtended && ((this.SupportedVmfsMajorVersion == null && hostCapability.SupportedVmfsMajorVersion == null) || (this.SupportedVmfsMajorVersion != null && hostCapability.SupportedVmfsMajorVersion != null && Enumerable.SequenceEqual(this.SupportedVmfsMajorVersion, hostCapability.SupportedVmfsMajorVersion))) && this.VStorageCapable == hostCapability.VStorageCapable && this.SnapshotRelayoutSupported == hostCapability.SnapshotRelayoutSupported && ((this.FirewallIpRulesSupported == null && hostCapability.FirewallIpRulesSupported == null) || (this.FirewallIpRulesSupported != null && this.FirewallIpRulesSupported.Equals(hostCapability.FirewallIpRulesSupported))) && ((this.ServicePackageInfoSupported == null && hostCapability.ServicePackageInfoSupported == null) || (this.ServicePackageInfoSupported != null && this.ServicePackageInfoSupported.Equals(hostCapability.ServicePackageInfoSupported))) && ((this.MaxHostRunningVms == null && hostCapability.MaxHostRunningVms == null) || (this.MaxHostRunningVms != null && this.MaxHostRunningVms.Equals(hostCapability.MaxHostRunningVms))) && ((this.MaxHostSupportedVcpus == null && hostCapability.MaxHostSupportedVcpus == null) || (this.MaxHostSupportedVcpus != null && this.MaxHostSupportedVcpus.Equals(hostCapability.MaxHostSupportedVcpus))) && this.VmfsDatastoreMountCapable == hostCapability.VmfsDatastoreMountCapable && this.EightPlusHostVmfsSharedAccessSupported == hostCapability.EightPlusHostVmfsSharedAccessSupported && this.NestedHVSupported == hostCapability.NestedHVSupported && this.VPMCSupported == hostCapability.VPMCSupported && this.InterVMCommunicationThroughVMCISupported == hostCapability.InterVMCommunicationThroughVMCISupported && ((this.ScheduledHardwareUpgradeSupported == null && hostCapability.ScheduledHardwareUpgradeSupported == null) || (this.ScheduledHardwareUpgradeSupported != null && this.ScheduledHardwareUpgradeSupported.Equals(hostCapability.ScheduledHardwareUpgradeSupported))) && this.FeatureCapabilitiesSupported == hostCapability.FeatureCapabilitiesSupported && this.LatencySensitivitySupported == hostCapability.LatencySensitivitySupported && ((this.StoragePolicySupported == null && hostCapability.StoragePolicySupported == null) || (this.StoragePolicySupported != null && this.StoragePolicySupported.Equals(hostCapability.StoragePolicySupported))) && this.Accel3dSupported == hostCapability.Accel3dSupported && ((this.ReliableMemoryAware == null && hostCapability.ReliableMemoryAware == null) || (this.ReliableMemoryAware != null && this.ReliableMemoryAware.Equals(hostCapability.ReliableMemoryAware))) && ((this.MultipleNetworkStackInstanceSupported == null && hostCapability.MultipleNetworkStackInstanceSupported == null) || (this.MultipleNetworkStackInstanceSupported != null && this.MultipleNetworkStackInstanceSupported.Equals(hostCapability.MultipleNetworkStackInstanceSupported))) && ((this.MessageBusProxySupported == null && hostCapability.MessageBusProxySupported == null) || (this.MessageBusProxySupported != null && this.MessageBusProxySupported.Equals(hostCapability.MessageBusProxySupported))) && ((this.VsanSupported == null && hostCapability.VsanSupported == null) || (this.VsanSupported != null && this.VsanSupported.Equals(hostCapability.VsanSupported))) && ((this.VFlashSupported == null && hostCapability.VFlashSupported == null) || (this.VFlashSupported != null && this.VFlashSupported.Equals(hostCapability.VFlashSupported))) && ((this.HostAccessManagerSupported == null && hostCapability.HostAccessManagerSupported == null) || (this.HostAccessManagerSupported != null && this.HostAccessManagerSupported.Equals(hostCapability.HostAccessManagerSupported))) && this.ProvisioningNicSelectionSupported == hostCapability.ProvisioningNicSelectionSupported && ((this.Nfs41Supported == null && hostCapability.Nfs41Supported == null) || (this.Nfs41Supported != null && this.Nfs41Supported.Equals(hostCapability.Nfs41Supported))) && ((this.Nfs41Krb5iSupported == null && hostCapability.Nfs41Krb5iSupported == null) || (this.Nfs41Krb5iSupported != null && this.Nfs41Krb5iSupported.Equals(hostCapability.Nfs41Krb5iSupported))) && ((this.TurnDiskLocatorLedSupported == null && hostCapability.TurnDiskLocatorLedSupported == null) || (this.TurnDiskLocatorLedSupported != null && this.TurnDiskLocatorLedSupported.Equals(hostCapability.TurnDiskLocatorLedSupported))) && ((this.VirtualVolumeDatastoreSupported == null && hostCapability.VirtualVolumeDatastoreSupported == null) || (this.VirtualVolumeDatastoreSupported != null && this.VirtualVolumeDatastoreSupported.Equals(hostCapability.VirtualVolumeDatastoreSupported))) && ((this.MarkAsSsdSupported == null && hostCapability.MarkAsSsdSupported == null) || (this.MarkAsSsdSupported != null && this.MarkAsSsdSupported.Equals(hostCapability.MarkAsSsdSupported))) && ((this.MarkAsLocalSupported == null && hostCapability.MarkAsLocalSupported == null) || (this.MarkAsLocalSupported != null && this.MarkAsLocalSupported.Equals(hostCapability.MarkAsLocalSupported))) && ((this.SmartCardAuthenticationSupported == null && hostCapability.SmartCardAuthenticationSupported == null) || (this.SmartCardAuthenticationSupported != null && this.SmartCardAuthenticationSupported.Equals(hostCapability.SmartCardAuthenticationSupported))) && ((this.PMemSupported == null && hostCapability.PMemSupported == null) || (this.PMemSupported != null && this.PMemSupported.Equals(hostCapability.PMemSupported))) && ((this.PMemSnapshotSupported == null && hostCapability.PMemSnapshotSupported == null) || (this.PMemSnapshotSupported != null && this.PMemSnapshotSupported.Equals(hostCapability.PMemSnapshotSupported))) && ((this.CryptoSupported == null && hostCapability.CryptoSupported == null) || (this.CryptoSupported != null && this.CryptoSupported.Equals(hostCapability.CryptoSupported))) && ((this.OneKVolumeAPIsSupported == null && hostCapability.OneKVolumeAPIsSupported == null) || (this.OneKVolumeAPIsSupported != null && this.OneKVolumeAPIsSupported.Equals(hostCapability.OneKVolumeAPIsSupported))) && ((this.GatewayOnNicSupported == null && hostCapability.GatewayOnNicSupported == null) || (this.GatewayOnNicSupported != null && this.GatewayOnNicSupported.Equals(hostCapability.GatewayOnNicSupported))) && ((this.UpitSupported == null && hostCapability.UpitSupported == null) || (this.UpitSupported != null && this.UpitSupported.Equals(hostCapability.UpitSupported))) && ((this.CpuHwMmuSupported == null && hostCapability.CpuHwMmuSupported == null) || (this.CpuHwMmuSupported != null && this.CpuHwMmuSupported.Equals(hostCapability.CpuHwMmuSupported))) && ((this.EncryptedVMotionSupported == null && hostCapability.EncryptedVMotionSupported == null) || (this.EncryptedVMotionSupported != null && this.EncryptedVMotionSupported.Equals(hostCapability.EncryptedVMotionSupported))) && ((this.EncryptionChangeOnAddRemoveSupported == null && hostCapability.EncryptionChangeOnAddRemoveSupported == null) || (this.EncryptionChangeOnAddRemoveSupported != null && this.EncryptionChangeOnAddRemoveSupported.Equals(hostCapability.EncryptionChangeOnAddRemoveSupported))) && ((this.EncryptionHotOperationSupported == null && hostCapability.EncryptionHotOperationSupported == null) || (this.EncryptionHotOperationSupported != null && this.EncryptionHotOperationSupported.Equals(hostCapability.EncryptionHotOperationSupported))) && ((this.EncryptionWithSnapshotsSupported == null && hostCapability.EncryptionWithSnapshotsSupported == null) || (this.EncryptionWithSnapshotsSupported != null && this.EncryptionWithSnapshotsSupported.Equals(hostCapability.EncryptionWithSnapshotsSupported))) && ((this.EncryptionFaultToleranceSupported == null && hostCapability.EncryptionFaultToleranceSupported == null) || (this.EncryptionFaultToleranceSupported != null && this.EncryptionFaultToleranceSupported.Equals(hostCapability.EncryptionFaultToleranceSupported))) && ((this.EncryptionMemorySaveSupported == null && hostCapability.EncryptionMemorySaveSupported == null) || (this.EncryptionMemorySaveSupported != null && this.EncryptionMemorySaveSupported.Equals(hostCapability.EncryptionMemorySaveSupported))) && ((this.EncryptionRDMSupported == null && hostCapability.EncryptionRDMSupported == null) || (this.EncryptionRDMSupported != null && this.EncryptionRDMSupported.Equals(hostCapability.EncryptionRDMSupported))) && ((this.EncryptionVFlashSupported == null && hostCapability.EncryptionVFlashSupported == null) || (this.EncryptionVFlashSupported != null && this.EncryptionVFlashSupported.Equals(hostCapability.EncryptionVFlashSupported))) && ((this.EncryptionCBRCSupported == null && hostCapability.EncryptionCBRCSupported == null) || (this.EncryptionCBRCSupported != null && this.EncryptionCBRCSupported.Equals(hostCapability.EncryptionCBRCSupported))) && ((this.EncryptionHBRSupported == null && hostCapability.EncryptionHBRSupported == null) || (this.EncryptionHBRSupported != null && this.EncryptionHBRSupported.Equals(hostCapability.EncryptionHBRSupported))) && ((this.FtEfiSupported == null && hostCapability.FtEfiSupported == null) || (this.FtEfiSupported != null && this.FtEfiSupported.Equals(hostCapability.FtEfiSupported))) && this.UnmapMethodSupported == hostCapability.UnmapMethodSupported && ((this.MaxMemMBPerFtVm == null && hostCapability.MaxMemMBPerFtVm == null) || (this.MaxMemMBPerFtVm != null && this.MaxMemMBPerFtVm.Equals(hostCapability.MaxMemMBPerFtVm))) && ((this.VirtualMmuUsageIgnored == null && hostCapability.VirtualMmuUsageIgnored == null) || (this.VirtualMmuUsageIgnored != null && this.VirtualMmuUsageIgnored.Equals(hostCapability.VirtualMmuUsageIgnored))) && ((this.VirtualExecUsageIgnored == null && hostCapability.VirtualExecUsageIgnored == null) || (this.VirtualExecUsageIgnored != null && this.VirtualExecUsageIgnored.Equals(hostCapability.VirtualExecUsageIgnored))) && ((this.VmCreateDateSupported == null && hostCapability.VmCreateDateSupported == null) || (this.VmCreateDateSupported != null && this.VmCreateDateSupported.Equals(hostCapability.VmCreateDateSupported))) && ((this.Vmfs3EOLSupported == null && hostCapability.Vmfs3EOLSupported == null) || (this.Vmfs3EOLSupported != null && this.Vmfs3EOLSupported.Equals(hostCapability.Vmfs3EOLSupported))) && ((this.FtVmcpSupported == null && hostCapability.FtVmcpSupported == null) || (this.FtVmcpSupported != null && this.FtVmcpSupported.Equals(hostCapability.FtVmcpSupported))) && ((this.QuickBootSupported == null && hostCapability.QuickBootSupported == null) || (this.QuickBootSupported != null && this.QuickBootSupported.Equals(hostCapability.QuickBootSupported))));
        }

        public override bool Equals(object hostCapability)
        {
            return Equals(hostCapability as HostCapability);
        }

        public override int GetHashCode()
        {
            return (RecursiveResourcePoolsSupported + "_" + CpuMemoryResourceConfigurationSupported + "_" + RebootSupported + "_" + ShutdownSupported + "_" + VmotionSupported + "_" + StandbySupported + "_" + IpmiSupported + "_" + MaxSupportedVMs + "_" + MaxRunningVMs + "_" + MaxSupportedVcpus + "_" + MaxRegisteredVMs + "_" + DatastorePrincipalSupported + "_" + SanSupported + "_" + NfsSupported + "_" + IscsiSupported + "_" + VlanTaggingSupported + "_" + NicTeamingSupported + "_" + HighGuestMemSupported + "_" + MaintenanceModeSupported + "_" + SuspendedRelocateSupported + "_" + RestrictedSnapshotRelocateSupported + "_" + PerVmSwapFiles + "_" + LocalSwapDatastoreSupported + "_" + UnsharedSwapVMotionSupported + "_" + BackgroundSnapshotsSupported + "_" + PreAssignedPCIUnitNumbersSupported + "_" + ScreenshotSupported + "_" + ScaledScreenshotSupported + "_" + StorageVMotionSupported + "_" + VmotionWithStorageVMotionSupported + "_" + VmotionAcrossNetworkSupported + "_" + MaxNumDisksSVMotion + "_" + HbrNicSelectionSupported + "_" + VrNfcNicSelectionSupported + "_" + RecordReplaySupported + "_" + FtSupported + "_" + ReplayUnsupportedReason + "_" + ReplayCompatibilityIssues + "_" + SmpFtSupported + "_" + FtCompatibilityIssues + "_" + SmpFtCompatibilityIssues + "_" + MaxVcpusPerFtVm + "_" + LoginBySSLThumbprintSupported + "_" + CloneFromSnapshotSupported + "_" + DeltaDiskBackingsSupported + "_" + PerVMNetworkTrafficShapingSupported + "_" + TpmSupported + "_" + TpmVersion + "_" + TxtEnabled + "_" + SupportedCpuFeature + "_" + VirtualExecUsageSupported + "_" + StorageIORMSupported + "_" + VmDirectPathGen2Supported + "_" + VmDirectPathGen2UnsupportedReason + "_" + VmDirectPathGen2UnsupportedReasonExtended + "_" + SupportedVmfsMajorVersion + "_" + VStorageCapable + "_" + SnapshotRelayoutSupported + "_" + FirewallIpRulesSupported + "_" + ServicePackageInfoSupported + "_" + MaxHostRunningVms + "_" + MaxHostSupportedVcpus + "_" + VmfsDatastoreMountCapable + "_" + EightPlusHostVmfsSharedAccessSupported + "_" + NestedHVSupported + "_" + VPMCSupported + "_" + InterVMCommunicationThroughVMCISupported + "_" + ScheduledHardwareUpgradeSupported + "_" + FeatureCapabilitiesSupported + "_" + LatencySensitivitySupported + "_" + StoragePolicySupported + "_" + Accel3dSupported + "_" + ReliableMemoryAware + "_" + MultipleNetworkStackInstanceSupported + "_" + MessageBusProxySupported + "_" + VsanSupported + "_" + VFlashSupported + "_" + HostAccessManagerSupported + "_" + ProvisioningNicSelectionSupported + "_" + Nfs41Supported + "_" + Nfs41Krb5iSupported + "_" + TurnDiskLocatorLedSupported + "_" + VirtualVolumeDatastoreSupported + "_" + MarkAsSsdSupported + "_" + MarkAsLocalSupported + "_" + SmartCardAuthenticationSupported + "_" + PMemSupported + "_" + PMemSnapshotSupported + "_" + CryptoSupported + "_" + OneKVolumeAPIsSupported + "_" + GatewayOnNicSupported + "_" + UpitSupported + "_" + CpuHwMmuSupported + "_" + EncryptedVMotionSupported + "_" + EncryptionChangeOnAddRemoveSupported + "_" + EncryptionHotOperationSupported + "_" + EncryptionWithSnapshotsSupported + "_" + EncryptionFaultToleranceSupported + "_" + EncryptionMemorySaveSupported + "_" + EncryptionRDMSupported + "_" + EncryptionVFlashSupported + "_" + EncryptionCBRCSupported + "_" + EncryptionHBRSupported + "_" + FtEfiSupported + "_" + UnmapMethodSupported + "_" + MaxMemMBPerFtVm + "_" + VirtualMmuUsageIgnored + "_" + VirtualExecUsageIgnored + "_" + VmCreateDateSupported + "_" + Vmfs3EOLSupported + "_" + FtVmcpSupported + "_" + QuickBootSupported).GetHashCode();
        }
    }

    public class HostCertificateManager : ViewBase, IEquatable<HostCertificateManager>
    {
        public HostCertificateManagerCertificateInfo CertificateInfo { get; set; }

        public string GenerateCertificateSigningRequest(bool useIpAddressAsCommonName)
        {
            return default(string);
        }

        public string GenerateCertificateSigningRequestByDn(string distinguishedName)
        {
            return default(string);
        }

        public void InstallServerCertificate(string cert)
        {
        }

        public void ReplaceCACertificatesAndCRLs(string[] caCert, string[] caCrl)
        {
        }

        public string[] ListCACertificates()
        {
            return default(string[]);
        }

        public string[] ListCACertificateRevocationLists()
        {
            return default(string[]);
        }

        public bool Equals(HostCertificateManager hostCertificateManager)
        {
            return (hostCertificateManager != null && ((this.CertificateInfo == null && hostCertificateManager.CertificateInfo == null) || (this.CertificateInfo != null && this.CertificateInfo.Equals(hostCertificateManager.CertificateInfo))));
        }

        public override bool Equals(object hostCertificateManager)
        {
            return Equals(hostCertificateManager as HostCertificateManager);
        }

        public override int GetHashCode()
        {
            return (CertificateInfo).GetHashCode();
        }
    }

    public class HostCertificateManagerCertificateInfo : DynamicData, IEquatable<HostCertificateManagerCertificateInfo>
    {
        public string Issuer { get; set; }

        public DateTime? NotBefore { get; set; }

        public DateTime? NotAfter { get; set; }

        public string Subject { get; set; }

        public string Status { get; set; }

        public bool Equals(HostCertificateManagerCertificateInfo hostCertificateManagerCertificateInfo)
        {
            return (hostCertificateManagerCertificateInfo != null && this.Issuer == hostCertificateManagerCertificateInfo.Issuer && ((this.NotBefore == null && hostCertificateManagerCertificateInfo.NotBefore == null) || (this.NotBefore != null && this.NotBefore.Equals(hostCertificateManagerCertificateInfo.NotBefore))) && ((this.NotAfter == null && hostCertificateManagerCertificateInfo.NotAfter == null) || (this.NotAfter != null && this.NotAfter.Equals(hostCertificateManagerCertificateInfo.NotAfter))) && this.Subject == hostCertificateManagerCertificateInfo.Subject && this.Status == hostCertificateManagerCertificateInfo.Status);
        }

        public override bool Equals(object hostCertificateManagerCertificateInfo)
        {
            return Equals(hostCertificateManagerCertificateInfo as HostCertificateManagerCertificateInfo);
        }

        public override int GetHashCode()
        {
            return (Issuer + "_" + NotBefore + "_" + NotAfter + "_" + Subject + "_" + Status).GetHashCode();
        }
    }

    public class HostCnxFailedAccountFailedEvent : HostEvent, IEquatable<HostCnxFailedAccountFailedEvent>
    {
        public bool Equals(HostCnxFailedAccountFailedEvent hostCnxFailedAccountFailedEvent)
        {
            return (hostCnxFailedAccountFailedEvent != null && base.Equals(hostCnxFailedAccountFailedEvent));
        }

        public override bool Equals(object hostCnxFailedAccountFailedEvent)
        {
            return Equals(hostCnxFailedAccountFailedEvent as HostCnxFailedAccountFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedAlreadyManagedEvent : HostEvent, IEquatable<HostCnxFailedAlreadyManagedEvent>
    {
        public string ServerName { get; set; }

        public bool Equals(HostCnxFailedAlreadyManagedEvent hostCnxFailedAlreadyManagedEvent)
        {
            return (hostCnxFailedAlreadyManagedEvent != null && this.ServerName == hostCnxFailedAlreadyManagedEvent.ServerName);
        }

        public override bool Equals(object hostCnxFailedAlreadyManagedEvent)
        {
            return Equals(hostCnxFailedAlreadyManagedEvent as HostCnxFailedAlreadyManagedEvent);
        }

        public override int GetHashCode()
        {
            return (ServerName).GetHashCode();
        }
    }

    public class HostCnxFailedBadCcagentEvent : HostEvent, IEquatable<HostCnxFailedBadCcagentEvent>
    {
        public bool Equals(HostCnxFailedBadCcagentEvent hostCnxFailedBadCcagentEvent)
        {
            return (hostCnxFailedBadCcagentEvent != null && base.Equals(hostCnxFailedBadCcagentEvent));
        }

        public override bool Equals(object hostCnxFailedBadCcagentEvent)
        {
            return Equals(hostCnxFailedBadCcagentEvent as HostCnxFailedBadCcagentEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedBadUsernameEvent : HostEvent, IEquatable<HostCnxFailedBadUsernameEvent>
    {
        public bool Equals(HostCnxFailedBadUsernameEvent hostCnxFailedBadUsernameEvent)
        {
            return (hostCnxFailedBadUsernameEvent != null && base.Equals(hostCnxFailedBadUsernameEvent));
        }

        public override bool Equals(object hostCnxFailedBadUsernameEvent)
        {
            return Equals(hostCnxFailedBadUsernameEvent as HostCnxFailedBadUsernameEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedBadVersionEvent : HostEvent, IEquatable<HostCnxFailedBadVersionEvent>
    {
        public bool Equals(HostCnxFailedBadVersionEvent hostCnxFailedBadVersionEvent)
        {
            return (hostCnxFailedBadVersionEvent != null && base.Equals(hostCnxFailedBadVersionEvent));
        }

        public override bool Equals(object hostCnxFailedBadVersionEvent)
        {
            return Equals(hostCnxFailedBadVersionEvent as HostCnxFailedBadVersionEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedCcagentUpgradeEvent : HostEvent, IEquatable<HostCnxFailedCcagentUpgradeEvent>
    {
        public bool Equals(HostCnxFailedCcagentUpgradeEvent hostCnxFailedCcagentUpgradeEvent)
        {
            return (hostCnxFailedCcagentUpgradeEvent != null && base.Equals(hostCnxFailedCcagentUpgradeEvent));
        }

        public override bool Equals(object hostCnxFailedCcagentUpgradeEvent)
        {
            return Equals(hostCnxFailedCcagentUpgradeEvent as HostCnxFailedCcagentUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedEvent : HostEvent, IEquatable<HostCnxFailedEvent>
    {
        public bool Equals(HostCnxFailedEvent hostCnxFailedEvent)
        {
            return (hostCnxFailedEvent != null && base.Equals(hostCnxFailedEvent));
        }

        public override bool Equals(object hostCnxFailedEvent)
        {
            return Equals(hostCnxFailedEvent as HostCnxFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedNetworkErrorEvent : HostEvent, IEquatable<HostCnxFailedNetworkErrorEvent>
    {
        public bool Equals(HostCnxFailedNetworkErrorEvent hostCnxFailedNetworkErrorEvent)
        {
            return (hostCnxFailedNetworkErrorEvent != null && base.Equals(hostCnxFailedNetworkErrorEvent));
        }

        public override bool Equals(object hostCnxFailedNetworkErrorEvent)
        {
            return Equals(hostCnxFailedNetworkErrorEvent as HostCnxFailedNetworkErrorEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedNoAccessEvent : HostEvent, IEquatable<HostCnxFailedNoAccessEvent>
    {
        public bool Equals(HostCnxFailedNoAccessEvent hostCnxFailedNoAccessEvent)
        {
            return (hostCnxFailedNoAccessEvent != null && base.Equals(hostCnxFailedNoAccessEvent));
        }

        public override bool Equals(object hostCnxFailedNoAccessEvent)
        {
            return Equals(hostCnxFailedNoAccessEvent as HostCnxFailedNoAccessEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedNoConnectionEvent : HostEvent, IEquatable<HostCnxFailedNoConnectionEvent>
    {
        public bool Equals(HostCnxFailedNoConnectionEvent hostCnxFailedNoConnectionEvent)
        {
            return (hostCnxFailedNoConnectionEvent != null && base.Equals(hostCnxFailedNoConnectionEvent));
        }

        public override bool Equals(object hostCnxFailedNoConnectionEvent)
        {
            return Equals(hostCnxFailedNoConnectionEvent as HostCnxFailedNoConnectionEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedNoLicenseEvent : HostEvent, IEquatable<HostCnxFailedNoLicenseEvent>
    {
        public bool Equals(HostCnxFailedNoLicenseEvent hostCnxFailedNoLicenseEvent)
        {
            return (hostCnxFailedNoLicenseEvent != null && base.Equals(hostCnxFailedNoLicenseEvent));
        }

        public override bool Equals(object hostCnxFailedNoLicenseEvent)
        {
            return Equals(hostCnxFailedNoLicenseEvent as HostCnxFailedNoLicenseEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedNotFoundEvent : HostEvent, IEquatable<HostCnxFailedNotFoundEvent>
    {
        public bool Equals(HostCnxFailedNotFoundEvent hostCnxFailedNotFoundEvent)
        {
            return (hostCnxFailedNotFoundEvent != null && base.Equals(hostCnxFailedNotFoundEvent));
        }

        public override bool Equals(object hostCnxFailedNotFoundEvent)
        {
            return Equals(hostCnxFailedNotFoundEvent as HostCnxFailedNotFoundEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCnxFailedTimeoutEvent : HostEvent, IEquatable<HostCnxFailedTimeoutEvent>
    {
        public bool Equals(HostCnxFailedTimeoutEvent hostCnxFailedTimeoutEvent)
        {
            return (hostCnxFailedTimeoutEvent != null && base.Equals(hostCnxFailedTimeoutEvent));
        }

        public override bool Equals(object hostCnxFailedTimeoutEvent)
        {
            return Equals(hostCnxFailedTimeoutEvent as HostCnxFailedTimeoutEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostCommunication : RuntimeFault, IEquatable<HostCommunication>
    {
        public bool Equals(HostCommunication hostCommunication)
        {
            return (hostCommunication != null && base.Equals(hostCommunication));
        }

        public override bool Equals(object hostCommunication)
        {
            return Equals(hostCommunication as HostCommunication);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostComplianceCheckedEvent : HostEvent, IEquatable<HostComplianceCheckedEvent>
    {
        public ProfileEventArgument Profile { get; set; }

        public bool Equals(HostComplianceCheckedEvent hostComplianceCheckedEvent)
        {
            return (hostComplianceCheckedEvent != null && ((this.Profile == null && hostComplianceCheckedEvent.Profile == null) || (this.Profile != null && this.Profile.Equals(hostComplianceCheckedEvent.Profile))));
        }

        public override bool Equals(object hostComplianceCheckedEvent)
        {
            return Equals(hostComplianceCheckedEvent as HostComplianceCheckedEvent);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class HostCompliantEvent : HostEvent, IEquatable<HostCompliantEvent>
    {
        public bool Equals(HostCompliantEvent hostCompliantEvent)
        {
            return (hostCompliantEvent != null && base.Equals(hostCompliantEvent));
        }

        public override bool Equals(object hostCompliantEvent)
        {
            return Equals(hostCompliantEvent as HostCompliantEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConfigAppliedEvent : HostEvent, IEquatable<HostConfigAppliedEvent>
    {
        public bool Equals(HostConfigAppliedEvent hostConfigAppliedEvent)
        {
            return (hostConfigAppliedEvent != null && base.Equals(hostConfigAppliedEvent));
        }

        public override bool Equals(object hostConfigAppliedEvent)
        {
            return Equals(hostConfigAppliedEvent as HostConfigAppliedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConfigChange : DynamicData, IEquatable<HostConfigChange>
    {
        public bool Equals(HostConfigChange hostConfigChange)
        {
            return (hostConfigChange != null && base.Equals(hostConfigChange));
        }

        public override bool Equals(object hostConfigChange)
        {
            return Equals(hostConfigChange as HostConfigChange);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConfigFailed : HostConfigFault, IEquatable<HostConfigFailed>
    {
        public LocalizedMethodFault[] Failure { get; set; }

        public bool Equals(HostConfigFailed hostConfigFailed)
        {
            return (hostConfigFailed != null && ((this.Failure == null && hostConfigFailed.Failure == null) || (this.Failure != null && hostConfigFailed.Failure != null && Enumerable.SequenceEqual(this.Failure, hostConfigFailed.Failure))));
        }

        public override bool Equals(object hostConfigFailed)
        {
            return Equals(hostConfigFailed as HostConfigFailed);
        }

        public override int GetHashCode()
        {
            return (Failure).GetHashCode();
        }
    }

    public class HostConfigFault : VimFault, IEquatable<HostConfigFault>
    {
        public bool Equals(HostConfigFault hostConfigFault)
        {
            return (hostConfigFault != null && base.Equals(hostConfigFault));
        }

        public override bool Equals(object hostConfigFault)
        {
            return Equals(hostConfigFault as HostConfigFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConfigInfo : DynamicData, IEquatable<HostConfigInfo>
    {
        public ManagedObjectReference Host { get; set; }

        public AboutInfo Product { get; set; }

        public HostDeploymentInfo DeploymentInfo { get; set; }

        public HostHyperThreadScheduleInfo HyperThread { get; set; }

        public ServiceConsoleReservationInfo ConsoleReservation { get; set; }

        public VirtualMachineMemoryReservationInfo VirtualMachineReservation { get; set; }

        public HostStorageDeviceInfo StorageDevice { get; set; }

        public HostMultipathStateInfo MultipathState { get; set; }

        public HostFileSystemVolumeInfo FileSystemVolume { get; set; }

        public string[] SystemFile { get; set; }

        public HostNetworkInfo Network { get; set; }

        public HostVMotionInfo Vmotion { get; set; }

        public HostVirtualNicManagerInfo VirtualNicManagerInfo { get; set; }

        public HostNetCapabilities Capabilities { get; set; }

        public HostDatastoreSystemCapabilities DatastoreCapabilities { get; set; }

        public HostNetOffloadCapabilities OffloadCapabilities { get; set; }

        public HostServiceInfo Service { get; set; }

        public HostFirewallInfo Firewall { get; set; }

        public HostAutoStartManagerConfig AutoStart { get; set; }

        public HostDiagnosticPartition ActiveDiagnosticPartition { get; set; }

        public OptionValue[] Option { get; set; }

        public OptionDef[] OptionDef { get; set; }

        public string DatastorePrincipal { get; set; }

        public ManagedObjectReference LocalSwapDatastore { get; set; }

        public HostSystemSwapConfiguration SystemSwapConfiguration { get; set; }

        public HostSystemResourceInfo SystemResources { get; set; }

        public HostDateTimeInfo DateTimeInfo { get; set; }

        public HostFlagInfo Flags { get; set; }

        public bool? AdminDisabled { get; set; }

        public HostLockdownMode? LockdownMode { get; set; }

        public HostIpmiInfo Ipmi { get; set; }

        public HostSslThumbprintInfo SslThumbprintInfo { get; set; }

        public HostSslThumbprintInfo[] SslThumbprintData { get; set; }

        public sbyte[] Certificate { get; set; }

        public HostPciPassthruInfo[] PciPassthruInfo { get; set; }

        public HostAuthenticationManagerInfo AuthenticationManagerInfo { get; set; }

        public HostFeatureVersionInfo[] FeatureVersion { get; set; }

        public PowerSystemCapability PowerSystemCapability { get; set; }

        public PowerSystemInfo PowerSystemInfo { get; set; }

        public HostCacheConfigurationInfo[] CacheConfigurationInfo { get; set; }

        public bool? WakeOnLanCapable { get; set; }

        public HostFeatureCapability[] FeatureCapability { get; set; }

        public HostFeatureCapability[] MaskedFeatureCapability { get; set; }

        public HostVFlashManagerVFlashConfigInfo VFlashConfigInfo { get; set; }

        public VsanHostConfigInfo VsanHostConfig { get; set; }

        public string[] DomainList { get; set; }

        public byte[] ScriptCheckSum { get; set; }

        public byte[] HostConfigCheckSum { get; set; }

        public HostGraphicsInfo[] GraphicsInfo { get; set; }

        public string[] SharedPassthruGpuTypes { get; set; }

        public HostGraphicsConfig GraphicsConfig { get; set; }

        public HostSharedGpuCapabilities[] SharedGpuCapabilities { get; set; }

        public HostIoFilterInfo[] IoFilterInfo { get; set; }

        public HostSriovDevicePoolInfo[] SriovDevicePool { get; set; }

        public HostConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostConfigInfo hostConfigInfo)
        {
            return (hostConfigInfo != null && ((this.Host == null && hostConfigInfo.Host == null) || (this.Host != null && this.Host.Equals(hostConfigInfo.Host))) && ((this.Product == null && hostConfigInfo.Product == null) || (this.Product != null && this.Product.Equals(hostConfigInfo.Product))) && ((this.DeploymentInfo == null && hostConfigInfo.DeploymentInfo == null) || (this.DeploymentInfo != null && this.DeploymentInfo.Equals(hostConfigInfo.DeploymentInfo))) && ((this.HyperThread == null && hostConfigInfo.HyperThread == null) || (this.HyperThread != null && this.HyperThread.Equals(hostConfigInfo.HyperThread))) && ((this.ConsoleReservation == null && hostConfigInfo.ConsoleReservation == null) || (this.ConsoleReservation != null && this.ConsoleReservation.Equals(hostConfigInfo.ConsoleReservation))) && ((this.VirtualMachineReservation == null && hostConfigInfo.VirtualMachineReservation == null) || (this.VirtualMachineReservation != null && this.VirtualMachineReservation.Equals(hostConfigInfo.VirtualMachineReservation))) && ((this.StorageDevice == null && hostConfigInfo.StorageDevice == null) || (this.StorageDevice != null && this.StorageDevice.Equals(hostConfigInfo.StorageDevice))) && ((this.MultipathState == null && hostConfigInfo.MultipathState == null) || (this.MultipathState != null && this.MultipathState.Equals(hostConfigInfo.MultipathState))) && ((this.FileSystemVolume == null && hostConfigInfo.FileSystemVolume == null) || (this.FileSystemVolume != null && this.FileSystemVolume.Equals(hostConfigInfo.FileSystemVolume))) && ((this.SystemFile == null && hostConfigInfo.SystemFile == null) || (this.SystemFile != null && hostConfigInfo.SystemFile != null && Enumerable.SequenceEqual(this.SystemFile, hostConfigInfo.SystemFile))) && ((this.Network == null && hostConfigInfo.Network == null) || (this.Network != null && this.Network.Equals(hostConfigInfo.Network))) && ((this.Vmotion == null && hostConfigInfo.Vmotion == null) || (this.Vmotion != null && this.Vmotion.Equals(hostConfigInfo.Vmotion))) && ((this.VirtualNicManagerInfo == null && hostConfigInfo.VirtualNicManagerInfo == null) || (this.VirtualNicManagerInfo != null && this.VirtualNicManagerInfo.Equals(hostConfigInfo.VirtualNicManagerInfo))) && ((this.Capabilities == null && hostConfigInfo.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(hostConfigInfo.Capabilities))) && ((this.DatastoreCapabilities == null && hostConfigInfo.DatastoreCapabilities == null) || (this.DatastoreCapabilities != null && this.DatastoreCapabilities.Equals(hostConfigInfo.DatastoreCapabilities))) && ((this.OffloadCapabilities == null && hostConfigInfo.OffloadCapabilities == null) || (this.OffloadCapabilities != null && this.OffloadCapabilities.Equals(hostConfigInfo.OffloadCapabilities))) && ((this.Service == null && hostConfigInfo.Service == null) || (this.Service != null && this.Service.Equals(hostConfigInfo.Service))) && ((this.Firewall == null && hostConfigInfo.Firewall == null) || (this.Firewall != null && this.Firewall.Equals(hostConfigInfo.Firewall))) && ((this.AutoStart == null && hostConfigInfo.AutoStart == null) || (this.AutoStart != null && this.AutoStart.Equals(hostConfigInfo.AutoStart))) && ((this.ActiveDiagnosticPartition == null && hostConfigInfo.ActiveDiagnosticPartition == null) || (this.ActiveDiagnosticPartition != null && this.ActiveDiagnosticPartition.Equals(hostConfigInfo.ActiveDiagnosticPartition))) && ((this.Option == null && hostConfigInfo.Option == null) || (this.Option != null && hostConfigInfo.Option != null && Enumerable.SequenceEqual(this.Option, hostConfigInfo.Option))) && ((this.OptionDef == null && hostConfigInfo.OptionDef == null) || (this.OptionDef != null && hostConfigInfo.OptionDef != null && Enumerable.SequenceEqual(this.OptionDef, hostConfigInfo.OptionDef))) && this.DatastorePrincipal == hostConfigInfo.DatastorePrincipal && ((this.LocalSwapDatastore == null && hostConfigInfo.LocalSwapDatastore == null) || (this.LocalSwapDatastore != null && this.LocalSwapDatastore.Equals(hostConfigInfo.LocalSwapDatastore))) && ((this.SystemSwapConfiguration == null && hostConfigInfo.SystemSwapConfiguration == null) || (this.SystemSwapConfiguration != null && this.SystemSwapConfiguration.Equals(hostConfigInfo.SystemSwapConfiguration))) && ((this.SystemResources == null && hostConfigInfo.SystemResources == null) || (this.SystemResources != null && this.SystemResources.Equals(hostConfigInfo.SystemResources))) && ((this.DateTimeInfo == null && hostConfigInfo.DateTimeInfo == null) || (this.DateTimeInfo != null && this.DateTimeInfo.Equals(hostConfigInfo.DateTimeInfo))) && ((this.Flags == null && hostConfigInfo.Flags == null) || (this.Flags != null && this.Flags.Equals(hostConfigInfo.Flags))) && ((this.AdminDisabled == null && hostConfigInfo.AdminDisabled == null) || (this.AdminDisabled != null && this.AdminDisabled.Equals(hostConfigInfo.AdminDisabled))) && ((this.LockdownMode == null && hostConfigInfo.LockdownMode == null) || (this.LockdownMode != null && this.LockdownMode.Equals(hostConfigInfo.LockdownMode))) && ((this.Ipmi == null && hostConfigInfo.Ipmi == null) || (this.Ipmi != null && this.Ipmi.Equals(hostConfigInfo.Ipmi))) && ((this.SslThumbprintInfo == null && hostConfigInfo.SslThumbprintInfo == null) || (this.SslThumbprintInfo != null && this.SslThumbprintInfo.Equals(hostConfigInfo.SslThumbprintInfo))) && ((this.SslThumbprintData == null && hostConfigInfo.SslThumbprintData == null) || (this.SslThumbprintData != null && hostConfigInfo.SslThumbprintData != null && Enumerable.SequenceEqual(this.SslThumbprintData, hostConfigInfo.SslThumbprintData))) && ((this.Certificate == null && hostConfigInfo.Certificate == null) || (this.Certificate != null && hostConfigInfo.Certificate != null && Enumerable.SequenceEqual(this.Certificate, hostConfigInfo.Certificate))) && ((this.PciPassthruInfo == null && hostConfigInfo.PciPassthruInfo == null) || (this.PciPassthruInfo != null && hostConfigInfo.PciPassthruInfo != null && Enumerable.SequenceEqual(this.PciPassthruInfo, hostConfigInfo.PciPassthruInfo))) && ((this.AuthenticationManagerInfo == null && hostConfigInfo.AuthenticationManagerInfo == null) || (this.AuthenticationManagerInfo != null && this.AuthenticationManagerInfo.Equals(hostConfigInfo.AuthenticationManagerInfo))) && ((this.FeatureVersion == null && hostConfigInfo.FeatureVersion == null) || (this.FeatureVersion != null && hostConfigInfo.FeatureVersion != null && Enumerable.SequenceEqual(this.FeatureVersion, hostConfigInfo.FeatureVersion))) && ((this.PowerSystemCapability == null && hostConfigInfo.PowerSystemCapability == null) || (this.PowerSystemCapability != null && this.PowerSystemCapability.Equals(hostConfigInfo.PowerSystemCapability))) && ((this.PowerSystemInfo == null && hostConfigInfo.PowerSystemInfo == null) || (this.PowerSystemInfo != null && this.PowerSystemInfo.Equals(hostConfigInfo.PowerSystemInfo))) && ((this.CacheConfigurationInfo == null && hostConfigInfo.CacheConfigurationInfo == null) || (this.CacheConfigurationInfo != null && hostConfigInfo.CacheConfigurationInfo != null && Enumerable.SequenceEqual(this.CacheConfigurationInfo, hostConfigInfo.CacheConfigurationInfo))) && ((this.WakeOnLanCapable == null && hostConfigInfo.WakeOnLanCapable == null) || (this.WakeOnLanCapable != null && this.WakeOnLanCapable.Equals(hostConfigInfo.WakeOnLanCapable))) && ((this.FeatureCapability == null && hostConfigInfo.FeatureCapability == null) || (this.FeatureCapability != null && hostConfigInfo.FeatureCapability != null && Enumerable.SequenceEqual(this.FeatureCapability, hostConfigInfo.FeatureCapability))) && ((this.MaskedFeatureCapability == null && hostConfigInfo.MaskedFeatureCapability == null) || (this.MaskedFeatureCapability != null && hostConfigInfo.MaskedFeatureCapability != null && Enumerable.SequenceEqual(this.MaskedFeatureCapability, hostConfigInfo.MaskedFeatureCapability))) && ((this.VFlashConfigInfo == null && hostConfigInfo.VFlashConfigInfo == null) || (this.VFlashConfigInfo != null && this.VFlashConfigInfo.Equals(hostConfigInfo.VFlashConfigInfo))) && ((this.VsanHostConfig == null && hostConfigInfo.VsanHostConfig == null) || (this.VsanHostConfig != null && this.VsanHostConfig.Equals(hostConfigInfo.VsanHostConfig))) && ((this.DomainList == null && hostConfigInfo.DomainList == null) || (this.DomainList != null && hostConfigInfo.DomainList != null && Enumerable.SequenceEqual(this.DomainList, hostConfigInfo.DomainList))) && ((this.ScriptCheckSum == null && hostConfigInfo.ScriptCheckSum == null) || (this.ScriptCheckSum != null && hostConfigInfo.ScriptCheckSum != null && Enumerable.SequenceEqual(this.ScriptCheckSum, hostConfigInfo.ScriptCheckSum))) && ((this.HostConfigCheckSum == null && hostConfigInfo.HostConfigCheckSum == null) || (this.HostConfigCheckSum != null && hostConfigInfo.HostConfigCheckSum != null && Enumerable.SequenceEqual(this.HostConfigCheckSum, hostConfigInfo.HostConfigCheckSum))) && ((this.GraphicsInfo == null && hostConfigInfo.GraphicsInfo == null) || (this.GraphicsInfo != null && hostConfigInfo.GraphicsInfo != null && Enumerable.SequenceEqual(this.GraphicsInfo, hostConfigInfo.GraphicsInfo))) && ((this.SharedPassthruGpuTypes == null && hostConfigInfo.SharedPassthruGpuTypes == null) || (this.SharedPassthruGpuTypes != null && hostConfigInfo.SharedPassthruGpuTypes != null && Enumerable.SequenceEqual(this.SharedPassthruGpuTypes, hostConfigInfo.SharedPassthruGpuTypes))) && ((this.GraphicsConfig == null && hostConfigInfo.GraphicsConfig == null) || (this.GraphicsConfig != null && this.GraphicsConfig.Equals(hostConfigInfo.GraphicsConfig))) && ((this.SharedGpuCapabilities == null && hostConfigInfo.SharedGpuCapabilities == null) || (this.SharedGpuCapabilities != null && hostConfigInfo.SharedGpuCapabilities != null && Enumerable.SequenceEqual(this.SharedGpuCapabilities, hostConfigInfo.SharedGpuCapabilities))) && ((this.IoFilterInfo == null && hostConfigInfo.IoFilterInfo == null) || (this.IoFilterInfo != null && hostConfigInfo.IoFilterInfo != null && Enumerable.SequenceEqual(this.IoFilterInfo, hostConfigInfo.IoFilterInfo))) && ((this.SriovDevicePool == null && hostConfigInfo.SriovDevicePool == null) || (this.SriovDevicePool != null && hostConfigInfo.SriovDevicePool != null && Enumerable.SequenceEqual(this.SriovDevicePool, hostConfigInfo.SriovDevicePool))) && ((this.LinkedView == null && hostConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostConfigInfo.LinkedView))));
        }

        public override bool Equals(object hostConfigInfo)
        {
            return Equals(hostConfigInfo as HostConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Product + "_" + DeploymentInfo + "_" + HyperThread + "_" + ConsoleReservation + "_" + VirtualMachineReservation + "_" + StorageDevice + "_" + MultipathState + "_" + FileSystemVolume + "_" + SystemFile + "_" + Network + "_" + Vmotion + "_" + VirtualNicManagerInfo + "_" + Capabilities + "_" + DatastoreCapabilities + "_" + OffloadCapabilities + "_" + Service + "_" + Firewall + "_" + AutoStart + "_" + ActiveDiagnosticPartition + "_" + Option + "_" + OptionDef + "_" + DatastorePrincipal + "_" + LocalSwapDatastore + "_" + SystemSwapConfiguration + "_" + SystemResources + "_" + DateTimeInfo + "_" + Flags + "_" + AdminDisabled + "_" + LockdownMode + "_" + Ipmi + "_" + SslThumbprintInfo + "_" + SslThumbprintData + "_" + Certificate + "_" + PciPassthruInfo + "_" + AuthenticationManagerInfo + "_" + FeatureVersion + "_" + PowerSystemCapability + "_" + PowerSystemInfo + "_" + CacheConfigurationInfo + "_" + WakeOnLanCapable + "_" + FeatureCapability + "_" + MaskedFeatureCapability + "_" + VFlashConfigInfo + "_" + VsanHostConfig + "_" + DomainList + "_" + ScriptCheckSum + "_" + HostConfigCheckSum + "_" + GraphicsInfo + "_" + SharedPassthruGpuTypes + "_" + GraphicsConfig + "_" + SharedGpuCapabilities + "_" + IoFilterInfo + "_" + SriovDevicePool + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostConfigInfo_LinkedView : IEquatable<HostConfigInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public Datastore LocalSwapDatastore { get; set; }

        public bool Equals(HostConfigInfo_LinkedView hostConfigInfo_LinkedView)
        {
            return (hostConfigInfo_LinkedView != null && ((this.Host == null && hostConfigInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostConfigInfo_LinkedView.Host))) && ((this.LocalSwapDatastore == null && hostConfigInfo_LinkedView.LocalSwapDatastore == null) || (this.LocalSwapDatastore != null && this.LocalSwapDatastore.Equals(hostConfigInfo_LinkedView.LocalSwapDatastore))));
        }

        public override bool Equals(object hostConfigInfo_LinkedView)
        {
            return Equals(hostConfigInfo_LinkedView as HostConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LocalSwapDatastore).GetHashCode();
        }
    }

    public class HostConfigManager : DynamicData, IEquatable<HostConfigManager>
    {
        public ManagedObjectReference CpuScheduler { get; set; }

        public ManagedObjectReference DatastoreSystem { get; set; }

        public ManagedObjectReference MemoryManager { get; set; }

        public ManagedObjectReference StorageSystem { get; set; }

        public ManagedObjectReference NetworkSystem { get; set; }

        public ManagedObjectReference VmotionSystem { get; set; }

        public ManagedObjectReference VirtualNicManager { get; set; }

        public ManagedObjectReference ServiceSystem { get; set; }

        public ManagedObjectReference FirewallSystem { get; set; }

        public ManagedObjectReference AdvancedOption { get; set; }

        public ManagedObjectReference DiagnosticSystem { get; set; }

        public ManagedObjectReference AutoStartManager { get; set; }

        public ManagedObjectReference SnmpSystem { get; set; }

        public ManagedObjectReference DateTimeSystem { get; set; }

        public ManagedObjectReference PatchManager { get; set; }

        public ManagedObjectReference ImageConfigManager { get; set; }

        public ManagedObjectReference BootDeviceSystem { get; set; }

        public ManagedObjectReference FirmwareSystem { get; set; }

        public ManagedObjectReference HealthStatusSystem { get; set; }

        public ManagedObjectReference PciPassthruSystem { get; set; }

        public ManagedObjectReference LicenseManager { get; set; }

        public ManagedObjectReference KernelModuleSystem { get; set; }

        public ManagedObjectReference AuthenticationManager { get; set; }

        public ManagedObjectReference PowerSystem { get; set; }

        public ManagedObjectReference CacheConfigurationManager { get; set; }

        public ManagedObjectReference EsxAgentHostManager { get; set; }

        public ManagedObjectReference IscsiManager { get; set; }

        public ManagedObjectReference VFlashManager { get; set; }

        public ManagedObjectReference VsanSystem { get; set; }

        public ManagedObjectReference MessageBusProxy { get; set; }

        public ManagedObjectReference UserDirectory { get; set; }

        public ManagedObjectReference AccountManager { get; set; }

        public ManagedObjectReference HostAccessManager { get; set; }

        public ManagedObjectReference GraphicsManager { get; set; }

        public ManagedObjectReference VsanInternalSystem { get; set; }

        public ManagedObjectReference CertificateManager { get; set; }

        public ManagedObjectReference CryptoManager { get; set; }

        public ManagedObjectReference NvdimmSystem { get; set; }

        public HostConfigManager_LinkedView LinkedView { get; set; }

        public bool Equals(HostConfigManager hostConfigManager)
        {
            return (hostConfigManager != null && ((this.CpuScheduler == null && hostConfigManager.CpuScheduler == null) || (this.CpuScheduler != null && this.CpuScheduler.Equals(hostConfigManager.CpuScheduler))) && ((this.DatastoreSystem == null && hostConfigManager.DatastoreSystem == null) || (this.DatastoreSystem != null && this.DatastoreSystem.Equals(hostConfigManager.DatastoreSystem))) && ((this.MemoryManager == null && hostConfigManager.MemoryManager == null) || (this.MemoryManager != null && this.MemoryManager.Equals(hostConfigManager.MemoryManager))) && ((this.StorageSystem == null && hostConfigManager.StorageSystem == null) || (this.StorageSystem != null && this.StorageSystem.Equals(hostConfigManager.StorageSystem))) && ((this.NetworkSystem == null && hostConfigManager.NetworkSystem == null) || (this.NetworkSystem != null && this.NetworkSystem.Equals(hostConfigManager.NetworkSystem))) && ((this.VmotionSystem == null && hostConfigManager.VmotionSystem == null) || (this.VmotionSystem != null && this.VmotionSystem.Equals(hostConfigManager.VmotionSystem))) && ((this.VirtualNicManager == null && hostConfigManager.VirtualNicManager == null) || (this.VirtualNicManager != null && this.VirtualNicManager.Equals(hostConfigManager.VirtualNicManager))) && ((this.ServiceSystem == null && hostConfigManager.ServiceSystem == null) || (this.ServiceSystem != null && this.ServiceSystem.Equals(hostConfigManager.ServiceSystem))) && ((this.FirewallSystem == null && hostConfigManager.FirewallSystem == null) || (this.FirewallSystem != null && this.FirewallSystem.Equals(hostConfigManager.FirewallSystem))) && ((this.AdvancedOption == null && hostConfigManager.AdvancedOption == null) || (this.AdvancedOption != null && this.AdvancedOption.Equals(hostConfigManager.AdvancedOption))) && ((this.DiagnosticSystem == null && hostConfigManager.DiagnosticSystem == null) || (this.DiagnosticSystem != null && this.DiagnosticSystem.Equals(hostConfigManager.DiagnosticSystem))) && ((this.AutoStartManager == null && hostConfigManager.AutoStartManager == null) || (this.AutoStartManager != null && this.AutoStartManager.Equals(hostConfigManager.AutoStartManager))) && ((this.SnmpSystem == null && hostConfigManager.SnmpSystem == null) || (this.SnmpSystem != null && this.SnmpSystem.Equals(hostConfigManager.SnmpSystem))) && ((this.DateTimeSystem == null && hostConfigManager.DateTimeSystem == null) || (this.DateTimeSystem != null && this.DateTimeSystem.Equals(hostConfigManager.DateTimeSystem))) && ((this.PatchManager == null && hostConfigManager.PatchManager == null) || (this.PatchManager != null && this.PatchManager.Equals(hostConfigManager.PatchManager))) && ((this.ImageConfigManager == null && hostConfigManager.ImageConfigManager == null) || (this.ImageConfigManager != null && this.ImageConfigManager.Equals(hostConfigManager.ImageConfigManager))) && ((this.BootDeviceSystem == null && hostConfigManager.BootDeviceSystem == null) || (this.BootDeviceSystem != null && this.BootDeviceSystem.Equals(hostConfigManager.BootDeviceSystem))) && ((this.FirmwareSystem == null && hostConfigManager.FirmwareSystem == null) || (this.FirmwareSystem != null && this.FirmwareSystem.Equals(hostConfigManager.FirmwareSystem))) && ((this.HealthStatusSystem == null && hostConfigManager.HealthStatusSystem == null) || (this.HealthStatusSystem != null && this.HealthStatusSystem.Equals(hostConfigManager.HealthStatusSystem))) && ((this.PciPassthruSystem == null && hostConfigManager.PciPassthruSystem == null) || (this.PciPassthruSystem != null && this.PciPassthruSystem.Equals(hostConfigManager.PciPassthruSystem))) && ((this.LicenseManager == null && hostConfigManager.LicenseManager == null) || (this.LicenseManager != null && this.LicenseManager.Equals(hostConfigManager.LicenseManager))) && ((this.KernelModuleSystem == null && hostConfigManager.KernelModuleSystem == null) || (this.KernelModuleSystem != null && this.KernelModuleSystem.Equals(hostConfigManager.KernelModuleSystem))) && ((this.AuthenticationManager == null && hostConfigManager.AuthenticationManager == null) || (this.AuthenticationManager != null && this.AuthenticationManager.Equals(hostConfigManager.AuthenticationManager))) && ((this.PowerSystem == null && hostConfigManager.PowerSystem == null) || (this.PowerSystem != null && this.PowerSystem.Equals(hostConfigManager.PowerSystem))) && ((this.CacheConfigurationManager == null && hostConfigManager.CacheConfigurationManager == null) || (this.CacheConfigurationManager != null && this.CacheConfigurationManager.Equals(hostConfigManager.CacheConfigurationManager))) && ((this.EsxAgentHostManager == null && hostConfigManager.EsxAgentHostManager == null) || (this.EsxAgentHostManager != null && this.EsxAgentHostManager.Equals(hostConfigManager.EsxAgentHostManager))) && ((this.IscsiManager == null && hostConfigManager.IscsiManager == null) || (this.IscsiManager != null && this.IscsiManager.Equals(hostConfigManager.IscsiManager))) && ((this.VFlashManager == null && hostConfigManager.VFlashManager == null) || (this.VFlashManager != null && this.VFlashManager.Equals(hostConfigManager.VFlashManager))) && ((this.VsanSystem == null && hostConfigManager.VsanSystem == null) || (this.VsanSystem != null && this.VsanSystem.Equals(hostConfigManager.VsanSystem))) && ((this.MessageBusProxy == null && hostConfigManager.MessageBusProxy == null) || (this.MessageBusProxy != null && this.MessageBusProxy.Equals(hostConfigManager.MessageBusProxy))) && ((this.UserDirectory == null && hostConfigManager.UserDirectory == null) || (this.UserDirectory != null && this.UserDirectory.Equals(hostConfigManager.UserDirectory))) && ((this.AccountManager == null && hostConfigManager.AccountManager == null) || (this.AccountManager != null && this.AccountManager.Equals(hostConfigManager.AccountManager))) && ((this.HostAccessManager == null && hostConfigManager.HostAccessManager == null) || (this.HostAccessManager != null && this.HostAccessManager.Equals(hostConfigManager.HostAccessManager))) && ((this.GraphicsManager == null && hostConfigManager.GraphicsManager == null) || (this.GraphicsManager != null && this.GraphicsManager.Equals(hostConfigManager.GraphicsManager))) && ((this.VsanInternalSystem == null && hostConfigManager.VsanInternalSystem == null) || (this.VsanInternalSystem != null && this.VsanInternalSystem.Equals(hostConfigManager.VsanInternalSystem))) && ((this.CertificateManager == null && hostConfigManager.CertificateManager == null) || (this.CertificateManager != null && this.CertificateManager.Equals(hostConfigManager.CertificateManager))) && ((this.CryptoManager == null && hostConfigManager.CryptoManager == null) || (this.CryptoManager != null && this.CryptoManager.Equals(hostConfigManager.CryptoManager))) && ((this.NvdimmSystem == null && hostConfigManager.NvdimmSystem == null) || (this.NvdimmSystem != null && this.NvdimmSystem.Equals(hostConfigManager.NvdimmSystem))) && ((this.LinkedView == null && hostConfigManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostConfigManager.LinkedView))));
        }

        public override bool Equals(object hostConfigManager)
        {
            return Equals(hostConfigManager as HostConfigManager);
        }

        public override int GetHashCode()
        {
            return (CpuScheduler + "_" + DatastoreSystem + "_" + MemoryManager + "_" + StorageSystem + "_" + NetworkSystem + "_" + VmotionSystem + "_" + VirtualNicManager + "_" + ServiceSystem + "_" + FirewallSystem + "_" + AdvancedOption + "_" + DiagnosticSystem + "_" + AutoStartManager + "_" + SnmpSystem + "_" + DateTimeSystem + "_" + PatchManager + "_" + ImageConfigManager + "_" + BootDeviceSystem + "_" + FirmwareSystem + "_" + HealthStatusSystem + "_" + PciPassthruSystem + "_" + LicenseManager + "_" + KernelModuleSystem + "_" + AuthenticationManager + "_" + PowerSystem + "_" + CacheConfigurationManager + "_" + EsxAgentHostManager + "_" + IscsiManager + "_" + VFlashManager + "_" + VsanSystem + "_" + MessageBusProxy + "_" + UserDirectory + "_" + AccountManager + "_" + HostAccessManager + "_" + GraphicsManager + "_" + VsanInternalSystem + "_" + CertificateManager + "_" + CryptoManager + "_" + NvdimmSystem + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostConfigManager_LinkedView : IEquatable<HostConfigManager_LinkedView>
    {
        public HostCpuSchedulerSystem CpuScheduler { get; set; }

        public HostDatastoreSystem DatastoreSystem { get; set; }

        public HostMemorySystem MemoryManager { get; set; }

        public HostStorageSystem StorageSystem { get; set; }

        public HostNetworkSystem NetworkSystem { get; set; }

        public HostVMotionSystem VmotionSystem { get; set; }

        public HostVirtualNicManager VirtualNicManager { get; set; }

        public HostServiceSystem ServiceSystem { get; set; }

        public HostFirewallSystem FirewallSystem { get; set; }

        public OptionManager AdvancedOption { get; set; }

        public HostDiagnosticSystem DiagnosticSystem { get; set; }

        public HostAutoStartManager AutoStartManager { get; set; }

        public HostSnmpSystem SnmpSystem { get; set; }

        public HostDateTimeSystem DateTimeSystem { get; set; }

        public HostPatchManager PatchManager { get; set; }

        public HostImageConfigManager ImageConfigManager { get; set; }

        public HostBootDeviceSystem BootDeviceSystem { get; set; }

        public HostFirmwareSystem FirmwareSystem { get; set; }

        public HostHealthStatusSystem HealthStatusSystem { get; set; }

        public HostPciPassthruSystem PciPassthruSystem { get; set; }

        public LicenseManager LicenseManager { get; set; }

        public HostKernelModuleSystem KernelModuleSystem { get; set; }

        public HostAuthenticationManager AuthenticationManager { get; set; }

        public HostPowerSystem PowerSystem { get; set; }

        public HostCacheConfigurationManager CacheConfigurationManager { get; set; }

        public HostEsxAgentHostManager EsxAgentHostManager { get; set; }

        public IscsiManager IscsiManager { get; set; }

        public HostVFlashManager VFlashManager { get; set; }

        public HostVsanSystem VsanSystem { get; set; }

        public MessageBusProxy MessageBusProxy { get; set; }

        public UserDirectory UserDirectory { get; set; }

        public HostLocalAccountManager AccountManager { get; set; }

        public HostAccessManager HostAccessManager { get; set; }

        public HostGraphicsManager GraphicsManager { get; set; }

        public HostVsanInternalSystem VsanInternalSystem { get; set; }

        public HostCertificateManager CertificateManager { get; set; }

        public CryptoManager CryptoManager { get; set; }

        public HostNvdimmSystem NvdimmSystem { get; set; }

        public bool Equals(HostConfigManager_LinkedView hostConfigManager_LinkedView)
        {
            return (hostConfigManager_LinkedView != null && ((this.CpuScheduler == null && hostConfigManager_LinkedView.CpuScheduler == null) || (this.CpuScheduler != null && this.CpuScheduler.Equals(hostConfigManager_LinkedView.CpuScheduler))) && ((this.DatastoreSystem == null && hostConfigManager_LinkedView.DatastoreSystem == null) || (this.DatastoreSystem != null && this.DatastoreSystem.Equals(hostConfigManager_LinkedView.DatastoreSystem))) && ((this.MemoryManager == null && hostConfigManager_LinkedView.MemoryManager == null) || (this.MemoryManager != null && this.MemoryManager.Equals(hostConfigManager_LinkedView.MemoryManager))) && ((this.StorageSystem == null && hostConfigManager_LinkedView.StorageSystem == null) || (this.StorageSystem != null && this.StorageSystem.Equals(hostConfigManager_LinkedView.StorageSystem))) && ((this.NetworkSystem == null && hostConfigManager_LinkedView.NetworkSystem == null) || (this.NetworkSystem != null && this.NetworkSystem.Equals(hostConfigManager_LinkedView.NetworkSystem))) && ((this.VmotionSystem == null && hostConfigManager_LinkedView.VmotionSystem == null) || (this.VmotionSystem != null && this.VmotionSystem.Equals(hostConfigManager_LinkedView.VmotionSystem))) && ((this.VirtualNicManager == null && hostConfigManager_LinkedView.VirtualNicManager == null) || (this.VirtualNicManager != null && this.VirtualNicManager.Equals(hostConfigManager_LinkedView.VirtualNicManager))) && ((this.ServiceSystem == null && hostConfigManager_LinkedView.ServiceSystem == null) || (this.ServiceSystem != null && this.ServiceSystem.Equals(hostConfigManager_LinkedView.ServiceSystem))) && ((this.FirewallSystem == null && hostConfigManager_LinkedView.FirewallSystem == null) || (this.FirewallSystem != null && this.FirewallSystem.Equals(hostConfigManager_LinkedView.FirewallSystem))) && ((this.AdvancedOption == null && hostConfigManager_LinkedView.AdvancedOption == null) || (this.AdvancedOption != null && this.AdvancedOption.Equals(hostConfigManager_LinkedView.AdvancedOption))) && ((this.DiagnosticSystem == null && hostConfigManager_LinkedView.DiagnosticSystem == null) || (this.DiagnosticSystem != null && this.DiagnosticSystem.Equals(hostConfigManager_LinkedView.DiagnosticSystem))) && ((this.AutoStartManager == null && hostConfigManager_LinkedView.AutoStartManager == null) || (this.AutoStartManager != null && this.AutoStartManager.Equals(hostConfigManager_LinkedView.AutoStartManager))) && ((this.SnmpSystem == null && hostConfigManager_LinkedView.SnmpSystem == null) || (this.SnmpSystem != null && this.SnmpSystem.Equals(hostConfigManager_LinkedView.SnmpSystem))) && ((this.DateTimeSystem == null && hostConfigManager_LinkedView.DateTimeSystem == null) || (this.DateTimeSystem != null && this.DateTimeSystem.Equals(hostConfigManager_LinkedView.DateTimeSystem))) && ((this.PatchManager == null && hostConfigManager_LinkedView.PatchManager == null) || (this.PatchManager != null && this.PatchManager.Equals(hostConfigManager_LinkedView.PatchManager))) && ((this.ImageConfigManager == null && hostConfigManager_LinkedView.ImageConfigManager == null) || (this.ImageConfigManager != null && this.ImageConfigManager.Equals(hostConfigManager_LinkedView.ImageConfigManager))) && ((this.BootDeviceSystem == null && hostConfigManager_LinkedView.BootDeviceSystem == null) || (this.BootDeviceSystem != null && this.BootDeviceSystem.Equals(hostConfigManager_LinkedView.BootDeviceSystem))) && ((this.FirmwareSystem == null && hostConfigManager_LinkedView.FirmwareSystem == null) || (this.FirmwareSystem != null && this.FirmwareSystem.Equals(hostConfigManager_LinkedView.FirmwareSystem))) && ((this.HealthStatusSystem == null && hostConfigManager_LinkedView.HealthStatusSystem == null) || (this.HealthStatusSystem != null && this.HealthStatusSystem.Equals(hostConfigManager_LinkedView.HealthStatusSystem))) && ((this.PciPassthruSystem == null && hostConfigManager_LinkedView.PciPassthruSystem == null) || (this.PciPassthruSystem != null && this.PciPassthruSystem.Equals(hostConfigManager_LinkedView.PciPassthruSystem))) && ((this.LicenseManager == null && hostConfigManager_LinkedView.LicenseManager == null) || (this.LicenseManager != null && this.LicenseManager.Equals(hostConfigManager_LinkedView.LicenseManager))) && ((this.KernelModuleSystem == null && hostConfigManager_LinkedView.KernelModuleSystem == null) || (this.KernelModuleSystem != null && this.KernelModuleSystem.Equals(hostConfigManager_LinkedView.KernelModuleSystem))) && ((this.AuthenticationManager == null && hostConfigManager_LinkedView.AuthenticationManager == null) || (this.AuthenticationManager != null && this.AuthenticationManager.Equals(hostConfigManager_LinkedView.AuthenticationManager))) && ((this.PowerSystem == null && hostConfigManager_LinkedView.PowerSystem == null) || (this.PowerSystem != null && this.PowerSystem.Equals(hostConfigManager_LinkedView.PowerSystem))) && ((this.CacheConfigurationManager == null && hostConfigManager_LinkedView.CacheConfigurationManager == null) || (this.CacheConfigurationManager != null && this.CacheConfigurationManager.Equals(hostConfigManager_LinkedView.CacheConfigurationManager))) && ((this.EsxAgentHostManager == null && hostConfigManager_LinkedView.EsxAgentHostManager == null) || (this.EsxAgentHostManager != null && this.EsxAgentHostManager.Equals(hostConfigManager_LinkedView.EsxAgentHostManager))) && ((this.IscsiManager == null && hostConfigManager_LinkedView.IscsiManager == null) || (this.IscsiManager != null && this.IscsiManager.Equals(hostConfigManager_LinkedView.IscsiManager))) && ((this.VFlashManager == null && hostConfigManager_LinkedView.VFlashManager == null) || (this.VFlashManager != null && this.VFlashManager.Equals(hostConfigManager_LinkedView.VFlashManager))) && ((this.VsanSystem == null && hostConfigManager_LinkedView.VsanSystem == null) || (this.VsanSystem != null && this.VsanSystem.Equals(hostConfigManager_LinkedView.VsanSystem))) && ((this.MessageBusProxy == null && hostConfigManager_LinkedView.MessageBusProxy == null) || (this.MessageBusProxy != null && this.MessageBusProxy.Equals(hostConfigManager_LinkedView.MessageBusProxy))) && ((this.UserDirectory == null && hostConfigManager_LinkedView.UserDirectory == null) || (this.UserDirectory != null && this.UserDirectory.Equals(hostConfigManager_LinkedView.UserDirectory))) && ((this.AccountManager == null && hostConfigManager_LinkedView.AccountManager == null) || (this.AccountManager != null && this.AccountManager.Equals(hostConfigManager_LinkedView.AccountManager))) && ((this.HostAccessManager == null && hostConfigManager_LinkedView.HostAccessManager == null) || (this.HostAccessManager != null && this.HostAccessManager.Equals(hostConfigManager_LinkedView.HostAccessManager))) && ((this.GraphicsManager == null && hostConfigManager_LinkedView.GraphicsManager == null) || (this.GraphicsManager != null && this.GraphicsManager.Equals(hostConfigManager_LinkedView.GraphicsManager))) && ((this.VsanInternalSystem == null && hostConfigManager_LinkedView.VsanInternalSystem == null) || (this.VsanInternalSystem != null && this.VsanInternalSystem.Equals(hostConfigManager_LinkedView.VsanInternalSystem))) && ((this.CertificateManager == null && hostConfigManager_LinkedView.CertificateManager == null) || (this.CertificateManager != null && this.CertificateManager.Equals(hostConfigManager_LinkedView.CertificateManager))) && ((this.CryptoManager == null && hostConfigManager_LinkedView.CryptoManager == null) || (this.CryptoManager != null && this.CryptoManager.Equals(hostConfigManager_LinkedView.CryptoManager))) && ((this.NvdimmSystem == null && hostConfigManager_LinkedView.NvdimmSystem == null) || (this.NvdimmSystem != null && this.NvdimmSystem.Equals(hostConfigManager_LinkedView.NvdimmSystem))));
        }

        public override bool Equals(object hostConfigManager_LinkedView)
        {
            return Equals(hostConfigManager_LinkedView as HostConfigManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (CpuScheduler + "_" + DatastoreSystem + "_" + MemoryManager + "_" + StorageSystem + "_" + NetworkSystem + "_" + VmotionSystem + "_" + VirtualNicManager + "_" + ServiceSystem + "_" + FirewallSystem + "_" + AdvancedOption + "_" + DiagnosticSystem + "_" + AutoStartManager + "_" + SnmpSystem + "_" + DateTimeSystem + "_" + PatchManager + "_" + ImageConfigManager + "_" + BootDeviceSystem + "_" + FirmwareSystem + "_" + HealthStatusSystem + "_" + PciPassthruSystem + "_" + LicenseManager + "_" + KernelModuleSystem + "_" + AuthenticationManager + "_" + PowerSystem + "_" + CacheConfigurationManager + "_" + EsxAgentHostManager + "_" + IscsiManager + "_" + VFlashManager + "_" + VsanSystem + "_" + MessageBusProxy + "_" + UserDirectory + "_" + AccountManager + "_" + HostAccessManager + "_" + GraphicsManager + "_" + VsanInternalSystem + "_" + CertificateManager + "_" + CryptoManager + "_" + NvdimmSystem).GetHashCode();
        }
    }

    public class HostConfigSpec : DynamicData, IEquatable<HostConfigSpec>
    {
        public HostNasVolumeConfig[] NasDatastore { get; set; }

        public HostNetworkConfig Network { get; set; }

        public HostVirtualNicManagerNicTypeSelection[] NicTypeSelection { get; set; }

        public HostServiceConfig[] Service { get; set; }

        public HostFirewallConfig Firewall { get; set; }

        public OptionValue[] Option { get; set; }

        public string DatastorePrincipal { get; set; }

        public string DatastorePrincipalPasswd { get; set; }

        public HostDateTimeConfig Datetime { get; set; }

        public HostStorageDeviceInfo StorageDevice { get; set; }

        public HostLicenseSpec License { get; set; }

        public HostSecuritySpec Security { get; set; }

        public HostAccountSpec[] UserAccount { get; set; }

        public HostAccountSpec[] UsergroupAccount { get; set; }

        public HostMemorySpec Memory { get; set; }

        public HostActiveDirectory[] ActiveDirectory { get; set; }

        public KeyAnyValue[] GenericConfig { get; set; }

        public HostGraphicsConfig GraphicsConfig { get; set; }

        public bool Equals(HostConfigSpec hostConfigSpec)
        {
            return (hostConfigSpec != null && ((this.NasDatastore == null && hostConfigSpec.NasDatastore == null) || (this.NasDatastore != null && hostConfigSpec.NasDatastore != null && Enumerable.SequenceEqual(this.NasDatastore, hostConfigSpec.NasDatastore))) && ((this.Network == null && hostConfigSpec.Network == null) || (this.Network != null && this.Network.Equals(hostConfigSpec.Network))) && ((this.NicTypeSelection == null && hostConfigSpec.NicTypeSelection == null) || (this.NicTypeSelection != null && hostConfigSpec.NicTypeSelection != null && Enumerable.SequenceEqual(this.NicTypeSelection, hostConfigSpec.NicTypeSelection))) && ((this.Service == null && hostConfigSpec.Service == null) || (this.Service != null && hostConfigSpec.Service != null && Enumerable.SequenceEqual(this.Service, hostConfigSpec.Service))) && ((this.Firewall == null && hostConfigSpec.Firewall == null) || (this.Firewall != null && this.Firewall.Equals(hostConfigSpec.Firewall))) && ((this.Option == null && hostConfigSpec.Option == null) || (this.Option != null && hostConfigSpec.Option != null && Enumerable.SequenceEqual(this.Option, hostConfigSpec.Option))) && this.DatastorePrincipal == hostConfigSpec.DatastorePrincipal && this.DatastorePrincipalPasswd == hostConfigSpec.DatastorePrincipalPasswd && ((this.Datetime == null && hostConfigSpec.Datetime == null) || (this.Datetime != null && this.Datetime.Equals(hostConfigSpec.Datetime))) && ((this.StorageDevice == null && hostConfigSpec.StorageDevice == null) || (this.StorageDevice != null && this.StorageDevice.Equals(hostConfigSpec.StorageDevice))) && ((this.License == null && hostConfigSpec.License == null) || (this.License != null && this.License.Equals(hostConfigSpec.License))) && ((this.Security == null && hostConfigSpec.Security == null) || (this.Security != null && this.Security.Equals(hostConfigSpec.Security))) && ((this.UserAccount == null && hostConfigSpec.UserAccount == null) || (this.UserAccount != null && hostConfigSpec.UserAccount != null && Enumerable.SequenceEqual(this.UserAccount, hostConfigSpec.UserAccount))) && ((this.UsergroupAccount == null && hostConfigSpec.UsergroupAccount == null) || (this.UsergroupAccount != null && hostConfigSpec.UsergroupAccount != null && Enumerable.SequenceEqual(this.UsergroupAccount, hostConfigSpec.UsergroupAccount))) && ((this.Memory == null && hostConfigSpec.Memory == null) || (this.Memory != null && this.Memory.Equals(hostConfigSpec.Memory))) && ((this.ActiveDirectory == null && hostConfigSpec.ActiveDirectory == null) || (this.ActiveDirectory != null && hostConfigSpec.ActiveDirectory != null && Enumerable.SequenceEqual(this.ActiveDirectory, hostConfigSpec.ActiveDirectory))) && ((this.GenericConfig == null && hostConfigSpec.GenericConfig == null) || (this.GenericConfig != null && hostConfigSpec.GenericConfig != null && Enumerable.SequenceEqual(this.GenericConfig, hostConfigSpec.GenericConfig))) && ((this.GraphicsConfig == null && hostConfigSpec.GraphicsConfig == null) || (this.GraphicsConfig != null && this.GraphicsConfig.Equals(hostConfigSpec.GraphicsConfig))));
        }

        public override bool Equals(object hostConfigSpec)
        {
            return Equals(hostConfigSpec as HostConfigSpec);
        }

        public override int GetHashCode()
        {
            return (NasDatastore + "_" + Network + "_" + NicTypeSelection + "_" + Service + "_" + Firewall + "_" + Option + "_" + DatastorePrincipal + "_" + DatastorePrincipalPasswd + "_" + Datetime + "_" + StorageDevice + "_" + License + "_" + Security + "_" + UserAccount + "_" + UsergroupAccount + "_" + Memory + "_" + ActiveDirectory + "_" + GenericConfig + "_" + GraphicsConfig).GetHashCode();
        }
    }

    public class HostConfigSummary : DynamicData, IEquatable<HostConfigSummary>
    {
        public string Name { get; set; }

        public int Port { get; set; }

        public string SslThumbprint { get; set; }

        public AboutInfo Product { get; set; }

        public bool VmotionEnabled { get; set; }

        public bool FaultToleranceEnabled { get; set; }

        public HostFeatureVersionInfo[] FeatureVersion { get; set; }

        public ManagedObjectReference AgentVmDatastore { get; set; }

        public ManagedObjectReference AgentVmNetwork { get; set; }

        public HostConfigSummary_LinkedView LinkedView { get; set; }

        public bool Equals(HostConfigSummary hostConfigSummary)
        {
            return (hostConfigSummary != null && this.Name == hostConfigSummary.Name && this.Port == hostConfigSummary.Port && this.SslThumbprint == hostConfigSummary.SslThumbprint && ((this.Product == null && hostConfigSummary.Product == null) || (this.Product != null && this.Product.Equals(hostConfigSummary.Product))) && this.VmotionEnabled == hostConfigSummary.VmotionEnabled && this.FaultToleranceEnabled == hostConfigSummary.FaultToleranceEnabled && ((this.FeatureVersion == null && hostConfigSummary.FeatureVersion == null) || (this.FeatureVersion != null && hostConfigSummary.FeatureVersion != null && Enumerable.SequenceEqual(this.FeatureVersion, hostConfigSummary.FeatureVersion))) && ((this.AgentVmDatastore == null && hostConfigSummary.AgentVmDatastore == null) || (this.AgentVmDatastore != null && this.AgentVmDatastore.Equals(hostConfigSummary.AgentVmDatastore))) && ((this.AgentVmNetwork == null && hostConfigSummary.AgentVmNetwork == null) || (this.AgentVmNetwork != null && this.AgentVmNetwork.Equals(hostConfigSummary.AgentVmNetwork))) && ((this.LinkedView == null && hostConfigSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostConfigSummary.LinkedView))));
        }

        public override bool Equals(object hostConfigSummary)
        {
            return Equals(hostConfigSummary as HostConfigSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Port + "_" + SslThumbprint + "_" + Product + "_" + VmotionEnabled + "_" + FaultToleranceEnabled + "_" + FeatureVersion + "_" + AgentVmDatastore + "_" + AgentVmNetwork + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostConfigSummary_LinkedView : IEquatable<HostConfigSummary_LinkedView>
    {
        public Datastore AgentVmDatastore { get; set; }

        public Network AgentVmNetwork { get; set; }

        public bool Equals(HostConfigSummary_LinkedView hostConfigSummary_LinkedView)
        {
            return (hostConfigSummary_LinkedView != null && ((this.AgentVmDatastore == null && hostConfigSummary_LinkedView.AgentVmDatastore == null) || (this.AgentVmDatastore != null && this.AgentVmDatastore.Equals(hostConfigSummary_LinkedView.AgentVmDatastore))) && ((this.AgentVmNetwork == null && hostConfigSummary_LinkedView.AgentVmNetwork == null) || (this.AgentVmNetwork != null && this.AgentVmNetwork.Equals(hostConfigSummary_LinkedView.AgentVmNetwork))));
        }

        public override bool Equals(object hostConfigSummary_LinkedView)
        {
            return Equals(hostConfigSummary_LinkedView as HostConfigSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (AgentVmDatastore + "_" + AgentVmNetwork).GetHashCode();
        }
    }

    public class HostConnectedEvent : HostEvent, IEquatable<HostConnectedEvent>
    {
        public bool Equals(HostConnectedEvent hostConnectedEvent)
        {
            return (hostConnectedEvent != null && base.Equals(hostConnectedEvent));
        }

        public override bool Equals(object hostConnectedEvent)
        {
            return Equals(hostConnectedEvent as HostConnectedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConnectFault : VimFault, IEquatable<HostConnectFault>
    {
        public bool Equals(HostConnectFault hostConnectFault)
        {
            return (hostConnectFault != null && base.Equals(hostConnectFault));
        }

        public override bool Equals(object hostConnectFault)
        {
            return Equals(hostConnectFault as HostConnectFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConnectInfo : DynamicData, IEquatable<HostConnectInfo>
    {
        public string ServerIp { get; set; }

        public bool? InDasCluster { get; set; }

        public HostListSummary Host { get; set; }

        public VirtualMachineSummary[] Vm { get; set; }

        public bool? VimAccountNameRequired { get; set; }

        public bool? ClusterSupported { get; set; }

        public HostConnectInfoNetworkInfo[] Network { get; set; }

        public HostDatastoreConnectInfo[] Datastore { get; set; }

        public HostLicenseConnectInfo License { get; set; }

        public HostCapability Capability { get; set; }

        public bool Equals(HostConnectInfo hostConnectInfo)
        {
            return (hostConnectInfo != null && this.ServerIp == hostConnectInfo.ServerIp && ((this.InDasCluster == null && hostConnectInfo.InDasCluster == null) || (this.InDasCluster != null && this.InDasCluster.Equals(hostConnectInfo.InDasCluster))) && ((this.Host == null && hostConnectInfo.Host == null) || (this.Host != null && this.Host.Equals(hostConnectInfo.Host))) && ((this.Vm == null && hostConnectInfo.Vm == null) || (this.Vm != null && hostConnectInfo.Vm != null && Enumerable.SequenceEqual(this.Vm, hostConnectInfo.Vm))) && ((this.VimAccountNameRequired == null && hostConnectInfo.VimAccountNameRequired == null) || (this.VimAccountNameRequired != null && this.VimAccountNameRequired.Equals(hostConnectInfo.VimAccountNameRequired))) && ((this.ClusterSupported == null && hostConnectInfo.ClusterSupported == null) || (this.ClusterSupported != null && this.ClusterSupported.Equals(hostConnectInfo.ClusterSupported))) && ((this.Network == null && hostConnectInfo.Network == null) || (this.Network != null && hostConnectInfo.Network != null && Enumerable.SequenceEqual(this.Network, hostConnectInfo.Network))) && ((this.Datastore == null && hostConnectInfo.Datastore == null) || (this.Datastore != null && hostConnectInfo.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostConnectInfo.Datastore))) && ((this.License == null && hostConnectInfo.License == null) || (this.License != null && this.License.Equals(hostConnectInfo.License))) && ((this.Capability == null && hostConnectInfo.Capability == null) || (this.Capability != null && this.Capability.Equals(hostConnectInfo.Capability))));
        }

        public override bool Equals(object hostConnectInfo)
        {
            return Equals(hostConnectInfo as HostConnectInfo);
        }

        public override int GetHashCode()
        {
            return (ServerIp + "_" + InDasCluster + "_" + Host + "_" + Vm + "_" + VimAccountNameRequired + "_" + ClusterSupported + "_" + Network + "_" + Datastore + "_" + License + "_" + Capability).GetHashCode();
        }
    }

    public class HostConnectInfoNetworkInfo : DynamicData, IEquatable<HostConnectInfoNetworkInfo>
    {
        public NetworkSummary Summary { get; set; }

        public bool Equals(HostConnectInfoNetworkInfo hostConnectInfoNetworkInfo)
        {
            return (hostConnectInfoNetworkInfo != null && ((this.Summary == null && hostConnectInfoNetworkInfo.Summary == null) || (this.Summary != null && this.Summary.Equals(hostConnectInfoNetworkInfo.Summary))));
        }

        public override bool Equals(object hostConnectInfoNetworkInfo)
        {
            return Equals(hostConnectInfoNetworkInfo as HostConnectInfoNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (Summary).GetHashCode();
        }
    }

    public class HostConnectionLostEvent : HostEvent, IEquatable<HostConnectionLostEvent>
    {
        public bool Equals(HostConnectionLostEvent hostConnectionLostEvent)
        {
            return (hostConnectionLostEvent != null && base.Equals(hostConnectionLostEvent));
        }

        public override bool Equals(object hostConnectionLostEvent)
        {
            return Equals(hostConnectionLostEvent as HostConnectionLostEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostConnectSpec : DynamicData, IEquatable<HostConnectSpec>
    {
        public string HostName { get; set; }

        public int? Port { get; set; }

        public string SslThumbprint { get; set; }

        public string UserName { get; set; }

        public string Password { get; set; }

        public ManagedObjectReference VmFolder { get; set; }

        public bool Force { get; set; }

        public string VimAccountName { get; set; }

        public string VimAccountPassword { get; set; }

        public string ManagementIp { get; set; }

        public HostLockdownMode? LockdownMode { get; set; }

        public HostGatewaySpec HostGateway { get; set; }

        public HostConnectSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostConnectSpec hostConnectSpec)
        {
            return (hostConnectSpec != null && this.HostName == hostConnectSpec.HostName && ((this.Port == null && hostConnectSpec.Port == null) || (this.Port != null && this.Port.Equals(hostConnectSpec.Port))) && this.SslThumbprint == hostConnectSpec.SslThumbprint && this.UserName == hostConnectSpec.UserName && this.Password == hostConnectSpec.Password && ((this.VmFolder == null && hostConnectSpec.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(hostConnectSpec.VmFolder))) && this.Force == hostConnectSpec.Force && this.VimAccountName == hostConnectSpec.VimAccountName && this.VimAccountPassword == hostConnectSpec.VimAccountPassword && this.ManagementIp == hostConnectSpec.ManagementIp && ((this.LockdownMode == null && hostConnectSpec.LockdownMode == null) || (this.LockdownMode != null && this.LockdownMode.Equals(hostConnectSpec.LockdownMode))) && ((this.HostGateway == null && hostConnectSpec.HostGateway == null) || (this.HostGateway != null && this.HostGateway.Equals(hostConnectSpec.HostGateway))) && ((this.LinkedView == null && hostConnectSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostConnectSpec.LinkedView))));
        }

        public override bool Equals(object hostConnectSpec)
        {
            return Equals(hostConnectSpec as HostConnectSpec);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Port + "_" + SslThumbprint + "_" + UserName + "_" + Password + "_" + VmFolder + "_" + Force + "_" + VimAccountName + "_" + VimAccountPassword + "_" + ManagementIp + "_" + LockdownMode + "_" + HostGateway + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostConnectSpec_LinkedView : IEquatable<HostConnectSpec_LinkedView>
    {
        public Folder VmFolder { get; set; }

        public bool Equals(HostConnectSpec_LinkedView hostConnectSpec_LinkedView)
        {
            return (hostConnectSpec_LinkedView != null && ((this.VmFolder == null && hostConnectSpec_LinkedView.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(hostConnectSpec_LinkedView.VmFolder))));
        }

        public override bool Equals(object hostConnectSpec_LinkedView)
        {
            return Equals(hostConnectSpec_LinkedView as HostConnectSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmFolder).GetHashCode();
        }
    }

    public class HostCpuIdInfo : DynamicData, IEquatable<HostCpuIdInfo>
    {
        public int Level { get; set; }

        public string Vendor { get; set; }

        public string Eax { get; set; }

        public string Ebx { get; set; }

        public string Ecx { get; set; }

        public string Edx { get; set; }

        public bool Equals(HostCpuIdInfo hostCpuIdInfo)
        {
            return (hostCpuIdInfo != null && this.Level == hostCpuIdInfo.Level && this.Vendor == hostCpuIdInfo.Vendor && this.Eax == hostCpuIdInfo.Eax && this.Ebx == hostCpuIdInfo.Ebx && this.Ecx == hostCpuIdInfo.Ecx && this.Edx == hostCpuIdInfo.Edx);
        }

        public override bool Equals(object hostCpuIdInfo)
        {
            return Equals(hostCpuIdInfo as HostCpuIdInfo);
        }

        public override int GetHashCode()
        {
            return (Level + "_" + Vendor + "_" + Eax + "_" + Ebx + "_" + Ecx + "_" + Edx).GetHashCode();
        }
    }

    public class HostCpuInfo : DynamicData, IEquatable<HostCpuInfo>
    {
        public short NumCpuPackages { get; set; }

        public short NumCpuCores { get; set; }

        public short NumCpuThreads { get; set; }

        public long Hz { get; set; }

        public bool Equals(HostCpuInfo hostCpuInfo)
        {
            return (hostCpuInfo != null && this.NumCpuPackages == hostCpuInfo.NumCpuPackages && this.NumCpuCores == hostCpuInfo.NumCpuCores && this.NumCpuThreads == hostCpuInfo.NumCpuThreads && this.Hz == hostCpuInfo.Hz);
        }

        public override bool Equals(object hostCpuInfo)
        {
            return Equals(hostCpuInfo as HostCpuInfo);
        }

        public override int GetHashCode()
        {
            return (NumCpuPackages + "_" + NumCpuCores + "_" + NumCpuThreads + "_" + Hz).GetHashCode();
        }
    }

    public class HostCpuPackage : DynamicData, IEquatable<HostCpuPackage>
    {
        public short Index { get; set; }

        public string Vendor { get; set; }

        public long Hz { get; set; }

        public long BusHz { get; set; }

        public string Description { get; set; }

        public short[] ThreadId { get; set; }

        public HostCpuIdInfo[] CpuFeature { get; set; }

        public bool Equals(HostCpuPackage hostCpuPackage)
        {
            return (hostCpuPackage != null && this.Index == hostCpuPackage.Index && this.Vendor == hostCpuPackage.Vendor && this.Hz == hostCpuPackage.Hz && this.BusHz == hostCpuPackage.BusHz && this.Description == hostCpuPackage.Description && ((this.ThreadId == null && hostCpuPackage.ThreadId == null) || (this.ThreadId != null && hostCpuPackage.ThreadId != null && Enumerable.SequenceEqual(this.ThreadId, hostCpuPackage.ThreadId))) && ((this.CpuFeature == null && hostCpuPackage.CpuFeature == null) || (this.CpuFeature != null && hostCpuPackage.CpuFeature != null && Enumerable.SequenceEqual(this.CpuFeature, hostCpuPackage.CpuFeature))));
        }

        public override bool Equals(object hostCpuPackage)
        {
            return Equals(hostCpuPackage as HostCpuPackage);
        }

        public override int GetHashCode()
        {
            return (Index + "_" + Vendor + "_" + Hz + "_" + BusHz + "_" + Description + "_" + ThreadId + "_" + CpuFeature).GetHashCode();
        }
    }

    public class HostCpuPowerManagementInfo : DynamicData, IEquatable<HostCpuPowerManagementInfo>
    {
        public string CurrentPolicy { get; set; }

        public string HardwareSupport { get; set; }

        public bool Equals(HostCpuPowerManagementInfo hostCpuPowerManagementInfo)
        {
            return (hostCpuPowerManagementInfo != null && this.CurrentPolicy == hostCpuPowerManagementInfo.CurrentPolicy && this.HardwareSupport == hostCpuPowerManagementInfo.HardwareSupport);
        }

        public override bool Equals(object hostCpuPowerManagementInfo)
        {
            return Equals(hostCpuPowerManagementInfo as HostCpuPowerManagementInfo);
        }

        public override int GetHashCode()
        {
            return (CurrentPolicy + "_" + HardwareSupport).GetHashCode();
        }
    }

    public class HostCpuSchedulerSystem : ExtensibleManagedObject, IEquatable<HostCpuSchedulerSystem>
    {
        public HostHyperThreadScheduleInfo HyperthreadInfo { get; set; }

        public void EnableHyperThreading()
        {
        }

        public void DisableHyperThreading()
        {
        }

        public bool Equals(HostCpuSchedulerSystem hostCpuSchedulerSystem)
        {
            return (hostCpuSchedulerSystem != null && ((this.HyperthreadInfo == null && hostCpuSchedulerSystem.HyperthreadInfo == null) || (this.HyperthreadInfo != null && this.HyperthreadInfo.Equals(hostCpuSchedulerSystem.HyperthreadInfo))));
        }

        public override bool Equals(object hostCpuSchedulerSystem)
        {
            return Equals(hostCpuSchedulerSystem as HostCpuSchedulerSystem);
        }

        public override int GetHashCode()
        {
            return (HyperthreadInfo).GetHashCode();
        }
    }

    public class HostDasDisabledEvent : HostEvent, IEquatable<HostDasDisabledEvent>
    {
        public bool Equals(HostDasDisabledEvent hostDasDisabledEvent)
        {
            return (hostDasDisabledEvent != null && base.Equals(hostDasDisabledEvent));
        }

        public override bool Equals(object hostDasDisabledEvent)
        {
            return Equals(hostDasDisabledEvent as HostDasDisabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDasDisablingEvent : HostEvent, IEquatable<HostDasDisablingEvent>
    {
        public bool Equals(HostDasDisablingEvent hostDasDisablingEvent)
        {
            return (hostDasDisablingEvent != null && base.Equals(hostDasDisablingEvent));
        }

        public override bool Equals(object hostDasDisablingEvent)
        {
            return Equals(hostDasDisablingEvent as HostDasDisablingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDasEnabledEvent : HostEvent, IEquatable<HostDasEnabledEvent>
    {
        public bool Equals(HostDasEnabledEvent hostDasEnabledEvent)
        {
            return (hostDasEnabledEvent != null && base.Equals(hostDasEnabledEvent));
        }

        public override bool Equals(object hostDasEnabledEvent)
        {
            return Equals(hostDasEnabledEvent as HostDasEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDasEnablingEvent : HostEvent, IEquatable<HostDasEnablingEvent>
    {
        public bool Equals(HostDasEnablingEvent hostDasEnablingEvent)
        {
            return (hostDasEnablingEvent != null && base.Equals(hostDasEnablingEvent));
        }

        public override bool Equals(object hostDasEnablingEvent)
        {
            return Equals(hostDasEnablingEvent as HostDasEnablingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDasErrorEvent : HostEvent, IEquatable<HostDasErrorEvent>
    {
        public string Message { get; set; }

        public string Reason { get; set; }

        public bool Equals(HostDasErrorEvent hostDasErrorEvent)
        {
            return (hostDasErrorEvent != null && this.Message == hostDasErrorEvent.Message && this.Reason == hostDasErrorEvent.Reason);
        }

        public override bool Equals(object hostDasErrorEvent)
        {
            return Equals(hostDasErrorEvent as HostDasErrorEvent);
        }

        public override int GetHashCode()
        {
            return (Message + "_" + Reason).GetHashCode();
        }
    }

    public class HostDasEvent : HostEvent, IEquatable<HostDasEvent>
    {
        public bool Equals(HostDasEvent hostDasEvent)
        {
            return (hostDasEvent != null && base.Equals(hostDasEvent));
        }

        public override bool Equals(object hostDasEvent)
        {
            return Equals(hostDasEvent as HostDasEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDasOkEvent : HostEvent, IEquatable<HostDasOkEvent>
    {
        public bool Equals(HostDasOkEvent hostDasOkEvent)
        {
            return (hostDasOkEvent != null && base.Equals(hostDasOkEvent));
        }

        public override bool Equals(object hostDasOkEvent)
        {
            return Equals(hostDasOkEvent as HostDasOkEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDatastoreBrowser : ViewBase, IEquatable<HostDatastoreBrowser>
    {
        public ManagedObjectReference[] Datastore { get; set; }

        public FileQuery[] SupportedType { get; set; }

        public HostDatastoreBrowser_LinkedView LinkedView { get; set; }

        public ManagedObjectReference SearchDatastore_Task(string datastorePath, HostDatastoreBrowserSearchSpec searchSpec)
        {
            return default(ManagedObjectReference);
        }

        public HostDatastoreBrowserSearchResults SearchDatastore(string datastorePath, HostDatastoreBrowserSearchSpec searchSpec)
        {
            return default(HostDatastoreBrowserSearchResults);
        }

        public ManagedObjectReference SearchDatastoreSubFolders_Task(string datastorePath, HostDatastoreBrowserSearchSpec searchSpec)
        {
            return default(ManagedObjectReference);
        }

        public HostDatastoreBrowserSearchResults[] SearchDatastoreSubFolders(string datastorePath, HostDatastoreBrowserSearchSpec searchSpec)
        {
            return default(HostDatastoreBrowserSearchResults[]);
        }

        public void DeleteFile(string datastorePath)
        {
        }

        public bool Equals(HostDatastoreBrowser hostDatastoreBrowser)
        {
            return (hostDatastoreBrowser != null && ((this.Datastore == null && hostDatastoreBrowser.Datastore == null) || (this.Datastore != null && hostDatastoreBrowser.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostDatastoreBrowser.Datastore))) && ((this.SupportedType == null && hostDatastoreBrowser.SupportedType == null) || (this.SupportedType != null && hostDatastoreBrowser.SupportedType != null && Enumerable.SequenceEqual(this.SupportedType, hostDatastoreBrowser.SupportedType))) && ((this.LinkedView == null && hostDatastoreBrowser.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostDatastoreBrowser.LinkedView))));
        }

        public override bool Equals(object hostDatastoreBrowser)
        {
            return Equals(hostDatastoreBrowser as HostDatastoreBrowser);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + SupportedType + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostDatastoreBrowser_LinkedView : IEquatable<HostDatastoreBrowser_LinkedView>
    {
        public Datastore[] Datastore { get; set; }

        public bool Equals(HostDatastoreBrowser_LinkedView hostDatastoreBrowser_LinkedView)
        {
            return (hostDatastoreBrowser_LinkedView != null && ((this.Datastore == null && hostDatastoreBrowser_LinkedView.Datastore == null) || (this.Datastore != null && hostDatastoreBrowser_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostDatastoreBrowser_LinkedView.Datastore))));
        }

        public override bool Equals(object hostDatastoreBrowser_LinkedView)
        {
            return Equals(hostDatastoreBrowser_LinkedView as HostDatastoreBrowser_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class HostDatastoreBrowserSearchResults : DynamicData, IEquatable<HostDatastoreBrowserSearchResults>
    {
        public ManagedObjectReference Datastore { get; set; }

        public string FolderPath { get; set; }

        public FileInfo[] File { get; set; }

        public HostDatastoreBrowserSearchResults_LinkedView LinkedView { get; set; }

        public bool Equals(HostDatastoreBrowserSearchResults hostDatastoreBrowserSearchResults)
        {
            return (hostDatastoreBrowserSearchResults != null && ((this.Datastore == null && hostDatastoreBrowserSearchResults.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(hostDatastoreBrowserSearchResults.Datastore))) && this.FolderPath == hostDatastoreBrowserSearchResults.FolderPath && ((this.File == null && hostDatastoreBrowserSearchResults.File == null) || (this.File != null && hostDatastoreBrowserSearchResults.File != null && Enumerable.SequenceEqual(this.File, hostDatastoreBrowserSearchResults.File))) && ((this.LinkedView == null && hostDatastoreBrowserSearchResults.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostDatastoreBrowserSearchResults.LinkedView))));
        }

        public override bool Equals(object hostDatastoreBrowserSearchResults)
        {
            return Equals(hostDatastoreBrowserSearchResults as HostDatastoreBrowserSearchResults);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + FolderPath + "_" + File + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostDatastoreBrowserSearchResults_LinkedView : IEquatable<HostDatastoreBrowserSearchResults_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(HostDatastoreBrowserSearchResults_LinkedView hostDatastoreBrowserSearchResults_LinkedView)
        {
            return (hostDatastoreBrowserSearchResults_LinkedView != null && ((this.Datastore == null && hostDatastoreBrowserSearchResults_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(hostDatastoreBrowserSearchResults_LinkedView.Datastore))));
        }

        public override bool Equals(object hostDatastoreBrowserSearchResults_LinkedView)
        {
            return Equals(hostDatastoreBrowserSearchResults_LinkedView as HostDatastoreBrowserSearchResults_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class HostDatastoreBrowserSearchSpec : DynamicData, IEquatable<HostDatastoreBrowserSearchSpec>
    {
        public FileQuery[] Query { get; set; }

        public FileQueryFlags Details { get; set; }

        public bool? SearchCaseInsensitive { get; set; }

        public string[] MatchPattern { get; set; }

        public bool? SortFoldersFirst { get; set; }

        public bool Equals(HostDatastoreBrowserSearchSpec hostDatastoreBrowserSearchSpec)
        {
            return (hostDatastoreBrowserSearchSpec != null && ((this.Query == null && hostDatastoreBrowserSearchSpec.Query == null) || (this.Query != null && hostDatastoreBrowserSearchSpec.Query != null && Enumerable.SequenceEqual(this.Query, hostDatastoreBrowserSearchSpec.Query))) && ((this.Details == null && hostDatastoreBrowserSearchSpec.Details == null) || (this.Details != null && this.Details.Equals(hostDatastoreBrowserSearchSpec.Details))) && ((this.SearchCaseInsensitive == null && hostDatastoreBrowserSearchSpec.SearchCaseInsensitive == null) || (this.SearchCaseInsensitive != null && this.SearchCaseInsensitive.Equals(hostDatastoreBrowserSearchSpec.SearchCaseInsensitive))) && ((this.MatchPattern == null && hostDatastoreBrowserSearchSpec.MatchPattern == null) || (this.MatchPattern != null && hostDatastoreBrowserSearchSpec.MatchPattern != null && Enumerable.SequenceEqual(this.MatchPattern, hostDatastoreBrowserSearchSpec.MatchPattern))) && ((this.SortFoldersFirst == null && hostDatastoreBrowserSearchSpec.SortFoldersFirst == null) || (this.SortFoldersFirst != null && this.SortFoldersFirst.Equals(hostDatastoreBrowserSearchSpec.SortFoldersFirst))));
        }

        public override bool Equals(object hostDatastoreBrowserSearchSpec)
        {
            return Equals(hostDatastoreBrowserSearchSpec as HostDatastoreBrowserSearchSpec);
        }

        public override int GetHashCode()
        {
            return (Query + "_" + Details + "_" + SearchCaseInsensitive + "_" + MatchPattern + "_" + SortFoldersFirst).GetHashCode();
        }
    }

    public class HostDatastoreConnectInfo : DynamicData, IEquatable<HostDatastoreConnectInfo>
    {
        public DatastoreSummary Summary { get; set; }

        public bool Equals(HostDatastoreConnectInfo hostDatastoreConnectInfo)
        {
            return (hostDatastoreConnectInfo != null && ((this.Summary == null && hostDatastoreConnectInfo.Summary == null) || (this.Summary != null && this.Summary.Equals(hostDatastoreConnectInfo.Summary))));
        }

        public override bool Equals(object hostDatastoreConnectInfo)
        {
            return Equals(hostDatastoreConnectInfo as HostDatastoreConnectInfo);
        }

        public override int GetHashCode()
        {
            return (Summary).GetHashCode();
        }
    }

    public class HostDatastoreExistsConnectInfo : HostDatastoreConnectInfo, IEquatable<HostDatastoreExistsConnectInfo>
    {
        public string NewDatastoreName { get; set; }

        public bool Equals(HostDatastoreExistsConnectInfo hostDatastoreExistsConnectInfo)
        {
            return (hostDatastoreExistsConnectInfo != null && this.NewDatastoreName == hostDatastoreExistsConnectInfo.NewDatastoreName);
        }

        public override bool Equals(object hostDatastoreExistsConnectInfo)
        {
            return Equals(hostDatastoreExistsConnectInfo as HostDatastoreExistsConnectInfo);
        }

        public override int GetHashCode()
        {
            return (NewDatastoreName).GetHashCode();
        }
    }

    public class HostDatastoreNameConflictConnectInfo : HostDatastoreConnectInfo, IEquatable<HostDatastoreNameConflictConnectInfo>
    {
        public string NewDatastoreName { get; set; }

        public bool Equals(HostDatastoreNameConflictConnectInfo hostDatastoreNameConflictConnectInfo)
        {
            return (hostDatastoreNameConflictConnectInfo != null && this.NewDatastoreName == hostDatastoreNameConflictConnectInfo.NewDatastoreName);
        }

        public override bool Equals(object hostDatastoreNameConflictConnectInfo)
        {
            return Equals(hostDatastoreNameConflictConnectInfo as HostDatastoreNameConflictConnectInfo);
        }

        public override int GetHashCode()
        {
            return (NewDatastoreName).GetHashCode();
        }
    }

    public class HostDatastoreSystem : ViewBase, IEquatable<HostDatastoreSystem>
    {
        public ManagedObjectReference[] Datastore { get; set; }

        public HostDatastoreSystemCapabilities Capabilities { get; set; }

        public HostDatastoreSystem_LinkedView LinkedView { get; set; }

        public void UpdateLocalSwapDatastore(ManagedObjectReference datastore)
        {
        }

        public HostScsiDisk[] QueryAvailableDisksForVmfs(ManagedObjectReference datastore)
        {
            return default(HostScsiDisk[]);
        }

        public VmfsDatastoreOption[] QueryVmfsDatastoreCreateOptions(string devicePath, int? vmfsMajorVersion)
        {
            return default(VmfsDatastoreOption[]);
        }

        public ManagedObjectReference CreateVmfsDatastore(VmfsDatastoreCreateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VmfsDatastoreOption[] QueryVmfsDatastoreExtendOptions(ManagedObjectReference datastore, string devicePath, bool? suppressExpandCandidates)
        {
            return default(VmfsDatastoreOption[]);
        }

        public VmfsDatastoreOption[] QueryVmfsDatastoreExpandOptions(ManagedObjectReference datastore)
        {
            return default(VmfsDatastoreOption[]);
        }

        public ManagedObjectReference ExtendVmfsDatastore(ManagedObjectReference datastore, VmfsDatastoreExtendSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference ExpandVmfsDatastore(ManagedObjectReference datastore, VmfsDatastoreExpandSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateNasDatastore(HostNasVolumeSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateLocalDatastore(string name, string path)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateVvolDatastore(HostDatastoreSystemVvolDatastoreSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void RemoveDatastore(ManagedObjectReference datastore)
        {
        }

        public ManagedObjectReference RemoveDatastoreEx_Task(ManagedObjectReference[] datastore)
        {
            return default(ManagedObjectReference);
        }

        public HostDatastoreSystemDatastoreResult[] RemoveDatastoreEx(ManagedObjectReference[] datastore)
        {
            return default(HostDatastoreSystemDatastoreResult[]);
        }

        public void ConfigureDatastorePrincipal(string userName, string password)
        {
        }

        public HostUnresolvedVmfsVolume[] QueryUnresolvedVmfsVolumes()
        {
            return default(HostUnresolvedVmfsVolume[]);
        }

        public ManagedObjectReference ResignatureUnresolvedVmfsVolume_Task(HostUnresolvedVmfsResignatureSpec resolutionSpec)
        {
            return default(ManagedObjectReference);
        }

        public HostResignatureRescanResult ResignatureUnresolvedVmfsVolume(HostUnresolvedVmfsResignatureSpec resolutionSpec)
        {
            return default(HostResignatureRescanResult);
        }

        public bool Equals(HostDatastoreSystem hostDatastoreSystem)
        {
            return (hostDatastoreSystem != null && ((this.Datastore == null && hostDatastoreSystem.Datastore == null) || (this.Datastore != null && hostDatastoreSystem.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostDatastoreSystem.Datastore))) && ((this.Capabilities == null && hostDatastoreSystem.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(hostDatastoreSystem.Capabilities))) && ((this.LinkedView == null && hostDatastoreSystem.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostDatastoreSystem.LinkedView))));
        }

        public override bool Equals(object hostDatastoreSystem)
        {
            return Equals(hostDatastoreSystem as HostDatastoreSystem);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Capabilities + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostDatastoreSystem_LinkedView : IEquatable<HostDatastoreSystem_LinkedView>
    {
        public Datastore[] Datastore { get; set; }

        public bool Equals(HostDatastoreSystem_LinkedView hostDatastoreSystem_LinkedView)
        {
            return (hostDatastoreSystem_LinkedView != null && ((this.Datastore == null && hostDatastoreSystem_LinkedView.Datastore == null) || (this.Datastore != null && hostDatastoreSystem_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostDatastoreSystem_LinkedView.Datastore))));
        }

        public override bool Equals(object hostDatastoreSystem_LinkedView)
        {
            return Equals(hostDatastoreSystem_LinkedView as HostDatastoreSystem_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class HostDatastoreSystemCapabilities : DynamicData, IEquatable<HostDatastoreSystemCapabilities>
    {
        public bool NfsMountCreationRequired { get; set; }

        public bool NfsMountCreationSupported { get; set; }

        public bool LocalDatastoreSupported { get; set; }

        public bool VmfsExtentExpansionSupported { get; set; }

        public bool Equals(HostDatastoreSystemCapabilities hostDatastoreSystemCapabilities)
        {
            return (hostDatastoreSystemCapabilities != null && this.NfsMountCreationRequired == hostDatastoreSystemCapabilities.NfsMountCreationRequired && this.NfsMountCreationSupported == hostDatastoreSystemCapabilities.NfsMountCreationSupported && this.LocalDatastoreSupported == hostDatastoreSystemCapabilities.LocalDatastoreSupported && this.VmfsExtentExpansionSupported == hostDatastoreSystemCapabilities.VmfsExtentExpansionSupported);
        }

        public override bool Equals(object hostDatastoreSystemCapabilities)
        {
            return Equals(hostDatastoreSystemCapabilities as HostDatastoreSystemCapabilities);
        }

        public override int GetHashCode()
        {
            return (NfsMountCreationRequired + "_" + NfsMountCreationSupported + "_" + LocalDatastoreSupported + "_" + VmfsExtentExpansionSupported).GetHashCode();
        }
    }

    public class HostDatastoreSystemDatastoreResult : DynamicData, IEquatable<HostDatastoreSystemDatastoreResult>
    {
        public ManagedObjectReference Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public HostDatastoreSystemDatastoreResult_LinkedView LinkedView { get; set; }

        public bool Equals(HostDatastoreSystemDatastoreResult hostDatastoreSystemDatastoreResult)
        {
            return (hostDatastoreSystemDatastoreResult != null && ((this.Key == null && hostDatastoreSystemDatastoreResult.Key == null) || (this.Key != null && this.Key.Equals(hostDatastoreSystemDatastoreResult.Key))) && ((this.Fault == null && hostDatastoreSystemDatastoreResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostDatastoreSystemDatastoreResult.Fault))) && ((this.LinkedView == null && hostDatastoreSystemDatastoreResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostDatastoreSystemDatastoreResult.LinkedView))));
        }

        public override bool Equals(object hostDatastoreSystemDatastoreResult)
        {
            return Equals(hostDatastoreSystemDatastoreResult as HostDatastoreSystemDatastoreResult);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostDatastoreSystemDatastoreResult_LinkedView : IEquatable<HostDatastoreSystemDatastoreResult_LinkedView>
    {
        public Datastore Key { get; set; }

        public bool Equals(HostDatastoreSystemDatastoreResult_LinkedView hostDatastoreSystemDatastoreResult_LinkedView)
        {
            return (hostDatastoreSystemDatastoreResult_LinkedView != null && ((this.Key == null && hostDatastoreSystemDatastoreResult_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(hostDatastoreSystemDatastoreResult_LinkedView.Key))));
        }

        public override bool Equals(object hostDatastoreSystemDatastoreResult_LinkedView)
        {
            return Equals(hostDatastoreSystemDatastoreResult_LinkedView as HostDatastoreSystemDatastoreResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class HostDatastoreSystemVvolDatastoreSpec : DynamicData, IEquatable<HostDatastoreSystemVvolDatastoreSpec>
    {
        public string Name { get; set; }

        public string ScId { get; set; }

        public bool Equals(HostDatastoreSystemVvolDatastoreSpec hostDatastoreSystemVvolDatastoreSpec)
        {
            return (hostDatastoreSystemVvolDatastoreSpec != null && this.Name == hostDatastoreSystemVvolDatastoreSpec.Name && this.ScId == hostDatastoreSystemVvolDatastoreSpec.ScId);
        }

        public override bool Equals(object hostDatastoreSystemVvolDatastoreSpec)
        {
            return Equals(hostDatastoreSystemVvolDatastoreSpec as HostDatastoreSystemVvolDatastoreSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + ScId).GetHashCode();
        }
    }

    public class HostDateTimeConfig : DynamicData, IEquatable<HostDateTimeConfig>
    {
        public string TimeZone { get; set; }

        public HostNtpConfig NtpConfig { get; set; }

        public bool Equals(HostDateTimeConfig hostDateTimeConfig)
        {
            return (hostDateTimeConfig != null && this.TimeZone == hostDateTimeConfig.TimeZone && ((this.NtpConfig == null && hostDateTimeConfig.NtpConfig == null) || (this.NtpConfig != null && this.NtpConfig.Equals(hostDateTimeConfig.NtpConfig))));
        }

        public override bool Equals(object hostDateTimeConfig)
        {
            return Equals(hostDateTimeConfig as HostDateTimeConfig);
        }

        public override int GetHashCode()
        {
            return (TimeZone + "_" + NtpConfig).GetHashCode();
        }
    }

    public class HostDateTimeInfo : DynamicData, IEquatable<HostDateTimeInfo>
    {
        public HostDateTimeSystemTimeZone TimeZone { get; set; }

        public HostNtpConfig NtpConfig { get; set; }

        public bool Equals(HostDateTimeInfo hostDateTimeInfo)
        {
            return (hostDateTimeInfo != null && ((this.TimeZone == null && hostDateTimeInfo.TimeZone == null) || (this.TimeZone != null && this.TimeZone.Equals(hostDateTimeInfo.TimeZone))) && ((this.NtpConfig == null && hostDateTimeInfo.NtpConfig == null) || (this.NtpConfig != null && this.NtpConfig.Equals(hostDateTimeInfo.NtpConfig))));
        }

        public override bool Equals(object hostDateTimeInfo)
        {
            return Equals(hostDateTimeInfo as HostDateTimeInfo);
        }

        public override int GetHashCode()
        {
            return (TimeZone + "_" + NtpConfig).GetHashCode();
        }
    }

    public class HostDateTimeSystem : ViewBase, IEquatable<HostDateTimeSystem>
    {
        public HostDateTimeInfo DateTimeInfo { get; set; }

        public void UpdateDateTimeConfig(HostDateTimeConfig config)
        {
        }

        public HostDateTimeSystemTimeZone[] QueryAvailableTimeZones()
        {
            return default(HostDateTimeSystemTimeZone[]);
        }

        public DateTime QueryDateTime()
        {
            return default(DateTime);
        }

        public void UpdateDateTime(DateTime dateTime)
        {
        }

        public void RefreshDateTimeSystem()
        {
        }

        public bool Equals(HostDateTimeSystem hostDateTimeSystem)
        {
            return (hostDateTimeSystem != null && ((this.DateTimeInfo == null && hostDateTimeSystem.DateTimeInfo == null) || (this.DateTimeInfo != null && this.DateTimeInfo.Equals(hostDateTimeSystem.DateTimeInfo))));
        }

        public override bool Equals(object hostDateTimeSystem)
        {
            return Equals(hostDateTimeSystem as HostDateTimeSystem);
        }

        public override int GetHashCode()
        {
            return (DateTimeInfo).GetHashCode();
        }
    }

    public class HostDateTimeSystemTimeZone : DynamicData, IEquatable<HostDateTimeSystemTimeZone>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int GmtOffset { get; set; }

        public bool Equals(HostDateTimeSystemTimeZone hostDateTimeSystemTimeZone)
        {
            return (hostDateTimeSystemTimeZone != null && this.Key == hostDateTimeSystemTimeZone.Key && this.Name == hostDateTimeSystemTimeZone.Name && this.Description == hostDateTimeSystemTimeZone.Description && this.GmtOffset == hostDateTimeSystemTimeZone.GmtOffset);
        }

        public override bool Equals(object hostDateTimeSystemTimeZone)
        {
            return Equals(hostDateTimeSystemTimeZone as HostDateTimeSystemTimeZone);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Description + "_" + GmtOffset).GetHashCode();
        }
    }

    public class HostDeploymentInfo : DynamicData, IEquatable<HostDeploymentInfo>
    {
        public bool? BootedFromStatelessCache { get; set; }

        public bool Equals(HostDeploymentInfo hostDeploymentInfo)
        {
            return (hostDeploymentInfo != null && ((this.BootedFromStatelessCache == null && hostDeploymentInfo.BootedFromStatelessCache == null) || (this.BootedFromStatelessCache != null && this.BootedFromStatelessCache.Equals(hostDeploymentInfo.BootedFromStatelessCache))));
        }

        public override bool Equals(object hostDeploymentInfo)
        {
            return Equals(hostDeploymentInfo as HostDeploymentInfo);
        }

        public override int GetHashCode()
        {
            return (BootedFromStatelessCache).GetHashCode();
        }
    }

    public class HostDevice : DynamicData, IEquatable<HostDevice>
    {
        public string DeviceName { get; set; }

        public string DeviceType { get; set; }

        public bool Equals(HostDevice hostDevice)
        {
            return (hostDevice != null && this.DeviceName == hostDevice.DeviceName && this.DeviceType == hostDevice.DeviceType);
        }

        public override bool Equals(object hostDevice)
        {
            return Equals(hostDevice as HostDevice);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + DeviceType).GetHashCode();
        }
    }

    public class HostDhcpService : DynamicData, IEquatable<HostDhcpService>
    {
        public string Key { get; set; }

        public HostDhcpServiceSpec Spec { get; set; }

        public bool Equals(HostDhcpService hostDhcpService)
        {
            return (hostDhcpService != null && this.Key == hostDhcpService.Key && ((this.Spec == null && hostDhcpService.Spec == null) || (this.Spec != null && this.Spec.Equals(hostDhcpService.Spec))));
        }

        public override bool Equals(object hostDhcpService)
        {
            return Equals(hostDhcpService as HostDhcpService);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Spec).GetHashCode();
        }
    }

    public class HostDhcpServiceConfig : DynamicData, IEquatable<HostDhcpServiceConfig>
    {
        public string ChangeOperation { get; set; }

        public string Key { get; set; }

        public HostDhcpServiceSpec Spec { get; set; }

        public bool Equals(HostDhcpServiceConfig hostDhcpServiceConfig)
        {
            return (hostDhcpServiceConfig != null && this.ChangeOperation == hostDhcpServiceConfig.ChangeOperation && this.Key == hostDhcpServiceConfig.Key && ((this.Spec == null && hostDhcpServiceConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostDhcpServiceConfig.Spec))));
        }

        public override bool Equals(object hostDhcpServiceConfig)
        {
            return Equals(hostDhcpServiceConfig as HostDhcpServiceConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Key + "_" + Spec).GetHashCode();
        }
    }

    public class HostDhcpServiceSpec : DynamicData, IEquatable<HostDhcpServiceSpec>
    {
        public string VirtualSwitch { get; set; }

        public int DefaultLeaseDuration { get; set; }

        public string LeaseBeginIp { get; set; }

        public string LeaseEndIp { get; set; }

        public int MaxLeaseDuration { get; set; }

        public bool UnlimitedLease { get; set; }

        public string IpSubnetAddr { get; set; }

        public string IpSubnetMask { get; set; }

        public bool Equals(HostDhcpServiceSpec hostDhcpServiceSpec)
        {
            return (hostDhcpServiceSpec != null && this.VirtualSwitch == hostDhcpServiceSpec.VirtualSwitch && this.DefaultLeaseDuration == hostDhcpServiceSpec.DefaultLeaseDuration && this.LeaseBeginIp == hostDhcpServiceSpec.LeaseBeginIp && this.LeaseEndIp == hostDhcpServiceSpec.LeaseEndIp && this.MaxLeaseDuration == hostDhcpServiceSpec.MaxLeaseDuration && this.UnlimitedLease == hostDhcpServiceSpec.UnlimitedLease && this.IpSubnetAddr == hostDhcpServiceSpec.IpSubnetAddr && this.IpSubnetMask == hostDhcpServiceSpec.IpSubnetMask);
        }

        public override bool Equals(object hostDhcpServiceSpec)
        {
            return Equals(hostDhcpServiceSpec as HostDhcpServiceSpec);
        }

        public override int GetHashCode()
        {
            return (VirtualSwitch + "_" + DefaultLeaseDuration + "_" + LeaseBeginIp + "_" + LeaseEndIp + "_" + MaxLeaseDuration + "_" + UnlimitedLease + "_" + IpSubnetAddr + "_" + IpSubnetMask).GetHashCode();
        }
    }

    public class HostDiagnosticPartition : DynamicData, IEquatable<HostDiagnosticPartition>
    {
        public string StorageType { get; set; }

        public string DiagnosticType { get; set; }

        public int Slots { get; set; }

        public HostScsiDiskPartition Id { get; set; }

        public bool Equals(HostDiagnosticPartition hostDiagnosticPartition)
        {
            return (hostDiagnosticPartition != null && this.StorageType == hostDiagnosticPartition.StorageType && this.DiagnosticType == hostDiagnosticPartition.DiagnosticType && this.Slots == hostDiagnosticPartition.Slots && ((this.Id == null && hostDiagnosticPartition.Id == null) || (this.Id != null && this.Id.Equals(hostDiagnosticPartition.Id))));
        }

        public override bool Equals(object hostDiagnosticPartition)
        {
            return Equals(hostDiagnosticPartition as HostDiagnosticPartition);
        }

        public override int GetHashCode()
        {
            return (StorageType + "_" + DiagnosticType + "_" + Slots + "_" + Id).GetHashCode();
        }
    }

    public class HostDiagnosticPartitionCreateDescription : DynamicData, IEquatable<HostDiagnosticPartitionCreateDescription>
    {
        public HostDiskPartitionLayout Layout { get; set; }

        public string DiskUuid { get; set; }

        public HostDiagnosticPartitionCreateSpec Spec { get; set; }

        public bool Equals(HostDiagnosticPartitionCreateDescription hostDiagnosticPartitionCreateDescription)
        {
            return (hostDiagnosticPartitionCreateDescription != null && ((this.Layout == null && hostDiagnosticPartitionCreateDescription.Layout == null) || (this.Layout != null && this.Layout.Equals(hostDiagnosticPartitionCreateDescription.Layout))) && this.DiskUuid == hostDiagnosticPartitionCreateDescription.DiskUuid && ((this.Spec == null && hostDiagnosticPartitionCreateDescription.Spec == null) || (this.Spec != null && this.Spec.Equals(hostDiagnosticPartitionCreateDescription.Spec))));
        }

        public override bool Equals(object hostDiagnosticPartitionCreateDescription)
        {
            return Equals(hostDiagnosticPartitionCreateDescription as HostDiagnosticPartitionCreateDescription);
        }

        public override int GetHashCode()
        {
            return (Layout + "_" + DiskUuid + "_" + Spec).GetHashCode();
        }
    }

    public class HostDiagnosticPartitionCreateOption : DynamicData, IEquatable<HostDiagnosticPartitionCreateOption>
    {
        public string StorageType { get; set; }

        public string DiagnosticType { get; set; }

        public HostScsiDisk Disk { get; set; }

        public bool Equals(HostDiagnosticPartitionCreateOption hostDiagnosticPartitionCreateOption)
        {
            return (hostDiagnosticPartitionCreateOption != null && this.StorageType == hostDiagnosticPartitionCreateOption.StorageType && this.DiagnosticType == hostDiagnosticPartitionCreateOption.DiagnosticType && ((this.Disk == null && hostDiagnosticPartitionCreateOption.Disk == null) || (this.Disk != null && this.Disk.Equals(hostDiagnosticPartitionCreateOption.Disk))));
        }

        public override bool Equals(object hostDiagnosticPartitionCreateOption)
        {
            return Equals(hostDiagnosticPartitionCreateOption as HostDiagnosticPartitionCreateOption);
        }

        public override int GetHashCode()
        {
            return (StorageType + "_" + DiagnosticType + "_" + Disk).GetHashCode();
        }
    }

    public class HostDiagnosticPartitionCreateSpec : DynamicData, IEquatable<HostDiagnosticPartitionCreateSpec>
    {
        public string StorageType { get; set; }

        public string DiagnosticType { get; set; }

        public HostScsiDiskPartition Id { get; set; }

        public HostDiskPartitionSpec Partition { get; set; }

        public bool? Active { get; set; }

        public bool Equals(HostDiagnosticPartitionCreateSpec hostDiagnosticPartitionCreateSpec)
        {
            return (hostDiagnosticPartitionCreateSpec != null && this.StorageType == hostDiagnosticPartitionCreateSpec.StorageType && this.DiagnosticType == hostDiagnosticPartitionCreateSpec.DiagnosticType && ((this.Id == null && hostDiagnosticPartitionCreateSpec.Id == null) || (this.Id != null && this.Id.Equals(hostDiagnosticPartitionCreateSpec.Id))) && ((this.Partition == null && hostDiagnosticPartitionCreateSpec.Partition == null) || (this.Partition != null && this.Partition.Equals(hostDiagnosticPartitionCreateSpec.Partition))) && ((this.Active == null && hostDiagnosticPartitionCreateSpec.Active == null) || (this.Active != null && this.Active.Equals(hostDiagnosticPartitionCreateSpec.Active))));
        }

        public override bool Equals(object hostDiagnosticPartitionCreateSpec)
        {
            return Equals(hostDiagnosticPartitionCreateSpec as HostDiagnosticPartitionCreateSpec);
        }

        public override int GetHashCode()
        {
            return (StorageType + "_" + DiagnosticType + "_" + Id + "_" + Partition + "_" + Active).GetHashCode();
        }
    }

    public class HostDiagnosticSystem : ViewBase, IEquatable<HostDiagnosticSystem>
    {
        public HostDiagnosticPartition ActivePartition { get; set; }

        public HostDiagnosticPartition[] QueryAvailablePartition()
        {
            return default(HostDiagnosticPartition[]);
        }

        public void SelectActivePartition(HostScsiDiskPartition partition)
        {
        }

        public HostDiagnosticPartitionCreateOption[] QueryPartitionCreateOptions(string storageType, string diagnosticType)
        {
            return default(HostDiagnosticPartitionCreateOption[]);
        }

        public HostDiagnosticPartitionCreateDescription QueryPartitionCreateDesc(string diskUuid, string diagnosticType)
        {
            return default(HostDiagnosticPartitionCreateDescription);
        }

        public void CreateDiagnosticPartition(HostDiagnosticPartitionCreateSpec spec)
        {
        }

        public bool Equals(HostDiagnosticSystem hostDiagnosticSystem)
        {
            return (hostDiagnosticSystem != null && ((this.ActivePartition == null && hostDiagnosticSystem.ActivePartition == null) || (this.ActivePartition != null && this.ActivePartition.Equals(hostDiagnosticSystem.ActivePartition))));
        }

        public override bool Equals(object hostDiagnosticSystem)
        {
            return Equals(hostDiagnosticSystem as HostDiagnosticSystem);
        }

        public override int GetHashCode()
        {
            return (ActivePartition).GetHashCode();
        }
    }

    public class HostDigestInfo : DynamicData, IEquatable<HostDigestInfo>
    {
        public string DigestMethod { get; set; }

        public sbyte[] DigestValue { get; set; }

        public string ObjectName { get; set; }

        public bool Equals(HostDigestInfo hostDigestInfo)
        {
            return (hostDigestInfo != null && this.DigestMethod == hostDigestInfo.DigestMethod && ((this.DigestValue == null && hostDigestInfo.DigestValue == null) || (this.DigestValue != null && hostDigestInfo.DigestValue != null && Enumerable.SequenceEqual(this.DigestValue, hostDigestInfo.DigestValue))) && this.ObjectName == hostDigestInfo.ObjectName);
        }

        public override bool Equals(object hostDigestInfo)
        {
            return Equals(hostDigestInfo as HostDigestInfo);
        }

        public override int GetHashCode()
        {
            return (DigestMethod + "_" + DigestValue + "_" + ObjectName).GetHashCode();
        }
    }

    public class HostDirectoryStore : HostAuthenticationStore, IEquatable<HostDirectoryStore>
    {
        public bool Equals(HostDirectoryStore hostDirectoryStore)
        {
            return (hostDirectoryStore != null && base.Equals(hostDirectoryStore));
        }

        public override bool Equals(object hostDirectoryStore)
        {
            return Equals(hostDirectoryStore as HostDirectoryStore);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDirectoryStoreInfo : HostAuthenticationStoreInfo, IEquatable<HostDirectoryStoreInfo>
    {
        public bool Equals(HostDirectoryStoreInfo hostDirectoryStoreInfo)
        {
            return (hostDirectoryStoreInfo != null && base.Equals(hostDirectoryStoreInfo));
        }

        public override bool Equals(object hostDirectoryStoreInfo)
        {
            return Equals(hostDirectoryStoreInfo as HostDirectoryStoreInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDisconnectedEvent : HostEvent, IEquatable<HostDisconnectedEvent>
    {
        public string Reason { get; set; }

        public bool Equals(HostDisconnectedEvent hostDisconnectedEvent)
        {
            return (hostDisconnectedEvent != null && this.Reason == hostDisconnectedEvent.Reason);
        }

        public override bool Equals(object hostDisconnectedEvent)
        {
            return Equals(hostDisconnectedEvent as HostDisconnectedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class HostDiskConfigurationResult : DynamicData, IEquatable<HostDiskConfigurationResult>
    {
        public string DevicePath { get; set; }

        public bool? Success { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostDiskConfigurationResult hostDiskConfigurationResult)
        {
            return (hostDiskConfigurationResult != null && this.DevicePath == hostDiskConfigurationResult.DevicePath && ((this.Success == null && hostDiskConfigurationResult.Success == null) || (this.Success != null && this.Success.Equals(hostDiskConfigurationResult.Success))) && ((this.Fault == null && hostDiskConfigurationResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostDiskConfigurationResult.Fault))));
        }

        public override bool Equals(object hostDiskConfigurationResult)
        {
            return Equals(hostDiskConfigurationResult as HostDiskConfigurationResult);
        }

        public override int GetHashCode()
        {
            return (DevicePath + "_" + Success + "_" + Fault).GetHashCode();
        }
    }

    public class HostDiskDimensions : DynamicData, IEquatable<HostDiskDimensions>
    {
        public bool Equals(HostDiskDimensions hostDiskDimensions)
        {
            return (hostDiskDimensions != null && base.Equals(hostDiskDimensions));
        }

        public override bool Equals(object hostDiskDimensions)
        {
            return Equals(hostDiskDimensions as HostDiskDimensions);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostDiskDimensionsChs : DynamicData, IEquatable<HostDiskDimensionsChs>
    {
        public long Cylinder { get; set; }

        public int Head { get; set; }

        public int Sector { get; set; }

        public bool Equals(HostDiskDimensionsChs hostDiskDimensionsChs)
        {
            return (hostDiskDimensionsChs != null && this.Cylinder == hostDiskDimensionsChs.Cylinder && this.Head == hostDiskDimensionsChs.Head && this.Sector == hostDiskDimensionsChs.Sector);
        }

        public override bool Equals(object hostDiskDimensionsChs)
        {
            return Equals(hostDiskDimensionsChs as HostDiskDimensionsChs);
        }

        public override int GetHashCode()
        {
            return (Cylinder + "_" + Head + "_" + Sector).GetHashCode();
        }
    }

    public class HostDiskDimensionsLba : DynamicData, IEquatable<HostDiskDimensionsLba>
    {
        public int BlockSize { get; set; }

        public long Block { get; set; }

        public bool Equals(HostDiskDimensionsLba hostDiskDimensionsLba)
        {
            return (hostDiskDimensionsLba != null && this.BlockSize == hostDiskDimensionsLba.BlockSize && this.Block == hostDiskDimensionsLba.Block);
        }

        public override bool Equals(object hostDiskDimensionsLba)
        {
            return Equals(hostDiskDimensionsLba as HostDiskDimensionsLba);
        }

        public override int GetHashCode()
        {
            return (BlockSize + "_" + Block).GetHashCode();
        }
    }

    public class HostDiskMappingInfo : DynamicData, IEquatable<HostDiskMappingInfo>
    {
        public HostDiskMappingPartitionInfo PhysicalPartition { get; set; }

        public string Name { get; set; }

        public bool? Exclusive { get; set; }

        public bool Equals(HostDiskMappingInfo hostDiskMappingInfo)
        {
            return (hostDiskMappingInfo != null && ((this.PhysicalPartition == null && hostDiskMappingInfo.PhysicalPartition == null) || (this.PhysicalPartition != null && this.PhysicalPartition.Equals(hostDiskMappingInfo.PhysicalPartition))) && this.Name == hostDiskMappingInfo.Name && ((this.Exclusive == null && hostDiskMappingInfo.Exclusive == null) || (this.Exclusive != null && this.Exclusive.Equals(hostDiskMappingInfo.Exclusive))));
        }

        public override bool Equals(object hostDiskMappingInfo)
        {
            return Equals(hostDiskMappingInfo as HostDiskMappingInfo);
        }

        public override int GetHashCode()
        {
            return (PhysicalPartition + "_" + Name + "_" + Exclusive).GetHashCode();
        }
    }

    public class HostDiskMappingOption : DynamicData, IEquatable<HostDiskMappingOption>
    {
        public HostDiskMappingPartitionOption[] PhysicalPartition { get; set; }

        public string Name { get; set; }

        public bool Equals(HostDiskMappingOption hostDiskMappingOption)
        {
            return (hostDiskMappingOption != null && ((this.PhysicalPartition == null && hostDiskMappingOption.PhysicalPartition == null) || (this.PhysicalPartition != null && hostDiskMappingOption.PhysicalPartition != null && Enumerable.SequenceEqual(this.PhysicalPartition, hostDiskMappingOption.PhysicalPartition))) && this.Name == hostDiskMappingOption.Name);
        }

        public override bool Equals(object hostDiskMappingOption)
        {
            return Equals(hostDiskMappingOption as HostDiskMappingOption);
        }

        public override int GetHashCode()
        {
            return (PhysicalPartition + "_" + Name).GetHashCode();
        }
    }

    public class HostDiskMappingPartitionInfo : DynamicData, IEquatable<HostDiskMappingPartitionInfo>
    {
        public string Name { get; set; }

        public string FileSystem { get; set; }

        public long CapacityInKb { get; set; }

        public bool Equals(HostDiskMappingPartitionInfo hostDiskMappingPartitionInfo)
        {
            return (hostDiskMappingPartitionInfo != null && this.Name == hostDiskMappingPartitionInfo.Name && this.FileSystem == hostDiskMappingPartitionInfo.FileSystem && this.CapacityInKb == hostDiskMappingPartitionInfo.CapacityInKb);
        }

        public override bool Equals(object hostDiskMappingPartitionInfo)
        {
            return Equals(hostDiskMappingPartitionInfo as HostDiskMappingPartitionInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + FileSystem + "_" + CapacityInKb).GetHashCode();
        }
    }

    public class HostDiskMappingPartitionOption : DynamicData, IEquatable<HostDiskMappingPartitionOption>
    {
        public string Name { get; set; }

        public string FileSystem { get; set; }

        public long CapacityInKb { get; set; }

        public bool Equals(HostDiskMappingPartitionOption hostDiskMappingPartitionOption)
        {
            return (hostDiskMappingPartitionOption != null && this.Name == hostDiskMappingPartitionOption.Name && this.FileSystem == hostDiskMappingPartitionOption.FileSystem && this.CapacityInKb == hostDiskMappingPartitionOption.CapacityInKb);
        }

        public override bool Equals(object hostDiskMappingPartitionOption)
        {
            return Equals(hostDiskMappingPartitionOption as HostDiskMappingPartitionOption);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + FileSystem + "_" + CapacityInKb).GetHashCode();
        }
    }

    public class HostDiskPartitionAttributes : DynamicData, IEquatable<HostDiskPartitionAttributes>
    {
        public int Partition { get; set; }

        public long StartSector { get; set; }

        public long EndSector { get; set; }

        public string Type { get; set; }

        public string Guid { get; set; }

        public bool Logical { get; set; }

        public sbyte Attributes { get; set; }

        public long? PartitionAlignment { get; set; }

        public bool Equals(HostDiskPartitionAttributes hostDiskPartitionAttributes)
        {
            return (hostDiskPartitionAttributes != null && this.Partition == hostDiskPartitionAttributes.Partition && this.StartSector == hostDiskPartitionAttributes.StartSector && this.EndSector == hostDiskPartitionAttributes.EndSector && this.Type == hostDiskPartitionAttributes.Type && this.Guid == hostDiskPartitionAttributes.Guid && this.Logical == hostDiskPartitionAttributes.Logical && this.Attributes == hostDiskPartitionAttributes.Attributes && ((this.PartitionAlignment == null && hostDiskPartitionAttributes.PartitionAlignment == null) || (this.PartitionAlignment != null && this.PartitionAlignment.Equals(hostDiskPartitionAttributes.PartitionAlignment))));
        }

        public override bool Equals(object hostDiskPartitionAttributes)
        {
            return Equals(hostDiskPartitionAttributes as HostDiskPartitionAttributes);
        }

        public override int GetHashCode()
        {
            return (Partition + "_" + StartSector + "_" + EndSector + "_" + Type + "_" + Guid + "_" + Logical + "_" + Attributes + "_" + PartitionAlignment).GetHashCode();
        }
    }

    public class HostDiskPartitionBlockRange : DynamicData, IEquatable<HostDiskPartitionBlockRange>
    {
        public int? Partition { get; set; }

        public string Type { get; set; }

        public HostDiskDimensionsLba Start { get; set; }

        public HostDiskDimensionsLba End { get; set; }

        public bool Equals(HostDiskPartitionBlockRange hostDiskPartitionBlockRange)
        {
            return (hostDiskPartitionBlockRange != null && ((this.Partition == null && hostDiskPartitionBlockRange.Partition == null) || (this.Partition != null && this.Partition.Equals(hostDiskPartitionBlockRange.Partition))) && this.Type == hostDiskPartitionBlockRange.Type && ((this.Start == null && hostDiskPartitionBlockRange.Start == null) || (this.Start != null && this.Start.Equals(hostDiskPartitionBlockRange.Start))) && ((this.End == null && hostDiskPartitionBlockRange.End == null) || (this.End != null && this.End.Equals(hostDiskPartitionBlockRange.End))));
        }

        public override bool Equals(object hostDiskPartitionBlockRange)
        {
            return Equals(hostDiskPartitionBlockRange as HostDiskPartitionBlockRange);
        }

        public override int GetHashCode()
        {
            return (Partition + "_" + Type + "_" + Start + "_" + End).GetHashCode();
        }
    }

    public class HostDiskPartitionInfo : DynamicData, IEquatable<HostDiskPartitionInfo>
    {
        public string DeviceName { get; set; }

        public HostDiskPartitionSpec Spec { get; set; }

        public HostDiskPartitionLayout Layout { get; set; }

        public bool Equals(HostDiskPartitionInfo hostDiskPartitionInfo)
        {
            return (hostDiskPartitionInfo != null && this.DeviceName == hostDiskPartitionInfo.DeviceName && ((this.Spec == null && hostDiskPartitionInfo.Spec == null) || (this.Spec != null && this.Spec.Equals(hostDiskPartitionInfo.Spec))) && ((this.Layout == null && hostDiskPartitionInfo.Layout == null) || (this.Layout != null && this.Layout.Equals(hostDiskPartitionInfo.Layout))));
        }

        public override bool Equals(object hostDiskPartitionInfo)
        {
            return Equals(hostDiskPartitionInfo as HostDiskPartitionInfo);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + Spec + "_" + Layout).GetHashCode();
        }
    }

    public class HostDiskPartitionLayout : DynamicData, IEquatable<HostDiskPartitionLayout>
    {
        public HostDiskDimensionsLba Total { get; set; }

        public HostDiskPartitionBlockRange[] Partition { get; set; }

        public bool Equals(HostDiskPartitionLayout hostDiskPartitionLayout)
        {
            return (hostDiskPartitionLayout != null && ((this.Total == null && hostDiskPartitionLayout.Total == null) || (this.Total != null && this.Total.Equals(hostDiskPartitionLayout.Total))) && ((this.Partition == null && hostDiskPartitionLayout.Partition == null) || (this.Partition != null && hostDiskPartitionLayout.Partition != null && Enumerable.SequenceEqual(this.Partition, hostDiskPartitionLayout.Partition))));
        }

        public override bool Equals(object hostDiskPartitionLayout)
        {
            return Equals(hostDiskPartitionLayout as HostDiskPartitionLayout);
        }

        public override int GetHashCode()
        {
            return (Total + "_" + Partition).GetHashCode();
        }
    }

    public class HostDiskPartitionSpec : DynamicData, IEquatable<HostDiskPartitionSpec>
    {
        public string PartitionFormat { get; set; }

        public HostDiskDimensionsChs Chs { get; set; }

        public long? TotalSectors { get; set; }

        public HostDiskPartitionAttributes[] Partition { get; set; }

        public bool Equals(HostDiskPartitionSpec hostDiskPartitionSpec)
        {
            return (hostDiskPartitionSpec != null && this.PartitionFormat == hostDiskPartitionSpec.PartitionFormat && ((this.Chs == null && hostDiskPartitionSpec.Chs == null) || (this.Chs != null && this.Chs.Equals(hostDiskPartitionSpec.Chs))) && ((this.TotalSectors == null && hostDiskPartitionSpec.TotalSectors == null) || (this.TotalSectors != null && this.TotalSectors.Equals(hostDiskPartitionSpec.TotalSectors))) && ((this.Partition == null && hostDiskPartitionSpec.Partition == null) || (this.Partition != null && hostDiskPartitionSpec.Partition != null && Enumerable.SequenceEqual(this.Partition, hostDiskPartitionSpec.Partition))));
        }

        public override bool Equals(object hostDiskPartitionSpec)
        {
            return Equals(hostDiskPartitionSpec as HostDiskPartitionSpec);
        }

        public override int GetHashCode()
        {
            return (PartitionFormat + "_" + Chs + "_" + TotalSectors + "_" + Partition).GetHashCode();
        }
    }

    public class HostDnsConfig : DynamicData, IEquatable<HostDnsConfig>
    {
        public bool Dhcp { get; set; }

        public string VirtualNicDevice { get; set; }

        public string Ipv6VirtualNicDevice { get; set; }

        public string HostName { get; set; }

        public string DomainName { get; set; }

        public string[] Address { get; set; }

        public string[] SearchDomain { get; set; }

        public bool Equals(HostDnsConfig hostDnsConfig)
        {
            return (hostDnsConfig != null && this.Dhcp == hostDnsConfig.Dhcp && this.VirtualNicDevice == hostDnsConfig.VirtualNicDevice && this.Ipv6VirtualNicDevice == hostDnsConfig.Ipv6VirtualNicDevice && this.HostName == hostDnsConfig.HostName && this.DomainName == hostDnsConfig.DomainName && ((this.Address == null && hostDnsConfig.Address == null) || (this.Address != null && hostDnsConfig.Address != null && Enumerable.SequenceEqual(this.Address, hostDnsConfig.Address))) && ((this.SearchDomain == null && hostDnsConfig.SearchDomain == null) || (this.SearchDomain != null && hostDnsConfig.SearchDomain != null && Enumerable.SequenceEqual(this.SearchDomain, hostDnsConfig.SearchDomain))));
        }

        public override bool Equals(object hostDnsConfig)
        {
            return Equals(hostDnsConfig as HostDnsConfig);
        }

        public override int GetHashCode()
        {
            return (Dhcp + "_" + VirtualNicDevice + "_" + Ipv6VirtualNicDevice + "_" + HostName + "_" + DomainName + "_" + Address + "_" + SearchDomain).GetHashCode();
        }
    }

    public class HostDnsConfigSpec : HostDnsConfig, IEquatable<HostDnsConfigSpec>
    {
        public HostVirtualNicConnection VirtualNicConnection { get; set; }

        public HostVirtualNicConnection VirtualNicConnectionV6 { get; set; }

        public bool Equals(HostDnsConfigSpec hostDnsConfigSpec)
        {
            return (hostDnsConfigSpec != null && ((this.VirtualNicConnection == null && hostDnsConfigSpec.VirtualNicConnection == null) || (this.VirtualNicConnection != null && this.VirtualNicConnection.Equals(hostDnsConfigSpec.VirtualNicConnection))) && ((this.VirtualNicConnectionV6 == null && hostDnsConfigSpec.VirtualNicConnectionV6 == null) || (this.VirtualNicConnectionV6 != null && this.VirtualNicConnectionV6.Equals(hostDnsConfigSpec.VirtualNicConnectionV6))));
        }

        public override bool Equals(object hostDnsConfigSpec)
        {
            return Equals(hostDnsConfigSpec as HostDnsConfigSpec);
        }

        public override int GetHashCode()
        {
            return (VirtualNicConnection + "_" + VirtualNicConnectionV6).GetHashCode();
        }
    }

    public class HostEnableAdminFailedEvent : HostEvent, IEquatable<HostEnableAdminFailedEvent>
    {
        public Permission[] Permissions { get; set; }

        public bool Equals(HostEnableAdminFailedEvent hostEnableAdminFailedEvent)
        {
            return (hostEnableAdminFailedEvent != null && ((this.Permissions == null && hostEnableAdminFailedEvent.Permissions == null) || (this.Permissions != null && hostEnableAdminFailedEvent.Permissions != null && Enumerable.SequenceEqual(this.Permissions, hostEnableAdminFailedEvent.Permissions))));
        }

        public override bool Equals(object hostEnableAdminFailedEvent)
        {
            return Equals(hostEnableAdminFailedEvent as HostEnableAdminFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Permissions).GetHashCode();
        }
    }

    public class HostEnterMaintenanceResult : DynamicData, IEquatable<HostEnterMaintenanceResult>
    {
        public FaultsByVM[] VmFaults { get; set; }

        public FaultsByHost[] HostFaults { get; set; }

        public bool Equals(HostEnterMaintenanceResult hostEnterMaintenanceResult)
        {
            return (hostEnterMaintenanceResult != null && ((this.VmFaults == null && hostEnterMaintenanceResult.VmFaults == null) || (this.VmFaults != null && hostEnterMaintenanceResult.VmFaults != null && Enumerable.SequenceEqual(this.VmFaults, hostEnterMaintenanceResult.VmFaults))) && ((this.HostFaults == null && hostEnterMaintenanceResult.HostFaults == null) || (this.HostFaults != null && hostEnterMaintenanceResult.HostFaults != null && Enumerable.SequenceEqual(this.HostFaults, hostEnterMaintenanceResult.HostFaults))));
        }

        public override bool Equals(object hostEnterMaintenanceResult)
        {
            return Equals(hostEnterMaintenanceResult as HostEnterMaintenanceResult);
        }

        public override int GetHashCode()
        {
            return (VmFaults + "_" + HostFaults).GetHashCode();
        }
    }

    public class HostEsxAgentHostManager : ViewBase, IEquatable<HostEsxAgentHostManager>
    {
        public HostEsxAgentHostManagerConfigInfo ConfigInfo { get; set; }

        public void EsxAgentHostManagerUpdateConfig(HostEsxAgentHostManagerConfigInfo configInfo)
        {
        }

        public bool Equals(HostEsxAgentHostManager hostEsxAgentHostManager)
        {
            return (hostEsxAgentHostManager != null && ((this.ConfigInfo == null && hostEsxAgentHostManager.ConfigInfo == null) || (this.ConfigInfo != null && this.ConfigInfo.Equals(hostEsxAgentHostManager.ConfigInfo))));
        }

        public override bool Equals(object hostEsxAgentHostManager)
        {
            return Equals(hostEsxAgentHostManager as HostEsxAgentHostManager);
        }

        public override int GetHashCode()
        {
            return (ConfigInfo).GetHashCode();
        }
    }

    public class HostEsxAgentHostManagerConfigInfo : DynamicData, IEquatable<HostEsxAgentHostManagerConfigInfo>
    {
        public ManagedObjectReference AgentVmDatastore { get; set; }

        public ManagedObjectReference AgentVmNetwork { get; set; }

        public HostEsxAgentHostManagerConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostEsxAgentHostManagerConfigInfo hostEsxAgentHostManagerConfigInfo)
        {
            return (hostEsxAgentHostManagerConfigInfo != null && ((this.AgentVmDatastore == null && hostEsxAgentHostManagerConfigInfo.AgentVmDatastore == null) || (this.AgentVmDatastore != null && this.AgentVmDatastore.Equals(hostEsxAgentHostManagerConfigInfo.AgentVmDatastore))) && ((this.AgentVmNetwork == null && hostEsxAgentHostManagerConfigInfo.AgentVmNetwork == null) || (this.AgentVmNetwork != null && this.AgentVmNetwork.Equals(hostEsxAgentHostManagerConfigInfo.AgentVmNetwork))) && ((this.LinkedView == null && hostEsxAgentHostManagerConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostEsxAgentHostManagerConfigInfo.LinkedView))));
        }

        public override bool Equals(object hostEsxAgentHostManagerConfigInfo)
        {
            return Equals(hostEsxAgentHostManagerConfigInfo as HostEsxAgentHostManagerConfigInfo);
        }

        public override int GetHashCode()
        {
            return (AgentVmDatastore + "_" + AgentVmNetwork + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostEsxAgentHostManagerConfigInfo_LinkedView : IEquatable<HostEsxAgentHostManagerConfigInfo_LinkedView>
    {
        public Datastore AgentVmDatastore { get; set; }

        public Network AgentVmNetwork { get; set; }

        public bool Equals(HostEsxAgentHostManagerConfigInfo_LinkedView hostEsxAgentHostManagerConfigInfo_LinkedView)
        {
            return (hostEsxAgentHostManagerConfigInfo_LinkedView != null && ((this.AgentVmDatastore == null && hostEsxAgentHostManagerConfigInfo_LinkedView.AgentVmDatastore == null) || (this.AgentVmDatastore != null && this.AgentVmDatastore.Equals(hostEsxAgentHostManagerConfigInfo_LinkedView.AgentVmDatastore))) && ((this.AgentVmNetwork == null && hostEsxAgentHostManagerConfigInfo_LinkedView.AgentVmNetwork == null) || (this.AgentVmNetwork != null && this.AgentVmNetwork.Equals(hostEsxAgentHostManagerConfigInfo_LinkedView.AgentVmNetwork))));
        }

        public override bool Equals(object hostEsxAgentHostManagerConfigInfo_LinkedView)
        {
            return Equals(hostEsxAgentHostManagerConfigInfo_LinkedView as HostEsxAgentHostManagerConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (AgentVmDatastore + "_" + AgentVmNetwork).GetHashCode();
        }
    }

    public class HostEvent : Event, IEquatable<HostEvent>
    {
        public bool Equals(HostEvent hostEvent)
        {
            return (hostEvent != null && base.Equals(hostEvent));
        }

        public override bool Equals(object hostEvent)
        {
            return Equals(hostEvent as HostEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostEventArgument : EntityEventArgument, IEquatable<HostEventArgument>
    {
        public ManagedObjectReference Host { get; set; }

        public HostEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(HostEventArgument hostEventArgument)
        {
            return (hostEventArgument != null && ((this.Host == null && hostEventArgument.Host == null) || (this.Host != null && this.Host.Equals(hostEventArgument.Host))) && ((this.LinkedView == null && hostEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostEventArgument.LinkedView))));
        }

        public override bool Equals(object hostEventArgument)
        {
            return Equals(hostEventArgument as HostEventArgument);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostEventArgument_LinkedView : IEquatable<HostEventArgument_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostEventArgument_LinkedView hostEventArgument_LinkedView)
        {
            return (hostEventArgument_LinkedView != null && ((this.Host == null && hostEventArgument_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostEventArgument_LinkedView.Host))));
        }

        public override bool Equals(object hostEventArgument_LinkedView)
        {
            return Equals(hostEventArgument_LinkedView as HostEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostExtraNetworksEvent : HostDasEvent, IEquatable<HostExtraNetworksEvent>
    {
        public string Ips { get; set; }

        public bool Equals(HostExtraNetworksEvent hostExtraNetworksEvent)
        {
            return (hostExtraNetworksEvent != null && this.Ips == hostExtraNetworksEvent.Ips);
        }

        public override bool Equals(object hostExtraNetworksEvent)
        {
            return Equals(hostExtraNetworksEvent as HostExtraNetworksEvent);
        }

        public override int GetHashCode()
        {
            return (Ips).GetHashCode();
        }
    }

    public class HostFaultToleranceManagerComponentHealthInfo : DynamicData, IEquatable<HostFaultToleranceManagerComponentHealthInfo>
    {
        public bool IsStorageHealthy { get; set; }

        public bool IsNetworkHealthy { get; set; }

        public bool Equals(HostFaultToleranceManagerComponentHealthInfo hostFaultToleranceManagerComponentHealthInfo)
        {
            return (hostFaultToleranceManagerComponentHealthInfo != null && this.IsStorageHealthy == hostFaultToleranceManagerComponentHealthInfo.IsStorageHealthy && this.IsNetworkHealthy == hostFaultToleranceManagerComponentHealthInfo.IsNetworkHealthy);
        }

        public override bool Equals(object hostFaultToleranceManagerComponentHealthInfo)
        {
            return Equals(hostFaultToleranceManagerComponentHealthInfo as HostFaultToleranceManagerComponentHealthInfo);
        }

        public override int GetHashCode()
        {
            return (IsStorageHealthy + "_" + IsNetworkHealthy).GetHashCode();
        }
    }

    public class HostFeatureCapability : DynamicData, IEquatable<HostFeatureCapability>
    {
        public string Key { get; set; }

        public string FeatureName { get; set; }

        public string Value { get; set; }

        public bool Equals(HostFeatureCapability hostFeatureCapability)
        {
            return (hostFeatureCapability != null && this.Key == hostFeatureCapability.Key && this.FeatureName == hostFeatureCapability.FeatureName && this.Value == hostFeatureCapability.Value);
        }

        public override bool Equals(object hostFeatureCapability)
        {
            return Equals(hostFeatureCapability as HostFeatureCapability);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + FeatureName + "_" + Value).GetHashCode();
        }
    }

    public class HostFeatureMask : DynamicData, IEquatable<HostFeatureMask>
    {
        public string Key { get; set; }

        public string FeatureName { get; set; }

        public string Value { get; set; }

        public bool Equals(HostFeatureMask hostFeatureMask)
        {
            return (hostFeatureMask != null && this.Key == hostFeatureMask.Key && this.FeatureName == hostFeatureMask.FeatureName && this.Value == hostFeatureMask.Value);
        }

        public override bool Equals(object hostFeatureMask)
        {
            return Equals(hostFeatureMask as HostFeatureMask);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + FeatureName + "_" + Value).GetHashCode();
        }
    }

    public class HostFeatureVersionInfo : DynamicData, IEquatable<HostFeatureVersionInfo>
    {
        public string Key { get; set; }

        public string Value { get; set; }

        public bool Equals(HostFeatureVersionInfo hostFeatureVersionInfo)
        {
            return (hostFeatureVersionInfo != null && this.Key == hostFeatureVersionInfo.Key && this.Value == hostFeatureVersionInfo.Value);
        }

        public override bool Equals(object hostFeatureVersionInfo)
        {
            return Equals(hostFeatureVersionInfo as HostFeatureVersionInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value).GetHashCode();
        }
    }

    public class HostFibreChannelHba : HostHostBusAdapter, IEquatable<HostFibreChannelHba>
    {
        public long PortWorldWideName { get; set; }

        public long NodeWorldWideName { get; set; }

        public FibreChannelPortType PortType { get; set; }

        public long Speed { get; set; }

        public bool Equals(HostFibreChannelHba hostFibreChannelHba)
        {
            return (hostFibreChannelHba != null && this.PortWorldWideName == hostFibreChannelHba.PortWorldWideName && this.NodeWorldWideName == hostFibreChannelHba.NodeWorldWideName && this.PortType == hostFibreChannelHba.PortType && this.Speed == hostFibreChannelHba.Speed);
        }

        public override bool Equals(object hostFibreChannelHba)
        {
            return Equals(hostFibreChannelHba as HostFibreChannelHba);
        }

        public override int GetHashCode()
        {
            return (PortWorldWideName + "_" + NodeWorldWideName + "_" + PortType + "_" + Speed).GetHashCode();
        }
    }

    public class HostFibreChannelOverEthernetHba : HostFibreChannelHba, IEquatable<HostFibreChannelOverEthernetHba>
    {
        public string UnderlyingNic { get; set; }

        public HostFibreChannelOverEthernetHbaLinkInfo LinkInfo { get; set; }

        public bool IsSoftwareFcoe { get; set; }

        public bool MarkedForRemoval { get; set; }

        public bool Equals(HostFibreChannelOverEthernetHba hostFibreChannelOverEthernetHba)
        {
            return (hostFibreChannelOverEthernetHba != null && this.UnderlyingNic == hostFibreChannelOverEthernetHba.UnderlyingNic && ((this.LinkInfo == null && hostFibreChannelOverEthernetHba.LinkInfo == null) || (this.LinkInfo != null && this.LinkInfo.Equals(hostFibreChannelOverEthernetHba.LinkInfo))) && this.IsSoftwareFcoe == hostFibreChannelOverEthernetHba.IsSoftwareFcoe && this.MarkedForRemoval == hostFibreChannelOverEthernetHba.MarkedForRemoval);
        }

        public override bool Equals(object hostFibreChannelOverEthernetHba)
        {
            return Equals(hostFibreChannelOverEthernetHba as HostFibreChannelOverEthernetHba);
        }

        public override int GetHashCode()
        {
            return (UnderlyingNic + "_" + LinkInfo + "_" + IsSoftwareFcoe + "_" + MarkedForRemoval).GetHashCode();
        }
    }

    public class HostFibreChannelOverEthernetHbaLinkInfo : DynamicData, IEquatable<HostFibreChannelOverEthernetHbaLinkInfo>
    {
        public string VnportMac { get; set; }

        public string FcfMac { get; set; }

        public int VlanId { get; set; }

        public bool Equals(HostFibreChannelOverEthernetHbaLinkInfo hostFibreChannelOverEthernetHbaLinkInfo)
        {
            return (hostFibreChannelOverEthernetHbaLinkInfo != null && this.VnportMac == hostFibreChannelOverEthernetHbaLinkInfo.VnportMac && this.FcfMac == hostFibreChannelOverEthernetHbaLinkInfo.FcfMac && this.VlanId == hostFibreChannelOverEthernetHbaLinkInfo.VlanId);
        }

        public override bool Equals(object hostFibreChannelOverEthernetHbaLinkInfo)
        {
            return Equals(hostFibreChannelOverEthernetHbaLinkInfo as HostFibreChannelOverEthernetHbaLinkInfo);
        }

        public override int GetHashCode()
        {
            return (VnportMac + "_" + FcfMac + "_" + VlanId).GetHashCode();
        }
    }

    public class HostFibreChannelOverEthernetTargetTransport : HostFibreChannelTargetTransport, IEquatable<HostFibreChannelOverEthernetTargetTransport>
    {
        public string VnportMac { get; set; }

        public string FcfMac { get; set; }

        public int VlanId { get; set; }

        public bool Equals(HostFibreChannelOverEthernetTargetTransport hostFibreChannelOverEthernetTargetTransport)
        {
            return (hostFibreChannelOverEthernetTargetTransport != null && this.VnportMac == hostFibreChannelOverEthernetTargetTransport.VnportMac && this.FcfMac == hostFibreChannelOverEthernetTargetTransport.FcfMac && this.VlanId == hostFibreChannelOverEthernetTargetTransport.VlanId);
        }

        public override bool Equals(object hostFibreChannelOverEthernetTargetTransport)
        {
            return Equals(hostFibreChannelOverEthernetTargetTransport as HostFibreChannelOverEthernetTargetTransport);
        }

        public override int GetHashCode()
        {
            return (VnportMac + "_" + FcfMac + "_" + VlanId).GetHashCode();
        }
    }

    public class HostFibreChannelTargetTransport : HostTargetTransport, IEquatable<HostFibreChannelTargetTransport>
    {
        public long PortWorldWideName { get; set; }

        public long NodeWorldWideName { get; set; }

        public bool Equals(HostFibreChannelTargetTransport hostFibreChannelTargetTransport)
        {
            return (hostFibreChannelTargetTransport != null && this.PortWorldWideName == hostFibreChannelTargetTransport.PortWorldWideName && this.NodeWorldWideName == hostFibreChannelTargetTransport.NodeWorldWideName);
        }

        public override bool Equals(object hostFibreChannelTargetTransport)
        {
            return Equals(hostFibreChannelTargetTransport as HostFibreChannelTargetTransport);
        }

        public override int GetHashCode()
        {
            return (PortWorldWideName + "_" + NodeWorldWideName).GetHashCode();
        }
    }

    public class HostFileAccess : DynamicData, IEquatable<HostFileAccess>
    {
        public string Who { get; set; }

        public string What { get; set; }

        public bool Equals(HostFileAccess hostFileAccess)
        {
            return (hostFileAccess != null && this.Who == hostFileAccess.Who && this.What == hostFileAccess.What);
        }

        public override bool Equals(object hostFileAccess)
        {
            return Equals(hostFileAccess as HostFileAccess);
        }

        public override int GetHashCode()
        {
            return (Who + "_" + What).GetHashCode();
        }
    }

    public class HostFileSystemMountInfo : DynamicData, IEquatable<HostFileSystemMountInfo>
    {
        public HostMountInfo MountInfo { get; set; }

        public HostFileSystemVolume Volume { get; set; }

        public string VStorageSupport { get; set; }

        public bool Equals(HostFileSystemMountInfo hostFileSystemMountInfo)
        {
            return (hostFileSystemMountInfo != null && ((this.MountInfo == null && hostFileSystemMountInfo.MountInfo == null) || (this.MountInfo != null && this.MountInfo.Equals(hostFileSystemMountInfo.MountInfo))) && ((this.Volume == null && hostFileSystemMountInfo.Volume == null) || (this.Volume != null && this.Volume.Equals(hostFileSystemMountInfo.Volume))) && this.VStorageSupport == hostFileSystemMountInfo.VStorageSupport);
        }

        public override bool Equals(object hostFileSystemMountInfo)
        {
            return Equals(hostFileSystemMountInfo as HostFileSystemMountInfo);
        }

        public override int GetHashCode()
        {
            return (MountInfo + "_" + Volume + "_" + VStorageSupport).GetHashCode();
        }
    }

    public class HostFileSystemVolume : DynamicData, IEquatable<HostFileSystemVolume>
    {
        public string Type { get; set; }

        public string Name { get; set; }

        public long Capacity { get; set; }

        public bool Equals(HostFileSystemVolume hostFileSystemVolume)
        {
            return (hostFileSystemVolume != null && this.Type == hostFileSystemVolume.Type && this.Name == hostFileSystemVolume.Name && this.Capacity == hostFileSystemVolume.Capacity);
        }

        public override bool Equals(object hostFileSystemVolume)
        {
            return Equals(hostFileSystemVolume as HostFileSystemVolume);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Name + "_" + Capacity).GetHashCode();
        }
    }

    public class HostFileSystemVolumeInfo : DynamicData, IEquatable<HostFileSystemVolumeInfo>
    {
        public string[] VolumeTypeList { get; set; }

        public HostFileSystemMountInfo[] MountInfo { get; set; }

        public bool Equals(HostFileSystemVolumeInfo hostFileSystemVolumeInfo)
        {
            return (hostFileSystemVolumeInfo != null && ((this.VolumeTypeList == null && hostFileSystemVolumeInfo.VolumeTypeList == null) || (this.VolumeTypeList != null && hostFileSystemVolumeInfo.VolumeTypeList != null && Enumerable.SequenceEqual(this.VolumeTypeList, hostFileSystemVolumeInfo.VolumeTypeList))) && ((this.MountInfo == null && hostFileSystemVolumeInfo.MountInfo == null) || (this.MountInfo != null && hostFileSystemVolumeInfo.MountInfo != null && Enumerable.SequenceEqual(this.MountInfo, hostFileSystemVolumeInfo.MountInfo))));
        }

        public override bool Equals(object hostFileSystemVolumeInfo)
        {
            return Equals(hostFileSystemVolumeInfo as HostFileSystemVolumeInfo);
        }

        public override int GetHashCode()
        {
            return (VolumeTypeList + "_" + MountInfo).GetHashCode();
        }
    }

    public class HostFirewallConfig : DynamicData, IEquatable<HostFirewallConfig>
    {
        public HostFirewallConfigRuleSetConfig[] Rule { get; set; }

        public HostFirewallDefaultPolicy DefaultBlockingPolicy { get; set; }

        public bool Equals(HostFirewallConfig hostFirewallConfig)
        {
            return (hostFirewallConfig != null && ((this.Rule == null && hostFirewallConfig.Rule == null) || (this.Rule != null && hostFirewallConfig.Rule != null && Enumerable.SequenceEqual(this.Rule, hostFirewallConfig.Rule))) && ((this.DefaultBlockingPolicy == null && hostFirewallConfig.DefaultBlockingPolicy == null) || (this.DefaultBlockingPolicy != null && this.DefaultBlockingPolicy.Equals(hostFirewallConfig.DefaultBlockingPolicy))));
        }

        public override bool Equals(object hostFirewallConfig)
        {
            return Equals(hostFirewallConfig as HostFirewallConfig);
        }

        public override int GetHashCode()
        {
            return (Rule + "_" + DefaultBlockingPolicy).GetHashCode();
        }
    }

    public class HostFirewallConfigRuleSetConfig : DynamicData, IEquatable<HostFirewallConfigRuleSetConfig>
    {
        public string RulesetId { get; set; }

        public bool Enabled { get; set; }

        public HostFirewallRulesetIpList AllowedHosts { get; set; }

        public bool Equals(HostFirewallConfigRuleSetConfig hostFirewallConfigRuleSetConfig)
        {
            return (hostFirewallConfigRuleSetConfig != null && this.RulesetId == hostFirewallConfigRuleSetConfig.RulesetId && this.Enabled == hostFirewallConfigRuleSetConfig.Enabled && ((this.AllowedHosts == null && hostFirewallConfigRuleSetConfig.AllowedHosts == null) || (this.AllowedHosts != null && this.AllowedHosts.Equals(hostFirewallConfigRuleSetConfig.AllowedHosts))));
        }

        public override bool Equals(object hostFirewallConfigRuleSetConfig)
        {
            return Equals(hostFirewallConfigRuleSetConfig as HostFirewallConfigRuleSetConfig);
        }

        public override int GetHashCode()
        {
            return (RulesetId + "_" + Enabled + "_" + AllowedHosts).GetHashCode();
        }
    }

    public class HostFirewallDefaultPolicy : DynamicData, IEquatable<HostFirewallDefaultPolicy>
    {
        public bool? IncomingBlocked { get; set; }

        public bool? OutgoingBlocked { get; set; }

        public bool Equals(HostFirewallDefaultPolicy hostFirewallDefaultPolicy)
        {
            return (hostFirewallDefaultPolicy != null && ((this.IncomingBlocked == null && hostFirewallDefaultPolicy.IncomingBlocked == null) || (this.IncomingBlocked != null && this.IncomingBlocked.Equals(hostFirewallDefaultPolicy.IncomingBlocked))) && ((this.OutgoingBlocked == null && hostFirewallDefaultPolicy.OutgoingBlocked == null) || (this.OutgoingBlocked != null && this.OutgoingBlocked.Equals(hostFirewallDefaultPolicy.OutgoingBlocked))));
        }

        public override bool Equals(object hostFirewallDefaultPolicy)
        {
            return Equals(hostFirewallDefaultPolicy as HostFirewallDefaultPolicy);
        }

        public override int GetHashCode()
        {
            return (IncomingBlocked + "_" + OutgoingBlocked).GetHashCode();
        }
    }

    public class HostFirewallInfo : DynamicData, IEquatable<HostFirewallInfo>
    {
        public HostFirewallDefaultPolicy DefaultPolicy { get; set; }

        public HostFirewallRuleset[] Ruleset { get; set; }

        public bool Equals(HostFirewallInfo hostFirewallInfo)
        {
            return (hostFirewallInfo != null && ((this.DefaultPolicy == null && hostFirewallInfo.DefaultPolicy == null) || (this.DefaultPolicy != null && this.DefaultPolicy.Equals(hostFirewallInfo.DefaultPolicy))) && ((this.Ruleset == null && hostFirewallInfo.Ruleset == null) || (this.Ruleset != null && hostFirewallInfo.Ruleset != null && Enumerable.SequenceEqual(this.Ruleset, hostFirewallInfo.Ruleset))));
        }

        public override bool Equals(object hostFirewallInfo)
        {
            return Equals(hostFirewallInfo as HostFirewallInfo);
        }

        public override int GetHashCode()
        {
            return (DefaultPolicy + "_" + Ruleset).GetHashCode();
        }
    }

    public class HostFirewallRule : DynamicData, IEquatable<HostFirewallRule>
    {
        public int Port { get; set; }

        public int? EndPort { get; set; }

        public HostFirewallRuleDirection Direction { get; set; }

        public HostFirewallRulePortType? PortType { get; set; }

        public string Protocol { get; set; }

        public bool Equals(HostFirewallRule hostFirewallRule)
        {
            return (hostFirewallRule != null && this.Port == hostFirewallRule.Port && ((this.EndPort == null && hostFirewallRule.EndPort == null) || (this.EndPort != null && this.EndPort.Equals(hostFirewallRule.EndPort))) && this.Direction == hostFirewallRule.Direction && ((this.PortType == null && hostFirewallRule.PortType == null) || (this.PortType != null && this.PortType.Equals(hostFirewallRule.PortType))) && this.Protocol == hostFirewallRule.Protocol);
        }

        public override bool Equals(object hostFirewallRule)
        {
            return Equals(hostFirewallRule as HostFirewallRule);
        }

        public override int GetHashCode()
        {
            return (Port + "_" + EndPort + "_" + Direction + "_" + PortType + "_" + Protocol).GetHashCode();
        }
    }

    public class HostFirewallRuleset : DynamicData, IEquatable<HostFirewallRuleset>
    {
        public string Key { get; set; }

        public string Label { get; set; }

        public bool Required { get; set; }

        public HostFirewallRule[] Rule { get; set; }

        public string Service { get; set; }

        public bool Enabled { get; set; }

        public HostFirewallRulesetIpList AllowedHosts { get; set; }

        public bool Equals(HostFirewallRuleset hostFirewallRuleset)
        {
            return (hostFirewallRuleset != null && this.Key == hostFirewallRuleset.Key && this.Label == hostFirewallRuleset.Label && this.Required == hostFirewallRuleset.Required && ((this.Rule == null && hostFirewallRuleset.Rule == null) || (this.Rule != null && hostFirewallRuleset.Rule != null && Enumerable.SequenceEqual(this.Rule, hostFirewallRuleset.Rule))) && this.Service == hostFirewallRuleset.Service && this.Enabled == hostFirewallRuleset.Enabled && ((this.AllowedHosts == null && hostFirewallRuleset.AllowedHosts == null) || (this.AllowedHosts != null && this.AllowedHosts.Equals(hostFirewallRuleset.AllowedHosts))));
        }

        public override bool Equals(object hostFirewallRuleset)
        {
            return Equals(hostFirewallRuleset as HostFirewallRuleset);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Label + "_" + Required + "_" + Rule + "_" + Service + "_" + Enabled + "_" + AllowedHosts).GetHashCode();
        }
    }

    public class HostFirewallRulesetIpList : DynamicData, IEquatable<HostFirewallRulesetIpList>
    {
        public string[] IpAddress { get; set; }

        public HostFirewallRulesetIpNetwork[] IpNetwork { get; set; }

        public bool AllIp { get; set; }

        public bool Equals(HostFirewallRulesetIpList hostFirewallRulesetIpList)
        {
            return (hostFirewallRulesetIpList != null && ((this.IpAddress == null && hostFirewallRulesetIpList.IpAddress == null) || (this.IpAddress != null && hostFirewallRulesetIpList.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, hostFirewallRulesetIpList.IpAddress))) && ((this.IpNetwork == null && hostFirewallRulesetIpList.IpNetwork == null) || (this.IpNetwork != null && hostFirewallRulesetIpList.IpNetwork != null && Enumerable.SequenceEqual(this.IpNetwork, hostFirewallRulesetIpList.IpNetwork))) && this.AllIp == hostFirewallRulesetIpList.AllIp);
        }

        public override bool Equals(object hostFirewallRulesetIpList)
        {
            return Equals(hostFirewallRulesetIpList as HostFirewallRulesetIpList);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + IpNetwork + "_" + AllIp).GetHashCode();
        }
    }

    public class HostFirewallRulesetIpNetwork : DynamicData, IEquatable<HostFirewallRulesetIpNetwork>
    {
        public string Network { get; set; }

        public int PrefixLength { get; set; }

        public bool Equals(HostFirewallRulesetIpNetwork hostFirewallRulesetIpNetwork)
        {
            return (hostFirewallRulesetIpNetwork != null && this.Network == hostFirewallRulesetIpNetwork.Network && this.PrefixLength == hostFirewallRulesetIpNetwork.PrefixLength);
        }

        public override bool Equals(object hostFirewallRulesetIpNetwork)
        {
            return Equals(hostFirewallRulesetIpNetwork as HostFirewallRulesetIpNetwork);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + PrefixLength).GetHashCode();
        }
    }

    public class HostFirewallRulesetRulesetSpec : DynamicData, IEquatable<HostFirewallRulesetRulesetSpec>
    {
        public HostFirewallRulesetIpList AllowedHosts { get; set; }

        public bool Equals(HostFirewallRulesetRulesetSpec hostFirewallRulesetRulesetSpec)
        {
            return (hostFirewallRulesetRulesetSpec != null && ((this.AllowedHosts == null && hostFirewallRulesetRulesetSpec.AllowedHosts == null) || (this.AllowedHosts != null && this.AllowedHosts.Equals(hostFirewallRulesetRulesetSpec.AllowedHosts))));
        }

        public override bool Equals(object hostFirewallRulesetRulesetSpec)
        {
            return Equals(hostFirewallRulesetRulesetSpec as HostFirewallRulesetRulesetSpec);
        }

        public override int GetHashCode()
        {
            return (AllowedHosts).GetHashCode();
        }
    }

    public class HostFirewallSystem : ExtensibleManagedObject, IEquatable<HostFirewallSystem>
    {
        public HostFirewallInfo FirewallInfo { get; set; }

        public void UpdateDefaultPolicy(HostFirewallDefaultPolicy defaultPolicy)
        {
        }

        public void EnableRuleset(string id)
        {
        }

        public void DisableRuleset(string id)
        {
        }

        public void UpdateRuleset(string id, HostFirewallRulesetRulesetSpec spec)
        {
        }

        public void RefreshFirewall()
        {
        }

        public bool Equals(HostFirewallSystem hostFirewallSystem)
        {
            return (hostFirewallSystem != null && ((this.FirewallInfo == null && hostFirewallSystem.FirewallInfo == null) || (this.FirewallInfo != null && this.FirewallInfo.Equals(hostFirewallSystem.FirewallInfo))));
        }

        public override bool Equals(object hostFirewallSystem)
        {
            return Equals(hostFirewallSystem as HostFirewallSystem);
        }

        public override int GetHashCode()
        {
            return (FirewallInfo).GetHashCode();
        }
    }

    public class HostFirmwareSystem : ViewBase, IEquatable<HostFirmwareSystem>
    {
        public void ResetFirmwareToFactoryDefaults()
        {
        }

        public string BackupFirmwareConfiguration()
        {
            return default(string);
        }

        public string QueryFirmwareConfigUploadURL()
        {
            return default(string);
        }

        public void RestoreFirmwareConfiguration(bool force)
        {
        }

        public bool Equals(HostFirmwareSystem hostFirmwareSystem)
        {
            return (hostFirmwareSystem != null && base.Equals(hostFirmwareSystem));
        }

        public override bool Equals(object hostFirmwareSystem)
        {
            return Equals(hostFirmwareSystem as HostFirmwareSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostFlagInfo : DynamicData, IEquatable<HostFlagInfo>
    {
        public bool? BackgroundSnapshotsEnabled { get; set; }

        public bool Equals(HostFlagInfo hostFlagInfo)
        {
            return (hostFlagInfo != null && ((this.BackgroundSnapshotsEnabled == null && hostFlagInfo.BackgroundSnapshotsEnabled == null) || (this.BackgroundSnapshotsEnabled != null && this.BackgroundSnapshotsEnabled.Equals(hostFlagInfo.BackgroundSnapshotsEnabled))));
        }

        public override bool Equals(object hostFlagInfo)
        {
            return Equals(hostFlagInfo as HostFlagInfo);
        }

        public override int GetHashCode()
        {
            return (BackgroundSnapshotsEnabled).GetHashCode();
        }
    }

    public class HostForceMountedInfo : DynamicData, IEquatable<HostForceMountedInfo>
    {
        public bool Persist { get; set; }

        public bool Mounted { get; set; }

        public bool Equals(HostForceMountedInfo hostForceMountedInfo)
        {
            return (hostForceMountedInfo != null && this.Persist == hostForceMountedInfo.Persist && this.Mounted == hostForceMountedInfo.Mounted);
        }

        public override bool Equals(object hostForceMountedInfo)
        {
            return Equals(hostForceMountedInfo as HostForceMountedInfo);
        }

        public override int GetHashCode()
        {
            return (Persist + "_" + Mounted).GetHashCode();
        }
    }

    public class HostGatewaySpec : DynamicData, IEquatable<HostGatewaySpec>
    {
        public string GatewayType { get; set; }

        public string GatewayId { get; set; }

        public string TrustVerificationToken { get; set; }

        public KeyValue[] HostAuthParams { get; set; }

        public bool Equals(HostGatewaySpec hostGatewaySpec)
        {
            return (hostGatewaySpec != null && this.GatewayType == hostGatewaySpec.GatewayType && this.GatewayId == hostGatewaySpec.GatewayId && this.TrustVerificationToken == hostGatewaySpec.TrustVerificationToken && ((this.HostAuthParams == null && hostGatewaySpec.HostAuthParams == null) || (this.HostAuthParams != null && hostGatewaySpec.HostAuthParams != null && Enumerable.SequenceEqual(this.HostAuthParams, hostGatewaySpec.HostAuthParams))));
        }

        public override bool Equals(object hostGatewaySpec)
        {
            return Equals(hostGatewaySpec as HostGatewaySpec);
        }

        public override int GetHashCode()
        {
            return (GatewayType + "_" + GatewayId + "_" + TrustVerificationToken + "_" + HostAuthParams).GetHashCode();
        }
    }

    public class HostGetShortNameFailedEvent : HostEvent, IEquatable<HostGetShortNameFailedEvent>
    {
        public bool Equals(HostGetShortNameFailedEvent hostGetShortNameFailedEvent)
        {
            return (hostGetShortNameFailedEvent != null && base.Equals(hostGetShortNameFailedEvent));
        }

        public override bool Equals(object hostGetShortNameFailedEvent)
        {
            return Equals(hostGetShortNameFailedEvent as HostGetShortNameFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostGraphicsConfig : DynamicData, IEquatable<HostGraphicsConfig>
    {
        public string HostDefaultGraphicsType { get; set; }

        public string SharedPassthruAssignmentPolicy { get; set; }

        public HostGraphicsConfigDeviceType[] DeviceType { get; set; }

        public bool Equals(HostGraphicsConfig hostGraphicsConfig)
        {
            return (hostGraphicsConfig != null && this.HostDefaultGraphicsType == hostGraphicsConfig.HostDefaultGraphicsType && this.SharedPassthruAssignmentPolicy == hostGraphicsConfig.SharedPassthruAssignmentPolicy && ((this.DeviceType == null && hostGraphicsConfig.DeviceType == null) || (this.DeviceType != null && hostGraphicsConfig.DeviceType != null && Enumerable.SequenceEqual(this.DeviceType, hostGraphicsConfig.DeviceType))));
        }

        public override bool Equals(object hostGraphicsConfig)
        {
            return Equals(hostGraphicsConfig as HostGraphicsConfig);
        }

        public override int GetHashCode()
        {
            return (HostDefaultGraphicsType + "_" + SharedPassthruAssignmentPolicy + "_" + DeviceType).GetHashCode();
        }
    }

    public class HostGraphicsConfigDeviceType : DynamicData, IEquatable<HostGraphicsConfigDeviceType>
    {
        public string DeviceId { get; set; }

        public string GraphicsType { get; set; }

        public bool Equals(HostGraphicsConfigDeviceType hostGraphicsConfigDeviceType)
        {
            return (hostGraphicsConfigDeviceType != null && this.DeviceId == hostGraphicsConfigDeviceType.DeviceId && this.GraphicsType == hostGraphicsConfigDeviceType.GraphicsType);
        }

        public override bool Equals(object hostGraphicsConfigDeviceType)
        {
            return Equals(hostGraphicsConfigDeviceType as HostGraphicsConfigDeviceType);
        }

        public override int GetHashCode()
        {
            return (DeviceId + "_" + GraphicsType).GetHashCode();
        }
    }

    public class HostGraphicsInfo : DynamicData, IEquatable<HostGraphicsInfo>
    {
        public string DeviceName { get; set; }

        public string VendorName { get; set; }

        public string PciId { get; set; }

        public string GraphicsType { get; set; }

        public long MemorySizeInKB { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public HostGraphicsInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostGraphicsInfo hostGraphicsInfo)
        {
            return (hostGraphicsInfo != null && this.DeviceName == hostGraphicsInfo.DeviceName && this.VendorName == hostGraphicsInfo.VendorName && this.PciId == hostGraphicsInfo.PciId && this.GraphicsType == hostGraphicsInfo.GraphicsType && this.MemorySizeInKB == hostGraphicsInfo.MemorySizeInKB && ((this.Vm == null && hostGraphicsInfo.Vm == null) || (this.Vm != null && hostGraphicsInfo.Vm != null && Enumerable.SequenceEqual(this.Vm, hostGraphicsInfo.Vm))) && ((this.LinkedView == null && hostGraphicsInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostGraphicsInfo.LinkedView))));
        }

        public override bool Equals(object hostGraphicsInfo)
        {
            return Equals(hostGraphicsInfo as HostGraphicsInfo);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + VendorName + "_" + PciId + "_" + GraphicsType + "_" + MemorySizeInKB + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostGraphicsInfo_LinkedView : IEquatable<HostGraphicsInfo_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public bool Equals(HostGraphicsInfo_LinkedView hostGraphicsInfo_LinkedView)
        {
            return (hostGraphicsInfo_LinkedView != null && ((this.Vm == null && hostGraphicsInfo_LinkedView.Vm == null) || (this.Vm != null && hostGraphicsInfo_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, hostGraphicsInfo_LinkedView.Vm))));
        }

        public override bool Equals(object hostGraphicsInfo_LinkedView)
        {
            return Equals(hostGraphicsInfo_LinkedView as HostGraphicsInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class HostGraphicsManager : ExtensibleManagedObject, IEquatable<HostGraphicsManager>
    {
        public HostGraphicsInfo[] GraphicsInfo { get; set; }

        public HostGraphicsConfig GraphicsConfig { get; set; }

        public string[] SharedPassthruGpuTypes { get; set; }

        public HostSharedGpuCapabilities[] SharedGpuCapabilities { get; set; }

        public void RefreshGraphicsManager()
        {
        }

        public bool IsSharedGraphicsActive()
        {
            return default(bool);
        }

        public void UpdateGraphicsConfig(HostGraphicsConfig config)
        {
        }

        public bool Equals(HostGraphicsManager hostGraphicsManager)
        {
            return (hostGraphicsManager != null && ((this.GraphicsInfo == null && hostGraphicsManager.GraphicsInfo == null) || (this.GraphicsInfo != null && hostGraphicsManager.GraphicsInfo != null && Enumerable.SequenceEqual(this.GraphicsInfo, hostGraphicsManager.GraphicsInfo))) && ((this.GraphicsConfig == null && hostGraphicsManager.GraphicsConfig == null) || (this.GraphicsConfig != null && this.GraphicsConfig.Equals(hostGraphicsManager.GraphicsConfig))) && ((this.SharedPassthruGpuTypes == null && hostGraphicsManager.SharedPassthruGpuTypes == null) || (this.SharedPassthruGpuTypes != null && hostGraphicsManager.SharedPassthruGpuTypes != null && Enumerable.SequenceEqual(this.SharedPassthruGpuTypes, hostGraphicsManager.SharedPassthruGpuTypes))) && ((this.SharedGpuCapabilities == null && hostGraphicsManager.SharedGpuCapabilities == null) || (this.SharedGpuCapabilities != null && hostGraphicsManager.SharedGpuCapabilities != null && Enumerable.SequenceEqual(this.SharedGpuCapabilities, hostGraphicsManager.SharedGpuCapabilities))));
        }

        public override bool Equals(object hostGraphicsManager)
        {
            return Equals(hostGraphicsManager as HostGraphicsManager);
        }

        public override int GetHashCode()
        {
            return (GraphicsInfo + "_" + GraphicsConfig + "_" + SharedPassthruGpuTypes + "_" + SharedGpuCapabilities).GetHashCode();
        }
    }

    public class HostHardwareElementInfo : DynamicData, IEquatable<HostHardwareElementInfo>
    {
        public string Name { get; set; }

        public ElementDescription Status { get; set; }

        public bool Equals(HostHardwareElementInfo hostHardwareElementInfo)
        {
            return (hostHardwareElementInfo != null && this.Name == hostHardwareElementInfo.Name && ((this.Status == null && hostHardwareElementInfo.Status == null) || (this.Status != null && this.Status.Equals(hostHardwareElementInfo.Status))));
        }

        public override bool Equals(object hostHardwareElementInfo)
        {
            return Equals(hostHardwareElementInfo as HostHardwareElementInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Status).GetHashCode();
        }
    }

    public class HostHardwareInfo : DynamicData, IEquatable<HostHardwareInfo>
    {
        public HostSystemInfo SystemInfo { get; set; }

        public HostCpuPowerManagementInfo CpuPowerManagementInfo { get; set; }

        public HostCpuInfo CpuInfo { get; set; }

        public HostCpuPackage[] CpuPkg { get; set; }

        public long MemorySize { get; set; }

        public HostNumaInfo NumaInfo { get; set; }

        public bool SmcPresent { get; set; }

        public HostPciDevice[] PciDevice { get; set; }

        public HostCpuIdInfo[] CpuFeature { get; set; }

        public HostBIOSInfo BiosInfo { get; set; }

        public HostReliableMemoryInfo ReliableMemoryInfo { get; set; }

        public HostPersistentMemoryInfo PersistentMemoryInfo { get; set; }

        public bool Equals(HostHardwareInfo hostHardwareInfo)
        {
            return (hostHardwareInfo != null && ((this.SystemInfo == null && hostHardwareInfo.SystemInfo == null) || (this.SystemInfo != null && this.SystemInfo.Equals(hostHardwareInfo.SystemInfo))) && ((this.CpuPowerManagementInfo == null && hostHardwareInfo.CpuPowerManagementInfo == null) || (this.CpuPowerManagementInfo != null && this.CpuPowerManagementInfo.Equals(hostHardwareInfo.CpuPowerManagementInfo))) && ((this.CpuInfo == null && hostHardwareInfo.CpuInfo == null) || (this.CpuInfo != null && this.CpuInfo.Equals(hostHardwareInfo.CpuInfo))) && ((this.CpuPkg == null && hostHardwareInfo.CpuPkg == null) || (this.CpuPkg != null && hostHardwareInfo.CpuPkg != null && Enumerable.SequenceEqual(this.CpuPkg, hostHardwareInfo.CpuPkg))) && this.MemorySize == hostHardwareInfo.MemorySize && ((this.NumaInfo == null && hostHardwareInfo.NumaInfo == null) || (this.NumaInfo != null && this.NumaInfo.Equals(hostHardwareInfo.NumaInfo))) && this.SmcPresent == hostHardwareInfo.SmcPresent && ((this.PciDevice == null && hostHardwareInfo.PciDevice == null) || (this.PciDevice != null && hostHardwareInfo.PciDevice != null && Enumerable.SequenceEqual(this.PciDevice, hostHardwareInfo.PciDevice))) && ((this.CpuFeature == null && hostHardwareInfo.CpuFeature == null) || (this.CpuFeature != null && hostHardwareInfo.CpuFeature != null && Enumerable.SequenceEqual(this.CpuFeature, hostHardwareInfo.CpuFeature))) && ((this.BiosInfo == null && hostHardwareInfo.BiosInfo == null) || (this.BiosInfo != null && this.BiosInfo.Equals(hostHardwareInfo.BiosInfo))) && ((this.ReliableMemoryInfo == null && hostHardwareInfo.ReliableMemoryInfo == null) || (this.ReliableMemoryInfo != null && this.ReliableMemoryInfo.Equals(hostHardwareInfo.ReliableMemoryInfo))) && ((this.PersistentMemoryInfo == null && hostHardwareInfo.PersistentMemoryInfo == null) || (this.PersistentMemoryInfo != null && this.PersistentMemoryInfo.Equals(hostHardwareInfo.PersistentMemoryInfo))));
        }

        public override bool Equals(object hostHardwareInfo)
        {
            return Equals(hostHardwareInfo as HostHardwareInfo);
        }

        public override int GetHashCode()
        {
            return (SystemInfo + "_" + CpuPowerManagementInfo + "_" + CpuInfo + "_" + CpuPkg + "_" + MemorySize + "_" + NumaInfo + "_" + SmcPresent + "_" + PciDevice + "_" + CpuFeature + "_" + BiosInfo + "_" + ReliableMemoryInfo + "_" + PersistentMemoryInfo).GetHashCode();
        }
    }

    public class HostHardwareStatusInfo : DynamicData, IEquatable<HostHardwareStatusInfo>
    {
        public HostHardwareElementInfo[] MemoryStatusInfo { get; set; }

        public HostHardwareElementInfo[] CpuStatusInfo { get; set; }

        public HostStorageElementInfo[] StorageStatusInfo { get; set; }

        public bool Equals(HostHardwareStatusInfo hostHardwareStatusInfo)
        {
            return (hostHardwareStatusInfo != null && ((this.MemoryStatusInfo == null && hostHardwareStatusInfo.MemoryStatusInfo == null) || (this.MemoryStatusInfo != null && hostHardwareStatusInfo.MemoryStatusInfo != null && Enumerable.SequenceEqual(this.MemoryStatusInfo, hostHardwareStatusInfo.MemoryStatusInfo))) && ((this.CpuStatusInfo == null && hostHardwareStatusInfo.CpuStatusInfo == null) || (this.CpuStatusInfo != null && hostHardwareStatusInfo.CpuStatusInfo != null && Enumerable.SequenceEqual(this.CpuStatusInfo, hostHardwareStatusInfo.CpuStatusInfo))) && ((this.StorageStatusInfo == null && hostHardwareStatusInfo.StorageStatusInfo == null) || (this.StorageStatusInfo != null && hostHardwareStatusInfo.StorageStatusInfo != null && Enumerable.SequenceEqual(this.StorageStatusInfo, hostHardwareStatusInfo.StorageStatusInfo))));
        }

        public override bool Equals(object hostHardwareStatusInfo)
        {
            return Equals(hostHardwareStatusInfo as HostHardwareStatusInfo);
        }

        public override int GetHashCode()
        {
            return (MemoryStatusInfo + "_" + CpuStatusInfo + "_" + StorageStatusInfo).GetHashCode();
        }
    }

    public class HostHardwareSummary : DynamicData, IEquatable<HostHardwareSummary>
    {
        public string Vendor { get; set; }

        public string Model { get; set; }

        public string Uuid { get; set; }

        public HostSystemIdentificationInfo[] OtherIdentifyingInfo { get; set; }

        public long MemorySize { get; set; }

        public string CpuModel { get; set; }

        public int CpuMhz { get; set; }

        public short NumCpuPkgs { get; set; }

        public short NumCpuCores { get; set; }

        public short NumCpuThreads { get; set; }

        public int NumNics { get; set; }

        public int NumHBAs { get; set; }

        public bool Equals(HostHardwareSummary hostHardwareSummary)
        {
            return (hostHardwareSummary != null && this.Vendor == hostHardwareSummary.Vendor && this.Model == hostHardwareSummary.Model && this.Uuid == hostHardwareSummary.Uuid && ((this.OtherIdentifyingInfo == null && hostHardwareSummary.OtherIdentifyingInfo == null) || (this.OtherIdentifyingInfo != null && hostHardwareSummary.OtherIdentifyingInfo != null && Enumerable.SequenceEqual(this.OtherIdentifyingInfo, hostHardwareSummary.OtherIdentifyingInfo))) && this.MemorySize == hostHardwareSummary.MemorySize && this.CpuModel == hostHardwareSummary.CpuModel && this.CpuMhz == hostHardwareSummary.CpuMhz && this.NumCpuPkgs == hostHardwareSummary.NumCpuPkgs && this.NumCpuCores == hostHardwareSummary.NumCpuCores && this.NumCpuThreads == hostHardwareSummary.NumCpuThreads && this.NumNics == hostHardwareSummary.NumNics && this.NumHBAs == hostHardwareSummary.NumHBAs);
        }

        public override bool Equals(object hostHardwareSummary)
        {
            return Equals(hostHardwareSummary as HostHardwareSummary);
        }

        public override int GetHashCode()
        {
            return (Vendor + "_" + Model + "_" + Uuid + "_" + OtherIdentifyingInfo + "_" + MemorySize + "_" + CpuModel + "_" + CpuMhz + "_" + NumCpuPkgs + "_" + NumCpuCores + "_" + NumCpuThreads + "_" + NumNics + "_" + NumHBAs).GetHashCode();
        }
    }

    public class HostHasComponentFailure : VimFault, IEquatable<HostHasComponentFailure>
    {
        public string HostName { get; set; }

        public string ComponentType { get; set; }

        public string ComponentName { get; set; }

        public bool Equals(HostHasComponentFailure hostHasComponentFailure)
        {
            return (hostHasComponentFailure != null && this.HostName == hostHasComponentFailure.HostName && this.ComponentType == hostHasComponentFailure.ComponentType && this.ComponentName == hostHasComponentFailure.ComponentName);
        }

        public override bool Equals(object hostHasComponentFailure)
        {
            return Equals(hostHasComponentFailure as HostHasComponentFailure);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + ComponentType + "_" + ComponentName).GetHashCode();
        }
    }

    public class HostHealthStatusSystem : ViewBase, IEquatable<HostHealthStatusSystem>
    {
        public HealthSystemRuntime Runtime { get; set; }

        public void RefreshHealthStatusSystem()
        {
        }

        public void ResetSystemHealthInfo()
        {
        }

        public void ClearSystemEventLog()
        {
        }

        public SystemEventInfo[] FetchSystemEventLog()
        {
            return default(SystemEventInfo[]);
        }

        public bool Equals(HostHealthStatusSystem hostHealthStatusSystem)
        {
            return (hostHealthStatusSystem != null && ((this.Runtime == null && hostHealthStatusSystem.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(hostHealthStatusSystem.Runtime))));
        }

        public override bool Equals(object hostHealthStatusSystem)
        {
            return Equals(hostHealthStatusSystem as HostHealthStatusSystem);
        }

        public override int GetHashCode()
        {
            return (Runtime).GetHashCode();
        }
    }

    public class HostHostBusAdapter : DynamicData, IEquatable<HostHostBusAdapter>
    {
        public string Key { get; set; }

        public string Device { get; set; }

        public int Bus { get; set; }

        public string Status { get; set; }

        public string Model { get; set; }

        public string Driver { get; set; }

        public string Pci { get; set; }

        public bool Equals(HostHostBusAdapter hostHostBusAdapter)
        {
            return (hostHostBusAdapter != null && this.Key == hostHostBusAdapter.Key && this.Device == hostHostBusAdapter.Device && this.Bus == hostHostBusAdapter.Bus && this.Status == hostHostBusAdapter.Status && this.Model == hostHostBusAdapter.Model && this.Driver == hostHostBusAdapter.Driver && this.Pci == hostHostBusAdapter.Pci);
        }

        public override bool Equals(object hostHostBusAdapter)
        {
            return Equals(hostHostBusAdapter as HostHostBusAdapter);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Device + "_" + Bus + "_" + Status + "_" + Model + "_" + Driver + "_" + Pci).GetHashCode();
        }
    }

    public class HostHyperThreadScheduleInfo : DynamicData, IEquatable<HostHyperThreadScheduleInfo>
    {
        public bool Available { get; set; }

        public bool Active { get; set; }

        public bool Config { get; set; }

        public bool Equals(HostHyperThreadScheduleInfo hostHyperThreadScheduleInfo)
        {
            return (hostHyperThreadScheduleInfo != null && this.Available == hostHyperThreadScheduleInfo.Available && this.Active == hostHyperThreadScheduleInfo.Active && this.Config == hostHyperThreadScheduleInfo.Config);
        }

        public override bool Equals(object hostHyperThreadScheduleInfo)
        {
            return Equals(hostHyperThreadScheduleInfo as HostHyperThreadScheduleInfo);
        }

        public override int GetHashCode()
        {
            return (Available + "_" + Active + "_" + Config).GetHashCode();
        }
    }

    public class HostImageConfigManager : ViewBase, IEquatable<HostImageConfigManager>
    {
        public string HostImageConfigGetAcceptance()
        {
            return default(string);
        }

        public HostImageProfileSummary HostImageConfigGetProfile()
        {
            return default(HostImageProfileSummary);
        }

        public void UpdateHostImageAcceptanceLevel(string newAcceptanceLevel)
        {
        }

        public SoftwarePackage[] fetchSoftwarePackages()
        {
            return default(SoftwarePackage[]);
        }

        public DateTime installDate()
        {
            return default(DateTime);
        }

        public bool Equals(HostImageConfigManager hostImageConfigManager)
        {
            return (hostImageConfigManager != null && base.Equals(hostImageConfigManager));
        }

        public override bool Equals(object hostImageConfigManager)
        {
            return Equals(hostImageConfigManager as HostImageConfigManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostImageProfileSummary : DynamicData, IEquatable<HostImageProfileSummary>
    {
        public string Name { get; set; }

        public string Vendor { get; set; }

        public bool Equals(HostImageProfileSummary hostImageProfileSummary)
        {
            return (hostImageProfileSummary != null && this.Name == hostImageProfileSummary.Name && this.Vendor == hostImageProfileSummary.Vendor);
        }

        public override bool Equals(object hostImageProfileSummary)
        {
            return Equals(hostImageProfileSummary as HostImageProfileSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Vendor).GetHashCode();
        }
    }

    public class HostInAuditModeEvent : HostEvent, IEquatable<HostInAuditModeEvent>
    {
        public bool Equals(HostInAuditModeEvent hostInAuditModeEvent)
        {
            return (hostInAuditModeEvent != null && base.Equals(hostInAuditModeEvent));
        }

        public override bool Equals(object hostInAuditModeEvent)
        {
            return Equals(hostInAuditModeEvent as HostInAuditModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostIncompatibleForFaultTolerance : VmFaultToleranceIssue, IEquatable<HostIncompatibleForFaultTolerance>
    {
        public string HostName { get; set; }

        public string Reason { get; set; }

        public bool Equals(HostIncompatibleForFaultTolerance hostIncompatibleForFaultTolerance)
        {
            return (hostIncompatibleForFaultTolerance != null && this.HostName == hostIncompatibleForFaultTolerance.HostName && this.Reason == hostIncompatibleForFaultTolerance.Reason);
        }

        public override bool Equals(object hostIncompatibleForFaultTolerance)
        {
            return Equals(hostIncompatibleForFaultTolerance as HostIncompatibleForFaultTolerance);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Reason).GetHashCode();
        }
    }

    public class HostIncompatibleForRecordReplay : VimFault, IEquatable<HostIncompatibleForRecordReplay>
    {
        public string HostName { get; set; }

        public string Reason { get; set; }

        public bool Equals(HostIncompatibleForRecordReplay hostIncompatibleForRecordReplay)
        {
            return (hostIncompatibleForRecordReplay != null && this.HostName == hostIncompatibleForRecordReplay.HostName && this.Reason == hostIncompatibleForRecordReplay.Reason);
        }

        public override bool Equals(object hostIncompatibleForRecordReplay)
        {
            return Equals(hostIncompatibleForRecordReplay as HostIncompatibleForRecordReplay);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Reason).GetHashCode();
        }
    }

    public class HostInDomain : HostConfigFault, IEquatable<HostInDomain>
    {
        public bool Equals(HostInDomain hostInDomain)
        {
            return (hostInDomain != null && base.Equals(hostInDomain));
        }

        public override bool Equals(object hostInDomain)
        {
            return Equals(hostInDomain as HostInDomain);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostInternetScsiHba : HostHostBusAdapter, IEquatable<HostInternetScsiHba>
    {
        public bool IsSoftwareBased { get; set; }

        public bool? CanBeDisabled { get; set; }

        public HostInternetScsiHbaNetworkBindingSupportType? NetworkBindingSupport { get; set; }

        public HostInternetScsiHbaDiscoveryCapabilities DiscoveryCapabilities { get; set; }

        public HostInternetScsiHbaDiscoveryProperties DiscoveryProperties { get; set; }

        public HostInternetScsiHbaAuthenticationCapabilities AuthenticationCapabilities { get; set; }

        public HostInternetScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        public HostInternetScsiHbaDigestCapabilities DigestCapabilities { get; set; }

        public HostInternetScsiHbaDigestProperties DigestProperties { get; set; }

        public HostInternetScsiHbaIPCapabilities IpCapabilities { get; set; }

        public HostInternetScsiHbaIPProperties IpProperties { get; set; }

        public OptionDef[] SupportedAdvancedOptions { get; set; }

        public HostInternetScsiHbaParamValue[] AdvancedOptions { get; set; }

        public string IScsiName { get; set; }

        public string IScsiAlias { get; set; }

        public HostInternetScsiHbaSendTarget[] ConfiguredSendTarget { get; set; }

        public HostInternetScsiHbaStaticTarget[] ConfiguredStaticTarget { get; set; }

        public int? MaxSpeedMb { get; set; }

        public int? CurrentSpeedMb { get; set; }

        public bool Equals(HostInternetScsiHba hostInternetScsiHba)
        {
            return (hostInternetScsiHba != null && this.IsSoftwareBased == hostInternetScsiHba.IsSoftwareBased && ((this.CanBeDisabled == null && hostInternetScsiHba.CanBeDisabled == null) || (this.CanBeDisabled != null && this.CanBeDisabled.Equals(hostInternetScsiHba.CanBeDisabled))) && ((this.NetworkBindingSupport == null && hostInternetScsiHba.NetworkBindingSupport == null) || (this.NetworkBindingSupport != null && this.NetworkBindingSupport.Equals(hostInternetScsiHba.NetworkBindingSupport))) && ((this.DiscoveryCapabilities == null && hostInternetScsiHba.DiscoveryCapabilities == null) || (this.DiscoveryCapabilities != null && this.DiscoveryCapabilities.Equals(hostInternetScsiHba.DiscoveryCapabilities))) && ((this.DiscoveryProperties == null && hostInternetScsiHba.DiscoveryProperties == null) || (this.DiscoveryProperties != null && this.DiscoveryProperties.Equals(hostInternetScsiHba.DiscoveryProperties))) && ((this.AuthenticationCapabilities == null && hostInternetScsiHba.AuthenticationCapabilities == null) || (this.AuthenticationCapabilities != null && this.AuthenticationCapabilities.Equals(hostInternetScsiHba.AuthenticationCapabilities))) && ((this.AuthenticationProperties == null && hostInternetScsiHba.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(hostInternetScsiHba.AuthenticationProperties))) && ((this.DigestCapabilities == null && hostInternetScsiHba.DigestCapabilities == null) || (this.DigestCapabilities != null && this.DigestCapabilities.Equals(hostInternetScsiHba.DigestCapabilities))) && ((this.DigestProperties == null && hostInternetScsiHba.DigestProperties == null) || (this.DigestProperties != null && this.DigestProperties.Equals(hostInternetScsiHba.DigestProperties))) && ((this.IpCapabilities == null && hostInternetScsiHba.IpCapabilities == null) || (this.IpCapabilities != null && this.IpCapabilities.Equals(hostInternetScsiHba.IpCapabilities))) && ((this.IpProperties == null && hostInternetScsiHba.IpProperties == null) || (this.IpProperties != null && this.IpProperties.Equals(hostInternetScsiHba.IpProperties))) && ((this.SupportedAdvancedOptions == null && hostInternetScsiHba.SupportedAdvancedOptions == null) || (this.SupportedAdvancedOptions != null && hostInternetScsiHba.SupportedAdvancedOptions != null && Enumerable.SequenceEqual(this.SupportedAdvancedOptions, hostInternetScsiHba.SupportedAdvancedOptions))) && ((this.AdvancedOptions == null && hostInternetScsiHba.AdvancedOptions == null) || (this.AdvancedOptions != null && hostInternetScsiHba.AdvancedOptions != null && Enumerable.SequenceEqual(this.AdvancedOptions, hostInternetScsiHba.AdvancedOptions))) && this.IScsiName == hostInternetScsiHba.IScsiName && this.IScsiAlias == hostInternetScsiHba.IScsiAlias && ((this.ConfiguredSendTarget == null && hostInternetScsiHba.ConfiguredSendTarget == null) || (this.ConfiguredSendTarget != null && hostInternetScsiHba.ConfiguredSendTarget != null && Enumerable.SequenceEqual(this.ConfiguredSendTarget, hostInternetScsiHba.ConfiguredSendTarget))) && ((this.ConfiguredStaticTarget == null && hostInternetScsiHba.ConfiguredStaticTarget == null) || (this.ConfiguredStaticTarget != null && hostInternetScsiHba.ConfiguredStaticTarget != null && Enumerable.SequenceEqual(this.ConfiguredStaticTarget, hostInternetScsiHba.ConfiguredStaticTarget))) && ((this.MaxSpeedMb == null && hostInternetScsiHba.MaxSpeedMb == null) || (this.MaxSpeedMb != null && this.MaxSpeedMb.Equals(hostInternetScsiHba.MaxSpeedMb))) && ((this.CurrentSpeedMb == null && hostInternetScsiHba.CurrentSpeedMb == null) || (this.CurrentSpeedMb != null && this.CurrentSpeedMb.Equals(hostInternetScsiHba.CurrentSpeedMb))));
        }

        public override bool Equals(object hostInternetScsiHba)
        {
            return Equals(hostInternetScsiHba as HostInternetScsiHba);
        }

        public override int GetHashCode()
        {
            return (IsSoftwareBased + "_" + CanBeDisabled + "_" + NetworkBindingSupport + "_" + DiscoveryCapabilities + "_" + DiscoveryProperties + "_" + AuthenticationCapabilities + "_" + AuthenticationProperties + "_" + DigestCapabilities + "_" + DigestProperties + "_" + IpCapabilities + "_" + IpProperties + "_" + SupportedAdvancedOptions + "_" + AdvancedOptions + "_" + IScsiName + "_" + IScsiAlias + "_" + ConfiguredSendTarget + "_" + ConfiguredStaticTarget + "_" + MaxSpeedMb + "_" + CurrentSpeedMb).GetHashCode();
        }
    }

    public class HostInternetScsiHbaAuthenticationCapabilities : DynamicData, IEquatable<HostInternetScsiHbaAuthenticationCapabilities>
    {
        public bool ChapAuthSettable { get; set; }

        public bool Krb5AuthSettable { get; set; }

        public bool SrpAuthSettable { get; set; }

        public bool SpkmAuthSettable { get; set; }

        public bool? MutualChapSettable { get; set; }

        public bool? TargetChapSettable { get; set; }

        public bool? TargetMutualChapSettable { get; set; }

        public bool Equals(HostInternetScsiHbaAuthenticationCapabilities hostInternetScsiHbaAuthenticationCapabilities)
        {
            return (hostInternetScsiHbaAuthenticationCapabilities != null && this.ChapAuthSettable == hostInternetScsiHbaAuthenticationCapabilities.ChapAuthSettable && this.Krb5AuthSettable == hostInternetScsiHbaAuthenticationCapabilities.Krb5AuthSettable && this.SrpAuthSettable == hostInternetScsiHbaAuthenticationCapabilities.SrpAuthSettable && this.SpkmAuthSettable == hostInternetScsiHbaAuthenticationCapabilities.SpkmAuthSettable && ((this.MutualChapSettable == null && hostInternetScsiHbaAuthenticationCapabilities.MutualChapSettable == null) || (this.MutualChapSettable != null && this.MutualChapSettable.Equals(hostInternetScsiHbaAuthenticationCapabilities.MutualChapSettable))) && ((this.TargetChapSettable == null && hostInternetScsiHbaAuthenticationCapabilities.TargetChapSettable == null) || (this.TargetChapSettable != null && this.TargetChapSettable.Equals(hostInternetScsiHbaAuthenticationCapabilities.TargetChapSettable))) && ((this.TargetMutualChapSettable == null && hostInternetScsiHbaAuthenticationCapabilities.TargetMutualChapSettable == null) || (this.TargetMutualChapSettable != null && this.TargetMutualChapSettable.Equals(hostInternetScsiHbaAuthenticationCapabilities.TargetMutualChapSettable))));
        }

        public override bool Equals(object hostInternetScsiHbaAuthenticationCapabilities)
        {
            return Equals(hostInternetScsiHbaAuthenticationCapabilities as HostInternetScsiHbaAuthenticationCapabilities);
        }

        public override int GetHashCode()
        {
            return (ChapAuthSettable + "_" + Krb5AuthSettable + "_" + SrpAuthSettable + "_" + SpkmAuthSettable + "_" + MutualChapSettable + "_" + TargetChapSettable + "_" + TargetMutualChapSettable).GetHashCode();
        }
    }

    public class HostInternetScsiHbaAuthenticationProperties : DynamicData, IEquatable<HostInternetScsiHbaAuthenticationProperties>
    {
        public bool ChapAuthEnabled { get; set; }

        public string ChapName { get; set; }

        public string ChapSecret { get; set; }

        public string ChapAuthenticationType { get; set; }

        public bool? ChapInherited { get; set; }

        public string MutualChapName { get; set; }

        public string MutualChapSecret { get; set; }

        public string MutualChapAuthenticationType { get; set; }

        public bool? MutualChapInherited { get; set; }

        public bool Equals(HostInternetScsiHbaAuthenticationProperties hostInternetScsiHbaAuthenticationProperties)
        {
            return (hostInternetScsiHbaAuthenticationProperties != null && this.ChapAuthEnabled == hostInternetScsiHbaAuthenticationProperties.ChapAuthEnabled && this.ChapName == hostInternetScsiHbaAuthenticationProperties.ChapName && this.ChapSecret == hostInternetScsiHbaAuthenticationProperties.ChapSecret && this.ChapAuthenticationType == hostInternetScsiHbaAuthenticationProperties.ChapAuthenticationType && ((this.ChapInherited == null && hostInternetScsiHbaAuthenticationProperties.ChapInherited == null) || (this.ChapInherited != null && this.ChapInherited.Equals(hostInternetScsiHbaAuthenticationProperties.ChapInherited))) && this.MutualChapName == hostInternetScsiHbaAuthenticationProperties.MutualChapName && this.MutualChapSecret == hostInternetScsiHbaAuthenticationProperties.MutualChapSecret && this.MutualChapAuthenticationType == hostInternetScsiHbaAuthenticationProperties.MutualChapAuthenticationType && ((this.MutualChapInherited == null && hostInternetScsiHbaAuthenticationProperties.MutualChapInherited == null) || (this.MutualChapInherited != null && this.MutualChapInherited.Equals(hostInternetScsiHbaAuthenticationProperties.MutualChapInherited))));
        }

        public override bool Equals(object hostInternetScsiHbaAuthenticationProperties)
        {
            return Equals(hostInternetScsiHbaAuthenticationProperties as HostInternetScsiHbaAuthenticationProperties);
        }

        public override int GetHashCode()
        {
            return (ChapAuthEnabled + "_" + ChapName + "_" + ChapSecret + "_" + ChapAuthenticationType + "_" + ChapInherited + "_" + MutualChapName + "_" + MutualChapSecret + "_" + MutualChapAuthenticationType + "_" + MutualChapInherited).GetHashCode();
        }
    }

    public class HostInternetScsiHbaDigestCapabilities : DynamicData, IEquatable<HostInternetScsiHbaDigestCapabilities>
    {
        public bool? HeaderDigestSettable { get; set; }

        public bool? DataDigestSettable { get; set; }

        public bool? TargetHeaderDigestSettable { get; set; }

        public bool? TargetDataDigestSettable { get; set; }

        public bool Equals(HostInternetScsiHbaDigestCapabilities hostInternetScsiHbaDigestCapabilities)
        {
            return (hostInternetScsiHbaDigestCapabilities != null && ((this.HeaderDigestSettable == null && hostInternetScsiHbaDigestCapabilities.HeaderDigestSettable == null) || (this.HeaderDigestSettable != null && this.HeaderDigestSettable.Equals(hostInternetScsiHbaDigestCapabilities.HeaderDigestSettable))) && ((this.DataDigestSettable == null && hostInternetScsiHbaDigestCapabilities.DataDigestSettable == null) || (this.DataDigestSettable != null && this.DataDigestSettable.Equals(hostInternetScsiHbaDigestCapabilities.DataDigestSettable))) && ((this.TargetHeaderDigestSettable == null && hostInternetScsiHbaDigestCapabilities.TargetHeaderDigestSettable == null) || (this.TargetHeaderDigestSettable != null && this.TargetHeaderDigestSettable.Equals(hostInternetScsiHbaDigestCapabilities.TargetHeaderDigestSettable))) && ((this.TargetDataDigestSettable == null && hostInternetScsiHbaDigestCapabilities.TargetDataDigestSettable == null) || (this.TargetDataDigestSettable != null && this.TargetDataDigestSettable.Equals(hostInternetScsiHbaDigestCapabilities.TargetDataDigestSettable))));
        }

        public override bool Equals(object hostInternetScsiHbaDigestCapabilities)
        {
            return Equals(hostInternetScsiHbaDigestCapabilities as HostInternetScsiHbaDigestCapabilities);
        }

        public override int GetHashCode()
        {
            return (HeaderDigestSettable + "_" + DataDigestSettable + "_" + TargetHeaderDigestSettable + "_" + TargetDataDigestSettable).GetHashCode();
        }
    }

    public class HostInternetScsiHbaDigestProperties : DynamicData, IEquatable<HostInternetScsiHbaDigestProperties>
    {
        public string HeaderDigestType { get; set; }

        public bool? HeaderDigestInherited { get; set; }

        public string DataDigestType { get; set; }

        public bool? DataDigestInherited { get; set; }

        public bool Equals(HostInternetScsiHbaDigestProperties hostInternetScsiHbaDigestProperties)
        {
            return (hostInternetScsiHbaDigestProperties != null && this.HeaderDigestType == hostInternetScsiHbaDigestProperties.HeaderDigestType && ((this.HeaderDigestInherited == null && hostInternetScsiHbaDigestProperties.HeaderDigestInherited == null) || (this.HeaderDigestInherited != null && this.HeaderDigestInherited.Equals(hostInternetScsiHbaDigestProperties.HeaderDigestInherited))) && this.DataDigestType == hostInternetScsiHbaDigestProperties.DataDigestType && ((this.DataDigestInherited == null && hostInternetScsiHbaDigestProperties.DataDigestInherited == null) || (this.DataDigestInherited != null && this.DataDigestInherited.Equals(hostInternetScsiHbaDigestProperties.DataDigestInherited))));
        }

        public override bool Equals(object hostInternetScsiHbaDigestProperties)
        {
            return Equals(hostInternetScsiHbaDigestProperties as HostInternetScsiHbaDigestProperties);
        }

        public override int GetHashCode()
        {
            return (HeaderDigestType + "_" + HeaderDigestInherited + "_" + DataDigestType + "_" + DataDigestInherited).GetHashCode();
        }
    }

    public class HostInternetScsiHbaDiscoveryCapabilities : DynamicData, IEquatable<HostInternetScsiHbaDiscoveryCapabilities>
    {
        public bool ISnsDiscoverySettable { get; set; }

        public bool SlpDiscoverySettable { get; set; }

        public bool StaticTargetDiscoverySettable { get; set; }

        public bool SendTargetsDiscoverySettable { get; set; }

        public bool Equals(HostInternetScsiHbaDiscoveryCapabilities hostInternetScsiHbaDiscoveryCapabilities)
        {
            return (hostInternetScsiHbaDiscoveryCapabilities != null && this.ISnsDiscoverySettable == hostInternetScsiHbaDiscoveryCapabilities.ISnsDiscoverySettable && this.SlpDiscoverySettable == hostInternetScsiHbaDiscoveryCapabilities.SlpDiscoverySettable && this.StaticTargetDiscoverySettable == hostInternetScsiHbaDiscoveryCapabilities.StaticTargetDiscoverySettable && this.SendTargetsDiscoverySettable == hostInternetScsiHbaDiscoveryCapabilities.SendTargetsDiscoverySettable);
        }

        public override bool Equals(object hostInternetScsiHbaDiscoveryCapabilities)
        {
            return Equals(hostInternetScsiHbaDiscoveryCapabilities as HostInternetScsiHbaDiscoveryCapabilities);
        }

        public override int GetHashCode()
        {
            return (ISnsDiscoverySettable + "_" + SlpDiscoverySettable + "_" + StaticTargetDiscoverySettable + "_" + SendTargetsDiscoverySettable).GetHashCode();
        }
    }

    public class HostInternetScsiHbaDiscoveryProperties : DynamicData, IEquatable<HostInternetScsiHbaDiscoveryProperties>
    {
        public bool ISnsDiscoveryEnabled { get; set; }

        public string ISnsDiscoveryMethod { get; set; }

        public string ISnsHost { get; set; }

        public bool SlpDiscoveryEnabled { get; set; }

        public string SlpDiscoveryMethod { get; set; }

        public string SlpHost { get; set; }

        public bool StaticTargetDiscoveryEnabled { get; set; }

        public bool SendTargetsDiscoveryEnabled { get; set; }

        public bool Equals(HostInternetScsiHbaDiscoveryProperties hostInternetScsiHbaDiscoveryProperties)
        {
            return (hostInternetScsiHbaDiscoveryProperties != null && this.ISnsDiscoveryEnabled == hostInternetScsiHbaDiscoveryProperties.ISnsDiscoveryEnabled && this.ISnsDiscoveryMethod == hostInternetScsiHbaDiscoveryProperties.ISnsDiscoveryMethod && this.ISnsHost == hostInternetScsiHbaDiscoveryProperties.ISnsHost && this.SlpDiscoveryEnabled == hostInternetScsiHbaDiscoveryProperties.SlpDiscoveryEnabled && this.SlpDiscoveryMethod == hostInternetScsiHbaDiscoveryProperties.SlpDiscoveryMethod && this.SlpHost == hostInternetScsiHbaDiscoveryProperties.SlpHost && this.StaticTargetDiscoveryEnabled == hostInternetScsiHbaDiscoveryProperties.StaticTargetDiscoveryEnabled && this.SendTargetsDiscoveryEnabled == hostInternetScsiHbaDiscoveryProperties.SendTargetsDiscoveryEnabled);
        }

        public override bool Equals(object hostInternetScsiHbaDiscoveryProperties)
        {
            return Equals(hostInternetScsiHbaDiscoveryProperties as HostInternetScsiHbaDiscoveryProperties);
        }

        public override int GetHashCode()
        {
            return (ISnsDiscoveryEnabled + "_" + ISnsDiscoveryMethod + "_" + ISnsHost + "_" + SlpDiscoveryEnabled + "_" + SlpDiscoveryMethod + "_" + SlpHost + "_" + StaticTargetDiscoveryEnabled + "_" + SendTargetsDiscoveryEnabled).GetHashCode();
        }
    }

    public class HostInternetScsiHbaIPCapabilities : DynamicData, IEquatable<HostInternetScsiHbaIPCapabilities>
    {
        public bool AddressSettable { get; set; }

        public bool IpConfigurationMethodSettable { get; set; }

        public bool SubnetMaskSettable { get; set; }

        public bool DefaultGatewaySettable { get; set; }

        public bool PrimaryDnsServerAddressSettable { get; set; }

        public bool AlternateDnsServerAddressSettable { get; set; }

        public bool? Ipv6Supported { get; set; }

        public bool? ArpRedirectSettable { get; set; }

        public bool? MtuSettable { get; set; }

        public bool? HostNameAsTargetAddress { get; set; }

        public bool? NameAliasSettable { get; set; }

        public bool? Ipv4EnableSettable { get; set; }

        public bool? Ipv6EnableSettable { get; set; }

        public bool? Ipv6PrefixLengthSettable { get; set; }

        public int? Ipv6PrefixLength { get; set; }

        public bool? Ipv6DhcpConfigurationSettable { get; set; }

        public bool? Ipv6LinkLocalAutoConfigurationSettable { get; set; }

        public bool? Ipv6RouterAdvertisementConfigurationSettable { get; set; }

        public bool? Ipv6DefaultGatewaySettable { get; set; }

        public int? Ipv6MaxStaticAddressesSupported { get; set; }

        public bool Equals(HostInternetScsiHbaIPCapabilities hostInternetScsiHbaIPCapabilities)
        {
            return (hostInternetScsiHbaIPCapabilities != null && this.AddressSettable == hostInternetScsiHbaIPCapabilities.AddressSettable && this.IpConfigurationMethodSettable == hostInternetScsiHbaIPCapabilities.IpConfigurationMethodSettable && this.SubnetMaskSettable == hostInternetScsiHbaIPCapabilities.SubnetMaskSettable && this.DefaultGatewaySettable == hostInternetScsiHbaIPCapabilities.DefaultGatewaySettable && this.PrimaryDnsServerAddressSettable == hostInternetScsiHbaIPCapabilities.PrimaryDnsServerAddressSettable && this.AlternateDnsServerAddressSettable == hostInternetScsiHbaIPCapabilities.AlternateDnsServerAddressSettable && ((this.Ipv6Supported == null && hostInternetScsiHbaIPCapabilities.Ipv6Supported == null) || (this.Ipv6Supported != null && this.Ipv6Supported.Equals(hostInternetScsiHbaIPCapabilities.Ipv6Supported))) && ((this.ArpRedirectSettable == null && hostInternetScsiHbaIPCapabilities.ArpRedirectSettable == null) || (this.ArpRedirectSettable != null && this.ArpRedirectSettable.Equals(hostInternetScsiHbaIPCapabilities.ArpRedirectSettable))) && ((this.MtuSettable == null && hostInternetScsiHbaIPCapabilities.MtuSettable == null) || (this.MtuSettable != null && this.MtuSettable.Equals(hostInternetScsiHbaIPCapabilities.MtuSettable))) && ((this.HostNameAsTargetAddress == null && hostInternetScsiHbaIPCapabilities.HostNameAsTargetAddress == null) || (this.HostNameAsTargetAddress != null && this.HostNameAsTargetAddress.Equals(hostInternetScsiHbaIPCapabilities.HostNameAsTargetAddress))) && ((this.NameAliasSettable == null && hostInternetScsiHbaIPCapabilities.NameAliasSettable == null) || (this.NameAliasSettable != null && this.NameAliasSettable.Equals(hostInternetScsiHbaIPCapabilities.NameAliasSettable))) && ((this.Ipv4EnableSettable == null && hostInternetScsiHbaIPCapabilities.Ipv4EnableSettable == null) || (this.Ipv4EnableSettable != null && this.Ipv4EnableSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv4EnableSettable))) && ((this.Ipv6EnableSettable == null && hostInternetScsiHbaIPCapabilities.Ipv6EnableSettable == null) || (this.Ipv6EnableSettable != null && this.Ipv6EnableSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6EnableSettable))) && ((this.Ipv6PrefixLengthSettable == null && hostInternetScsiHbaIPCapabilities.Ipv6PrefixLengthSettable == null) || (this.Ipv6PrefixLengthSettable != null && this.Ipv6PrefixLengthSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6PrefixLengthSettable))) && ((this.Ipv6PrefixLength == null && hostInternetScsiHbaIPCapabilities.Ipv6PrefixLength == null) || (this.Ipv6PrefixLength != null && this.Ipv6PrefixLength.Equals(hostInternetScsiHbaIPCapabilities.Ipv6PrefixLength))) && ((this.Ipv6DhcpConfigurationSettable == null && hostInternetScsiHbaIPCapabilities.Ipv6DhcpConfigurationSettable == null) || (this.Ipv6DhcpConfigurationSettable != null && this.Ipv6DhcpConfigurationSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6DhcpConfigurationSettable))) && ((this.Ipv6LinkLocalAutoConfigurationSettable == null && hostInternetScsiHbaIPCapabilities.Ipv6LinkLocalAutoConfigurationSettable == null) || (this.Ipv6LinkLocalAutoConfigurationSettable != null && this.Ipv6LinkLocalAutoConfigurationSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6LinkLocalAutoConfigurationSettable))) && ((this.Ipv6RouterAdvertisementConfigurationSettable == null && hostInternetScsiHbaIPCapabilities.Ipv6RouterAdvertisementConfigurationSettable == null) || (this.Ipv6RouterAdvertisementConfigurationSettable != null && this.Ipv6RouterAdvertisementConfigurationSettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6RouterAdvertisementConfigurationSettable))) && ((this.Ipv6DefaultGatewaySettable == null && hostInternetScsiHbaIPCapabilities.Ipv6DefaultGatewaySettable == null) || (this.Ipv6DefaultGatewaySettable != null && this.Ipv6DefaultGatewaySettable.Equals(hostInternetScsiHbaIPCapabilities.Ipv6DefaultGatewaySettable))) && ((this.Ipv6MaxStaticAddressesSupported == null && hostInternetScsiHbaIPCapabilities.Ipv6MaxStaticAddressesSupported == null) || (this.Ipv6MaxStaticAddressesSupported != null && this.Ipv6MaxStaticAddressesSupported.Equals(hostInternetScsiHbaIPCapabilities.Ipv6MaxStaticAddressesSupported))));
        }

        public override bool Equals(object hostInternetScsiHbaIPCapabilities)
        {
            return Equals(hostInternetScsiHbaIPCapabilities as HostInternetScsiHbaIPCapabilities);
        }

        public override int GetHashCode()
        {
            return (AddressSettable + "_" + IpConfigurationMethodSettable + "_" + SubnetMaskSettable + "_" + DefaultGatewaySettable + "_" + PrimaryDnsServerAddressSettable + "_" + AlternateDnsServerAddressSettable + "_" + Ipv6Supported + "_" + ArpRedirectSettable + "_" + MtuSettable + "_" + HostNameAsTargetAddress + "_" + NameAliasSettable + "_" + Ipv4EnableSettable + "_" + Ipv6EnableSettable + "_" + Ipv6PrefixLengthSettable + "_" + Ipv6PrefixLength + "_" + Ipv6DhcpConfigurationSettable + "_" + Ipv6LinkLocalAutoConfigurationSettable + "_" + Ipv6RouterAdvertisementConfigurationSettable + "_" + Ipv6DefaultGatewaySettable + "_" + Ipv6MaxStaticAddressesSupported).GetHashCode();
        }
    }

    public class HostInternetScsiHbaIPProperties : DynamicData, IEquatable<HostInternetScsiHbaIPProperties>
    {
        public string Mac { get; set; }

        public string Address { get; set; }

        public bool DhcpConfigurationEnabled { get; set; }

        public string SubnetMask { get; set; }

        public string DefaultGateway { get; set; }

        public string PrimaryDnsServerAddress { get; set; }

        public string AlternateDnsServerAddress { get; set; }

        public string Ipv6Address { get; set; }

        public string Ipv6SubnetMask { get; set; }

        public string Ipv6DefaultGateway { get; set; }

        public bool? ArpRedirectEnabled { get; set; }

        public int? Mtu { get; set; }

        public bool? JumboFramesEnabled { get; set; }

        public bool? Ipv4Enabled { get; set; }

        public bool? Ipv6Enabled { get; set; }

        public HostInternetScsiHbaIPv6Properties Ipv6properties { get; set; }

        public bool Equals(HostInternetScsiHbaIPProperties hostInternetScsiHbaIPProperties)
        {
            return (hostInternetScsiHbaIPProperties != null && this.Mac == hostInternetScsiHbaIPProperties.Mac && this.Address == hostInternetScsiHbaIPProperties.Address && this.DhcpConfigurationEnabled == hostInternetScsiHbaIPProperties.DhcpConfigurationEnabled && this.SubnetMask == hostInternetScsiHbaIPProperties.SubnetMask && this.DefaultGateway == hostInternetScsiHbaIPProperties.DefaultGateway && this.PrimaryDnsServerAddress == hostInternetScsiHbaIPProperties.PrimaryDnsServerAddress && this.AlternateDnsServerAddress == hostInternetScsiHbaIPProperties.AlternateDnsServerAddress && this.Ipv6Address == hostInternetScsiHbaIPProperties.Ipv6Address && this.Ipv6SubnetMask == hostInternetScsiHbaIPProperties.Ipv6SubnetMask && this.Ipv6DefaultGateway == hostInternetScsiHbaIPProperties.Ipv6DefaultGateway && ((this.ArpRedirectEnabled == null && hostInternetScsiHbaIPProperties.ArpRedirectEnabled == null) || (this.ArpRedirectEnabled != null && this.ArpRedirectEnabled.Equals(hostInternetScsiHbaIPProperties.ArpRedirectEnabled))) && ((this.Mtu == null && hostInternetScsiHbaIPProperties.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostInternetScsiHbaIPProperties.Mtu))) && ((this.JumboFramesEnabled == null && hostInternetScsiHbaIPProperties.JumboFramesEnabled == null) || (this.JumboFramesEnabled != null && this.JumboFramesEnabled.Equals(hostInternetScsiHbaIPProperties.JumboFramesEnabled))) && ((this.Ipv4Enabled == null && hostInternetScsiHbaIPProperties.Ipv4Enabled == null) || (this.Ipv4Enabled != null && this.Ipv4Enabled.Equals(hostInternetScsiHbaIPProperties.Ipv4Enabled))) && ((this.Ipv6Enabled == null && hostInternetScsiHbaIPProperties.Ipv6Enabled == null) || (this.Ipv6Enabled != null && this.Ipv6Enabled.Equals(hostInternetScsiHbaIPProperties.Ipv6Enabled))) && ((this.Ipv6properties == null && hostInternetScsiHbaIPProperties.Ipv6properties == null) || (this.Ipv6properties != null && this.Ipv6properties.Equals(hostInternetScsiHbaIPProperties.Ipv6properties))));
        }

        public override bool Equals(object hostInternetScsiHbaIPProperties)
        {
            return Equals(hostInternetScsiHbaIPProperties as HostInternetScsiHbaIPProperties);
        }

        public override int GetHashCode()
        {
            return (Mac + "_" + Address + "_" + DhcpConfigurationEnabled + "_" + SubnetMask + "_" + DefaultGateway + "_" + PrimaryDnsServerAddress + "_" + AlternateDnsServerAddress + "_" + Ipv6Address + "_" + Ipv6SubnetMask + "_" + Ipv6DefaultGateway + "_" + ArpRedirectEnabled + "_" + Mtu + "_" + JumboFramesEnabled + "_" + Ipv4Enabled + "_" + Ipv6Enabled + "_" + Ipv6properties).GetHashCode();
        }
    }

    public class HostInternetScsiHbaIPv6Properties : DynamicData, IEquatable<HostInternetScsiHbaIPv6Properties>
    {
        public HostInternetScsiHbaIscsiIpv6Address[] IscsiIpv6Address { get; set; }

        public bool? Ipv6DhcpConfigurationEnabled { get; set; }

        public bool? Ipv6LinkLocalAutoConfigurationEnabled { get; set; }

        public bool? Ipv6RouterAdvertisementConfigurationEnabled { get; set; }

        public string Ipv6DefaultGateway { get; set; }

        public bool Equals(HostInternetScsiHbaIPv6Properties hostInternetScsiHbaIPv6Properties)
        {
            return (hostInternetScsiHbaIPv6Properties != null && ((this.IscsiIpv6Address == null && hostInternetScsiHbaIPv6Properties.IscsiIpv6Address == null) || (this.IscsiIpv6Address != null && hostInternetScsiHbaIPv6Properties.IscsiIpv6Address != null && Enumerable.SequenceEqual(this.IscsiIpv6Address, hostInternetScsiHbaIPv6Properties.IscsiIpv6Address))) && ((this.Ipv6DhcpConfigurationEnabled == null && hostInternetScsiHbaIPv6Properties.Ipv6DhcpConfigurationEnabled == null) || (this.Ipv6DhcpConfigurationEnabled != null && this.Ipv6DhcpConfigurationEnabled.Equals(hostInternetScsiHbaIPv6Properties.Ipv6DhcpConfigurationEnabled))) && ((this.Ipv6LinkLocalAutoConfigurationEnabled == null && hostInternetScsiHbaIPv6Properties.Ipv6LinkLocalAutoConfigurationEnabled == null) || (this.Ipv6LinkLocalAutoConfigurationEnabled != null && this.Ipv6LinkLocalAutoConfigurationEnabled.Equals(hostInternetScsiHbaIPv6Properties.Ipv6LinkLocalAutoConfigurationEnabled))) && ((this.Ipv6RouterAdvertisementConfigurationEnabled == null && hostInternetScsiHbaIPv6Properties.Ipv6RouterAdvertisementConfigurationEnabled == null) || (this.Ipv6RouterAdvertisementConfigurationEnabled != null && this.Ipv6RouterAdvertisementConfigurationEnabled.Equals(hostInternetScsiHbaIPv6Properties.Ipv6RouterAdvertisementConfigurationEnabled))) && this.Ipv6DefaultGateway == hostInternetScsiHbaIPv6Properties.Ipv6DefaultGateway);
        }

        public override bool Equals(object hostInternetScsiHbaIPv6Properties)
        {
            return Equals(hostInternetScsiHbaIPv6Properties as HostInternetScsiHbaIPv6Properties);
        }

        public override int GetHashCode()
        {
            return (IscsiIpv6Address + "_" + Ipv6DhcpConfigurationEnabled + "_" + Ipv6LinkLocalAutoConfigurationEnabled + "_" + Ipv6RouterAdvertisementConfigurationEnabled + "_" + Ipv6DefaultGateway).GetHashCode();
        }
    }

    public class HostInternetScsiHbaIscsiIpv6Address : DynamicData, IEquatable<HostInternetScsiHbaIscsiIpv6Address>
    {
        public string Address { get; set; }

        public int PrefixLength { get; set; }

        public string Origin { get; set; }

        public string Operation { get; set; }

        public bool Equals(HostInternetScsiHbaIscsiIpv6Address hostInternetScsiHbaIscsiIpv6Address)
        {
            return (hostInternetScsiHbaIscsiIpv6Address != null && this.Address == hostInternetScsiHbaIscsiIpv6Address.Address && this.PrefixLength == hostInternetScsiHbaIscsiIpv6Address.PrefixLength && this.Origin == hostInternetScsiHbaIscsiIpv6Address.Origin && this.Operation == hostInternetScsiHbaIscsiIpv6Address.Operation);
        }

        public override bool Equals(object hostInternetScsiHbaIscsiIpv6Address)
        {
            return Equals(hostInternetScsiHbaIscsiIpv6Address as HostInternetScsiHbaIscsiIpv6Address);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + PrefixLength + "_" + Origin + "_" + Operation).GetHashCode();
        }
    }

    public class HostInternetScsiHbaParamValue : OptionValue, IEquatable<HostInternetScsiHbaParamValue>
    {
        public bool? IsInherited { get; set; }

        public bool Equals(HostInternetScsiHbaParamValue hostInternetScsiHbaParamValue)
        {
            return (hostInternetScsiHbaParamValue != null && ((this.IsInherited == null && hostInternetScsiHbaParamValue.IsInherited == null) || (this.IsInherited != null && this.IsInherited.Equals(hostInternetScsiHbaParamValue.IsInherited))));
        }

        public override bool Equals(object hostInternetScsiHbaParamValue)
        {
            return Equals(hostInternetScsiHbaParamValue as HostInternetScsiHbaParamValue);
        }

        public override int GetHashCode()
        {
            return (IsInherited).GetHashCode();
        }
    }

    public class HostInternetScsiHbaSendTarget : DynamicData, IEquatable<HostInternetScsiHbaSendTarget>
    {
        public string Address { get; set; }

        public int? Port { get; set; }

        public HostInternetScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        public HostInternetScsiHbaDigestProperties DigestProperties { get; set; }

        public OptionDef[] SupportedAdvancedOptions { get; set; }

        public HostInternetScsiHbaParamValue[] AdvancedOptions { get; set; }

        public string Parent { get; set; }

        public bool Equals(HostInternetScsiHbaSendTarget hostInternetScsiHbaSendTarget)
        {
            return (hostInternetScsiHbaSendTarget != null && this.Address == hostInternetScsiHbaSendTarget.Address && ((this.Port == null && hostInternetScsiHbaSendTarget.Port == null) || (this.Port != null && this.Port.Equals(hostInternetScsiHbaSendTarget.Port))) && ((this.AuthenticationProperties == null && hostInternetScsiHbaSendTarget.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(hostInternetScsiHbaSendTarget.AuthenticationProperties))) && ((this.DigestProperties == null && hostInternetScsiHbaSendTarget.DigestProperties == null) || (this.DigestProperties != null && this.DigestProperties.Equals(hostInternetScsiHbaSendTarget.DigestProperties))) && ((this.SupportedAdvancedOptions == null && hostInternetScsiHbaSendTarget.SupportedAdvancedOptions == null) || (this.SupportedAdvancedOptions != null && hostInternetScsiHbaSendTarget.SupportedAdvancedOptions != null && Enumerable.SequenceEqual(this.SupportedAdvancedOptions, hostInternetScsiHbaSendTarget.SupportedAdvancedOptions))) && ((this.AdvancedOptions == null && hostInternetScsiHbaSendTarget.AdvancedOptions == null) || (this.AdvancedOptions != null && hostInternetScsiHbaSendTarget.AdvancedOptions != null && Enumerable.SequenceEqual(this.AdvancedOptions, hostInternetScsiHbaSendTarget.AdvancedOptions))) && this.Parent == hostInternetScsiHbaSendTarget.Parent);
        }

        public override bool Equals(object hostInternetScsiHbaSendTarget)
        {
            return Equals(hostInternetScsiHbaSendTarget as HostInternetScsiHbaSendTarget);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + Port + "_" + AuthenticationProperties + "_" + DigestProperties + "_" + SupportedAdvancedOptions + "_" + AdvancedOptions + "_" + Parent).GetHashCode();
        }
    }

    public class HostInternetScsiHbaStaticTarget : DynamicData, IEquatable<HostInternetScsiHbaStaticTarget>
    {
        public string Address { get; set; }

        public int? Port { get; set; }

        public string IScsiName { get; set; }

        public string DiscoveryMethod { get; set; }

        public HostInternetScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        public HostInternetScsiHbaDigestProperties DigestProperties { get; set; }

        public OptionDef[] SupportedAdvancedOptions { get; set; }

        public HostInternetScsiHbaParamValue[] AdvancedOptions { get; set; }

        public string Parent { get; set; }

        public bool Equals(HostInternetScsiHbaStaticTarget hostInternetScsiHbaStaticTarget)
        {
            return (hostInternetScsiHbaStaticTarget != null && this.Address == hostInternetScsiHbaStaticTarget.Address && ((this.Port == null && hostInternetScsiHbaStaticTarget.Port == null) || (this.Port != null && this.Port.Equals(hostInternetScsiHbaStaticTarget.Port))) && this.IScsiName == hostInternetScsiHbaStaticTarget.IScsiName && this.DiscoveryMethod == hostInternetScsiHbaStaticTarget.DiscoveryMethod && ((this.AuthenticationProperties == null && hostInternetScsiHbaStaticTarget.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(hostInternetScsiHbaStaticTarget.AuthenticationProperties))) && ((this.DigestProperties == null && hostInternetScsiHbaStaticTarget.DigestProperties == null) || (this.DigestProperties != null && this.DigestProperties.Equals(hostInternetScsiHbaStaticTarget.DigestProperties))) && ((this.SupportedAdvancedOptions == null && hostInternetScsiHbaStaticTarget.SupportedAdvancedOptions == null) || (this.SupportedAdvancedOptions != null && hostInternetScsiHbaStaticTarget.SupportedAdvancedOptions != null && Enumerable.SequenceEqual(this.SupportedAdvancedOptions, hostInternetScsiHbaStaticTarget.SupportedAdvancedOptions))) && ((this.AdvancedOptions == null && hostInternetScsiHbaStaticTarget.AdvancedOptions == null) || (this.AdvancedOptions != null && hostInternetScsiHbaStaticTarget.AdvancedOptions != null && Enumerable.SequenceEqual(this.AdvancedOptions, hostInternetScsiHbaStaticTarget.AdvancedOptions))) && this.Parent == hostInternetScsiHbaStaticTarget.Parent);
        }

        public override bool Equals(object hostInternetScsiHbaStaticTarget)
        {
            return Equals(hostInternetScsiHbaStaticTarget as HostInternetScsiHbaStaticTarget);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + Port + "_" + IScsiName + "_" + DiscoveryMethod + "_" + AuthenticationProperties + "_" + DigestProperties + "_" + SupportedAdvancedOptions + "_" + AdvancedOptions + "_" + Parent).GetHashCode();
        }
    }

    public class HostInternetScsiHbaTargetSet : DynamicData, IEquatable<HostInternetScsiHbaTargetSet>
    {
        public HostInternetScsiHbaStaticTarget[] StaticTargets { get; set; }

        public HostInternetScsiHbaSendTarget[] SendTargets { get; set; }

        public bool Equals(HostInternetScsiHbaTargetSet hostInternetScsiHbaTargetSet)
        {
            return (hostInternetScsiHbaTargetSet != null && ((this.StaticTargets == null && hostInternetScsiHbaTargetSet.StaticTargets == null) || (this.StaticTargets != null && hostInternetScsiHbaTargetSet.StaticTargets != null && Enumerable.SequenceEqual(this.StaticTargets, hostInternetScsiHbaTargetSet.StaticTargets))) && ((this.SendTargets == null && hostInternetScsiHbaTargetSet.SendTargets == null) || (this.SendTargets != null && hostInternetScsiHbaTargetSet.SendTargets != null && Enumerable.SequenceEqual(this.SendTargets, hostInternetScsiHbaTargetSet.SendTargets))));
        }

        public override bool Equals(object hostInternetScsiHbaTargetSet)
        {
            return Equals(hostInternetScsiHbaTargetSet as HostInternetScsiHbaTargetSet);
        }

        public override int GetHashCode()
        {
            return (StaticTargets + "_" + SendTargets).GetHashCode();
        }
    }

    public class HostInternetScsiTargetTransport : HostTargetTransport, IEquatable<HostInternetScsiTargetTransport>
    {
        public string IScsiName { get; set; }

        public string IScsiAlias { get; set; }

        public string[] Address { get; set; }

        public bool Equals(HostInternetScsiTargetTransport hostInternetScsiTargetTransport)
        {
            return (hostInternetScsiTargetTransport != null && this.IScsiName == hostInternetScsiTargetTransport.IScsiName && this.IScsiAlias == hostInternetScsiTargetTransport.IScsiAlias && ((this.Address == null && hostInternetScsiTargetTransport.Address == null) || (this.Address != null && hostInternetScsiTargetTransport.Address != null && Enumerable.SequenceEqual(this.Address, hostInternetScsiTargetTransport.Address))));
        }

        public override bool Equals(object hostInternetScsiTargetTransport)
        {
            return Equals(hostInternetScsiTargetTransport as HostInternetScsiTargetTransport);
        }

        public override int GetHashCode()
        {
            return (IScsiName + "_" + IScsiAlias + "_" + Address).GetHashCode();
        }
    }

    public class HostInventoryFull : NotEnoughLicenses, IEquatable<HostInventoryFull>
    {
        public int Capacity { get; set; }

        public bool Equals(HostInventoryFull hostInventoryFull)
        {
            return (hostInventoryFull != null && this.Capacity == hostInventoryFull.Capacity);
        }

        public override bool Equals(object hostInventoryFull)
        {
            return Equals(hostInventoryFull as HostInventoryFull);
        }

        public override int GetHashCode()
        {
            return (Capacity).GetHashCode();
        }
    }

    public class HostInventoryFullEvent : LicenseEvent, IEquatable<HostInventoryFullEvent>
    {
        public int Capacity { get; set; }

        public bool Equals(HostInventoryFullEvent hostInventoryFullEvent)
        {
            return (hostInventoryFullEvent != null && this.Capacity == hostInventoryFullEvent.Capacity);
        }

        public override bool Equals(object hostInventoryFullEvent)
        {
            return Equals(hostInventoryFullEvent as HostInventoryFullEvent);
        }

        public override int GetHashCode()
        {
            return (Capacity).GetHashCode();
        }
    }

    public class HostInventoryUnreadableEvent : Event, IEquatable<HostInventoryUnreadableEvent>
    {
        public bool Equals(HostInventoryUnreadableEvent hostInventoryUnreadableEvent)
        {
            return (hostInventoryUnreadableEvent != null && base.Equals(hostInventoryUnreadableEvent));
        }

        public override bool Equals(object hostInventoryUnreadableEvent)
        {
            return Equals(hostInventoryUnreadableEvent as HostInventoryUnreadableEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostIoFilterInfo : IoFilterInfo, IEquatable<HostIoFilterInfo>
    {
        public bool Available { get; set; }

        public bool Equals(HostIoFilterInfo hostIoFilterInfo)
        {
            return (hostIoFilterInfo != null && this.Available == hostIoFilterInfo.Available);
        }

        public override bool Equals(object hostIoFilterInfo)
        {
            return Equals(hostIoFilterInfo as HostIoFilterInfo);
        }

        public override int GetHashCode()
        {
            return (Available).GetHashCode();
        }
    }

    public class HostIpChangedEvent : HostEvent, IEquatable<HostIpChangedEvent>
    {
        public string OldIP { get; set; }

        public string NewIP { get; set; }

        public bool Equals(HostIpChangedEvent hostIpChangedEvent)
        {
            return (hostIpChangedEvent != null && this.OldIP == hostIpChangedEvent.OldIP && this.NewIP == hostIpChangedEvent.NewIP);
        }

        public override bool Equals(object hostIpChangedEvent)
        {
            return Equals(hostIpChangedEvent as HostIpChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldIP + "_" + NewIP).GetHashCode();
        }
    }

    public class HostIpConfig : DynamicData, IEquatable<HostIpConfig>
    {
        public bool Dhcp { get; set; }

        public string IpAddress { get; set; }

        public string SubnetMask { get; set; }

        public HostIpConfigIpV6AddressConfiguration IpV6Config { get; set; }

        public bool Equals(HostIpConfig hostIpConfig)
        {
            return (hostIpConfig != null && this.Dhcp == hostIpConfig.Dhcp && this.IpAddress == hostIpConfig.IpAddress && this.SubnetMask == hostIpConfig.SubnetMask && ((this.IpV6Config == null && hostIpConfig.IpV6Config == null) || (this.IpV6Config != null && this.IpV6Config.Equals(hostIpConfig.IpV6Config))));
        }

        public override bool Equals(object hostIpConfig)
        {
            return Equals(hostIpConfig as HostIpConfig);
        }

        public override int GetHashCode()
        {
            return (Dhcp + "_" + IpAddress + "_" + SubnetMask + "_" + IpV6Config).GetHashCode();
        }
    }

    public class HostIpConfigIpV6Address : DynamicData, IEquatable<HostIpConfigIpV6Address>
    {
        public string IpAddress { get; set; }

        public int PrefixLength { get; set; }

        public string Origin { get; set; }

        public string DadState { get; set; }

        public DateTime? Lifetime { get; set; }

        public string Operation { get; set; }

        public bool Equals(HostIpConfigIpV6Address hostIpConfigIpV6Address)
        {
            return (hostIpConfigIpV6Address != null && this.IpAddress == hostIpConfigIpV6Address.IpAddress && this.PrefixLength == hostIpConfigIpV6Address.PrefixLength && this.Origin == hostIpConfigIpV6Address.Origin && this.DadState == hostIpConfigIpV6Address.DadState && ((this.Lifetime == null && hostIpConfigIpV6Address.Lifetime == null) || (this.Lifetime != null && this.Lifetime.Equals(hostIpConfigIpV6Address.Lifetime))) && this.Operation == hostIpConfigIpV6Address.Operation);
        }

        public override bool Equals(object hostIpConfigIpV6Address)
        {
            return Equals(hostIpConfigIpV6Address as HostIpConfigIpV6Address);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + PrefixLength + "_" + Origin + "_" + DadState + "_" + Lifetime + "_" + Operation).GetHashCode();
        }
    }

    public class HostIpConfigIpV6AddressConfiguration : DynamicData, IEquatable<HostIpConfigIpV6AddressConfiguration>
    {
        public HostIpConfigIpV6Address[] IpV6Address { get; set; }

        public bool? AutoConfigurationEnabled { get; set; }

        public bool? DhcpV6Enabled { get; set; }

        public bool Equals(HostIpConfigIpV6AddressConfiguration hostIpConfigIpV6AddressConfiguration)
        {
            return (hostIpConfigIpV6AddressConfiguration != null && ((this.IpV6Address == null && hostIpConfigIpV6AddressConfiguration.IpV6Address == null) || (this.IpV6Address != null && hostIpConfigIpV6AddressConfiguration.IpV6Address != null && Enumerable.SequenceEqual(this.IpV6Address, hostIpConfigIpV6AddressConfiguration.IpV6Address))) && ((this.AutoConfigurationEnabled == null && hostIpConfigIpV6AddressConfiguration.AutoConfigurationEnabled == null) || (this.AutoConfigurationEnabled != null && this.AutoConfigurationEnabled.Equals(hostIpConfigIpV6AddressConfiguration.AutoConfigurationEnabled))) && ((this.DhcpV6Enabled == null && hostIpConfigIpV6AddressConfiguration.DhcpV6Enabled == null) || (this.DhcpV6Enabled != null && this.DhcpV6Enabled.Equals(hostIpConfigIpV6AddressConfiguration.DhcpV6Enabled))));
        }

        public override bool Equals(object hostIpConfigIpV6AddressConfiguration)
        {
            return Equals(hostIpConfigIpV6AddressConfiguration as HostIpConfigIpV6AddressConfiguration);
        }

        public override int GetHashCode()
        {
            return (IpV6Address + "_" + AutoConfigurationEnabled + "_" + DhcpV6Enabled).GetHashCode();
        }
    }

    public class HostIpInconsistentEvent : HostEvent, IEquatable<HostIpInconsistentEvent>
    {
        public string IpAddress { get; set; }

        public string IpAddress2 { get; set; }

        public bool Equals(HostIpInconsistentEvent hostIpInconsistentEvent)
        {
            return (hostIpInconsistentEvent != null && this.IpAddress == hostIpInconsistentEvent.IpAddress && this.IpAddress2 == hostIpInconsistentEvent.IpAddress2);
        }

        public override bool Equals(object hostIpInconsistentEvent)
        {
            return Equals(hostIpInconsistentEvent as HostIpInconsistentEvent);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + IpAddress2).GetHashCode();
        }
    }

    public class HostIpmiInfo : DynamicData, IEquatable<HostIpmiInfo>
    {
        public string BmcIpAddress { get; set; }

        public string BmcMacAddress { get; set; }

        public string Login { get; set; }

        public string Password { get; set; }

        public bool Equals(HostIpmiInfo hostIpmiInfo)
        {
            return (hostIpmiInfo != null && this.BmcIpAddress == hostIpmiInfo.BmcIpAddress && this.BmcMacAddress == hostIpmiInfo.BmcMacAddress && this.Login == hostIpmiInfo.Login && this.Password == hostIpmiInfo.Password);
        }

        public override bool Equals(object hostIpmiInfo)
        {
            return Equals(hostIpmiInfo as HostIpmiInfo);
        }

        public override int GetHashCode()
        {
            return (BmcIpAddress + "_" + BmcMacAddress + "_" + Login + "_" + Password).GetHashCode();
        }
    }

    public class HostIpRouteConfig : DynamicData, IEquatable<HostIpRouteConfig>
    {
        public string DefaultGateway { get; set; }

        public string GatewayDevice { get; set; }

        public string IpV6DefaultGateway { get; set; }

        public string IpV6GatewayDevice { get; set; }

        public bool Equals(HostIpRouteConfig hostIpRouteConfig)
        {
            return (hostIpRouteConfig != null && this.DefaultGateway == hostIpRouteConfig.DefaultGateway && this.GatewayDevice == hostIpRouteConfig.GatewayDevice && this.IpV6DefaultGateway == hostIpRouteConfig.IpV6DefaultGateway && this.IpV6GatewayDevice == hostIpRouteConfig.IpV6GatewayDevice);
        }

        public override bool Equals(object hostIpRouteConfig)
        {
            return Equals(hostIpRouteConfig as HostIpRouteConfig);
        }

        public override int GetHashCode()
        {
            return (DefaultGateway + "_" + GatewayDevice + "_" + IpV6DefaultGateway + "_" + IpV6GatewayDevice).GetHashCode();
        }
    }

    public class HostIpRouteConfigSpec : HostIpRouteConfig, IEquatable<HostIpRouteConfigSpec>
    {
        public HostVirtualNicConnection GatewayDeviceConnection { get; set; }

        public HostVirtualNicConnection IpV6GatewayDeviceConnection { get; set; }

        public bool Equals(HostIpRouteConfigSpec hostIpRouteConfigSpec)
        {
            return (hostIpRouteConfigSpec != null && ((this.GatewayDeviceConnection == null && hostIpRouteConfigSpec.GatewayDeviceConnection == null) || (this.GatewayDeviceConnection != null && this.GatewayDeviceConnection.Equals(hostIpRouteConfigSpec.GatewayDeviceConnection))) && ((this.IpV6GatewayDeviceConnection == null && hostIpRouteConfigSpec.IpV6GatewayDeviceConnection == null) || (this.IpV6GatewayDeviceConnection != null && this.IpV6GatewayDeviceConnection.Equals(hostIpRouteConfigSpec.IpV6GatewayDeviceConnection))));
        }

        public override bool Equals(object hostIpRouteConfigSpec)
        {
            return Equals(hostIpRouteConfigSpec as HostIpRouteConfigSpec);
        }

        public override int GetHashCode()
        {
            return (GatewayDeviceConnection + "_" + IpV6GatewayDeviceConnection).GetHashCode();
        }
    }

    public class HostIpRouteEntry : DynamicData, IEquatable<HostIpRouteEntry>
    {
        public string Network { get; set; }

        public int PrefixLength { get; set; }

        public string Gateway { get; set; }

        public string DeviceName { get; set; }

        public bool Equals(HostIpRouteEntry hostIpRouteEntry)
        {
            return (hostIpRouteEntry != null && this.Network == hostIpRouteEntry.Network && this.PrefixLength == hostIpRouteEntry.PrefixLength && this.Gateway == hostIpRouteEntry.Gateway && this.DeviceName == hostIpRouteEntry.DeviceName);
        }

        public override bool Equals(object hostIpRouteEntry)
        {
            return Equals(hostIpRouteEntry as HostIpRouteEntry);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + PrefixLength + "_" + Gateway + "_" + DeviceName).GetHashCode();
        }
    }

    public class HostIpRouteOp : DynamicData, IEquatable<HostIpRouteOp>
    {
        public string ChangeOperation { get; set; }

        public HostIpRouteEntry Route { get; set; }

        public bool Equals(HostIpRouteOp hostIpRouteOp)
        {
            return (hostIpRouteOp != null && this.ChangeOperation == hostIpRouteOp.ChangeOperation && ((this.Route == null && hostIpRouteOp.Route == null) || (this.Route != null && this.Route.Equals(hostIpRouteOp.Route))));
        }

        public override bool Equals(object hostIpRouteOp)
        {
            return Equals(hostIpRouteOp as HostIpRouteOp);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Route).GetHashCode();
        }
    }

    public class HostIpRouteTableConfig : DynamicData, IEquatable<HostIpRouteTableConfig>
    {
        public HostIpRouteOp[] IpRoute { get; set; }

        public HostIpRouteOp[] Ipv6Route { get; set; }

        public bool Equals(HostIpRouteTableConfig hostIpRouteTableConfig)
        {
            return (hostIpRouteTableConfig != null && ((this.IpRoute == null && hostIpRouteTableConfig.IpRoute == null) || (this.IpRoute != null && hostIpRouteTableConfig.IpRoute != null && Enumerable.SequenceEqual(this.IpRoute, hostIpRouteTableConfig.IpRoute))) && ((this.Ipv6Route == null && hostIpRouteTableConfig.Ipv6Route == null) || (this.Ipv6Route != null && hostIpRouteTableConfig.Ipv6Route != null && Enumerable.SequenceEqual(this.Ipv6Route, hostIpRouteTableConfig.Ipv6Route))));
        }

        public override bool Equals(object hostIpRouteTableConfig)
        {
            return Equals(hostIpRouteTableConfig as HostIpRouteTableConfig);
        }

        public override int GetHashCode()
        {
            return (IpRoute + "_" + Ipv6Route).GetHashCode();
        }
    }

    public class HostIpRouteTableInfo : DynamicData, IEquatable<HostIpRouteTableInfo>
    {
        public HostIpRouteEntry[] IpRoute { get; set; }

        public HostIpRouteEntry[] Ipv6Route { get; set; }

        public bool Equals(HostIpRouteTableInfo hostIpRouteTableInfo)
        {
            return (hostIpRouteTableInfo != null && ((this.IpRoute == null && hostIpRouteTableInfo.IpRoute == null) || (this.IpRoute != null && hostIpRouteTableInfo.IpRoute != null && Enumerable.SequenceEqual(this.IpRoute, hostIpRouteTableInfo.IpRoute))) && ((this.Ipv6Route == null && hostIpRouteTableInfo.Ipv6Route == null) || (this.Ipv6Route != null && hostIpRouteTableInfo.Ipv6Route != null && Enumerable.SequenceEqual(this.Ipv6Route, hostIpRouteTableInfo.Ipv6Route))));
        }

        public override bool Equals(object hostIpRouteTableInfo)
        {
            return Equals(hostIpRouteTableInfo as HostIpRouteTableInfo);
        }

        public override int GetHashCode()
        {
            return (IpRoute + "_" + Ipv6Route).GetHashCode();
        }
    }

    public class HostIpToShortNameFailedEvent : HostEvent, IEquatable<HostIpToShortNameFailedEvent>
    {
        public bool Equals(HostIpToShortNameFailedEvent hostIpToShortNameFailedEvent)
        {
            return (hostIpToShortNameFailedEvent != null && base.Equals(hostIpToShortNameFailedEvent));
        }

        public override bool Equals(object hostIpToShortNameFailedEvent)
        {
            return Equals(hostIpToShortNameFailedEvent as HostIpToShortNameFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostIsolationIpPingFailedEvent : HostDasEvent, IEquatable<HostIsolationIpPingFailedEvent>
    {
        public string IsolationIp { get; set; }

        public bool Equals(HostIsolationIpPingFailedEvent hostIsolationIpPingFailedEvent)
        {
            return (hostIsolationIpPingFailedEvent != null && this.IsolationIp == hostIsolationIpPingFailedEvent.IsolationIp);
        }

        public override bool Equals(object hostIsolationIpPingFailedEvent)
        {
            return Equals(hostIsolationIpPingFailedEvent as HostIsolationIpPingFailedEvent);
        }

        public override int GetHashCode()
        {
            return (IsolationIp).GetHashCode();
        }
    }

    public class HostKernelModuleSystem : ViewBase, IEquatable<HostKernelModuleSystem>
    {
        public KernelModuleInfo[] QueryModules()
        {
            return default(KernelModuleInfo[]);
        }

        public void UpdateModuleOptionString(string name, string options)
        {
        }

        public string QueryConfiguredModuleOptionString(string name)
        {
            return default(string);
        }

        public bool Equals(HostKernelModuleSystem hostKernelModuleSystem)
        {
            return (hostKernelModuleSystem != null && base.Equals(hostKernelModuleSystem));
        }

        public override bool Equals(object hostKernelModuleSystem)
        {
            return Equals(hostKernelModuleSystem as HostKernelModuleSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostLicensableResourceInfo : DynamicData, IEquatable<HostLicensableResourceInfo>
    {
        public KeyAnyValue[] Resource { get; set; }

        public bool Equals(HostLicensableResourceInfo hostLicensableResourceInfo)
        {
            return (hostLicensableResourceInfo != null && ((this.Resource == null && hostLicensableResourceInfo.Resource == null) || (this.Resource != null && hostLicensableResourceInfo.Resource != null && Enumerable.SequenceEqual(this.Resource, hostLicensableResourceInfo.Resource))));
        }

        public override bool Equals(object hostLicensableResourceInfo)
        {
            return Equals(hostLicensableResourceInfo as HostLicensableResourceInfo);
        }

        public override int GetHashCode()
        {
            return (Resource).GetHashCode();
        }
    }

    public class HostLicenseConnectInfo : DynamicData, IEquatable<HostLicenseConnectInfo>
    {
        public LicenseManagerLicenseInfo License { get; set; }

        public LicenseManagerEvaluationInfo Evaluation { get; set; }

        public HostLicensableResourceInfo Resource { get; set; }

        public bool Equals(HostLicenseConnectInfo hostLicenseConnectInfo)
        {
            return (hostLicenseConnectInfo != null && ((this.License == null && hostLicenseConnectInfo.License == null) || (this.License != null && this.License.Equals(hostLicenseConnectInfo.License))) && ((this.Evaluation == null && hostLicenseConnectInfo.Evaluation == null) || (this.Evaluation != null && this.Evaluation.Equals(hostLicenseConnectInfo.Evaluation))) && ((this.Resource == null && hostLicenseConnectInfo.Resource == null) || (this.Resource != null && this.Resource.Equals(hostLicenseConnectInfo.Resource))));
        }

        public override bool Equals(object hostLicenseConnectInfo)
        {
            return Equals(hostLicenseConnectInfo as HostLicenseConnectInfo);
        }

        public override int GetHashCode()
        {
            return (License + "_" + Evaluation + "_" + Resource).GetHashCode();
        }
    }

    public class HostLicenseExpiredEvent : LicenseEvent, IEquatable<HostLicenseExpiredEvent>
    {
        public bool Equals(HostLicenseExpiredEvent hostLicenseExpiredEvent)
        {
            return (hostLicenseExpiredEvent != null && base.Equals(hostLicenseExpiredEvent));
        }

        public override bool Equals(object hostLicenseExpiredEvent)
        {
            return Equals(hostLicenseExpiredEvent as HostLicenseExpiredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostLicenseSpec : DynamicData, IEquatable<HostLicenseSpec>
    {
        public LicenseSource Source { get; set; }

        public string EditionKey { get; set; }

        public string[] DisabledFeatureKey { get; set; }

        public string[] EnabledFeatureKey { get; set; }

        public bool Equals(HostLicenseSpec hostLicenseSpec)
        {
            return (hostLicenseSpec != null && ((this.Source == null && hostLicenseSpec.Source == null) || (this.Source != null && this.Source.Equals(hostLicenseSpec.Source))) && this.EditionKey == hostLicenseSpec.EditionKey && ((this.DisabledFeatureKey == null && hostLicenseSpec.DisabledFeatureKey == null) || (this.DisabledFeatureKey != null && hostLicenseSpec.DisabledFeatureKey != null && Enumerable.SequenceEqual(this.DisabledFeatureKey, hostLicenseSpec.DisabledFeatureKey))) && ((this.EnabledFeatureKey == null && hostLicenseSpec.EnabledFeatureKey == null) || (this.EnabledFeatureKey != null && hostLicenseSpec.EnabledFeatureKey != null && Enumerable.SequenceEqual(this.EnabledFeatureKey, hostLicenseSpec.EnabledFeatureKey))));
        }

        public override bool Equals(object hostLicenseSpec)
        {
            return Equals(hostLicenseSpec as HostLicenseSpec);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + EditionKey + "_" + DisabledFeatureKey + "_" + EnabledFeatureKey).GetHashCode();
        }
    }

    public class HostListSummary : DynamicData, IEquatable<HostListSummary>
    {
        public ManagedObjectReference Host { get; set; }

        public HostHardwareSummary Hardware { get; set; }

        public HostRuntimeInfo Runtime { get; set; }

        public HostConfigSummary Config { get; set; }

        public HostListSummaryQuickStats QuickStats { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public bool RebootRequired { get; set; }

        public CustomFieldValue[] CustomValue { get; set; }

        public string ManagementServerIp { get; set; }

        public string MaxEVCModeKey { get; set; }

        public string CurrentEVCModeKey { get; set; }

        public HostListSummaryGatewaySummary Gateway { get; set; }

        public HostTpmAttestationInfo TpmAttestation { get; set; }

        public HostListSummary_LinkedView LinkedView { get; set; }

        public bool Equals(HostListSummary hostListSummary)
        {
            return (hostListSummary != null && ((this.Host == null && hostListSummary.Host == null) || (this.Host != null && this.Host.Equals(hostListSummary.Host))) && ((this.Hardware == null && hostListSummary.Hardware == null) || (this.Hardware != null && this.Hardware.Equals(hostListSummary.Hardware))) && ((this.Runtime == null && hostListSummary.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(hostListSummary.Runtime))) && ((this.Config == null && hostListSummary.Config == null) || (this.Config != null && this.Config.Equals(hostListSummary.Config))) && ((this.QuickStats == null && hostListSummary.QuickStats == null) || (this.QuickStats != null && this.QuickStats.Equals(hostListSummary.QuickStats))) && this.OverallStatus == hostListSummary.OverallStatus && this.RebootRequired == hostListSummary.RebootRequired && ((this.CustomValue == null && hostListSummary.CustomValue == null) || (this.CustomValue != null && hostListSummary.CustomValue != null && Enumerable.SequenceEqual(this.CustomValue, hostListSummary.CustomValue))) && this.ManagementServerIp == hostListSummary.ManagementServerIp && this.MaxEVCModeKey == hostListSummary.MaxEVCModeKey && this.CurrentEVCModeKey == hostListSummary.CurrentEVCModeKey && ((this.Gateway == null && hostListSummary.Gateway == null) || (this.Gateway != null && this.Gateway.Equals(hostListSummary.Gateway))) && ((this.TpmAttestation == null && hostListSummary.TpmAttestation == null) || (this.TpmAttestation != null && this.TpmAttestation.Equals(hostListSummary.TpmAttestation))) && ((this.LinkedView == null && hostListSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostListSummary.LinkedView))));
        }

        public override bool Equals(object hostListSummary)
        {
            return Equals(hostListSummary as HostListSummary);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Hardware + "_" + Runtime + "_" + Config + "_" + QuickStats + "_" + OverallStatus + "_" + RebootRequired + "_" + CustomValue + "_" + ManagementServerIp + "_" + MaxEVCModeKey + "_" + CurrentEVCModeKey + "_" + Gateway + "_" + TpmAttestation + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostListSummary_LinkedView : IEquatable<HostListSummary_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostListSummary_LinkedView hostListSummary_LinkedView)
        {
            return (hostListSummary_LinkedView != null && ((this.Host == null && hostListSummary_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostListSummary_LinkedView.Host))));
        }

        public override bool Equals(object hostListSummary_LinkedView)
        {
            return Equals(hostListSummary_LinkedView as HostListSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostListSummaryGatewaySummary : DynamicData, IEquatable<HostListSummaryGatewaySummary>
    {
        public string GatewayType { get; set; }

        public string GatewayId { get; set; }

        public bool Equals(HostListSummaryGatewaySummary hostListSummaryGatewaySummary)
        {
            return (hostListSummaryGatewaySummary != null && this.GatewayType == hostListSummaryGatewaySummary.GatewayType && this.GatewayId == hostListSummaryGatewaySummary.GatewayId);
        }

        public override bool Equals(object hostListSummaryGatewaySummary)
        {
            return Equals(hostListSummaryGatewaySummary as HostListSummaryGatewaySummary);
        }

        public override int GetHashCode()
        {
            return (GatewayType + "_" + GatewayId).GetHashCode();
        }
    }

    public class HostListSummaryQuickStats : DynamicData, IEquatable<HostListSummaryQuickStats>
    {
        public int? OverallCpuUsage { get; set; }

        public int? OverallMemoryUsage { get; set; }

        public int? DistributedCpuFairness { get; set; }

        public int? DistributedMemoryFairness { get; set; }

        public int? AvailablePMemCapacity { get; set; }

        public int? Uptime { get; set; }

        public bool Equals(HostListSummaryQuickStats hostListSummaryQuickStats)
        {
            return (hostListSummaryQuickStats != null && ((this.OverallCpuUsage == null && hostListSummaryQuickStats.OverallCpuUsage == null) || (this.OverallCpuUsage != null && this.OverallCpuUsage.Equals(hostListSummaryQuickStats.OverallCpuUsage))) && ((this.OverallMemoryUsage == null && hostListSummaryQuickStats.OverallMemoryUsage == null) || (this.OverallMemoryUsage != null && this.OverallMemoryUsage.Equals(hostListSummaryQuickStats.OverallMemoryUsage))) && ((this.DistributedCpuFairness == null && hostListSummaryQuickStats.DistributedCpuFairness == null) || (this.DistributedCpuFairness != null && this.DistributedCpuFairness.Equals(hostListSummaryQuickStats.DistributedCpuFairness))) && ((this.DistributedMemoryFairness == null && hostListSummaryQuickStats.DistributedMemoryFairness == null) || (this.DistributedMemoryFairness != null && this.DistributedMemoryFairness.Equals(hostListSummaryQuickStats.DistributedMemoryFairness))) && ((this.AvailablePMemCapacity == null && hostListSummaryQuickStats.AvailablePMemCapacity == null) || (this.AvailablePMemCapacity != null && this.AvailablePMemCapacity.Equals(hostListSummaryQuickStats.AvailablePMemCapacity))) && ((this.Uptime == null && hostListSummaryQuickStats.Uptime == null) || (this.Uptime != null && this.Uptime.Equals(hostListSummaryQuickStats.Uptime))));
        }

        public override bool Equals(object hostListSummaryQuickStats)
        {
            return Equals(hostListSummaryQuickStats as HostListSummaryQuickStats);
        }

        public override int GetHashCode()
        {
            return (OverallCpuUsage + "_" + OverallMemoryUsage + "_" + DistributedCpuFairness + "_" + DistributedMemoryFairness + "_" + AvailablePMemCapacity + "_" + Uptime).GetHashCode();
        }
    }

    public class HostLocalAccountManager : ViewBase, IEquatable<HostLocalAccountManager>
    {
        public void CreateUser(HostAccountSpec user)
        {
        }

        public void UpdateUser(HostAccountSpec user)
        {
        }

        public void CreateGroup(HostAccountSpec group)
        {
        }

        public void RemoveUser(string userName)
        {
        }

        public void RemoveGroup(string groupName)
        {
        }

        public void AssignUserToGroup(string user, string group)
        {
        }

        public void UnassignUserFromGroup(string user, string group)
        {
        }

        public bool Equals(HostLocalAccountManager hostLocalAccountManager)
        {
            return (hostLocalAccountManager != null && base.Equals(hostLocalAccountManager));
        }

        public override bool Equals(object hostLocalAccountManager)
        {
            return Equals(hostLocalAccountManager as HostLocalAccountManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostLocalAuthentication : HostAuthenticationStore, IEquatable<HostLocalAuthentication>
    {
        public bool Equals(HostLocalAuthentication hostLocalAuthentication)
        {
            return (hostLocalAuthentication != null && base.Equals(hostLocalAuthentication));
        }

        public override bool Equals(object hostLocalAuthentication)
        {
            return Equals(hostLocalAuthentication as HostLocalAuthentication);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostLocalAuthenticationInfo : HostAuthenticationStoreInfo, IEquatable<HostLocalAuthenticationInfo>
    {
        public bool Equals(HostLocalAuthenticationInfo hostLocalAuthenticationInfo)
        {
            return (hostLocalAuthenticationInfo != null && base.Equals(hostLocalAuthenticationInfo));
        }

        public override bool Equals(object hostLocalAuthenticationInfo)
        {
            return Equals(hostLocalAuthenticationInfo as HostLocalAuthenticationInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostLocalFileSystemVolume : HostFileSystemVolume, IEquatable<HostLocalFileSystemVolume>
    {
        public string Device { get; set; }

        public bool Equals(HostLocalFileSystemVolume hostLocalFileSystemVolume)
        {
            return (hostLocalFileSystemVolume != null && this.Device == hostLocalFileSystemVolume.Device);
        }

        public override bool Equals(object hostLocalFileSystemVolume)
        {
            return Equals(hostLocalFileSystemVolume as HostLocalFileSystemVolume);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class HostLocalFileSystemVolumeSpec : DynamicData, IEquatable<HostLocalFileSystemVolumeSpec>
    {
        public string Device { get; set; }

        public string LocalPath { get; set; }

        public bool Equals(HostLocalFileSystemVolumeSpec hostLocalFileSystemVolumeSpec)
        {
            return (hostLocalFileSystemVolumeSpec != null && this.Device == hostLocalFileSystemVolumeSpec.Device && this.LocalPath == hostLocalFileSystemVolumeSpec.LocalPath);
        }

        public override bool Equals(object hostLocalFileSystemVolumeSpec)
        {
            return Equals(hostLocalFileSystemVolumeSpec as HostLocalFileSystemVolumeSpec);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + LocalPath).GetHashCode();
        }
    }

    public class HostLocalPortCreatedEvent : DvsEvent, IEquatable<HostLocalPortCreatedEvent>
    {
        public DVSHostLocalPortInfo HostLocalPort { get; set; }

        public bool Equals(HostLocalPortCreatedEvent hostLocalPortCreatedEvent)
        {
            return (hostLocalPortCreatedEvent != null && ((this.HostLocalPort == null && hostLocalPortCreatedEvent.HostLocalPort == null) || (this.HostLocalPort != null && this.HostLocalPort.Equals(hostLocalPortCreatedEvent.HostLocalPort))));
        }

        public override bool Equals(object hostLocalPortCreatedEvent)
        {
            return Equals(hostLocalPortCreatedEvent as HostLocalPortCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (HostLocalPort).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerDiskLayoutSpec : DynamicData, IEquatable<HostLowLevelProvisioningManagerDiskLayoutSpec>
    {
        public string ControllerType { get; set; }

        public int BusNumber { get; set; }

        public int UnitNumber { get; set; }

        public string SrcFilename { get; set; }

        public string DstFilename { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerDiskLayoutSpec hostLowLevelProvisioningManagerDiskLayoutSpec)
        {
            return (hostLowLevelProvisioningManagerDiskLayoutSpec != null && this.ControllerType == hostLowLevelProvisioningManagerDiskLayoutSpec.ControllerType && this.BusNumber == hostLowLevelProvisioningManagerDiskLayoutSpec.BusNumber && this.UnitNumber == hostLowLevelProvisioningManagerDiskLayoutSpec.UnitNumber && this.SrcFilename == hostLowLevelProvisioningManagerDiskLayoutSpec.SrcFilename && this.DstFilename == hostLowLevelProvisioningManagerDiskLayoutSpec.DstFilename);
        }

        public override bool Equals(object hostLowLevelProvisioningManagerDiskLayoutSpec)
        {
            return Equals(hostLowLevelProvisioningManagerDiskLayoutSpec as HostLowLevelProvisioningManagerDiskLayoutSpec);
        }

        public override int GetHashCode()
        {
            return (ControllerType + "_" + BusNumber + "_" + UnitNumber + "_" + SrcFilename + "_" + DstFilename).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerFileDeleteResult : DynamicData, IEquatable<HostLowLevelProvisioningManagerFileDeleteResult>
    {
        public string FileName { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerFileDeleteResult hostLowLevelProvisioningManagerFileDeleteResult)
        {
            return (hostLowLevelProvisioningManagerFileDeleteResult != null && this.FileName == hostLowLevelProvisioningManagerFileDeleteResult.FileName && ((this.Fault == null && hostLowLevelProvisioningManagerFileDeleteResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostLowLevelProvisioningManagerFileDeleteResult.Fault))));
        }

        public override bool Equals(object hostLowLevelProvisioningManagerFileDeleteResult)
        {
            return Equals(hostLowLevelProvisioningManagerFileDeleteResult as HostLowLevelProvisioningManagerFileDeleteResult);
        }

        public override int GetHashCode()
        {
            return (FileName + "_" + Fault).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerFileDeleteSpec : DynamicData, IEquatable<HostLowLevelProvisioningManagerFileDeleteSpec>
    {
        public string FileName { get; set; }

        public string FileType { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerFileDeleteSpec hostLowLevelProvisioningManagerFileDeleteSpec)
        {
            return (hostLowLevelProvisioningManagerFileDeleteSpec != null && this.FileName == hostLowLevelProvisioningManagerFileDeleteSpec.FileName && this.FileType == hostLowLevelProvisioningManagerFileDeleteSpec.FileType);
        }

        public override bool Equals(object hostLowLevelProvisioningManagerFileDeleteSpec)
        {
            return Equals(hostLowLevelProvisioningManagerFileDeleteSpec as HostLowLevelProvisioningManagerFileDeleteSpec);
        }

        public override int GetHashCode()
        {
            return (FileName + "_" + FileType).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerFileReserveResult : DynamicData, IEquatable<HostLowLevelProvisioningManagerFileReserveResult>
    {
        public string BaseName { get; set; }

        public string ParentDir { get; set; }

        public string ReservedName { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerFileReserveResult hostLowLevelProvisioningManagerFileReserveResult)
        {
            return (hostLowLevelProvisioningManagerFileReserveResult != null && this.BaseName == hostLowLevelProvisioningManagerFileReserveResult.BaseName && this.ParentDir == hostLowLevelProvisioningManagerFileReserveResult.ParentDir && this.ReservedName == hostLowLevelProvisioningManagerFileReserveResult.ReservedName);
        }

        public override bool Equals(object hostLowLevelProvisioningManagerFileReserveResult)
        {
            return Equals(hostLowLevelProvisioningManagerFileReserveResult as HostLowLevelProvisioningManagerFileReserveResult);
        }

        public override int GetHashCode()
        {
            return (BaseName + "_" + ParentDir + "_" + ReservedName).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerFileReserveSpec : DynamicData, IEquatable<HostLowLevelProvisioningManagerFileReserveSpec>
    {
        public string BaseName { get; set; }

        public string ParentDir { get; set; }

        public string FileType { get; set; }

        public string StorageProfile { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerFileReserveSpec hostLowLevelProvisioningManagerFileReserveSpec)
        {
            return (hostLowLevelProvisioningManagerFileReserveSpec != null && this.BaseName == hostLowLevelProvisioningManagerFileReserveSpec.BaseName && this.ParentDir == hostLowLevelProvisioningManagerFileReserveSpec.ParentDir && this.FileType == hostLowLevelProvisioningManagerFileReserveSpec.FileType && this.StorageProfile == hostLowLevelProvisioningManagerFileReserveSpec.StorageProfile);
        }

        public override bool Equals(object hostLowLevelProvisioningManagerFileReserveSpec)
        {
            return Equals(hostLowLevelProvisioningManagerFileReserveSpec as HostLowLevelProvisioningManagerFileReserveSpec);
        }

        public override int GetHashCode()
        {
            return (BaseName + "_" + ParentDir + "_" + FileType + "_" + StorageProfile).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerSnapshotLayoutSpec : DynamicData, IEquatable<HostLowLevelProvisioningManagerSnapshotLayoutSpec>
    {
        public int Id { get; set; }

        public string SrcFilename { get; set; }

        public string DstFilename { get; set; }

        public HostLowLevelProvisioningManagerDiskLayoutSpec[] Disk { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerSnapshotLayoutSpec hostLowLevelProvisioningManagerSnapshotLayoutSpec)
        {
            return (hostLowLevelProvisioningManagerSnapshotLayoutSpec != null && this.Id == hostLowLevelProvisioningManagerSnapshotLayoutSpec.Id && this.SrcFilename == hostLowLevelProvisioningManagerSnapshotLayoutSpec.SrcFilename && this.DstFilename == hostLowLevelProvisioningManagerSnapshotLayoutSpec.DstFilename && ((this.Disk == null && hostLowLevelProvisioningManagerSnapshotLayoutSpec.Disk == null) || (this.Disk != null && hostLowLevelProvisioningManagerSnapshotLayoutSpec.Disk != null && Enumerable.SequenceEqual(this.Disk, hostLowLevelProvisioningManagerSnapshotLayoutSpec.Disk))));
        }

        public override bool Equals(object hostLowLevelProvisioningManagerSnapshotLayoutSpec)
        {
            return Equals(hostLowLevelProvisioningManagerSnapshotLayoutSpec as HostLowLevelProvisioningManagerSnapshotLayoutSpec);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + SrcFilename + "_" + DstFilename + "_" + Disk).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerVmMigrationStatus : DynamicData, IEquatable<HostLowLevelProvisioningManagerVmMigrationStatus>
    {
        public long MigrationId { get; set; }

        public string Type { get; set; }

        public bool Source { get; set; }

        public bool ConsideredSuccessful { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerVmMigrationStatus hostLowLevelProvisioningManagerVmMigrationStatus)
        {
            return (hostLowLevelProvisioningManagerVmMigrationStatus != null && this.MigrationId == hostLowLevelProvisioningManagerVmMigrationStatus.MigrationId && this.Type == hostLowLevelProvisioningManagerVmMigrationStatus.Type && this.Source == hostLowLevelProvisioningManagerVmMigrationStatus.Source && this.ConsideredSuccessful == hostLowLevelProvisioningManagerVmMigrationStatus.ConsideredSuccessful);
        }

        public override bool Equals(object hostLowLevelProvisioningManagerVmMigrationStatus)
        {
            return Equals(hostLowLevelProvisioningManagerVmMigrationStatus as HostLowLevelProvisioningManagerVmMigrationStatus);
        }

        public override int GetHashCode()
        {
            return (MigrationId + "_" + Type + "_" + Source + "_" + ConsideredSuccessful).GetHashCode();
        }
    }

    public class HostLowLevelProvisioningManagerVmRecoveryInfo : DynamicData, IEquatable<HostLowLevelProvisioningManagerVmRecoveryInfo>
    {
        public string Version { get; set; }

        public string BiosUUID { get; set; }

        public string InstanceUUID { get; set; }

        public FaultToleranceConfigInfo FtInfo { get; set; }

        public bool Equals(HostLowLevelProvisioningManagerVmRecoveryInfo hostLowLevelProvisioningManagerVmRecoveryInfo)
        {
            return (hostLowLevelProvisioningManagerVmRecoveryInfo != null && this.Version == hostLowLevelProvisioningManagerVmRecoveryInfo.Version && this.BiosUUID == hostLowLevelProvisioningManagerVmRecoveryInfo.BiosUUID && this.InstanceUUID == hostLowLevelProvisioningManagerVmRecoveryInfo.InstanceUUID && ((this.FtInfo == null && hostLowLevelProvisioningManagerVmRecoveryInfo.FtInfo == null) || (this.FtInfo != null && this.FtInfo.Equals(hostLowLevelProvisioningManagerVmRecoveryInfo.FtInfo))));
        }

        public override bool Equals(object hostLowLevelProvisioningManagerVmRecoveryInfo)
        {
            return Equals(hostLowLevelProvisioningManagerVmRecoveryInfo as HostLowLevelProvisioningManagerVmRecoveryInfo);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + BiosUUID + "_" + InstanceUUID + "_" + FtInfo).GetHashCode();
        }
    }

    public class HostMaintenanceSpec : DynamicData, IEquatable<HostMaintenanceSpec>
    {
        public VsanHostDecommissionMode VsanMode { get; set; }

        public bool Equals(HostMaintenanceSpec hostMaintenanceSpec)
        {
            return (hostMaintenanceSpec != null && ((this.VsanMode == null && hostMaintenanceSpec.VsanMode == null) || (this.VsanMode != null && this.VsanMode.Equals(hostMaintenanceSpec.VsanMode))));
        }

        public override bool Equals(object hostMaintenanceSpec)
        {
            return Equals(hostMaintenanceSpec as HostMaintenanceSpec);
        }

        public override int GetHashCode()
        {
            return (VsanMode).GetHashCode();
        }
    }

    public class HostMemberHealthCheckResult : DynamicData, IEquatable<HostMemberHealthCheckResult>
    {
        public string Summary { get; set; }

        public bool Equals(HostMemberHealthCheckResult hostMemberHealthCheckResult)
        {
            return (hostMemberHealthCheckResult != null && this.Summary == hostMemberHealthCheckResult.Summary);
        }

        public override bool Equals(object hostMemberHealthCheckResult)
        {
            return Equals(hostMemberHealthCheckResult as HostMemberHealthCheckResult);
        }

        public override int GetHashCode()
        {
            return (Summary).GetHashCode();
        }
    }

    public class HostMemberRuntimeInfo : DynamicData, IEquatable<HostMemberRuntimeInfo>
    {
        public ManagedObjectReference Host { get; set; }

        public string Status { get; set; }

        public string StatusDetail { get; set; }

        public HostMemberHealthCheckResult[] HealthCheckResult { get; set; }

        public HostMemberRuntimeInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostMemberRuntimeInfo hostMemberRuntimeInfo)
        {
            return (hostMemberRuntimeInfo != null && ((this.Host == null && hostMemberRuntimeInfo.Host == null) || (this.Host != null && this.Host.Equals(hostMemberRuntimeInfo.Host))) && this.Status == hostMemberRuntimeInfo.Status && this.StatusDetail == hostMemberRuntimeInfo.StatusDetail && ((this.HealthCheckResult == null && hostMemberRuntimeInfo.HealthCheckResult == null) || (this.HealthCheckResult != null && hostMemberRuntimeInfo.HealthCheckResult != null && Enumerable.SequenceEqual(this.HealthCheckResult, hostMemberRuntimeInfo.HealthCheckResult))) && ((this.LinkedView == null && hostMemberRuntimeInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostMemberRuntimeInfo.LinkedView))));
        }

        public override bool Equals(object hostMemberRuntimeInfo)
        {
            return Equals(hostMemberRuntimeInfo as HostMemberRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Status + "_" + StatusDetail + "_" + HealthCheckResult + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostMemberRuntimeInfo_LinkedView : IEquatable<HostMemberRuntimeInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostMemberRuntimeInfo_LinkedView hostMemberRuntimeInfo_LinkedView)
        {
            return (hostMemberRuntimeInfo_LinkedView != null && ((this.Host == null && hostMemberRuntimeInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostMemberRuntimeInfo_LinkedView.Host))));
        }

        public override bool Equals(object hostMemberRuntimeInfo_LinkedView)
        {
            return Equals(hostMemberRuntimeInfo_LinkedView as HostMemberRuntimeInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostMemberUplinkHealthCheckResult : HostMemberHealthCheckResult, IEquatable<HostMemberUplinkHealthCheckResult>
    {
        public string UplinkPortKey { get; set; }

        public bool Equals(HostMemberUplinkHealthCheckResult hostMemberUplinkHealthCheckResult)
        {
            return (hostMemberUplinkHealthCheckResult != null && this.UplinkPortKey == hostMemberUplinkHealthCheckResult.UplinkPortKey);
        }

        public override bool Equals(object hostMemberUplinkHealthCheckResult)
        {
            return Equals(hostMemberUplinkHealthCheckResult as HostMemberUplinkHealthCheckResult);
        }

        public override int GetHashCode()
        {
            return (UplinkPortKey).GetHashCode();
        }
    }

    public class HostMemoryProfile : ApplyProfile, IEquatable<HostMemoryProfile>
    {
        public bool Equals(HostMemoryProfile hostMemoryProfile)
        {
            return (hostMemoryProfile != null && base.Equals(hostMemoryProfile));
        }

        public override bool Equals(object hostMemoryProfile)
        {
            return Equals(hostMemoryProfile as HostMemoryProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostMemorySpec : DynamicData, IEquatable<HostMemorySpec>
    {
        public long? ServiceConsoleReservation { get; set; }

        public bool Equals(HostMemorySpec hostMemorySpec)
        {
            return (hostMemorySpec != null && ((this.ServiceConsoleReservation == null && hostMemorySpec.ServiceConsoleReservation == null) || (this.ServiceConsoleReservation != null && this.ServiceConsoleReservation.Equals(hostMemorySpec.ServiceConsoleReservation))));
        }

        public override bool Equals(object hostMemorySpec)
        {
            return Equals(hostMemorySpec as HostMemorySpec);
        }

        public override int GetHashCode()
        {
            return (ServiceConsoleReservation).GetHashCode();
        }
    }

    public class HostMemorySystem : ExtensibleManagedObject, IEquatable<HostMemorySystem>
    {
        public ServiceConsoleReservationInfo ConsoleReservationInfo { get; set; }

        public VirtualMachineMemoryReservationInfo VirtualMachineReservationInfo { get; set; }

        public void ReconfigureServiceConsoleReservation(long cfgBytes)
        {
        }

        public void ReconfigureVirtualMachineReservation(VirtualMachineMemoryReservationSpec spec)
        {
        }

        public bool Equals(HostMemorySystem hostMemorySystem)
        {
            return (hostMemorySystem != null && ((this.ConsoleReservationInfo == null && hostMemorySystem.ConsoleReservationInfo == null) || (this.ConsoleReservationInfo != null && this.ConsoleReservationInfo.Equals(hostMemorySystem.ConsoleReservationInfo))) && ((this.VirtualMachineReservationInfo == null && hostMemorySystem.VirtualMachineReservationInfo == null) || (this.VirtualMachineReservationInfo != null && this.VirtualMachineReservationInfo.Equals(hostMemorySystem.VirtualMachineReservationInfo))));
        }

        public override bool Equals(object hostMemorySystem)
        {
            return Equals(hostMemorySystem as HostMemorySystem);
        }

        public override int GetHashCode()
        {
            return (ConsoleReservationInfo + "_" + VirtualMachineReservationInfo).GetHashCode();
        }
    }

    public class HostMissingNetworksEvent : HostDasEvent, IEquatable<HostMissingNetworksEvent>
    {
        public string Ips { get; set; }

        public bool Equals(HostMissingNetworksEvent hostMissingNetworksEvent)
        {
            return (hostMissingNetworksEvent != null && this.Ips == hostMissingNetworksEvent.Ips);
        }

        public override bool Equals(object hostMissingNetworksEvent)
        {
            return Equals(hostMissingNetworksEvent as HostMissingNetworksEvent);
        }

        public override int GetHashCode()
        {
            return (Ips).GetHashCode();
        }
    }

    public class HostMonitoringStateChangedEvent : ClusterEvent, IEquatable<HostMonitoringStateChangedEvent>
    {
        public string State { get; set; }

        public string PrevState { get; set; }

        public bool Equals(HostMonitoringStateChangedEvent hostMonitoringStateChangedEvent)
        {
            return (hostMonitoringStateChangedEvent != null && this.State == hostMonitoringStateChangedEvent.State && this.PrevState == hostMonitoringStateChangedEvent.PrevState);
        }

        public override bool Equals(object hostMonitoringStateChangedEvent)
        {
            return Equals(hostMonitoringStateChangedEvent as HostMonitoringStateChangedEvent);
        }

        public override int GetHashCode()
        {
            return (State + "_" + PrevState).GetHashCode();
        }
    }

    public class HostMountInfo : DynamicData, IEquatable<HostMountInfo>
    {
        public string Path { get; set; }

        public string AccessMode { get; set; }

        public bool? Mounted { get; set; }

        public bool? Accessible { get; set; }

        public string InaccessibleReason { get; set; }

        public bool Equals(HostMountInfo hostMountInfo)
        {
            return (hostMountInfo != null && this.Path == hostMountInfo.Path && this.AccessMode == hostMountInfo.AccessMode && ((this.Mounted == null && hostMountInfo.Mounted == null) || (this.Mounted != null && this.Mounted.Equals(hostMountInfo.Mounted))) && ((this.Accessible == null && hostMountInfo.Accessible == null) || (this.Accessible != null && this.Accessible.Equals(hostMountInfo.Accessible))) && this.InaccessibleReason == hostMountInfo.InaccessibleReason);
        }

        public override bool Equals(object hostMountInfo)
        {
            return Equals(hostMountInfo as HostMountInfo);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + AccessMode + "_" + Mounted + "_" + Accessible + "_" + InaccessibleReason).GetHashCode();
        }
    }

    public class HostMultipathInfo : DynamicData, IEquatable<HostMultipathInfo>
    {
        public HostMultipathInfoLogicalUnit[] Lun { get; set; }

        public bool Equals(HostMultipathInfo hostMultipathInfo)
        {
            return (hostMultipathInfo != null && ((this.Lun == null && hostMultipathInfo.Lun == null) || (this.Lun != null && hostMultipathInfo.Lun != null && Enumerable.SequenceEqual(this.Lun, hostMultipathInfo.Lun))));
        }

        public override bool Equals(object hostMultipathInfo)
        {
            return Equals(hostMultipathInfo as HostMultipathInfo);
        }

        public override int GetHashCode()
        {
            return (Lun).GetHashCode();
        }
    }

    public class HostMultipathInfoFixedLogicalUnitPolicy : HostMultipathInfoLogicalUnitPolicy, IEquatable<HostMultipathInfoFixedLogicalUnitPolicy>
    {
        public string Prefer { get; set; }

        public bool Equals(HostMultipathInfoFixedLogicalUnitPolicy hostMultipathInfoFixedLogicalUnitPolicy)
        {
            return (hostMultipathInfoFixedLogicalUnitPolicy != null && this.Prefer == hostMultipathInfoFixedLogicalUnitPolicy.Prefer);
        }

        public override bool Equals(object hostMultipathInfoFixedLogicalUnitPolicy)
        {
            return Equals(hostMultipathInfoFixedLogicalUnitPolicy as HostMultipathInfoFixedLogicalUnitPolicy);
        }

        public override int GetHashCode()
        {
            return (Prefer).GetHashCode();
        }
    }

    public class HostMultipathInfoLogicalUnit : DynamicData, IEquatable<HostMultipathInfoLogicalUnit>
    {
        public string Key { get; set; }

        public string Id { get; set; }

        public string Lun { get; set; }

        public HostMultipathInfoPath[] Path { get; set; }

        public HostMultipathInfoLogicalUnitPolicy Policy { get; set; }

        public HostMultipathInfoLogicalUnitStorageArrayTypePolicy StorageArrayTypePolicy { get; set; }

        public bool Equals(HostMultipathInfoLogicalUnit hostMultipathInfoLogicalUnit)
        {
            return (hostMultipathInfoLogicalUnit != null && this.Key == hostMultipathInfoLogicalUnit.Key && this.Id == hostMultipathInfoLogicalUnit.Id && this.Lun == hostMultipathInfoLogicalUnit.Lun && ((this.Path == null && hostMultipathInfoLogicalUnit.Path == null) || (this.Path != null && hostMultipathInfoLogicalUnit.Path != null && Enumerable.SequenceEqual(this.Path, hostMultipathInfoLogicalUnit.Path))) && ((this.Policy == null && hostMultipathInfoLogicalUnit.Policy == null) || (this.Policy != null && this.Policy.Equals(hostMultipathInfoLogicalUnit.Policy))) && ((this.StorageArrayTypePolicy == null && hostMultipathInfoLogicalUnit.StorageArrayTypePolicy == null) || (this.StorageArrayTypePolicy != null && this.StorageArrayTypePolicy.Equals(hostMultipathInfoLogicalUnit.StorageArrayTypePolicy))));
        }

        public override bool Equals(object hostMultipathInfoLogicalUnit)
        {
            return Equals(hostMultipathInfoLogicalUnit as HostMultipathInfoLogicalUnit);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Id + "_" + Lun + "_" + Path + "_" + Policy + "_" + StorageArrayTypePolicy).GetHashCode();
        }
    }

    public class HostMultipathInfoLogicalUnitPolicy : DynamicData, IEquatable<HostMultipathInfoLogicalUnitPolicy>
    {
        public string Policy { get; set; }

        public bool Equals(HostMultipathInfoLogicalUnitPolicy hostMultipathInfoLogicalUnitPolicy)
        {
            return (hostMultipathInfoLogicalUnitPolicy != null && this.Policy == hostMultipathInfoLogicalUnitPolicy.Policy);
        }

        public override bool Equals(object hostMultipathInfoLogicalUnitPolicy)
        {
            return Equals(hostMultipathInfoLogicalUnitPolicy as HostMultipathInfoLogicalUnitPolicy);
        }

        public override int GetHashCode()
        {
            return (Policy).GetHashCode();
        }
    }

    public class HostMultipathInfoLogicalUnitStorageArrayTypePolicy : DynamicData, IEquatable<HostMultipathInfoLogicalUnitStorageArrayTypePolicy>
    {
        public string Policy { get; set; }

        public bool Equals(HostMultipathInfoLogicalUnitStorageArrayTypePolicy hostMultipathInfoLogicalUnitStorageArrayTypePolicy)
        {
            return (hostMultipathInfoLogicalUnitStorageArrayTypePolicy != null && this.Policy == hostMultipathInfoLogicalUnitStorageArrayTypePolicy.Policy);
        }

        public override bool Equals(object hostMultipathInfoLogicalUnitStorageArrayTypePolicy)
        {
            return Equals(hostMultipathInfoLogicalUnitStorageArrayTypePolicy as HostMultipathInfoLogicalUnitStorageArrayTypePolicy);
        }

        public override int GetHashCode()
        {
            return (Policy).GetHashCode();
        }
    }

    public class HostMultipathInfoPath : DynamicData, IEquatable<HostMultipathInfoPath>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string PathState { get; set; }

        public string State { get; set; }

        public bool? IsWorkingPath { get; set; }

        public string Adapter { get; set; }

        public string Lun { get; set; }

        public HostTargetTransport Transport { get; set; }

        public bool Equals(HostMultipathInfoPath hostMultipathInfoPath)
        {
            return (hostMultipathInfoPath != null && this.Key == hostMultipathInfoPath.Key && this.Name == hostMultipathInfoPath.Name && this.PathState == hostMultipathInfoPath.PathState && this.State == hostMultipathInfoPath.State && ((this.IsWorkingPath == null && hostMultipathInfoPath.IsWorkingPath == null) || (this.IsWorkingPath != null && this.IsWorkingPath.Equals(hostMultipathInfoPath.IsWorkingPath))) && this.Adapter == hostMultipathInfoPath.Adapter && this.Lun == hostMultipathInfoPath.Lun && ((this.Transport == null && hostMultipathInfoPath.Transport == null) || (this.Transport != null && this.Transport.Equals(hostMultipathInfoPath.Transport))));
        }

        public override bool Equals(object hostMultipathInfoPath)
        {
            return Equals(hostMultipathInfoPath as HostMultipathInfoPath);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + PathState + "_" + State + "_" + IsWorkingPath + "_" + Adapter + "_" + Lun + "_" + Transport).GetHashCode();
        }
    }

    public class HostMultipathStateInfo : DynamicData, IEquatable<HostMultipathStateInfo>
    {
        public HostMultipathStateInfoPath[] Path { get; set; }

        public bool Equals(HostMultipathStateInfo hostMultipathStateInfo)
        {
            return (hostMultipathStateInfo != null && ((this.Path == null && hostMultipathStateInfo.Path == null) || (this.Path != null && hostMultipathStateInfo.Path != null && Enumerable.SequenceEqual(this.Path, hostMultipathStateInfo.Path))));
        }

        public override bool Equals(object hostMultipathStateInfo)
        {
            return Equals(hostMultipathStateInfo as HostMultipathStateInfo);
        }

        public override int GetHashCode()
        {
            return (Path).GetHashCode();
        }
    }

    public class HostMultipathStateInfoPath : DynamicData, IEquatable<HostMultipathStateInfoPath>
    {
        public string Name { get; set; }

        public string PathState { get; set; }

        public bool Equals(HostMultipathStateInfoPath hostMultipathStateInfoPath)
        {
            return (hostMultipathStateInfoPath != null && this.Name == hostMultipathStateInfoPath.Name && this.PathState == hostMultipathStateInfoPath.PathState);
        }

        public override bool Equals(object hostMultipathStateInfoPath)
        {
            return Equals(hostMultipathStateInfoPath as HostMultipathStateInfoPath);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + PathState).GetHashCode();
        }
    }

    public class HostNasVolume : HostFileSystemVolume, IEquatable<HostNasVolume>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public string UserName { get; set; }

        public string[] RemoteHostNames { get; set; }

        public string SecurityType { get; set; }

        public bool? ProtocolEndpoint { get; set; }

        public bool Equals(HostNasVolume hostNasVolume)
        {
            return (hostNasVolume != null && this.RemoteHost == hostNasVolume.RemoteHost && this.RemotePath == hostNasVolume.RemotePath && this.UserName == hostNasVolume.UserName && ((this.RemoteHostNames == null && hostNasVolume.RemoteHostNames == null) || (this.RemoteHostNames != null && hostNasVolume.RemoteHostNames != null && Enumerable.SequenceEqual(this.RemoteHostNames, hostNasVolume.RemoteHostNames))) && this.SecurityType == hostNasVolume.SecurityType && ((this.ProtocolEndpoint == null && hostNasVolume.ProtocolEndpoint == null) || (this.ProtocolEndpoint != null && this.ProtocolEndpoint.Equals(hostNasVolume.ProtocolEndpoint))));
        }

        public override bool Equals(object hostNasVolume)
        {
            return Equals(hostNasVolume as HostNasVolume);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath + "_" + UserName + "_" + RemoteHostNames + "_" + SecurityType + "_" + ProtocolEndpoint).GetHashCode();
        }
    }

    public class HostNasVolumeConfig : DynamicData, IEquatable<HostNasVolumeConfig>
    {
        public string ChangeOperation { get; set; }

        public HostNasVolumeSpec Spec { get; set; }

        public bool Equals(HostNasVolumeConfig hostNasVolumeConfig)
        {
            return (hostNasVolumeConfig != null && this.ChangeOperation == hostNasVolumeConfig.ChangeOperation && ((this.Spec == null && hostNasVolumeConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostNasVolumeConfig.Spec))));
        }

        public override bool Equals(object hostNasVolumeConfig)
        {
            return Equals(hostNasVolumeConfig as HostNasVolumeConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Spec).GetHashCode();
        }
    }

    public class HostNasVolumeSpec : DynamicData, IEquatable<HostNasVolumeSpec>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public string LocalPath { get; set; }

        public string AccessMode { get; set; }

        public string Type { get; set; }

        public string UserName { get; set; }

        public string Password { get; set; }

        public string[] RemoteHostNames { get; set; }

        public string SecurityType { get; set; }

        public bool Equals(HostNasVolumeSpec hostNasVolumeSpec)
        {
            return (hostNasVolumeSpec != null && this.RemoteHost == hostNasVolumeSpec.RemoteHost && this.RemotePath == hostNasVolumeSpec.RemotePath && this.LocalPath == hostNasVolumeSpec.LocalPath && this.AccessMode == hostNasVolumeSpec.AccessMode && this.Type == hostNasVolumeSpec.Type && this.UserName == hostNasVolumeSpec.UserName && this.Password == hostNasVolumeSpec.Password && ((this.RemoteHostNames == null && hostNasVolumeSpec.RemoteHostNames == null) || (this.RemoteHostNames != null && hostNasVolumeSpec.RemoteHostNames != null && Enumerable.SequenceEqual(this.RemoteHostNames, hostNasVolumeSpec.RemoteHostNames))) && this.SecurityType == hostNasVolumeSpec.SecurityType);
        }

        public override bool Equals(object hostNasVolumeSpec)
        {
            return Equals(hostNasVolumeSpec as HostNasVolumeSpec);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath + "_" + LocalPath + "_" + AccessMode + "_" + Type + "_" + UserName + "_" + Password + "_" + RemoteHostNames + "_" + SecurityType).GetHashCode();
        }
    }

    public class HostNasVolumeUserInfo : DynamicData, IEquatable<HostNasVolumeUserInfo>
    {
        public string User { get; set; }

        public bool Equals(HostNasVolumeUserInfo hostNasVolumeUserInfo)
        {
            return (hostNasVolumeUserInfo != null && this.User == hostNasVolumeUserInfo.User);
        }

        public override bool Equals(object hostNasVolumeUserInfo)
        {
            return Equals(hostNasVolumeUserInfo as HostNasVolumeUserInfo);
        }

        public override int GetHashCode()
        {
            return (User).GetHashCode();
        }
    }

    public class HostNatService : DynamicData, IEquatable<HostNatService>
    {
        public string Key { get; set; }

        public HostNatServiceSpec Spec { get; set; }

        public bool Equals(HostNatService hostNatService)
        {
            return (hostNatService != null && this.Key == hostNatService.Key && ((this.Spec == null && hostNatService.Spec == null) || (this.Spec != null && this.Spec.Equals(hostNatService.Spec))));
        }

        public override bool Equals(object hostNatService)
        {
            return Equals(hostNatService as HostNatService);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Spec).GetHashCode();
        }
    }

    public class HostNatServiceConfig : DynamicData, IEquatable<HostNatServiceConfig>
    {
        public string ChangeOperation { get; set; }

        public string Key { get; set; }

        public HostNatServiceSpec Spec { get; set; }

        public bool Equals(HostNatServiceConfig hostNatServiceConfig)
        {
            return (hostNatServiceConfig != null && this.ChangeOperation == hostNatServiceConfig.ChangeOperation && this.Key == hostNatServiceConfig.Key && ((this.Spec == null && hostNatServiceConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostNatServiceConfig.Spec))));
        }

        public override bool Equals(object hostNatServiceConfig)
        {
            return Equals(hostNatServiceConfig as HostNatServiceConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Key + "_" + Spec).GetHashCode();
        }
    }

    public class HostNatServiceNameServiceSpec : DynamicData, IEquatable<HostNatServiceNameServiceSpec>
    {
        public bool DnsAutoDetect { get; set; }

        public string DnsPolicy { get; set; }

        public int DnsRetries { get; set; }

        public int DnsTimeout { get; set; }

        public string[] DnsNameServer { get; set; }

        public int NbdsTimeout { get; set; }

        public int NbnsRetries { get; set; }

        public int NbnsTimeout { get; set; }

        public bool Equals(HostNatServiceNameServiceSpec hostNatServiceNameServiceSpec)
        {
            return (hostNatServiceNameServiceSpec != null && this.DnsAutoDetect == hostNatServiceNameServiceSpec.DnsAutoDetect && this.DnsPolicy == hostNatServiceNameServiceSpec.DnsPolicy && this.DnsRetries == hostNatServiceNameServiceSpec.DnsRetries && this.DnsTimeout == hostNatServiceNameServiceSpec.DnsTimeout && ((this.DnsNameServer == null && hostNatServiceNameServiceSpec.DnsNameServer == null) || (this.DnsNameServer != null && hostNatServiceNameServiceSpec.DnsNameServer != null && Enumerable.SequenceEqual(this.DnsNameServer, hostNatServiceNameServiceSpec.DnsNameServer))) && this.NbdsTimeout == hostNatServiceNameServiceSpec.NbdsTimeout && this.NbnsRetries == hostNatServiceNameServiceSpec.NbnsRetries && this.NbnsTimeout == hostNatServiceNameServiceSpec.NbnsTimeout);
        }

        public override bool Equals(object hostNatServiceNameServiceSpec)
        {
            return Equals(hostNatServiceNameServiceSpec as HostNatServiceNameServiceSpec);
        }

        public override int GetHashCode()
        {
            return (DnsAutoDetect + "_" + DnsPolicy + "_" + DnsRetries + "_" + DnsTimeout + "_" + DnsNameServer + "_" + NbdsTimeout + "_" + NbnsRetries + "_" + NbnsTimeout).GetHashCode();
        }
    }

    public class HostNatServicePortForwardSpec : DynamicData, IEquatable<HostNatServicePortForwardSpec>
    {
        public string Type { get; set; }

        public string Name { get; set; }

        public int HostPort { get; set; }

        public int GuestPort { get; set; }

        public string GuestIpAddress { get; set; }

        public bool Equals(HostNatServicePortForwardSpec hostNatServicePortForwardSpec)
        {
            return (hostNatServicePortForwardSpec != null && this.Type == hostNatServicePortForwardSpec.Type && this.Name == hostNatServicePortForwardSpec.Name && this.HostPort == hostNatServicePortForwardSpec.HostPort && this.GuestPort == hostNatServicePortForwardSpec.GuestPort && this.GuestIpAddress == hostNatServicePortForwardSpec.GuestIpAddress);
        }

        public override bool Equals(object hostNatServicePortForwardSpec)
        {
            return Equals(hostNatServicePortForwardSpec as HostNatServicePortForwardSpec);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Name + "_" + HostPort + "_" + GuestPort + "_" + GuestIpAddress).GetHashCode();
        }
    }

    public class HostNatServiceSpec : DynamicData, IEquatable<HostNatServiceSpec>
    {
        public string VirtualSwitch { get; set; }

        public bool ActiveFtp { get; set; }

        public bool AllowAnyOui { get; set; }

        public bool ConfigPort { get; set; }

        public string IpGatewayAddress { get; set; }

        public int UdpTimeout { get; set; }

        public HostNatServicePortForwardSpec[] PortForward { get; set; }

        public HostNatServiceNameServiceSpec NameService { get; set; }

        public bool Equals(HostNatServiceSpec hostNatServiceSpec)
        {
            return (hostNatServiceSpec != null && this.VirtualSwitch == hostNatServiceSpec.VirtualSwitch && this.ActiveFtp == hostNatServiceSpec.ActiveFtp && this.AllowAnyOui == hostNatServiceSpec.AllowAnyOui && this.ConfigPort == hostNatServiceSpec.ConfigPort && this.IpGatewayAddress == hostNatServiceSpec.IpGatewayAddress && this.UdpTimeout == hostNatServiceSpec.UdpTimeout && ((this.PortForward == null && hostNatServiceSpec.PortForward == null) || (this.PortForward != null && hostNatServiceSpec.PortForward != null && Enumerable.SequenceEqual(this.PortForward, hostNatServiceSpec.PortForward))) && ((this.NameService == null && hostNatServiceSpec.NameService == null) || (this.NameService != null && this.NameService.Equals(hostNatServiceSpec.NameService))));
        }

        public override bool Equals(object hostNatServiceSpec)
        {
            return Equals(hostNatServiceSpec as HostNatServiceSpec);
        }

        public override int GetHashCode()
        {
            return (VirtualSwitch + "_" + ActiveFtp + "_" + AllowAnyOui + "_" + ConfigPort + "_" + IpGatewayAddress + "_" + UdpTimeout + "_" + PortForward + "_" + NameService).GetHashCode();
        }
    }

    public class HostNetCapabilities : DynamicData, IEquatable<HostNetCapabilities>
    {
        public bool CanSetPhysicalNicLinkSpeed { get; set; }

        public bool SupportsNicTeaming { get; set; }

        public string[] NicTeamingPolicy { get; set; }

        public bool SupportsVlan { get; set; }

        public bool UsesServiceConsoleNic { get; set; }

        public bool SupportsNetworkHints { get; set; }

        public int? MaxPortGroupsPerVswitch { get; set; }

        public bool VswitchConfigSupported { get; set; }

        public bool VnicConfigSupported { get; set; }

        public bool IpRouteConfigSupported { get; set; }

        public bool DnsConfigSupported { get; set; }

        public bool DhcpOnVnicSupported { get; set; }

        public bool IpV6Supported { get; set; }

        public bool Equals(HostNetCapabilities hostNetCapabilities)
        {
            return (hostNetCapabilities != null && this.CanSetPhysicalNicLinkSpeed == hostNetCapabilities.CanSetPhysicalNicLinkSpeed && this.SupportsNicTeaming == hostNetCapabilities.SupportsNicTeaming && ((this.NicTeamingPolicy == null && hostNetCapabilities.NicTeamingPolicy == null) || (this.NicTeamingPolicy != null && hostNetCapabilities.NicTeamingPolicy != null && Enumerable.SequenceEqual(this.NicTeamingPolicy, hostNetCapabilities.NicTeamingPolicy))) && this.SupportsVlan == hostNetCapabilities.SupportsVlan && this.UsesServiceConsoleNic == hostNetCapabilities.UsesServiceConsoleNic && this.SupportsNetworkHints == hostNetCapabilities.SupportsNetworkHints && ((this.MaxPortGroupsPerVswitch == null && hostNetCapabilities.MaxPortGroupsPerVswitch == null) || (this.MaxPortGroupsPerVswitch != null && this.MaxPortGroupsPerVswitch.Equals(hostNetCapabilities.MaxPortGroupsPerVswitch))) && this.VswitchConfigSupported == hostNetCapabilities.VswitchConfigSupported && this.VnicConfigSupported == hostNetCapabilities.VnicConfigSupported && this.IpRouteConfigSupported == hostNetCapabilities.IpRouteConfigSupported && this.DnsConfigSupported == hostNetCapabilities.DnsConfigSupported && this.DhcpOnVnicSupported == hostNetCapabilities.DhcpOnVnicSupported && this.IpV6Supported == hostNetCapabilities.IpV6Supported);
        }

        public override bool Equals(object hostNetCapabilities)
        {
            return Equals(hostNetCapabilities as HostNetCapabilities);
        }

        public override int GetHashCode()
        {
            return (CanSetPhysicalNicLinkSpeed + "_" + SupportsNicTeaming + "_" + NicTeamingPolicy + "_" + SupportsVlan + "_" + UsesServiceConsoleNic + "_" + SupportsNetworkHints + "_" + MaxPortGroupsPerVswitch + "_" + VswitchConfigSupported + "_" + VnicConfigSupported + "_" + IpRouteConfigSupported + "_" + DnsConfigSupported + "_" + DhcpOnVnicSupported + "_" + IpV6Supported).GetHashCode();
        }
    }

    public class HostNetOffloadCapabilities : DynamicData, IEquatable<HostNetOffloadCapabilities>
    {
        public bool? CsumOffload { get; set; }

        public bool? TcpSegmentation { get; set; }

        public bool? ZeroCopyXmit { get; set; }

        public bool Equals(HostNetOffloadCapabilities hostNetOffloadCapabilities)
        {
            return (hostNetOffloadCapabilities != null && ((this.CsumOffload == null && hostNetOffloadCapabilities.CsumOffload == null) || (this.CsumOffload != null && this.CsumOffload.Equals(hostNetOffloadCapabilities.CsumOffload))) && ((this.TcpSegmentation == null && hostNetOffloadCapabilities.TcpSegmentation == null) || (this.TcpSegmentation != null && this.TcpSegmentation.Equals(hostNetOffloadCapabilities.TcpSegmentation))) && ((this.ZeroCopyXmit == null && hostNetOffloadCapabilities.ZeroCopyXmit == null) || (this.ZeroCopyXmit != null && this.ZeroCopyXmit.Equals(hostNetOffloadCapabilities.ZeroCopyXmit))));
        }

        public override bool Equals(object hostNetOffloadCapabilities)
        {
            return Equals(hostNetOffloadCapabilities as HostNetOffloadCapabilities);
        }

        public override int GetHashCode()
        {
            return (CsumOffload + "_" + TcpSegmentation + "_" + ZeroCopyXmit).GetHashCode();
        }
    }

    public class HostNetStackInstance : DynamicData, IEquatable<HostNetStackInstance>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public HostDnsConfig DnsConfig { get; set; }

        public HostIpRouteConfig IpRouteConfig { get; set; }

        public int? RequestedMaxNumberOfConnections { get; set; }

        public string CongestionControlAlgorithm { get; set; }

        public bool? IpV6Enabled { get; set; }

        public HostIpRouteTableConfig RouteTableConfig { get; set; }

        public bool Equals(HostNetStackInstance hostNetStackInstance)
        {
            return (hostNetStackInstance != null && this.Key == hostNetStackInstance.Key && this.Name == hostNetStackInstance.Name && ((this.DnsConfig == null && hostNetStackInstance.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(hostNetStackInstance.DnsConfig))) && ((this.IpRouteConfig == null && hostNetStackInstance.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(hostNetStackInstance.IpRouteConfig))) && ((this.RequestedMaxNumberOfConnections == null && hostNetStackInstance.RequestedMaxNumberOfConnections == null) || (this.RequestedMaxNumberOfConnections != null && this.RequestedMaxNumberOfConnections.Equals(hostNetStackInstance.RequestedMaxNumberOfConnections))) && this.CongestionControlAlgorithm == hostNetStackInstance.CongestionControlAlgorithm && ((this.IpV6Enabled == null && hostNetStackInstance.IpV6Enabled == null) || (this.IpV6Enabled != null && this.IpV6Enabled.Equals(hostNetStackInstance.IpV6Enabled))) && ((this.RouteTableConfig == null && hostNetStackInstance.RouteTableConfig == null) || (this.RouteTableConfig != null && this.RouteTableConfig.Equals(hostNetStackInstance.RouteTableConfig))));
        }

        public override bool Equals(object hostNetStackInstance)
        {
            return Equals(hostNetStackInstance as HostNetStackInstance);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + DnsConfig + "_" + IpRouteConfig + "_" + RequestedMaxNumberOfConnections + "_" + CongestionControlAlgorithm + "_" + IpV6Enabled + "_" + RouteTableConfig).GetHashCode();
        }
    }

    public class HostNetworkConfig : DynamicData, IEquatable<HostNetworkConfig>
    {
        public HostVirtualSwitchConfig[] Vswitch { get; set; }

        public HostProxySwitchConfig[] ProxySwitch { get; set; }

        public HostPortGroupConfig[] Portgroup { get; set; }

        public PhysicalNicConfig[] Pnic { get; set; }

        public HostVirtualNicConfig[] Vnic { get; set; }

        public HostVirtualNicConfig[] ConsoleVnic { get; set; }

        public HostDnsConfig DnsConfig { get; set; }

        public HostIpRouteConfig IpRouteConfig { get; set; }

        public HostIpRouteConfig ConsoleIpRouteConfig { get; set; }

        public HostIpRouteTableConfig RouteTableConfig { get; set; }

        public HostDhcpServiceConfig[] Dhcp { get; set; }

        public HostNatServiceConfig[] Nat { get; set; }

        public bool? IpV6Enabled { get; set; }

        public HostNetworkConfigNetStackSpec[] NetStackSpec { get; set; }

        public bool Equals(HostNetworkConfig hostNetworkConfig)
        {
            return (hostNetworkConfig != null && ((this.Vswitch == null && hostNetworkConfig.Vswitch == null) || (this.Vswitch != null && hostNetworkConfig.Vswitch != null && Enumerable.SequenceEqual(this.Vswitch, hostNetworkConfig.Vswitch))) && ((this.ProxySwitch == null && hostNetworkConfig.ProxySwitch == null) || (this.ProxySwitch != null && hostNetworkConfig.ProxySwitch != null && Enumerable.SequenceEqual(this.ProxySwitch, hostNetworkConfig.ProxySwitch))) && ((this.Portgroup == null && hostNetworkConfig.Portgroup == null) || (this.Portgroup != null && hostNetworkConfig.Portgroup != null && Enumerable.SequenceEqual(this.Portgroup, hostNetworkConfig.Portgroup))) && ((this.Pnic == null && hostNetworkConfig.Pnic == null) || (this.Pnic != null && hostNetworkConfig.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostNetworkConfig.Pnic))) && ((this.Vnic == null && hostNetworkConfig.Vnic == null) || (this.Vnic != null && hostNetworkConfig.Vnic != null && Enumerable.SequenceEqual(this.Vnic, hostNetworkConfig.Vnic))) && ((this.ConsoleVnic == null && hostNetworkConfig.ConsoleVnic == null) || (this.ConsoleVnic != null && hostNetworkConfig.ConsoleVnic != null && Enumerable.SequenceEqual(this.ConsoleVnic, hostNetworkConfig.ConsoleVnic))) && ((this.DnsConfig == null && hostNetworkConfig.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(hostNetworkConfig.DnsConfig))) && ((this.IpRouteConfig == null && hostNetworkConfig.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(hostNetworkConfig.IpRouteConfig))) && ((this.ConsoleIpRouteConfig == null && hostNetworkConfig.ConsoleIpRouteConfig == null) || (this.ConsoleIpRouteConfig != null && this.ConsoleIpRouteConfig.Equals(hostNetworkConfig.ConsoleIpRouteConfig))) && ((this.RouteTableConfig == null && hostNetworkConfig.RouteTableConfig == null) || (this.RouteTableConfig != null && this.RouteTableConfig.Equals(hostNetworkConfig.RouteTableConfig))) && ((this.Dhcp == null && hostNetworkConfig.Dhcp == null) || (this.Dhcp != null && hostNetworkConfig.Dhcp != null && Enumerable.SequenceEqual(this.Dhcp, hostNetworkConfig.Dhcp))) && ((this.Nat == null && hostNetworkConfig.Nat == null) || (this.Nat != null && hostNetworkConfig.Nat != null && Enumerable.SequenceEqual(this.Nat, hostNetworkConfig.Nat))) && ((this.IpV6Enabled == null && hostNetworkConfig.IpV6Enabled == null) || (this.IpV6Enabled != null && this.IpV6Enabled.Equals(hostNetworkConfig.IpV6Enabled))) && ((this.NetStackSpec == null && hostNetworkConfig.NetStackSpec == null) || (this.NetStackSpec != null && hostNetworkConfig.NetStackSpec != null && Enumerable.SequenceEqual(this.NetStackSpec, hostNetworkConfig.NetStackSpec))));
        }

        public override bool Equals(object hostNetworkConfig)
        {
            return Equals(hostNetworkConfig as HostNetworkConfig);
        }

        public override int GetHashCode()
        {
            return (Vswitch + "_" + ProxySwitch + "_" + Portgroup + "_" + Pnic + "_" + Vnic + "_" + ConsoleVnic + "_" + DnsConfig + "_" + IpRouteConfig + "_" + ConsoleIpRouteConfig + "_" + RouteTableConfig + "_" + Dhcp + "_" + Nat + "_" + IpV6Enabled + "_" + NetStackSpec).GetHashCode();
        }
    }

    public class HostNetworkConfigNetStackSpec : DynamicData, IEquatable<HostNetworkConfigNetStackSpec>
    {
        public HostNetStackInstance NetStackInstance { get; set; }

        public string Operation { get; set; }

        public bool Equals(HostNetworkConfigNetStackSpec hostNetworkConfigNetStackSpec)
        {
            return (hostNetworkConfigNetStackSpec != null && ((this.NetStackInstance == null && hostNetworkConfigNetStackSpec.NetStackInstance == null) || (this.NetStackInstance != null && this.NetStackInstance.Equals(hostNetworkConfigNetStackSpec.NetStackInstance))) && this.Operation == hostNetworkConfigNetStackSpec.Operation);
        }

        public override bool Equals(object hostNetworkConfigNetStackSpec)
        {
            return Equals(hostNetworkConfigNetStackSpec as HostNetworkConfigNetStackSpec);
        }

        public override int GetHashCode()
        {
            return (NetStackInstance + "_" + Operation).GetHashCode();
        }
    }

    public class HostNetworkConfigResult : DynamicData, IEquatable<HostNetworkConfigResult>
    {
        public string[] VnicDevice { get; set; }

        public string[] ConsoleVnicDevice { get; set; }

        public bool Equals(HostNetworkConfigResult hostNetworkConfigResult)
        {
            return (hostNetworkConfigResult != null && ((this.VnicDevice == null && hostNetworkConfigResult.VnicDevice == null) || (this.VnicDevice != null && hostNetworkConfigResult.VnicDevice != null && Enumerable.SequenceEqual(this.VnicDevice, hostNetworkConfigResult.VnicDevice))) && ((this.ConsoleVnicDevice == null && hostNetworkConfigResult.ConsoleVnicDevice == null) || (this.ConsoleVnicDevice != null && hostNetworkConfigResult.ConsoleVnicDevice != null && Enumerable.SequenceEqual(this.ConsoleVnicDevice, hostNetworkConfigResult.ConsoleVnicDevice))));
        }

        public override bool Equals(object hostNetworkConfigResult)
        {
            return Equals(hostNetworkConfigResult as HostNetworkConfigResult);
        }

        public override int GetHashCode()
        {
            return (VnicDevice + "_" + ConsoleVnicDevice).GetHashCode();
        }
    }

    public class HostNetworkInfo : DynamicData, IEquatable<HostNetworkInfo>
    {
        public HostVirtualSwitch[] Vswitch { get; set; }

        public HostProxySwitch[] ProxySwitch { get; set; }

        public HostPortGroup[] Portgroup { get; set; }

        public PhysicalNic[] Pnic { get; set; }

        public HostVirtualNic[] Vnic { get; set; }

        public HostVirtualNic[] ConsoleVnic { get; set; }

        public HostDnsConfig DnsConfig { get; set; }

        public HostIpRouteConfig IpRouteConfig { get; set; }

        public HostIpRouteConfig ConsoleIpRouteConfig { get; set; }

        public HostIpRouteTableInfo RouteTableInfo { get; set; }

        public HostDhcpService[] Dhcp { get; set; }

        public HostNatService[] Nat { get; set; }

        public bool? IpV6Enabled { get; set; }

        public bool? AtBootIpV6Enabled { get; set; }

        public HostNetStackInstance[] NetStackInstance { get; set; }

        public HostOpaqueSwitch[] OpaqueSwitch { get; set; }

        public HostOpaqueNetworkInfo[] OpaqueNetwork { get; set; }

        public bool Equals(HostNetworkInfo hostNetworkInfo)
        {
            return (hostNetworkInfo != null && ((this.Vswitch == null && hostNetworkInfo.Vswitch == null) || (this.Vswitch != null && hostNetworkInfo.Vswitch != null && Enumerable.SequenceEqual(this.Vswitch, hostNetworkInfo.Vswitch))) && ((this.ProxySwitch == null && hostNetworkInfo.ProxySwitch == null) || (this.ProxySwitch != null && hostNetworkInfo.ProxySwitch != null && Enumerable.SequenceEqual(this.ProxySwitch, hostNetworkInfo.ProxySwitch))) && ((this.Portgroup == null && hostNetworkInfo.Portgroup == null) || (this.Portgroup != null && hostNetworkInfo.Portgroup != null && Enumerable.SequenceEqual(this.Portgroup, hostNetworkInfo.Portgroup))) && ((this.Pnic == null && hostNetworkInfo.Pnic == null) || (this.Pnic != null && hostNetworkInfo.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostNetworkInfo.Pnic))) && ((this.Vnic == null && hostNetworkInfo.Vnic == null) || (this.Vnic != null && hostNetworkInfo.Vnic != null && Enumerable.SequenceEqual(this.Vnic, hostNetworkInfo.Vnic))) && ((this.ConsoleVnic == null && hostNetworkInfo.ConsoleVnic == null) || (this.ConsoleVnic != null && hostNetworkInfo.ConsoleVnic != null && Enumerable.SequenceEqual(this.ConsoleVnic, hostNetworkInfo.ConsoleVnic))) && ((this.DnsConfig == null && hostNetworkInfo.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(hostNetworkInfo.DnsConfig))) && ((this.IpRouteConfig == null && hostNetworkInfo.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(hostNetworkInfo.IpRouteConfig))) && ((this.ConsoleIpRouteConfig == null && hostNetworkInfo.ConsoleIpRouteConfig == null) || (this.ConsoleIpRouteConfig != null && this.ConsoleIpRouteConfig.Equals(hostNetworkInfo.ConsoleIpRouteConfig))) && ((this.RouteTableInfo == null && hostNetworkInfo.RouteTableInfo == null) || (this.RouteTableInfo != null && this.RouteTableInfo.Equals(hostNetworkInfo.RouteTableInfo))) && ((this.Dhcp == null && hostNetworkInfo.Dhcp == null) || (this.Dhcp != null && hostNetworkInfo.Dhcp != null && Enumerable.SequenceEqual(this.Dhcp, hostNetworkInfo.Dhcp))) && ((this.Nat == null && hostNetworkInfo.Nat == null) || (this.Nat != null && hostNetworkInfo.Nat != null && Enumerable.SequenceEqual(this.Nat, hostNetworkInfo.Nat))) && ((this.IpV6Enabled == null && hostNetworkInfo.IpV6Enabled == null) || (this.IpV6Enabled != null && this.IpV6Enabled.Equals(hostNetworkInfo.IpV6Enabled))) && ((this.AtBootIpV6Enabled == null && hostNetworkInfo.AtBootIpV6Enabled == null) || (this.AtBootIpV6Enabled != null && this.AtBootIpV6Enabled.Equals(hostNetworkInfo.AtBootIpV6Enabled))) && ((this.NetStackInstance == null && hostNetworkInfo.NetStackInstance == null) || (this.NetStackInstance != null && hostNetworkInfo.NetStackInstance != null && Enumerable.SequenceEqual(this.NetStackInstance, hostNetworkInfo.NetStackInstance))) && ((this.OpaqueSwitch == null && hostNetworkInfo.OpaqueSwitch == null) || (this.OpaqueSwitch != null && hostNetworkInfo.OpaqueSwitch != null && Enumerable.SequenceEqual(this.OpaqueSwitch, hostNetworkInfo.OpaqueSwitch))) && ((this.OpaqueNetwork == null && hostNetworkInfo.OpaqueNetwork == null) || (this.OpaqueNetwork != null && hostNetworkInfo.OpaqueNetwork != null && Enumerable.SequenceEqual(this.OpaqueNetwork, hostNetworkInfo.OpaqueNetwork))));
        }

        public override bool Equals(object hostNetworkInfo)
        {
            return Equals(hostNetworkInfo as HostNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (Vswitch + "_" + ProxySwitch + "_" + Portgroup + "_" + Pnic + "_" + Vnic + "_" + ConsoleVnic + "_" + DnsConfig + "_" + IpRouteConfig + "_" + ConsoleIpRouteConfig + "_" + RouteTableInfo + "_" + Dhcp + "_" + Nat + "_" + IpV6Enabled + "_" + AtBootIpV6Enabled + "_" + NetStackInstance + "_" + OpaqueSwitch + "_" + OpaqueNetwork).GetHashCode();
        }
    }

    public class HostNetworkPolicy : DynamicData, IEquatable<HostNetworkPolicy>
    {
        public HostNetworkSecurityPolicy Security { get; set; }

        public HostNicTeamingPolicy NicTeaming { get; set; }

        public HostNetOffloadCapabilities OffloadPolicy { get; set; }

        public HostNetworkTrafficShapingPolicy ShapingPolicy { get; set; }

        public bool Equals(HostNetworkPolicy hostNetworkPolicy)
        {
            return (hostNetworkPolicy != null && ((this.Security == null && hostNetworkPolicy.Security == null) || (this.Security != null && this.Security.Equals(hostNetworkPolicy.Security))) && ((this.NicTeaming == null && hostNetworkPolicy.NicTeaming == null) || (this.NicTeaming != null && this.NicTeaming.Equals(hostNetworkPolicy.NicTeaming))) && ((this.OffloadPolicy == null && hostNetworkPolicy.OffloadPolicy == null) || (this.OffloadPolicy != null && this.OffloadPolicy.Equals(hostNetworkPolicy.OffloadPolicy))) && ((this.ShapingPolicy == null && hostNetworkPolicy.ShapingPolicy == null) || (this.ShapingPolicy != null && this.ShapingPolicy.Equals(hostNetworkPolicy.ShapingPolicy))));
        }

        public override bool Equals(object hostNetworkPolicy)
        {
            return Equals(hostNetworkPolicy as HostNetworkPolicy);
        }

        public override int GetHashCode()
        {
            return (Security + "_" + NicTeaming + "_" + OffloadPolicy + "_" + ShapingPolicy).GetHashCode();
        }
    }

    public class HostNetworkResourceRuntime : DynamicData, IEquatable<HostNetworkResourceRuntime>
    {
        public HostPnicNetworkResourceInfo[] PnicResourceInfo { get; set; }

        public bool Equals(HostNetworkResourceRuntime hostNetworkResourceRuntime)
        {
            return (hostNetworkResourceRuntime != null && ((this.PnicResourceInfo == null && hostNetworkResourceRuntime.PnicResourceInfo == null) || (this.PnicResourceInfo != null && hostNetworkResourceRuntime.PnicResourceInfo != null && Enumerable.SequenceEqual(this.PnicResourceInfo, hostNetworkResourceRuntime.PnicResourceInfo))));
        }

        public override bool Equals(object hostNetworkResourceRuntime)
        {
            return Equals(hostNetworkResourceRuntime as HostNetworkResourceRuntime);
        }

        public override int GetHashCode()
        {
            return (PnicResourceInfo).GetHashCode();
        }
    }

    public class HostNetworkSecurityPolicy : DynamicData, IEquatable<HostNetworkSecurityPolicy>
    {
        public bool? AllowPromiscuous { get; set; }

        public bool? MacChanges { get; set; }

        public bool? ForgedTransmits { get; set; }

        public bool Equals(HostNetworkSecurityPolicy hostNetworkSecurityPolicy)
        {
            return (hostNetworkSecurityPolicy != null && ((this.AllowPromiscuous == null && hostNetworkSecurityPolicy.AllowPromiscuous == null) || (this.AllowPromiscuous != null && this.AllowPromiscuous.Equals(hostNetworkSecurityPolicy.AllowPromiscuous))) && ((this.MacChanges == null && hostNetworkSecurityPolicy.MacChanges == null) || (this.MacChanges != null && this.MacChanges.Equals(hostNetworkSecurityPolicy.MacChanges))) && ((this.ForgedTransmits == null && hostNetworkSecurityPolicy.ForgedTransmits == null) || (this.ForgedTransmits != null && this.ForgedTransmits.Equals(hostNetworkSecurityPolicy.ForgedTransmits))));
        }

        public override bool Equals(object hostNetworkSecurityPolicy)
        {
            return Equals(hostNetworkSecurityPolicy as HostNetworkSecurityPolicy);
        }

        public override int GetHashCode()
        {
            return (AllowPromiscuous + "_" + MacChanges + "_" + ForgedTransmits).GetHashCode();
        }
    }

    public class HostNetworkSystem : ExtensibleManagedObject, IEquatable<HostNetworkSystem>
    {
        public HostNetCapabilities Capabilities { get; set; }

        public HostNetworkInfo NetworkInfo { get; set; }

        public HostNetOffloadCapabilities OffloadCapabilities { get; set; }

        public HostNetworkConfig NetworkConfig { get; set; }

        public HostDnsConfig DnsConfig { get; set; }

        public HostIpRouteConfig IpRouteConfig { get; set; }

        public HostIpRouteConfig ConsoleIpRouteConfig { get; set; }

        public HostNetworkConfigResult UpdateNetworkConfig(HostNetworkConfig config, string changeMode)
        {
            return default(HostNetworkConfigResult);
        }

        public void UpdateDnsConfig(HostDnsConfig config)
        {
        }

        public void UpdateIpRouteConfig(HostIpRouteConfig config)
        {
        }

        public void UpdateConsoleIpRouteConfig(HostIpRouteConfig config)
        {
        }

        public void UpdateIpRouteTableConfig(HostIpRouteTableConfig config)
        {
        }

        public void AddVirtualSwitch(string vswitchName, HostVirtualSwitchSpec spec)
        {
        }

        public void RemoveVirtualSwitch(string vswitchName)
        {
        }

        public void UpdateVirtualSwitch(string vswitchName, HostVirtualSwitchSpec spec)
        {
        }

        public void AddPortGroup(HostPortGroupSpec portgrp)
        {
        }

        public void RemovePortGroup(string pgName)
        {
        }

        public void UpdatePortGroup(string pgName, HostPortGroupSpec portgrp)
        {
        }

        public void UpdatePhysicalNicLinkSpeed(string device, PhysicalNicLinkInfo linkSpeed)
        {
        }

        public PhysicalNicHintInfo[] QueryNetworkHint(string[] device)
        {
            return default(PhysicalNicHintInfo[]);
        }

        public string AddVirtualNic(string portgroup, HostVirtualNicSpec nic)
        {
            return default(string);
        }

        public void RemoveVirtualNic(string device)
        {
        }

        public void UpdateVirtualNic(string device, HostVirtualNicSpec nic)
        {
        }

        public string AddServiceConsoleVirtualNic(string portgroup, HostVirtualNicSpec nic)
        {
            return default(string);
        }

        public void RemoveServiceConsoleVirtualNic(string device)
        {
        }

        public void UpdateServiceConsoleVirtualNic(string device, HostVirtualNicSpec nic)
        {
        }

        public void RestartServiceConsoleVirtualNic(string device)
        {
        }

        public void RefreshNetworkSystem()
        {
        }

        public bool Equals(HostNetworkSystem hostNetworkSystem)
        {
            return (hostNetworkSystem != null && ((this.Capabilities == null && hostNetworkSystem.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(hostNetworkSystem.Capabilities))) && ((this.NetworkInfo == null && hostNetworkSystem.NetworkInfo == null) || (this.NetworkInfo != null && this.NetworkInfo.Equals(hostNetworkSystem.NetworkInfo))) && ((this.OffloadCapabilities == null && hostNetworkSystem.OffloadCapabilities == null) || (this.OffloadCapabilities != null && this.OffloadCapabilities.Equals(hostNetworkSystem.OffloadCapabilities))) && ((this.NetworkConfig == null && hostNetworkSystem.NetworkConfig == null) || (this.NetworkConfig != null && this.NetworkConfig.Equals(hostNetworkSystem.NetworkConfig))) && ((this.DnsConfig == null && hostNetworkSystem.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(hostNetworkSystem.DnsConfig))) && ((this.IpRouteConfig == null && hostNetworkSystem.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(hostNetworkSystem.IpRouteConfig))) && ((this.ConsoleIpRouteConfig == null && hostNetworkSystem.ConsoleIpRouteConfig == null) || (this.ConsoleIpRouteConfig != null && this.ConsoleIpRouteConfig.Equals(hostNetworkSystem.ConsoleIpRouteConfig))));
        }

        public override bool Equals(object hostNetworkSystem)
        {
            return Equals(hostNetworkSystem as HostNetworkSystem);
        }

        public override int GetHashCode()
        {
            return (Capabilities + "_" + NetworkInfo + "_" + OffloadCapabilities + "_" + NetworkConfig + "_" + DnsConfig + "_" + IpRouteConfig + "_" + ConsoleIpRouteConfig).GetHashCode();
        }
    }

    public class HostNetworkTrafficShapingPolicy : DynamicData, IEquatable<HostNetworkTrafficShapingPolicy>
    {
        public bool? Enabled { get; set; }

        public long? AverageBandwidth { get; set; }

        public long? PeakBandwidth { get; set; }

        public long? BurstSize { get; set; }

        public bool Equals(HostNetworkTrafficShapingPolicy hostNetworkTrafficShapingPolicy)
        {
            return (hostNetworkTrafficShapingPolicy != null && ((this.Enabled == null && hostNetworkTrafficShapingPolicy.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(hostNetworkTrafficShapingPolicy.Enabled))) && ((this.AverageBandwidth == null && hostNetworkTrafficShapingPolicy.AverageBandwidth == null) || (this.AverageBandwidth != null && this.AverageBandwidth.Equals(hostNetworkTrafficShapingPolicy.AverageBandwidth))) && ((this.PeakBandwidth == null && hostNetworkTrafficShapingPolicy.PeakBandwidth == null) || (this.PeakBandwidth != null && this.PeakBandwidth.Equals(hostNetworkTrafficShapingPolicy.PeakBandwidth))) && ((this.BurstSize == null && hostNetworkTrafficShapingPolicy.BurstSize == null) || (this.BurstSize != null && this.BurstSize.Equals(hostNetworkTrafficShapingPolicy.BurstSize))));
        }

        public override bool Equals(object hostNetworkTrafficShapingPolicy)
        {
            return Equals(hostNetworkTrafficShapingPolicy as HostNetworkTrafficShapingPolicy);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + AverageBandwidth + "_" + PeakBandwidth + "_" + BurstSize).GetHashCode();
        }
    }

    public class HostNewNetworkConnectInfo : HostConnectInfoNetworkInfo, IEquatable<HostNewNetworkConnectInfo>
    {
        public bool Equals(HostNewNetworkConnectInfo hostNewNetworkConnectInfo)
        {
            return (hostNewNetworkConnectInfo != null && base.Equals(hostNewNetworkConnectInfo));
        }

        public override bool Equals(object hostNewNetworkConnectInfo)
        {
            return Equals(hostNewNetworkConnectInfo as HostNewNetworkConnectInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNicFailureCriteria : DynamicData, IEquatable<HostNicFailureCriteria>
    {
        public string CheckSpeed { get; set; }

        public int? Speed { get; set; }

        public bool? CheckDuplex { get; set; }

        public bool? FullDuplex { get; set; }

        public bool? CheckErrorPercent { get; set; }

        public int? Percentage { get; set; }

        public bool? CheckBeacon { get; set; }

        public bool Equals(HostNicFailureCriteria hostNicFailureCriteria)
        {
            return (hostNicFailureCriteria != null && this.CheckSpeed == hostNicFailureCriteria.CheckSpeed && ((this.Speed == null && hostNicFailureCriteria.Speed == null) || (this.Speed != null && this.Speed.Equals(hostNicFailureCriteria.Speed))) && ((this.CheckDuplex == null && hostNicFailureCriteria.CheckDuplex == null) || (this.CheckDuplex != null && this.CheckDuplex.Equals(hostNicFailureCriteria.CheckDuplex))) && ((this.FullDuplex == null && hostNicFailureCriteria.FullDuplex == null) || (this.FullDuplex != null && this.FullDuplex.Equals(hostNicFailureCriteria.FullDuplex))) && ((this.CheckErrorPercent == null && hostNicFailureCriteria.CheckErrorPercent == null) || (this.CheckErrorPercent != null && this.CheckErrorPercent.Equals(hostNicFailureCriteria.CheckErrorPercent))) && ((this.Percentage == null && hostNicFailureCriteria.Percentage == null) || (this.Percentage != null && this.Percentage.Equals(hostNicFailureCriteria.Percentage))) && ((this.CheckBeacon == null && hostNicFailureCriteria.CheckBeacon == null) || (this.CheckBeacon != null && this.CheckBeacon.Equals(hostNicFailureCriteria.CheckBeacon))));
        }

        public override bool Equals(object hostNicFailureCriteria)
        {
            return Equals(hostNicFailureCriteria as HostNicFailureCriteria);
        }

        public override int GetHashCode()
        {
            return (CheckSpeed + "_" + Speed + "_" + CheckDuplex + "_" + FullDuplex + "_" + CheckErrorPercent + "_" + Percentage + "_" + CheckBeacon).GetHashCode();
        }
    }

    public class HostNicOrderPolicy : DynamicData, IEquatable<HostNicOrderPolicy>
    {
        public string[] ActiveNic { get; set; }

        public string[] StandbyNic { get; set; }

        public bool Equals(HostNicOrderPolicy hostNicOrderPolicy)
        {
            return (hostNicOrderPolicy != null && ((this.ActiveNic == null && hostNicOrderPolicy.ActiveNic == null) || (this.ActiveNic != null && hostNicOrderPolicy.ActiveNic != null && Enumerable.SequenceEqual(this.ActiveNic, hostNicOrderPolicy.ActiveNic))) && ((this.StandbyNic == null && hostNicOrderPolicy.StandbyNic == null) || (this.StandbyNic != null && hostNicOrderPolicy.StandbyNic != null && Enumerable.SequenceEqual(this.StandbyNic, hostNicOrderPolicy.StandbyNic))));
        }

        public override bool Equals(object hostNicOrderPolicy)
        {
            return Equals(hostNicOrderPolicy as HostNicOrderPolicy);
        }

        public override int GetHashCode()
        {
            return (ActiveNic + "_" + StandbyNic).GetHashCode();
        }
    }

    public class HostNicTeamingPolicy : DynamicData, IEquatable<HostNicTeamingPolicy>
    {
        public string Policy { get; set; }

        public bool? ReversePolicy { get; set; }

        public bool? NotifySwitches { get; set; }

        public bool? RollingOrder { get; set; }

        public HostNicFailureCriteria FailureCriteria { get; set; }

        public HostNicOrderPolicy NicOrder { get; set; }

        public bool Equals(HostNicTeamingPolicy hostNicTeamingPolicy)
        {
            return (hostNicTeamingPolicy != null && this.Policy == hostNicTeamingPolicy.Policy && ((this.ReversePolicy == null && hostNicTeamingPolicy.ReversePolicy == null) || (this.ReversePolicy != null && this.ReversePolicy.Equals(hostNicTeamingPolicy.ReversePolicy))) && ((this.NotifySwitches == null && hostNicTeamingPolicy.NotifySwitches == null) || (this.NotifySwitches != null && this.NotifySwitches.Equals(hostNicTeamingPolicy.NotifySwitches))) && ((this.RollingOrder == null && hostNicTeamingPolicy.RollingOrder == null) || (this.RollingOrder != null && this.RollingOrder.Equals(hostNicTeamingPolicy.RollingOrder))) && ((this.FailureCriteria == null && hostNicTeamingPolicy.FailureCriteria == null) || (this.FailureCriteria != null && this.FailureCriteria.Equals(hostNicTeamingPolicy.FailureCriteria))) && ((this.NicOrder == null && hostNicTeamingPolicy.NicOrder == null) || (this.NicOrder != null && this.NicOrder.Equals(hostNicTeamingPolicy.NicOrder))));
        }

        public override bool Equals(object hostNicTeamingPolicy)
        {
            return Equals(hostNicTeamingPolicy as HostNicTeamingPolicy);
        }

        public override int GetHashCode()
        {
            return (Policy + "_" + ReversePolicy + "_" + NotifySwitches + "_" + RollingOrder + "_" + FailureCriteria + "_" + NicOrder).GetHashCode();
        }
    }

    public class HostNoAvailableNetworksEvent : HostDasEvent, IEquatable<HostNoAvailableNetworksEvent>
    {
        public string Ips { get; set; }

        public bool Equals(HostNoAvailableNetworksEvent hostNoAvailableNetworksEvent)
        {
            return (hostNoAvailableNetworksEvent != null && this.Ips == hostNoAvailableNetworksEvent.Ips);
        }

        public override bool Equals(object hostNoAvailableNetworksEvent)
        {
            return Equals(hostNoAvailableNetworksEvent as HostNoAvailableNetworksEvent);
        }

        public override int GetHashCode()
        {
            return (Ips).GetHashCode();
        }
    }

    public class HostNoHAEnabledPortGroupsEvent : HostDasEvent, IEquatable<HostNoHAEnabledPortGroupsEvent>
    {
        public bool Equals(HostNoHAEnabledPortGroupsEvent hostNoHAEnabledPortGroupsEvent)
        {
            return (hostNoHAEnabledPortGroupsEvent != null && base.Equals(hostNoHAEnabledPortGroupsEvent));
        }

        public override bool Equals(object hostNoHAEnabledPortGroupsEvent)
        {
            return Equals(hostNoHAEnabledPortGroupsEvent as HostNoHAEnabledPortGroupsEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNonCompliantEvent : HostEvent, IEquatable<HostNonCompliantEvent>
    {
        public bool Equals(HostNonCompliantEvent hostNonCompliantEvent)
        {
            return (hostNonCompliantEvent != null && base.Equals(hostNonCompliantEvent));
        }

        public override bool Equals(object hostNonCompliantEvent)
        {
            return Equals(hostNonCompliantEvent as HostNonCompliantEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNoRedundantManagementNetworkEvent : HostDasEvent, IEquatable<HostNoRedundantManagementNetworkEvent>
    {
        public bool Equals(HostNoRedundantManagementNetworkEvent hostNoRedundantManagementNetworkEvent)
        {
            return (hostNoRedundantManagementNetworkEvent != null && base.Equals(hostNoRedundantManagementNetworkEvent));
        }

        public override bool Equals(object hostNoRedundantManagementNetworkEvent)
        {
            return Equals(hostNoRedundantManagementNetworkEvent as HostNoRedundantManagementNetworkEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNotConnected : HostCommunication, IEquatable<HostNotConnected>
    {
        public bool Equals(HostNotConnected hostNotConnected)
        {
            return (hostNotConnected != null && base.Equals(hostNotConnected));
        }

        public override bool Equals(object hostNotConnected)
        {
            return Equals(hostNotConnected as HostNotConnected);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNotInClusterEvent : HostDasEvent, IEquatable<HostNotInClusterEvent>
    {
        public bool Equals(HostNotInClusterEvent hostNotInClusterEvent)
        {
            return (hostNotInClusterEvent != null && base.Equals(hostNotInClusterEvent));
        }

        public override bool Equals(object hostNotInClusterEvent)
        {
            return Equals(hostNotInClusterEvent as HostNotInClusterEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNotReachable : HostCommunication, IEquatable<HostNotReachable>
    {
        public bool Equals(HostNotReachable hostNotReachable)
        {
            return (hostNotReachable != null && base.Equals(hostNotReachable));
        }

        public override bool Equals(object hostNotReachable)
        {
            return Equals(hostNotReachable as HostNotReachable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostNtpConfig : DynamicData, IEquatable<HostNtpConfig>
    {
        public string[] Server { get; set; }

        public string[] ConfigFile { get; set; }

        public bool Equals(HostNtpConfig hostNtpConfig)
        {
            return (hostNtpConfig != null && ((this.Server == null && hostNtpConfig.Server == null) || (this.Server != null && hostNtpConfig.Server != null && Enumerable.SequenceEqual(this.Server, hostNtpConfig.Server))) && ((this.ConfigFile == null && hostNtpConfig.ConfigFile == null) || (this.ConfigFile != null && hostNtpConfig.ConfigFile != null && Enumerable.SequenceEqual(this.ConfigFile, hostNtpConfig.ConfigFile))));
        }

        public override bool Equals(object hostNtpConfig)
        {
            return Equals(hostNtpConfig as HostNtpConfig);
        }

        public override int GetHashCode()
        {
            return (Server + "_" + ConfigFile).GetHashCode();
        }
    }

    public class HostNumaInfo : DynamicData, IEquatable<HostNumaInfo>
    {
        public string Type { get; set; }

        public int NumNodes { get; set; }

        public HostNumaNode[] NumaNode { get; set; }

        public bool Equals(HostNumaInfo hostNumaInfo)
        {
            return (hostNumaInfo != null && this.Type == hostNumaInfo.Type && this.NumNodes == hostNumaInfo.NumNodes && ((this.NumaNode == null && hostNumaInfo.NumaNode == null) || (this.NumaNode != null && hostNumaInfo.NumaNode != null && Enumerable.SequenceEqual(this.NumaNode, hostNumaInfo.NumaNode))));
        }

        public override bool Equals(object hostNumaInfo)
        {
            return Equals(hostNumaInfo as HostNumaInfo);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + NumNodes + "_" + NumaNode).GetHashCode();
        }
    }

    public class HostNumaNode : DynamicData, IEquatable<HostNumaNode>
    {
        public sbyte TypeId { get; set; }

        public short[] CpuID { get; set; }

        public long MemoryRangeBegin { get; set; }

        public long MemoryRangeLength { get; set; }

        public string[] PciId { get; set; }

        public bool Equals(HostNumaNode hostNumaNode)
        {
            return (hostNumaNode != null && this.TypeId == hostNumaNode.TypeId && ((this.CpuID == null && hostNumaNode.CpuID == null) || (this.CpuID != null && hostNumaNode.CpuID != null && Enumerable.SequenceEqual(this.CpuID, hostNumaNode.CpuID))) && this.MemoryRangeBegin == hostNumaNode.MemoryRangeBegin && this.MemoryRangeLength == hostNumaNode.MemoryRangeLength && ((this.PciId == null && hostNumaNode.PciId == null) || (this.PciId != null && hostNumaNode.PciId != null && Enumerable.SequenceEqual(this.PciId, hostNumaNode.PciId))));
        }

        public override bool Equals(object hostNumaNode)
        {
            return Equals(hostNumaNode as HostNumaNode);
        }

        public override int GetHashCode()
        {
            return (TypeId + "_" + CpuID + "_" + MemoryRangeBegin + "_" + MemoryRangeLength + "_" + PciId).GetHashCode();
        }
    }

    public class HostNumericSensorInfo : DynamicData, IEquatable<HostNumericSensorInfo>
    {
        public string Name { get; set; }

        public ElementDescription HealthState { get; set; }

        public long CurrentReading { get; set; }

        public int UnitModifier { get; set; }

        public string BaseUnits { get; set; }

        public string RateUnits { get; set; }

        public string SensorType { get; set; }

        public string Id { get; set; }

        public string TimeStamp { get; set; }

        public bool Equals(HostNumericSensorInfo hostNumericSensorInfo)
        {
            return (hostNumericSensorInfo != null && this.Name == hostNumericSensorInfo.Name && ((this.HealthState == null && hostNumericSensorInfo.HealthState == null) || (this.HealthState != null && this.HealthState.Equals(hostNumericSensorInfo.HealthState))) && this.CurrentReading == hostNumericSensorInfo.CurrentReading && this.UnitModifier == hostNumericSensorInfo.UnitModifier && this.BaseUnits == hostNumericSensorInfo.BaseUnits && this.RateUnits == hostNumericSensorInfo.RateUnits && this.SensorType == hostNumericSensorInfo.SensorType && this.Id == hostNumericSensorInfo.Id && this.TimeStamp == hostNumericSensorInfo.TimeStamp);
        }

        public override bool Equals(object hostNumericSensorInfo)
        {
            return Equals(hostNumericSensorInfo as HostNumericSensorInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + HealthState + "_" + CurrentReading + "_" + UnitModifier + "_" + BaseUnits + "_" + RateUnits + "_" + SensorType + "_" + Id + "_" + TimeStamp).GetHashCode();
        }
    }

    public class HostNvdimmSystem : ViewBase, IEquatable<HostNvdimmSystem>
    {
        public NvdimmSystemInfo NvdimmSystemInfo { get; set; }

        public ManagedObjectReference CreateNvdimmNamespace_Task(NvdimmNamespaceCreateSpec createSpec)
        {
            return default(ManagedObjectReference);
        }

        public NvdimmGuid CreateNvdimmNamespace(NvdimmNamespaceCreateSpec createSpec)
        {
            return default(NvdimmGuid);
        }

        public ManagedObjectReference CreateNvdimmPMemNamespace_Task(NvdimmPMemNamespaceCreateSpec createSpec)
        {
            return default(ManagedObjectReference);
        }

        public NvdimmGuid CreateNvdimmPMemNamespace(NvdimmPMemNamespaceCreateSpec createSpec)
        {
            return default(NvdimmGuid);
        }

        public ManagedObjectReference DeleteNvdimmNamespace_Task(NvdimmNamespaceDeleteSpec deleteSpec)
        {
            return default(ManagedObjectReference);
        }

        public void DeleteNvdimmNamespace(NvdimmNamespaceDeleteSpec deleteSpec)
        {
        }

        public ManagedObjectReference DeleteNvdimmBlockNamespaces_Task()
        {
            return default(ManagedObjectReference);
        }

        public void DeleteNvdimmBlockNamespaces()
        {
        }

        public bool Equals(HostNvdimmSystem hostNvdimmSystem)
        {
            return (hostNvdimmSystem != null && ((this.NvdimmSystemInfo == null && hostNvdimmSystem.NvdimmSystemInfo == null) || (this.NvdimmSystemInfo != null && this.NvdimmSystemInfo.Equals(hostNvdimmSystem.NvdimmSystemInfo))));
        }

        public override bool Equals(object hostNvdimmSystem)
        {
            return Equals(hostNvdimmSystem as HostNvdimmSystem);
        }

        public override int GetHashCode()
        {
            return (NvdimmSystemInfo).GetHashCode();
        }
    }

    public class HostOpaqueNetworkInfo : DynamicData, IEquatable<HostOpaqueNetworkInfo>
    {
        public string OpaqueNetworkId { get; set; }

        public string OpaqueNetworkName { get; set; }

        public string OpaqueNetworkType { get; set; }

        public string[] PnicZone { get; set; }

        public OpaqueNetworkCapability Capability { get; set; }

        public OptionValue[] ExtraConfig { get; set; }

        public bool Equals(HostOpaqueNetworkInfo hostOpaqueNetworkInfo)
        {
            return (hostOpaqueNetworkInfo != null && this.OpaqueNetworkId == hostOpaqueNetworkInfo.OpaqueNetworkId && this.OpaqueNetworkName == hostOpaqueNetworkInfo.OpaqueNetworkName && this.OpaqueNetworkType == hostOpaqueNetworkInfo.OpaqueNetworkType && ((this.PnicZone == null && hostOpaqueNetworkInfo.PnicZone == null) || (this.PnicZone != null && hostOpaqueNetworkInfo.PnicZone != null && Enumerable.SequenceEqual(this.PnicZone, hostOpaqueNetworkInfo.PnicZone))) && ((this.Capability == null && hostOpaqueNetworkInfo.Capability == null) || (this.Capability != null && this.Capability.Equals(hostOpaqueNetworkInfo.Capability))) && ((this.ExtraConfig == null && hostOpaqueNetworkInfo.ExtraConfig == null) || (this.ExtraConfig != null && hostOpaqueNetworkInfo.ExtraConfig != null && Enumerable.SequenceEqual(this.ExtraConfig, hostOpaqueNetworkInfo.ExtraConfig))));
        }

        public override bool Equals(object hostOpaqueNetworkInfo)
        {
            return Equals(hostOpaqueNetworkInfo as HostOpaqueNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (OpaqueNetworkId + "_" + OpaqueNetworkName + "_" + OpaqueNetworkType + "_" + PnicZone + "_" + Capability + "_" + ExtraConfig).GetHashCode();
        }
    }

    public class HostOpaqueSwitch : DynamicData, IEquatable<HostOpaqueSwitch>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string[] Pnic { get; set; }

        public HostOpaqueSwitchPhysicalNicZone[] PnicZone { get; set; }

        public string Status { get; set; }

        public HostVirtualNic[] Vtep { get; set; }

        public OptionValue[] ExtraConfig { get; set; }

        public HostFeatureCapability[] FeatureCapability { get; set; }

        public bool Equals(HostOpaqueSwitch hostOpaqueSwitch)
        {
            return (hostOpaqueSwitch != null && this.Key == hostOpaqueSwitch.Key && this.Name == hostOpaqueSwitch.Name && ((this.Pnic == null && hostOpaqueSwitch.Pnic == null) || (this.Pnic != null && hostOpaqueSwitch.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostOpaqueSwitch.Pnic))) && ((this.PnicZone == null && hostOpaqueSwitch.PnicZone == null) || (this.PnicZone != null && hostOpaqueSwitch.PnicZone != null && Enumerable.SequenceEqual(this.PnicZone, hostOpaqueSwitch.PnicZone))) && this.Status == hostOpaqueSwitch.Status && ((this.Vtep == null && hostOpaqueSwitch.Vtep == null) || (this.Vtep != null && hostOpaqueSwitch.Vtep != null && Enumerable.SequenceEqual(this.Vtep, hostOpaqueSwitch.Vtep))) && ((this.ExtraConfig == null && hostOpaqueSwitch.ExtraConfig == null) || (this.ExtraConfig != null && hostOpaqueSwitch.ExtraConfig != null && Enumerable.SequenceEqual(this.ExtraConfig, hostOpaqueSwitch.ExtraConfig))) && ((this.FeatureCapability == null && hostOpaqueSwitch.FeatureCapability == null) || (this.FeatureCapability != null && hostOpaqueSwitch.FeatureCapability != null && Enumerable.SequenceEqual(this.FeatureCapability, hostOpaqueSwitch.FeatureCapability))));
        }

        public override bool Equals(object hostOpaqueSwitch)
        {
            return Equals(hostOpaqueSwitch as HostOpaqueSwitch);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Pnic + "_" + PnicZone + "_" + Status + "_" + Vtep + "_" + ExtraConfig + "_" + FeatureCapability).GetHashCode();
        }
    }

    public class HostOpaqueSwitchPhysicalNicZone : DynamicData, IEquatable<HostOpaqueSwitchPhysicalNicZone>
    {
        public string Key { get; set; }

        public string[] PnicDevice { get; set; }

        public bool Equals(HostOpaqueSwitchPhysicalNicZone hostOpaqueSwitchPhysicalNicZone)
        {
            return (hostOpaqueSwitchPhysicalNicZone != null && this.Key == hostOpaqueSwitchPhysicalNicZone.Key && ((this.PnicDevice == null && hostOpaqueSwitchPhysicalNicZone.PnicDevice == null) || (this.PnicDevice != null && hostOpaqueSwitchPhysicalNicZone.PnicDevice != null && Enumerable.SequenceEqual(this.PnicDevice, hostOpaqueSwitchPhysicalNicZone.PnicDevice))));
        }

        public override bool Equals(object hostOpaqueSwitchPhysicalNicZone)
        {
            return Equals(hostOpaqueSwitchPhysicalNicZone as HostOpaqueSwitchPhysicalNicZone);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + PnicDevice).GetHashCode();
        }
    }

    public class HostOvercommittedEvent : ClusterOvercommittedEvent, IEquatable<HostOvercommittedEvent>
    {
        public bool Equals(HostOvercommittedEvent hostOvercommittedEvent)
        {
            return (hostOvercommittedEvent != null && base.Equals(hostOvercommittedEvent));
        }

        public override bool Equals(object hostOvercommittedEvent)
        {
            return Equals(hostOvercommittedEvent as HostOvercommittedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostParallelScsiHba : HostHostBusAdapter, IEquatable<HostParallelScsiHba>
    {
        public bool Equals(HostParallelScsiHba hostParallelScsiHba)
        {
            return (hostParallelScsiHba != null && base.Equals(hostParallelScsiHba));
        }

        public override bool Equals(object hostParallelScsiHba)
        {
            return Equals(hostParallelScsiHba as HostParallelScsiHba);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostParallelScsiTargetTransport : HostTargetTransport, IEquatable<HostParallelScsiTargetTransport>
    {
        public bool Equals(HostParallelScsiTargetTransport hostParallelScsiTargetTransport)
        {
            return (hostParallelScsiTargetTransport != null && base.Equals(hostParallelScsiTargetTransport));
        }

        public override bool Equals(object hostParallelScsiTargetTransport)
        {
            return Equals(hostParallelScsiTargetTransport as HostParallelScsiTargetTransport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostPatchManager : ViewBase, IEquatable<HostPatchManager>
    {
        public ManagedObjectReference CheckHostPatch_Task(string[] metaUrls, string[] bundleUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult CheckHostPatch(string[] metaUrls, string[] bundleUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public ManagedObjectReference ScanHostPatch_Task(HostPatchManagerLocator repository, string[] updateID)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerStatus[] ScanHostPatch(HostPatchManagerLocator repository, string[] updateID)
        {
            return default(HostPatchManagerStatus[]);
        }

        public ManagedObjectReference ScanHostPatchV2_Task(string[] metaUrls, string[] bundleUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult ScanHostPatchV2(string[] metaUrls, string[] bundleUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public ManagedObjectReference StageHostPatch_Task(string[] metaUrls, string[] bundleUrls, string[] vibUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult StageHostPatch(string[] metaUrls, string[] bundleUrls, string[] vibUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public ManagedObjectReference InstallHostPatch_Task(HostPatchManagerLocator repository, string updateID, bool? force)
        {
            return default(ManagedObjectReference);
        }

        public void InstallHostPatch(HostPatchManagerLocator repository, string updateID, bool? force)
        {
        }

        public ManagedObjectReference InstallHostPatchV2_Task(string[] metaUrls, string[] bundleUrls, string[] vibUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult InstallHostPatchV2(string[] metaUrls, string[] bundleUrls, string[] vibUrls, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public ManagedObjectReference UninstallHostPatch_Task(string[] bulletinIds, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult UninstallHostPatch(string[] bulletinIds, HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public ManagedObjectReference QueryHostPatch_Task(HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public HostPatchManagerResult QueryHostPatch(HostPatchManagerPatchManagerOperationSpec spec)
        {
            return default(HostPatchManagerResult);
        }

        public bool Equals(HostPatchManager hostPatchManager)
        {
            return (hostPatchManager != null && base.Equals(hostPatchManager));
        }

        public override bool Equals(object hostPatchManager)
        {
            return Equals(hostPatchManager as HostPatchManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostPatchManagerLocator : DynamicData, IEquatable<HostPatchManagerLocator>
    {
        public string Url { get; set; }

        public string Proxy { get; set; }

        public bool Equals(HostPatchManagerLocator hostPatchManagerLocator)
        {
            return (hostPatchManagerLocator != null && this.Url == hostPatchManagerLocator.Url && this.Proxy == hostPatchManagerLocator.Proxy);
        }

        public override bool Equals(object hostPatchManagerLocator)
        {
            return Equals(hostPatchManagerLocator as HostPatchManagerLocator);
        }

        public override int GetHashCode()
        {
            return (Url + "_" + Proxy).GetHashCode();
        }
    }

    public class HostPatchManagerPatchManagerOperationSpec : DynamicData, IEquatable<HostPatchManagerPatchManagerOperationSpec>
    {
        public string Proxy { get; set; }

        public int? Port { get; set; }

        public string UserName { get; set; }

        public string Password { get; set; }

        public string CmdOption { get; set; }

        public bool Equals(HostPatchManagerPatchManagerOperationSpec hostPatchManagerPatchManagerOperationSpec)
        {
            return (hostPatchManagerPatchManagerOperationSpec != null && this.Proxy == hostPatchManagerPatchManagerOperationSpec.Proxy && ((this.Port == null && hostPatchManagerPatchManagerOperationSpec.Port == null) || (this.Port != null && this.Port.Equals(hostPatchManagerPatchManagerOperationSpec.Port))) && this.UserName == hostPatchManagerPatchManagerOperationSpec.UserName && this.Password == hostPatchManagerPatchManagerOperationSpec.Password && this.CmdOption == hostPatchManagerPatchManagerOperationSpec.CmdOption);
        }

        public override bool Equals(object hostPatchManagerPatchManagerOperationSpec)
        {
            return Equals(hostPatchManagerPatchManagerOperationSpec as HostPatchManagerPatchManagerOperationSpec);
        }

        public override int GetHashCode()
        {
            return (Proxy + "_" + Port + "_" + UserName + "_" + Password + "_" + CmdOption).GetHashCode();
        }
    }

    public class HostPatchManagerResult : DynamicData, IEquatable<HostPatchManagerResult>
    {
        public string Version { get; set; }

        public HostPatchManagerStatus[] Status { get; set; }

        public string XmlResult { get; set; }

        public bool Equals(HostPatchManagerResult hostPatchManagerResult)
        {
            return (hostPatchManagerResult != null && this.Version == hostPatchManagerResult.Version && ((this.Status == null && hostPatchManagerResult.Status == null) || (this.Status != null && hostPatchManagerResult.Status != null && Enumerable.SequenceEqual(this.Status, hostPatchManagerResult.Status))) && this.XmlResult == hostPatchManagerResult.XmlResult);
        }

        public override bool Equals(object hostPatchManagerResult)
        {
            return Equals(hostPatchManagerResult as HostPatchManagerResult);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + Status + "_" + XmlResult).GetHashCode();
        }
    }

    public class HostPatchManagerStatus : DynamicData, IEquatable<HostPatchManagerStatus>
    {
        public string Id { get; set; }

        public bool Applicable { get; set; }

        public string[] Reason { get; set; }

        public string Integrity { get; set; }

        public bool Installed { get; set; }

        public string[] InstallState { get; set; }

        public HostPatchManagerStatusPrerequisitePatch[] PrerequisitePatch { get; set; }

        public bool RestartRequired { get; set; }

        public bool ReconnectRequired { get; set; }

        public bool VmOffRequired { get; set; }

        public string[] SupersededPatchIds { get; set; }

        public bool Equals(HostPatchManagerStatus hostPatchManagerStatus)
        {
            return (hostPatchManagerStatus != null && this.Id == hostPatchManagerStatus.Id && this.Applicable == hostPatchManagerStatus.Applicable && ((this.Reason == null && hostPatchManagerStatus.Reason == null) || (this.Reason != null && hostPatchManagerStatus.Reason != null && Enumerable.SequenceEqual(this.Reason, hostPatchManagerStatus.Reason))) && this.Integrity == hostPatchManagerStatus.Integrity && this.Installed == hostPatchManagerStatus.Installed && ((this.InstallState == null && hostPatchManagerStatus.InstallState == null) || (this.InstallState != null && hostPatchManagerStatus.InstallState != null && Enumerable.SequenceEqual(this.InstallState, hostPatchManagerStatus.InstallState))) && ((this.PrerequisitePatch == null && hostPatchManagerStatus.PrerequisitePatch == null) || (this.PrerequisitePatch != null && hostPatchManagerStatus.PrerequisitePatch != null && Enumerable.SequenceEqual(this.PrerequisitePatch, hostPatchManagerStatus.PrerequisitePatch))) && this.RestartRequired == hostPatchManagerStatus.RestartRequired && this.ReconnectRequired == hostPatchManagerStatus.ReconnectRequired && this.VmOffRequired == hostPatchManagerStatus.VmOffRequired && ((this.SupersededPatchIds == null && hostPatchManagerStatus.SupersededPatchIds == null) || (this.SupersededPatchIds != null && hostPatchManagerStatus.SupersededPatchIds != null && Enumerable.SequenceEqual(this.SupersededPatchIds, hostPatchManagerStatus.SupersededPatchIds))));
        }

        public override bool Equals(object hostPatchManagerStatus)
        {
            return Equals(hostPatchManagerStatus as HostPatchManagerStatus);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Applicable + "_" + Reason + "_" + Integrity + "_" + Installed + "_" + InstallState + "_" + PrerequisitePatch + "_" + RestartRequired + "_" + ReconnectRequired + "_" + VmOffRequired + "_" + SupersededPatchIds).GetHashCode();
        }
    }

    public class HostPatchManagerStatusPrerequisitePatch : DynamicData, IEquatable<HostPatchManagerStatusPrerequisitePatch>
    {
        public string Id { get; set; }

        public string[] InstallState { get; set; }

        public bool Equals(HostPatchManagerStatusPrerequisitePatch hostPatchManagerStatusPrerequisitePatch)
        {
            return (hostPatchManagerStatusPrerequisitePatch != null && this.Id == hostPatchManagerStatusPrerequisitePatch.Id && ((this.InstallState == null && hostPatchManagerStatusPrerequisitePatch.InstallState == null) || (this.InstallState != null && hostPatchManagerStatusPrerequisitePatch.InstallState != null && Enumerable.SequenceEqual(this.InstallState, hostPatchManagerStatusPrerequisitePatch.InstallState))));
        }

        public override bool Equals(object hostPatchManagerStatusPrerequisitePatch)
        {
            return Equals(hostPatchManagerStatusPrerequisitePatch as HostPatchManagerStatusPrerequisitePatch);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + InstallState).GetHashCode();
        }
    }

    public class HostPathSelectionPolicyOption : DynamicData, IEquatable<HostPathSelectionPolicyOption>
    {
        public ElementDescription Policy { get; set; }

        public bool Equals(HostPathSelectionPolicyOption hostPathSelectionPolicyOption)
        {
            return (hostPathSelectionPolicyOption != null && ((this.Policy == null && hostPathSelectionPolicyOption.Policy == null) || (this.Policy != null && this.Policy.Equals(hostPathSelectionPolicyOption.Policy))));
        }

        public override bool Equals(object hostPathSelectionPolicyOption)
        {
            return Equals(hostPathSelectionPolicyOption as HostPathSelectionPolicyOption);
        }

        public override int GetHashCode()
        {
            return (Policy).GetHashCode();
        }
    }

    public class HostPciDevice : DynamicData, IEquatable<HostPciDevice>
    {
        public string Id { get; set; }

        public short ClassId { get; set; }

        public sbyte Bus { get; set; }

        public sbyte Slot { get; set; }

        public sbyte Function { get; set; }

        public short VendorId { get; set; }

        public short SubVendorId { get; set; }

        public string VendorName { get; set; }

        public short DeviceId { get; set; }

        public short SubDeviceId { get; set; }

        public string ParentBridge { get; set; }

        public string DeviceName { get; set; }

        public bool Equals(HostPciDevice hostPciDevice)
        {
            return (hostPciDevice != null && this.Id == hostPciDevice.Id && this.ClassId == hostPciDevice.ClassId && this.Bus == hostPciDevice.Bus && this.Slot == hostPciDevice.Slot && this.Function == hostPciDevice.Function && this.VendorId == hostPciDevice.VendorId && this.SubVendorId == hostPciDevice.SubVendorId && this.VendorName == hostPciDevice.VendorName && this.DeviceId == hostPciDevice.DeviceId && this.SubDeviceId == hostPciDevice.SubDeviceId && this.ParentBridge == hostPciDevice.ParentBridge && this.DeviceName == hostPciDevice.DeviceName);
        }

        public override bool Equals(object hostPciDevice)
        {
            return Equals(hostPciDevice as HostPciDevice);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + ClassId + "_" + Bus + "_" + Slot + "_" + Function + "_" + VendorId + "_" + SubVendorId + "_" + VendorName + "_" + DeviceId + "_" + SubDeviceId + "_" + ParentBridge + "_" + DeviceName).GetHashCode();
        }
    }

    public class HostPciPassthruConfig : DynamicData, IEquatable<HostPciPassthruConfig>
    {
        public string Id { get; set; }

        public bool PassthruEnabled { get; set; }

        public bool Equals(HostPciPassthruConfig hostPciPassthruConfig)
        {
            return (hostPciPassthruConfig != null && this.Id == hostPciPassthruConfig.Id && this.PassthruEnabled == hostPciPassthruConfig.PassthruEnabled);
        }

        public override bool Equals(object hostPciPassthruConfig)
        {
            return Equals(hostPciPassthruConfig as HostPciPassthruConfig);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + PassthruEnabled).GetHashCode();
        }
    }

    public class HostPciPassthruInfo : DynamicData, IEquatable<HostPciPassthruInfo>
    {
        public string Id { get; set; }

        public string DependentDevice { get; set; }

        public bool PassthruEnabled { get; set; }

        public bool PassthruCapable { get; set; }

        public bool PassthruActive { get; set; }

        public bool Equals(HostPciPassthruInfo hostPciPassthruInfo)
        {
            return (hostPciPassthruInfo != null && this.Id == hostPciPassthruInfo.Id && this.DependentDevice == hostPciPassthruInfo.DependentDevice && this.PassthruEnabled == hostPciPassthruInfo.PassthruEnabled && this.PassthruCapable == hostPciPassthruInfo.PassthruCapable && this.PassthruActive == hostPciPassthruInfo.PassthruActive);
        }

        public override bool Equals(object hostPciPassthruInfo)
        {
            return Equals(hostPciPassthruInfo as HostPciPassthruInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + DependentDevice + "_" + PassthruEnabled + "_" + PassthruCapable + "_" + PassthruActive).GetHashCode();
        }
    }

    public class HostPciPassthruSystem : ExtensibleManagedObject, IEquatable<HostPciPassthruSystem>
    {
        public HostPciPassthruInfo[] PciPassthruInfo { get; set; }

        public HostSriovDevicePoolInfo[] SriovDevicePoolInfo { get; set; }

        public void Refresh()
        {
        }

        public void UpdatePassthruConfig(HostPciPassthruConfig[] config)
        {
        }

        public bool Equals(HostPciPassthruSystem hostPciPassthruSystem)
        {
            return (hostPciPassthruSystem != null && ((this.PciPassthruInfo == null && hostPciPassthruSystem.PciPassthruInfo == null) || (this.PciPassthruInfo != null && hostPciPassthruSystem.PciPassthruInfo != null && Enumerable.SequenceEqual(this.PciPassthruInfo, hostPciPassthruSystem.PciPassthruInfo))) && ((this.SriovDevicePoolInfo == null && hostPciPassthruSystem.SriovDevicePoolInfo == null) || (this.SriovDevicePoolInfo != null && hostPciPassthruSystem.SriovDevicePoolInfo != null && Enumerable.SequenceEqual(this.SriovDevicePoolInfo, hostPciPassthruSystem.SriovDevicePoolInfo))));
        }

        public override bool Equals(object hostPciPassthruSystem)
        {
            return Equals(hostPciPassthruSystem as HostPciPassthruSystem);
        }

        public override int GetHashCode()
        {
            return (PciPassthruInfo + "_" + SriovDevicePoolInfo).GetHashCode();
        }
    }

    public class HostPersistentMemoryInfo : DynamicData, IEquatable<HostPersistentMemoryInfo>
    {
        public long? CapacityInMB { get; set; }

        public string VolumeUUID { get; set; }

        public bool Equals(HostPersistentMemoryInfo hostPersistentMemoryInfo)
        {
            return (hostPersistentMemoryInfo != null && ((this.CapacityInMB == null && hostPersistentMemoryInfo.CapacityInMB == null) || (this.CapacityInMB != null && this.CapacityInMB.Equals(hostPersistentMemoryInfo.CapacityInMB))) && this.VolumeUUID == hostPersistentMemoryInfo.VolumeUUID);
        }

        public override bool Equals(object hostPersistentMemoryInfo)
        {
            return Equals(hostPersistentMemoryInfo as HostPersistentMemoryInfo);
        }

        public override int GetHashCode()
        {
            return (CapacityInMB + "_" + VolumeUUID).GetHashCode();
        }
    }

    public class HostPlacedVirtualNicIdentifier : DynamicData, IEquatable<HostPlacedVirtualNicIdentifier>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VnicKey { get; set; }

        public int? Reservation { get; set; }

        public HostPlacedVirtualNicIdentifier_LinkedView LinkedView { get; set; }

        public bool Equals(HostPlacedVirtualNicIdentifier hostPlacedVirtualNicIdentifier)
        {
            return (hostPlacedVirtualNicIdentifier != null && ((this.Vm == null && hostPlacedVirtualNicIdentifier.Vm == null) || (this.Vm != null && this.Vm.Equals(hostPlacedVirtualNicIdentifier.Vm))) && this.VnicKey == hostPlacedVirtualNicIdentifier.VnicKey && ((this.Reservation == null && hostPlacedVirtualNicIdentifier.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(hostPlacedVirtualNicIdentifier.Reservation))) && ((this.LinkedView == null && hostPlacedVirtualNicIdentifier.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostPlacedVirtualNicIdentifier.LinkedView))));
        }

        public override bool Equals(object hostPlacedVirtualNicIdentifier)
        {
            return Equals(hostPlacedVirtualNicIdentifier as HostPlacedVirtualNicIdentifier);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VnicKey + "_" + Reservation + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostPlacedVirtualNicIdentifier_LinkedView : IEquatable<HostPlacedVirtualNicIdentifier_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(HostPlacedVirtualNicIdentifier_LinkedView hostPlacedVirtualNicIdentifier_LinkedView)
        {
            return (hostPlacedVirtualNicIdentifier_LinkedView != null && ((this.Vm == null && hostPlacedVirtualNicIdentifier_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(hostPlacedVirtualNicIdentifier_LinkedView.Vm))));
        }

        public override bool Equals(object hostPlacedVirtualNicIdentifier_LinkedView)
        {
            return Equals(hostPlacedVirtualNicIdentifier_LinkedView as HostPlacedVirtualNicIdentifier_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class HostPlugStoreTopology : DynamicData, IEquatable<HostPlugStoreTopology>
    {
        public HostPlugStoreTopologyAdapter[] Adapter { get; set; }

        public HostPlugStoreTopologyPath[] Path { get; set; }

        public HostPlugStoreTopologyTarget[] Target { get; set; }

        public HostPlugStoreTopologyDevice[] Device { get; set; }

        public HostPlugStoreTopologyPlugin[] Plugin { get; set; }

        public bool Equals(HostPlugStoreTopology hostPlugStoreTopology)
        {
            return (hostPlugStoreTopology != null && ((this.Adapter == null && hostPlugStoreTopology.Adapter == null) || (this.Adapter != null && hostPlugStoreTopology.Adapter != null && Enumerable.SequenceEqual(this.Adapter, hostPlugStoreTopology.Adapter))) && ((this.Path == null && hostPlugStoreTopology.Path == null) || (this.Path != null && hostPlugStoreTopology.Path != null && Enumerable.SequenceEqual(this.Path, hostPlugStoreTopology.Path))) && ((this.Target == null && hostPlugStoreTopology.Target == null) || (this.Target != null && hostPlugStoreTopology.Target != null && Enumerable.SequenceEqual(this.Target, hostPlugStoreTopology.Target))) && ((this.Device == null && hostPlugStoreTopology.Device == null) || (this.Device != null && hostPlugStoreTopology.Device != null && Enumerable.SequenceEqual(this.Device, hostPlugStoreTopology.Device))) && ((this.Plugin == null && hostPlugStoreTopology.Plugin == null) || (this.Plugin != null && hostPlugStoreTopology.Plugin != null && Enumerable.SequenceEqual(this.Plugin, hostPlugStoreTopology.Plugin))));
        }

        public override bool Equals(object hostPlugStoreTopology)
        {
            return Equals(hostPlugStoreTopology as HostPlugStoreTopology);
        }

        public override int GetHashCode()
        {
            return (Adapter + "_" + Path + "_" + Target + "_" + Device + "_" + Plugin).GetHashCode();
        }
    }

    public class HostPlugStoreTopologyAdapter : DynamicData, IEquatable<HostPlugStoreTopologyAdapter>
    {
        public string Key { get; set; }

        public string Adapter { get; set; }

        public string[] Path { get; set; }

        public bool Equals(HostPlugStoreTopologyAdapter hostPlugStoreTopologyAdapter)
        {
            return (hostPlugStoreTopologyAdapter != null && this.Key == hostPlugStoreTopologyAdapter.Key && this.Adapter == hostPlugStoreTopologyAdapter.Adapter && ((this.Path == null && hostPlugStoreTopologyAdapter.Path == null) || (this.Path != null && hostPlugStoreTopologyAdapter.Path != null && Enumerable.SequenceEqual(this.Path, hostPlugStoreTopologyAdapter.Path))));
        }

        public override bool Equals(object hostPlugStoreTopologyAdapter)
        {
            return Equals(hostPlugStoreTopologyAdapter as HostPlugStoreTopologyAdapter);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Adapter + "_" + Path).GetHashCode();
        }
    }

    public class HostPlugStoreTopologyDevice : DynamicData, IEquatable<HostPlugStoreTopologyDevice>
    {
        public string Key { get; set; }

        public string Lun { get; set; }

        public string[] Path { get; set; }

        public bool Equals(HostPlugStoreTopologyDevice hostPlugStoreTopologyDevice)
        {
            return (hostPlugStoreTopologyDevice != null && this.Key == hostPlugStoreTopologyDevice.Key && this.Lun == hostPlugStoreTopologyDevice.Lun && ((this.Path == null && hostPlugStoreTopologyDevice.Path == null) || (this.Path != null && hostPlugStoreTopologyDevice.Path != null && Enumerable.SequenceEqual(this.Path, hostPlugStoreTopologyDevice.Path))));
        }

        public override bool Equals(object hostPlugStoreTopologyDevice)
        {
            return Equals(hostPlugStoreTopologyDevice as HostPlugStoreTopologyDevice);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Lun + "_" + Path).GetHashCode();
        }
    }

    public class HostPlugStoreTopologyPath : DynamicData, IEquatable<HostPlugStoreTopologyPath>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public int? ChannelNumber { get; set; }

        public int? TargetNumber { get; set; }

        public int? LunNumber { get; set; }

        public string Adapter { get; set; }

        public string Target { get; set; }

        public string Device { get; set; }

        public bool Equals(HostPlugStoreTopologyPath hostPlugStoreTopologyPath)
        {
            return (hostPlugStoreTopologyPath != null && this.Key == hostPlugStoreTopologyPath.Key && this.Name == hostPlugStoreTopologyPath.Name && ((this.ChannelNumber == null && hostPlugStoreTopologyPath.ChannelNumber == null) || (this.ChannelNumber != null && this.ChannelNumber.Equals(hostPlugStoreTopologyPath.ChannelNumber))) && ((this.TargetNumber == null && hostPlugStoreTopologyPath.TargetNumber == null) || (this.TargetNumber != null && this.TargetNumber.Equals(hostPlugStoreTopologyPath.TargetNumber))) && ((this.LunNumber == null && hostPlugStoreTopologyPath.LunNumber == null) || (this.LunNumber != null && this.LunNumber.Equals(hostPlugStoreTopologyPath.LunNumber))) && this.Adapter == hostPlugStoreTopologyPath.Adapter && this.Target == hostPlugStoreTopologyPath.Target && this.Device == hostPlugStoreTopologyPath.Device);
        }

        public override bool Equals(object hostPlugStoreTopologyPath)
        {
            return Equals(hostPlugStoreTopologyPath as HostPlugStoreTopologyPath);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + ChannelNumber + "_" + TargetNumber + "_" + LunNumber + "_" + Adapter + "_" + Target + "_" + Device).GetHashCode();
        }
    }

    public class HostPlugStoreTopologyPlugin : DynamicData, IEquatable<HostPlugStoreTopologyPlugin>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string[] Device { get; set; }

        public string[] ClaimedPath { get; set; }

        public bool Equals(HostPlugStoreTopologyPlugin hostPlugStoreTopologyPlugin)
        {
            return (hostPlugStoreTopologyPlugin != null && this.Key == hostPlugStoreTopologyPlugin.Key && this.Name == hostPlugStoreTopologyPlugin.Name && ((this.Device == null && hostPlugStoreTopologyPlugin.Device == null) || (this.Device != null && hostPlugStoreTopologyPlugin.Device != null && Enumerable.SequenceEqual(this.Device, hostPlugStoreTopologyPlugin.Device))) && ((this.ClaimedPath == null && hostPlugStoreTopologyPlugin.ClaimedPath == null) || (this.ClaimedPath != null && hostPlugStoreTopologyPlugin.ClaimedPath != null && Enumerable.SequenceEqual(this.ClaimedPath, hostPlugStoreTopologyPlugin.ClaimedPath))));
        }

        public override bool Equals(object hostPlugStoreTopologyPlugin)
        {
            return Equals(hostPlugStoreTopologyPlugin as HostPlugStoreTopologyPlugin);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Device + "_" + ClaimedPath).GetHashCode();
        }
    }

    public class HostPlugStoreTopologyTarget : DynamicData, IEquatable<HostPlugStoreTopologyTarget>
    {
        public string Key { get; set; }

        public HostTargetTransport Transport { get; set; }

        public bool Equals(HostPlugStoreTopologyTarget hostPlugStoreTopologyTarget)
        {
            return (hostPlugStoreTopologyTarget != null && this.Key == hostPlugStoreTopologyTarget.Key && ((this.Transport == null && hostPlugStoreTopologyTarget.Transport == null) || (this.Transport != null && this.Transport.Equals(hostPlugStoreTopologyTarget.Transport))));
        }

        public override bool Equals(object hostPlugStoreTopologyTarget)
        {
            return Equals(hostPlugStoreTopologyTarget as HostPlugStoreTopologyTarget);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Transport).GetHashCode();
        }
    }

    public class HostPMemVolume : HostFileSystemVolume, IEquatable<HostPMemVolume>
    {
        public string Uuid { get; set; }

        public string Version { get; set; }

        public bool Equals(HostPMemVolume hostPMemVolume)
        {
            return (hostPMemVolume != null && this.Uuid == hostPMemVolume.Uuid && this.Version == hostPMemVolume.Version);
        }

        public override bool Equals(object hostPMemVolume)
        {
            return Equals(hostPMemVolume as HostPMemVolume);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + Version).GetHashCode();
        }
    }

    public class HostPnicNetworkResourceInfo : DynamicData, IEquatable<HostPnicNetworkResourceInfo>
    {
        public string PnicDevice { get; set; }

        public long? AvailableBandwidthForVMTraffic { get; set; }

        public long? UnusedBandwidthForVMTraffic { get; set; }

        public HostPlacedVirtualNicIdentifier[] PlacedVirtualNics { get; set; }

        public bool Equals(HostPnicNetworkResourceInfo hostPnicNetworkResourceInfo)
        {
            return (hostPnicNetworkResourceInfo != null && this.PnicDevice == hostPnicNetworkResourceInfo.PnicDevice && ((this.AvailableBandwidthForVMTraffic == null && hostPnicNetworkResourceInfo.AvailableBandwidthForVMTraffic == null) || (this.AvailableBandwidthForVMTraffic != null && this.AvailableBandwidthForVMTraffic.Equals(hostPnicNetworkResourceInfo.AvailableBandwidthForVMTraffic))) && ((this.UnusedBandwidthForVMTraffic == null && hostPnicNetworkResourceInfo.UnusedBandwidthForVMTraffic == null) || (this.UnusedBandwidthForVMTraffic != null && this.UnusedBandwidthForVMTraffic.Equals(hostPnicNetworkResourceInfo.UnusedBandwidthForVMTraffic))) && ((this.PlacedVirtualNics == null && hostPnicNetworkResourceInfo.PlacedVirtualNics == null) || (this.PlacedVirtualNics != null && hostPnicNetworkResourceInfo.PlacedVirtualNics != null && Enumerable.SequenceEqual(this.PlacedVirtualNics, hostPnicNetworkResourceInfo.PlacedVirtualNics))));
        }

        public override bool Equals(object hostPnicNetworkResourceInfo)
        {
            return Equals(hostPnicNetworkResourceInfo as HostPnicNetworkResourceInfo);
        }

        public override int GetHashCode()
        {
            return (PnicDevice + "_" + AvailableBandwidthForVMTraffic + "_" + UnusedBandwidthForVMTraffic + "_" + PlacedVirtualNics).GetHashCode();
        }
    }

    public class HostPortGroup : DynamicData, IEquatable<HostPortGroup>
    {
        public string Key { get; set; }

        public HostPortGroupPort[] Port { get; set; }

        public string Vswitch { get; set; }

        public HostNetworkPolicy ComputedPolicy { get; set; }

        public HostPortGroupSpec Spec { get; set; }

        public bool Equals(HostPortGroup hostPortGroup)
        {
            return (hostPortGroup != null && this.Key == hostPortGroup.Key && ((this.Port == null && hostPortGroup.Port == null) || (this.Port != null && hostPortGroup.Port != null && Enumerable.SequenceEqual(this.Port, hostPortGroup.Port))) && this.Vswitch == hostPortGroup.Vswitch && ((this.ComputedPolicy == null && hostPortGroup.ComputedPolicy == null) || (this.ComputedPolicy != null && this.ComputedPolicy.Equals(hostPortGroup.ComputedPolicy))) && ((this.Spec == null && hostPortGroup.Spec == null) || (this.Spec != null && this.Spec.Equals(hostPortGroup.Spec))));
        }

        public override bool Equals(object hostPortGroup)
        {
            return Equals(hostPortGroup as HostPortGroup);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Port + "_" + Vswitch + "_" + ComputedPolicy + "_" + Spec).GetHashCode();
        }
    }

    public class HostPortGroupConfig : DynamicData, IEquatable<HostPortGroupConfig>
    {
        public string ChangeOperation { get; set; }

        public HostPortGroupSpec Spec { get; set; }

        public bool Equals(HostPortGroupConfig hostPortGroupConfig)
        {
            return (hostPortGroupConfig != null && this.ChangeOperation == hostPortGroupConfig.ChangeOperation && ((this.Spec == null && hostPortGroupConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostPortGroupConfig.Spec))));
        }

        public override bool Equals(object hostPortGroupConfig)
        {
            return Equals(hostPortGroupConfig as HostPortGroupConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Spec).GetHashCode();
        }
    }

    public class HostPortGroupPort : DynamicData, IEquatable<HostPortGroupPort>
    {
        public string Key { get; set; }

        public string[] Mac { get; set; }

        public string Type { get; set; }

        public bool Equals(HostPortGroupPort hostPortGroupPort)
        {
            return (hostPortGroupPort != null && this.Key == hostPortGroupPort.Key && ((this.Mac == null && hostPortGroupPort.Mac == null) || (this.Mac != null && hostPortGroupPort.Mac != null && Enumerable.SequenceEqual(this.Mac, hostPortGroupPort.Mac))) && this.Type == hostPortGroupPort.Type);
        }

        public override bool Equals(object hostPortGroupPort)
        {
            return Equals(hostPortGroupPort as HostPortGroupPort);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Mac + "_" + Type).GetHashCode();
        }
    }

    public class HostPortGroupProfile : PortGroupProfile, IEquatable<HostPortGroupProfile>
    {
        public IpAddressProfile IpConfig { get; set; }

        public bool Equals(HostPortGroupProfile hostPortGroupProfile)
        {
            return (hostPortGroupProfile != null && ((this.IpConfig == null && hostPortGroupProfile.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(hostPortGroupProfile.IpConfig))));
        }

        public override bool Equals(object hostPortGroupProfile)
        {
            return Equals(hostPortGroupProfile as HostPortGroupProfile);
        }

        public override int GetHashCode()
        {
            return (IpConfig).GetHashCode();
        }
    }

    public class HostPortGroupSpec : DynamicData, IEquatable<HostPortGroupSpec>
    {
        public string Name { get; set; }

        public int VlanId { get; set; }

        public string VswitchName { get; set; }

        public HostNetworkPolicy Policy { get; set; }

        public bool Equals(HostPortGroupSpec hostPortGroupSpec)
        {
            return (hostPortGroupSpec != null && this.Name == hostPortGroupSpec.Name && this.VlanId == hostPortGroupSpec.VlanId && this.VswitchName == hostPortGroupSpec.VswitchName && ((this.Policy == null && hostPortGroupSpec.Policy == null) || (this.Policy != null && this.Policy.Equals(hostPortGroupSpec.Policy))));
        }

        public override bool Equals(object hostPortGroupSpec)
        {
            return Equals(hostPortGroupSpec as HostPortGroupSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + VlanId + "_" + VswitchName + "_" + Policy).GetHashCode();
        }
    }

    public class HostPosixAccountSpec : HostAccountSpec, IEquatable<HostPosixAccountSpec>
    {
        public int? PosixId { get; set; }

        public bool? ShellAccess { get; set; }

        public bool Equals(HostPosixAccountSpec hostPosixAccountSpec)
        {
            return (hostPosixAccountSpec != null && ((this.PosixId == null && hostPosixAccountSpec.PosixId == null) || (this.PosixId != null && this.PosixId.Equals(hostPosixAccountSpec.PosixId))) && ((this.ShellAccess == null && hostPosixAccountSpec.ShellAccess == null) || (this.ShellAccess != null && this.ShellAccess.Equals(hostPosixAccountSpec.ShellAccess))));
        }

        public override bool Equals(object hostPosixAccountSpec)
        {
            return Equals(hostPosixAccountSpec as HostPosixAccountSpec);
        }

        public override int GetHashCode()
        {
            return (PosixId + "_" + ShellAccess).GetHashCode();
        }
    }

    public class HostPowerOpFailed : VimFault, IEquatable<HostPowerOpFailed>
    {
        public bool Equals(HostPowerOpFailed hostPowerOpFailed)
        {
            return (hostPowerOpFailed != null && base.Equals(hostPowerOpFailed));
        }

        public override bool Equals(object hostPowerOpFailed)
        {
            return Equals(hostPowerOpFailed as HostPowerOpFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostPowerPolicy : DynamicData, IEquatable<HostPowerPolicy>
    {
        public int Key { get; set; }

        public string Name { get; set; }

        public string ShortName { get; set; }

        public string Description { get; set; }

        public bool Equals(HostPowerPolicy hostPowerPolicy)
        {
            return (hostPowerPolicy != null && this.Key == hostPowerPolicy.Key && this.Name == hostPowerPolicy.Name && this.ShortName == hostPowerPolicy.ShortName && this.Description == hostPowerPolicy.Description);
        }

        public override bool Equals(object hostPowerPolicy)
        {
            return Equals(hostPowerPolicy as HostPowerPolicy);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + ShortName + "_" + Description).GetHashCode();
        }
    }

    public class HostPowerSystem : ViewBase, IEquatable<HostPowerSystem>
    {
        public PowerSystemCapability Capability { get; set; }

        public PowerSystemInfo Info { get; set; }

        public void ConfigurePowerPolicy(int key)
        {
        }

        public bool Equals(HostPowerSystem hostPowerSystem)
        {
            return (hostPowerSystem != null && ((this.Capability == null && hostPowerSystem.Capability == null) || (this.Capability != null && this.Capability.Equals(hostPowerSystem.Capability))) && ((this.Info == null && hostPowerSystem.Info == null) || (this.Info != null && this.Info.Equals(hostPowerSystem.Info))));
        }

        public override bool Equals(object hostPowerSystem)
        {
            return Equals(hostPowerSystem as HostPowerSystem);
        }

        public override int GetHashCode()
        {
            return (Capability + "_" + Info).GetHashCode();
        }
    }

    public class HostPrimaryAgentNotShortNameEvent : HostDasEvent, IEquatable<HostPrimaryAgentNotShortNameEvent>
    {
        public string PrimaryAgent { get; set; }

        public bool Equals(HostPrimaryAgentNotShortNameEvent hostPrimaryAgentNotShortNameEvent)
        {
            return (hostPrimaryAgentNotShortNameEvent != null && this.PrimaryAgent == hostPrimaryAgentNotShortNameEvent.PrimaryAgent);
        }

        public override bool Equals(object hostPrimaryAgentNotShortNameEvent)
        {
            return Equals(hostPrimaryAgentNotShortNameEvent as HostPrimaryAgentNotShortNameEvent);
        }

        public override int GetHashCode()
        {
            return (PrimaryAgent).GetHashCode();
        }
    }

    public class HostProfile : Profile, IEquatable<HostProfile>
    {
        public string ValidationState { get; set; }

        public DateTime ValidationStateUpdateTime { get; set; }

        public HostProfileValidationFailureInfo ValidationFailureInfo { get; set; }

        public ManagedObjectReference ReferenceHost { get; set; }

        public new HostProfile_LinkedView LinkedView { get; set; }

        public void HostProfileResetValidationState()
        {
        }

        public void UpdateReferenceHost(ManagedObjectReference host)
        {
        }

        public void UpdateHostProfile(HostProfileConfigSpec config)
        {
        }

        public ProfileExecuteResult ExecuteHostProfile(ManagedObjectReference host, ProfileDeferredPolicyOptionParameter[] deferredParam)
        {
            return default(ProfileExecuteResult);
        }

        public bool Equals(HostProfile hostProfile)
        {
            return (hostProfile != null && this.ValidationState == hostProfile.ValidationState && this.ValidationStateUpdateTime == hostProfile.ValidationStateUpdateTime && ((this.ValidationFailureInfo == null && hostProfile.ValidationFailureInfo == null) || (this.ValidationFailureInfo != null && this.ValidationFailureInfo.Equals(hostProfile.ValidationFailureInfo))) && ((this.ReferenceHost == null && hostProfile.ReferenceHost == null) || (this.ReferenceHost != null && this.ReferenceHost.Equals(hostProfile.ReferenceHost))) && ((this.LinkedView == null && hostProfile.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfile.LinkedView))));
        }

        public override bool Equals(object hostProfile)
        {
            return Equals(hostProfile as HostProfile);
        }

        public override int GetHashCode()
        {
            return (ValidationState + "_" + ValidationStateUpdateTime + "_" + ValidationFailureInfo + "_" + ReferenceHost + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfile_LinkedView : Profile_LinkedView, IEquatable<HostProfile_LinkedView>
    {
        public HostSystem ReferenceHost { get; set; }

        public bool Equals(HostProfile_LinkedView hostProfile_LinkedView)
        {
            return (hostProfile_LinkedView != null && ((this.ReferenceHost == null && hostProfile_LinkedView.ReferenceHost == null) || (this.ReferenceHost != null && this.ReferenceHost.Equals(hostProfile_LinkedView.ReferenceHost))));
        }

        public override bool Equals(object hostProfile_LinkedView)
        {
            return Equals(hostProfile_LinkedView as HostProfile_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ReferenceHost).GetHashCode();
        }
    }

    public class HostProfileAppliedEvent : HostEvent, IEquatable<HostProfileAppliedEvent>
    {
        public ProfileEventArgument Profile { get; set; }

        public bool Equals(HostProfileAppliedEvent hostProfileAppliedEvent)
        {
            return (hostProfileAppliedEvent != null && ((this.Profile == null && hostProfileAppliedEvent.Profile == null) || (this.Profile != null && this.Profile.Equals(hostProfileAppliedEvent.Profile))));
        }

        public override bool Equals(object hostProfileAppliedEvent)
        {
            return Equals(hostProfileAppliedEvent as HostProfileAppliedEvent);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class HostProfileCompleteConfigSpec : HostProfileConfigSpec, IEquatable<HostProfileCompleteConfigSpec>
    {
        public HostApplyProfile ApplyProfile { get; set; }

        public ComplianceProfile CustomComplyProfile { get; set; }

        public bool DisabledExpressionListChanged { get; set; }

        public string[] DisabledExpressionList { get; set; }

        public ManagedObjectReference ValidatorHost { get; set; }

        public bool? Validating { get; set; }

        public HostProfileConfigInfo HostConfig { get; set; }

        public HostProfileCompleteConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileCompleteConfigSpec hostProfileCompleteConfigSpec)
        {
            return (hostProfileCompleteConfigSpec != null && ((this.ApplyProfile == null && hostProfileCompleteConfigSpec.ApplyProfile == null) || (this.ApplyProfile != null && this.ApplyProfile.Equals(hostProfileCompleteConfigSpec.ApplyProfile))) && ((this.CustomComplyProfile == null && hostProfileCompleteConfigSpec.CustomComplyProfile == null) || (this.CustomComplyProfile != null && this.CustomComplyProfile.Equals(hostProfileCompleteConfigSpec.CustomComplyProfile))) && this.DisabledExpressionListChanged == hostProfileCompleteConfigSpec.DisabledExpressionListChanged && ((this.DisabledExpressionList == null && hostProfileCompleteConfigSpec.DisabledExpressionList == null) || (this.DisabledExpressionList != null && hostProfileCompleteConfigSpec.DisabledExpressionList != null && Enumerable.SequenceEqual(this.DisabledExpressionList, hostProfileCompleteConfigSpec.DisabledExpressionList))) && ((this.ValidatorHost == null && hostProfileCompleteConfigSpec.ValidatorHost == null) || (this.ValidatorHost != null && this.ValidatorHost.Equals(hostProfileCompleteConfigSpec.ValidatorHost))) && ((this.Validating == null && hostProfileCompleteConfigSpec.Validating == null) || (this.Validating != null && this.Validating.Equals(hostProfileCompleteConfigSpec.Validating))) && ((this.HostConfig == null && hostProfileCompleteConfigSpec.HostConfig == null) || (this.HostConfig != null && this.HostConfig.Equals(hostProfileCompleteConfigSpec.HostConfig))) && ((this.LinkedView == null && hostProfileCompleteConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileCompleteConfigSpec.LinkedView))));
        }

        public override bool Equals(object hostProfileCompleteConfigSpec)
        {
            return Equals(hostProfileCompleteConfigSpec as HostProfileCompleteConfigSpec);
        }

        public override int GetHashCode()
        {
            return (ApplyProfile + "_" + CustomComplyProfile + "_" + DisabledExpressionListChanged + "_" + DisabledExpressionList + "_" + ValidatorHost + "_" + Validating + "_" + HostConfig + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileCompleteConfigSpec_LinkedView : IEquatable<HostProfileCompleteConfigSpec_LinkedView>
    {
        public HostSystem ValidatorHost { get; set; }

        public bool Equals(HostProfileCompleteConfigSpec_LinkedView hostProfileCompleteConfigSpec_LinkedView)
        {
            return (hostProfileCompleteConfigSpec_LinkedView != null && ((this.ValidatorHost == null && hostProfileCompleteConfigSpec_LinkedView.ValidatorHost == null) || (this.ValidatorHost != null && this.ValidatorHost.Equals(hostProfileCompleteConfigSpec_LinkedView.ValidatorHost))));
        }

        public override bool Equals(object hostProfileCompleteConfigSpec_LinkedView)
        {
            return Equals(hostProfileCompleteConfigSpec_LinkedView as HostProfileCompleteConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ValidatorHost).GetHashCode();
        }
    }

    public class HostProfileConfigInfo : ProfileConfigInfo, IEquatable<HostProfileConfigInfo>
    {
        public HostApplyProfile ApplyProfile { get; set; }

        public ComplianceProfile DefaultComplyProfile { get; set; }

        public ComplianceLocator[] DefaultComplyLocator { get; set; }

        public ComplianceProfile CustomComplyProfile { get; set; }

        public string[] DisabledExpressionList { get; set; }

        public ProfileDescription Description { get; set; }

        public bool Equals(HostProfileConfigInfo hostProfileConfigInfo)
        {
            return (hostProfileConfigInfo != null && ((this.ApplyProfile == null && hostProfileConfigInfo.ApplyProfile == null) || (this.ApplyProfile != null && this.ApplyProfile.Equals(hostProfileConfigInfo.ApplyProfile))) && ((this.DefaultComplyProfile == null && hostProfileConfigInfo.DefaultComplyProfile == null) || (this.DefaultComplyProfile != null && this.DefaultComplyProfile.Equals(hostProfileConfigInfo.DefaultComplyProfile))) && ((this.DefaultComplyLocator == null && hostProfileConfigInfo.DefaultComplyLocator == null) || (this.DefaultComplyLocator != null && hostProfileConfigInfo.DefaultComplyLocator != null && Enumerable.SequenceEqual(this.DefaultComplyLocator, hostProfileConfigInfo.DefaultComplyLocator))) && ((this.CustomComplyProfile == null && hostProfileConfigInfo.CustomComplyProfile == null) || (this.CustomComplyProfile != null && this.CustomComplyProfile.Equals(hostProfileConfigInfo.CustomComplyProfile))) && ((this.DisabledExpressionList == null && hostProfileConfigInfo.DisabledExpressionList == null) || (this.DisabledExpressionList != null && hostProfileConfigInfo.DisabledExpressionList != null && Enumerable.SequenceEqual(this.DisabledExpressionList, hostProfileConfigInfo.DisabledExpressionList))) && ((this.Description == null && hostProfileConfigInfo.Description == null) || (this.Description != null && this.Description.Equals(hostProfileConfigInfo.Description))));
        }

        public override bool Equals(object hostProfileConfigInfo)
        {
            return Equals(hostProfileConfigInfo as HostProfileConfigInfo);
        }

        public override int GetHashCode()
        {
            return (ApplyProfile + "_" + DefaultComplyProfile + "_" + DefaultComplyLocator + "_" + CustomComplyProfile + "_" + DisabledExpressionList + "_" + Description).GetHashCode();
        }
    }

    public class HostProfileConfigSpec : ProfileCreateSpec, IEquatable<HostProfileConfigSpec>
    {
        public bool Equals(HostProfileConfigSpec hostProfileConfigSpec)
        {
            return (hostProfileConfigSpec != null && base.Equals(hostProfileConfigSpec));
        }

        public override bool Equals(object hostProfileConfigSpec)
        {
            return Equals(hostProfileConfigSpec as HostProfileConfigSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostProfileHostBasedConfigSpec : HostProfileConfigSpec, IEquatable<HostProfileHostBasedConfigSpec>
    {
        public ManagedObjectReference Host { get; set; }

        public bool? UseHostProfileEngine { get; set; }

        public HostProfileHostBasedConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileHostBasedConfigSpec hostProfileHostBasedConfigSpec)
        {
            return (hostProfileHostBasedConfigSpec != null && ((this.Host == null && hostProfileHostBasedConfigSpec.Host == null) || (this.Host != null && this.Host.Equals(hostProfileHostBasedConfigSpec.Host))) && ((this.UseHostProfileEngine == null && hostProfileHostBasedConfigSpec.UseHostProfileEngine == null) || (this.UseHostProfileEngine != null && this.UseHostProfileEngine.Equals(hostProfileHostBasedConfigSpec.UseHostProfileEngine))) && ((this.LinkedView == null && hostProfileHostBasedConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileHostBasedConfigSpec.LinkedView))));
        }

        public override bool Equals(object hostProfileHostBasedConfigSpec)
        {
            return Equals(hostProfileHostBasedConfigSpec as HostProfileHostBasedConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + UseHostProfileEngine + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileHostBasedConfigSpec_LinkedView : IEquatable<HostProfileHostBasedConfigSpec_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostProfileHostBasedConfigSpec_LinkedView hostProfileHostBasedConfigSpec_LinkedView)
        {
            return (hostProfileHostBasedConfigSpec_LinkedView != null && ((this.Host == null && hostProfileHostBasedConfigSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostProfileHostBasedConfigSpec_LinkedView.Host))));
        }

        public override bool Equals(object hostProfileHostBasedConfigSpec_LinkedView)
        {
            return Equals(hostProfileHostBasedConfigSpec_LinkedView as HostProfileHostBasedConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostProfileManager : ProfileManager, IEquatable<HostProfileManager>
    {
        public new HostProfileManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference ApplyHostConfig_Task(ManagedObjectReference host, HostConfigSpec configSpec, ProfileDeferredPolicyOptionParameter[] userInput)
        {
            return default(ManagedObjectReference);
        }

        public void ApplyHostConfig(ManagedObjectReference host, HostConfigSpec configSpec, ProfileDeferredPolicyOptionParameter[] userInput)
        {
        }

        public HostProfileManagerConfigTaskList GenerateConfigTaskList(HostConfigSpec configSpec, ManagedObjectReference host)
        {
            return default(HostProfileManagerConfigTaskList);
        }

        public ManagedObjectReference GenerateHostProfileTaskList_Task(HostConfigSpec configSpec, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public HostProfileManagerConfigTaskList GenerateHostProfileTaskList(HostConfigSpec configSpec, ManagedObjectReference host)
        {
            return default(HostProfileManagerConfigTaskList);
        }

        public ProfileMetadata[] QueryHostProfileMetadata(string[] profileName, ManagedObjectReference profile)
        {
            return default(ProfileMetadata[]);
        }

        public ProfileProfileStructure QueryProfileStructure(ManagedObjectReference profile)
        {
            return default(ProfileProfileStructure);
        }

        public ApplyProfile CreateDefaultProfile(string profileType, string profileTypeName, ManagedObjectReference profile)
        {
            return default(ApplyProfile);
        }

        public ManagedObjectReference UpdateAnswerFile_Task(ManagedObjectReference host, AnswerFileCreateSpec configSpec)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateAnswerFile(ManagedObjectReference host, AnswerFileCreateSpec configSpec)
        {
        }

        public AnswerFile RetrieveAnswerFile(ManagedObjectReference host)
        {
            return default(AnswerFile);
        }

        public AnswerFile RetrieveAnswerFileForProfile(ManagedObjectReference host, HostApplyProfile applyProfile)
        {
            return default(AnswerFile);
        }

        public ManagedObjectReference ExportAnswerFile_Task(ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public string ExportAnswerFile(ManagedObjectReference host)
        {
            return default(string);
        }

        public ManagedObjectReference CheckAnswerFileStatus_Task(ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public AnswerFileStatusResult[] CheckAnswerFileStatus(ManagedObjectReference[] host)
        {
            return default(AnswerFileStatusResult[]);
        }

        public AnswerFileStatusResult[] QueryAnswerFileStatus(ManagedObjectReference[] host)
        {
            return default(AnswerFileStatusResult[]);
        }

        public ManagedObjectReference UpdateHostCustomizations_Task(HostProfileManagerHostToConfigSpecMap[] hostToConfigSpecMap)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference[] UpdateHostCustomizations(HostProfileManagerHostToConfigSpecMap[] hostToConfigSpecMap)
        {
            return default(ManagedObjectReference[]);
        }

        public StructuredCustomizations[] RetrieveHostCustomizations(ManagedObjectReference[] hosts)
        {
            return default(StructuredCustomizations[]);
        }

        public StructuredCustomizations[] RetrieveHostCustomizationsForProfile(ManagedObjectReference[] hosts, HostApplyProfile applyProfile)
        {
            return default(StructuredCustomizations[]);
        }

        public ManagedObjectReference GenerateHostConfigTaskSpec_Task(StructuredCustomizations[] hostsInfo)
        {
            return default(ManagedObjectReference);
        }

        public ApplyHostProfileConfigurationSpec[] GenerateHostConfigTaskSpec(StructuredCustomizations[] hostsInfo)
        {
            return default(ApplyHostProfileConfigurationSpec[]);
        }

        public ManagedObjectReference ApplyEntitiesConfig_Task(ApplyHostProfileConfigurationSpec[] applyConfigSpecs)
        {
            return default(ManagedObjectReference);
        }

        public ApplyHostProfileConfigurationResult[] ApplyEntitiesConfig(ApplyHostProfileConfigurationSpec[] applyConfigSpecs)
        {
            return default(ApplyHostProfileConfigurationResult[]);
        }

        public ManagedObjectReference ValidateHostProfileComposition_Task(ManagedObjectReference source, ManagedObjectReference[] targets, HostApplyProfile toBeMerged, HostApplyProfile toReplaceWith, HostApplyProfile toBeDeleted, HostApplyProfile enableStatusToBeCopied, bool? errorOnly)
        {
            return default(ManagedObjectReference);
        }

        public HostProfileManagerCompositionValidationResult ValidateHostProfileComposition(ManagedObjectReference source, ManagedObjectReference[] targets, HostApplyProfile toBeMerged, HostApplyProfile toReplaceWith, HostApplyProfile toBeDeleted, HostApplyProfile enableStatusToBeCopied, bool? errorOnly)
        {
            return default(HostProfileManagerCompositionValidationResult);
        }

        public ManagedObjectReference CompositeHostProfile_Task(ManagedObjectReference source, ManagedObjectReference[] targets, HostApplyProfile toBeMerged, HostApplyProfile toBeReplacedWith, HostApplyProfile toBeDeleted, HostApplyProfile enableStatusToBeCopied)
        {
            return default(ManagedObjectReference);
        }

        public HostProfileManagerCompositionResult CompositeHostProfile(ManagedObjectReference source, ManagedObjectReference[] targets, HostApplyProfile toBeMerged, HostApplyProfile toBeReplacedWith, HostApplyProfile toBeDeleted, HostApplyProfile enableStatusToBeCopied)
        {
            return default(HostProfileManagerCompositionResult);
        }

        public bool Equals(HostProfileManager hostProfileManager)
        {
            return (hostProfileManager != null && ((this.LinkedView == null && hostProfileManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileManager.LinkedView))));
        }

        public override bool Equals(object hostProfileManager)
        {
            return Equals(hostProfileManager as HostProfileManager);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class HostProfileManager_LinkedView : ProfileManager_LinkedView, IEquatable<HostProfileManager_LinkedView>
    {
        public bool Equals(HostProfileManager_LinkedView hostProfileManager_LinkedView)
        {
            return (hostProfileManager_LinkedView != null && base.Equals(hostProfileManager_LinkedView));
        }

        public override bool Equals(object hostProfileManager_LinkedView)
        {
            return Equals(hostProfileManager_LinkedView as HostProfileManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostProfileManagerCompositionResult : DynamicData, IEquatable<HostProfileManagerCompositionResult>
    {
        public LocalizableMessage[] Errors { get; set; }

        public HostProfileManagerCompositionResultResultElement[] Results { get; set; }

        public bool Equals(HostProfileManagerCompositionResult hostProfileManagerCompositionResult)
        {
            return (hostProfileManagerCompositionResult != null && ((this.Errors == null && hostProfileManagerCompositionResult.Errors == null) || (this.Errors != null && hostProfileManagerCompositionResult.Errors != null && Enumerable.SequenceEqual(this.Errors, hostProfileManagerCompositionResult.Errors))) && ((this.Results == null && hostProfileManagerCompositionResult.Results == null) || (this.Results != null && hostProfileManagerCompositionResult.Results != null && Enumerable.SequenceEqual(this.Results, hostProfileManagerCompositionResult.Results))));
        }

        public override bool Equals(object hostProfileManagerCompositionResult)
        {
            return Equals(hostProfileManagerCompositionResult as HostProfileManagerCompositionResult);
        }

        public override int GetHashCode()
        {
            return (Errors + "_" + Results).GetHashCode();
        }
    }

    public class HostProfileManagerCompositionResultResultElement : DynamicData, IEquatable<HostProfileManagerCompositionResultResultElement>
    {
        public ManagedObjectReference Target { get; set; }

        public string Status { get; set; }

        public LocalizableMessage[] Errors { get; set; }

        public HostProfileManagerCompositionResultResultElement_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileManagerCompositionResultResultElement hostProfileManagerCompositionResultResultElement)
        {
            return (hostProfileManagerCompositionResultResultElement != null && ((this.Target == null && hostProfileManagerCompositionResultResultElement.Target == null) || (this.Target != null && this.Target.Equals(hostProfileManagerCompositionResultResultElement.Target))) && this.Status == hostProfileManagerCompositionResultResultElement.Status && ((this.Errors == null && hostProfileManagerCompositionResultResultElement.Errors == null) || (this.Errors != null && hostProfileManagerCompositionResultResultElement.Errors != null && Enumerable.SequenceEqual(this.Errors, hostProfileManagerCompositionResultResultElement.Errors))) && ((this.LinkedView == null && hostProfileManagerCompositionResultResultElement.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileManagerCompositionResultResultElement.LinkedView))));
        }

        public override bool Equals(object hostProfileManagerCompositionResultResultElement)
        {
            return Equals(hostProfileManagerCompositionResultResultElement as HostProfileManagerCompositionResultResultElement);
        }

        public override int GetHashCode()
        {
            return (Target + "_" + Status + "_" + Errors + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileManagerCompositionResultResultElement_LinkedView : IEquatable<HostProfileManagerCompositionResultResultElement_LinkedView>
    {
        public Profile Target { get; set; }

        public bool Equals(HostProfileManagerCompositionResultResultElement_LinkedView hostProfileManagerCompositionResultResultElement_LinkedView)
        {
            return (hostProfileManagerCompositionResultResultElement_LinkedView != null && ((this.Target == null && hostProfileManagerCompositionResultResultElement_LinkedView.Target == null) || (this.Target != null && this.Target.Equals(hostProfileManagerCompositionResultResultElement_LinkedView.Target))));
        }

        public override bool Equals(object hostProfileManagerCompositionResultResultElement_LinkedView)
        {
            return Equals(hostProfileManagerCompositionResultResultElement_LinkedView as HostProfileManagerCompositionResultResultElement_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Target).GetHashCode();
        }
    }

    public class HostProfileManagerCompositionValidationResult : DynamicData, IEquatable<HostProfileManagerCompositionValidationResult>
    {
        public HostProfileManagerCompositionValidationResultResultElement[] Results { get; set; }

        public LocalizableMessage[] Errors { get; set; }

        public bool Equals(HostProfileManagerCompositionValidationResult hostProfileManagerCompositionValidationResult)
        {
            return (hostProfileManagerCompositionValidationResult != null && ((this.Results == null && hostProfileManagerCompositionValidationResult.Results == null) || (this.Results != null && hostProfileManagerCompositionValidationResult.Results != null && Enumerable.SequenceEqual(this.Results, hostProfileManagerCompositionValidationResult.Results))) && ((this.Errors == null && hostProfileManagerCompositionValidationResult.Errors == null) || (this.Errors != null && hostProfileManagerCompositionValidationResult.Errors != null && Enumerable.SequenceEqual(this.Errors, hostProfileManagerCompositionValidationResult.Errors))));
        }

        public override bool Equals(object hostProfileManagerCompositionValidationResult)
        {
            return Equals(hostProfileManagerCompositionValidationResult as HostProfileManagerCompositionValidationResult);
        }

        public override int GetHashCode()
        {
            return (Results + "_" + Errors).GetHashCode();
        }
    }

    public class HostProfileManagerCompositionValidationResultResultElement : DynamicData, IEquatable<HostProfileManagerCompositionValidationResultResultElement>
    {
        public ManagedObjectReference Target { get; set; }

        public string Status { get; set; }

        public LocalizableMessage[] Errors { get; set; }

        public HostApplyProfile SourceDiffForToBeMerged { get; set; }

        public HostApplyProfile TargetDiffForToBeMerged { get; set; }

        public HostApplyProfile ToBeAdded { get; set; }

        public HostApplyProfile ToBeDeleted { get; set; }

        public HostApplyProfile ToBeDisabled { get; set; }

        public HostApplyProfile ToBeEnabled { get; set; }

        public HostApplyProfile ToBeReenableCC { get; set; }

        public HostProfileManagerCompositionValidationResultResultElement_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileManagerCompositionValidationResultResultElement hostProfileManagerCompositionValidationResultResultElement)
        {
            return (hostProfileManagerCompositionValidationResultResultElement != null && ((this.Target == null && hostProfileManagerCompositionValidationResultResultElement.Target == null) || (this.Target != null && this.Target.Equals(hostProfileManagerCompositionValidationResultResultElement.Target))) && this.Status == hostProfileManagerCompositionValidationResultResultElement.Status && ((this.Errors == null && hostProfileManagerCompositionValidationResultResultElement.Errors == null) || (this.Errors != null && hostProfileManagerCompositionValidationResultResultElement.Errors != null && Enumerable.SequenceEqual(this.Errors, hostProfileManagerCompositionValidationResultResultElement.Errors))) && ((this.SourceDiffForToBeMerged == null && hostProfileManagerCompositionValidationResultResultElement.SourceDiffForToBeMerged == null) || (this.SourceDiffForToBeMerged != null && this.SourceDiffForToBeMerged.Equals(hostProfileManagerCompositionValidationResultResultElement.SourceDiffForToBeMerged))) && ((this.TargetDiffForToBeMerged == null && hostProfileManagerCompositionValidationResultResultElement.TargetDiffForToBeMerged == null) || (this.TargetDiffForToBeMerged != null && this.TargetDiffForToBeMerged.Equals(hostProfileManagerCompositionValidationResultResultElement.TargetDiffForToBeMerged))) && ((this.ToBeAdded == null && hostProfileManagerCompositionValidationResultResultElement.ToBeAdded == null) || (this.ToBeAdded != null && this.ToBeAdded.Equals(hostProfileManagerCompositionValidationResultResultElement.ToBeAdded))) && ((this.ToBeDeleted == null && hostProfileManagerCompositionValidationResultResultElement.ToBeDeleted == null) || (this.ToBeDeleted != null && this.ToBeDeleted.Equals(hostProfileManagerCompositionValidationResultResultElement.ToBeDeleted))) && ((this.ToBeDisabled == null && hostProfileManagerCompositionValidationResultResultElement.ToBeDisabled == null) || (this.ToBeDisabled != null && this.ToBeDisabled.Equals(hostProfileManagerCompositionValidationResultResultElement.ToBeDisabled))) && ((this.ToBeEnabled == null && hostProfileManagerCompositionValidationResultResultElement.ToBeEnabled == null) || (this.ToBeEnabled != null && this.ToBeEnabled.Equals(hostProfileManagerCompositionValidationResultResultElement.ToBeEnabled))) && ((this.ToBeReenableCC == null && hostProfileManagerCompositionValidationResultResultElement.ToBeReenableCC == null) || (this.ToBeReenableCC != null && this.ToBeReenableCC.Equals(hostProfileManagerCompositionValidationResultResultElement.ToBeReenableCC))) && ((this.LinkedView == null && hostProfileManagerCompositionValidationResultResultElement.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileManagerCompositionValidationResultResultElement.LinkedView))));
        }

        public override bool Equals(object hostProfileManagerCompositionValidationResultResultElement)
        {
            return Equals(hostProfileManagerCompositionValidationResultResultElement as HostProfileManagerCompositionValidationResultResultElement);
        }

        public override int GetHashCode()
        {
            return (Target + "_" + Status + "_" + Errors + "_" + SourceDiffForToBeMerged + "_" + TargetDiffForToBeMerged + "_" + ToBeAdded + "_" + ToBeDeleted + "_" + ToBeDisabled + "_" + ToBeEnabled + "_" + ToBeReenableCC + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileManagerCompositionValidationResultResultElement_LinkedView : IEquatable<HostProfileManagerCompositionValidationResultResultElement_LinkedView>
    {
        public Profile Target { get; set; }

        public bool Equals(HostProfileManagerCompositionValidationResultResultElement_LinkedView hostProfileManagerCompositionValidationResultResultElement_LinkedView)
        {
            return (hostProfileManagerCompositionValidationResultResultElement_LinkedView != null && ((this.Target == null && hostProfileManagerCompositionValidationResultResultElement_LinkedView.Target == null) || (this.Target != null && this.Target.Equals(hostProfileManagerCompositionValidationResultResultElement_LinkedView.Target))));
        }

        public override bool Equals(object hostProfileManagerCompositionValidationResultResultElement_LinkedView)
        {
            return Equals(hostProfileManagerCompositionValidationResultResultElement_LinkedView as HostProfileManagerCompositionValidationResultResultElement_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Target).GetHashCode();
        }
    }

    public class HostProfileManagerConfigTaskList : DynamicData, IEquatable<HostProfileManagerConfigTaskList>
    {
        public HostConfigSpec ConfigSpec { get; set; }

        public LocalizableMessage[] TaskDescription { get; set; }

        public string[] TaskListRequirement { get; set; }

        public bool Equals(HostProfileManagerConfigTaskList hostProfileManagerConfigTaskList)
        {
            return (hostProfileManagerConfigTaskList != null && ((this.ConfigSpec == null && hostProfileManagerConfigTaskList.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(hostProfileManagerConfigTaskList.ConfigSpec))) && ((this.TaskDescription == null && hostProfileManagerConfigTaskList.TaskDescription == null) || (this.TaskDescription != null && hostProfileManagerConfigTaskList.TaskDescription != null && Enumerable.SequenceEqual(this.TaskDescription, hostProfileManagerConfigTaskList.TaskDescription))) && ((this.TaskListRequirement == null && hostProfileManagerConfigTaskList.TaskListRequirement == null) || (this.TaskListRequirement != null && hostProfileManagerConfigTaskList.TaskListRequirement != null && Enumerable.SequenceEqual(this.TaskListRequirement, hostProfileManagerConfigTaskList.TaskListRequirement))));
        }

        public override bool Equals(object hostProfileManagerConfigTaskList)
        {
            return Equals(hostProfileManagerConfigTaskList as HostProfileManagerConfigTaskList);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + TaskDescription + "_" + TaskListRequirement).GetHashCode();
        }
    }

    public class HostProfileManagerHostToConfigSpecMap : DynamicData, IEquatable<HostProfileManagerHostToConfigSpecMap>
    {
        public ManagedObjectReference Host { get; set; }

        public AnswerFileCreateSpec ConfigSpec { get; set; }

        public HostProfileManagerHostToConfigSpecMap_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileManagerHostToConfigSpecMap hostProfileManagerHostToConfigSpecMap)
        {
            return (hostProfileManagerHostToConfigSpecMap != null && ((this.Host == null && hostProfileManagerHostToConfigSpecMap.Host == null) || (this.Host != null && this.Host.Equals(hostProfileManagerHostToConfigSpecMap.Host))) && ((this.ConfigSpec == null && hostProfileManagerHostToConfigSpecMap.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(hostProfileManagerHostToConfigSpecMap.ConfigSpec))) && ((this.LinkedView == null && hostProfileManagerHostToConfigSpecMap.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileManagerHostToConfigSpecMap.LinkedView))));
        }

        public override bool Equals(object hostProfileManagerHostToConfigSpecMap)
        {
            return Equals(hostProfileManagerHostToConfigSpecMap as HostProfileManagerHostToConfigSpecMap);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + ConfigSpec + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileManagerHostToConfigSpecMap_LinkedView : IEquatable<HostProfileManagerHostToConfigSpecMap_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostProfileManagerHostToConfigSpecMap_LinkedView hostProfileManagerHostToConfigSpecMap_LinkedView)
        {
            return (hostProfileManagerHostToConfigSpecMap_LinkedView != null && ((this.Host == null && hostProfileManagerHostToConfigSpecMap_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostProfileManagerHostToConfigSpecMap_LinkedView.Host))));
        }

        public override bool Equals(object hostProfileManagerHostToConfigSpecMap_LinkedView)
        {
            return Equals(hostProfileManagerHostToConfigSpecMap_LinkedView as HostProfileManagerHostToConfigSpecMap_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostProfilesEntityCustomizations : DynamicData, IEquatable<HostProfilesEntityCustomizations>
    {
        public bool Equals(HostProfilesEntityCustomizations hostProfilesEntityCustomizations)
        {
            return (hostProfilesEntityCustomizations != null && base.Equals(hostProfilesEntityCustomizations));
        }

        public override bool Equals(object hostProfilesEntityCustomizations)
        {
            return Equals(hostProfilesEntityCustomizations as HostProfilesEntityCustomizations);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostProfileSerializedHostProfileSpec : ProfileSerializedCreateSpec, IEquatable<HostProfileSerializedHostProfileSpec>
    {
        public ManagedObjectReference ValidatorHost { get; set; }

        public bool? Validating { get; set; }

        public HostProfileSerializedHostProfileSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileSerializedHostProfileSpec hostProfileSerializedHostProfileSpec)
        {
            return (hostProfileSerializedHostProfileSpec != null && ((this.ValidatorHost == null && hostProfileSerializedHostProfileSpec.ValidatorHost == null) || (this.ValidatorHost != null && this.ValidatorHost.Equals(hostProfileSerializedHostProfileSpec.ValidatorHost))) && ((this.Validating == null && hostProfileSerializedHostProfileSpec.Validating == null) || (this.Validating != null && this.Validating.Equals(hostProfileSerializedHostProfileSpec.Validating))) && ((this.LinkedView == null && hostProfileSerializedHostProfileSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileSerializedHostProfileSpec.LinkedView))));
        }

        public override bool Equals(object hostProfileSerializedHostProfileSpec)
        {
            return Equals(hostProfileSerializedHostProfileSpec as HostProfileSerializedHostProfileSpec);
        }

        public override int GetHashCode()
        {
            return (ValidatorHost + "_" + Validating + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileSerializedHostProfileSpec_LinkedView : IEquatable<HostProfileSerializedHostProfileSpec_LinkedView>
    {
        public HostSystem ValidatorHost { get; set; }

        public bool Equals(HostProfileSerializedHostProfileSpec_LinkedView hostProfileSerializedHostProfileSpec_LinkedView)
        {
            return (hostProfileSerializedHostProfileSpec_LinkedView != null && ((this.ValidatorHost == null && hostProfileSerializedHostProfileSpec_LinkedView.ValidatorHost == null) || (this.ValidatorHost != null && this.ValidatorHost.Equals(hostProfileSerializedHostProfileSpec_LinkedView.ValidatorHost))));
        }

        public override bool Equals(object hostProfileSerializedHostProfileSpec_LinkedView)
        {
            return Equals(hostProfileSerializedHostProfileSpec_LinkedView as HostProfileSerializedHostProfileSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ValidatorHost).GetHashCode();
        }
    }

    public class HostProfileValidationFailureInfo : DynamicData, IEquatable<HostProfileValidationFailureInfo>
    {
        public string Name { get; set; }

        public string Annotation { get; set; }

        public string UpdateType { get; set; }

        public ManagedObjectReference Host { get; set; }

        public HostApplyProfile ApplyProfile { get; set; }

        public ProfileUpdateFailedUpdateFailure[] Failures { get; set; }

        public LocalizedMethodFault[] Faults { get; set; }

        public HostProfileValidationFailureInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HostProfileValidationFailureInfo hostProfileValidationFailureInfo)
        {
            return (hostProfileValidationFailureInfo != null && this.Name == hostProfileValidationFailureInfo.Name && this.Annotation == hostProfileValidationFailureInfo.Annotation && this.UpdateType == hostProfileValidationFailureInfo.UpdateType && ((this.Host == null && hostProfileValidationFailureInfo.Host == null) || (this.Host != null && this.Host.Equals(hostProfileValidationFailureInfo.Host))) && ((this.ApplyProfile == null && hostProfileValidationFailureInfo.ApplyProfile == null) || (this.ApplyProfile != null && this.ApplyProfile.Equals(hostProfileValidationFailureInfo.ApplyProfile))) && ((this.Failures == null && hostProfileValidationFailureInfo.Failures == null) || (this.Failures != null && hostProfileValidationFailureInfo.Failures != null && Enumerable.SequenceEqual(this.Failures, hostProfileValidationFailureInfo.Failures))) && ((this.Faults == null && hostProfileValidationFailureInfo.Faults == null) || (this.Faults != null && hostProfileValidationFailureInfo.Faults != null && Enumerable.SequenceEqual(this.Faults, hostProfileValidationFailureInfo.Faults))) && ((this.LinkedView == null && hostProfileValidationFailureInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProfileValidationFailureInfo.LinkedView))));
        }

        public override bool Equals(object hostProfileValidationFailureInfo)
        {
            return Equals(hostProfileValidationFailureInfo as HostProfileValidationFailureInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Annotation + "_" + UpdateType + "_" + Host + "_" + ApplyProfile + "_" + Failures + "_" + Faults + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProfileValidationFailureInfo_LinkedView : IEquatable<HostProfileValidationFailureInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostProfileValidationFailureInfo_LinkedView hostProfileValidationFailureInfo_LinkedView)
        {
            return (hostProfileValidationFailureInfo_LinkedView != null && ((this.Host == null && hostProfileValidationFailureInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostProfileValidationFailureInfo_LinkedView.Host))));
        }

        public override bool Equals(object hostProfileValidationFailureInfo_LinkedView)
        {
            return Equals(hostProfileValidationFailureInfo_LinkedView as HostProfileValidationFailureInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostProtocolEndpoint : DynamicData, IEquatable<HostProtocolEndpoint>
    {
        public string PeType { get; set; }

        public string Type { get; set; }

        public string Uuid { get; set; }

        public ManagedObjectReference[] HostKey { get; set; }

        public string StorageArray { get; set; }

        public string NfsServer { get; set; }

        public string NfsDir { get; set; }

        public string NfsServerScope { get; set; }

        public string NfsServerMajor { get; set; }

        public string NfsServerAuthType { get; set; }

        public string NfsServerUser { get; set; }

        public string DeviceId { get; set; }

        public HostProtocolEndpoint_LinkedView LinkedView { get; set; }

        public bool Equals(HostProtocolEndpoint hostProtocolEndpoint)
        {
            return (hostProtocolEndpoint != null && this.PeType == hostProtocolEndpoint.PeType && this.Type == hostProtocolEndpoint.Type && this.Uuid == hostProtocolEndpoint.Uuid && ((this.HostKey == null && hostProtocolEndpoint.HostKey == null) || (this.HostKey != null && hostProtocolEndpoint.HostKey != null && Enumerable.SequenceEqual(this.HostKey, hostProtocolEndpoint.HostKey))) && this.StorageArray == hostProtocolEndpoint.StorageArray && this.NfsServer == hostProtocolEndpoint.NfsServer && this.NfsDir == hostProtocolEndpoint.NfsDir && this.NfsServerScope == hostProtocolEndpoint.NfsServerScope && this.NfsServerMajor == hostProtocolEndpoint.NfsServerMajor && this.NfsServerAuthType == hostProtocolEndpoint.NfsServerAuthType && this.NfsServerUser == hostProtocolEndpoint.NfsServerUser && this.DeviceId == hostProtocolEndpoint.DeviceId && ((this.LinkedView == null && hostProtocolEndpoint.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostProtocolEndpoint.LinkedView))));
        }

        public override bool Equals(object hostProtocolEndpoint)
        {
            return Equals(hostProtocolEndpoint as HostProtocolEndpoint);
        }

        public override int GetHashCode()
        {
            return (PeType + "_" + Type + "_" + Uuid + "_" + HostKey + "_" + StorageArray + "_" + NfsServer + "_" + NfsDir + "_" + NfsServerScope + "_" + NfsServerMajor + "_" + NfsServerAuthType + "_" + NfsServerUser + "_" + DeviceId + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostProtocolEndpoint_LinkedView : IEquatable<HostProtocolEndpoint_LinkedView>
    {
        public HostSystem[] HostKey { get; set; }

        public bool Equals(HostProtocolEndpoint_LinkedView hostProtocolEndpoint_LinkedView)
        {
            return (hostProtocolEndpoint_LinkedView != null && ((this.HostKey == null && hostProtocolEndpoint_LinkedView.HostKey == null) || (this.HostKey != null && hostProtocolEndpoint_LinkedView.HostKey != null && Enumerable.SequenceEqual(this.HostKey, hostProtocolEndpoint_LinkedView.HostKey))));
        }

        public override bool Equals(object hostProtocolEndpoint_LinkedView)
        {
            return Equals(hostProtocolEndpoint_LinkedView as HostProtocolEndpoint_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HostKey).GetHashCode();
        }
    }

    public class HostProxySwitch : DynamicData, IEquatable<HostProxySwitch>
    {
        public string DvsUuid { get; set; }

        public string DvsName { get; set; }

        public string Key { get; set; }

        public int NumPorts { get; set; }

        public int? ConfigNumPorts { get; set; }

        public int NumPortsAvailable { get; set; }

        public KeyValue[] UplinkPort { get; set; }

        public int? Mtu { get; set; }

        public string[] Pnic { get; set; }

        public HostProxySwitchSpec Spec { get; set; }

        public HostProxySwitchHostLagConfig[] HostLag { get; set; }

        public bool? NetworkReservationSupported { get; set; }

        public bool Equals(HostProxySwitch hostProxySwitch)
        {
            return (hostProxySwitch != null && this.DvsUuid == hostProxySwitch.DvsUuid && this.DvsName == hostProxySwitch.DvsName && this.Key == hostProxySwitch.Key && this.NumPorts == hostProxySwitch.NumPorts && ((this.ConfigNumPorts == null && hostProxySwitch.ConfigNumPorts == null) || (this.ConfigNumPorts != null && this.ConfigNumPorts.Equals(hostProxySwitch.ConfigNumPorts))) && this.NumPortsAvailable == hostProxySwitch.NumPortsAvailable && ((this.UplinkPort == null && hostProxySwitch.UplinkPort == null) || (this.UplinkPort != null && hostProxySwitch.UplinkPort != null && Enumerable.SequenceEqual(this.UplinkPort, hostProxySwitch.UplinkPort))) && ((this.Mtu == null && hostProxySwitch.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostProxySwitch.Mtu))) && ((this.Pnic == null && hostProxySwitch.Pnic == null) || (this.Pnic != null && hostProxySwitch.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostProxySwitch.Pnic))) && ((this.Spec == null && hostProxySwitch.Spec == null) || (this.Spec != null && this.Spec.Equals(hostProxySwitch.Spec))) && ((this.HostLag == null && hostProxySwitch.HostLag == null) || (this.HostLag != null && hostProxySwitch.HostLag != null && Enumerable.SequenceEqual(this.HostLag, hostProxySwitch.HostLag))) && ((this.NetworkReservationSupported == null && hostProxySwitch.NetworkReservationSupported == null) || (this.NetworkReservationSupported != null && this.NetworkReservationSupported.Equals(hostProxySwitch.NetworkReservationSupported))));
        }

        public override bool Equals(object hostProxySwitch)
        {
            return Equals(hostProxySwitch as HostProxySwitch);
        }

        public override int GetHashCode()
        {
            return (DvsUuid + "_" + DvsName + "_" + Key + "_" + NumPorts + "_" + ConfigNumPorts + "_" + NumPortsAvailable + "_" + UplinkPort + "_" + Mtu + "_" + Pnic + "_" + Spec + "_" + HostLag + "_" + NetworkReservationSupported).GetHashCode();
        }
    }

    public class HostProxySwitchConfig : DynamicData, IEquatable<HostProxySwitchConfig>
    {
        public string ChangeOperation { get; set; }

        public string Uuid { get; set; }

        public HostProxySwitchSpec Spec { get; set; }

        public bool Equals(HostProxySwitchConfig hostProxySwitchConfig)
        {
            return (hostProxySwitchConfig != null && this.ChangeOperation == hostProxySwitchConfig.ChangeOperation && this.Uuid == hostProxySwitchConfig.Uuid && ((this.Spec == null && hostProxySwitchConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostProxySwitchConfig.Spec))));
        }

        public override bool Equals(object hostProxySwitchConfig)
        {
            return Equals(hostProxySwitchConfig as HostProxySwitchConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Uuid + "_" + Spec).GetHashCode();
        }
    }

    public class HostProxySwitchHostLagConfig : DynamicData, IEquatable<HostProxySwitchHostLagConfig>
    {
        public string LagKey { get; set; }

        public string LagName { get; set; }

        public KeyValue[] UplinkPort { get; set; }

        public bool Equals(HostProxySwitchHostLagConfig hostProxySwitchHostLagConfig)
        {
            return (hostProxySwitchHostLagConfig != null && this.LagKey == hostProxySwitchHostLagConfig.LagKey && this.LagName == hostProxySwitchHostLagConfig.LagName && ((this.UplinkPort == null && hostProxySwitchHostLagConfig.UplinkPort == null) || (this.UplinkPort != null && hostProxySwitchHostLagConfig.UplinkPort != null && Enumerable.SequenceEqual(this.UplinkPort, hostProxySwitchHostLagConfig.UplinkPort))));
        }

        public override bool Equals(object hostProxySwitchHostLagConfig)
        {
            return Equals(hostProxySwitchHostLagConfig as HostProxySwitchHostLagConfig);
        }

        public override int GetHashCode()
        {
            return (LagKey + "_" + LagName + "_" + UplinkPort).GetHashCode();
        }
    }

    public class HostProxySwitchSpec : DynamicData, IEquatable<HostProxySwitchSpec>
    {
        public DistributedVirtualSwitchHostMemberBacking Backing { get; set; }

        public bool Equals(HostProxySwitchSpec hostProxySwitchSpec)
        {
            return (hostProxySwitchSpec != null && ((this.Backing == null && hostProxySwitchSpec.Backing == null) || (this.Backing != null && this.Backing.Equals(hostProxySwitchSpec.Backing))));
        }

        public override bool Equals(object hostProxySwitchSpec)
        {
            return Equals(hostProxySwitchSpec as HostProxySwitchSpec);
        }

        public override int GetHashCode()
        {
            return (Backing).GetHashCode();
        }
    }

    public class HostReconnectionFailedEvent : HostEvent, IEquatable<HostReconnectionFailedEvent>
    {
        public bool Equals(HostReconnectionFailedEvent hostReconnectionFailedEvent)
        {
            return (hostReconnectionFailedEvent != null && base.Equals(hostReconnectionFailedEvent));
        }

        public override bool Equals(object hostReconnectionFailedEvent)
        {
            return Equals(hostReconnectionFailedEvent as HostReconnectionFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostReliableMemoryInfo : DynamicData, IEquatable<HostReliableMemoryInfo>
    {
        public long MemorySize { get; set; }

        public bool Equals(HostReliableMemoryInfo hostReliableMemoryInfo)
        {
            return (hostReliableMemoryInfo != null && this.MemorySize == hostReliableMemoryInfo.MemorySize);
        }

        public override bool Equals(object hostReliableMemoryInfo)
        {
            return Equals(hostReliableMemoryInfo as HostReliableMemoryInfo);
        }

        public override int GetHashCode()
        {
            return (MemorySize).GetHashCode();
        }
    }

    public class HostRemovedEvent : HostEvent, IEquatable<HostRemovedEvent>
    {
        public bool Equals(HostRemovedEvent hostRemovedEvent)
        {
            return (hostRemovedEvent != null && base.Equals(hostRemovedEvent));
        }

        public override bool Equals(object hostRemovedEvent)
        {
            return Equals(hostRemovedEvent as HostRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostResignatureRescanResult : DynamicData, IEquatable<HostResignatureRescanResult>
    {
        public HostVmfsRescanResult[] Rescan { get; set; }

        public ManagedObjectReference Result { get; set; }

        public HostResignatureRescanResult_LinkedView LinkedView { get; set; }

        public bool Equals(HostResignatureRescanResult hostResignatureRescanResult)
        {
            return (hostResignatureRescanResult != null && ((this.Rescan == null && hostResignatureRescanResult.Rescan == null) || (this.Rescan != null && hostResignatureRescanResult.Rescan != null && Enumerable.SequenceEqual(this.Rescan, hostResignatureRescanResult.Rescan))) && ((this.Result == null && hostResignatureRescanResult.Result == null) || (this.Result != null && this.Result.Equals(hostResignatureRescanResult.Result))) && ((this.LinkedView == null && hostResignatureRescanResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostResignatureRescanResult.LinkedView))));
        }

        public override bool Equals(object hostResignatureRescanResult)
        {
            return Equals(hostResignatureRescanResult as HostResignatureRescanResult);
        }

        public override int GetHashCode()
        {
            return (Rescan + "_" + Result + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostResignatureRescanResult_LinkedView : IEquatable<HostResignatureRescanResult_LinkedView>
    {
        public Datastore Result { get; set; }

        public bool Equals(HostResignatureRescanResult_LinkedView hostResignatureRescanResult_LinkedView)
        {
            return (hostResignatureRescanResult_LinkedView != null && ((this.Result == null && hostResignatureRescanResult_LinkedView.Result == null) || (this.Result != null && this.Result.Equals(hostResignatureRescanResult_LinkedView.Result))));
        }

        public override bool Equals(object hostResignatureRescanResult_LinkedView)
        {
            return Equals(hostResignatureRescanResult_LinkedView as HostResignatureRescanResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Result).GetHashCode();
        }
    }

    public class HostRuntimeInfo : DynamicData, IEquatable<HostRuntimeInfo>
    {
        public HostSystemConnectionState ConnectionState { get; set; }

        public HostSystemPowerState PowerState { get; set; }

        public string StandbyMode { get; set; }

        public bool InMaintenanceMode { get; set; }

        public bool? InQuarantineMode { get; set; }

        public DateTime? BootTime { get; set; }

        public HealthSystemRuntime HealthSystemRuntime { get; set; }

        public ClusterDasFdmHostState DasHostState { get; set; }

        public HostTpmDigestInfo[] TpmPcrValues { get; set; }

        public VsanHostRuntimeInfo VsanRuntimeInfo { get; set; }

        public HostRuntimeInfoNetworkRuntimeInfo NetworkRuntimeInfo { get; set; }

        public HostVFlashManagerVFlashResourceRunTimeInfo VFlashResourceRuntimeInfo { get; set; }

        public long? HostMaxVirtualDiskCapacity { get; set; }

        public string CryptoState { get; set; }

        public CryptoKeyId CryptoKeyId { get; set; }

        public bool Equals(HostRuntimeInfo hostRuntimeInfo)
        {
            return (hostRuntimeInfo != null && this.ConnectionState == hostRuntimeInfo.ConnectionState && this.PowerState == hostRuntimeInfo.PowerState && this.StandbyMode == hostRuntimeInfo.StandbyMode && this.InMaintenanceMode == hostRuntimeInfo.InMaintenanceMode && ((this.InQuarantineMode == null && hostRuntimeInfo.InQuarantineMode == null) || (this.InQuarantineMode != null && this.InQuarantineMode.Equals(hostRuntimeInfo.InQuarantineMode))) && ((this.BootTime == null && hostRuntimeInfo.BootTime == null) || (this.BootTime != null && this.BootTime.Equals(hostRuntimeInfo.BootTime))) && ((this.HealthSystemRuntime == null && hostRuntimeInfo.HealthSystemRuntime == null) || (this.HealthSystemRuntime != null && this.HealthSystemRuntime.Equals(hostRuntimeInfo.HealthSystemRuntime))) && ((this.DasHostState == null && hostRuntimeInfo.DasHostState == null) || (this.DasHostState != null && this.DasHostState.Equals(hostRuntimeInfo.DasHostState))) && ((this.TpmPcrValues == null && hostRuntimeInfo.TpmPcrValues == null) || (this.TpmPcrValues != null && hostRuntimeInfo.TpmPcrValues != null && Enumerable.SequenceEqual(this.TpmPcrValues, hostRuntimeInfo.TpmPcrValues))) && ((this.VsanRuntimeInfo == null && hostRuntimeInfo.VsanRuntimeInfo == null) || (this.VsanRuntimeInfo != null && this.VsanRuntimeInfo.Equals(hostRuntimeInfo.VsanRuntimeInfo))) && ((this.NetworkRuntimeInfo == null && hostRuntimeInfo.NetworkRuntimeInfo == null) || (this.NetworkRuntimeInfo != null && this.NetworkRuntimeInfo.Equals(hostRuntimeInfo.NetworkRuntimeInfo))) && ((this.VFlashResourceRuntimeInfo == null && hostRuntimeInfo.VFlashResourceRuntimeInfo == null) || (this.VFlashResourceRuntimeInfo != null && this.VFlashResourceRuntimeInfo.Equals(hostRuntimeInfo.VFlashResourceRuntimeInfo))) && ((this.HostMaxVirtualDiskCapacity == null && hostRuntimeInfo.HostMaxVirtualDiskCapacity == null) || (this.HostMaxVirtualDiskCapacity != null && this.HostMaxVirtualDiskCapacity.Equals(hostRuntimeInfo.HostMaxVirtualDiskCapacity))) && this.CryptoState == hostRuntimeInfo.CryptoState && ((this.CryptoKeyId == null && hostRuntimeInfo.CryptoKeyId == null) || (this.CryptoKeyId != null && this.CryptoKeyId.Equals(hostRuntimeInfo.CryptoKeyId))));
        }

        public override bool Equals(object hostRuntimeInfo)
        {
            return Equals(hostRuntimeInfo as HostRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (ConnectionState + "_" + PowerState + "_" + StandbyMode + "_" + InMaintenanceMode + "_" + InQuarantineMode + "_" + BootTime + "_" + HealthSystemRuntime + "_" + DasHostState + "_" + TpmPcrValues + "_" + VsanRuntimeInfo + "_" + NetworkRuntimeInfo + "_" + VFlashResourceRuntimeInfo + "_" + HostMaxVirtualDiskCapacity + "_" + CryptoState + "_" + CryptoKeyId).GetHashCode();
        }
    }

    public class HostRuntimeInfoNetStackInstanceRuntimeInfo : DynamicData, IEquatable<HostRuntimeInfoNetStackInstanceRuntimeInfo>
    {
        public string NetStackInstanceKey { get; set; }

        public string State { get; set; }

        public string[] VmknicKeys { get; set; }

        public int? MaxNumberOfConnections { get; set; }

        public bool? CurrentIpV6Enabled { get; set; }

        public bool Equals(HostRuntimeInfoNetStackInstanceRuntimeInfo hostRuntimeInfoNetStackInstanceRuntimeInfo)
        {
            return (hostRuntimeInfoNetStackInstanceRuntimeInfo != null && this.NetStackInstanceKey == hostRuntimeInfoNetStackInstanceRuntimeInfo.NetStackInstanceKey && this.State == hostRuntimeInfoNetStackInstanceRuntimeInfo.State && ((this.VmknicKeys == null && hostRuntimeInfoNetStackInstanceRuntimeInfo.VmknicKeys == null) || (this.VmknicKeys != null && hostRuntimeInfoNetStackInstanceRuntimeInfo.VmknicKeys != null && Enumerable.SequenceEqual(this.VmknicKeys, hostRuntimeInfoNetStackInstanceRuntimeInfo.VmknicKeys))) && ((this.MaxNumberOfConnections == null && hostRuntimeInfoNetStackInstanceRuntimeInfo.MaxNumberOfConnections == null) || (this.MaxNumberOfConnections != null && this.MaxNumberOfConnections.Equals(hostRuntimeInfoNetStackInstanceRuntimeInfo.MaxNumberOfConnections))) && ((this.CurrentIpV6Enabled == null && hostRuntimeInfoNetStackInstanceRuntimeInfo.CurrentIpV6Enabled == null) || (this.CurrentIpV6Enabled != null && this.CurrentIpV6Enabled.Equals(hostRuntimeInfoNetStackInstanceRuntimeInfo.CurrentIpV6Enabled))));
        }

        public override bool Equals(object hostRuntimeInfoNetStackInstanceRuntimeInfo)
        {
            return Equals(hostRuntimeInfoNetStackInstanceRuntimeInfo as HostRuntimeInfoNetStackInstanceRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (NetStackInstanceKey + "_" + State + "_" + VmknicKeys + "_" + MaxNumberOfConnections + "_" + CurrentIpV6Enabled).GetHashCode();
        }
    }

    public class HostRuntimeInfoNetworkRuntimeInfo : DynamicData, IEquatable<HostRuntimeInfoNetworkRuntimeInfo>
    {
        public HostRuntimeInfoNetStackInstanceRuntimeInfo[] NetStackInstanceRuntimeInfo { get; set; }

        public HostNetworkResourceRuntime NetworkResourceRuntime { get; set; }

        public bool Equals(HostRuntimeInfoNetworkRuntimeInfo hostRuntimeInfoNetworkRuntimeInfo)
        {
            return (hostRuntimeInfoNetworkRuntimeInfo != null && ((this.NetStackInstanceRuntimeInfo == null && hostRuntimeInfoNetworkRuntimeInfo.NetStackInstanceRuntimeInfo == null) || (this.NetStackInstanceRuntimeInfo != null && hostRuntimeInfoNetworkRuntimeInfo.NetStackInstanceRuntimeInfo != null && Enumerable.SequenceEqual(this.NetStackInstanceRuntimeInfo, hostRuntimeInfoNetworkRuntimeInfo.NetStackInstanceRuntimeInfo))) && ((this.NetworkResourceRuntime == null && hostRuntimeInfoNetworkRuntimeInfo.NetworkResourceRuntime == null) || (this.NetworkResourceRuntime != null && this.NetworkResourceRuntime.Equals(hostRuntimeInfoNetworkRuntimeInfo.NetworkResourceRuntime))));
        }

        public override bool Equals(object hostRuntimeInfoNetworkRuntimeInfo)
        {
            return Equals(hostRuntimeInfoNetworkRuntimeInfo as HostRuntimeInfoNetworkRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (NetStackInstanceRuntimeInfo + "_" + NetworkResourceRuntime).GetHashCode();
        }
    }

    public class HostScsiDisk : ScsiLun, IEquatable<HostScsiDisk>
    {
        public HostDiskDimensionsLba Capacity { get; set; }

        public string DevicePath { get; set; }

        public bool? Ssd { get; set; }

        public bool? LocalDisk { get; set; }

        public string[] PhysicalLocation { get; set; }

        public bool? EmulatedDIXDIFEnabled { get; set; }

        public VsanHostVsanDiskInfo VsanDiskInfo { get; set; }

        public string ScsiDiskType { get; set; }

        public bool Equals(HostScsiDisk hostScsiDisk)
        {
            return (hostScsiDisk != null && ((this.Capacity == null && hostScsiDisk.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(hostScsiDisk.Capacity))) && this.DevicePath == hostScsiDisk.DevicePath && ((this.Ssd == null && hostScsiDisk.Ssd == null) || (this.Ssd != null && this.Ssd.Equals(hostScsiDisk.Ssd))) && ((this.LocalDisk == null && hostScsiDisk.LocalDisk == null) || (this.LocalDisk != null && this.LocalDisk.Equals(hostScsiDisk.LocalDisk))) && ((this.PhysicalLocation == null && hostScsiDisk.PhysicalLocation == null) || (this.PhysicalLocation != null && hostScsiDisk.PhysicalLocation != null && Enumerable.SequenceEqual(this.PhysicalLocation, hostScsiDisk.PhysicalLocation))) && ((this.EmulatedDIXDIFEnabled == null && hostScsiDisk.EmulatedDIXDIFEnabled == null) || (this.EmulatedDIXDIFEnabled != null && this.EmulatedDIXDIFEnabled.Equals(hostScsiDisk.EmulatedDIXDIFEnabled))) && ((this.VsanDiskInfo == null && hostScsiDisk.VsanDiskInfo == null) || (this.VsanDiskInfo != null && this.VsanDiskInfo.Equals(hostScsiDisk.VsanDiskInfo))) && this.ScsiDiskType == hostScsiDisk.ScsiDiskType);
        }

        public override bool Equals(object hostScsiDisk)
        {
            return Equals(hostScsiDisk as HostScsiDisk);
        }

        public override int GetHashCode()
        {
            return (Capacity + "_" + DevicePath + "_" + Ssd + "_" + LocalDisk + "_" + PhysicalLocation + "_" + EmulatedDIXDIFEnabled + "_" + VsanDiskInfo + "_" + ScsiDiskType).GetHashCode();
        }
    }

    public class HostScsiDiskPartition : DynamicData, IEquatable<HostScsiDiskPartition>
    {
        public string DiskName { get; set; }

        public int Partition { get; set; }

        public bool Equals(HostScsiDiskPartition hostScsiDiskPartition)
        {
            return (hostScsiDiskPartition != null && this.DiskName == hostScsiDiskPartition.DiskName && this.Partition == hostScsiDiskPartition.Partition);
        }

        public override bool Equals(object hostScsiDiskPartition)
        {
            return Equals(hostScsiDiskPartition as HostScsiDiskPartition);
        }

        public override int GetHashCode()
        {
            return (DiskName + "_" + Partition).GetHashCode();
        }
    }

    public class HostScsiTopology : DynamicData, IEquatable<HostScsiTopology>
    {
        public HostScsiTopologyInterface[] Adapter { get; set; }

        public bool Equals(HostScsiTopology hostScsiTopology)
        {
            return (hostScsiTopology != null && ((this.Adapter == null && hostScsiTopology.Adapter == null) || (this.Adapter != null && hostScsiTopology.Adapter != null && Enumerable.SequenceEqual(this.Adapter, hostScsiTopology.Adapter))));
        }

        public override bool Equals(object hostScsiTopology)
        {
            return Equals(hostScsiTopology as HostScsiTopology);
        }

        public override int GetHashCode()
        {
            return (Adapter).GetHashCode();
        }
    }

    public class HostScsiTopologyInterface : DynamicData, IEquatable<HostScsiTopologyInterface>
    {
        public string Key { get; set; }

        public string Adapter { get; set; }

        public HostScsiTopologyTarget[] Target { get; set; }

        public bool Equals(HostScsiTopologyInterface hostScsiTopologyInterface)
        {
            return (hostScsiTopologyInterface != null && this.Key == hostScsiTopologyInterface.Key && this.Adapter == hostScsiTopologyInterface.Adapter && ((this.Target == null && hostScsiTopologyInterface.Target == null) || (this.Target != null && hostScsiTopologyInterface.Target != null && Enumerable.SequenceEqual(this.Target, hostScsiTopologyInterface.Target))));
        }

        public override bool Equals(object hostScsiTopologyInterface)
        {
            return Equals(hostScsiTopologyInterface as HostScsiTopologyInterface);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Adapter + "_" + Target).GetHashCode();
        }
    }

    public class HostScsiTopologyLun : DynamicData, IEquatable<HostScsiTopologyLun>
    {
        public string Key { get; set; }

        public int Lun { get; set; }

        public string ScsiLun { get; set; }

        public bool Equals(HostScsiTopologyLun hostScsiTopologyLun)
        {
            return (hostScsiTopologyLun != null && this.Key == hostScsiTopologyLun.Key && this.Lun == hostScsiTopologyLun.Lun && this.ScsiLun == hostScsiTopologyLun.ScsiLun);
        }

        public override bool Equals(object hostScsiTopologyLun)
        {
            return Equals(hostScsiTopologyLun as HostScsiTopologyLun);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Lun + "_" + ScsiLun).GetHashCode();
        }
    }

    public class HostScsiTopologyTarget : DynamicData, IEquatable<HostScsiTopologyTarget>
    {
        public string Key { get; set; }

        public int Target { get; set; }

        public HostScsiTopologyLun[] Lun { get; set; }

        public HostTargetTransport Transport { get; set; }

        public bool Equals(HostScsiTopologyTarget hostScsiTopologyTarget)
        {
            return (hostScsiTopologyTarget != null && this.Key == hostScsiTopologyTarget.Key && this.Target == hostScsiTopologyTarget.Target && ((this.Lun == null && hostScsiTopologyTarget.Lun == null) || (this.Lun != null && hostScsiTopologyTarget.Lun != null && Enumerable.SequenceEqual(this.Lun, hostScsiTopologyTarget.Lun))) && ((this.Transport == null && hostScsiTopologyTarget.Transport == null) || (this.Transport != null && this.Transport.Equals(hostScsiTopologyTarget.Transport))));
        }

        public override bool Equals(object hostScsiTopologyTarget)
        {
            return Equals(hostScsiTopologyTarget as HostScsiTopologyTarget);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Target + "_" + Lun + "_" + Transport).GetHashCode();
        }
    }

    public class HostSecuritySpec : DynamicData, IEquatable<HostSecuritySpec>
    {
        public string AdminPassword { get; set; }

        public Permission[] RemovePermission { get; set; }

        public Permission[] AddPermission { get; set; }

        public bool Equals(HostSecuritySpec hostSecuritySpec)
        {
            return (hostSecuritySpec != null && this.AdminPassword == hostSecuritySpec.AdminPassword && ((this.RemovePermission == null && hostSecuritySpec.RemovePermission == null) || (this.RemovePermission != null && hostSecuritySpec.RemovePermission != null && Enumerable.SequenceEqual(this.RemovePermission, hostSecuritySpec.RemovePermission))) && ((this.AddPermission == null && hostSecuritySpec.AddPermission == null) || (this.AddPermission != null && hostSecuritySpec.AddPermission != null && Enumerable.SequenceEqual(this.AddPermission, hostSecuritySpec.AddPermission))));
        }

        public override bool Equals(object hostSecuritySpec)
        {
            return Equals(hostSecuritySpec as HostSecuritySpec);
        }

        public override int GetHashCode()
        {
            return (AdminPassword + "_" + RemovePermission + "_" + AddPermission).GetHashCode();
        }
    }

    public class HostSerialAttachedHba : HostHostBusAdapter, IEquatable<HostSerialAttachedHba>
    {
        public string NodeWorldWideName { get; set; }

        public bool Equals(HostSerialAttachedHba hostSerialAttachedHba)
        {
            return (hostSerialAttachedHba != null && this.NodeWorldWideName == hostSerialAttachedHba.NodeWorldWideName);
        }

        public override bool Equals(object hostSerialAttachedHba)
        {
            return Equals(hostSerialAttachedHba as HostSerialAttachedHba);
        }

        public override int GetHashCode()
        {
            return (NodeWorldWideName).GetHashCode();
        }
    }

    public class HostSerialAttachedTargetTransport : HostTargetTransport, IEquatable<HostSerialAttachedTargetTransport>
    {
        public bool Equals(HostSerialAttachedTargetTransport hostSerialAttachedTargetTransport)
        {
            return (hostSerialAttachedTargetTransport != null && base.Equals(hostSerialAttachedTargetTransport));
        }

        public override bool Equals(object hostSerialAttachedTargetTransport)
        {
            return Equals(hostSerialAttachedTargetTransport as HostSerialAttachedTargetTransport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostService : DynamicData, IEquatable<HostService>
    {
        public string Key { get; set; }

        public string Label { get; set; }

        public bool Required { get; set; }

        public bool Uninstallable { get; set; }

        public bool Running { get; set; }

        public string[] Ruleset { get; set; }

        public string Policy { get; set; }

        public HostServiceSourcePackage SourcePackage { get; set; }

        public bool Equals(HostService hostService)
        {
            return (hostService != null && this.Key == hostService.Key && this.Label == hostService.Label && this.Required == hostService.Required && this.Uninstallable == hostService.Uninstallable && this.Running == hostService.Running && ((this.Ruleset == null && hostService.Ruleset == null) || (this.Ruleset != null && hostService.Ruleset != null && Enumerable.SequenceEqual(this.Ruleset, hostService.Ruleset))) && this.Policy == hostService.Policy && ((this.SourcePackage == null && hostService.SourcePackage == null) || (this.SourcePackage != null && this.SourcePackage.Equals(hostService.SourcePackage))));
        }

        public override bool Equals(object hostService)
        {
            return Equals(hostService as HostService);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Label + "_" + Required + "_" + Uninstallable + "_" + Running + "_" + Ruleset + "_" + Policy + "_" + SourcePackage).GetHashCode();
        }
    }

    public class HostServiceConfig : DynamicData, IEquatable<HostServiceConfig>
    {
        public string ServiceId { get; set; }

        public string StartupPolicy { get; set; }

        public bool Equals(HostServiceConfig hostServiceConfig)
        {
            return (hostServiceConfig != null && this.ServiceId == hostServiceConfig.ServiceId && this.StartupPolicy == hostServiceConfig.StartupPolicy);
        }

        public override bool Equals(object hostServiceConfig)
        {
            return Equals(hostServiceConfig as HostServiceConfig);
        }

        public override int GetHashCode()
        {
            return (ServiceId + "_" + StartupPolicy).GetHashCode();
        }
    }

    public class HostServiceInfo : DynamicData, IEquatable<HostServiceInfo>
    {
        public HostService[] Service { get; set; }

        public bool Equals(HostServiceInfo hostServiceInfo)
        {
            return (hostServiceInfo != null && ((this.Service == null && hostServiceInfo.Service == null) || (this.Service != null && hostServiceInfo.Service != null && Enumerable.SequenceEqual(this.Service, hostServiceInfo.Service))));
        }

        public override bool Equals(object hostServiceInfo)
        {
            return Equals(hostServiceInfo as HostServiceInfo);
        }

        public override int GetHashCode()
        {
            return (Service).GetHashCode();
        }
    }

    public class HostServiceSourcePackage : DynamicData, IEquatable<HostServiceSourcePackage>
    {
        public string SourcePackageName { get; set; }

        public string Description { get; set; }

        public bool Equals(HostServiceSourcePackage hostServiceSourcePackage)
        {
            return (hostServiceSourcePackage != null && this.SourcePackageName == hostServiceSourcePackage.SourcePackageName && this.Description == hostServiceSourcePackage.Description);
        }

        public override bool Equals(object hostServiceSourcePackage)
        {
            return Equals(hostServiceSourcePackage as HostServiceSourcePackage);
        }

        public override int GetHashCode()
        {
            return (SourcePackageName + "_" + Description).GetHashCode();
        }
    }

    public class HostServiceSystem : ExtensibleManagedObject, IEquatable<HostServiceSystem>
    {
        public HostServiceInfo ServiceInfo { get; set; }

        public void UpdateServicePolicy(string id, string policy)
        {
        }

        public void StartService(string id)
        {
        }

        public void StopService(string id)
        {
        }

        public void RestartService(string id)
        {
        }

        public void UninstallService(string id)
        {
        }

        public void RefreshServices()
        {
        }

        public bool Equals(HostServiceSystem hostServiceSystem)
        {
            return (hostServiceSystem != null && ((this.ServiceInfo == null && hostServiceSystem.ServiceInfo == null) || (this.ServiceInfo != null && this.ServiceInfo.Equals(hostServiceSystem.ServiceInfo))));
        }

        public override bool Equals(object hostServiceSystem)
        {
            return Equals(hostServiceSystem as HostServiceSystem);
        }

        public override int GetHashCode()
        {
            return (ServiceInfo).GetHashCode();
        }
    }

    public class HostServiceTicket : DynamicData, IEquatable<HostServiceTicket>
    {
        public string Host { get; set; }

        public int? Port { get; set; }

        public string SslThumbprint { get; set; }

        public string Service { get; set; }

        public string ServiceVersion { get; set; }

        public string SessionId { get; set; }

        public bool Equals(HostServiceTicket hostServiceTicket)
        {
            return (hostServiceTicket != null && this.Host == hostServiceTicket.Host && ((this.Port == null && hostServiceTicket.Port == null) || (this.Port != null && this.Port.Equals(hostServiceTicket.Port))) && this.SslThumbprint == hostServiceTicket.SslThumbprint && this.Service == hostServiceTicket.Service && this.ServiceVersion == hostServiceTicket.ServiceVersion && this.SessionId == hostServiceTicket.SessionId);
        }

        public override bool Equals(object hostServiceTicket)
        {
            return Equals(hostServiceTicket as HostServiceTicket);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Port + "_" + SslThumbprint + "_" + Service + "_" + ServiceVersion + "_" + SessionId).GetHashCode();
        }
    }

    public class HostSharedGpuCapabilities : DynamicData, IEquatable<HostSharedGpuCapabilities>
    {
        public string Vgpu { get; set; }

        public bool DiskSnapshotSupported { get; set; }

        public bool MemorySnapshotSupported { get; set; }

        public bool SuspendSupported { get; set; }

        public bool MigrateSupported { get; set; }

        public bool Equals(HostSharedGpuCapabilities hostSharedGpuCapabilities)
        {
            return (hostSharedGpuCapabilities != null && this.Vgpu == hostSharedGpuCapabilities.Vgpu && this.DiskSnapshotSupported == hostSharedGpuCapabilities.DiskSnapshotSupported && this.MemorySnapshotSupported == hostSharedGpuCapabilities.MemorySnapshotSupported && this.SuspendSupported == hostSharedGpuCapabilities.SuspendSupported && this.MigrateSupported == hostSharedGpuCapabilities.MigrateSupported);
        }

        public override bool Equals(object hostSharedGpuCapabilities)
        {
            return Equals(hostSharedGpuCapabilities as HostSharedGpuCapabilities);
        }

        public override int GetHashCode()
        {
            return (Vgpu + "_" + DiskSnapshotSupported + "_" + MemorySnapshotSupported + "_" + SuspendSupported + "_" + MigrateSupported).GetHashCode();
        }
    }

    public class HostShortNameInconsistentEvent : HostDasEvent, IEquatable<HostShortNameInconsistentEvent>
    {
        public string ShortName { get; set; }

        public string ShortName2 { get; set; }

        public bool Equals(HostShortNameInconsistentEvent hostShortNameInconsistentEvent)
        {
            return (hostShortNameInconsistentEvent != null && this.ShortName == hostShortNameInconsistentEvent.ShortName && this.ShortName2 == hostShortNameInconsistentEvent.ShortName2);
        }

        public override bool Equals(object hostShortNameInconsistentEvent)
        {
            return Equals(hostShortNameInconsistentEvent as HostShortNameInconsistentEvent);
        }

        public override int GetHashCode()
        {
            return (ShortName + "_" + ShortName2).GetHashCode();
        }
    }

    public class HostShortNameToIpFailedEvent : HostEvent, IEquatable<HostShortNameToIpFailedEvent>
    {
        public string ShortName { get; set; }

        public bool Equals(HostShortNameToIpFailedEvent hostShortNameToIpFailedEvent)
        {
            return (hostShortNameToIpFailedEvent != null && this.ShortName == hostShortNameToIpFailedEvent.ShortName);
        }

        public override bool Equals(object hostShortNameToIpFailedEvent)
        {
            return Equals(hostShortNameToIpFailedEvent as HostShortNameToIpFailedEvent);
        }

        public override int GetHashCode()
        {
            return (ShortName).GetHashCode();
        }
    }

    public class HostShutdownEvent : HostEvent, IEquatable<HostShutdownEvent>
    {
        public string Reason { get; set; }

        public bool Equals(HostShutdownEvent hostShutdownEvent)
        {
            return (hostShutdownEvent != null && this.Reason == hostShutdownEvent.Reason);
        }

        public override bool Equals(object hostShutdownEvent)
        {
            return Equals(hostShutdownEvent as HostShutdownEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class HostSnmpConfigSpec : DynamicData, IEquatable<HostSnmpConfigSpec>
    {
        public bool? Enabled { get; set; }

        public int? Port { get; set; }

        public string[] ReadOnlyCommunities { get; set; }

        public HostSnmpDestination[] TrapTargets { get; set; }

        public KeyValue[] Option { get; set; }

        public bool Equals(HostSnmpConfigSpec hostSnmpConfigSpec)
        {
            return (hostSnmpConfigSpec != null && ((this.Enabled == null && hostSnmpConfigSpec.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(hostSnmpConfigSpec.Enabled))) && ((this.Port == null && hostSnmpConfigSpec.Port == null) || (this.Port != null && this.Port.Equals(hostSnmpConfigSpec.Port))) && ((this.ReadOnlyCommunities == null && hostSnmpConfigSpec.ReadOnlyCommunities == null) || (this.ReadOnlyCommunities != null && hostSnmpConfigSpec.ReadOnlyCommunities != null && Enumerable.SequenceEqual(this.ReadOnlyCommunities, hostSnmpConfigSpec.ReadOnlyCommunities))) && ((this.TrapTargets == null && hostSnmpConfigSpec.TrapTargets == null) || (this.TrapTargets != null && hostSnmpConfigSpec.TrapTargets != null && Enumerable.SequenceEqual(this.TrapTargets, hostSnmpConfigSpec.TrapTargets))) && ((this.Option == null && hostSnmpConfigSpec.Option == null) || (this.Option != null && hostSnmpConfigSpec.Option != null && Enumerable.SequenceEqual(this.Option, hostSnmpConfigSpec.Option))));
        }

        public override bool Equals(object hostSnmpConfigSpec)
        {
            return Equals(hostSnmpConfigSpec as HostSnmpConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + Port + "_" + ReadOnlyCommunities + "_" + TrapTargets + "_" + Option).GetHashCode();
        }
    }

    public class HostSnmpDestination : DynamicData, IEquatable<HostSnmpDestination>
    {
        public string HostName { get; set; }

        public int Port { get; set; }

        public string Community { get; set; }

        public bool Equals(HostSnmpDestination hostSnmpDestination)
        {
            return (hostSnmpDestination != null && this.HostName == hostSnmpDestination.HostName && this.Port == hostSnmpDestination.Port && this.Community == hostSnmpDestination.Community);
        }

        public override bool Equals(object hostSnmpDestination)
        {
            return Equals(hostSnmpDestination as HostSnmpDestination);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Port + "_" + Community).GetHashCode();
        }
    }

    public class HostSnmpSystem : ViewBase, IEquatable<HostSnmpSystem>
    {
        public HostSnmpConfigSpec Configuration { get; set; }

        public HostSnmpSystemAgentLimits Limits { get; set; }

        public void ReconfigureSnmpAgent(HostSnmpConfigSpec spec)
        {
        }

        public void SendTestNotification()
        {
        }

        public bool Equals(HostSnmpSystem hostSnmpSystem)
        {
            return (hostSnmpSystem != null && ((this.Configuration == null && hostSnmpSystem.Configuration == null) || (this.Configuration != null && this.Configuration.Equals(hostSnmpSystem.Configuration))) && ((this.Limits == null && hostSnmpSystem.Limits == null) || (this.Limits != null && this.Limits.Equals(hostSnmpSystem.Limits))));
        }

        public override bool Equals(object hostSnmpSystem)
        {
            return Equals(hostSnmpSystem as HostSnmpSystem);
        }

        public override int GetHashCode()
        {
            return (Configuration + "_" + Limits).GetHashCode();
        }
    }

    public class HostSnmpSystemAgentLimits : DynamicData, IEquatable<HostSnmpSystemAgentLimits>
    {
        public int MaxReadOnlyCommunities { get; set; }

        public int MaxTrapDestinations { get; set; }

        public int MaxCommunityLength { get; set; }

        public int MaxBufferSize { get; set; }

        public HostSnmpAgentCapability Capability { get; set; }

        public bool Equals(HostSnmpSystemAgentLimits hostSnmpSystemAgentLimits)
        {
            return (hostSnmpSystemAgentLimits != null && this.MaxReadOnlyCommunities == hostSnmpSystemAgentLimits.MaxReadOnlyCommunities && this.MaxTrapDestinations == hostSnmpSystemAgentLimits.MaxTrapDestinations && this.MaxCommunityLength == hostSnmpSystemAgentLimits.MaxCommunityLength && this.MaxBufferSize == hostSnmpSystemAgentLimits.MaxBufferSize && this.Capability == hostSnmpSystemAgentLimits.Capability);
        }

        public override bool Equals(object hostSnmpSystemAgentLimits)
        {
            return Equals(hostSnmpSystemAgentLimits as HostSnmpSystemAgentLimits);
        }

        public override int GetHashCode()
        {
            return (MaxReadOnlyCommunities + "_" + MaxTrapDestinations + "_" + MaxCommunityLength + "_" + MaxBufferSize + "_" + Capability).GetHashCode();
        }
    }

    public class HostSpecification : DynamicData, IEquatable<HostSpecification>
    {
        public DateTime CreatedTime { get; set; }

        public DateTime? LastModified { get; set; }

        public ManagedObjectReference Host { get; set; }

        public HostSubSpecification[] SubSpecs { get; set; }

        public string ChangeID { get; set; }

        public HostSpecification_LinkedView LinkedView { get; set; }

        public bool Equals(HostSpecification hostSpecification)
        {
            return (hostSpecification != null && this.CreatedTime == hostSpecification.CreatedTime && ((this.LastModified == null && hostSpecification.LastModified == null) || (this.LastModified != null && this.LastModified.Equals(hostSpecification.LastModified))) && ((this.Host == null && hostSpecification.Host == null) || (this.Host != null && this.Host.Equals(hostSpecification.Host))) && ((this.SubSpecs == null && hostSpecification.SubSpecs == null) || (this.SubSpecs != null && hostSpecification.SubSpecs != null && Enumerable.SequenceEqual(this.SubSpecs, hostSpecification.SubSpecs))) && this.ChangeID == hostSpecification.ChangeID && ((this.LinkedView == null && hostSpecification.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostSpecification.LinkedView))));
        }

        public override bool Equals(object hostSpecification)
        {
            return Equals(hostSpecification as HostSpecification);
        }

        public override int GetHashCode()
        {
            return (CreatedTime + "_" + LastModified + "_" + Host + "_" + SubSpecs + "_" + ChangeID + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostSpecification_LinkedView : IEquatable<HostSpecification_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostSpecification_LinkedView hostSpecification_LinkedView)
        {
            return (hostSpecification_LinkedView != null && ((this.Host == null && hostSpecification_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostSpecification_LinkedView.Host))));
        }

        public override bool Equals(object hostSpecification_LinkedView)
        {
            return Equals(hostSpecification_LinkedView as HostSpecification_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostSpecificationChangedEvent : HostEvent, IEquatable<HostSpecificationChangedEvent>
    {
        public bool Equals(HostSpecificationChangedEvent hostSpecificationChangedEvent)
        {
            return (hostSpecificationChangedEvent != null && base.Equals(hostSpecificationChangedEvent));
        }

        public override bool Equals(object hostSpecificationChangedEvent)
        {
            return Equals(hostSpecificationChangedEvent as HostSpecificationChangedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSpecificationManager : ViewBase, IEquatable<HostSpecificationManager>
    {
        public void UpdateHostSpecification(ManagedObjectReference host, HostSpecification hostSpec)
        {
        }

        public void UpdateHostSubSpecification(ManagedObjectReference host, HostSubSpecification hostSubSpec)
        {
        }

        public HostSpecification RetrieveHostSpecification(ManagedObjectReference host, bool fromHost)
        {
            return default(HostSpecification);
        }

        public void DeleteHostSubSpecification(ManagedObjectReference host, string subSpecName)
        {
        }

        public void DeleteHostSpecification(ManagedObjectReference host)
        {
        }

        public ManagedObjectReference[] HostSpecGetUpdatedHosts(string startChangeID, string endChangeID)
        {
            return default(ManagedObjectReference[]);
        }

        public bool Equals(HostSpecificationManager hostSpecificationManager)
        {
            return (hostSpecificationManager != null && base.Equals(hostSpecificationManager));
        }

        public override bool Equals(object hostSpecificationManager)
        {
            return Equals(hostSpecificationManager as HostSpecificationManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSpecificationOperationFailed : VimFault, IEquatable<HostSpecificationOperationFailed>
    {
        public ManagedObjectReference Host { get; set; }

        public HostSpecificationOperationFailed_LinkedView LinkedView { get; set; }

        public bool Equals(HostSpecificationOperationFailed hostSpecificationOperationFailed)
        {
            return (hostSpecificationOperationFailed != null && ((this.Host == null && hostSpecificationOperationFailed.Host == null) || (this.Host != null && this.Host.Equals(hostSpecificationOperationFailed.Host))) && ((this.LinkedView == null && hostSpecificationOperationFailed.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostSpecificationOperationFailed.LinkedView))));
        }

        public override bool Equals(object hostSpecificationOperationFailed)
        {
            return Equals(hostSpecificationOperationFailed as HostSpecificationOperationFailed);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostSpecificationOperationFailed_LinkedView : IEquatable<HostSpecificationOperationFailed_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostSpecificationOperationFailed_LinkedView hostSpecificationOperationFailed_LinkedView)
        {
            return (hostSpecificationOperationFailed_LinkedView != null && ((this.Host == null && hostSpecificationOperationFailed_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostSpecificationOperationFailed_LinkedView.Host))));
        }

        public override bool Equals(object hostSpecificationOperationFailed_LinkedView)
        {
            return Equals(hostSpecificationOperationFailed_LinkedView as HostSpecificationOperationFailed_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostSpecificationRequireEvent : HostEvent, IEquatable<HostSpecificationRequireEvent>
    {
        public bool Equals(HostSpecificationRequireEvent hostSpecificationRequireEvent)
        {
            return (hostSpecificationRequireEvent != null && base.Equals(hostSpecificationRequireEvent));
        }

        public override bool Equals(object hostSpecificationRequireEvent)
        {
            return Equals(hostSpecificationRequireEvent as HostSpecificationRequireEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSpecificationUpdateEvent : HostEvent, IEquatable<HostSpecificationUpdateEvent>
    {
        public HostSpecification HostSpec { get; set; }

        public bool Equals(HostSpecificationUpdateEvent hostSpecificationUpdateEvent)
        {
            return (hostSpecificationUpdateEvent != null && ((this.HostSpec == null && hostSpecificationUpdateEvent.HostSpec == null) || (this.HostSpec != null && this.HostSpec.Equals(hostSpecificationUpdateEvent.HostSpec))));
        }

        public override bool Equals(object hostSpecificationUpdateEvent)
        {
            return Equals(hostSpecificationUpdateEvent as HostSpecificationUpdateEvent);
        }

        public override int GetHashCode()
        {
            return (HostSpec).GetHashCode();
        }
    }

    public class HostSriovConfig : HostPciPassthruConfig, IEquatable<HostSriovConfig>
    {
        public bool SriovEnabled { get; set; }

        public int NumVirtualFunction { get; set; }

        public bool Equals(HostSriovConfig hostSriovConfig)
        {
            return (hostSriovConfig != null && this.SriovEnabled == hostSriovConfig.SriovEnabled && this.NumVirtualFunction == hostSriovConfig.NumVirtualFunction);
        }

        public override bool Equals(object hostSriovConfig)
        {
            return Equals(hostSriovConfig as HostSriovConfig);
        }

        public override int GetHashCode()
        {
            return (SriovEnabled + "_" + NumVirtualFunction).GetHashCode();
        }
    }

    public class HostSriovDevicePoolInfo : DynamicData, IEquatable<HostSriovDevicePoolInfo>
    {
        public string Key { get; set; }

        public bool Equals(HostSriovDevicePoolInfo hostSriovDevicePoolInfo)
        {
            return (hostSriovDevicePoolInfo != null && this.Key == hostSriovDevicePoolInfo.Key);
        }

        public override bool Equals(object hostSriovDevicePoolInfo)
        {
            return Equals(hostSriovDevicePoolInfo as HostSriovDevicePoolInfo);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class HostSriovInfo : HostPciPassthruInfo, IEquatable<HostSriovInfo>
    {
        public bool SriovEnabled { get; set; }

        public bool SriovCapable { get; set; }

        public bool SriovActive { get; set; }

        public int NumVirtualFunctionRequested { get; set; }

        public int NumVirtualFunction { get; set; }

        public int MaxVirtualFunctionSupported { get; set; }

        public bool Equals(HostSriovInfo hostSriovInfo)
        {
            return (hostSriovInfo != null && this.SriovEnabled == hostSriovInfo.SriovEnabled && this.SriovCapable == hostSriovInfo.SriovCapable && this.SriovActive == hostSriovInfo.SriovActive && this.NumVirtualFunctionRequested == hostSriovInfo.NumVirtualFunctionRequested && this.NumVirtualFunction == hostSriovInfo.NumVirtualFunction && this.MaxVirtualFunctionSupported == hostSriovInfo.MaxVirtualFunctionSupported);
        }

        public override bool Equals(object hostSriovInfo)
        {
            return Equals(hostSriovInfo as HostSriovInfo);
        }

        public override int GetHashCode()
        {
            return (SriovEnabled + "_" + SriovCapable + "_" + SriovActive + "_" + NumVirtualFunctionRequested + "_" + NumVirtualFunction + "_" + MaxVirtualFunctionSupported).GetHashCode();
        }
    }

    public class HostSriovNetworkDevicePoolInfo : HostSriovDevicePoolInfo, IEquatable<HostSriovNetworkDevicePoolInfo>
    {
        public string SwitchKey { get; set; }

        public string SwitchUuid { get; set; }

        public PhysicalNic[] Pnic { get; set; }

        public bool Equals(HostSriovNetworkDevicePoolInfo hostSriovNetworkDevicePoolInfo)
        {
            return (hostSriovNetworkDevicePoolInfo != null && this.SwitchKey == hostSriovNetworkDevicePoolInfo.SwitchKey && this.SwitchUuid == hostSriovNetworkDevicePoolInfo.SwitchUuid && ((this.Pnic == null && hostSriovNetworkDevicePoolInfo.Pnic == null) || (this.Pnic != null && hostSriovNetworkDevicePoolInfo.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostSriovNetworkDevicePoolInfo.Pnic))));
        }

        public override bool Equals(object hostSriovNetworkDevicePoolInfo)
        {
            return Equals(hostSriovNetworkDevicePoolInfo as HostSriovNetworkDevicePoolInfo);
        }

        public override int GetHashCode()
        {
            return (SwitchKey + "_" + SwitchUuid + "_" + Pnic).GetHashCode();
        }
    }

    public class HostSslThumbprintInfo : DynamicData, IEquatable<HostSslThumbprintInfo>
    {
        public string Principal { get; set; }

        public string OwnerTag { get; set; }

        public string[] SslThumbprints { get; set; }

        public bool Equals(HostSslThumbprintInfo hostSslThumbprintInfo)
        {
            return (hostSslThumbprintInfo != null && this.Principal == hostSslThumbprintInfo.Principal && this.OwnerTag == hostSslThumbprintInfo.OwnerTag && ((this.SslThumbprints == null && hostSslThumbprintInfo.SslThumbprints == null) || (this.SslThumbprints != null && hostSslThumbprintInfo.SslThumbprints != null && Enumerable.SequenceEqual(this.SslThumbprints, hostSslThumbprintInfo.SslThumbprints))));
        }

        public override bool Equals(object hostSslThumbprintInfo)
        {
            return Equals(hostSslThumbprintInfo as HostSslThumbprintInfo);
        }

        public override int GetHashCode()
        {
            return (Principal + "_" + OwnerTag + "_" + SslThumbprints).GetHashCode();
        }
    }

    public class HostStatusChangedEvent : ClusterStatusChangedEvent, IEquatable<HostStatusChangedEvent>
    {
        public bool Equals(HostStatusChangedEvent hostStatusChangedEvent)
        {
            return (hostStatusChangedEvent != null && base.Equals(hostStatusChangedEvent));
        }

        public override bool Equals(object hostStatusChangedEvent)
        {
            return Equals(hostStatusChangedEvent as HostStatusChangedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostStorageArrayTypePolicyOption : DynamicData, IEquatable<HostStorageArrayTypePolicyOption>
    {
        public ElementDescription Policy { get; set; }

        public bool Equals(HostStorageArrayTypePolicyOption hostStorageArrayTypePolicyOption)
        {
            return (hostStorageArrayTypePolicyOption != null && ((this.Policy == null && hostStorageArrayTypePolicyOption.Policy == null) || (this.Policy != null && this.Policy.Equals(hostStorageArrayTypePolicyOption.Policy))));
        }

        public override bool Equals(object hostStorageArrayTypePolicyOption)
        {
            return Equals(hostStorageArrayTypePolicyOption as HostStorageArrayTypePolicyOption);
        }

        public override int GetHashCode()
        {
            return (Policy).GetHashCode();
        }
    }

    public class HostStorageDeviceInfo : DynamicData, IEquatable<HostStorageDeviceInfo>
    {
        public HostHostBusAdapter[] HostBusAdapter { get; set; }

        public ScsiLun[] ScsiLun { get; set; }

        public HostScsiTopology ScsiTopology { get; set; }

        public HostMultipathInfo MultipathInfo { get; set; }

        public HostPlugStoreTopology PlugStoreTopology { get; set; }

        public bool SoftwareInternetScsiEnabled { get; set; }

        public bool Equals(HostStorageDeviceInfo hostStorageDeviceInfo)
        {
            return (hostStorageDeviceInfo != null && ((this.HostBusAdapter == null && hostStorageDeviceInfo.HostBusAdapter == null) || (this.HostBusAdapter != null && hostStorageDeviceInfo.HostBusAdapter != null && Enumerable.SequenceEqual(this.HostBusAdapter, hostStorageDeviceInfo.HostBusAdapter))) && ((this.ScsiLun == null && hostStorageDeviceInfo.ScsiLun == null) || (this.ScsiLun != null && hostStorageDeviceInfo.ScsiLun != null && Enumerable.SequenceEqual(this.ScsiLun, hostStorageDeviceInfo.ScsiLun))) && ((this.ScsiTopology == null && hostStorageDeviceInfo.ScsiTopology == null) || (this.ScsiTopology != null && this.ScsiTopology.Equals(hostStorageDeviceInfo.ScsiTopology))) && ((this.MultipathInfo == null && hostStorageDeviceInfo.MultipathInfo == null) || (this.MultipathInfo != null && this.MultipathInfo.Equals(hostStorageDeviceInfo.MultipathInfo))) && ((this.PlugStoreTopology == null && hostStorageDeviceInfo.PlugStoreTopology == null) || (this.PlugStoreTopology != null && this.PlugStoreTopology.Equals(hostStorageDeviceInfo.PlugStoreTopology))) && this.SoftwareInternetScsiEnabled == hostStorageDeviceInfo.SoftwareInternetScsiEnabled);
        }

        public override bool Equals(object hostStorageDeviceInfo)
        {
            return Equals(hostStorageDeviceInfo as HostStorageDeviceInfo);
        }

        public override int GetHashCode()
        {
            return (HostBusAdapter + "_" + ScsiLun + "_" + ScsiTopology + "_" + MultipathInfo + "_" + PlugStoreTopology + "_" + SoftwareInternetScsiEnabled).GetHashCode();
        }
    }

    public class HostStorageElementInfo : HostHardwareElementInfo, IEquatable<HostStorageElementInfo>
    {
        public HostStorageOperationalInfo[] OperationalInfo { get; set; }

        public bool Equals(HostStorageElementInfo hostStorageElementInfo)
        {
            return (hostStorageElementInfo != null && ((this.OperationalInfo == null && hostStorageElementInfo.OperationalInfo == null) || (this.OperationalInfo != null && hostStorageElementInfo.OperationalInfo != null && Enumerable.SequenceEqual(this.OperationalInfo, hostStorageElementInfo.OperationalInfo))));
        }

        public override bool Equals(object hostStorageElementInfo)
        {
            return Equals(hostStorageElementInfo as HostStorageElementInfo);
        }

        public override int GetHashCode()
        {
            return (OperationalInfo).GetHashCode();
        }
    }

    public class HostStorageOperationalInfo : DynamicData, IEquatable<HostStorageOperationalInfo>
    {
        public string Property { get; set; }

        public string Value { get; set; }

        public bool Equals(HostStorageOperationalInfo hostStorageOperationalInfo)
        {
            return (hostStorageOperationalInfo != null && this.Property == hostStorageOperationalInfo.Property && this.Value == hostStorageOperationalInfo.Value);
        }

        public override bool Equals(object hostStorageOperationalInfo)
        {
            return Equals(hostStorageOperationalInfo as HostStorageOperationalInfo);
        }

        public override int GetHashCode()
        {
            return (Property + "_" + Value).GetHashCode();
        }
    }

    public class HostStorageSystem : ExtensibleManagedObject, IEquatable<HostStorageSystem>
    {
        public HostStorageDeviceInfo StorageDeviceInfo { get; set; }

        public HostFileSystemVolumeInfo FileSystemVolumeInfo { get; set; }

        public string[] SystemFile { get; set; }

        public HostMultipathStateInfo MultipathStateInfo { get; set; }

        public HostDiskPartitionInfo[] RetrieveDiskPartitionInfo(string[] devicePath)
        {
            return default(HostDiskPartitionInfo[]);
        }

        public HostDiskPartitionInfo ComputeDiskPartitionInfo(string devicePath, HostDiskPartitionLayout layout, string partitionFormat)
        {
            return default(HostDiskPartitionInfo);
        }

        public HostDiskPartitionInfo ComputeDiskPartitionInfoForResize(HostScsiDiskPartition partition, HostDiskPartitionBlockRange blockRange, string partitionFormat)
        {
            return default(HostDiskPartitionInfo);
        }

        public void UpdateDiskPartitions(string devicePath, HostDiskPartitionSpec spec)
        {
        }

        public HostVmfsVolume FormatVmfs(HostVmfsSpec createSpec)
        {
            return default(HostVmfsVolume);
        }

        public void MountVmfsVolume(string vmfsUuid)
        {
        }

        public void UnmountVmfsVolume(string vmfsUuid)
        {
        }

        public ManagedObjectReference UnmountVmfsVolumeEx_Task(string[] vmfsUuid)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemVmfsVolumeResult[] UnmountVmfsVolumeEx(string[] vmfsUuid)
        {
            return default(HostStorageSystemVmfsVolumeResult[]);
        }

        public ManagedObjectReference MountVmfsVolumeEx_Task(string[] vmfsUuid)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemVmfsVolumeResult[] MountVmfsVolumeEx(string[] vmfsUuid)
        {
            return default(HostStorageSystemVmfsVolumeResult[]);
        }

        public ManagedObjectReference UnmapVmfsVolumeEx_Task(string[] vmfsUuid)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemVmfsVolumeResult[] UnmapVmfsVolumeEx(string[] vmfsUuid)
        {
            return default(HostStorageSystemVmfsVolumeResult[]);
        }

        public void DeleteVmfsVolumeState(string vmfsUuid)
        {
        }

        public void RescanVmfs()
        {
        }

        public void AttachVmfsExtent(string vmfsPath, HostScsiDiskPartition extent)
        {
        }

        public void ExpandVmfsExtent(string vmfsPath, HostScsiDiskPartition extent)
        {
        }

        public void UpgradeVmfs(string vmfsPath)
        {
        }

        public void UpgradeVmLayout()
        {
        }

        public HostUnresolvedVmfsVolume[] QueryUnresolvedVmfsVolume()
        {
            return default(HostUnresolvedVmfsVolume[]);
        }

        public HostUnresolvedVmfsResolutionResult[] ResolveMultipleUnresolvedVmfsVolumes(HostUnresolvedVmfsResolutionSpec[] resolutionSpec)
        {
            return default(HostUnresolvedVmfsResolutionResult[]);
        }

        public ManagedObjectReference ResolveMultipleUnresolvedVmfsVolumesEx_Task(HostUnresolvedVmfsResolutionSpec[] resolutionSpec)
        {
            return default(ManagedObjectReference);
        }

        public HostUnresolvedVmfsResolutionResult[] ResolveMultipleUnresolvedVmfsVolumesEx(HostUnresolvedVmfsResolutionSpec[] resolutionSpec)
        {
            return default(HostUnresolvedVmfsResolutionResult[]);
        }

        public void UnmountForceMountedVmfsVolume(string vmfsUuid)
        {
        }

        public void RescanHba(string hbaDevice)
        {
        }

        public void RescanAllHba()
        {
        }

        public void UpdateSoftwareInternetScsiEnabled(bool enabled)
        {
        }

        public void UpdateInternetScsiDiscoveryProperties(string iScsiHbaDevice, HostInternetScsiHbaDiscoveryProperties discoveryProperties)
        {
        }

        public void UpdateInternetScsiAuthenticationProperties(string iScsiHbaDevice, HostInternetScsiHbaAuthenticationProperties authenticationProperties, HostInternetScsiHbaTargetSet targetSet)
        {
        }

        public void UpdateInternetScsiDigestProperties(string iScsiHbaDevice, HostInternetScsiHbaTargetSet targetSet, HostInternetScsiHbaDigestProperties digestProperties)
        {
        }

        public void UpdateInternetScsiAdvancedOptions(string iScsiHbaDevice, HostInternetScsiHbaTargetSet targetSet, HostInternetScsiHbaParamValue[] options)
        {
        }

        public void UpdateInternetScsiIPProperties(string iScsiHbaDevice, HostInternetScsiHbaIPProperties ipProperties)
        {
        }

        public void UpdateInternetScsiName(string iScsiHbaDevice, string iScsiName)
        {
        }

        public void UpdateInternetScsiAlias(string iScsiHbaDevice, string iScsiAlias)
        {
        }

        public void AddInternetScsiSendTargets(string iScsiHbaDevice, HostInternetScsiHbaSendTarget[] targets)
        {
        }

        public void RemoveInternetScsiSendTargets(string iScsiHbaDevice, HostInternetScsiHbaSendTarget[] targets)
        {
        }

        public void AddInternetScsiStaticTargets(string iScsiHbaDevice, HostInternetScsiHbaStaticTarget[] targets)
        {
        }

        public void RemoveInternetScsiStaticTargets(string iScsiHbaDevice, HostInternetScsiHbaStaticTarget[] targets)
        {
        }

        public void EnableMultipathPath(string pathName)
        {
        }

        public void DisableMultipathPath(string pathName)
        {
        }

        public void SetMultipathLunPolicy(string lunId, HostMultipathInfoLogicalUnitPolicy policy)
        {
        }

        public HostPathSelectionPolicyOption[] QueryPathSelectionPolicyOptions()
        {
            return default(HostPathSelectionPolicyOption[]);
        }

        public HostStorageArrayTypePolicyOption[] QueryStorageArrayTypePolicyOptions()
        {
            return default(HostStorageArrayTypePolicyOption[]);
        }

        public void UpdateScsiLunDisplayName(string lunUuid, string displayName)
        {
        }

        public void DetachScsiLun(string lunUuid)
        {
        }

        public ManagedObjectReference DetachScsiLunEx_Task(string[] lunUuid)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemScsiLunResult[] DetachScsiLunEx(string[] lunUuid)
        {
            return default(HostStorageSystemScsiLunResult[]);
        }

        public void DeleteScsiLunState(string lunCanonicalName)
        {
        }

        public void AttachScsiLun(string lunUuid)
        {
        }

        public ManagedObjectReference AttachScsiLunEx_Task(string[] lunUuid)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemScsiLunResult[] AttachScsiLunEx(string[] lunUuid)
        {
            return default(HostStorageSystemScsiLunResult[]);
        }

        public void RefreshStorageSystem()
        {
        }

        public void DiscoverFcoeHbas(FcoeConfigFcoeSpecification fcoeSpec)
        {
        }

        public void MarkForRemoval(string hbaName, bool remove)
        {
        }

        public HostVffsVolume FormatVffs(HostVffsSpec createSpec)
        {
            return default(HostVffsVolume);
        }

        public void ExtendVffs(string vffsPath, string devicePath, HostDiskPartitionSpec spec)
        {
        }

        public void DestroyVffs(string vffsPath)
        {
        }

        public void MountVffsVolume(string vffsUuid)
        {
        }

        public void UnmountVffsVolume(string vffsUuid)
        {
        }

        public void DeleteVffsVolumeState(string vffsUuid)
        {
        }

        public void RescanVffs()
        {
        }

        public HostScsiDisk[] QueryAvailableSsds(string vffsPath)
        {
            return default(HostScsiDisk[]);
        }

        public void SetNFSUser(string user, string password)
        {
        }

        public void ChangeNFSUserPassword(string password)
        {
        }

        public HostNasVolumeUserInfo QueryNFSUser()
        {
            return default(HostNasVolumeUserInfo);
        }

        public void ClearNFSUser()
        {
        }

        public ManagedObjectReference TurnDiskLocatorLedOn_Task(string[] scsiDiskUuids)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemDiskLocatorLedResult[] TurnDiskLocatorLedOn(string[] scsiDiskUuids)
        {
            return default(HostStorageSystemDiskLocatorLedResult[]);
        }

        public ManagedObjectReference TurnDiskLocatorLedOff_Task(string[] scsiDiskUuids)
        {
            return default(ManagedObjectReference);
        }

        public HostStorageSystemDiskLocatorLedResult[] TurnDiskLocatorLedOff(string[] scsiDiskUuids)
        {
            return default(HostStorageSystemDiskLocatorLedResult[]);
        }

        public ManagedObjectReference MarkAsSsd_Task(string scsiDiskUuid)
        {
            return default(ManagedObjectReference);
        }

        public void MarkAsSsd(string scsiDiskUuid)
        {
        }

        public ManagedObjectReference MarkAsNonSsd_Task(string scsiDiskUuid)
        {
            return default(ManagedObjectReference);
        }

        public void MarkAsNonSsd(string scsiDiskUuid)
        {
        }

        public ManagedObjectReference MarkAsLocal_Task(string scsiDiskUuid)
        {
            return default(ManagedObjectReference);
        }

        public void MarkAsLocal(string scsiDiskUuid)
        {
        }

        public ManagedObjectReference MarkAsNonLocal_Task(string scsiDiskUuid)
        {
            return default(ManagedObjectReference);
        }

        public void MarkAsNonLocal(string scsiDiskUuid)
        {
        }

        public void UpdateVmfsUnmapPriority(string vmfsUuid, string unmapPriority)
        {
        }

        public void UpdateVmfsUnmapBandwidth(string vmfsUuid, VmfsUnmapBandwidthSpec unmapBandwidthSpec)
        {
        }

        public VmfsConfigOption[] QueryVmfsConfigOption()
        {
            return default(VmfsConfigOption[]);
        }

        public bool Equals(HostStorageSystem hostStorageSystem)
        {
            return (hostStorageSystem != null && ((this.StorageDeviceInfo == null && hostStorageSystem.StorageDeviceInfo == null) || (this.StorageDeviceInfo != null && this.StorageDeviceInfo.Equals(hostStorageSystem.StorageDeviceInfo))) && ((this.FileSystemVolumeInfo == null && hostStorageSystem.FileSystemVolumeInfo == null) || (this.FileSystemVolumeInfo != null && this.FileSystemVolumeInfo.Equals(hostStorageSystem.FileSystemVolumeInfo))) && ((this.SystemFile == null && hostStorageSystem.SystemFile == null) || (this.SystemFile != null && hostStorageSystem.SystemFile != null && Enumerable.SequenceEqual(this.SystemFile, hostStorageSystem.SystemFile))) && ((this.MultipathStateInfo == null && hostStorageSystem.MultipathStateInfo == null) || (this.MultipathStateInfo != null && this.MultipathStateInfo.Equals(hostStorageSystem.MultipathStateInfo))));
        }

        public override bool Equals(object hostStorageSystem)
        {
            return Equals(hostStorageSystem as HostStorageSystem);
        }

        public override int GetHashCode()
        {
            return (StorageDeviceInfo + "_" + FileSystemVolumeInfo + "_" + SystemFile + "_" + MultipathStateInfo).GetHashCode();
        }
    }

    public class HostStorageSystemDiskLocatorLedResult : DynamicData, IEquatable<HostStorageSystemDiskLocatorLedResult>
    {
        public string Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostStorageSystemDiskLocatorLedResult hostStorageSystemDiskLocatorLedResult)
        {
            return (hostStorageSystemDiskLocatorLedResult != null && this.Key == hostStorageSystemDiskLocatorLedResult.Key && ((this.Fault == null && hostStorageSystemDiskLocatorLedResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostStorageSystemDiskLocatorLedResult.Fault))));
        }

        public override bool Equals(object hostStorageSystemDiskLocatorLedResult)
        {
            return Equals(hostStorageSystemDiskLocatorLedResult as HostStorageSystemDiskLocatorLedResult);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Fault).GetHashCode();
        }
    }

    public class HostStorageSystemScsiLunResult : DynamicData, IEquatable<HostStorageSystemScsiLunResult>
    {
        public string Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostStorageSystemScsiLunResult hostStorageSystemScsiLunResult)
        {
            return (hostStorageSystemScsiLunResult != null && this.Key == hostStorageSystemScsiLunResult.Key && ((this.Fault == null && hostStorageSystemScsiLunResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostStorageSystemScsiLunResult.Fault))));
        }

        public override bool Equals(object hostStorageSystemScsiLunResult)
        {
            return Equals(hostStorageSystemScsiLunResult as HostStorageSystemScsiLunResult);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Fault).GetHashCode();
        }
    }

    public class HostStorageSystemVmfsVolumeResult : DynamicData, IEquatable<HostStorageSystemVmfsVolumeResult>
    {
        public string Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostStorageSystemVmfsVolumeResult hostStorageSystemVmfsVolumeResult)
        {
            return (hostStorageSystemVmfsVolumeResult != null && this.Key == hostStorageSystemVmfsVolumeResult.Key && ((this.Fault == null && hostStorageSystemVmfsVolumeResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostStorageSystemVmfsVolumeResult.Fault))));
        }

        public override bool Equals(object hostStorageSystemVmfsVolumeResult)
        {
            return Equals(hostStorageSystemVmfsVolumeResult as HostStorageSystemVmfsVolumeResult);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Fault).GetHashCode();
        }
    }

    public class HostSubSpecification : DynamicData, IEquatable<HostSubSpecification>
    {
        public string Name { get; set; }

        public DateTime CreatedTime { get; set; }

        public sbyte[] Data { get; set; }

        public byte[] BinaryData { get; set; }

        public bool Equals(HostSubSpecification hostSubSpecification)
        {
            return (hostSubSpecification != null && this.Name == hostSubSpecification.Name && this.CreatedTime == hostSubSpecification.CreatedTime && ((this.Data == null && hostSubSpecification.Data == null) || (this.Data != null && hostSubSpecification.Data != null && Enumerable.SequenceEqual(this.Data, hostSubSpecification.Data))) && ((this.BinaryData == null && hostSubSpecification.BinaryData == null) || (this.BinaryData != null && hostSubSpecification.BinaryData != null && Enumerable.SequenceEqual(this.BinaryData, hostSubSpecification.BinaryData))));
        }

        public override bool Equals(object hostSubSpecification)
        {
            return Equals(hostSubSpecification as HostSubSpecification);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + CreatedTime + "_" + Data + "_" + BinaryData).GetHashCode();
        }
    }

    public class HostSubSpecificationDeleteEvent : HostEvent, IEquatable<HostSubSpecificationDeleteEvent>
    {
        public string SubSpecName { get; set; }

        public bool Equals(HostSubSpecificationDeleteEvent hostSubSpecificationDeleteEvent)
        {
            return (hostSubSpecificationDeleteEvent != null && this.SubSpecName == hostSubSpecificationDeleteEvent.SubSpecName);
        }

        public override bool Equals(object hostSubSpecificationDeleteEvent)
        {
            return Equals(hostSubSpecificationDeleteEvent as HostSubSpecificationDeleteEvent);
        }

        public override int GetHashCode()
        {
            return (SubSpecName).GetHashCode();
        }
    }

    public class HostSubSpecificationUpdateEvent : HostEvent, IEquatable<HostSubSpecificationUpdateEvent>
    {
        public HostSubSpecification HostSubSpec { get; set; }

        public bool Equals(HostSubSpecificationUpdateEvent hostSubSpecificationUpdateEvent)
        {
            return (hostSubSpecificationUpdateEvent != null && ((this.HostSubSpec == null && hostSubSpecificationUpdateEvent.HostSubSpec == null) || (this.HostSubSpec != null && this.HostSubSpec.Equals(hostSubSpecificationUpdateEvent.HostSubSpec))));
        }

        public override bool Equals(object hostSubSpecificationUpdateEvent)
        {
            return Equals(hostSubSpecificationUpdateEvent as HostSubSpecificationUpdateEvent);
        }

        public override int GetHashCode()
        {
            return (HostSubSpec).GetHashCode();
        }
    }

    public class HostSyncFailedEvent : HostEvent, IEquatable<HostSyncFailedEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(HostSyncFailedEvent hostSyncFailedEvent)
        {
            return (hostSyncFailedEvent != null && ((this.Reason == null && hostSyncFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(hostSyncFailedEvent.Reason))));
        }

        public override bool Equals(object hostSyncFailedEvent)
        {
            return Equals(hostSyncFailedEvent as HostSyncFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class HostSystem : ManagedEntity, IEquatable<HostSystem>
    {
        public HostRuntimeInfo Runtime { get; set; }

        public HostListSummary Summary { get; set; }

        public HostHardwareInfo Hardware { get; set; }

        public HostCapability Capability { get; set; }

        public HostLicensableResourceInfo LicensableResource { get; set; }

        public HostSystemRemediationState RemediationState { get; set; }

        public ApplyHostProfileConfigurationSpec PrecheckRemediationResult { get; set; }

        public ApplyHostProfileConfigurationResult RemediationResult { get; set; }

        public HostSystemComplianceCheckState ComplianceCheckState { get; set; }

        public ComplianceResult ComplianceCheckResult { get; set; }

        public HostConfigManager ConfigManager { get; set; }

        public HostConfigInfo Config { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public ManagedObjectReference[] Datastore { get; set; }

        public ManagedObjectReference[] Network { get; set; }

        public ManagedObjectReference DatastoreBrowser { get; set; }

        public HostSystemResourceInfo SystemResources { get; set; }

        public AnswerFileStatusResult AnswerFileValidationState { get; set; }

        public AnswerFileStatusResult AnswerFileValidationResult { get; set; }

        public new HostSystem_LinkedView LinkedView { get; set; }

        public HostTpmAttestationReport QueryTpmAttestationReport()
        {
            return default(HostTpmAttestationReport);
        }

        public HostConnectInfo QueryHostConnectionInfo()
        {
            return default(HostConnectInfo);
        }

        public void UpdateSystemResources(HostSystemResourceInfo resourceInfo)
        {
        }

        public void UpdateSystemSwapConfiguration(HostSystemSwapConfiguration sysSwapConfig)
        {
        }

        public ManagedObjectReference ReconnectHost_Task(HostConnectSpec cnxSpec, HostSystemReconnectSpec reconnectSpec)
        {
            return default(ManagedObjectReference);
        }

        public void ReconnectHost(HostConnectSpec cnxSpec, HostSystemReconnectSpec reconnectSpec)
        {
        }

        public ManagedObjectReference DisconnectHost_Task()
        {
            return default(ManagedObjectReference);
        }

        public void DisconnectHost()
        {
        }

        public ManagedObjectReference EnterMaintenanceMode_Task(int timeout, bool? evacuatePoweredOffVms, HostMaintenanceSpec maintenanceSpec)
        {
            return default(ManagedObjectReference);
        }

        public void EnterMaintenanceMode(int timeout, bool? evacuatePoweredOffVms, HostMaintenanceSpec maintenanceSpec)
        {
        }

        public ManagedObjectReference ExitMaintenanceMode_Task(int timeout)
        {
            return default(ManagedObjectReference);
        }

        public void ExitMaintenanceMode(int timeout)
        {
        }

        public ManagedObjectReference RebootHost_Task(bool force)
        {
            return default(ManagedObjectReference);
        }

        public void RebootHost(bool force)
        {
        }

        public ManagedObjectReference ShutdownHost_Task(bool force)
        {
            return default(ManagedObjectReference);
        }

        public void ShutdownHost(bool force)
        {
        }

        public ManagedObjectReference PowerDownHostToStandBy_Task(int timeoutSec, bool? evacuatePoweredOffVms)
        {
            return default(ManagedObjectReference);
        }

        public void PowerDownHostToStandBy(int timeoutSec, bool? evacuatePoweredOffVms)
        {
        }

        public ManagedObjectReference PowerUpHostFromStandBy_Task(int timeoutSec)
        {
            return default(ManagedObjectReference);
        }

        public void PowerUpHostFromStandBy(int timeoutSec)
        {
        }

        public long QueryMemoryOverhead(long memorySize, int? videoRamSize, int numVcpus)
        {
            return default(long);
        }

        public long QueryMemoryOverheadEx(VirtualMachineConfigInfo vmConfigInfo)
        {
            return default(long);
        }

        public ManagedObjectReference ReconfigureHostForDAS_Task()
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigureHostForDAS()
        {
        }

        public void UpdateFlags(HostFlagInfo flagInfo)
        {
        }

        public void EnterLockdownMode()
        {
        }

        public void ExitLockdownMode()
        {
        }

        public HostServiceTicket AcquireCimServicesTicket()
        {
            return default(HostServiceTicket);
        }

        public void UpdateIpmi(HostIpmiInfo ipmiInfo)
        {
        }

        public long RetrieveHardwareUptime()
        {
            return default(long);
        }

        public void PrepareCrypto()
        {
        }

        public void EnableCrypto(CryptoKeyPlain keyPlain)
        {
        }

        public void ConfigureCryptoKey(CryptoKeyId keyId)
        {
        }

        public string QueryProductLockerLocation()
        {
            return default(string);
        }

        public ManagedObjectReference UpdateProductLockerLocation_Task(string path)
        {
            return default(ManagedObjectReference);
        }

        public string UpdateProductLockerLocation(string path)
        {
            return default(string);
        }

        public bool Equals(HostSystem hostSystem)
        {
            return (hostSystem != null && ((this.Runtime == null && hostSystem.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(hostSystem.Runtime))) && ((this.Summary == null && hostSystem.Summary == null) || (this.Summary != null && this.Summary.Equals(hostSystem.Summary))) && ((this.Hardware == null && hostSystem.Hardware == null) || (this.Hardware != null && this.Hardware.Equals(hostSystem.Hardware))) && ((this.Capability == null && hostSystem.Capability == null) || (this.Capability != null && this.Capability.Equals(hostSystem.Capability))) && ((this.LicensableResource == null && hostSystem.LicensableResource == null) || (this.LicensableResource != null && this.LicensableResource.Equals(hostSystem.LicensableResource))) && ((this.RemediationState == null && hostSystem.RemediationState == null) || (this.RemediationState != null && this.RemediationState.Equals(hostSystem.RemediationState))) && ((this.PrecheckRemediationResult == null && hostSystem.PrecheckRemediationResult == null) || (this.PrecheckRemediationResult != null && this.PrecheckRemediationResult.Equals(hostSystem.PrecheckRemediationResult))) && ((this.RemediationResult == null && hostSystem.RemediationResult == null) || (this.RemediationResult != null && this.RemediationResult.Equals(hostSystem.RemediationResult))) && ((this.ComplianceCheckState == null && hostSystem.ComplianceCheckState == null) || (this.ComplianceCheckState != null && this.ComplianceCheckState.Equals(hostSystem.ComplianceCheckState))) && ((this.ComplianceCheckResult == null && hostSystem.ComplianceCheckResult == null) || (this.ComplianceCheckResult != null && this.ComplianceCheckResult.Equals(hostSystem.ComplianceCheckResult))) && ((this.ConfigManager == null && hostSystem.ConfigManager == null) || (this.ConfigManager != null && this.ConfigManager.Equals(hostSystem.ConfigManager))) && ((this.Config == null && hostSystem.Config == null) || (this.Config != null && this.Config.Equals(hostSystem.Config))) && ((this.Vm == null && hostSystem.Vm == null) || (this.Vm != null && hostSystem.Vm != null && Enumerable.SequenceEqual(this.Vm, hostSystem.Vm))) && ((this.Datastore == null && hostSystem.Datastore == null) || (this.Datastore != null && hostSystem.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostSystem.Datastore))) && ((this.Network == null && hostSystem.Network == null) || (this.Network != null && hostSystem.Network != null && Enumerable.SequenceEqual(this.Network, hostSystem.Network))) && ((this.DatastoreBrowser == null && hostSystem.DatastoreBrowser == null) || (this.DatastoreBrowser != null && this.DatastoreBrowser.Equals(hostSystem.DatastoreBrowser))) && ((this.SystemResources == null && hostSystem.SystemResources == null) || (this.SystemResources != null && this.SystemResources.Equals(hostSystem.SystemResources))) && ((this.AnswerFileValidationState == null && hostSystem.AnswerFileValidationState == null) || (this.AnswerFileValidationState != null && this.AnswerFileValidationState.Equals(hostSystem.AnswerFileValidationState))) && ((this.AnswerFileValidationResult == null && hostSystem.AnswerFileValidationResult == null) || (this.AnswerFileValidationResult != null && this.AnswerFileValidationResult.Equals(hostSystem.AnswerFileValidationResult))) && ((this.LinkedView == null && hostSystem.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostSystem.LinkedView))));
        }

        public override bool Equals(object hostSystem)
        {
            return Equals(hostSystem as HostSystem);
        }

        public override int GetHashCode()
        {
            return (Runtime + "_" + Summary + "_" + Hardware + "_" + Capability + "_" + LicensableResource + "_" + RemediationState + "_" + PrecheckRemediationResult + "_" + RemediationResult + "_" + ComplianceCheckState + "_" + ComplianceCheckResult + "_" + ConfigManager + "_" + Config + "_" + Vm + "_" + Datastore + "_" + Network + "_" + DatastoreBrowser + "_" + SystemResources + "_" + AnswerFileValidationState + "_" + AnswerFileValidationResult + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostSystem_LinkedView : ManagedEntity_LinkedView, IEquatable<HostSystem_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public Datastore[] Datastore { get; set; }

        public Network[] Network { get; set; }

        public HostDatastoreBrowser DatastoreBrowser { get; set; }

        public bool Equals(HostSystem_LinkedView hostSystem_LinkedView)
        {
            return (hostSystem_LinkedView != null && ((this.Vm == null && hostSystem_LinkedView.Vm == null) || (this.Vm != null && hostSystem_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, hostSystem_LinkedView.Vm))) && ((this.Datastore == null && hostSystem_LinkedView.Datastore == null) || (this.Datastore != null && hostSystem_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, hostSystem_LinkedView.Datastore))) && ((this.Network == null && hostSystem_LinkedView.Network == null) || (this.Network != null && hostSystem_LinkedView.Network != null && Enumerable.SequenceEqual(this.Network, hostSystem_LinkedView.Network))) && ((this.DatastoreBrowser == null && hostSystem_LinkedView.DatastoreBrowser == null) || (this.DatastoreBrowser != null && this.DatastoreBrowser.Equals(hostSystem_LinkedView.DatastoreBrowser))));
        }

        public override bool Equals(object hostSystem_LinkedView)
        {
            return Equals(hostSystem_LinkedView as HostSystem_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Datastore + "_" + Network + "_" + DatastoreBrowser).GetHashCode();
        }
    }

    public class HostSystemComplianceCheckState : DynamicData, IEquatable<HostSystemComplianceCheckState>
    {
        public string State { get; set; }

        public DateTime CheckTime { get; set; }

        public bool Equals(HostSystemComplianceCheckState hostSystemComplianceCheckState)
        {
            return (hostSystemComplianceCheckState != null && this.State == hostSystemComplianceCheckState.State && this.CheckTime == hostSystemComplianceCheckState.CheckTime);
        }

        public override bool Equals(object hostSystemComplianceCheckState)
        {
            return Equals(hostSystemComplianceCheckState as HostSystemComplianceCheckState);
        }

        public override int GetHashCode()
        {
            return (State + "_" + CheckTime).GetHashCode();
        }
    }

    public class HostSystemHealthInfo : DynamicData, IEquatable<HostSystemHealthInfo>
    {
        public HostNumericSensorInfo[] NumericSensorInfo { get; set; }

        public bool Equals(HostSystemHealthInfo hostSystemHealthInfo)
        {
            return (hostSystemHealthInfo != null && ((this.NumericSensorInfo == null && hostSystemHealthInfo.NumericSensorInfo == null) || (this.NumericSensorInfo != null && hostSystemHealthInfo.NumericSensorInfo != null && Enumerable.SequenceEqual(this.NumericSensorInfo, hostSystemHealthInfo.NumericSensorInfo))));
        }

        public override bool Equals(object hostSystemHealthInfo)
        {
            return Equals(hostSystemHealthInfo as HostSystemHealthInfo);
        }

        public override int GetHashCode()
        {
            return (NumericSensorInfo).GetHashCode();
        }
    }

    public class HostSystemIdentificationInfo : DynamicData, IEquatable<HostSystemIdentificationInfo>
    {
        public string IdentifierValue { get; set; }

        public ElementDescription IdentifierType { get; set; }

        public bool Equals(HostSystemIdentificationInfo hostSystemIdentificationInfo)
        {
            return (hostSystemIdentificationInfo != null && this.IdentifierValue == hostSystemIdentificationInfo.IdentifierValue && ((this.IdentifierType == null && hostSystemIdentificationInfo.IdentifierType == null) || (this.IdentifierType != null && this.IdentifierType.Equals(hostSystemIdentificationInfo.IdentifierType))));
        }

        public override bool Equals(object hostSystemIdentificationInfo)
        {
            return Equals(hostSystemIdentificationInfo as HostSystemIdentificationInfo);
        }

        public override int GetHashCode()
        {
            return (IdentifierValue + "_" + IdentifierType).GetHashCode();
        }
    }

    public class HostSystemInfo : DynamicData, IEquatable<HostSystemInfo>
    {
        public string Vendor { get; set; }

        public string Model { get; set; }

        public string Uuid { get; set; }

        public HostSystemIdentificationInfo[] OtherIdentifyingInfo { get; set; }

        public string SerialNumber { get; set; }

        public bool Equals(HostSystemInfo hostSystemInfo)
        {
            return (hostSystemInfo != null && this.Vendor == hostSystemInfo.Vendor && this.Model == hostSystemInfo.Model && this.Uuid == hostSystemInfo.Uuid && ((this.OtherIdentifyingInfo == null && hostSystemInfo.OtherIdentifyingInfo == null) || (this.OtherIdentifyingInfo != null && hostSystemInfo.OtherIdentifyingInfo != null && Enumerable.SequenceEqual(this.OtherIdentifyingInfo, hostSystemInfo.OtherIdentifyingInfo))) && this.SerialNumber == hostSystemInfo.SerialNumber);
        }

        public override bool Equals(object hostSystemInfo)
        {
            return Equals(hostSystemInfo as HostSystemInfo);
        }

        public override int GetHashCode()
        {
            return (Vendor + "_" + Model + "_" + Uuid + "_" + OtherIdentifyingInfo + "_" + SerialNumber).GetHashCode();
        }
    }

    public class HostSystemReconnectSpec : DynamicData, IEquatable<HostSystemReconnectSpec>
    {
        public bool? SyncState { get; set; }

        public bool Equals(HostSystemReconnectSpec hostSystemReconnectSpec)
        {
            return (hostSystemReconnectSpec != null && ((this.SyncState == null && hostSystemReconnectSpec.SyncState == null) || (this.SyncState != null && this.SyncState.Equals(hostSystemReconnectSpec.SyncState))));
        }

        public override bool Equals(object hostSystemReconnectSpec)
        {
            return Equals(hostSystemReconnectSpec as HostSystemReconnectSpec);
        }

        public override int GetHashCode()
        {
            return (SyncState).GetHashCode();
        }
    }

    public class HostSystemRemediationState : DynamicData, IEquatable<HostSystemRemediationState>
    {
        public string State { get; set; }

        public DateTime OperationTime { get; set; }

        public bool Equals(HostSystemRemediationState hostSystemRemediationState)
        {
            return (hostSystemRemediationState != null && this.State == hostSystemRemediationState.State && this.OperationTime == hostSystemRemediationState.OperationTime);
        }

        public override bool Equals(object hostSystemRemediationState)
        {
            return Equals(hostSystemRemediationState as HostSystemRemediationState);
        }

        public override int GetHashCode()
        {
            return (State + "_" + OperationTime).GetHashCode();
        }
    }

    public class HostSystemResourceInfo : DynamicData, IEquatable<HostSystemResourceInfo>
    {
        public string Key { get; set; }

        public ResourceConfigSpec Config { get; set; }

        public HostSystemResourceInfo[] Child { get; set; }

        public bool Equals(HostSystemResourceInfo hostSystemResourceInfo)
        {
            return (hostSystemResourceInfo != null && this.Key == hostSystemResourceInfo.Key && ((this.Config == null && hostSystemResourceInfo.Config == null) || (this.Config != null && this.Config.Equals(hostSystemResourceInfo.Config))) && ((this.Child == null && hostSystemResourceInfo.Child == null) || (this.Child != null && hostSystemResourceInfo.Child != null && Enumerable.SequenceEqual(this.Child, hostSystemResourceInfo.Child))));
        }

        public override bool Equals(object hostSystemResourceInfo)
        {
            return Equals(hostSystemResourceInfo as HostSystemResourceInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Config + "_" + Child).GetHashCode();
        }
    }

    public class HostSystemSwapConfiguration : DynamicData, IEquatable<HostSystemSwapConfiguration>
    {
        public HostSystemSwapConfigurationSystemSwapOption[] Option { get; set; }

        public bool Equals(HostSystemSwapConfiguration hostSystemSwapConfiguration)
        {
            return (hostSystemSwapConfiguration != null && ((this.Option == null && hostSystemSwapConfiguration.Option == null) || (this.Option != null && hostSystemSwapConfiguration.Option != null && Enumerable.SequenceEqual(this.Option, hostSystemSwapConfiguration.Option))));
        }

        public override bool Equals(object hostSystemSwapConfiguration)
        {
            return Equals(hostSystemSwapConfiguration as HostSystemSwapConfiguration);
        }

        public override int GetHashCode()
        {
            return (Option).GetHashCode();
        }
    }

    public class HostSystemSwapConfigurationDatastoreOption : HostSystemSwapConfigurationSystemSwapOption, IEquatable<HostSystemSwapConfigurationDatastoreOption>
    {
        public string Datastore { get; set; }

        public bool Equals(HostSystemSwapConfigurationDatastoreOption hostSystemSwapConfigurationDatastoreOption)
        {
            return (hostSystemSwapConfigurationDatastoreOption != null && this.Datastore == hostSystemSwapConfigurationDatastoreOption.Datastore);
        }

        public override bool Equals(object hostSystemSwapConfigurationDatastoreOption)
        {
            return Equals(hostSystemSwapConfigurationDatastoreOption as HostSystemSwapConfigurationDatastoreOption);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class HostSystemSwapConfigurationDisabledOption : HostSystemSwapConfigurationSystemSwapOption, IEquatable<HostSystemSwapConfigurationDisabledOption>
    {
        public bool Equals(HostSystemSwapConfigurationDisabledOption hostSystemSwapConfigurationDisabledOption)
        {
            return (hostSystemSwapConfigurationDisabledOption != null && base.Equals(hostSystemSwapConfigurationDisabledOption));
        }

        public override bool Equals(object hostSystemSwapConfigurationDisabledOption)
        {
            return Equals(hostSystemSwapConfigurationDisabledOption as HostSystemSwapConfigurationDisabledOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSystemSwapConfigurationHostCacheOption : HostSystemSwapConfigurationSystemSwapOption, IEquatable<HostSystemSwapConfigurationHostCacheOption>
    {
        public bool Equals(HostSystemSwapConfigurationHostCacheOption hostSystemSwapConfigurationHostCacheOption)
        {
            return (hostSystemSwapConfigurationHostCacheOption != null && base.Equals(hostSystemSwapConfigurationHostCacheOption));
        }

        public override bool Equals(object hostSystemSwapConfigurationHostCacheOption)
        {
            return Equals(hostSystemSwapConfigurationHostCacheOption as HostSystemSwapConfigurationHostCacheOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSystemSwapConfigurationHostLocalSwapOption : HostSystemSwapConfigurationSystemSwapOption, IEquatable<HostSystemSwapConfigurationHostLocalSwapOption>
    {
        public bool Equals(HostSystemSwapConfigurationHostLocalSwapOption hostSystemSwapConfigurationHostLocalSwapOption)
        {
            return (hostSystemSwapConfigurationHostLocalSwapOption != null && base.Equals(hostSystemSwapConfigurationHostLocalSwapOption));
        }

        public override bool Equals(object hostSystemSwapConfigurationHostLocalSwapOption)
        {
            return Equals(hostSystemSwapConfigurationHostLocalSwapOption as HostSystemSwapConfigurationHostLocalSwapOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostSystemSwapConfigurationSystemSwapOption : DynamicData, IEquatable<HostSystemSwapConfigurationSystemSwapOption>
    {
        public int Key { get; set; }

        public bool Equals(HostSystemSwapConfigurationSystemSwapOption hostSystemSwapConfigurationSystemSwapOption)
        {
            return (hostSystemSwapConfigurationSystemSwapOption != null && this.Key == hostSystemSwapConfigurationSystemSwapOption.Key);
        }

        public override bool Equals(object hostSystemSwapConfigurationSystemSwapOption)
        {
            return Equals(hostSystemSwapConfigurationSystemSwapOption as HostSystemSwapConfigurationSystemSwapOption);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class HostTargetTransport : DynamicData, IEquatable<HostTargetTransport>
    {
        public bool Equals(HostTargetTransport hostTargetTransport)
        {
            return (hostTargetTransport != null && base.Equals(hostTargetTransport));
        }

        public override bool Equals(object hostTargetTransport)
        {
            return Equals(hostTargetTransport as HostTargetTransport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostTpmAttestationInfo : DynamicData, IEquatable<HostTpmAttestationInfo>
    {
        public DateTime Time { get; set; }

        public HostTpmAttestationInfoAcceptanceStatus Status { get; set; }

        public LocalizableMessage Message { get; set; }

        public bool Equals(HostTpmAttestationInfo hostTpmAttestationInfo)
        {
            return (hostTpmAttestationInfo != null && this.Time == hostTpmAttestationInfo.Time && this.Status == hostTpmAttestationInfo.Status && ((this.Message == null && hostTpmAttestationInfo.Message == null) || (this.Message != null && this.Message.Equals(hostTpmAttestationInfo.Message))));
        }

        public override bool Equals(object hostTpmAttestationInfo)
        {
            return Equals(hostTpmAttestationInfo as HostTpmAttestationInfo);
        }

        public override int GetHashCode()
        {
            return (Time + "_" + Status + "_" + Message).GetHashCode();
        }
    }

    public class HostTpmAttestationReport : DynamicData, IEquatable<HostTpmAttestationReport>
    {
        public HostTpmDigestInfo[] TpmPcrValues { get; set; }

        public HostTpmEventLogEntry[] TpmEvents { get; set; }

        public bool TpmLogReliable { get; set; }

        public bool Equals(HostTpmAttestationReport hostTpmAttestationReport)
        {
            return (hostTpmAttestationReport != null && ((this.TpmPcrValues == null && hostTpmAttestationReport.TpmPcrValues == null) || (this.TpmPcrValues != null && hostTpmAttestationReport.TpmPcrValues != null && Enumerable.SequenceEqual(this.TpmPcrValues, hostTpmAttestationReport.TpmPcrValues))) && ((this.TpmEvents == null && hostTpmAttestationReport.TpmEvents == null) || (this.TpmEvents != null && hostTpmAttestationReport.TpmEvents != null && Enumerable.SequenceEqual(this.TpmEvents, hostTpmAttestationReport.TpmEvents))) && this.TpmLogReliable == hostTpmAttestationReport.TpmLogReliable);
        }

        public override bool Equals(object hostTpmAttestationReport)
        {
            return Equals(hostTpmAttestationReport as HostTpmAttestationReport);
        }

        public override int GetHashCode()
        {
            return (TpmPcrValues + "_" + TpmEvents + "_" + TpmLogReliable).GetHashCode();
        }
    }

    public class HostTpmBootSecurityOptionEventDetails : HostTpmEventDetails, IEquatable<HostTpmBootSecurityOptionEventDetails>
    {
        public string BootSecurityOption { get; set; }

        public bool Equals(HostTpmBootSecurityOptionEventDetails hostTpmBootSecurityOptionEventDetails)
        {
            return (hostTpmBootSecurityOptionEventDetails != null && this.BootSecurityOption == hostTpmBootSecurityOptionEventDetails.BootSecurityOption);
        }

        public override bool Equals(object hostTpmBootSecurityOptionEventDetails)
        {
            return Equals(hostTpmBootSecurityOptionEventDetails as HostTpmBootSecurityOptionEventDetails);
        }

        public override int GetHashCode()
        {
            return (BootSecurityOption).GetHashCode();
        }
    }

    public class HostTpmCommandEventDetails : HostTpmEventDetails, IEquatable<HostTpmCommandEventDetails>
    {
        public string CommandLine { get; set; }

        public bool Equals(HostTpmCommandEventDetails hostTpmCommandEventDetails)
        {
            return (hostTpmCommandEventDetails != null && this.CommandLine == hostTpmCommandEventDetails.CommandLine);
        }

        public override bool Equals(object hostTpmCommandEventDetails)
        {
            return Equals(hostTpmCommandEventDetails as HostTpmCommandEventDetails);
        }

        public override int GetHashCode()
        {
            return (CommandLine).GetHashCode();
        }
    }

    public class HostTpmDigestInfo : HostDigestInfo, IEquatable<HostTpmDigestInfo>
    {
        public int PcrNumber { get; set; }

        public bool Equals(HostTpmDigestInfo hostTpmDigestInfo)
        {
            return (hostTpmDigestInfo != null && this.PcrNumber == hostTpmDigestInfo.PcrNumber);
        }

        public override bool Equals(object hostTpmDigestInfo)
        {
            return Equals(hostTpmDigestInfo as HostTpmDigestInfo);
        }

        public override int GetHashCode()
        {
            return (PcrNumber).GetHashCode();
        }
    }

    public class HostTpmEventDetails : DynamicData, IEquatable<HostTpmEventDetails>
    {
        public sbyte[] DataHash { get; set; }

        public string DataHashMethod { get; set; }

        public bool Equals(HostTpmEventDetails hostTpmEventDetails)
        {
            return (hostTpmEventDetails != null && ((this.DataHash == null && hostTpmEventDetails.DataHash == null) || (this.DataHash != null && hostTpmEventDetails.DataHash != null && Enumerable.SequenceEqual(this.DataHash, hostTpmEventDetails.DataHash))) && this.DataHashMethod == hostTpmEventDetails.DataHashMethod);
        }

        public override bool Equals(object hostTpmEventDetails)
        {
            return Equals(hostTpmEventDetails as HostTpmEventDetails);
        }

        public override int GetHashCode()
        {
            return (DataHash + "_" + DataHashMethod).GetHashCode();
        }
    }

    public class HostTpmEventLogEntry : DynamicData, IEquatable<HostTpmEventLogEntry>
    {
        public int PcrIndex { get; set; }

        public HostTpmEventDetails EventDetails { get; set; }

        public bool Equals(HostTpmEventLogEntry hostTpmEventLogEntry)
        {
            return (hostTpmEventLogEntry != null && this.PcrIndex == hostTpmEventLogEntry.PcrIndex && ((this.EventDetails == null && hostTpmEventLogEntry.EventDetails == null) || (this.EventDetails != null && this.EventDetails.Equals(hostTpmEventLogEntry.EventDetails))));
        }

        public override bool Equals(object hostTpmEventLogEntry)
        {
            return Equals(hostTpmEventLogEntry as HostTpmEventLogEntry);
        }

        public override int GetHashCode()
        {
            return (PcrIndex + "_" + EventDetails).GetHashCode();
        }
    }

    public class HostTpmOptionEventDetails : HostTpmEventDetails, IEquatable<HostTpmOptionEventDetails>
    {
        public string OptionsFileName { get; set; }

        public sbyte[] BootOptions { get; set; }

        public bool Equals(HostTpmOptionEventDetails hostTpmOptionEventDetails)
        {
            return (hostTpmOptionEventDetails != null && this.OptionsFileName == hostTpmOptionEventDetails.OptionsFileName && ((this.BootOptions == null && hostTpmOptionEventDetails.BootOptions == null) || (this.BootOptions != null && hostTpmOptionEventDetails.BootOptions != null && Enumerable.SequenceEqual(this.BootOptions, hostTpmOptionEventDetails.BootOptions))));
        }

        public override bool Equals(object hostTpmOptionEventDetails)
        {
            return Equals(hostTpmOptionEventDetails as HostTpmOptionEventDetails);
        }

        public override int GetHashCode()
        {
            return (OptionsFileName + "_" + BootOptions).GetHashCode();
        }
    }

    public class HostTpmSoftwareComponentEventDetails : HostTpmEventDetails, IEquatable<HostTpmSoftwareComponentEventDetails>
    {
        public string ComponentName { get; set; }

        public string VibName { get; set; }

        public string VibVersion { get; set; }

        public string VibVendor { get; set; }

        public bool Equals(HostTpmSoftwareComponentEventDetails hostTpmSoftwareComponentEventDetails)
        {
            return (hostTpmSoftwareComponentEventDetails != null && this.ComponentName == hostTpmSoftwareComponentEventDetails.ComponentName && this.VibName == hostTpmSoftwareComponentEventDetails.VibName && this.VibVersion == hostTpmSoftwareComponentEventDetails.VibVersion && this.VibVendor == hostTpmSoftwareComponentEventDetails.VibVendor);
        }

        public override bool Equals(object hostTpmSoftwareComponentEventDetails)
        {
            return Equals(hostTpmSoftwareComponentEventDetails as HostTpmSoftwareComponentEventDetails);
        }

        public override int GetHashCode()
        {
            return (ComponentName + "_" + VibName + "_" + VibVersion + "_" + VibVendor).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsExtent : DynamicData, IEquatable<HostUnresolvedVmfsExtent>
    {
        public HostScsiDiskPartition Device { get; set; }

        public string DevicePath { get; set; }

        public string VmfsUuid { get; set; }

        public bool IsHeadExtent { get; set; }

        public int Ordinal { get; set; }

        public int StartBlock { get; set; }

        public int EndBlock { get; set; }

        public string Reason { get; set; }

        public bool Equals(HostUnresolvedVmfsExtent hostUnresolvedVmfsExtent)
        {
            return (hostUnresolvedVmfsExtent != null && ((this.Device == null && hostUnresolvedVmfsExtent.Device == null) || (this.Device != null && this.Device.Equals(hostUnresolvedVmfsExtent.Device))) && this.DevicePath == hostUnresolvedVmfsExtent.DevicePath && this.VmfsUuid == hostUnresolvedVmfsExtent.VmfsUuid && this.IsHeadExtent == hostUnresolvedVmfsExtent.IsHeadExtent && this.Ordinal == hostUnresolvedVmfsExtent.Ordinal && this.StartBlock == hostUnresolvedVmfsExtent.StartBlock && this.EndBlock == hostUnresolvedVmfsExtent.EndBlock && this.Reason == hostUnresolvedVmfsExtent.Reason);
        }

        public override bool Equals(object hostUnresolvedVmfsExtent)
        {
            return Equals(hostUnresolvedVmfsExtent as HostUnresolvedVmfsExtent);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + DevicePath + "_" + VmfsUuid + "_" + IsHeadExtent + "_" + Ordinal + "_" + StartBlock + "_" + EndBlock + "_" + Reason).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsResignatureSpec : DynamicData, IEquatable<HostUnresolvedVmfsResignatureSpec>
    {
        public string[] ExtentDevicePath { get; set; }

        public bool Equals(HostUnresolvedVmfsResignatureSpec hostUnresolvedVmfsResignatureSpec)
        {
            return (hostUnresolvedVmfsResignatureSpec != null && ((this.ExtentDevicePath == null && hostUnresolvedVmfsResignatureSpec.ExtentDevicePath == null) || (this.ExtentDevicePath != null && hostUnresolvedVmfsResignatureSpec.ExtentDevicePath != null && Enumerable.SequenceEqual(this.ExtentDevicePath, hostUnresolvedVmfsResignatureSpec.ExtentDevicePath))));
        }

        public override bool Equals(object hostUnresolvedVmfsResignatureSpec)
        {
            return Equals(hostUnresolvedVmfsResignatureSpec as HostUnresolvedVmfsResignatureSpec);
        }

        public override int GetHashCode()
        {
            return (ExtentDevicePath).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsResolutionResult : DynamicData, IEquatable<HostUnresolvedVmfsResolutionResult>
    {
        public HostUnresolvedVmfsResolutionSpec Spec { get; set; }

        public HostVmfsVolume Vmfs { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(HostUnresolvedVmfsResolutionResult hostUnresolvedVmfsResolutionResult)
        {
            return (hostUnresolvedVmfsResolutionResult != null && ((this.Spec == null && hostUnresolvedVmfsResolutionResult.Spec == null) || (this.Spec != null && this.Spec.Equals(hostUnresolvedVmfsResolutionResult.Spec))) && ((this.Vmfs == null && hostUnresolvedVmfsResolutionResult.Vmfs == null) || (this.Vmfs != null && this.Vmfs.Equals(hostUnresolvedVmfsResolutionResult.Vmfs))) && ((this.Fault == null && hostUnresolvedVmfsResolutionResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostUnresolvedVmfsResolutionResult.Fault))));
        }

        public override bool Equals(object hostUnresolvedVmfsResolutionResult)
        {
            return Equals(hostUnresolvedVmfsResolutionResult as HostUnresolvedVmfsResolutionResult);
        }

        public override int GetHashCode()
        {
            return (Spec + "_" + Vmfs + "_" + Fault).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsResolutionSpec : DynamicData, IEquatable<HostUnresolvedVmfsResolutionSpec>
    {
        public string[] ExtentDevicePath { get; set; }

        public string UuidResolution { get; set; }

        public bool Equals(HostUnresolvedVmfsResolutionSpec hostUnresolvedVmfsResolutionSpec)
        {
            return (hostUnresolvedVmfsResolutionSpec != null && ((this.ExtentDevicePath == null && hostUnresolvedVmfsResolutionSpec.ExtentDevicePath == null) || (this.ExtentDevicePath != null && hostUnresolvedVmfsResolutionSpec.ExtentDevicePath != null && Enumerable.SequenceEqual(this.ExtentDevicePath, hostUnresolvedVmfsResolutionSpec.ExtentDevicePath))) && this.UuidResolution == hostUnresolvedVmfsResolutionSpec.UuidResolution);
        }

        public override bool Equals(object hostUnresolvedVmfsResolutionSpec)
        {
            return Equals(hostUnresolvedVmfsResolutionSpec as HostUnresolvedVmfsResolutionSpec);
        }

        public override int GetHashCode()
        {
            return (ExtentDevicePath + "_" + UuidResolution).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsVolume : DynamicData, IEquatable<HostUnresolvedVmfsVolume>
    {
        public HostUnresolvedVmfsExtent[] Extent { get; set; }

        public string VmfsLabel { get; set; }

        public string VmfsUuid { get; set; }

        public int TotalBlocks { get; set; }

        public HostUnresolvedVmfsVolumeResolveStatus ResolveStatus { get; set; }

        public bool Equals(HostUnresolvedVmfsVolume hostUnresolvedVmfsVolume)
        {
            return (hostUnresolvedVmfsVolume != null && ((this.Extent == null && hostUnresolvedVmfsVolume.Extent == null) || (this.Extent != null && hostUnresolvedVmfsVolume.Extent != null && Enumerable.SequenceEqual(this.Extent, hostUnresolvedVmfsVolume.Extent))) && this.VmfsLabel == hostUnresolvedVmfsVolume.VmfsLabel && this.VmfsUuid == hostUnresolvedVmfsVolume.VmfsUuid && this.TotalBlocks == hostUnresolvedVmfsVolume.TotalBlocks && ((this.ResolveStatus == null && hostUnresolvedVmfsVolume.ResolveStatus == null) || (this.ResolveStatus != null && this.ResolveStatus.Equals(hostUnresolvedVmfsVolume.ResolveStatus))));
        }

        public override bool Equals(object hostUnresolvedVmfsVolume)
        {
            return Equals(hostUnresolvedVmfsVolume as HostUnresolvedVmfsVolume);
        }

        public override int GetHashCode()
        {
            return (Extent + "_" + VmfsLabel + "_" + VmfsUuid + "_" + TotalBlocks + "_" + ResolveStatus).GetHashCode();
        }
    }

    public class HostUnresolvedVmfsVolumeResolveStatus : DynamicData, IEquatable<HostUnresolvedVmfsVolumeResolveStatus>
    {
        public bool Resolvable { get; set; }

        public bool? IncompleteExtents { get; set; }

        public bool? MultipleCopies { get; set; }

        public bool Equals(HostUnresolvedVmfsVolumeResolveStatus hostUnresolvedVmfsVolumeResolveStatus)
        {
            return (hostUnresolvedVmfsVolumeResolveStatus != null && this.Resolvable == hostUnresolvedVmfsVolumeResolveStatus.Resolvable && ((this.IncompleteExtents == null && hostUnresolvedVmfsVolumeResolveStatus.IncompleteExtents == null) || (this.IncompleteExtents != null && this.IncompleteExtents.Equals(hostUnresolvedVmfsVolumeResolveStatus.IncompleteExtents))) && ((this.MultipleCopies == null && hostUnresolvedVmfsVolumeResolveStatus.MultipleCopies == null) || (this.MultipleCopies != null && this.MultipleCopies.Equals(hostUnresolvedVmfsVolumeResolveStatus.MultipleCopies))));
        }

        public override bool Equals(object hostUnresolvedVmfsVolumeResolveStatus)
        {
            return Equals(hostUnresolvedVmfsVolumeResolveStatus as HostUnresolvedVmfsVolumeResolveStatus);
        }

        public override int GetHashCode()
        {
            return (Resolvable + "_" + IncompleteExtents + "_" + MultipleCopies).GetHashCode();
        }
    }

    public class HostUpgradeFailedEvent : HostEvent, IEquatable<HostUpgradeFailedEvent>
    {
        public bool Equals(HostUpgradeFailedEvent hostUpgradeFailedEvent)
        {
            return (hostUpgradeFailedEvent != null && base.Equals(hostUpgradeFailedEvent));
        }

        public override bool Equals(object hostUpgradeFailedEvent)
        {
            return Equals(hostUpgradeFailedEvent as HostUpgradeFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostUserWorldSwapNotEnabledEvent : HostEvent, IEquatable<HostUserWorldSwapNotEnabledEvent>
    {
        public bool Equals(HostUserWorldSwapNotEnabledEvent hostUserWorldSwapNotEnabledEvent)
        {
            return (hostUserWorldSwapNotEnabledEvent != null && base.Equals(hostUserWorldSwapNotEnabledEvent));
        }

        public override bool Equals(object hostUserWorldSwapNotEnabledEvent)
        {
            return Equals(hostUserWorldSwapNotEnabledEvent as HostUserWorldSwapNotEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostVfatVolume : HostFileSystemVolume, IEquatable<HostVfatVolume>
    {
        public bool Equals(HostVfatVolume hostVfatVolume)
        {
            return (hostVfatVolume != null && base.Equals(hostVfatVolume));
        }

        public override bool Equals(object hostVfatVolume)
        {
            return Equals(hostVfatVolume as HostVfatVolume);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostVffsSpec : DynamicData, IEquatable<HostVffsSpec>
    {
        public string DevicePath { get; set; }

        public HostDiskPartitionSpec Partition { get; set; }

        public int MajorVersion { get; set; }

        public string VolumeName { get; set; }

        public bool Equals(HostVffsSpec hostVffsSpec)
        {
            return (hostVffsSpec != null && this.DevicePath == hostVffsSpec.DevicePath && ((this.Partition == null && hostVffsSpec.Partition == null) || (this.Partition != null && this.Partition.Equals(hostVffsSpec.Partition))) && this.MajorVersion == hostVffsSpec.MajorVersion && this.VolumeName == hostVffsSpec.VolumeName);
        }

        public override bool Equals(object hostVffsSpec)
        {
            return Equals(hostVffsSpec as HostVffsSpec);
        }

        public override int GetHashCode()
        {
            return (DevicePath + "_" + Partition + "_" + MajorVersion + "_" + VolumeName).GetHashCode();
        }
    }

    public class HostVffsVolume : HostFileSystemVolume, IEquatable<HostVffsVolume>
    {
        public int MajorVersion { get; set; }

        public string Version { get; set; }

        public string Uuid { get; set; }

        public HostScsiDiskPartition[] Extent { get; set; }

        public bool Equals(HostVffsVolume hostVffsVolume)
        {
            return (hostVffsVolume != null && this.MajorVersion == hostVffsVolume.MajorVersion && this.Version == hostVffsVolume.Version && this.Uuid == hostVffsVolume.Uuid && ((this.Extent == null && hostVffsVolume.Extent == null) || (this.Extent != null && hostVffsVolume.Extent != null && Enumerable.SequenceEqual(this.Extent, hostVffsVolume.Extent))));
        }

        public override bool Equals(object hostVffsVolume)
        {
            return Equals(hostVffsVolume as HostVffsVolume);
        }

        public override int GetHashCode()
        {
            return (MajorVersion + "_" + Version + "_" + Uuid + "_" + Extent).GetHashCode();
        }
    }

    public class HostVFlashManager : ViewBase, IEquatable<HostVFlashManager>
    {
        public HostVFlashManagerVFlashConfigInfo VFlashConfigInfo { get; set; }

        public ManagedObjectReference ConfigureVFlashResourceEx_Task(string[] devicePath)
        {
            return default(ManagedObjectReference);
        }

        public HostVFlashResourceConfigurationResult ConfigureVFlashResourceEx(string[] devicePath)
        {
            return default(HostVFlashResourceConfigurationResult);
        }

        public void HostConfigureVFlashResource(HostVFlashManagerVFlashResourceConfigSpec spec)
        {
        }

        public void HostRemoveVFlashResource()
        {
        }

        public void HostConfigVFlashCache(HostVFlashManagerVFlashCacheConfigSpec spec)
        {
        }

        public VirtualDiskVFlashCacheConfigInfo HostGetVFlashModuleDefaultConfig(string vFlashModule)
        {
            return default(VirtualDiskVFlashCacheConfigInfo);
        }

        public bool Equals(HostVFlashManager hostVFlashManager)
        {
            return (hostVFlashManager != null && ((this.VFlashConfigInfo == null && hostVFlashManager.VFlashConfigInfo == null) || (this.VFlashConfigInfo != null && this.VFlashConfigInfo.Equals(hostVFlashManager.VFlashConfigInfo))));
        }

        public override bool Equals(object hostVFlashManager)
        {
            return Equals(hostVFlashManager as HostVFlashManager);
        }

        public override int GetHashCode()
        {
            return (VFlashConfigInfo).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashCacheConfigInfo : DynamicData, IEquatable<HostVFlashManagerVFlashCacheConfigInfo>
    {
        public HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption[] VFlashModuleConfigOption { get; set; }

        public string DefaultVFlashModule { get; set; }

        public long? SwapCacheReservationInGB { get; set; }

        public bool Equals(HostVFlashManagerVFlashCacheConfigInfo hostVFlashManagerVFlashCacheConfigInfo)
        {
            return (hostVFlashManagerVFlashCacheConfigInfo != null && ((this.VFlashModuleConfigOption == null && hostVFlashManagerVFlashCacheConfigInfo.VFlashModuleConfigOption == null) || (this.VFlashModuleConfigOption != null && hostVFlashManagerVFlashCacheConfigInfo.VFlashModuleConfigOption != null && Enumerable.SequenceEqual(this.VFlashModuleConfigOption, hostVFlashManagerVFlashCacheConfigInfo.VFlashModuleConfigOption))) && this.DefaultVFlashModule == hostVFlashManagerVFlashCacheConfigInfo.DefaultVFlashModule && ((this.SwapCacheReservationInGB == null && hostVFlashManagerVFlashCacheConfigInfo.SwapCacheReservationInGB == null) || (this.SwapCacheReservationInGB != null && this.SwapCacheReservationInGB.Equals(hostVFlashManagerVFlashCacheConfigInfo.SwapCacheReservationInGB))));
        }

        public override bool Equals(object hostVFlashManagerVFlashCacheConfigInfo)
        {
            return Equals(hostVFlashManagerVFlashCacheConfigInfo as HostVFlashManagerVFlashCacheConfigInfo);
        }

        public override int GetHashCode()
        {
            return (VFlashModuleConfigOption + "_" + DefaultVFlashModule + "_" + SwapCacheReservationInGB).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption : DynamicData, IEquatable<HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>
    {
        public string VFlashModule { get; set; }

        public string VFlashModuleVersion { get; set; }

        public string MinSupportedModuleVersion { get; set; }

        public ChoiceOption CacheConsistencyType { get; set; }

        public ChoiceOption CacheMode { get; set; }

        public LongOption BlockSizeInKBOption { get; set; }

        public LongOption ReservationInMBOption { get; set; }

        public long MaxDiskSizeInKB { get; set; }

        public bool Equals(HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption)
        {
            return (hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption != null && this.VFlashModule == hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.VFlashModule && this.VFlashModuleVersion == hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.VFlashModuleVersion && this.MinSupportedModuleVersion == hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.MinSupportedModuleVersion && ((this.CacheConsistencyType == null && hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.CacheConsistencyType == null) || (this.CacheConsistencyType != null && this.CacheConsistencyType.Equals(hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.CacheConsistencyType))) && ((this.CacheMode == null && hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.CacheMode == null) || (this.CacheMode != null && this.CacheMode.Equals(hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.CacheMode))) && ((this.BlockSizeInKBOption == null && hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.BlockSizeInKBOption == null) || (this.BlockSizeInKBOption != null && this.BlockSizeInKBOption.Equals(hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.BlockSizeInKBOption))) && ((this.ReservationInMBOption == null && hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.ReservationInMBOption == null) || (this.ReservationInMBOption != null && this.ReservationInMBOption.Equals(hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.ReservationInMBOption))) && this.MaxDiskSizeInKB == hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption.MaxDiskSizeInKB);
        }

        public override bool Equals(object hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption)
        {
            return Equals(hostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption as HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption);
        }

        public override int GetHashCode()
        {
            return (VFlashModule + "_" + VFlashModuleVersion + "_" + MinSupportedModuleVersion + "_" + CacheConsistencyType + "_" + CacheMode + "_" + BlockSizeInKBOption + "_" + ReservationInMBOption + "_" + MaxDiskSizeInKB).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashCacheConfigSpec : DynamicData, IEquatable<HostVFlashManagerVFlashCacheConfigSpec>
    {
        public string DefaultVFlashModule { get; set; }

        public long SwapCacheReservationInGB { get; set; }

        public bool Equals(HostVFlashManagerVFlashCacheConfigSpec hostVFlashManagerVFlashCacheConfigSpec)
        {
            return (hostVFlashManagerVFlashCacheConfigSpec != null && this.DefaultVFlashModule == hostVFlashManagerVFlashCacheConfigSpec.DefaultVFlashModule && this.SwapCacheReservationInGB == hostVFlashManagerVFlashCacheConfigSpec.SwapCacheReservationInGB);
        }

        public override bool Equals(object hostVFlashManagerVFlashCacheConfigSpec)
        {
            return Equals(hostVFlashManagerVFlashCacheConfigSpec as HostVFlashManagerVFlashCacheConfigSpec);
        }

        public override int GetHashCode()
        {
            return (DefaultVFlashModule + "_" + SwapCacheReservationInGB).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashConfigInfo : DynamicData, IEquatable<HostVFlashManagerVFlashConfigInfo>
    {
        public HostVFlashManagerVFlashResourceConfigInfo VFlashResourceConfigInfo { get; set; }

        public HostVFlashManagerVFlashCacheConfigInfo VFlashCacheConfigInfo { get; set; }

        public bool Equals(HostVFlashManagerVFlashConfigInfo hostVFlashManagerVFlashConfigInfo)
        {
            return (hostVFlashManagerVFlashConfigInfo != null && ((this.VFlashResourceConfigInfo == null && hostVFlashManagerVFlashConfigInfo.VFlashResourceConfigInfo == null) || (this.VFlashResourceConfigInfo != null && this.VFlashResourceConfigInfo.Equals(hostVFlashManagerVFlashConfigInfo.VFlashResourceConfigInfo))) && ((this.VFlashCacheConfigInfo == null && hostVFlashManagerVFlashConfigInfo.VFlashCacheConfigInfo == null) || (this.VFlashCacheConfigInfo != null && this.VFlashCacheConfigInfo.Equals(hostVFlashManagerVFlashConfigInfo.VFlashCacheConfigInfo))));
        }

        public override bool Equals(object hostVFlashManagerVFlashConfigInfo)
        {
            return Equals(hostVFlashManagerVFlashConfigInfo as HostVFlashManagerVFlashConfigInfo);
        }

        public override int GetHashCode()
        {
            return (VFlashResourceConfigInfo + "_" + VFlashCacheConfigInfo).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashResourceConfigInfo : DynamicData, IEquatable<HostVFlashManagerVFlashResourceConfigInfo>
    {
        public HostVffsVolume Vffs { get; set; }

        public long Capacity { get; set; }

        public bool Equals(HostVFlashManagerVFlashResourceConfigInfo hostVFlashManagerVFlashResourceConfigInfo)
        {
            return (hostVFlashManagerVFlashResourceConfigInfo != null && ((this.Vffs == null && hostVFlashManagerVFlashResourceConfigInfo.Vffs == null) || (this.Vffs != null && this.Vffs.Equals(hostVFlashManagerVFlashResourceConfigInfo.Vffs))) && this.Capacity == hostVFlashManagerVFlashResourceConfigInfo.Capacity);
        }

        public override bool Equals(object hostVFlashManagerVFlashResourceConfigInfo)
        {
            return Equals(hostVFlashManagerVFlashResourceConfigInfo as HostVFlashManagerVFlashResourceConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Vffs + "_" + Capacity).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashResourceConfigSpec : DynamicData, IEquatable<HostVFlashManagerVFlashResourceConfigSpec>
    {
        public string VffsUuid { get; set; }

        public bool Equals(HostVFlashManagerVFlashResourceConfigSpec hostVFlashManagerVFlashResourceConfigSpec)
        {
            return (hostVFlashManagerVFlashResourceConfigSpec != null && this.VffsUuid == hostVFlashManagerVFlashResourceConfigSpec.VffsUuid);
        }

        public override bool Equals(object hostVFlashManagerVFlashResourceConfigSpec)
        {
            return Equals(hostVFlashManagerVFlashResourceConfigSpec as HostVFlashManagerVFlashResourceConfigSpec);
        }

        public override int GetHashCode()
        {
            return (VffsUuid).GetHashCode();
        }
    }

    public class HostVFlashManagerVFlashResourceRunTimeInfo : DynamicData, IEquatable<HostVFlashManagerVFlashResourceRunTimeInfo>
    {
        public long Usage { get; set; }

        public long Capacity { get; set; }

        public bool Accessible { get; set; }

        public long CapacityForVmCache { get; set; }

        public long FreeForVmCache { get; set; }

        public bool Equals(HostVFlashManagerVFlashResourceRunTimeInfo hostVFlashManagerVFlashResourceRunTimeInfo)
        {
            return (hostVFlashManagerVFlashResourceRunTimeInfo != null && this.Usage == hostVFlashManagerVFlashResourceRunTimeInfo.Usage && this.Capacity == hostVFlashManagerVFlashResourceRunTimeInfo.Capacity && this.Accessible == hostVFlashManagerVFlashResourceRunTimeInfo.Accessible && this.CapacityForVmCache == hostVFlashManagerVFlashResourceRunTimeInfo.CapacityForVmCache && this.FreeForVmCache == hostVFlashManagerVFlashResourceRunTimeInfo.FreeForVmCache);
        }

        public override bool Equals(object hostVFlashManagerVFlashResourceRunTimeInfo)
        {
            return Equals(hostVFlashManagerVFlashResourceRunTimeInfo as HostVFlashManagerVFlashResourceRunTimeInfo);
        }

        public override int GetHashCode()
        {
            return (Usage + "_" + Capacity + "_" + Accessible + "_" + CapacityForVmCache + "_" + FreeForVmCache).GetHashCode();
        }
    }

    public class HostVFlashResourceConfigurationResult : DynamicData, IEquatable<HostVFlashResourceConfigurationResult>
    {
        public string[] DevicePath { get; set; }

        public HostVffsVolume Vffs { get; set; }

        public HostDiskConfigurationResult[] DiskConfigurationResult { get; set; }

        public bool Equals(HostVFlashResourceConfigurationResult hostVFlashResourceConfigurationResult)
        {
            return (hostVFlashResourceConfigurationResult != null && ((this.DevicePath == null && hostVFlashResourceConfigurationResult.DevicePath == null) || (this.DevicePath != null && hostVFlashResourceConfigurationResult.DevicePath != null && Enumerable.SequenceEqual(this.DevicePath, hostVFlashResourceConfigurationResult.DevicePath))) && ((this.Vffs == null && hostVFlashResourceConfigurationResult.Vffs == null) || (this.Vffs != null && this.Vffs.Equals(hostVFlashResourceConfigurationResult.Vffs))) && ((this.DiskConfigurationResult == null && hostVFlashResourceConfigurationResult.DiskConfigurationResult == null) || (this.DiskConfigurationResult != null && hostVFlashResourceConfigurationResult.DiskConfigurationResult != null && Enumerable.SequenceEqual(this.DiskConfigurationResult, hostVFlashResourceConfigurationResult.DiskConfigurationResult))));
        }

        public override bool Equals(object hostVFlashResourceConfigurationResult)
        {
            return Equals(hostVFlashResourceConfigurationResult as HostVFlashResourceConfigurationResult);
        }

        public override int GetHashCode()
        {
            return (DevicePath + "_" + Vffs + "_" + DiskConfigurationResult).GetHashCode();
        }
    }

    public class HostVirtualNic : DynamicData, IEquatable<HostVirtualNic>
    {
        public string Device { get; set; }

        public string Key { get; set; }

        public string Portgroup { get; set; }

        public HostVirtualNicSpec Spec { get; set; }

        public string Port { get; set; }

        public bool Equals(HostVirtualNic hostVirtualNic)
        {
            return (hostVirtualNic != null && this.Device == hostVirtualNic.Device && this.Key == hostVirtualNic.Key && this.Portgroup == hostVirtualNic.Portgroup && ((this.Spec == null && hostVirtualNic.Spec == null) || (this.Spec != null && this.Spec.Equals(hostVirtualNic.Spec))) && this.Port == hostVirtualNic.Port);
        }

        public override bool Equals(object hostVirtualNic)
        {
            return Equals(hostVirtualNic as HostVirtualNic);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Key + "_" + Portgroup + "_" + Spec + "_" + Port).GetHashCode();
        }
    }

    public class HostVirtualNicConfig : DynamicData, IEquatable<HostVirtualNicConfig>
    {
        public string ChangeOperation { get; set; }

        public string Device { get; set; }

        public string Portgroup { get; set; }

        public HostVirtualNicSpec Spec { get; set; }

        public bool Equals(HostVirtualNicConfig hostVirtualNicConfig)
        {
            return (hostVirtualNicConfig != null && this.ChangeOperation == hostVirtualNicConfig.ChangeOperation && this.Device == hostVirtualNicConfig.Device && this.Portgroup == hostVirtualNicConfig.Portgroup && ((this.Spec == null && hostVirtualNicConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostVirtualNicConfig.Spec))));
        }

        public override bool Equals(object hostVirtualNicConfig)
        {
            return Equals(hostVirtualNicConfig as HostVirtualNicConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Device + "_" + Portgroup + "_" + Spec).GetHashCode();
        }
    }

    public class HostVirtualNicConnection : DynamicData, IEquatable<HostVirtualNicConnection>
    {
        public string Portgroup { get; set; }

        public DistributedVirtualSwitchPortConnection DvPort { get; set; }

        public HostVirtualNicOpaqueNetworkSpec OpNetwork { get; set; }

        public bool Equals(HostVirtualNicConnection hostVirtualNicConnection)
        {
            return (hostVirtualNicConnection != null && this.Portgroup == hostVirtualNicConnection.Portgroup && ((this.DvPort == null && hostVirtualNicConnection.DvPort == null) || (this.DvPort != null && this.DvPort.Equals(hostVirtualNicConnection.DvPort))) && ((this.OpNetwork == null && hostVirtualNicConnection.OpNetwork == null) || (this.OpNetwork != null && this.OpNetwork.Equals(hostVirtualNicConnection.OpNetwork))));
        }

        public override bool Equals(object hostVirtualNicConnection)
        {
            return Equals(hostVirtualNicConnection as HostVirtualNicConnection);
        }

        public override int GetHashCode()
        {
            return (Portgroup + "_" + DvPort + "_" + OpNetwork).GetHashCode();
        }
    }

    public class HostVirtualNicIpRouteSpec : DynamicData, IEquatable<HostVirtualNicIpRouteSpec>
    {
        public HostIpRouteConfig IpRouteConfig { get; set; }

        public bool Equals(HostVirtualNicIpRouteSpec hostVirtualNicIpRouteSpec)
        {
            return (hostVirtualNicIpRouteSpec != null && ((this.IpRouteConfig == null && hostVirtualNicIpRouteSpec.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(hostVirtualNicIpRouteSpec.IpRouteConfig))));
        }

        public override bool Equals(object hostVirtualNicIpRouteSpec)
        {
            return Equals(hostVirtualNicIpRouteSpec as HostVirtualNicIpRouteSpec);
        }

        public override int GetHashCode()
        {
            return (IpRouteConfig).GetHashCode();
        }
    }

    public class HostVirtualNicManager : ExtensibleManagedObject, IEquatable<HostVirtualNicManager>
    {
        public HostVirtualNicManagerInfo Info { get; set; }

        public VirtualNicManagerNetConfig QueryNetConfig(string nicType)
        {
            return default(VirtualNicManagerNetConfig);
        }

        public void SelectVnicForNicType(string nicType, string device)
        {
        }

        public void DeselectVnicForNicType(string nicType, string device)
        {
        }

        public bool Equals(HostVirtualNicManager hostVirtualNicManager)
        {
            return (hostVirtualNicManager != null && ((this.Info == null && hostVirtualNicManager.Info == null) || (this.Info != null && this.Info.Equals(hostVirtualNicManager.Info))));
        }

        public override bool Equals(object hostVirtualNicManager)
        {
            return Equals(hostVirtualNicManager as HostVirtualNicManager);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class HostVirtualNicManagerInfo : DynamicData, IEquatable<HostVirtualNicManagerInfo>
    {
        public VirtualNicManagerNetConfig[] NetConfig { get; set; }

        public bool Equals(HostVirtualNicManagerInfo hostVirtualNicManagerInfo)
        {
            return (hostVirtualNicManagerInfo != null && ((this.NetConfig == null && hostVirtualNicManagerInfo.NetConfig == null) || (this.NetConfig != null && hostVirtualNicManagerInfo.NetConfig != null && Enumerable.SequenceEqual(this.NetConfig, hostVirtualNicManagerInfo.NetConfig))));
        }

        public override bool Equals(object hostVirtualNicManagerInfo)
        {
            return Equals(hostVirtualNicManagerInfo as HostVirtualNicManagerInfo);
        }

        public override int GetHashCode()
        {
            return (NetConfig).GetHashCode();
        }
    }

    public class HostVirtualNicManagerNicTypeSelection : DynamicData, IEquatable<HostVirtualNicManagerNicTypeSelection>
    {
        public HostVirtualNicConnection Vnic { get; set; }

        public string[] NicType { get; set; }

        public bool Equals(HostVirtualNicManagerNicTypeSelection hostVirtualNicManagerNicTypeSelection)
        {
            return (hostVirtualNicManagerNicTypeSelection != null && ((this.Vnic == null && hostVirtualNicManagerNicTypeSelection.Vnic == null) || (this.Vnic != null && this.Vnic.Equals(hostVirtualNicManagerNicTypeSelection.Vnic))) && ((this.NicType == null && hostVirtualNicManagerNicTypeSelection.NicType == null) || (this.NicType != null && hostVirtualNicManagerNicTypeSelection.NicType != null && Enumerable.SequenceEqual(this.NicType, hostVirtualNicManagerNicTypeSelection.NicType))));
        }

        public override bool Equals(object hostVirtualNicManagerNicTypeSelection)
        {
            return Equals(hostVirtualNicManagerNicTypeSelection as HostVirtualNicManagerNicTypeSelection);
        }

        public override int GetHashCode()
        {
            return (Vnic + "_" + NicType).GetHashCode();
        }
    }

    public class HostVirtualNicOpaqueNetworkSpec : DynamicData, IEquatable<HostVirtualNicOpaqueNetworkSpec>
    {
        public string OpaqueNetworkId { get; set; }

        public string OpaqueNetworkType { get; set; }

        public bool Equals(HostVirtualNicOpaqueNetworkSpec hostVirtualNicOpaqueNetworkSpec)
        {
            return (hostVirtualNicOpaqueNetworkSpec != null && this.OpaqueNetworkId == hostVirtualNicOpaqueNetworkSpec.OpaqueNetworkId && this.OpaqueNetworkType == hostVirtualNicOpaqueNetworkSpec.OpaqueNetworkType);
        }

        public override bool Equals(object hostVirtualNicOpaqueNetworkSpec)
        {
            return Equals(hostVirtualNicOpaqueNetworkSpec as HostVirtualNicOpaqueNetworkSpec);
        }

        public override int GetHashCode()
        {
            return (OpaqueNetworkId + "_" + OpaqueNetworkType).GetHashCode();
        }
    }

    public class HostVirtualNicSpec : DynamicData, IEquatable<HostVirtualNicSpec>
    {
        public HostIpConfig Ip { get; set; }

        public string Mac { get; set; }

        public DistributedVirtualSwitchPortConnection DistributedVirtualPort { get; set; }

        public string Portgroup { get; set; }

        public int? Mtu { get; set; }

        public bool? TsoEnabled { get; set; }

        public string NetStackInstanceKey { get; set; }

        public HostVirtualNicOpaqueNetworkSpec OpaqueNetwork { get; set; }

        public string ExternalId { get; set; }

        public string PinnedPnic { get; set; }

        public HostVirtualNicIpRouteSpec IpRouteSpec { get; set; }

        public bool Equals(HostVirtualNicSpec hostVirtualNicSpec)
        {
            return (hostVirtualNicSpec != null && ((this.Ip == null && hostVirtualNicSpec.Ip == null) || (this.Ip != null && this.Ip.Equals(hostVirtualNicSpec.Ip))) && this.Mac == hostVirtualNicSpec.Mac && ((this.DistributedVirtualPort == null && hostVirtualNicSpec.DistributedVirtualPort == null) || (this.DistributedVirtualPort != null && this.DistributedVirtualPort.Equals(hostVirtualNicSpec.DistributedVirtualPort))) && this.Portgroup == hostVirtualNicSpec.Portgroup && ((this.Mtu == null && hostVirtualNicSpec.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostVirtualNicSpec.Mtu))) && ((this.TsoEnabled == null && hostVirtualNicSpec.TsoEnabled == null) || (this.TsoEnabled != null && this.TsoEnabled.Equals(hostVirtualNicSpec.TsoEnabled))) && this.NetStackInstanceKey == hostVirtualNicSpec.NetStackInstanceKey && ((this.OpaqueNetwork == null && hostVirtualNicSpec.OpaqueNetwork == null) || (this.OpaqueNetwork != null && this.OpaqueNetwork.Equals(hostVirtualNicSpec.OpaqueNetwork))) && this.ExternalId == hostVirtualNicSpec.ExternalId && this.PinnedPnic == hostVirtualNicSpec.PinnedPnic && ((this.IpRouteSpec == null && hostVirtualNicSpec.IpRouteSpec == null) || (this.IpRouteSpec != null && this.IpRouteSpec.Equals(hostVirtualNicSpec.IpRouteSpec))));
        }

        public override bool Equals(object hostVirtualNicSpec)
        {
            return Equals(hostVirtualNicSpec as HostVirtualNicSpec);
        }

        public override int GetHashCode()
        {
            return (Ip + "_" + Mac + "_" + DistributedVirtualPort + "_" + Portgroup + "_" + Mtu + "_" + TsoEnabled + "_" + NetStackInstanceKey + "_" + OpaqueNetwork + "_" + ExternalId + "_" + PinnedPnic + "_" + IpRouteSpec).GetHashCode();
        }
    }

    public class HostVirtualSwitch : DynamicData, IEquatable<HostVirtualSwitch>
    {
        public string Name { get; set; }

        public string Key { get; set; }

        public int NumPorts { get; set; }

        public int NumPortsAvailable { get; set; }

        public int? Mtu { get; set; }

        public string[] Portgroup { get; set; }

        public string[] Pnic { get; set; }

        public HostVirtualSwitchSpec Spec { get; set; }

        public bool Equals(HostVirtualSwitch hostVirtualSwitch)
        {
            return (hostVirtualSwitch != null && this.Name == hostVirtualSwitch.Name && this.Key == hostVirtualSwitch.Key && this.NumPorts == hostVirtualSwitch.NumPorts && this.NumPortsAvailable == hostVirtualSwitch.NumPortsAvailable && ((this.Mtu == null && hostVirtualSwitch.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostVirtualSwitch.Mtu))) && ((this.Portgroup == null && hostVirtualSwitch.Portgroup == null) || (this.Portgroup != null && hostVirtualSwitch.Portgroup != null && Enumerable.SequenceEqual(this.Portgroup, hostVirtualSwitch.Portgroup))) && ((this.Pnic == null && hostVirtualSwitch.Pnic == null) || (this.Pnic != null && hostVirtualSwitch.Pnic != null && Enumerable.SequenceEqual(this.Pnic, hostVirtualSwitch.Pnic))) && ((this.Spec == null && hostVirtualSwitch.Spec == null) || (this.Spec != null && this.Spec.Equals(hostVirtualSwitch.Spec))));
        }

        public override bool Equals(object hostVirtualSwitch)
        {
            return Equals(hostVirtualSwitch as HostVirtualSwitch);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Key + "_" + NumPorts + "_" + NumPortsAvailable + "_" + Mtu + "_" + Portgroup + "_" + Pnic + "_" + Spec).GetHashCode();
        }
    }

    public class HostVirtualSwitchAutoBridge : HostVirtualSwitchBridge, IEquatable<HostVirtualSwitchAutoBridge>
    {
        public string[] ExcludedNicDevice { get; set; }

        public bool Equals(HostVirtualSwitchAutoBridge hostVirtualSwitchAutoBridge)
        {
            return (hostVirtualSwitchAutoBridge != null && ((this.ExcludedNicDevice == null && hostVirtualSwitchAutoBridge.ExcludedNicDevice == null) || (this.ExcludedNicDevice != null && hostVirtualSwitchAutoBridge.ExcludedNicDevice != null && Enumerable.SequenceEqual(this.ExcludedNicDevice, hostVirtualSwitchAutoBridge.ExcludedNicDevice))));
        }

        public override bool Equals(object hostVirtualSwitchAutoBridge)
        {
            return Equals(hostVirtualSwitchAutoBridge as HostVirtualSwitchAutoBridge);
        }

        public override int GetHashCode()
        {
            return (ExcludedNicDevice).GetHashCode();
        }
    }

    public class HostVirtualSwitchBeaconConfig : DynamicData, IEquatable<HostVirtualSwitchBeaconConfig>
    {
        public int Interval { get; set; }

        public bool Equals(HostVirtualSwitchBeaconConfig hostVirtualSwitchBeaconConfig)
        {
            return (hostVirtualSwitchBeaconConfig != null && this.Interval == hostVirtualSwitchBeaconConfig.Interval);
        }

        public override bool Equals(object hostVirtualSwitchBeaconConfig)
        {
            return Equals(hostVirtualSwitchBeaconConfig as HostVirtualSwitchBeaconConfig);
        }

        public override int GetHashCode()
        {
            return (Interval).GetHashCode();
        }
    }

    public class HostVirtualSwitchBondBridge : HostVirtualSwitchBridge, IEquatable<HostVirtualSwitchBondBridge>
    {
        public string[] NicDevice { get; set; }

        public HostVirtualSwitchBeaconConfig Beacon { get; set; }

        public LinkDiscoveryProtocolConfig LinkDiscoveryProtocolConfig { get; set; }

        public bool Equals(HostVirtualSwitchBondBridge hostVirtualSwitchBondBridge)
        {
            return (hostVirtualSwitchBondBridge != null && ((this.NicDevice == null && hostVirtualSwitchBondBridge.NicDevice == null) || (this.NicDevice != null && hostVirtualSwitchBondBridge.NicDevice != null && Enumerable.SequenceEqual(this.NicDevice, hostVirtualSwitchBondBridge.NicDevice))) && ((this.Beacon == null && hostVirtualSwitchBondBridge.Beacon == null) || (this.Beacon != null && this.Beacon.Equals(hostVirtualSwitchBondBridge.Beacon))) && ((this.LinkDiscoveryProtocolConfig == null && hostVirtualSwitchBondBridge.LinkDiscoveryProtocolConfig == null) || (this.LinkDiscoveryProtocolConfig != null && this.LinkDiscoveryProtocolConfig.Equals(hostVirtualSwitchBondBridge.LinkDiscoveryProtocolConfig))));
        }

        public override bool Equals(object hostVirtualSwitchBondBridge)
        {
            return Equals(hostVirtualSwitchBondBridge as HostVirtualSwitchBondBridge);
        }

        public override int GetHashCode()
        {
            return (NicDevice + "_" + Beacon + "_" + LinkDiscoveryProtocolConfig).GetHashCode();
        }
    }

    public class HostVirtualSwitchBridge : DynamicData, IEquatable<HostVirtualSwitchBridge>
    {
        public bool Equals(HostVirtualSwitchBridge hostVirtualSwitchBridge)
        {
            return (hostVirtualSwitchBridge != null && base.Equals(hostVirtualSwitchBridge));
        }

        public override bool Equals(object hostVirtualSwitchBridge)
        {
            return Equals(hostVirtualSwitchBridge as HostVirtualSwitchBridge);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostVirtualSwitchConfig : DynamicData, IEquatable<HostVirtualSwitchConfig>
    {
        public string ChangeOperation { get; set; }

        public string Name { get; set; }

        public HostVirtualSwitchSpec Spec { get; set; }

        public bool Equals(HostVirtualSwitchConfig hostVirtualSwitchConfig)
        {
            return (hostVirtualSwitchConfig != null && this.ChangeOperation == hostVirtualSwitchConfig.ChangeOperation && this.Name == hostVirtualSwitchConfig.Name && ((this.Spec == null && hostVirtualSwitchConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(hostVirtualSwitchConfig.Spec))));
        }

        public override bool Equals(object hostVirtualSwitchConfig)
        {
            return Equals(hostVirtualSwitchConfig as HostVirtualSwitchConfig);
        }

        public override int GetHashCode()
        {
            return (ChangeOperation + "_" + Name + "_" + Spec).GetHashCode();
        }
    }

    public class HostVirtualSwitchSimpleBridge : HostVirtualSwitchBridge, IEquatable<HostVirtualSwitchSimpleBridge>
    {
        public string NicDevice { get; set; }

        public bool Equals(HostVirtualSwitchSimpleBridge hostVirtualSwitchSimpleBridge)
        {
            return (hostVirtualSwitchSimpleBridge != null && this.NicDevice == hostVirtualSwitchSimpleBridge.NicDevice);
        }

        public override bool Equals(object hostVirtualSwitchSimpleBridge)
        {
            return Equals(hostVirtualSwitchSimpleBridge as HostVirtualSwitchSimpleBridge);
        }

        public override int GetHashCode()
        {
            return (NicDevice).GetHashCode();
        }
    }

    public class HostVirtualSwitchSpec : DynamicData, IEquatable<HostVirtualSwitchSpec>
    {
        public int NumPorts { get; set; }

        public HostVirtualSwitchBridge Bridge { get; set; }

        public HostNetworkPolicy Policy { get; set; }

        public int? Mtu { get; set; }

        public bool Equals(HostVirtualSwitchSpec hostVirtualSwitchSpec)
        {
            return (hostVirtualSwitchSpec != null && this.NumPorts == hostVirtualSwitchSpec.NumPorts && ((this.Bridge == null && hostVirtualSwitchSpec.Bridge == null) || (this.Bridge != null && this.Bridge.Equals(hostVirtualSwitchSpec.Bridge))) && ((this.Policy == null && hostVirtualSwitchSpec.Policy == null) || (this.Policy != null && this.Policy.Equals(hostVirtualSwitchSpec.Policy))) && ((this.Mtu == null && hostVirtualSwitchSpec.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostVirtualSwitchSpec.Mtu))));
        }

        public override bool Equals(object hostVirtualSwitchSpec)
        {
            return Equals(hostVirtualSwitchSpec as HostVirtualSwitchSpec);
        }

        public override int GetHashCode()
        {
            return (NumPorts + "_" + Bridge + "_" + Policy + "_" + Mtu).GetHashCode();
        }
    }

    public class HostVmciAccessManagerAccessSpec : DynamicData, IEquatable<HostVmciAccessManagerAccessSpec>
    {
        public ManagedObjectReference Vm { get; set; }

        public string[] Services { get; set; }

        public string Mode { get; set; }

        public HostVmciAccessManagerAccessSpec_LinkedView LinkedView { get; set; }

        public bool Equals(HostVmciAccessManagerAccessSpec hostVmciAccessManagerAccessSpec)
        {
            return (hostVmciAccessManagerAccessSpec != null && ((this.Vm == null && hostVmciAccessManagerAccessSpec.Vm == null) || (this.Vm != null && this.Vm.Equals(hostVmciAccessManagerAccessSpec.Vm))) && ((this.Services == null && hostVmciAccessManagerAccessSpec.Services == null) || (this.Services != null && hostVmciAccessManagerAccessSpec.Services != null && Enumerable.SequenceEqual(this.Services, hostVmciAccessManagerAccessSpec.Services))) && this.Mode == hostVmciAccessManagerAccessSpec.Mode && ((this.LinkedView == null && hostVmciAccessManagerAccessSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostVmciAccessManagerAccessSpec.LinkedView))));
        }

        public override bool Equals(object hostVmciAccessManagerAccessSpec)
        {
            return Equals(hostVmciAccessManagerAccessSpec as HostVmciAccessManagerAccessSpec);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Services + "_" + Mode + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostVmciAccessManagerAccessSpec_LinkedView : IEquatable<HostVmciAccessManagerAccessSpec_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(HostVmciAccessManagerAccessSpec_LinkedView hostVmciAccessManagerAccessSpec_LinkedView)
        {
            return (hostVmciAccessManagerAccessSpec_LinkedView != null && ((this.Vm == null && hostVmciAccessManagerAccessSpec_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(hostVmciAccessManagerAccessSpec_LinkedView.Vm))));
        }

        public override bool Equals(object hostVmciAccessManagerAccessSpec_LinkedView)
        {
            return Equals(hostVmciAccessManagerAccessSpec_LinkedView as HostVmciAccessManagerAccessSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class HostVmfsRescanResult : DynamicData, IEquatable<HostVmfsRescanResult>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public HostVmfsRescanResult_LinkedView LinkedView { get; set; }

        public bool Equals(HostVmfsRescanResult hostVmfsRescanResult)
        {
            return (hostVmfsRescanResult != null && ((this.Host == null && hostVmfsRescanResult.Host == null) || (this.Host != null && this.Host.Equals(hostVmfsRescanResult.Host))) && ((this.Fault == null && hostVmfsRescanResult.Fault == null) || (this.Fault != null && this.Fault.Equals(hostVmfsRescanResult.Fault))) && ((this.LinkedView == null && hostVmfsRescanResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostVmfsRescanResult.LinkedView))));
        }

        public override bool Equals(object hostVmfsRescanResult)
        {
            return Equals(hostVmfsRescanResult as HostVmfsRescanResult);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Fault + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostVmfsRescanResult_LinkedView : IEquatable<HostVmfsRescanResult_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostVmfsRescanResult_LinkedView hostVmfsRescanResult_LinkedView)
        {
            return (hostVmfsRescanResult_LinkedView != null && ((this.Host == null && hostVmfsRescanResult_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostVmfsRescanResult_LinkedView.Host))));
        }

        public override bool Equals(object hostVmfsRescanResult_LinkedView)
        {
            return Equals(hostVmfsRescanResult_LinkedView as HostVmfsRescanResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostVmfsSpec : DynamicData, IEquatable<HostVmfsSpec>
    {
        public HostScsiDiskPartition Extent { get; set; }

        public int? BlockSizeMb { get; set; }

        public int MajorVersion { get; set; }

        public string VolumeName { get; set; }

        public int? BlockSize { get; set; }

        public int? UnmapGranularity { get; set; }

        public string UnmapPriority { get; set; }

        public VmfsUnmapBandwidthSpec UnmapBandwidthSpec { get; set; }

        public bool Equals(HostVmfsSpec hostVmfsSpec)
        {
            return (hostVmfsSpec != null && ((this.Extent == null && hostVmfsSpec.Extent == null) || (this.Extent != null && this.Extent.Equals(hostVmfsSpec.Extent))) && ((this.BlockSizeMb == null && hostVmfsSpec.BlockSizeMb == null) || (this.BlockSizeMb != null && this.BlockSizeMb.Equals(hostVmfsSpec.BlockSizeMb))) && this.MajorVersion == hostVmfsSpec.MajorVersion && this.VolumeName == hostVmfsSpec.VolumeName && ((this.BlockSize == null && hostVmfsSpec.BlockSize == null) || (this.BlockSize != null && this.BlockSize.Equals(hostVmfsSpec.BlockSize))) && ((this.UnmapGranularity == null && hostVmfsSpec.UnmapGranularity == null) || (this.UnmapGranularity != null && this.UnmapGranularity.Equals(hostVmfsSpec.UnmapGranularity))) && this.UnmapPriority == hostVmfsSpec.UnmapPriority && ((this.UnmapBandwidthSpec == null && hostVmfsSpec.UnmapBandwidthSpec == null) || (this.UnmapBandwidthSpec != null && this.UnmapBandwidthSpec.Equals(hostVmfsSpec.UnmapBandwidthSpec))));
        }

        public override bool Equals(object hostVmfsSpec)
        {
            return Equals(hostVmfsSpec as HostVmfsSpec);
        }

        public override int GetHashCode()
        {
            return (Extent + "_" + BlockSizeMb + "_" + MajorVersion + "_" + VolumeName + "_" + BlockSize + "_" + UnmapGranularity + "_" + UnmapPriority + "_" + UnmapBandwidthSpec).GetHashCode();
        }
    }

    public class HostVmfsVolume : HostFileSystemVolume, IEquatable<HostVmfsVolume>
    {
        public int BlockSizeMb { get; set; }

        public int? BlockSize { get; set; }

        public int? UnmapGranularity { get; set; }

        public string UnmapPriority { get; set; }

        public VmfsUnmapBandwidthSpec UnmapBandwidthSpec { get; set; }

        public int MaxBlocks { get; set; }

        public int MajorVersion { get; set; }

        public string Version { get; set; }

        public string Uuid { get; set; }

        public HostScsiDiskPartition[] Extent { get; set; }

        public bool VmfsUpgradable { get; set; }

        public HostForceMountedInfo ForceMountedInfo { get; set; }

        public bool? Ssd { get; set; }

        public bool? Local { get; set; }

        public string ScsiDiskType { get; set; }

        public bool Equals(HostVmfsVolume hostVmfsVolume)
        {
            return (hostVmfsVolume != null && this.BlockSizeMb == hostVmfsVolume.BlockSizeMb && ((this.BlockSize == null && hostVmfsVolume.BlockSize == null) || (this.BlockSize != null && this.BlockSize.Equals(hostVmfsVolume.BlockSize))) && ((this.UnmapGranularity == null && hostVmfsVolume.UnmapGranularity == null) || (this.UnmapGranularity != null && this.UnmapGranularity.Equals(hostVmfsVolume.UnmapGranularity))) && this.UnmapPriority == hostVmfsVolume.UnmapPriority && ((this.UnmapBandwidthSpec == null && hostVmfsVolume.UnmapBandwidthSpec == null) || (this.UnmapBandwidthSpec != null && this.UnmapBandwidthSpec.Equals(hostVmfsVolume.UnmapBandwidthSpec))) && this.MaxBlocks == hostVmfsVolume.MaxBlocks && this.MajorVersion == hostVmfsVolume.MajorVersion && this.Version == hostVmfsVolume.Version && this.Uuid == hostVmfsVolume.Uuid && ((this.Extent == null && hostVmfsVolume.Extent == null) || (this.Extent != null && hostVmfsVolume.Extent != null && Enumerable.SequenceEqual(this.Extent, hostVmfsVolume.Extent))) && this.VmfsUpgradable == hostVmfsVolume.VmfsUpgradable && ((this.ForceMountedInfo == null && hostVmfsVolume.ForceMountedInfo == null) || (this.ForceMountedInfo != null && this.ForceMountedInfo.Equals(hostVmfsVolume.ForceMountedInfo))) && ((this.Ssd == null && hostVmfsVolume.Ssd == null) || (this.Ssd != null && this.Ssd.Equals(hostVmfsVolume.Ssd))) && ((this.Local == null && hostVmfsVolume.Local == null) || (this.Local != null && this.Local.Equals(hostVmfsVolume.Local))) && this.ScsiDiskType == hostVmfsVolume.ScsiDiskType);
        }

        public override bool Equals(object hostVmfsVolume)
        {
            return Equals(hostVmfsVolume as HostVmfsVolume);
        }

        public override int GetHashCode()
        {
            return (BlockSizeMb + "_" + BlockSize + "_" + UnmapGranularity + "_" + UnmapPriority + "_" + UnmapBandwidthSpec + "_" + MaxBlocks + "_" + MajorVersion + "_" + Version + "_" + Uuid + "_" + Extent + "_" + VmfsUpgradable + "_" + ForceMountedInfo + "_" + Ssd + "_" + Local + "_" + ScsiDiskType).GetHashCode();
        }
    }

    public class HostVMotionCompatibility : DynamicData, IEquatable<HostVMotionCompatibility>
    {
        public ManagedObjectReference Host { get; set; }

        public string[] Compatibility { get; set; }

        public HostVMotionCompatibility_LinkedView LinkedView { get; set; }

        public bool Equals(HostVMotionCompatibility hostVMotionCompatibility)
        {
            return (hostVMotionCompatibility != null && ((this.Host == null && hostVMotionCompatibility.Host == null) || (this.Host != null && this.Host.Equals(hostVMotionCompatibility.Host))) && ((this.Compatibility == null && hostVMotionCompatibility.Compatibility == null) || (this.Compatibility != null && hostVMotionCompatibility.Compatibility != null && Enumerable.SequenceEqual(this.Compatibility, hostVMotionCompatibility.Compatibility))) && ((this.LinkedView == null && hostVMotionCompatibility.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(hostVMotionCompatibility.LinkedView))));
        }

        public override bool Equals(object hostVMotionCompatibility)
        {
            return Equals(hostVMotionCompatibility as HostVMotionCompatibility);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Compatibility + "_" + LinkedView).GetHashCode();
        }
    }

    public class HostVMotionCompatibility_LinkedView : IEquatable<HostVMotionCompatibility_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(HostVMotionCompatibility_LinkedView hostVMotionCompatibility_LinkedView)
        {
            return (hostVMotionCompatibility_LinkedView != null && ((this.Host == null && hostVMotionCompatibility_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(hostVMotionCompatibility_LinkedView.Host))));
        }

        public override bool Equals(object hostVMotionCompatibility_LinkedView)
        {
            return Equals(hostVMotionCompatibility_LinkedView as HostVMotionCompatibility_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class HostVMotionConfig : DynamicData, IEquatable<HostVMotionConfig>
    {
        public string VmotionNicKey { get; set; }

        public bool Enabled { get; set; }

        public bool Equals(HostVMotionConfig hostVMotionConfig)
        {
            return (hostVMotionConfig != null && this.VmotionNicKey == hostVMotionConfig.VmotionNicKey && this.Enabled == hostVMotionConfig.Enabled);
        }

        public override bool Equals(object hostVMotionConfig)
        {
            return Equals(hostVMotionConfig as HostVMotionConfig);
        }

        public override int GetHashCode()
        {
            return (VmotionNicKey + "_" + Enabled).GetHashCode();
        }
    }

    public class HostVMotionInfo : DynamicData, IEquatable<HostVMotionInfo>
    {
        public HostVMotionNetConfig NetConfig { get; set; }

        public HostIpConfig IpConfig { get; set; }

        public bool Equals(HostVMotionInfo hostVMotionInfo)
        {
            return (hostVMotionInfo != null && ((this.NetConfig == null && hostVMotionInfo.NetConfig == null) || (this.NetConfig != null && this.NetConfig.Equals(hostVMotionInfo.NetConfig))) && ((this.IpConfig == null && hostVMotionInfo.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(hostVMotionInfo.IpConfig))));
        }

        public override bool Equals(object hostVMotionInfo)
        {
            return Equals(hostVMotionInfo as HostVMotionInfo);
        }

        public override int GetHashCode()
        {
            return (NetConfig + "_" + IpConfig).GetHashCode();
        }
    }

    public class HostVMotionNetConfig : DynamicData, IEquatable<HostVMotionNetConfig>
    {
        public HostVirtualNic[] CandidateVnic { get; set; }

        public string SelectedVnic { get; set; }

        public bool Equals(HostVMotionNetConfig hostVMotionNetConfig)
        {
            return (hostVMotionNetConfig != null && ((this.CandidateVnic == null && hostVMotionNetConfig.CandidateVnic == null) || (this.CandidateVnic != null && hostVMotionNetConfig.CandidateVnic != null && Enumerable.SequenceEqual(this.CandidateVnic, hostVMotionNetConfig.CandidateVnic))) && this.SelectedVnic == hostVMotionNetConfig.SelectedVnic);
        }

        public override bool Equals(object hostVMotionNetConfig)
        {
            return Equals(hostVMotionNetConfig as HostVMotionNetConfig);
        }

        public override int GetHashCode()
        {
            return (CandidateVnic + "_" + SelectedVnic).GetHashCode();
        }
    }

    public class HostVMotionSystem : ExtensibleManagedObject, IEquatable<HostVMotionSystem>
    {
        public HostVMotionNetConfig NetConfig { get; set; }

        public HostIpConfig IpConfig { get; set; }

        public void UpdateIpConfig(HostIpConfig ipConfig)
        {
        }

        public void SelectVnic(string device)
        {
        }

        public void DeselectVnic()
        {
        }

        public bool Equals(HostVMotionSystem hostVMotionSystem)
        {
            return (hostVMotionSystem != null && ((this.NetConfig == null && hostVMotionSystem.NetConfig == null) || (this.NetConfig != null && this.NetConfig.Equals(hostVMotionSystem.NetConfig))) && ((this.IpConfig == null && hostVMotionSystem.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(hostVMotionSystem.IpConfig))));
        }

        public override bool Equals(object hostVMotionSystem)
        {
            return Equals(hostVMotionSystem as HostVMotionSystem);
        }

        public override int GetHashCode()
        {
            return (NetConfig + "_" + IpConfig).GetHashCode();
        }
    }

    public class HostVnicConnectedToCustomizedDVPortEvent : HostEvent, IEquatable<HostVnicConnectedToCustomizedDVPortEvent>
    {
        public VnicPortArgument Vnic { get; set; }

        public string PrevPortKey { get; set; }

        public bool Equals(HostVnicConnectedToCustomizedDVPortEvent hostVnicConnectedToCustomizedDVPortEvent)
        {
            return (hostVnicConnectedToCustomizedDVPortEvent != null && ((this.Vnic == null && hostVnicConnectedToCustomizedDVPortEvent.Vnic == null) || (this.Vnic != null && this.Vnic.Equals(hostVnicConnectedToCustomizedDVPortEvent.Vnic))) && this.PrevPortKey == hostVnicConnectedToCustomizedDVPortEvent.PrevPortKey);
        }

        public override bool Equals(object hostVnicConnectedToCustomizedDVPortEvent)
        {
            return Equals(hostVnicConnectedToCustomizedDVPortEvent as HostVnicConnectedToCustomizedDVPortEvent);
        }

        public override int GetHashCode()
        {
            return (Vnic + "_" + PrevPortKey).GetHashCode();
        }
    }

    public class HostVsanInternalSystem : ViewBase, IEquatable<HostVsanInternalSystem>
    {
        public string QueryCmmds(HostVsanInternalSystemCmmdsQuery[] queries)
        {
            return default(string);
        }

        public string QueryPhysicalVsanDisks(string[] props)
        {
            return default(string);
        }

        public string QueryVsanObjects(string[] uuids)
        {
            return default(string);
        }

        public string QueryObjectsOnPhysicalVsanDisk(string[] disks)
        {
            return default(string);
        }

        public string[] AbdicateDomOwnership(string[] uuids)
        {
            return default(string[]);
        }

        public string QueryVsanStatistics(string[] labels)
        {
            return default(string);
        }

        public void ReconfigureDomObject(string uuid, string policy)
        {
        }

        public string QuerySyncingVsanObjects(string[] uuids)
        {
            return default(string);
        }

        public HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult[] RunVsanPhysicalDiskDiagnostics(string[] disks)
        {
            return default(HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult[]);
        }

        public string GetVsanObjExtAttrs(string[] uuids)
        {
            return default(string);
        }

        public VsanPolicySatisfiability[] ReconfigurationSatisfiable(VsanPolicyChangeBatch[] pcbs, bool? ignoreSatisfiability)
        {
            return default(VsanPolicySatisfiability[]);
        }

        public VsanPolicySatisfiability[] CanProvisionObjects(VsanNewPolicyBatch[] npbs, bool? ignoreSatisfiability)
        {
            return default(VsanPolicySatisfiability[]);
        }

        public HostVsanInternalSystemDeleteVsanObjectsResult[] DeleteVsanObjects(string[] uuids, bool? force)
        {
            return default(HostVsanInternalSystemDeleteVsanObjectsResult[]);
        }

        public HostVsanInternalSystemVsanObjectOperationResult[] UpgradeVsanObjects(string[] uuids, int newVersion)
        {
            return default(HostVsanInternalSystemVsanObjectOperationResult[]);
        }

        public string[] QueryVsanObjectUuidsByFilter(string[] uuids, int? limit, int? version)
        {
            return default(string[]);
        }

        public bool Equals(HostVsanInternalSystem hostVsanInternalSystem)
        {
            return (hostVsanInternalSystem != null && base.Equals(hostVsanInternalSystem));
        }

        public override bool Equals(object hostVsanInternalSystem)
        {
            return Equals(hostVsanInternalSystem as HostVsanInternalSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostVsanInternalSystemCmmdsQuery : DynamicData, IEquatable<HostVsanInternalSystemCmmdsQuery>
    {
        public string Type { get; set; }

        public string Uuid { get; set; }

        public string Owner { get; set; }

        public bool Equals(HostVsanInternalSystemCmmdsQuery hostVsanInternalSystemCmmdsQuery)
        {
            return (hostVsanInternalSystemCmmdsQuery != null && this.Type == hostVsanInternalSystemCmmdsQuery.Type && this.Uuid == hostVsanInternalSystemCmmdsQuery.Uuid && this.Owner == hostVsanInternalSystemCmmdsQuery.Owner);
        }

        public override bool Equals(object hostVsanInternalSystemCmmdsQuery)
        {
            return Equals(hostVsanInternalSystemCmmdsQuery as HostVsanInternalSystemCmmdsQuery);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Uuid + "_" + Owner).GetHashCode();
        }
    }

    public class HostVsanInternalSystemDeleteVsanObjectsResult : DynamicData, IEquatable<HostVsanInternalSystemDeleteVsanObjectsResult>
    {
        public string Uuid { get; set; }

        public bool Success { get; set; }

        public LocalizableMessage[] FailureReason { get; set; }

        public bool Equals(HostVsanInternalSystemDeleteVsanObjectsResult hostVsanInternalSystemDeleteVsanObjectsResult)
        {
            return (hostVsanInternalSystemDeleteVsanObjectsResult != null && this.Uuid == hostVsanInternalSystemDeleteVsanObjectsResult.Uuid && this.Success == hostVsanInternalSystemDeleteVsanObjectsResult.Success && ((this.FailureReason == null && hostVsanInternalSystemDeleteVsanObjectsResult.FailureReason == null) || (this.FailureReason != null && hostVsanInternalSystemDeleteVsanObjectsResult.FailureReason != null && Enumerable.SequenceEqual(this.FailureReason, hostVsanInternalSystemDeleteVsanObjectsResult.FailureReason))));
        }

        public override bool Equals(object hostVsanInternalSystemDeleteVsanObjectsResult)
        {
            return Equals(hostVsanInternalSystemDeleteVsanObjectsResult as HostVsanInternalSystemDeleteVsanObjectsResult);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + Success + "_" + FailureReason).GetHashCode();
        }
    }

    public class HostVsanInternalSystemVsanObjectOperationResult : DynamicData, IEquatable<HostVsanInternalSystemVsanObjectOperationResult>
    {
        public string Uuid { get; set; }

        public LocalizableMessage[] FailureReason { get; set; }

        public bool Equals(HostVsanInternalSystemVsanObjectOperationResult hostVsanInternalSystemVsanObjectOperationResult)
        {
            return (hostVsanInternalSystemVsanObjectOperationResult != null && this.Uuid == hostVsanInternalSystemVsanObjectOperationResult.Uuid && ((this.FailureReason == null && hostVsanInternalSystemVsanObjectOperationResult.FailureReason == null) || (this.FailureReason != null && hostVsanInternalSystemVsanObjectOperationResult.FailureReason != null && Enumerable.SequenceEqual(this.FailureReason, hostVsanInternalSystemVsanObjectOperationResult.FailureReason))));
        }

        public override bool Equals(object hostVsanInternalSystemVsanObjectOperationResult)
        {
            return Equals(hostVsanInternalSystemVsanObjectOperationResult as HostVsanInternalSystemVsanObjectOperationResult);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + FailureReason).GetHashCode();
        }
    }

    public class HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult : DynamicData, IEquatable<HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult>
    {
        public string DiskUuid { get; set; }

        public bool Success { get; set; }

        public string FailureReason { get; set; }

        public bool Equals(HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult)
        {
            return (hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult != null && this.DiskUuid == hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult.DiskUuid && this.Success == hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult.Success && this.FailureReason == hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult.FailureReason);
        }

        public override bool Equals(object hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult)
        {
            return Equals(hostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult as HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult);
        }

        public override int GetHashCode()
        {
            return (DiskUuid + "_" + Success + "_" + FailureReason).GetHashCode();
        }
    }

    public class HostVsanSystem : ViewBase, IEquatable<HostVsanSystem>
    {
        public VsanHostConfigInfo Config { get; set; }

        public VsanHostDiskResult[] QueryDisksForVsan(string[] canonicalName)
        {
            return default(VsanHostDiskResult[]);
        }

        public ManagedObjectReference AddDisks_Task(HostScsiDisk[] disk)
        {
            return default(ManagedObjectReference);
        }

        public VsanHostDiskMapResult[] AddDisks(HostScsiDisk[] disk)
        {
            return default(VsanHostDiskMapResult[]);
        }

        public ManagedObjectReference InitializeDisks_Task(VsanHostDiskMapping[] mapping)
        {
            return default(ManagedObjectReference);
        }

        public VsanHostDiskMapResult[] InitializeDisks(VsanHostDiskMapping[] mapping)
        {
            return default(VsanHostDiskMapResult[]);
        }

        public ManagedObjectReference RemoveDisk_Task(HostScsiDisk[] disk, HostMaintenanceSpec maintenanceSpec, int? timeout)
        {
            return default(ManagedObjectReference);
        }

        public VsanHostDiskResult[] RemoveDisk(HostScsiDisk[] disk, HostMaintenanceSpec maintenanceSpec, int? timeout)
        {
            return default(VsanHostDiskResult[]);
        }

        public ManagedObjectReference RemoveDiskMapping_Task(VsanHostDiskMapping[] mapping, HostMaintenanceSpec maintenanceSpec, int? timeout)
        {
            return default(ManagedObjectReference);
        }

        public VsanHostDiskMapResult[] RemoveDiskMapping(VsanHostDiskMapping[] mapping, HostMaintenanceSpec maintenanceSpec, int? timeout)
        {
            return default(VsanHostDiskMapResult[]);
        }

        public ManagedObjectReference UnmountDiskMapping_Task(VsanHostDiskMapping[] mapping)
        {
            return default(ManagedObjectReference);
        }

        public VsanHostDiskMapResult[] UnmountDiskMapping(VsanHostDiskMapping[] mapping)
        {
            return default(VsanHostDiskMapResult[]);
        }

        public ManagedObjectReference UpdateVsan_Task(VsanHostConfigInfo config)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateVsan(VsanHostConfigInfo config)
        {
        }

        public VsanHostClusterStatus QueryHostStatus()
        {
            return default(VsanHostClusterStatus);
        }

        public ManagedObjectReference EvacuateVsanNode_Task(HostMaintenanceSpec maintenanceSpec, int timeout)
        {
            return default(ManagedObjectReference);
        }

        public void EvacuateVsanNode(HostMaintenanceSpec maintenanceSpec, int timeout)
        {
        }

        public ManagedObjectReference RecommissionVsanNode_Task()
        {
            return default(ManagedObjectReference);
        }

        public void RecommissionVsanNode()
        {
        }

        public bool Equals(HostVsanSystem hostVsanSystem)
        {
            return (hostVsanSystem != null && ((this.Config == null && hostVsanSystem.Config == null) || (this.Config != null && this.Config.Equals(hostVsanSystem.Config))));
        }

        public override bool Equals(object hostVsanSystem)
        {
            return Equals(hostVsanSystem as HostVsanSystem);
        }

        public override int GetHashCode()
        {
            return (Config).GetHashCode();
        }
    }

    public class HostVStorageObjectManager : VStorageObjectManagerBase, IEquatable<HostVStorageObjectManager>
    {
        public ManagedObjectReference HostCreateDisk_Task(VslmCreateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject HostCreateDisk(VslmCreateSpec spec)
        {
            return default(VStorageObject);
        }

        public VStorageObject HostRegisterDisk(string path, string name)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference HostExtendDisk_Task(ID id, ManagedObjectReference datastore, long newCapacityInMB)
        {
            return default(ManagedObjectReference);
        }

        public void HostExtendDisk(ID id, ManagedObjectReference datastore, long newCapacityInMB)
        {
        }

        public ManagedObjectReference HostInflateDisk_Task(ID id, ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void HostInflateDisk(ID id, ManagedObjectReference datastore)
        {
        }

        public void HostRenameVStorageObject(ID id, ManagedObjectReference datastore, string name)
        {
        }

        public vslmInfrastructureObjectPolicy[] HostRetrieveVStorageInfrastructureObjectPolicy(ManagedObjectReference datastore)
        {
            return default(vslmInfrastructureObjectPolicy[]);
        }

        public ManagedObjectReference HostDeleteVStorageObject_Task(ID id, ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void HostDeleteVStorageObject(ID id, ManagedObjectReference datastore)
        {
        }

        public VStorageObject HostRetrieveVStorageObject(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObject);
        }

        public VStorageObjectStateInfo HostRetrieveVStorageObjectState(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObjectStateInfo);
        }

        public ID[] HostListVStorageObject(ManagedObjectReference datastore)
        {
            return default(ID[]);
        }

        public ManagedObjectReference HostCloneVStorageObject_Task(ID id, ManagedObjectReference datastore, VslmCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject HostCloneVStorageObject(ID id, ManagedObjectReference datastore, VslmCloneSpec spec)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference HostRelocateVStorageObject_Task(ID id, ManagedObjectReference datastore, VslmRelocateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject HostRelocateVStorageObject(ID id, ManagedObjectReference datastore, VslmRelocateSpec spec)
        {
            return default(VStorageObject);
        }

        public void HostSetVStorageObjectControlFlags(ID id, ManagedObjectReference datastore, string[] controlFlags)
        {
        }

        public void HostClearVStorageObjectControlFlags(ID id, ManagedObjectReference datastore, string[] controlFlags)
        {
        }

        public ManagedObjectReference HostReconcileDatastoreInventory_Task(ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void HostReconcileDatastoreInventory(ManagedObjectReference datastore)
        {
        }

        public void HostScheduleReconcileDatastoreInventory(ManagedObjectReference datastore)
        {
        }

        public ManagedObjectReference HostVStorageObjectCreateSnapshot_Task(ID id, ManagedObjectReference datastore, string description)
        {
            return default(ManagedObjectReference);
        }

        public ID HostVStorageObjectCreateSnapshot(ID id, ManagedObjectReference datastore, string description)
        {
            return default(ID);
        }

        public ManagedObjectReference HostVStorageObjectDeleteSnapshot_Task(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
            return default(ManagedObjectReference);
        }

        public void HostVStorageObjectDeleteSnapshot(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
        }

        public VStorageObjectSnapshotInfo HostVStorageObjectRetrieveSnapshotInfo(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObjectSnapshotInfo);
        }

        public ManagedObjectReference HostVStorageObjectCreateDiskFromSnapshot_Task(ID id, ManagedObjectReference datastore, ID snapshotId, string name, VirtualMachineProfileSpec[] profile, CryptoSpec crypto, string path)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject HostVStorageObjectCreateDiskFromSnapshot(ID id, ManagedObjectReference datastore, ID snapshotId, string name, VirtualMachineProfileSpec[] profile, CryptoSpec crypto, string path)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference HostVStorageObjectRevert_Task(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
            return default(ManagedObjectReference);
        }

        public void HostVStorageObjectRevert(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
        }

        public bool Equals(HostVStorageObjectManager hostVStorageObjectManager)
        {
            return (hostVStorageObjectManager != null && base.Equals(hostVStorageObjectManager));
        }

        public override bool Equals(object hostVStorageObjectManager)
        {
            return Equals(hostVStorageObjectManager as HostVStorageObjectManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HostVvolVolume : HostFileSystemVolume, IEquatable<HostVvolVolume>
    {
        public string ScId { get; set; }

        public VVolHostPE[] HostPE { get; set; }

        public VimVasaProviderInfo[] VasaProviderInfo { get; set; }

        public VASAStorageArray[] StorageArray { get; set; }

        public bool Equals(HostVvolVolume hostVvolVolume)
        {
            return (hostVvolVolume != null && this.ScId == hostVvolVolume.ScId && ((this.HostPE == null && hostVvolVolume.HostPE == null) || (this.HostPE != null && hostVvolVolume.HostPE != null && Enumerable.SequenceEqual(this.HostPE, hostVvolVolume.HostPE))) && ((this.VasaProviderInfo == null && hostVvolVolume.VasaProviderInfo == null) || (this.VasaProviderInfo != null && hostVvolVolume.VasaProviderInfo != null && Enumerable.SequenceEqual(this.VasaProviderInfo, hostVvolVolume.VasaProviderInfo))) && ((this.StorageArray == null && hostVvolVolume.StorageArray == null) || (this.StorageArray != null && hostVvolVolume.StorageArray != null && Enumerable.SequenceEqual(this.StorageArray, hostVvolVolume.StorageArray))));
        }

        public override bool Equals(object hostVvolVolume)
        {
            return Equals(hostVvolVolume as HostVvolVolume);
        }

        public override int GetHashCode()
        {
            return (ScId + "_" + HostPE + "_" + VasaProviderInfo + "_" + StorageArray).GetHashCode();
        }
    }

    public class HostVvolVolumeSpecification : DynamicData, IEquatable<HostVvolVolumeSpecification>
    {
        public long MaxSizeInMB { get; set; }

        public string VolumeName { get; set; }

        public VimVasaProviderInfo[] VasaProviderInfo { get; set; }

        public VASAStorageArray[] StorageArray { get; set; }

        public string Uuid { get; set; }

        public bool Equals(HostVvolVolumeSpecification hostVvolVolumeSpecification)
        {
            return (hostVvolVolumeSpecification != null && this.MaxSizeInMB == hostVvolVolumeSpecification.MaxSizeInMB && this.VolumeName == hostVvolVolumeSpecification.VolumeName && ((this.VasaProviderInfo == null && hostVvolVolumeSpecification.VasaProviderInfo == null) || (this.VasaProviderInfo != null && hostVvolVolumeSpecification.VasaProviderInfo != null && Enumerable.SequenceEqual(this.VasaProviderInfo, hostVvolVolumeSpecification.VasaProviderInfo))) && ((this.StorageArray == null && hostVvolVolumeSpecification.StorageArray == null) || (this.StorageArray != null && hostVvolVolumeSpecification.StorageArray != null && Enumerable.SequenceEqual(this.StorageArray, hostVvolVolumeSpecification.StorageArray))) && this.Uuid == hostVvolVolumeSpecification.Uuid);
        }

        public override bool Equals(object hostVvolVolumeSpecification)
        {
            return Equals(hostVvolVolumeSpecification as HostVvolVolumeSpecification);
        }

        public override int GetHashCode()
        {
            return (MaxSizeInMB + "_" + VolumeName + "_" + VasaProviderInfo + "_" + StorageArray + "_" + Uuid).GetHashCode();
        }
    }

    public class HostWwnChangedEvent : HostEvent, IEquatable<HostWwnChangedEvent>
    {
        public long[] OldNodeWwns { get; set; }

        public long[] OldPortWwns { get; set; }

        public long[] NewNodeWwns { get; set; }

        public long[] NewPortWwns { get; set; }

        public bool Equals(HostWwnChangedEvent hostWwnChangedEvent)
        {
            return (hostWwnChangedEvent != null && ((this.OldNodeWwns == null && hostWwnChangedEvent.OldNodeWwns == null) || (this.OldNodeWwns != null && hostWwnChangedEvent.OldNodeWwns != null && Enumerable.SequenceEqual(this.OldNodeWwns, hostWwnChangedEvent.OldNodeWwns))) && ((this.OldPortWwns == null && hostWwnChangedEvent.OldPortWwns == null) || (this.OldPortWwns != null && hostWwnChangedEvent.OldPortWwns != null && Enumerable.SequenceEqual(this.OldPortWwns, hostWwnChangedEvent.OldPortWwns))) && ((this.NewNodeWwns == null && hostWwnChangedEvent.NewNodeWwns == null) || (this.NewNodeWwns != null && hostWwnChangedEvent.NewNodeWwns != null && Enumerable.SequenceEqual(this.NewNodeWwns, hostWwnChangedEvent.NewNodeWwns))) && ((this.NewPortWwns == null && hostWwnChangedEvent.NewPortWwns == null) || (this.NewPortWwns != null && hostWwnChangedEvent.NewPortWwns != null && Enumerable.SequenceEqual(this.NewPortWwns, hostWwnChangedEvent.NewPortWwns))));
        }

        public override bool Equals(object hostWwnChangedEvent)
        {
            return Equals(hostWwnChangedEvent as HostWwnChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldNodeWwns + "_" + OldPortWwns + "_" + NewNodeWwns + "_" + NewPortWwns).GetHashCode();
        }
    }

    public class HostWwnConflictEvent : HostEvent, IEquatable<HostWwnConflictEvent>
    {
        public VmEventArgument[] ConflictedVms { get; set; }

        public HostEventArgument[] ConflictedHosts { get; set; }

        public long Wwn { get; set; }

        public bool Equals(HostWwnConflictEvent hostWwnConflictEvent)
        {
            return (hostWwnConflictEvent != null && ((this.ConflictedVms == null && hostWwnConflictEvent.ConflictedVms == null) || (this.ConflictedVms != null && hostWwnConflictEvent.ConflictedVms != null && Enumerable.SequenceEqual(this.ConflictedVms, hostWwnConflictEvent.ConflictedVms))) && ((this.ConflictedHosts == null && hostWwnConflictEvent.ConflictedHosts == null) || (this.ConflictedHosts != null && hostWwnConflictEvent.ConflictedHosts != null && Enumerable.SequenceEqual(this.ConflictedHosts, hostWwnConflictEvent.ConflictedHosts))) && this.Wwn == hostWwnConflictEvent.Wwn);
        }

        public override bool Equals(object hostWwnConflictEvent)
        {
            return Equals(hostWwnConflictEvent as HostWwnConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVms + "_" + ConflictedHosts + "_" + Wwn).GetHashCode();
        }
    }

    public class HotSnapshotMoveNotSupported : SnapshotCopyNotSupported, IEquatable<HotSnapshotMoveNotSupported>
    {
        public bool Equals(HotSnapshotMoveNotSupported hotSnapshotMoveNotSupported)
        {
            return (hotSnapshotMoveNotSupported != null && base.Equals(hotSnapshotMoveNotSupported));
        }

        public override bool Equals(object hotSnapshotMoveNotSupported)
        {
            return Equals(hotSnapshotMoveNotSupported as HotSnapshotMoveNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class HourlyTaskScheduler : RecurrentTaskScheduler, IEquatable<HourlyTaskScheduler>
    {
        public int Minute { get; set; }

        public bool Equals(HourlyTaskScheduler hourlyTaskScheduler)
        {
            return (hourlyTaskScheduler != null && this.Minute == hourlyTaskScheduler.Minute);
        }

        public override bool Equals(object hourlyTaskScheduler)
        {
            return Equals(hourlyTaskScheduler as HourlyTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Minute).GetHashCode();
        }
    }

    public class HttpFault : VimFault, IEquatable<HttpFault>
    {
        public int StatusCode { get; set; }

        public string StatusMessage { get; set; }

        public bool Equals(HttpFault httpFault)
        {
            return (httpFault != null && this.StatusCode == httpFault.StatusCode && this.StatusMessage == httpFault.StatusMessage);
        }

        public override bool Equals(object httpFault)
        {
            return Equals(httpFault as HttpFault);
        }

        public override int GetHashCode()
        {
            return (StatusCode + "_" + StatusMessage).GetHashCode();
        }
    }

    public class HttpNfcLease : ViewBase, IEquatable<HttpNfcLease>
    {
        public int InitializeProgress { get; set; }

        public int TransferProgress { get; set; }

        public string Mode { get; set; }

        public HttpNfcLeaseCapabilities Capabilities { get; set; }

        public HttpNfcLeaseInfo Info { get; set; }

        public HttpNfcLeaseState State { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public HttpNfcLeaseManifestEntry[] HttpNfcLeaseGetManifest()
        {
            return default(HttpNfcLeaseManifestEntry[]);
        }

        public void HttpNfcLeaseSetManifestChecksumType(KeyValue[] deviceUrlsToChecksumTypes)
        {
        }

        public void HttpNfcLeaseComplete()
        {
        }

        public void HttpNfcLeaseAbort(LocalizedMethodFault fault)
        {
        }

        public void HttpNfcLeaseProgress(int percent)
        {
        }

        public ManagedObjectReference HttpNfcLeasePullFromUrls_Task(HttpNfcLeaseSourceFile[] files)
        {
            return default(ManagedObjectReference);
        }

        public void HttpNfcLeasePullFromUrls(HttpNfcLeaseSourceFile[] files)
        {
        }

        public bool Equals(HttpNfcLease httpNfcLease)
        {
            return (httpNfcLease != null && this.InitializeProgress == httpNfcLease.InitializeProgress && this.TransferProgress == httpNfcLease.TransferProgress && this.Mode == httpNfcLease.Mode && ((this.Capabilities == null && httpNfcLease.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(httpNfcLease.Capabilities))) && ((this.Info == null && httpNfcLease.Info == null) || (this.Info != null && this.Info.Equals(httpNfcLease.Info))) && this.State == httpNfcLease.State && ((this.Error == null && httpNfcLease.Error == null) || (this.Error != null && this.Error.Equals(httpNfcLease.Error))));
        }

        public override bool Equals(object httpNfcLease)
        {
            return Equals(httpNfcLease as HttpNfcLease);
        }

        public override int GetHashCode()
        {
            return (InitializeProgress + "_" + TransferProgress + "_" + Mode + "_" + Capabilities + "_" + Info + "_" + State + "_" + Error).GetHashCode();
        }
    }

    public class HttpNfcLeaseCapabilities : DynamicData, IEquatable<HttpNfcLeaseCapabilities>
    {
        public bool PullModeSupported { get; set; }

        public bool CorsSupported { get; set; }

        public bool Equals(HttpNfcLeaseCapabilities httpNfcLeaseCapabilities)
        {
            return (httpNfcLeaseCapabilities != null && this.PullModeSupported == httpNfcLeaseCapabilities.PullModeSupported && this.CorsSupported == httpNfcLeaseCapabilities.CorsSupported);
        }

        public override bool Equals(object httpNfcLeaseCapabilities)
        {
            return Equals(httpNfcLeaseCapabilities as HttpNfcLeaseCapabilities);
        }

        public override int GetHashCode()
        {
            return (PullModeSupported + "_" + CorsSupported).GetHashCode();
        }
    }

    public class HttpNfcLeaseDatastoreLeaseInfo : DynamicData, IEquatable<HttpNfcLeaseDatastoreLeaseInfo>
    {
        public string DatastoreKey { get; set; }

        public HttpNfcLeaseHostInfo[] Hosts { get; set; }

        public bool Equals(HttpNfcLeaseDatastoreLeaseInfo httpNfcLeaseDatastoreLeaseInfo)
        {
            return (httpNfcLeaseDatastoreLeaseInfo != null && this.DatastoreKey == httpNfcLeaseDatastoreLeaseInfo.DatastoreKey && ((this.Hosts == null && httpNfcLeaseDatastoreLeaseInfo.Hosts == null) || (this.Hosts != null && httpNfcLeaseDatastoreLeaseInfo.Hosts != null && Enumerable.SequenceEqual(this.Hosts, httpNfcLeaseDatastoreLeaseInfo.Hosts))));
        }

        public override bool Equals(object httpNfcLeaseDatastoreLeaseInfo)
        {
            return Equals(httpNfcLeaseDatastoreLeaseInfo as HttpNfcLeaseDatastoreLeaseInfo);
        }

        public override int GetHashCode()
        {
            return (DatastoreKey + "_" + Hosts).GetHashCode();
        }
    }

    public class HttpNfcLeaseDeviceUrl : DynamicData, IEquatable<HttpNfcLeaseDeviceUrl>
    {
        public string Key { get; set; }

        public string ImportKey { get; set; }

        public string Url { get; set; }

        public string SslThumbprint { get; set; }

        public bool? Disk { get; set; }

        public string TargetId { get; set; }

        public string DatastoreKey { get; set; }

        public long? FileSize { get; set; }

        public bool Equals(HttpNfcLeaseDeviceUrl httpNfcLeaseDeviceUrl)
        {
            return (httpNfcLeaseDeviceUrl != null && this.Key == httpNfcLeaseDeviceUrl.Key && this.ImportKey == httpNfcLeaseDeviceUrl.ImportKey && this.Url == httpNfcLeaseDeviceUrl.Url && this.SslThumbprint == httpNfcLeaseDeviceUrl.SslThumbprint && ((this.Disk == null && httpNfcLeaseDeviceUrl.Disk == null) || (this.Disk != null && this.Disk.Equals(httpNfcLeaseDeviceUrl.Disk))) && this.TargetId == httpNfcLeaseDeviceUrl.TargetId && this.DatastoreKey == httpNfcLeaseDeviceUrl.DatastoreKey && ((this.FileSize == null && httpNfcLeaseDeviceUrl.FileSize == null) || (this.FileSize != null && this.FileSize.Equals(httpNfcLeaseDeviceUrl.FileSize))));
        }

        public override bool Equals(object httpNfcLeaseDeviceUrl)
        {
            return Equals(httpNfcLeaseDeviceUrl as HttpNfcLeaseDeviceUrl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ImportKey + "_" + Url + "_" + SslThumbprint + "_" + Disk + "_" + TargetId + "_" + DatastoreKey + "_" + FileSize).GetHashCode();
        }
    }

    public class HttpNfcLeaseHostInfo : DynamicData, IEquatable<HttpNfcLeaseHostInfo>
    {
        public string Url { get; set; }

        public string SslThumbprint { get; set; }

        public bool Equals(HttpNfcLeaseHostInfo httpNfcLeaseHostInfo)
        {
            return (httpNfcLeaseHostInfo != null && this.Url == httpNfcLeaseHostInfo.Url && this.SslThumbprint == httpNfcLeaseHostInfo.SslThumbprint);
        }

        public override bool Equals(object httpNfcLeaseHostInfo)
        {
            return Equals(httpNfcLeaseHostInfo as HttpNfcLeaseHostInfo);
        }

        public override int GetHashCode()
        {
            return (Url + "_" + SslThumbprint).GetHashCode();
        }
    }

    public class HttpNfcLeaseInfo : DynamicData, IEquatable<HttpNfcLeaseInfo>
    {
        public ManagedObjectReference Lease { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public HttpNfcLeaseDeviceUrl[] DeviceUrl { get; set; }

        public long TotalDiskCapacityInKB { get; set; }

        public int LeaseTimeout { get; set; }

        public HttpNfcLeaseDatastoreLeaseInfo[] HostMap { get; set; }

        public HttpNfcLeaseInfo_LinkedView LinkedView { get; set; }

        public bool Equals(HttpNfcLeaseInfo httpNfcLeaseInfo)
        {
            return (httpNfcLeaseInfo != null && ((this.Lease == null && httpNfcLeaseInfo.Lease == null) || (this.Lease != null && this.Lease.Equals(httpNfcLeaseInfo.Lease))) && ((this.Entity == null && httpNfcLeaseInfo.Entity == null) || (this.Entity != null && this.Entity.Equals(httpNfcLeaseInfo.Entity))) && ((this.DeviceUrl == null && httpNfcLeaseInfo.DeviceUrl == null) || (this.DeviceUrl != null && httpNfcLeaseInfo.DeviceUrl != null && Enumerable.SequenceEqual(this.DeviceUrl, httpNfcLeaseInfo.DeviceUrl))) && this.TotalDiskCapacityInKB == httpNfcLeaseInfo.TotalDiskCapacityInKB && this.LeaseTimeout == httpNfcLeaseInfo.LeaseTimeout && ((this.HostMap == null && httpNfcLeaseInfo.HostMap == null) || (this.HostMap != null && httpNfcLeaseInfo.HostMap != null && Enumerable.SequenceEqual(this.HostMap, httpNfcLeaseInfo.HostMap))) && ((this.LinkedView == null && httpNfcLeaseInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(httpNfcLeaseInfo.LinkedView))));
        }

        public override bool Equals(object httpNfcLeaseInfo)
        {
            return Equals(httpNfcLeaseInfo as HttpNfcLeaseInfo);
        }

        public override int GetHashCode()
        {
            return (Lease + "_" + Entity + "_" + DeviceUrl + "_" + TotalDiskCapacityInKB + "_" + LeaseTimeout + "_" + HostMap + "_" + LinkedView).GetHashCode();
        }
    }

    public class HttpNfcLeaseInfo_LinkedView : IEquatable<HttpNfcLeaseInfo_LinkedView>
    {
        public HttpNfcLease Lease { get; set; }

        public ManagedEntity Entity { get; set; }

        public bool Equals(HttpNfcLeaseInfo_LinkedView httpNfcLeaseInfo_LinkedView)
        {
            return (httpNfcLeaseInfo_LinkedView != null && ((this.Lease == null && httpNfcLeaseInfo_LinkedView.Lease == null) || (this.Lease != null && this.Lease.Equals(httpNfcLeaseInfo_LinkedView.Lease))) && ((this.Entity == null && httpNfcLeaseInfo_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(httpNfcLeaseInfo_LinkedView.Entity))));
        }

        public override bool Equals(object httpNfcLeaseInfo_LinkedView)
        {
            return Equals(httpNfcLeaseInfo_LinkedView as HttpNfcLeaseInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Lease + "_" + Entity).GetHashCode();
        }
    }

    public class HttpNfcLeaseManifestEntry : DynamicData, IEquatable<HttpNfcLeaseManifestEntry>
    {
        public string Key { get; set; }

        public string Sha1 { get; set; }

        public string Checksum { get; set; }

        public string ChecksumType { get; set; }

        public long Size { get; set; }

        public bool Disk { get; set; }

        public long? Capacity { get; set; }

        public long? PopulatedSize { get; set; }

        public bool Equals(HttpNfcLeaseManifestEntry httpNfcLeaseManifestEntry)
        {
            return (httpNfcLeaseManifestEntry != null && this.Key == httpNfcLeaseManifestEntry.Key && this.Sha1 == httpNfcLeaseManifestEntry.Sha1 && this.Checksum == httpNfcLeaseManifestEntry.Checksum && this.ChecksumType == httpNfcLeaseManifestEntry.ChecksumType && this.Size == httpNfcLeaseManifestEntry.Size && this.Disk == httpNfcLeaseManifestEntry.Disk && ((this.Capacity == null && httpNfcLeaseManifestEntry.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(httpNfcLeaseManifestEntry.Capacity))) && ((this.PopulatedSize == null && httpNfcLeaseManifestEntry.PopulatedSize == null) || (this.PopulatedSize != null && this.PopulatedSize.Equals(httpNfcLeaseManifestEntry.PopulatedSize))));
        }

        public override bool Equals(object httpNfcLeaseManifestEntry)
        {
            return Equals(httpNfcLeaseManifestEntry as HttpNfcLeaseManifestEntry);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Sha1 + "_" + Checksum + "_" + ChecksumType + "_" + Size + "_" + Disk + "_" + Capacity + "_" + PopulatedSize).GetHashCode();
        }
    }

    public class HttpNfcLeaseSourceFile : DynamicData, IEquatable<HttpNfcLeaseSourceFile>
    {
        public string TargetDeviceId { get; set; }

        public string Url { get; set; }

        public string MemberName { get; set; }

        public bool Create { get; set; }

        public string SslThumbprint { get; set; }

        public KeyValue[] HttpHeaders { get; set; }

        public long? Size { get; set; }

        public bool Equals(HttpNfcLeaseSourceFile httpNfcLeaseSourceFile)
        {
            return (httpNfcLeaseSourceFile != null && this.TargetDeviceId == httpNfcLeaseSourceFile.TargetDeviceId && this.Url == httpNfcLeaseSourceFile.Url && this.MemberName == httpNfcLeaseSourceFile.MemberName && this.Create == httpNfcLeaseSourceFile.Create && this.SslThumbprint == httpNfcLeaseSourceFile.SslThumbprint && ((this.HttpHeaders == null && httpNfcLeaseSourceFile.HttpHeaders == null) || (this.HttpHeaders != null && httpNfcLeaseSourceFile.HttpHeaders != null && Enumerable.SequenceEqual(this.HttpHeaders, httpNfcLeaseSourceFile.HttpHeaders))) && ((this.Size == null && httpNfcLeaseSourceFile.Size == null) || (this.Size != null && this.Size.Equals(httpNfcLeaseSourceFile.Size))));
        }

        public override bool Equals(object httpNfcLeaseSourceFile)
        {
            return Equals(httpNfcLeaseSourceFile as HttpNfcLeaseSourceFile);
        }

        public override int GetHashCode()
        {
            return (TargetDeviceId + "_" + Url + "_" + MemberName + "_" + Create + "_" + SslThumbprint + "_" + HttpHeaders + "_" + Size).GetHashCode();
        }
    }

    public class ID : DynamicData, IEquatable<ID>
    {
        public string Id { get; set; }

        public bool Equals(ID iD)
        {
            return (iD != null && this.Id == iD.Id);
        }

        public override bool Equals(object iD)
        {
            return Equals(iD as ID);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class IDEDiskNotSupported : DiskNotSupported, IEquatable<IDEDiskNotSupported>
    {
        public bool Equals(IDEDiskNotSupported iDEDiskNotSupported)
        {
            return (iDEDiskNotSupported != null && base.Equals(iDEDiskNotSupported));
        }

        public override bool Equals(object iDEDiskNotSupported)
        {
            return Equals(iDEDiskNotSupported as IDEDiskNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ImportHostAddFailure : DvsFault, IEquatable<ImportHostAddFailure>
    {
        public string[] HostIp { get; set; }

        public bool Equals(ImportHostAddFailure importHostAddFailure)
        {
            return (importHostAddFailure != null && ((this.HostIp == null && importHostAddFailure.HostIp == null) || (this.HostIp != null && importHostAddFailure.HostIp != null && Enumerable.SequenceEqual(this.HostIp, importHostAddFailure.HostIp))));
        }

        public override bool Equals(object importHostAddFailure)
        {
            return Equals(importHostAddFailure as ImportHostAddFailure);
        }

        public override int GetHashCode()
        {
            return (HostIp).GetHashCode();
        }
    }

    public class ImportOperationBulkFault : DvsFault, IEquatable<ImportOperationBulkFault>
    {
        public ImportOperationBulkFaultFaultOnImport[] ImportFaults { get; set; }

        public bool Equals(ImportOperationBulkFault importOperationBulkFault)
        {
            return (importOperationBulkFault != null && ((this.ImportFaults == null && importOperationBulkFault.ImportFaults == null) || (this.ImportFaults != null && importOperationBulkFault.ImportFaults != null && Enumerable.SequenceEqual(this.ImportFaults, importOperationBulkFault.ImportFaults))));
        }

        public override bool Equals(object importOperationBulkFault)
        {
            return Equals(importOperationBulkFault as ImportOperationBulkFault);
        }

        public override int GetHashCode()
        {
            return (ImportFaults).GetHashCode();
        }
    }

    public class ImportOperationBulkFaultFaultOnImport : DynamicData, IEquatable<ImportOperationBulkFaultFaultOnImport>
    {
        public string EntityType { get; set; }

        public string Key { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(ImportOperationBulkFaultFaultOnImport importOperationBulkFaultFaultOnImport)
        {
            return (importOperationBulkFaultFaultOnImport != null && this.EntityType == importOperationBulkFaultFaultOnImport.EntityType && this.Key == importOperationBulkFaultFaultOnImport.Key && ((this.Fault == null && importOperationBulkFaultFaultOnImport.Fault == null) || (this.Fault != null && this.Fault.Equals(importOperationBulkFaultFaultOnImport.Fault))));
        }

        public override bool Equals(object importOperationBulkFaultFaultOnImport)
        {
            return Equals(importOperationBulkFaultFaultOnImport as ImportOperationBulkFaultFaultOnImport);
        }

        public override int GetHashCode()
        {
            return (EntityType + "_" + Key + "_" + Fault).GetHashCode();
        }
    }

    public class ImportSpec : DynamicData, IEquatable<ImportSpec>
    {
        public VAppEntityConfigInfo EntityConfig { get; set; }

        public OvfConsumerOstNode InstantiationOst { get; set; }

        public bool Equals(ImportSpec importSpec)
        {
            return (importSpec != null && ((this.EntityConfig == null && importSpec.EntityConfig == null) || (this.EntityConfig != null && this.EntityConfig.Equals(importSpec.EntityConfig))) && ((this.InstantiationOst == null && importSpec.InstantiationOst == null) || (this.InstantiationOst != null && this.InstantiationOst.Equals(importSpec.InstantiationOst))));
        }

        public override bool Equals(object importSpec)
        {
            return Equals(importSpec as ImportSpec);
        }

        public override int GetHashCode()
        {
            return (EntityConfig + "_" + InstantiationOst).GetHashCode();
        }
    }

    public class InaccessibleDatastore : InvalidDatastore, IEquatable<InaccessibleDatastore>
    {
        public string Detail { get; set; }

        public new InaccessibleDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(InaccessibleDatastore inaccessibleDatastore)
        {
            return (inaccessibleDatastore != null && this.Detail == inaccessibleDatastore.Detail && ((this.LinkedView == null && inaccessibleDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(inaccessibleDatastore.LinkedView))));
        }

        public override bool Equals(object inaccessibleDatastore)
        {
            return Equals(inaccessibleDatastore as InaccessibleDatastore);
        }

        public override int GetHashCode()
        {
            return (Detail + "_" + LinkedView).GetHashCode();
        }
    }

    public class InaccessibleDatastore_LinkedView : InvalidDatastore_LinkedView, IEquatable<InaccessibleDatastore_LinkedView>
    {
        public bool Equals(InaccessibleDatastore_LinkedView inaccessibleDatastore_LinkedView)
        {
            return (inaccessibleDatastore_LinkedView != null && base.Equals(inaccessibleDatastore_LinkedView));
        }

        public override bool Equals(object inaccessibleDatastore_LinkedView)
        {
            return Equals(inaccessibleDatastore_LinkedView as InaccessibleDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InaccessibleFTMetadataDatastore : InaccessibleDatastore, IEquatable<InaccessibleFTMetadataDatastore>
    {
        public new InaccessibleFTMetadataDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(InaccessibleFTMetadataDatastore inaccessibleFTMetadataDatastore)
        {
            return (inaccessibleFTMetadataDatastore != null && ((this.LinkedView == null && inaccessibleFTMetadataDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(inaccessibleFTMetadataDatastore.LinkedView))));
        }

        public override bool Equals(object inaccessibleFTMetadataDatastore)
        {
            return Equals(inaccessibleFTMetadataDatastore as InaccessibleFTMetadataDatastore);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class InaccessibleFTMetadataDatastore_LinkedView : InaccessibleDatastore_LinkedView, IEquatable<InaccessibleFTMetadataDatastore_LinkedView>
    {
        public bool Equals(InaccessibleFTMetadataDatastore_LinkedView inaccessibleFTMetadataDatastore_LinkedView)
        {
            return (inaccessibleFTMetadataDatastore_LinkedView != null && base.Equals(inaccessibleFTMetadataDatastore_LinkedView));
        }

        public override bool Equals(object inaccessibleFTMetadataDatastore_LinkedView)
        {
            return Equals(inaccessibleFTMetadataDatastore_LinkedView as InaccessibleFTMetadataDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InaccessibleVFlashSource : VimFault, IEquatable<InaccessibleVFlashSource>
    {
        public string HostName { get; set; }

        public bool Equals(InaccessibleVFlashSource inaccessibleVFlashSource)
        {
            return (inaccessibleVFlashSource != null && this.HostName == inaccessibleVFlashSource.HostName);
        }

        public override bool Equals(object inaccessibleVFlashSource)
        {
            return Equals(inaccessibleVFlashSource as InaccessibleVFlashSource);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class IncompatibleDefaultDevice : MigrationFault, IEquatable<IncompatibleDefaultDevice>
    {
        public string Device { get; set; }

        public bool Equals(IncompatibleDefaultDevice incompatibleDefaultDevice)
        {
            return (incompatibleDefaultDevice != null && this.Device == incompatibleDefaultDevice.Device);
        }

        public override bool Equals(object incompatibleDefaultDevice)
        {
            return Equals(incompatibleDefaultDevice as IncompatibleDefaultDevice);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class IncompatibleHostForFtSecondary : VmFaultToleranceIssue, IEquatable<IncompatibleHostForFtSecondary>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public IncompatibleHostForFtSecondary_LinkedView LinkedView { get; set; }

        public bool Equals(IncompatibleHostForFtSecondary incompatibleHostForFtSecondary)
        {
            return (incompatibleHostForFtSecondary != null && ((this.Host == null && incompatibleHostForFtSecondary.Host == null) || (this.Host != null && this.Host.Equals(incompatibleHostForFtSecondary.Host))) && ((this.Error == null && incompatibleHostForFtSecondary.Error == null) || (this.Error != null && incompatibleHostForFtSecondary.Error != null && Enumerable.SequenceEqual(this.Error, incompatibleHostForFtSecondary.Error))) && ((this.LinkedView == null && incompatibleHostForFtSecondary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(incompatibleHostForFtSecondary.LinkedView))));
        }

        public override bool Equals(object incompatibleHostForFtSecondary)
        {
            return Equals(incompatibleHostForFtSecondary as IncompatibleHostForFtSecondary);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class IncompatibleHostForFtSecondary_LinkedView : IEquatable<IncompatibleHostForFtSecondary_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(IncompatibleHostForFtSecondary_LinkedView incompatibleHostForFtSecondary_LinkedView)
        {
            return (incompatibleHostForFtSecondary_LinkedView != null && ((this.Host == null && incompatibleHostForFtSecondary_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(incompatibleHostForFtSecondary_LinkedView.Host))));
        }

        public override bool Equals(object incompatibleHostForFtSecondary_LinkedView)
        {
            return Equals(incompatibleHostForFtSecondary_LinkedView as IncompatibleHostForFtSecondary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class IncompatibleHostForVmReplication : ReplicationFault, IEquatable<IncompatibleHostForVmReplication>
    {
        public string VmName { get; set; }

        public string HostName { get; set; }

        public string Reason { get; set; }

        public bool Equals(IncompatibleHostForVmReplication incompatibleHostForVmReplication)
        {
            return (incompatibleHostForVmReplication != null && this.VmName == incompatibleHostForVmReplication.VmName && this.HostName == incompatibleHostForVmReplication.HostName && this.Reason == incompatibleHostForVmReplication.Reason);
        }

        public override bool Equals(object incompatibleHostForVmReplication)
        {
            return Equals(incompatibleHostForVmReplication as IncompatibleHostForVmReplication);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + HostName + "_" + Reason).GetHashCode();
        }
    }

    public class IncompatibleSetting : InvalidArgument, IEquatable<IncompatibleSetting>
    {
        public string ConflictingProperty { get; set; }

        public bool Equals(IncompatibleSetting incompatibleSetting)
        {
            return (incompatibleSetting != null && this.ConflictingProperty == incompatibleSetting.ConflictingProperty);
        }

        public override bool Equals(object incompatibleSetting)
        {
            return Equals(incompatibleSetting as IncompatibleSetting);
        }

        public override int GetHashCode()
        {
            return (ConflictingProperty).GetHashCode();
        }
    }

    public class IncorrectFileType : FileFault, IEquatable<IncorrectFileType>
    {
        public bool Equals(IncorrectFileType incorrectFileType)
        {
            return (incorrectFileType != null && base.Equals(incorrectFileType));
        }

        public override bool Equals(object incorrectFileType)
        {
            return Equals(incorrectFileType as IncorrectFileType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IncorrectHostInformation : NotEnoughLicenses, IEquatable<IncorrectHostInformation>
    {
        public bool Equals(IncorrectHostInformation incorrectHostInformation)
        {
            return (incorrectHostInformation != null && base.Equals(incorrectHostInformation));
        }

        public override bool Equals(object incorrectHostInformation)
        {
            return Equals(incorrectHostInformation as IncorrectHostInformation);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IncorrectHostInformationEvent : LicenseEvent, IEquatable<IncorrectHostInformationEvent>
    {
        public bool Equals(IncorrectHostInformationEvent incorrectHostInformationEvent)
        {
            return (incorrectHostInformationEvent != null && base.Equals(incorrectHostInformationEvent));
        }

        public override bool Equals(object incorrectHostInformationEvent)
        {
            return Equals(incorrectHostInformationEvent as IncorrectHostInformationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IndependentDiskVMotionNotSupported : MigrationFeatureNotSupported, IEquatable<IndependentDiskVMotionNotSupported>
    {
        public new IndependentDiskVMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(IndependentDiskVMotionNotSupported independentDiskVMotionNotSupported)
        {
            return (independentDiskVMotionNotSupported != null && ((this.LinkedView == null && independentDiskVMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(independentDiskVMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object independentDiskVMotionNotSupported)
        {
            return Equals(independentDiskVMotionNotSupported as IndependentDiskVMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class IndependentDiskVMotionNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<IndependentDiskVMotionNotSupported_LinkedView>
    {
        public bool Equals(IndependentDiskVMotionNotSupported_LinkedView independentDiskVMotionNotSupported_LinkedView)
        {
            return (independentDiskVMotionNotSupported_LinkedView != null && base.Equals(independentDiskVMotionNotSupported_LinkedView));
        }

        public override bool Equals(object independentDiskVMotionNotSupported_LinkedView)
        {
            return Equals(independentDiskVMotionNotSupported_LinkedView as IndependentDiskVMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InfoUpgradeEvent : UpgradeEvent, IEquatable<InfoUpgradeEvent>
    {
        public bool Equals(InfoUpgradeEvent infoUpgradeEvent)
        {
            return (infoUpgradeEvent != null && base.Equals(infoUpgradeEvent));
        }

        public override bool Equals(object infoUpgradeEvent)
        {
            return Equals(infoUpgradeEvent as InfoUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InheritablePolicy : DynamicData, IEquatable<InheritablePolicy>
    {
        public bool Inherited { get; set; }

        public bool Equals(InheritablePolicy inheritablePolicy)
        {
            return (inheritablePolicy != null && this.Inherited == inheritablePolicy.Inherited);
        }

        public override bool Equals(object inheritablePolicy)
        {
            return Equals(inheritablePolicy as InheritablePolicy);
        }

        public override int GetHashCode()
        {
            return (Inherited).GetHashCode();
        }
    }

    public class InsufficientAgentVmsDeployed : InsufficientResourcesFault, IEquatable<InsufficientAgentVmsDeployed>
    {
        public string HostName { get; set; }

        public int RequiredNumAgentVms { get; set; }

        public int CurrentNumAgentVms { get; set; }

        public bool Equals(InsufficientAgentVmsDeployed insufficientAgentVmsDeployed)
        {
            return (insufficientAgentVmsDeployed != null && this.HostName == insufficientAgentVmsDeployed.HostName && this.RequiredNumAgentVms == insufficientAgentVmsDeployed.RequiredNumAgentVms && this.CurrentNumAgentVms == insufficientAgentVmsDeployed.CurrentNumAgentVms);
        }

        public override bool Equals(object insufficientAgentVmsDeployed)
        {
            return Equals(insufficientAgentVmsDeployed as InsufficientAgentVmsDeployed);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + RequiredNumAgentVms + "_" + CurrentNumAgentVms).GetHashCode();
        }
    }

    public class InsufficientCpuResourcesFault : InsufficientResourcesFault, IEquatable<InsufficientCpuResourcesFault>
    {
        public long Unreserved { get; set; }

        public long Requested { get; set; }

        public bool Equals(InsufficientCpuResourcesFault insufficientCpuResourcesFault)
        {
            return (insufficientCpuResourcesFault != null && this.Unreserved == insufficientCpuResourcesFault.Unreserved && this.Requested == insufficientCpuResourcesFault.Requested);
        }

        public override bool Equals(object insufficientCpuResourcesFault)
        {
            return Equals(insufficientCpuResourcesFault as InsufficientCpuResourcesFault);
        }

        public override int GetHashCode()
        {
            return (Unreserved + "_" + Requested).GetHashCode();
        }
    }

    public class InsufficientDisks : VsanDiskFault, IEquatable<InsufficientDisks>
    {
        public bool Equals(InsufficientDisks insufficientDisks)
        {
            return (insufficientDisks != null && base.Equals(insufficientDisks));
        }

        public override bool Equals(object insufficientDisks)
        {
            return Equals(insufficientDisks as InsufficientDisks);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientFailoverResourcesEvent : ClusterEvent, IEquatable<InsufficientFailoverResourcesEvent>
    {
        public bool Equals(InsufficientFailoverResourcesEvent insufficientFailoverResourcesEvent)
        {
            return (insufficientFailoverResourcesEvent != null && base.Equals(insufficientFailoverResourcesEvent));
        }

        public override bool Equals(object insufficientFailoverResourcesEvent)
        {
            return Equals(insufficientFailoverResourcesEvent as InsufficientFailoverResourcesEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientFailoverResourcesFault : InsufficientResourcesFault, IEquatable<InsufficientFailoverResourcesFault>
    {
        public bool Equals(InsufficientFailoverResourcesFault insufficientFailoverResourcesFault)
        {
            return (insufficientFailoverResourcesFault != null && base.Equals(insufficientFailoverResourcesFault));
        }

        public override bool Equals(object insufficientFailoverResourcesFault)
        {
            return Equals(insufficientFailoverResourcesFault as InsufficientFailoverResourcesFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientGraphicsResourcesFault : InsufficientResourcesFault, IEquatable<InsufficientGraphicsResourcesFault>
    {
        public bool Equals(InsufficientGraphicsResourcesFault insufficientGraphicsResourcesFault)
        {
            return (insufficientGraphicsResourcesFault != null && base.Equals(insufficientGraphicsResourcesFault));
        }

        public override bool Equals(object insufficientGraphicsResourcesFault)
        {
            return Equals(insufficientGraphicsResourcesFault as InsufficientGraphicsResourcesFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientHostCapacityFault : InsufficientResourcesFault, IEquatable<InsufficientHostCapacityFault>
    {
        public ManagedObjectReference Host { get; set; }

        public InsufficientHostCapacityFault_LinkedView LinkedView { get; set; }

        public bool Equals(InsufficientHostCapacityFault insufficientHostCapacityFault)
        {
            return (insufficientHostCapacityFault != null && ((this.Host == null && insufficientHostCapacityFault.Host == null) || (this.Host != null && this.Host.Equals(insufficientHostCapacityFault.Host))) && ((this.LinkedView == null && insufficientHostCapacityFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(insufficientHostCapacityFault.LinkedView))));
        }

        public override bool Equals(object insufficientHostCapacityFault)
        {
            return Equals(insufficientHostCapacityFault as InsufficientHostCapacityFault);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class InsufficientHostCapacityFault_LinkedView : IEquatable<InsufficientHostCapacityFault_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(InsufficientHostCapacityFault_LinkedView insufficientHostCapacityFault_LinkedView)
        {
            return (insufficientHostCapacityFault_LinkedView != null && ((this.Host == null && insufficientHostCapacityFault_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(insufficientHostCapacityFault_LinkedView.Host))));
        }

        public override bool Equals(object insufficientHostCapacityFault_LinkedView)
        {
            return Equals(insufficientHostCapacityFault_LinkedView as InsufficientHostCapacityFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class InsufficientHostCpuCapacityFault : InsufficientHostCapacityFault, IEquatable<InsufficientHostCpuCapacityFault>
    {
        public long Unreserved { get; set; }

        public long Requested { get; set; }

        public new InsufficientHostCpuCapacityFault_LinkedView LinkedView { get; set; }

        public bool Equals(InsufficientHostCpuCapacityFault insufficientHostCpuCapacityFault)
        {
            return (insufficientHostCpuCapacityFault != null && this.Unreserved == insufficientHostCpuCapacityFault.Unreserved && this.Requested == insufficientHostCpuCapacityFault.Requested && ((this.LinkedView == null && insufficientHostCpuCapacityFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(insufficientHostCpuCapacityFault.LinkedView))));
        }

        public override bool Equals(object insufficientHostCpuCapacityFault)
        {
            return Equals(insufficientHostCpuCapacityFault as InsufficientHostCpuCapacityFault);
        }

        public override int GetHashCode()
        {
            return (Unreserved + "_" + Requested + "_" + LinkedView).GetHashCode();
        }
    }

    public class InsufficientHostCpuCapacityFault_LinkedView : InsufficientHostCapacityFault_LinkedView, IEquatable<InsufficientHostCpuCapacityFault_LinkedView>
    {
        public bool Equals(InsufficientHostCpuCapacityFault_LinkedView insufficientHostCpuCapacityFault_LinkedView)
        {
            return (insufficientHostCpuCapacityFault_LinkedView != null && base.Equals(insufficientHostCpuCapacityFault_LinkedView));
        }

        public override bool Equals(object insufficientHostCpuCapacityFault_LinkedView)
        {
            return Equals(insufficientHostCpuCapacityFault_LinkedView as InsufficientHostCpuCapacityFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientHostMemoryCapacityFault : InsufficientHostCapacityFault, IEquatable<InsufficientHostMemoryCapacityFault>
    {
        public long Unreserved { get; set; }

        public long Requested { get; set; }

        public new InsufficientHostMemoryCapacityFault_LinkedView LinkedView { get; set; }

        public bool Equals(InsufficientHostMemoryCapacityFault insufficientHostMemoryCapacityFault)
        {
            return (insufficientHostMemoryCapacityFault != null && this.Unreserved == insufficientHostMemoryCapacityFault.Unreserved && this.Requested == insufficientHostMemoryCapacityFault.Requested && ((this.LinkedView == null && insufficientHostMemoryCapacityFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(insufficientHostMemoryCapacityFault.LinkedView))));
        }

        public override bool Equals(object insufficientHostMemoryCapacityFault)
        {
            return Equals(insufficientHostMemoryCapacityFault as InsufficientHostMemoryCapacityFault);
        }

        public override int GetHashCode()
        {
            return (Unreserved + "_" + Requested + "_" + LinkedView).GetHashCode();
        }
    }

    public class InsufficientHostMemoryCapacityFault_LinkedView : InsufficientHostCapacityFault_LinkedView, IEquatable<InsufficientHostMemoryCapacityFault_LinkedView>
    {
        public bool Equals(InsufficientHostMemoryCapacityFault_LinkedView insufficientHostMemoryCapacityFault_LinkedView)
        {
            return (insufficientHostMemoryCapacityFault_LinkedView != null && base.Equals(insufficientHostMemoryCapacityFault_LinkedView));
        }

        public override bool Equals(object insufficientHostMemoryCapacityFault_LinkedView)
        {
            return Equals(insufficientHostMemoryCapacityFault_LinkedView as InsufficientHostMemoryCapacityFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientMemoryResourcesFault : InsufficientResourcesFault, IEquatable<InsufficientMemoryResourcesFault>
    {
        public long Unreserved { get; set; }

        public long Requested { get; set; }

        public bool Equals(InsufficientMemoryResourcesFault insufficientMemoryResourcesFault)
        {
            return (insufficientMemoryResourcesFault != null && this.Unreserved == insufficientMemoryResourcesFault.Unreserved && this.Requested == insufficientMemoryResourcesFault.Requested);
        }

        public override bool Equals(object insufficientMemoryResourcesFault)
        {
            return Equals(insufficientMemoryResourcesFault as InsufficientMemoryResourcesFault);
        }

        public override int GetHashCode()
        {
            return (Unreserved + "_" + Requested).GetHashCode();
        }
    }

    public class InsufficientNetworkCapacity : InsufficientResourcesFault, IEquatable<InsufficientNetworkCapacity>
    {
        public bool Equals(InsufficientNetworkCapacity insufficientNetworkCapacity)
        {
            return (insufficientNetworkCapacity != null && base.Equals(insufficientNetworkCapacity));
        }

        public override bool Equals(object insufficientNetworkCapacity)
        {
            return Equals(insufficientNetworkCapacity as InsufficientNetworkCapacity);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientNetworkResourcePoolCapacity : InsufficientResourcesFault, IEquatable<InsufficientNetworkResourcePoolCapacity>
    {
        public string DvsName { get; set; }

        public string DvsUuid { get; set; }

        public string ResourcePoolKey { get; set; }

        public long Available { get; set; }

        public long Requested { get; set; }

        public string[] Device { get; set; }

        public bool Equals(InsufficientNetworkResourcePoolCapacity insufficientNetworkResourcePoolCapacity)
        {
            return (insufficientNetworkResourcePoolCapacity != null && this.DvsName == insufficientNetworkResourcePoolCapacity.DvsName && this.DvsUuid == insufficientNetworkResourcePoolCapacity.DvsUuid && this.ResourcePoolKey == insufficientNetworkResourcePoolCapacity.ResourcePoolKey && this.Available == insufficientNetworkResourcePoolCapacity.Available && this.Requested == insufficientNetworkResourcePoolCapacity.Requested && ((this.Device == null && insufficientNetworkResourcePoolCapacity.Device == null) || (this.Device != null && insufficientNetworkResourcePoolCapacity.Device != null && Enumerable.SequenceEqual(this.Device, insufficientNetworkResourcePoolCapacity.Device))));
        }

        public override bool Equals(object insufficientNetworkResourcePoolCapacity)
        {
            return Equals(insufficientNetworkResourcePoolCapacity as InsufficientNetworkResourcePoolCapacity);
        }

        public override int GetHashCode()
        {
            return (DvsName + "_" + DvsUuid + "_" + ResourcePoolKey + "_" + Available + "_" + Requested + "_" + Device).GetHashCode();
        }
    }

    public class InsufficientPerCpuCapacity : InsufficientHostCapacityFault, IEquatable<InsufficientPerCpuCapacity>
    {
        public new InsufficientPerCpuCapacity_LinkedView LinkedView { get; set; }

        public bool Equals(InsufficientPerCpuCapacity insufficientPerCpuCapacity)
        {
            return (insufficientPerCpuCapacity != null && ((this.LinkedView == null && insufficientPerCpuCapacity.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(insufficientPerCpuCapacity.LinkedView))));
        }

        public override bool Equals(object insufficientPerCpuCapacity)
        {
            return Equals(insufficientPerCpuCapacity as InsufficientPerCpuCapacity);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class InsufficientPerCpuCapacity_LinkedView : InsufficientHostCapacityFault_LinkedView, IEquatable<InsufficientPerCpuCapacity_LinkedView>
    {
        public bool Equals(InsufficientPerCpuCapacity_LinkedView insufficientPerCpuCapacity_LinkedView)
        {
            return (insufficientPerCpuCapacity_LinkedView != null && base.Equals(insufficientPerCpuCapacity_LinkedView));
        }

        public override bool Equals(object insufficientPerCpuCapacity_LinkedView)
        {
            return Equals(insufficientPerCpuCapacity_LinkedView as InsufficientPerCpuCapacity_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientResourcesFault : VimFault, IEquatable<InsufficientResourcesFault>
    {
        public bool Equals(InsufficientResourcesFault insufficientResourcesFault)
        {
            return (insufficientResourcesFault != null && base.Equals(insufficientResourcesFault));
        }

        public override bool Equals(object insufficientResourcesFault)
        {
            return Equals(insufficientResourcesFault as InsufficientResourcesFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientStandbyCpuResource : InsufficientStandbyResource, IEquatable<InsufficientStandbyCpuResource>
    {
        public long Available { get; set; }

        public long Requested { get; set; }

        public bool Equals(InsufficientStandbyCpuResource insufficientStandbyCpuResource)
        {
            return (insufficientStandbyCpuResource != null && this.Available == insufficientStandbyCpuResource.Available && this.Requested == insufficientStandbyCpuResource.Requested);
        }

        public override bool Equals(object insufficientStandbyCpuResource)
        {
            return Equals(insufficientStandbyCpuResource as InsufficientStandbyCpuResource);
        }

        public override int GetHashCode()
        {
            return (Available + "_" + Requested).GetHashCode();
        }
    }

    public class InsufficientStandbyMemoryResource : InsufficientStandbyResource, IEquatable<InsufficientStandbyMemoryResource>
    {
        public long Available { get; set; }

        public long Requested { get; set; }

        public bool Equals(InsufficientStandbyMemoryResource insufficientStandbyMemoryResource)
        {
            return (insufficientStandbyMemoryResource != null && this.Available == insufficientStandbyMemoryResource.Available && this.Requested == insufficientStandbyMemoryResource.Requested);
        }

        public override bool Equals(object insufficientStandbyMemoryResource)
        {
            return Equals(insufficientStandbyMemoryResource as InsufficientStandbyMemoryResource);
        }

        public override int GetHashCode()
        {
            return (Available + "_" + Requested).GetHashCode();
        }
    }

    public class InsufficientStandbyResource : InsufficientResourcesFault, IEquatable<InsufficientStandbyResource>
    {
        public bool Equals(InsufficientStandbyResource insufficientStandbyResource)
        {
            return (insufficientStandbyResource != null && base.Equals(insufficientStandbyResource));
        }

        public override bool Equals(object insufficientStandbyResource)
        {
            return Equals(insufficientStandbyResource as InsufficientStandbyResource);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientStorageIops : VimFault, IEquatable<InsufficientStorageIops>
    {
        public long UnreservedIops { get; set; }

        public long RequestedIops { get; set; }

        public string DatastoreName { get; set; }

        public bool Equals(InsufficientStorageIops insufficientStorageIops)
        {
            return (insufficientStorageIops != null && this.UnreservedIops == insufficientStorageIops.UnreservedIops && this.RequestedIops == insufficientStorageIops.RequestedIops && this.DatastoreName == insufficientStorageIops.DatastoreName);
        }

        public override bool Equals(object insufficientStorageIops)
        {
            return Equals(insufficientStorageIops as InsufficientStorageIops);
        }

        public override int GetHashCode()
        {
            return (UnreservedIops + "_" + RequestedIops + "_" + DatastoreName).GetHashCode();
        }
    }

    public class InsufficientStorageSpace : InsufficientResourcesFault, IEquatable<InsufficientStorageSpace>
    {
        public bool Equals(InsufficientStorageSpace insufficientStorageSpace)
        {
            return (insufficientStorageSpace != null && base.Equals(insufficientStorageSpace));
        }

        public override bool Equals(object insufficientStorageSpace)
        {
            return Equals(insufficientStorageSpace as InsufficientStorageSpace);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InsufficientVFlashResourcesFault : InsufficientResourcesFault, IEquatable<InsufficientVFlashResourcesFault>
    {
        public long? FreeSpaceInMB { get; set; }

        public long FreeSpace { get; set; }

        public long? RequestedSpaceInMB { get; set; }

        public long RequestedSpace { get; set; }

        public bool Equals(InsufficientVFlashResourcesFault insufficientVFlashResourcesFault)
        {
            return (insufficientVFlashResourcesFault != null && ((this.FreeSpaceInMB == null && insufficientVFlashResourcesFault.FreeSpaceInMB == null) || (this.FreeSpaceInMB != null && this.FreeSpaceInMB.Equals(insufficientVFlashResourcesFault.FreeSpaceInMB))) && this.FreeSpace == insufficientVFlashResourcesFault.FreeSpace && ((this.RequestedSpaceInMB == null && insufficientVFlashResourcesFault.RequestedSpaceInMB == null) || (this.RequestedSpaceInMB != null && this.RequestedSpaceInMB.Equals(insufficientVFlashResourcesFault.RequestedSpaceInMB))) && this.RequestedSpace == insufficientVFlashResourcesFault.RequestedSpace);
        }

        public override bool Equals(object insufficientVFlashResourcesFault)
        {
            return Equals(insufficientVFlashResourcesFault as InsufficientVFlashResourcesFault);
        }

        public override int GetHashCode()
        {
            return (FreeSpaceInMB + "_" + FreeSpace + "_" + RequestedSpaceInMB + "_" + RequestedSpace).GetHashCode();
        }
    }

    public class IntExpression : NegatableExpression, IEquatable<IntExpression>
    {
        public int? Value { get; set; }

        public bool Equals(IntExpression intExpression)
        {
            return (intExpression != null && ((this.Value == null && intExpression.Value == null) || (this.Value != null && this.Value.Equals(intExpression.Value))));
        }

        public override bool Equals(object intExpression)
        {
            return Equals(intExpression as IntExpression);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class IntOption : OptionType, IEquatable<IntOption>
    {
        public int Min { get; set; }

        public int Max { get; set; }

        public int DefaultValue { get; set; }

        public bool Equals(IntOption intOption)
        {
            return (intOption != null && this.Min == intOption.Min && this.Max == intOption.Max && this.DefaultValue == intOption.DefaultValue);
        }

        public override bool Equals(object intOption)
        {
            return Equals(intOption as IntOption);
        }

        public override int GetHashCode()
        {
            return (Min + "_" + Max + "_" + DefaultValue).GetHashCode();
        }
    }

    public class IntPolicy : InheritablePolicy, IEquatable<IntPolicy>
    {
        public int? Value { get; set; }

        public bool Equals(IntPolicy intPolicy)
        {
            return (intPolicy != null && ((this.Value == null && intPolicy.Value == null) || (this.Value != null && this.Value.Equals(intPolicy.Value))));
        }

        public override bool Equals(object intPolicy)
        {
            return Equals(intPolicy as IntPolicy);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class InUseFeatureManipulationDisallowed : NotEnoughLicenses, IEquatable<InUseFeatureManipulationDisallowed>
    {
        public bool Equals(InUseFeatureManipulationDisallowed inUseFeatureManipulationDisallowed)
        {
            return (inUseFeatureManipulationDisallowed != null && base.Equals(inUseFeatureManipulationDisallowed));
        }

        public override bool Equals(object inUseFeatureManipulationDisallowed)
        {
            return Equals(inUseFeatureManipulationDisallowed as InUseFeatureManipulationDisallowed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidAffinitySettingFault : VimFault, IEquatable<InvalidAffinitySettingFault>
    {
        public bool Equals(InvalidAffinitySettingFault invalidAffinitySettingFault)
        {
            return (invalidAffinitySettingFault != null && base.Equals(invalidAffinitySettingFault));
        }

        public override bool Equals(object invalidAffinitySettingFault)
        {
            return Equals(invalidAffinitySettingFault as InvalidAffinitySettingFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidArgument : RuntimeFault, IEquatable<InvalidArgument>
    {
        public string InvalidProperty { get; set; }

        public bool Equals(InvalidArgument invalidArgument)
        {
            return (invalidArgument != null && this.InvalidProperty == invalidArgument.InvalidProperty);
        }

        public override bool Equals(object invalidArgument)
        {
            return Equals(invalidArgument as InvalidArgument);
        }

        public override int GetHashCode()
        {
            return (InvalidProperty).GetHashCode();
        }
    }

    public class InvalidBmcRole : VimFault, IEquatable<InvalidBmcRole>
    {
        public bool Equals(InvalidBmcRole invalidBmcRole)
        {
            return (invalidBmcRole != null && base.Equals(invalidBmcRole));
        }

        public override bool Equals(object invalidBmcRole)
        {
            return Equals(invalidBmcRole as InvalidBmcRole);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidBundle : PlatformConfigFault, IEquatable<InvalidBundle>
    {
        public bool Equals(InvalidBundle invalidBundle)
        {
            return (invalidBundle != null && base.Equals(invalidBundle));
        }

        public override bool Equals(object invalidBundle)
        {
            return Equals(invalidBundle as InvalidBundle);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidCAMCertificate : InvalidCAMServer, IEquatable<InvalidCAMCertificate>
    {
        public bool Equals(InvalidCAMCertificate invalidCAMCertificate)
        {
            return (invalidCAMCertificate != null && base.Equals(invalidCAMCertificate));
        }

        public override bool Equals(object invalidCAMCertificate)
        {
            return Equals(invalidCAMCertificate as InvalidCAMCertificate);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidCAMServer : ActiveDirectoryFault, IEquatable<InvalidCAMServer>
    {
        public string CamServer { get; set; }

        public bool Equals(InvalidCAMServer invalidCAMServer)
        {
            return (invalidCAMServer != null && this.CamServer == invalidCAMServer.CamServer);
        }

        public override bool Equals(object invalidCAMServer)
        {
            return Equals(invalidCAMServer as InvalidCAMServer);
        }

        public override int GetHashCode()
        {
            return (CamServer).GetHashCode();
        }
    }

    public class InvalidClientCertificate : InvalidLogin, IEquatable<InvalidClientCertificate>
    {
        public bool Equals(InvalidClientCertificate invalidClientCertificate)
        {
            return (invalidClientCertificate != null && base.Equals(invalidClientCertificate));
        }

        public override bool Equals(object invalidClientCertificate)
        {
            return Equals(invalidClientCertificate as InvalidClientCertificate);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidCollectorVersion : MethodFault, IEquatable<InvalidCollectorVersion>
    {
        public bool Equals(InvalidCollectorVersion invalidCollectorVersion)
        {
            return (invalidCollectorVersion != null && base.Equals(invalidCollectorVersion));
        }

        public override bool Equals(object invalidCollectorVersion)
        {
            return Equals(invalidCollectorVersion as InvalidCollectorVersion);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidController : InvalidDeviceSpec, IEquatable<InvalidController>
    {
        public int ControllerKey { get; set; }

        public bool Equals(InvalidController invalidController)
        {
            return (invalidController != null && this.ControllerKey == invalidController.ControllerKey);
        }

        public override bool Equals(object invalidController)
        {
            return Equals(invalidController as InvalidController);
        }

        public override int GetHashCode()
        {
            return (ControllerKey).GetHashCode();
        }
    }

    public class InvalidDasConfigArgument : InvalidArgument, IEquatable<InvalidDasConfigArgument>
    {
        public string Entry { get; set; }

        public string ClusterName { get; set; }

        public bool Equals(InvalidDasConfigArgument invalidDasConfigArgument)
        {
            return (invalidDasConfigArgument != null && this.Entry == invalidDasConfigArgument.Entry && this.ClusterName == invalidDasConfigArgument.ClusterName);
        }

        public override bool Equals(object invalidDasConfigArgument)
        {
            return Equals(invalidDasConfigArgument as InvalidDasConfigArgument);
        }

        public override int GetHashCode()
        {
            return (Entry + "_" + ClusterName).GetHashCode();
        }
    }

    public class InvalidDasRestartPriorityForFtVm : InvalidArgument, IEquatable<InvalidDasRestartPriorityForFtVm>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public InvalidDasRestartPriorityForFtVm_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidDasRestartPriorityForFtVm invalidDasRestartPriorityForFtVm)
        {
            return (invalidDasRestartPriorityForFtVm != null && ((this.Vm == null && invalidDasRestartPriorityForFtVm.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidDasRestartPriorityForFtVm.Vm))) && this.VmName == invalidDasRestartPriorityForFtVm.VmName && ((this.LinkedView == null && invalidDasRestartPriorityForFtVm.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidDasRestartPriorityForFtVm.LinkedView))));
        }

        public override bool Equals(object invalidDasRestartPriorityForFtVm)
        {
            return Equals(invalidDasRestartPriorityForFtVm as InvalidDasRestartPriorityForFtVm);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidDasRestartPriorityForFtVm_LinkedView : IEquatable<InvalidDasRestartPriorityForFtVm_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(InvalidDasRestartPriorityForFtVm_LinkedView invalidDasRestartPriorityForFtVm_LinkedView)
        {
            return (invalidDasRestartPriorityForFtVm_LinkedView != null && ((this.Vm == null && invalidDasRestartPriorityForFtVm_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidDasRestartPriorityForFtVm_LinkedView.Vm))));
        }

        public override bool Equals(object invalidDasRestartPriorityForFtVm_LinkedView)
        {
            return Equals(invalidDasRestartPriorityForFtVm_LinkedView as InvalidDasRestartPriorityForFtVm_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class InvalidDatastore : VimFault, IEquatable<InvalidDatastore>
    {
        public ManagedObjectReference Datastore { get; set; }

        public string Name { get; set; }

        public InvalidDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidDatastore invalidDatastore)
        {
            return (invalidDatastore != null && ((this.Datastore == null && invalidDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(invalidDatastore.Datastore))) && this.Name == invalidDatastore.Name && ((this.LinkedView == null && invalidDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidDatastore.LinkedView))));
        }

        public override bool Equals(object invalidDatastore)
        {
            return Equals(invalidDatastore as InvalidDatastore);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Name + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidDatastore_LinkedView : IEquatable<InvalidDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(InvalidDatastore_LinkedView invalidDatastore_LinkedView)
        {
            return (invalidDatastore_LinkedView != null && ((this.Datastore == null && invalidDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(invalidDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object invalidDatastore_LinkedView)
        {
            return Equals(invalidDatastore_LinkedView as InvalidDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class InvalidDatastorePath : InvalidDatastore, IEquatable<InvalidDatastorePath>
    {
        public string DatastorePath { get; set; }

        public new InvalidDatastorePath_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidDatastorePath invalidDatastorePath)
        {
            return (invalidDatastorePath != null && this.DatastorePath == invalidDatastorePath.DatastorePath && ((this.LinkedView == null && invalidDatastorePath.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidDatastorePath.LinkedView))));
        }

        public override bool Equals(object invalidDatastorePath)
        {
            return Equals(invalidDatastorePath as InvalidDatastorePath);
        }

        public override int GetHashCode()
        {
            return (DatastorePath + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidDatastorePath_LinkedView : InvalidDatastore_LinkedView, IEquatable<InvalidDatastorePath_LinkedView>
    {
        public bool Equals(InvalidDatastorePath_LinkedView invalidDatastorePath_LinkedView)
        {
            return (invalidDatastorePath_LinkedView != null && base.Equals(invalidDatastorePath_LinkedView));
        }

        public override bool Equals(object invalidDatastorePath_LinkedView)
        {
            return Equals(invalidDatastorePath_LinkedView as InvalidDatastorePath_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidDatastoreState : InvalidState, IEquatable<InvalidDatastoreState>
    {
        public string DatastoreName { get; set; }

        public bool Equals(InvalidDatastoreState invalidDatastoreState)
        {
            return (invalidDatastoreState != null && this.DatastoreName == invalidDatastoreState.DatastoreName);
        }

        public override bool Equals(object invalidDatastoreState)
        {
            return Equals(invalidDatastoreState as InvalidDatastoreState);
        }

        public override int GetHashCode()
        {
            return (DatastoreName).GetHashCode();
        }
    }

    public class InvalidDeviceBacking : InvalidDeviceSpec, IEquatable<InvalidDeviceBacking>
    {
        public bool Equals(InvalidDeviceBacking invalidDeviceBacking)
        {
            return (invalidDeviceBacking != null && base.Equals(invalidDeviceBacking));
        }

        public override bool Equals(object invalidDeviceBacking)
        {
            return Equals(invalidDeviceBacking as InvalidDeviceBacking);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidDeviceOperation : InvalidDeviceSpec, IEquatable<InvalidDeviceOperation>
    {
        public VirtualDeviceConfigSpecOperation? BadOp { get; set; }

        public VirtualDeviceConfigSpecFileOperation? BadFileOp { get; set; }

        public bool Equals(InvalidDeviceOperation invalidDeviceOperation)
        {
            return (invalidDeviceOperation != null && ((this.BadOp == null && invalidDeviceOperation.BadOp == null) || (this.BadOp != null && this.BadOp.Equals(invalidDeviceOperation.BadOp))) && ((this.BadFileOp == null && invalidDeviceOperation.BadFileOp == null) || (this.BadFileOp != null && this.BadFileOp.Equals(invalidDeviceOperation.BadFileOp))));
        }

        public override bool Equals(object invalidDeviceOperation)
        {
            return Equals(invalidDeviceOperation as InvalidDeviceOperation);
        }

        public override int GetHashCode()
        {
            return (BadOp + "_" + BadFileOp).GetHashCode();
        }
    }

    public class InvalidDeviceSpec : InvalidVmConfig, IEquatable<InvalidDeviceSpec>
    {
        public int DeviceIndex { get; set; }

        public bool Equals(InvalidDeviceSpec invalidDeviceSpec)
        {
            return (invalidDeviceSpec != null && this.DeviceIndex == invalidDeviceSpec.DeviceIndex);
        }

        public override bool Equals(object invalidDeviceSpec)
        {
            return Equals(invalidDeviceSpec as InvalidDeviceSpec);
        }

        public override int GetHashCode()
        {
            return (DeviceIndex).GetHashCode();
        }
    }

    public class InvalidDiskFormat : InvalidFormat, IEquatable<InvalidDiskFormat>
    {
        public bool Equals(InvalidDiskFormat invalidDiskFormat)
        {
            return (invalidDiskFormat != null && base.Equals(invalidDiskFormat));
        }

        public override bool Equals(object invalidDiskFormat)
        {
            return Equals(invalidDiskFormat as InvalidDiskFormat);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidDrsBehaviorForFtVm : InvalidArgument, IEquatable<InvalidDrsBehaviorForFtVm>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public InvalidDrsBehaviorForFtVm_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidDrsBehaviorForFtVm invalidDrsBehaviorForFtVm)
        {
            return (invalidDrsBehaviorForFtVm != null && ((this.Vm == null && invalidDrsBehaviorForFtVm.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidDrsBehaviorForFtVm.Vm))) && this.VmName == invalidDrsBehaviorForFtVm.VmName && ((this.LinkedView == null && invalidDrsBehaviorForFtVm.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidDrsBehaviorForFtVm.LinkedView))));
        }

        public override bool Equals(object invalidDrsBehaviorForFtVm)
        {
            return Equals(invalidDrsBehaviorForFtVm as InvalidDrsBehaviorForFtVm);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidDrsBehaviorForFtVm_LinkedView : IEquatable<InvalidDrsBehaviorForFtVm_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(InvalidDrsBehaviorForFtVm_LinkedView invalidDrsBehaviorForFtVm_LinkedView)
        {
            return (invalidDrsBehaviorForFtVm_LinkedView != null && ((this.Vm == null && invalidDrsBehaviorForFtVm_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidDrsBehaviorForFtVm_LinkedView.Vm))));
        }

        public override bool Equals(object invalidDrsBehaviorForFtVm_LinkedView)
        {
            return Equals(invalidDrsBehaviorForFtVm_LinkedView as InvalidDrsBehaviorForFtVm_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class InvalidEditionEvent : LicenseEvent, IEquatable<InvalidEditionEvent>
    {
        public string Feature { get; set; }

        public bool Equals(InvalidEditionEvent invalidEditionEvent)
        {
            return (invalidEditionEvent != null && this.Feature == invalidEditionEvent.Feature);
        }

        public override bool Equals(object invalidEditionEvent)
        {
            return Equals(invalidEditionEvent as InvalidEditionEvent);
        }

        public override int GetHashCode()
        {
            return (Feature).GetHashCode();
        }
    }

    public class InvalidEditionLicense : NotEnoughLicenses, IEquatable<InvalidEditionLicense>
    {
        public string Feature { get; set; }

        public bool Equals(InvalidEditionLicense invalidEditionLicense)
        {
            return (invalidEditionLicense != null && this.Feature == invalidEditionLicense.Feature);
        }

        public override bool Equals(object invalidEditionLicense)
        {
            return Equals(invalidEditionLicense as InvalidEditionLicense);
        }

        public override int GetHashCode()
        {
            return (Feature).GetHashCode();
        }
    }

    public class InvalidEvent : VimFault, IEquatable<InvalidEvent>
    {
        public bool Equals(InvalidEvent invalidEvent)
        {
            return (invalidEvent != null && base.Equals(invalidEvent));
        }

        public override bool Equals(object invalidEvent)
        {
            return Equals(invalidEvent as InvalidEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidFolder : VimFault, IEquatable<InvalidFolder>
    {
        public ManagedObjectReference Target { get; set; }

        public InvalidFolder_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidFolder invalidFolder)
        {
            return (invalidFolder != null && ((this.Target == null && invalidFolder.Target == null) || (this.Target != null && this.Target.Equals(invalidFolder.Target))) && ((this.LinkedView == null && invalidFolder.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidFolder.LinkedView))));
        }

        public override bool Equals(object invalidFolder)
        {
            return Equals(invalidFolder as InvalidFolder);
        }

        public override int GetHashCode()
        {
            return (Target + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidFolder_LinkedView : IEquatable<InvalidFolder_LinkedView>
    {
        public ManagedEntity Target { get; set; }

        public bool Equals(InvalidFolder_LinkedView invalidFolder_LinkedView)
        {
            return (invalidFolder_LinkedView != null && ((this.Target == null && invalidFolder_LinkedView.Target == null) || (this.Target != null && this.Target.Equals(invalidFolder_LinkedView.Target))));
        }

        public override bool Equals(object invalidFolder_LinkedView)
        {
            return Equals(invalidFolder_LinkedView as InvalidFolder_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Target).GetHashCode();
        }
    }

    public class InvalidFormat : VmConfigFault, IEquatable<InvalidFormat>
    {
        public bool Equals(InvalidFormat invalidFormat)
        {
            return (invalidFormat != null && base.Equals(invalidFormat));
        }

        public override bool Equals(object invalidFormat)
        {
            return Equals(invalidFormat as InvalidFormat);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidGuestLogin : GuestOperationsFault, IEquatable<InvalidGuestLogin>
    {
        public bool Equals(InvalidGuestLogin invalidGuestLogin)
        {
            return (invalidGuestLogin != null && base.Equals(invalidGuestLogin));
        }

        public override bool Equals(object invalidGuestLogin)
        {
            return Equals(invalidGuestLogin as InvalidGuestLogin);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidHostConnectionState : InvalidHostState, IEquatable<InvalidHostConnectionState>
    {
        public new InvalidHostConnectionState_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidHostConnectionState invalidHostConnectionState)
        {
            return (invalidHostConnectionState != null && ((this.LinkedView == null && invalidHostConnectionState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidHostConnectionState.LinkedView))));
        }

        public override bool Equals(object invalidHostConnectionState)
        {
            return Equals(invalidHostConnectionState as InvalidHostConnectionState);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class InvalidHostConnectionState_LinkedView : InvalidHostState_LinkedView, IEquatable<InvalidHostConnectionState_LinkedView>
    {
        public bool Equals(InvalidHostConnectionState_LinkedView invalidHostConnectionState_LinkedView)
        {
            return (invalidHostConnectionState_LinkedView != null && base.Equals(invalidHostConnectionState_LinkedView));
        }

        public override bool Equals(object invalidHostConnectionState_LinkedView)
        {
            return Equals(invalidHostConnectionState_LinkedView as InvalidHostConnectionState_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidHostName : HostConfigFault, IEquatable<InvalidHostName>
    {
        public bool Equals(InvalidHostName invalidHostName)
        {
            return (invalidHostName != null && base.Equals(invalidHostName));
        }

        public override bool Equals(object invalidHostName)
        {
            return Equals(invalidHostName as InvalidHostName);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidHostState : InvalidState, IEquatable<InvalidHostState>
    {
        public InvalidHostState_LinkedView LinkedView { get; set; }

        public ManagedObjectReference Host { get; set; }

        public bool Equals(InvalidHostState invalidHostState)
        {
            return (invalidHostState != null && ((this.LinkedView == null && invalidHostState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidHostState.LinkedView))) && ((this.Host == null && invalidHostState.Host == null) || (this.Host != null && this.Host.Equals(invalidHostState.Host))));
        }

        public override bool Equals(object invalidHostState)
        {
            return Equals(invalidHostState as InvalidHostState);
        }

        public override int GetHashCode()
        {
            return (LinkedView + "_" + Host).GetHashCode();
        }
    }

    public class InvalidHostState_LinkedView : IEquatable<InvalidHostState_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(InvalidHostState_LinkedView invalidHostState_LinkedView)
        {
            return (invalidHostState_LinkedView != null && ((this.Host == null && invalidHostState_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(invalidHostState_LinkedView.Host))));
        }

        public override bool Equals(object invalidHostState_LinkedView)
        {
            return Equals(invalidHostState_LinkedView as InvalidHostState_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class InvalidIndexArgument : InvalidArgument, IEquatable<InvalidIndexArgument>
    {
        public string Key { get; set; }

        public bool Equals(InvalidIndexArgument invalidIndexArgument)
        {
            return (invalidIndexArgument != null && this.Key == invalidIndexArgument.Key);
        }

        public override bool Equals(object invalidIndexArgument)
        {
            return Equals(invalidIndexArgument as InvalidIndexArgument);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class InvalidIpfixConfig : DvsFault, IEquatable<InvalidIpfixConfig>
    {
        public string Property { get; set; }

        public bool Equals(InvalidIpfixConfig invalidIpfixConfig)
        {
            return (invalidIpfixConfig != null && this.Property == invalidIpfixConfig.Property);
        }

        public override bool Equals(object invalidIpfixConfig)
        {
            return Equals(invalidIpfixConfig as InvalidIpfixConfig);
        }

        public override int GetHashCode()
        {
            return (Property).GetHashCode();
        }
    }

    public class InvalidIpmiLoginInfo : VimFault, IEquatable<InvalidIpmiLoginInfo>
    {
        public bool Equals(InvalidIpmiLoginInfo invalidIpmiLoginInfo)
        {
            return (invalidIpmiLoginInfo != null && base.Equals(invalidIpmiLoginInfo));
        }

        public override bool Equals(object invalidIpmiLoginInfo)
        {
            return Equals(invalidIpmiLoginInfo as InvalidIpmiLoginInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidIpmiMacAddress : VimFault, IEquatable<InvalidIpmiMacAddress>
    {
        public string UserProvidedMacAddress { get; set; }

        public string ObservedMacAddress { get; set; }

        public bool Equals(InvalidIpmiMacAddress invalidIpmiMacAddress)
        {
            return (invalidIpmiMacAddress != null && this.UserProvidedMacAddress == invalidIpmiMacAddress.UserProvidedMacAddress && this.ObservedMacAddress == invalidIpmiMacAddress.ObservedMacAddress);
        }

        public override bool Equals(object invalidIpmiMacAddress)
        {
            return Equals(invalidIpmiMacAddress as InvalidIpmiMacAddress);
        }

        public override int GetHashCode()
        {
            return (UserProvidedMacAddress + "_" + ObservedMacAddress).GetHashCode();
        }
    }

    public class InvalidLicense : VimFault, IEquatable<InvalidLicense>
    {
        public string LicenseContent { get; set; }

        public bool Equals(InvalidLicense invalidLicense)
        {
            return (invalidLicense != null && this.LicenseContent == invalidLicense.LicenseContent);
        }

        public override bool Equals(object invalidLicense)
        {
            return Equals(invalidLicense as InvalidLicense);
        }

        public override int GetHashCode()
        {
            return (LicenseContent).GetHashCode();
        }
    }

    public class InvalidLocale : VimFault, IEquatable<InvalidLocale>
    {
        public bool Equals(InvalidLocale invalidLocale)
        {
            return (invalidLocale != null && base.Equals(invalidLocale));
        }

        public override bool Equals(object invalidLocale)
        {
            return Equals(invalidLocale as InvalidLocale);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidLogin : VimFault, IEquatable<InvalidLogin>
    {
        public bool Equals(InvalidLogin invalidLogin)
        {
            return (invalidLogin != null && base.Equals(invalidLogin));
        }

        public override bool Equals(object invalidLogin)
        {
            return Equals(invalidLogin as InvalidLogin);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidName : VimFault, IEquatable<InvalidName>
    {
        public string Name { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public InvalidName_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidName invalidName)
        {
            return (invalidName != null && this.Name == invalidName.Name && ((this.Entity == null && invalidName.Entity == null) || (this.Entity != null && this.Entity.Equals(invalidName.Entity))) && ((this.LinkedView == null && invalidName.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidName.LinkedView))));
        }

        public override bool Equals(object invalidName)
        {
            return Equals(invalidName as InvalidName);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidName_LinkedView : IEquatable<InvalidName_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(InvalidName_LinkedView invalidName_LinkedView)
        {
            return (invalidName_LinkedView != null && ((this.Entity == null && invalidName_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(invalidName_LinkedView.Entity))));
        }

        public override bool Equals(object invalidName_LinkedView)
        {
            return Equals(invalidName_LinkedView as InvalidName_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class InvalidNasCredentials : NasConfigFault, IEquatable<InvalidNasCredentials>
    {
        public string UserName { get; set; }

        public bool Equals(InvalidNasCredentials invalidNasCredentials)
        {
            return (invalidNasCredentials != null && this.UserName == invalidNasCredentials.UserName);
        }

        public override bool Equals(object invalidNasCredentials)
        {
            return Equals(invalidNasCredentials as InvalidNasCredentials);
        }

        public override int GetHashCode()
        {
            return (UserName).GetHashCode();
        }
    }

    public class InvalidNetworkInType : VAppPropertyFault, IEquatable<InvalidNetworkInType>
    {
        public bool Equals(InvalidNetworkInType invalidNetworkInType)
        {
            return (invalidNetworkInType != null && base.Equals(invalidNetworkInType));
        }

        public override bool Equals(object invalidNetworkInType)
        {
            return Equals(invalidNetworkInType as InvalidNetworkInType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidNetworkResource : NasConfigFault, IEquatable<InvalidNetworkResource>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public bool Equals(InvalidNetworkResource invalidNetworkResource)
        {
            return (invalidNetworkResource != null && this.RemoteHost == invalidNetworkResource.RemoteHost && this.RemotePath == invalidNetworkResource.RemotePath);
        }

        public override bool Equals(object invalidNetworkResource)
        {
            return Equals(invalidNetworkResource as InvalidNetworkResource);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath).GetHashCode();
        }
    }

    public class InvalidOperationOnSecondaryVm : VmFaultToleranceIssue, IEquatable<InvalidOperationOnSecondaryVm>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(InvalidOperationOnSecondaryVm invalidOperationOnSecondaryVm)
        {
            return (invalidOperationOnSecondaryVm != null && this.InstanceUuid == invalidOperationOnSecondaryVm.InstanceUuid);
        }

        public override bool Equals(object invalidOperationOnSecondaryVm)
        {
            return Equals(invalidOperationOnSecondaryVm as InvalidOperationOnSecondaryVm);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class InvalidPowerState : InvalidState, IEquatable<InvalidPowerState>
    {
        public VirtualMachinePowerState? RequestedState { get; set; }

        public VirtualMachinePowerState ExistingState { get; set; }

        public bool Equals(InvalidPowerState invalidPowerState)
        {
            return (invalidPowerState != null && ((this.RequestedState == null && invalidPowerState.RequestedState == null) || (this.RequestedState != null && this.RequestedState.Equals(invalidPowerState.RequestedState))) && this.ExistingState == invalidPowerState.ExistingState);
        }

        public override bool Equals(object invalidPowerState)
        {
            return Equals(invalidPowerState as InvalidPowerState);
        }

        public override int GetHashCode()
        {
            return (RequestedState + "_" + ExistingState).GetHashCode();
        }
    }

    public class InvalidPrivilege : VimFault, IEquatable<InvalidPrivilege>
    {
        public string Privilege { get; set; }

        public bool Equals(InvalidPrivilege invalidPrivilege)
        {
            return (invalidPrivilege != null && this.Privilege == invalidPrivilege.Privilege);
        }

        public override bool Equals(object invalidPrivilege)
        {
            return Equals(invalidPrivilege as InvalidPrivilege);
        }

        public override int GetHashCode()
        {
            return (Privilege).GetHashCode();
        }
    }

    public class InvalidProfileReferenceHost : RuntimeFault, IEquatable<InvalidProfileReferenceHost>
    {
        public string Reason { get; set; }

        public ManagedObjectReference Host { get; set; }

        public ManagedObjectReference Profile { get; set; }

        public string ProfileName { get; set; }

        public InvalidProfileReferenceHost_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidProfileReferenceHost invalidProfileReferenceHost)
        {
            return (invalidProfileReferenceHost != null && this.Reason == invalidProfileReferenceHost.Reason && ((this.Host == null && invalidProfileReferenceHost.Host == null) || (this.Host != null && this.Host.Equals(invalidProfileReferenceHost.Host))) && ((this.Profile == null && invalidProfileReferenceHost.Profile == null) || (this.Profile != null && this.Profile.Equals(invalidProfileReferenceHost.Profile))) && this.ProfileName == invalidProfileReferenceHost.ProfileName && ((this.LinkedView == null && invalidProfileReferenceHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidProfileReferenceHost.LinkedView))));
        }

        public override bool Equals(object invalidProfileReferenceHost)
        {
            return Equals(invalidProfileReferenceHost as InvalidProfileReferenceHost);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + Host + "_" + Profile + "_" + ProfileName + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidProfileReferenceHost_LinkedView : IEquatable<InvalidProfileReferenceHost_LinkedView>
    {
        public HostSystem Host { get; set; }

        public Profile Profile { get; set; }

        public bool Equals(InvalidProfileReferenceHost_LinkedView invalidProfileReferenceHost_LinkedView)
        {
            return (invalidProfileReferenceHost_LinkedView != null && ((this.Host == null && invalidProfileReferenceHost_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(invalidProfileReferenceHost_LinkedView.Host))) && ((this.Profile == null && invalidProfileReferenceHost_LinkedView.Profile == null) || (this.Profile != null && this.Profile.Equals(invalidProfileReferenceHost_LinkedView.Profile))));
        }

        public override bool Equals(object invalidProfileReferenceHost_LinkedView)
        {
            return Equals(invalidProfileReferenceHost_LinkedView as InvalidProfileReferenceHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Profile).GetHashCode();
        }
    }

    public class InvalidProperty : MethodFault, IEquatable<InvalidProperty>
    {
        public string Name { get; set; }

        public bool Equals(InvalidProperty invalidProperty)
        {
            return (invalidProperty != null && this.Name == invalidProperty.Name);
        }

        public override bool Equals(object invalidProperty)
        {
            return Equals(invalidProperty as InvalidProperty);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class InvalidPropertyType : VAppPropertyFault, IEquatable<InvalidPropertyType>
    {
        public bool Equals(InvalidPropertyType invalidPropertyType)
        {
            return (invalidPropertyType != null && base.Equals(invalidPropertyType));
        }

        public override bool Equals(object invalidPropertyType)
        {
            return Equals(invalidPropertyType as InvalidPropertyType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidPropertyValue : VAppPropertyFault, IEquatable<InvalidPropertyValue>
    {
        public bool Equals(InvalidPropertyValue invalidPropertyValue)
        {
            return (invalidPropertyValue != null && base.Equals(invalidPropertyValue));
        }

        public override bool Equals(object invalidPropertyValue)
        {
            return Equals(invalidPropertyValue as InvalidPropertyValue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidRequest : RuntimeFault, IEquatable<InvalidRequest>
    {
        public bool Equals(InvalidRequest invalidRequest)
        {
            return (invalidRequest != null && base.Equals(invalidRequest));
        }

        public override bool Equals(object invalidRequest)
        {
            return Equals(invalidRequest as InvalidRequest);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidResourcePoolStructureFault : InsufficientResourcesFault, IEquatable<InvalidResourcePoolStructureFault>
    {
        public bool Equals(InvalidResourcePoolStructureFault invalidResourcePoolStructureFault)
        {
            return (invalidResourcePoolStructureFault != null && base.Equals(invalidResourcePoolStructureFault));
        }

        public override bool Equals(object invalidResourcePoolStructureFault)
        {
            return Equals(invalidResourcePoolStructureFault as InvalidResourcePoolStructureFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidSnapshotFormat : InvalidFormat, IEquatable<InvalidSnapshotFormat>
    {
        public bool Equals(InvalidSnapshotFormat invalidSnapshotFormat)
        {
            return (invalidSnapshotFormat != null && base.Equals(invalidSnapshotFormat));
        }

        public override bool Equals(object invalidSnapshotFormat)
        {
            return Equals(invalidSnapshotFormat as InvalidSnapshotFormat);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidState : VimFault, IEquatable<InvalidState>
    {
        public bool Equals(InvalidState invalidState)
        {
            return (invalidState != null && base.Equals(invalidState));
        }

        public override bool Equals(object invalidState)
        {
            return Equals(invalidState as InvalidState);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class InvalidType : InvalidRequest, IEquatable<InvalidType>
    {
        public string Argument { get; set; }

        public bool Equals(InvalidType invalidType)
        {
            return (invalidType != null && this.Argument == invalidType.Argument);
        }

        public override bool Equals(object invalidType)
        {
            return Equals(invalidType as InvalidType);
        }

        public override int GetHashCode()
        {
            return (Argument).GetHashCode();
        }
    }

    public class InvalidVmConfig : VmConfigFault, IEquatable<InvalidVmConfig>
    {
        public string Property { get; set; }

        public bool Equals(InvalidVmConfig invalidVmConfig)
        {
            return (invalidVmConfig != null && this.Property == invalidVmConfig.Property);
        }

        public override bool Equals(object invalidVmConfig)
        {
            return Equals(invalidVmConfig as InvalidVmConfig);
        }

        public override int GetHashCode()
        {
            return (Property).GetHashCode();
        }
    }

    public class InvalidVmState : InvalidState, IEquatable<InvalidVmState>
    {
        public ManagedObjectReference Vm { get; set; }

        public InvalidVmState_LinkedView LinkedView { get; set; }

        public bool Equals(InvalidVmState invalidVmState)
        {
            return (invalidVmState != null && ((this.Vm == null && invalidVmState.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidVmState.Vm))) && ((this.LinkedView == null && invalidVmState.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(invalidVmState.LinkedView))));
        }

        public override bool Equals(object invalidVmState)
        {
            return Equals(invalidVmState as InvalidVmState);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class InvalidVmState_LinkedView : IEquatable<InvalidVmState_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(InvalidVmState_LinkedView invalidVmState_LinkedView)
        {
            return (invalidVmState_LinkedView != null && ((this.Vm == null && invalidVmState_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(invalidVmState_LinkedView.Vm))));
        }

        public override bool Equals(object invalidVmState_LinkedView)
        {
            return Equals(invalidVmState_LinkedView as InvalidVmState_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class InventoryDescription : DynamicData, IEquatable<InventoryDescription>
    {
        public int NumHosts { get; set; }

        public int NumVirtualMachines { get; set; }

        public int? NumResourcePools { get; set; }

        public int? NumClusters { get; set; }

        public int? NumCpuDev { get; set; }

        public int? NumNetDev { get; set; }

        public int? NumDiskDev { get; set; }

        public int? NumvCpuDev { get; set; }

        public int? NumvNetDev { get; set; }

        public int? NumvDiskDev { get; set; }

        public bool Equals(InventoryDescription inventoryDescription)
        {
            return (inventoryDescription != null && this.NumHosts == inventoryDescription.NumHosts && this.NumVirtualMachines == inventoryDescription.NumVirtualMachines && ((this.NumResourcePools == null && inventoryDescription.NumResourcePools == null) || (this.NumResourcePools != null && this.NumResourcePools.Equals(inventoryDescription.NumResourcePools))) && ((this.NumClusters == null && inventoryDescription.NumClusters == null) || (this.NumClusters != null && this.NumClusters.Equals(inventoryDescription.NumClusters))) && ((this.NumCpuDev == null && inventoryDescription.NumCpuDev == null) || (this.NumCpuDev != null && this.NumCpuDev.Equals(inventoryDescription.NumCpuDev))) && ((this.NumNetDev == null && inventoryDescription.NumNetDev == null) || (this.NumNetDev != null && this.NumNetDev.Equals(inventoryDescription.NumNetDev))) && ((this.NumDiskDev == null && inventoryDescription.NumDiskDev == null) || (this.NumDiskDev != null && this.NumDiskDev.Equals(inventoryDescription.NumDiskDev))) && ((this.NumvCpuDev == null && inventoryDescription.NumvCpuDev == null) || (this.NumvCpuDev != null && this.NumvCpuDev.Equals(inventoryDescription.NumvCpuDev))) && ((this.NumvNetDev == null && inventoryDescription.NumvNetDev == null) || (this.NumvNetDev != null && this.NumvNetDev.Equals(inventoryDescription.NumvNetDev))) && ((this.NumvDiskDev == null && inventoryDescription.NumvDiskDev == null) || (this.NumvDiskDev != null && this.NumvDiskDev.Equals(inventoryDescription.NumvDiskDev))));
        }

        public override bool Equals(object inventoryDescription)
        {
            return Equals(inventoryDescription as InventoryDescription);
        }

        public override int GetHashCode()
        {
            return (NumHosts + "_" + NumVirtualMachines + "_" + NumResourcePools + "_" + NumClusters + "_" + NumCpuDev + "_" + NumNetDev + "_" + NumDiskDev + "_" + NumvCpuDev + "_" + NumvNetDev + "_" + NumvDiskDev).GetHashCode();
        }
    }

    public class InventoryHasStandardAloneHosts : NotEnoughLicenses, IEquatable<InventoryHasStandardAloneHosts>
    {
        public string[] Hosts { get; set; }

        public bool Equals(InventoryHasStandardAloneHosts inventoryHasStandardAloneHosts)
        {
            return (inventoryHasStandardAloneHosts != null && ((this.Hosts == null && inventoryHasStandardAloneHosts.Hosts == null) || (this.Hosts != null && inventoryHasStandardAloneHosts.Hosts != null && Enumerable.SequenceEqual(this.Hosts, inventoryHasStandardAloneHosts.Hosts))));
        }

        public override bool Equals(object inventoryHasStandardAloneHosts)
        {
            return Equals(inventoryHasStandardAloneHosts as InventoryHasStandardAloneHosts);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class InventoryView : ManagedObjectView, IEquatable<InventoryView>
    {
        public ManagedObjectReference[] OpenInventoryViewFolder(ManagedObjectReference[] entity)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference[] CloseInventoryViewFolder(ManagedObjectReference[] entity)
        {
            return default(ManagedObjectReference[]);
        }

        public bool Equals(InventoryView inventoryView)
        {
            return (inventoryView != null && base.Equals(inventoryView));
        }

        public override bool Equals(object inventoryView)
        {
            return Equals(inventoryView as InventoryView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IoFilterHostIssue : DynamicData, IEquatable<IoFilterHostIssue>
    {
        public ManagedObjectReference Host { get; set; }

        public LocalizedMethodFault[] Issue { get; set; }

        public IoFilterHostIssue_LinkedView LinkedView { get; set; }

        public bool Equals(IoFilterHostIssue ioFilterHostIssue)
        {
            return (ioFilterHostIssue != null && ((this.Host == null && ioFilterHostIssue.Host == null) || (this.Host != null && this.Host.Equals(ioFilterHostIssue.Host))) && ((this.Issue == null && ioFilterHostIssue.Issue == null) || (this.Issue != null && ioFilterHostIssue.Issue != null && Enumerable.SequenceEqual(this.Issue, ioFilterHostIssue.Issue))) && ((this.LinkedView == null && ioFilterHostIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ioFilterHostIssue.LinkedView))));
        }

        public override bool Equals(object ioFilterHostIssue)
        {
            return Equals(ioFilterHostIssue as IoFilterHostIssue);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Issue + "_" + LinkedView).GetHashCode();
        }
    }

    public class IoFilterHostIssue_LinkedView : IEquatable<IoFilterHostIssue_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(IoFilterHostIssue_LinkedView ioFilterHostIssue_LinkedView)
        {
            return (ioFilterHostIssue_LinkedView != null && ((this.Host == null && ioFilterHostIssue_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(ioFilterHostIssue_LinkedView.Host))));
        }

        public override bool Equals(object ioFilterHostIssue_LinkedView)
        {
            return Equals(ioFilterHostIssue_LinkedView as IoFilterHostIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class IoFilterInfo : DynamicData, IEquatable<IoFilterInfo>
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string Vendor { get; set; }

        public string Version { get; set; }

        public string Type { get; set; }

        public string Summary { get; set; }

        public string ReleaseDate { get; set; }

        public bool Equals(IoFilterInfo ioFilterInfo)
        {
            return (ioFilterInfo != null && this.Id == ioFilterInfo.Id && this.Name == ioFilterInfo.Name && this.Vendor == ioFilterInfo.Vendor && this.Version == ioFilterInfo.Version && this.Type == ioFilterInfo.Type && this.Summary == ioFilterInfo.Summary && this.ReleaseDate == ioFilterInfo.ReleaseDate);
        }

        public override bool Equals(object ioFilterInfo)
        {
            return Equals(ioFilterInfo as IoFilterInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Vendor + "_" + Version + "_" + Type + "_" + Summary + "_" + ReleaseDate).GetHashCode();
        }
    }

    public class IoFilterManager : ViewBase, IEquatable<IoFilterManager>
    {
        public ManagedObjectReference InstallIoFilter_Task(string vibUrl, ManagedObjectReference compRes)
        {
            return default(ManagedObjectReference);
        }

        public ClusterIoFilterInfo InstallIoFilter(string vibUrl, ManagedObjectReference compRes)
        {
            return default(ClusterIoFilterInfo);
        }

        public ManagedObjectReference UninstallIoFilter_Task(string filterId, ManagedObjectReference compRes)
        {
            return default(ManagedObjectReference);
        }

        public void UninstallIoFilter(string filterId, ManagedObjectReference compRes)
        {
        }

        public ManagedObjectReference UpgradeIoFilter_Task(string filterId, ManagedObjectReference compRes, string vibUrl)
        {
            return default(ManagedObjectReference);
        }

        public ClusterIoFilterInfo UpgradeIoFilter(string filterId, ManagedObjectReference compRes, string vibUrl)
        {
            return default(ClusterIoFilterInfo);
        }

        public IoFilterQueryIssueResult QueryIoFilterIssues(string filterId, ManagedObjectReference compRes)
        {
            return default(IoFilterQueryIssueResult);
        }

        public ClusterIoFilterInfo[] QueryIoFilterInfo(ManagedObjectReference compRes)
        {
            return default(ClusterIoFilterInfo[]);
        }

        public ManagedObjectReference ResolveInstallationErrorsOnHost_Task(string filterId, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public void ResolveInstallationErrorsOnHost(string filterId, ManagedObjectReference host)
        {
        }

        public ManagedObjectReference ResolveInstallationErrorsOnCluster_Task(string filterId, ManagedObjectReference cluster)
        {
            return default(ManagedObjectReference);
        }

        public void ResolveInstallationErrorsOnCluster(string filterId, ManagedObjectReference cluster)
        {
        }

        public VirtualDiskId[] QueryDisksUsingFilter(string filterId, ManagedObjectReference compRes)
        {
            return default(VirtualDiskId[]);
        }

        public bool Equals(IoFilterManager ioFilterManager)
        {
            return (ioFilterManager != null && base.Equals(ioFilterManager));
        }

        public override bool Equals(object ioFilterManager)
        {
            return Equals(ioFilterManager as IoFilterManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IoFilterQueryIssueResult : DynamicData, IEquatable<IoFilterQueryIssueResult>
    {
        public string OpType { get; set; }

        public IoFilterHostIssue[] HostIssue { get; set; }

        public bool Equals(IoFilterQueryIssueResult ioFilterQueryIssueResult)
        {
            return (ioFilterQueryIssueResult != null && this.OpType == ioFilterQueryIssueResult.OpType && ((this.HostIssue == null && ioFilterQueryIssueResult.HostIssue == null) || (this.HostIssue != null && ioFilterQueryIssueResult.HostIssue != null && Enumerable.SequenceEqual(this.HostIssue, ioFilterQueryIssueResult.HostIssue))));
        }

        public override bool Equals(object ioFilterQueryIssueResult)
        {
            return Equals(ioFilterQueryIssueResult as IoFilterQueryIssueResult);
        }

        public override int GetHashCode()
        {
            return (OpType + "_" + HostIssue).GetHashCode();
        }
    }

    public class IORMNotSupportedHostOnDatastore : VimFault, IEquatable<IORMNotSupportedHostOnDatastore>
    {
        public ManagedObjectReference Datastore { get; set; }

        public string DatastoreName { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public IORMNotSupportedHostOnDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(IORMNotSupportedHostOnDatastore iORMNotSupportedHostOnDatastore)
        {
            return (iORMNotSupportedHostOnDatastore != null && ((this.Datastore == null && iORMNotSupportedHostOnDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(iORMNotSupportedHostOnDatastore.Datastore))) && this.DatastoreName == iORMNotSupportedHostOnDatastore.DatastoreName && ((this.Host == null && iORMNotSupportedHostOnDatastore.Host == null) || (this.Host != null && iORMNotSupportedHostOnDatastore.Host != null && Enumerable.SequenceEqual(this.Host, iORMNotSupportedHostOnDatastore.Host))) && ((this.LinkedView == null && iORMNotSupportedHostOnDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(iORMNotSupportedHostOnDatastore.LinkedView))));
        }

        public override bool Equals(object iORMNotSupportedHostOnDatastore)
        {
            return Equals(iORMNotSupportedHostOnDatastore as IORMNotSupportedHostOnDatastore);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + DatastoreName + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class IORMNotSupportedHostOnDatastore_LinkedView : IEquatable<IORMNotSupportedHostOnDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public HostSystem[] Host { get; set; }

        public bool Equals(IORMNotSupportedHostOnDatastore_LinkedView iORMNotSupportedHostOnDatastore_LinkedView)
        {
            return (iORMNotSupportedHostOnDatastore_LinkedView != null && ((this.Datastore == null && iORMNotSupportedHostOnDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(iORMNotSupportedHostOnDatastore_LinkedView.Datastore))) && ((this.Host == null && iORMNotSupportedHostOnDatastore_LinkedView.Host == null) || (this.Host != null && iORMNotSupportedHostOnDatastore_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, iORMNotSupportedHostOnDatastore_LinkedView.Host))));
        }

        public override bool Equals(object iORMNotSupportedHostOnDatastore_LinkedView)
        {
            return Equals(iORMNotSupportedHostOnDatastore_LinkedView as IORMNotSupportedHostOnDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Host).GetHashCode();
        }
    }

    public class IpAddress : NegatableExpression, IEquatable<IpAddress>
    {
        public bool Equals(IpAddress ipAddress)
        {
            return (ipAddress != null && base.Equals(ipAddress));
        }

        public override bool Equals(object ipAddress)
        {
            return Equals(ipAddress as IpAddress);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IpAddressProfile : ApplyProfile, IEquatable<IpAddressProfile>
    {
        public bool Equals(IpAddressProfile ipAddressProfile)
        {
            return (ipAddressProfile != null && base.Equals(ipAddressProfile));
        }

        public override bool Equals(object ipAddressProfile)
        {
            return Equals(ipAddressProfile as IpAddressProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IpHostnameGeneratorError : CustomizationFault, IEquatable<IpHostnameGeneratorError>
    {
        public bool Equals(IpHostnameGeneratorError ipHostnameGeneratorError)
        {
            return (ipHostnameGeneratorError != null && base.Equals(ipHostnameGeneratorError));
        }

        public override bool Equals(object ipHostnameGeneratorError)
        {
            return Equals(ipHostnameGeneratorError as IpHostnameGeneratorError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IpPool : DynamicData, IEquatable<IpPool>
    {
        public int? Id { get; set; }

        public string Name { get; set; }

        public IpPoolIpPoolConfigInfo Ipv4Config { get; set; }

        public IpPoolIpPoolConfigInfo Ipv6Config { get; set; }

        public string DnsDomain { get; set; }

        public string DnsSearchPath { get; set; }

        public string HostPrefix { get; set; }

        public string HttpProxy { get; set; }

        public IpPoolAssociation[] NetworkAssociation { get; set; }

        public int? AvailableIpv4Addresses { get; set; }

        public int? AvailableIpv6Addresses { get; set; }

        public int? AllocatedIpv4Addresses { get; set; }

        public int? AllocatedIpv6Addresses { get; set; }

        public bool Equals(IpPool ipPool)
        {
            return (ipPool != null && ((this.Id == null && ipPool.Id == null) || (this.Id != null && this.Id.Equals(ipPool.Id))) && this.Name == ipPool.Name && ((this.Ipv4Config == null && ipPool.Ipv4Config == null) || (this.Ipv4Config != null && this.Ipv4Config.Equals(ipPool.Ipv4Config))) && ((this.Ipv6Config == null && ipPool.Ipv6Config == null) || (this.Ipv6Config != null && this.Ipv6Config.Equals(ipPool.Ipv6Config))) && this.DnsDomain == ipPool.DnsDomain && this.DnsSearchPath == ipPool.DnsSearchPath && this.HostPrefix == ipPool.HostPrefix && this.HttpProxy == ipPool.HttpProxy && ((this.NetworkAssociation == null && ipPool.NetworkAssociation == null) || (this.NetworkAssociation != null && ipPool.NetworkAssociation != null && Enumerable.SequenceEqual(this.NetworkAssociation, ipPool.NetworkAssociation))) && ((this.AvailableIpv4Addresses == null && ipPool.AvailableIpv4Addresses == null) || (this.AvailableIpv4Addresses != null && this.AvailableIpv4Addresses.Equals(ipPool.AvailableIpv4Addresses))) && ((this.AvailableIpv6Addresses == null && ipPool.AvailableIpv6Addresses == null) || (this.AvailableIpv6Addresses != null && this.AvailableIpv6Addresses.Equals(ipPool.AvailableIpv6Addresses))) && ((this.AllocatedIpv4Addresses == null && ipPool.AllocatedIpv4Addresses == null) || (this.AllocatedIpv4Addresses != null && this.AllocatedIpv4Addresses.Equals(ipPool.AllocatedIpv4Addresses))) && ((this.AllocatedIpv6Addresses == null && ipPool.AllocatedIpv6Addresses == null) || (this.AllocatedIpv6Addresses != null && this.AllocatedIpv6Addresses.Equals(ipPool.AllocatedIpv6Addresses))));
        }

        public override bool Equals(object ipPool)
        {
            return Equals(ipPool as IpPool);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Ipv4Config + "_" + Ipv6Config + "_" + DnsDomain + "_" + DnsSearchPath + "_" + HostPrefix + "_" + HttpProxy + "_" + NetworkAssociation + "_" + AvailableIpv4Addresses + "_" + AvailableIpv6Addresses + "_" + AllocatedIpv4Addresses + "_" + AllocatedIpv6Addresses).GetHashCode();
        }
    }

    public class IpPoolAssociation : DynamicData, IEquatable<IpPoolAssociation>
    {
        public ManagedObjectReference Network { get; set; }

        public string NetworkName { get; set; }

        public IpPoolAssociation_LinkedView LinkedView { get; set; }

        public bool Equals(IpPoolAssociation ipPoolAssociation)
        {
            return (ipPoolAssociation != null && ((this.Network == null && ipPoolAssociation.Network == null) || (this.Network != null && this.Network.Equals(ipPoolAssociation.Network))) && this.NetworkName == ipPoolAssociation.NetworkName && ((this.LinkedView == null && ipPoolAssociation.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ipPoolAssociation.LinkedView))));
        }

        public override bool Equals(object ipPoolAssociation)
        {
            return Equals(ipPoolAssociation as IpPoolAssociation);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + NetworkName + "_" + LinkedView).GetHashCode();
        }
    }

    public class IpPoolAssociation_LinkedView : IEquatable<IpPoolAssociation_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(IpPoolAssociation_LinkedView ipPoolAssociation_LinkedView)
        {
            return (ipPoolAssociation_LinkedView != null && ((this.Network == null && ipPoolAssociation_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(ipPoolAssociation_LinkedView.Network))));
        }

        public override bool Equals(object ipPoolAssociation_LinkedView)
        {
            return Equals(ipPoolAssociation_LinkedView as IpPoolAssociation_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class IpPoolIpPoolConfigInfo : DynamicData, IEquatable<IpPoolIpPoolConfigInfo>
    {
        public string SubnetAddress { get; set; }

        public string Netmask { get; set; }

        public string Gateway { get; set; }

        public string Range { get; set; }

        public string[] Dns { get; set; }

        public bool? DhcpServerAvailable { get; set; }

        public bool? IpPoolEnabled { get; set; }

        public bool Equals(IpPoolIpPoolConfigInfo ipPoolIpPoolConfigInfo)
        {
            return (ipPoolIpPoolConfigInfo != null && this.SubnetAddress == ipPoolIpPoolConfigInfo.SubnetAddress && this.Netmask == ipPoolIpPoolConfigInfo.Netmask && this.Gateway == ipPoolIpPoolConfigInfo.Gateway && this.Range == ipPoolIpPoolConfigInfo.Range && ((this.Dns == null && ipPoolIpPoolConfigInfo.Dns == null) || (this.Dns != null && ipPoolIpPoolConfigInfo.Dns != null && Enumerable.SequenceEqual(this.Dns, ipPoolIpPoolConfigInfo.Dns))) && ((this.DhcpServerAvailable == null && ipPoolIpPoolConfigInfo.DhcpServerAvailable == null) || (this.DhcpServerAvailable != null && this.DhcpServerAvailable.Equals(ipPoolIpPoolConfigInfo.DhcpServerAvailable))) && ((this.IpPoolEnabled == null && ipPoolIpPoolConfigInfo.IpPoolEnabled == null) || (this.IpPoolEnabled != null && this.IpPoolEnabled.Equals(ipPoolIpPoolConfigInfo.IpPoolEnabled))));
        }

        public override bool Equals(object ipPoolIpPoolConfigInfo)
        {
            return Equals(ipPoolIpPoolConfigInfo as IpPoolIpPoolConfigInfo);
        }

        public override int GetHashCode()
        {
            return (SubnetAddress + "_" + Netmask + "_" + Gateway + "_" + Range + "_" + Dns + "_" + DhcpServerAvailable + "_" + IpPoolEnabled).GetHashCode();
        }
    }

    public class IpPoolManager : ViewBase, IEquatable<IpPoolManager>
    {
        public IpPool[] QueryIpPools(ManagedObjectReference dc)
        {
            return default(IpPool[]);
        }

        public int CreateIpPool(ManagedObjectReference dc, IpPool pool)
        {
            return default(int);
        }

        public void UpdateIpPool(ManagedObjectReference dc, IpPool pool)
        {
        }

        public void DestroyIpPool(ManagedObjectReference dc, int id, bool force)
        {
        }

        public string AllocateIpv4Address(ManagedObjectReference dc, int poolId, string allocationId)
        {
            return default(string);
        }

        public string AllocateIpv6Address(ManagedObjectReference dc, int poolId, string allocationId)
        {
            return default(string);
        }

        public void ReleaseIpAllocation(ManagedObjectReference dc, int poolId, string allocationId)
        {
        }

        public IpPoolManagerIpAllocation[] QueryIPAllocations(ManagedObjectReference dc, int poolId, string extensionKey)
        {
            return default(IpPoolManagerIpAllocation[]);
        }

        public bool Equals(IpPoolManager ipPoolManager)
        {
            return (ipPoolManager != null && base.Equals(ipPoolManager));
        }

        public override bool Equals(object ipPoolManager)
        {
            return Equals(ipPoolManager as IpPoolManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IpPoolManagerIpAllocation : DynamicData, IEquatable<IpPoolManagerIpAllocation>
    {
        public string IpAddress { get; set; }

        public string AllocationId { get; set; }

        public bool Equals(IpPoolManagerIpAllocation ipPoolManagerIpAllocation)
        {
            return (ipPoolManagerIpAllocation != null && this.IpAddress == ipPoolManagerIpAllocation.IpAddress && this.AllocationId == ipPoolManagerIpAllocation.AllocationId);
        }

        public override bool Equals(object ipPoolManagerIpAllocation)
        {
            return Equals(ipPoolManagerIpAllocation as IpPoolManagerIpAllocation);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + AllocationId).GetHashCode();
        }
    }

    public class IpRange : IpAddress, IEquatable<IpRange>
    {
        public string AddressPrefix { get; set; }

        public int? PrefixLength { get; set; }

        public bool Equals(IpRange ipRange)
        {
            return (ipRange != null && this.AddressPrefix == ipRange.AddressPrefix && ((this.PrefixLength == null && ipRange.PrefixLength == null) || (this.PrefixLength != null && this.PrefixLength.Equals(ipRange.PrefixLength))));
        }

        public override bool Equals(object ipRange)
        {
            return Equals(ipRange as IpRange);
        }

        public override int GetHashCode()
        {
            return (AddressPrefix + "_" + PrefixLength).GetHashCode();
        }
    }

    public class IpRouteProfile : ApplyProfile, IEquatable<IpRouteProfile>
    {
        public StaticRouteProfile[] StaticRoute { get; set; }

        public bool Equals(IpRouteProfile ipRouteProfile)
        {
            return (ipRouteProfile != null && ((this.StaticRoute == null && ipRouteProfile.StaticRoute == null) || (this.StaticRoute != null && ipRouteProfile.StaticRoute != null && Enumerable.SequenceEqual(this.StaticRoute, ipRouteProfile.StaticRoute))));
        }

        public override bool Equals(object ipRouteProfile)
        {
            return Equals(ipRouteProfile as IpRouteProfile);
        }

        public override int GetHashCode()
        {
            return (StaticRoute).GetHashCode();
        }
    }

    public class IScsiBootFailureEvent : HostEvent, IEquatable<IScsiBootFailureEvent>
    {
        public bool Equals(IScsiBootFailureEvent iScsiBootFailureEvent)
        {
            return (iScsiBootFailureEvent != null && base.Equals(iScsiBootFailureEvent));
        }

        public override bool Equals(object iScsiBootFailureEvent)
        {
            return Equals(iScsiBootFailureEvent as IScsiBootFailureEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IscsiDependencyEntity : DynamicData, IEquatable<IscsiDependencyEntity>
    {
        public string PnicDevice { get; set; }

        public string VnicDevice { get; set; }

        public string VmhbaName { get; set; }

        public bool Equals(IscsiDependencyEntity iscsiDependencyEntity)
        {
            return (iscsiDependencyEntity != null && this.PnicDevice == iscsiDependencyEntity.PnicDevice && this.VnicDevice == iscsiDependencyEntity.VnicDevice && this.VmhbaName == iscsiDependencyEntity.VmhbaName);
        }

        public override bool Equals(object iscsiDependencyEntity)
        {
            return Equals(iscsiDependencyEntity as IscsiDependencyEntity);
        }

        public override int GetHashCode()
        {
            return (PnicDevice + "_" + VnicDevice + "_" + VmhbaName).GetHashCode();
        }
    }

    public class IscsiFault : VimFault, IEquatable<IscsiFault>
    {
        public bool Equals(IscsiFault iscsiFault)
        {
            return (iscsiFault != null && base.Equals(iscsiFault));
        }

        public override bool Equals(object iscsiFault)
        {
            return Equals(iscsiFault as IscsiFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IscsiFaultInvalidVnic : IscsiFault, IEquatable<IscsiFaultInvalidVnic>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultInvalidVnic iscsiFaultInvalidVnic)
        {
            return (iscsiFaultInvalidVnic != null && this.VnicDevice == iscsiFaultInvalidVnic.VnicDevice);
        }

        public override bool Equals(object iscsiFaultInvalidVnic)
        {
            return Equals(iscsiFaultInvalidVnic as IscsiFaultInvalidVnic);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultPnicInUse : IscsiFault, IEquatable<IscsiFaultPnicInUse>
    {
        public string PnicDevice { get; set; }

        public bool Equals(IscsiFaultPnicInUse iscsiFaultPnicInUse)
        {
            return (iscsiFaultPnicInUse != null && this.PnicDevice == iscsiFaultPnicInUse.PnicDevice);
        }

        public override bool Equals(object iscsiFaultPnicInUse)
        {
            return Equals(iscsiFaultPnicInUse as IscsiFaultPnicInUse);
        }

        public override int GetHashCode()
        {
            return (PnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicAlreadyBound : IscsiFault, IEquatable<IscsiFaultVnicAlreadyBound>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicAlreadyBound iscsiFaultVnicAlreadyBound)
        {
            return (iscsiFaultVnicAlreadyBound != null && this.VnicDevice == iscsiFaultVnicAlreadyBound.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicAlreadyBound)
        {
            return Equals(iscsiFaultVnicAlreadyBound as IscsiFaultVnicAlreadyBound);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicHasActivePaths : IscsiFault, IEquatable<IscsiFaultVnicHasActivePaths>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicHasActivePaths iscsiFaultVnicHasActivePaths)
        {
            return (iscsiFaultVnicHasActivePaths != null && this.VnicDevice == iscsiFaultVnicHasActivePaths.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicHasActivePaths)
        {
            return Equals(iscsiFaultVnicHasActivePaths as IscsiFaultVnicHasActivePaths);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicHasMultipleUplinks : IscsiFault, IEquatable<IscsiFaultVnicHasMultipleUplinks>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicHasMultipleUplinks iscsiFaultVnicHasMultipleUplinks)
        {
            return (iscsiFaultVnicHasMultipleUplinks != null && this.VnicDevice == iscsiFaultVnicHasMultipleUplinks.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicHasMultipleUplinks)
        {
            return Equals(iscsiFaultVnicHasMultipleUplinks as IscsiFaultVnicHasMultipleUplinks);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicHasNoUplinks : IscsiFault, IEquatable<IscsiFaultVnicHasNoUplinks>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicHasNoUplinks iscsiFaultVnicHasNoUplinks)
        {
            return (iscsiFaultVnicHasNoUplinks != null && this.VnicDevice == iscsiFaultVnicHasNoUplinks.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicHasNoUplinks)
        {
            return Equals(iscsiFaultVnicHasNoUplinks as IscsiFaultVnicHasNoUplinks);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicHasWrongUplink : IscsiFault, IEquatable<IscsiFaultVnicHasWrongUplink>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicHasWrongUplink iscsiFaultVnicHasWrongUplink)
        {
            return (iscsiFaultVnicHasWrongUplink != null && this.VnicDevice == iscsiFaultVnicHasWrongUplink.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicHasWrongUplink)
        {
            return Equals(iscsiFaultVnicHasWrongUplink as IscsiFaultVnicHasWrongUplink);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicInUse : IscsiFault, IEquatable<IscsiFaultVnicInUse>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicInUse iscsiFaultVnicInUse)
        {
            return (iscsiFaultVnicInUse != null && this.VnicDevice == iscsiFaultVnicInUse.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicInUse)
        {
            return Equals(iscsiFaultVnicInUse as IscsiFaultVnicInUse);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicIsLastPath : IscsiFault, IEquatable<IscsiFaultVnicIsLastPath>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicIsLastPath iscsiFaultVnicIsLastPath)
        {
            return (iscsiFaultVnicIsLastPath != null && this.VnicDevice == iscsiFaultVnicIsLastPath.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicIsLastPath)
        {
            return Equals(iscsiFaultVnicIsLastPath as IscsiFaultVnicIsLastPath);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicNotBound : IscsiFault, IEquatable<IscsiFaultVnicNotBound>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicNotBound iscsiFaultVnicNotBound)
        {
            return (iscsiFaultVnicNotBound != null && this.VnicDevice == iscsiFaultVnicNotBound.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicNotBound)
        {
            return Equals(iscsiFaultVnicNotBound as IscsiFaultVnicNotBound);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiFaultVnicNotFound : IscsiFault, IEquatable<IscsiFaultVnicNotFound>
    {
        public string VnicDevice { get; set; }

        public bool Equals(IscsiFaultVnicNotFound iscsiFaultVnicNotFound)
        {
            return (iscsiFaultVnicNotFound != null && this.VnicDevice == iscsiFaultVnicNotFound.VnicDevice);
        }

        public override bool Equals(object iscsiFaultVnicNotFound)
        {
            return Equals(iscsiFaultVnicNotFound as IscsiFaultVnicNotFound);
        }

        public override int GetHashCode()
        {
            return (VnicDevice).GetHashCode();
        }
    }

    public class IscsiManager : ViewBase, IEquatable<IscsiManager>
    {
        public IscsiStatus QueryVnicStatus(string vnicDevice)
        {
            return default(IscsiStatus);
        }

        public IscsiStatus QueryPnicStatus(string pnicDevice)
        {
            return default(IscsiStatus);
        }

        public IscsiPortInfo[] QueryBoundVnics(string iScsiHbaName)
        {
            return default(IscsiPortInfo[]);
        }

        public IscsiPortInfo[] QueryCandidateNics(string iScsiHbaName)
        {
            return default(IscsiPortInfo[]);
        }

        public void BindVnic(string iScsiHbaName, string vnicDevice)
        {
        }

        public void UnbindVnic(string iScsiHbaName, string vnicDevice, bool force)
        {
        }

        public IscsiMigrationDependency QueryMigrationDependencies(string[] pnicDevice)
        {
            return default(IscsiMigrationDependency);
        }

        public bool Equals(IscsiManager iscsiManager)
        {
            return (iscsiManager != null && base.Equals(iscsiManager));
        }

        public override bool Equals(object iscsiManager)
        {
            return Equals(iscsiManager as IscsiManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IscsiMigrationDependency : DynamicData, IEquatable<IscsiMigrationDependency>
    {
        public bool MigrationAllowed { get; set; }

        public IscsiStatus DisallowReason { get; set; }

        public IscsiDependencyEntity[] Dependency { get; set; }

        public bool Equals(IscsiMigrationDependency iscsiMigrationDependency)
        {
            return (iscsiMigrationDependency != null && this.MigrationAllowed == iscsiMigrationDependency.MigrationAllowed && ((this.DisallowReason == null && iscsiMigrationDependency.DisallowReason == null) || (this.DisallowReason != null && this.DisallowReason.Equals(iscsiMigrationDependency.DisallowReason))) && ((this.Dependency == null && iscsiMigrationDependency.Dependency == null) || (this.Dependency != null && iscsiMigrationDependency.Dependency != null && Enumerable.SequenceEqual(this.Dependency, iscsiMigrationDependency.Dependency))));
        }

        public override bool Equals(object iscsiMigrationDependency)
        {
            return Equals(iscsiMigrationDependency as IscsiMigrationDependency);
        }

        public override int GetHashCode()
        {
            return (MigrationAllowed + "_" + DisallowReason + "_" + Dependency).GetHashCode();
        }
    }

    public class IscsiPortInfo : DynamicData, IEquatable<IscsiPortInfo>
    {
        public string VnicDevice { get; set; }

        public HostVirtualNic Vnic { get; set; }

        public string PnicDevice { get; set; }

        public PhysicalNic Pnic { get; set; }

        public string SwitchName { get; set; }

        public string SwitchUuid { get; set; }

        public string PortgroupName { get; set; }

        public string PortgroupKey { get; set; }

        public string PortKey { get; set; }

        public string OpaqueNetworkId { get; set; }

        public string OpaqueNetworkType { get; set; }

        public string OpaqueNetworkName { get; set; }

        public string ExternalId { get; set; }

        public IscsiStatus ComplianceStatus { get; set; }

        public string PathStatus { get; set; }

        public bool Equals(IscsiPortInfo iscsiPortInfo)
        {
            return (iscsiPortInfo != null && this.VnicDevice == iscsiPortInfo.VnicDevice && ((this.Vnic == null && iscsiPortInfo.Vnic == null) || (this.Vnic != null && this.Vnic.Equals(iscsiPortInfo.Vnic))) && this.PnicDevice == iscsiPortInfo.PnicDevice && ((this.Pnic == null && iscsiPortInfo.Pnic == null) || (this.Pnic != null && this.Pnic.Equals(iscsiPortInfo.Pnic))) && this.SwitchName == iscsiPortInfo.SwitchName && this.SwitchUuid == iscsiPortInfo.SwitchUuid && this.PortgroupName == iscsiPortInfo.PortgroupName && this.PortgroupKey == iscsiPortInfo.PortgroupKey && this.PortKey == iscsiPortInfo.PortKey && this.OpaqueNetworkId == iscsiPortInfo.OpaqueNetworkId && this.OpaqueNetworkType == iscsiPortInfo.OpaqueNetworkType && this.OpaqueNetworkName == iscsiPortInfo.OpaqueNetworkName && this.ExternalId == iscsiPortInfo.ExternalId && ((this.ComplianceStatus == null && iscsiPortInfo.ComplianceStatus == null) || (this.ComplianceStatus != null && this.ComplianceStatus.Equals(iscsiPortInfo.ComplianceStatus))) && this.PathStatus == iscsiPortInfo.PathStatus);
        }

        public override bool Equals(object iscsiPortInfo)
        {
            return Equals(iscsiPortInfo as IscsiPortInfo);
        }

        public override int GetHashCode()
        {
            return (VnicDevice + "_" + Vnic + "_" + PnicDevice + "_" + Pnic + "_" + SwitchName + "_" + SwitchUuid + "_" + PortgroupName + "_" + PortgroupKey + "_" + PortKey + "_" + OpaqueNetworkId + "_" + OpaqueNetworkType + "_" + OpaqueNetworkName + "_" + ExternalId + "_" + ComplianceStatus + "_" + PathStatus).GetHashCode();
        }
    }

    public class IscsiStatus : DynamicData, IEquatable<IscsiStatus>
    {
        public LocalizedMethodFault[] Reason { get; set; }

        public bool Equals(IscsiStatus iscsiStatus)
        {
            return (iscsiStatus != null && ((this.Reason == null && iscsiStatus.Reason == null) || (this.Reason != null && iscsiStatus.Reason != null && Enumerable.SequenceEqual(this.Reason, iscsiStatus.Reason))));
        }

        public override bool Equals(object iscsiStatus)
        {
            return Equals(iscsiStatus as IscsiStatus);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class IsoImageFileInfo : FileInfo, IEquatable<IsoImageFileInfo>
    {
        public bool Equals(IsoImageFileInfo isoImageFileInfo)
        {
            return (isoImageFileInfo != null && base.Equals(isoImageFileInfo));
        }

        public override bool Equals(object isoImageFileInfo)
        {
            return Equals(isoImageFileInfo as IsoImageFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class IsoImageFileQuery : FileQuery, IEquatable<IsoImageFileQuery>
    {
        public bool Equals(IsoImageFileQuery isoImageFileQuery)
        {
            return (isoImageFileQuery != null && base.Equals(isoImageFileQuery));
        }

        public override bool Equals(object isoImageFileQuery)
        {
            return Equals(isoImageFileQuery as IsoImageFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class KernelModuleInfo : DynamicData, IEquatable<KernelModuleInfo>
    {
        public int Id { get; set; }

        public string Name { get; set; }

        public string Version { get; set; }

        public string Filename { get; set; }

        public string OptionString { get; set; }

        public bool Loaded { get; set; }

        public bool Enabled { get; set; }

        public int UseCount { get; set; }

        public KernelModuleSectionInfo ReadOnlySection { get; set; }

        public KernelModuleSectionInfo WritableSection { get; set; }

        public KernelModuleSectionInfo TextSection { get; set; }

        public KernelModuleSectionInfo DataSection { get; set; }

        public KernelModuleSectionInfo BssSection { get; set; }

        public bool Equals(KernelModuleInfo kernelModuleInfo)
        {
            return (kernelModuleInfo != null && this.Id == kernelModuleInfo.Id && this.Name == kernelModuleInfo.Name && this.Version == kernelModuleInfo.Version && this.Filename == kernelModuleInfo.Filename && this.OptionString == kernelModuleInfo.OptionString && this.Loaded == kernelModuleInfo.Loaded && this.Enabled == kernelModuleInfo.Enabled && this.UseCount == kernelModuleInfo.UseCount && ((this.ReadOnlySection == null && kernelModuleInfo.ReadOnlySection == null) || (this.ReadOnlySection != null && this.ReadOnlySection.Equals(kernelModuleInfo.ReadOnlySection))) && ((this.WritableSection == null && kernelModuleInfo.WritableSection == null) || (this.WritableSection != null && this.WritableSection.Equals(kernelModuleInfo.WritableSection))) && ((this.TextSection == null && kernelModuleInfo.TextSection == null) || (this.TextSection != null && this.TextSection.Equals(kernelModuleInfo.TextSection))) && ((this.DataSection == null && kernelModuleInfo.DataSection == null) || (this.DataSection != null && this.DataSection.Equals(kernelModuleInfo.DataSection))) && ((this.BssSection == null && kernelModuleInfo.BssSection == null) || (this.BssSection != null && this.BssSection.Equals(kernelModuleInfo.BssSection))));
        }

        public override bool Equals(object kernelModuleInfo)
        {
            return Equals(kernelModuleInfo as KernelModuleInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Version + "_" + Filename + "_" + OptionString + "_" + Loaded + "_" + Enabled + "_" + UseCount + "_" + ReadOnlySection + "_" + WritableSection + "_" + TextSection + "_" + DataSection + "_" + BssSection).GetHashCode();
        }
    }

    public class KernelModuleSectionInfo : DynamicData, IEquatable<KernelModuleSectionInfo>
    {
        public long Address { get; set; }

        public int? Length { get; set; }

        public bool Equals(KernelModuleSectionInfo kernelModuleSectionInfo)
        {
            return (kernelModuleSectionInfo != null && this.Address == kernelModuleSectionInfo.Address && ((this.Length == null && kernelModuleSectionInfo.Length == null) || (this.Length != null && this.Length.Equals(kernelModuleSectionInfo.Length))));
        }

        public override bool Equals(object kernelModuleSectionInfo)
        {
            return Equals(kernelModuleSectionInfo as KernelModuleSectionInfo);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + Length).GetHashCode();
        }
    }

    public class KeyAnyValue : DynamicData, IEquatable<KeyAnyValue>
    {
        public string Key { get; set; }

        public object Value { get; set; }

        public bool Equals(KeyAnyValue keyAnyValue)
        {
            return (keyAnyValue != null && this.Key == keyAnyValue.Key && ((this.Value == null && keyAnyValue.Value == null) || (this.Value != null && this.Value.Equals(keyAnyValue.Value))));
        }

        public override bool Equals(object keyAnyValue)
        {
            return Equals(keyAnyValue as KeyAnyValue);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value).GetHashCode();
        }
    }

    public class KeyProviderId : DynamicData, IEquatable<KeyProviderId>
    {
        public string Id { get; set; }

        public bool Equals(KeyProviderId keyProviderId)
        {
            return (keyProviderId != null && this.Id == keyProviderId.Id);
        }

        public override bool Equals(object keyProviderId)
        {
            return Equals(keyProviderId as KeyProviderId);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class KeyValue : DynamicData, IEquatable<KeyValue>
    {
        public string Key { get; set; }

        public string Value { get; set; }

        public bool Equals(KeyValue keyValue)
        {
            return (keyValue != null && this.Key == keyValue.Key && this.Value == keyValue.Value);
        }

        public override bool Equals(object keyValue)
        {
            return Equals(keyValue as KeyValue);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value).GetHashCode();
        }
    }

    public class KmipClusterInfo : DynamicData, IEquatable<KmipClusterInfo>
    {
        public KeyProviderId ClusterId { get; set; }

        public KmipServerInfo[] Servers { get; set; }

        public bool UseAsDefault { get; set; }

        public bool Equals(KmipClusterInfo kmipClusterInfo)
        {
            return (kmipClusterInfo != null && ((this.ClusterId == null && kmipClusterInfo.ClusterId == null) || (this.ClusterId != null && this.ClusterId.Equals(kmipClusterInfo.ClusterId))) && ((this.Servers == null && kmipClusterInfo.Servers == null) || (this.Servers != null && kmipClusterInfo.Servers != null && Enumerable.SequenceEqual(this.Servers, kmipClusterInfo.Servers))) && this.UseAsDefault == kmipClusterInfo.UseAsDefault);
        }

        public override bool Equals(object kmipClusterInfo)
        {
            return Equals(kmipClusterInfo as KmipClusterInfo);
        }

        public override int GetHashCode()
        {
            return (ClusterId + "_" + Servers + "_" + UseAsDefault).GetHashCode();
        }
    }

    public class KmipServerInfo : DynamicData, IEquatable<KmipServerInfo>
    {
        public string Name { get; set; }

        public string Address { get; set; }

        public int Port { get; set; }

        public string ProxyAddress { get; set; }

        public int? ProxyPort { get; set; }

        public int? Reconnect { get; set; }

        public string Protocol { get; set; }

        public int? Nbio { get; set; }

        public int? Timeout { get; set; }

        public string UserName { get; set; }

        public bool Equals(KmipServerInfo kmipServerInfo)
        {
            return (kmipServerInfo != null && this.Name == kmipServerInfo.Name && this.Address == kmipServerInfo.Address && this.Port == kmipServerInfo.Port && this.ProxyAddress == kmipServerInfo.ProxyAddress && ((this.ProxyPort == null && kmipServerInfo.ProxyPort == null) || (this.ProxyPort != null && this.ProxyPort.Equals(kmipServerInfo.ProxyPort))) && ((this.Reconnect == null && kmipServerInfo.Reconnect == null) || (this.Reconnect != null && this.Reconnect.Equals(kmipServerInfo.Reconnect))) && this.Protocol == kmipServerInfo.Protocol && ((this.Nbio == null && kmipServerInfo.Nbio == null) || (this.Nbio != null && this.Nbio.Equals(kmipServerInfo.Nbio))) && ((this.Timeout == null && kmipServerInfo.Timeout == null) || (this.Timeout != null && this.Timeout.Equals(kmipServerInfo.Timeout))) && this.UserName == kmipServerInfo.UserName);
        }

        public override bool Equals(object kmipServerInfo)
        {
            return Equals(kmipServerInfo as KmipServerInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Address + "_" + Port + "_" + ProxyAddress + "_" + ProxyPort + "_" + Reconnect + "_" + Protocol + "_" + Nbio + "_" + Timeout + "_" + UserName).GetHashCode();
        }
    }

    public class KmipServerSpec : DynamicData, IEquatable<KmipServerSpec>
    {
        public KeyProviderId ClusterId { get; set; }

        public KmipServerInfo Info { get; set; }

        public string Password { get; set; }

        public bool Equals(KmipServerSpec kmipServerSpec)
        {
            return (kmipServerSpec != null && ((this.ClusterId == null && kmipServerSpec.ClusterId == null) || (this.ClusterId != null && this.ClusterId.Equals(kmipServerSpec.ClusterId))) && ((this.Info == null && kmipServerSpec.Info == null) || (this.Info != null && this.Info.Equals(kmipServerSpec.Info))) && this.Password == kmipServerSpec.Password);
        }

        public override bool Equals(object kmipServerSpec)
        {
            return Equals(kmipServerSpec as KmipServerSpec);
        }

        public override int GetHashCode()
        {
            return (ClusterId + "_" + Info + "_" + Password).GetHashCode();
        }
    }

    public class KmipServerStatus : DynamicData, IEquatable<KmipServerStatus>
    {
        public KeyProviderId ClusterId { get; set; }

        public string Name { get; set; }

        public ManagedEntityStatus Status { get; set; }

        public string Description { get; set; }

        public bool Equals(KmipServerStatus kmipServerStatus)
        {
            return (kmipServerStatus != null && ((this.ClusterId == null && kmipServerStatus.ClusterId == null) || (this.ClusterId != null && this.ClusterId.Equals(kmipServerStatus.ClusterId))) && this.Name == kmipServerStatus.Name && this.Status == kmipServerStatus.Status && this.Description == kmipServerStatus.Description);
        }

        public override bool Equals(object kmipServerStatus)
        {
            return Equals(kmipServerStatus as KmipServerStatus);
        }

        public override int GetHashCode()
        {
            return (ClusterId + "_" + Name + "_" + Status + "_" + Description).GetHashCode();
        }
    }

    public class LargeRDMConversionNotSupported : MigrationFault, IEquatable<LargeRDMConversionNotSupported>
    {
        public string Device { get; set; }

        public bool Equals(LargeRDMConversionNotSupported largeRDMConversionNotSupported)
        {
            return (largeRDMConversionNotSupported != null && this.Device == largeRDMConversionNotSupported.Device);
        }

        public override bool Equals(object largeRDMConversionNotSupported)
        {
            return Equals(largeRDMConversionNotSupported as LargeRDMConversionNotSupported);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class LargeRDMNotSupportedOnDatastore : VmConfigFault, IEquatable<LargeRDMNotSupportedOnDatastore>
    {
        public string Device { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public string DatastoreName { get; set; }

        public LargeRDMNotSupportedOnDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(LargeRDMNotSupportedOnDatastore largeRDMNotSupportedOnDatastore)
        {
            return (largeRDMNotSupportedOnDatastore != null && this.Device == largeRDMNotSupportedOnDatastore.Device && ((this.Datastore == null && largeRDMNotSupportedOnDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(largeRDMNotSupportedOnDatastore.Datastore))) && this.DatastoreName == largeRDMNotSupportedOnDatastore.DatastoreName && ((this.LinkedView == null && largeRDMNotSupportedOnDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(largeRDMNotSupportedOnDatastore.LinkedView))));
        }

        public override bool Equals(object largeRDMNotSupportedOnDatastore)
        {
            return Equals(largeRDMNotSupportedOnDatastore as LargeRDMNotSupportedOnDatastore);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Datastore + "_" + DatastoreName + "_" + LinkedView).GetHashCode();
        }
    }

    public class LargeRDMNotSupportedOnDatastore_LinkedView : IEquatable<LargeRDMNotSupportedOnDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(LargeRDMNotSupportedOnDatastore_LinkedView largeRDMNotSupportedOnDatastore_LinkedView)
        {
            return (largeRDMNotSupportedOnDatastore_LinkedView != null && ((this.Datastore == null && largeRDMNotSupportedOnDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(largeRDMNotSupportedOnDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object largeRDMNotSupportedOnDatastore_LinkedView)
        {
            return Equals(largeRDMNotSupportedOnDatastore_LinkedView as LargeRDMNotSupportedOnDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class LatencySensitivity : DynamicData, IEquatable<LatencySensitivity>
    {
        public LatencySensitivitySensitivityLevel Level { get; set; }

        public int? Sensitivity { get; set; }

        public bool Equals(LatencySensitivity latencySensitivity)
        {
            return (latencySensitivity != null && this.Level == latencySensitivity.Level && ((this.Sensitivity == null && latencySensitivity.Sensitivity == null) || (this.Sensitivity != null && this.Sensitivity.Equals(latencySensitivity.Sensitivity))));
        }

        public override bool Equals(object latencySensitivity)
        {
            return Equals(latencySensitivity as LatencySensitivity);
        }

        public override int GetHashCode()
        {
            return (Level + "_" + Sensitivity).GetHashCode();
        }
    }

    public class LegacyNetworkInterfaceInUse : CannotAccessNetwork, IEquatable<LegacyNetworkInterfaceInUse>
    {
        public new LegacyNetworkInterfaceInUse_LinkedView LinkedView { get; set; }

        public bool Equals(LegacyNetworkInterfaceInUse legacyNetworkInterfaceInUse)
        {
            return (legacyNetworkInterfaceInUse != null && ((this.LinkedView == null && legacyNetworkInterfaceInUse.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(legacyNetworkInterfaceInUse.LinkedView))));
        }

        public override bool Equals(object legacyNetworkInterfaceInUse)
        {
            return Equals(legacyNetworkInterfaceInUse as LegacyNetworkInterfaceInUse);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class LegacyNetworkInterfaceInUse_LinkedView : CannotAccessNetwork_LinkedView, IEquatable<LegacyNetworkInterfaceInUse_LinkedView>
    {
        public bool Equals(LegacyNetworkInterfaceInUse_LinkedView legacyNetworkInterfaceInUse_LinkedView)
        {
            return (legacyNetworkInterfaceInUse_LinkedView != null && base.Equals(legacyNetworkInterfaceInUse_LinkedView));
        }

        public override bool Equals(object legacyNetworkInterfaceInUse_LinkedView)
        {
            return Equals(legacyNetworkInterfaceInUse_LinkedView as LegacyNetworkInterfaceInUse_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseAssignmentFailed : RuntimeFault, IEquatable<LicenseAssignmentFailed>
    {
        public string Reason { get; set; }

        public bool Equals(LicenseAssignmentFailed licenseAssignmentFailed)
        {
            return (licenseAssignmentFailed != null && this.Reason == licenseAssignmentFailed.Reason);
        }

        public override bool Equals(object licenseAssignmentFailed)
        {
            return Equals(licenseAssignmentFailed as LicenseAssignmentFailed);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class LicenseAssignmentManager : ViewBase, IEquatable<LicenseAssignmentManager>
    {
        public LicenseManagerLicenseInfo UpdateAssignedLicense(string entity, string licenseKey, string entityDisplayName)
        {
            return default(LicenseManagerLicenseInfo);
        }

        public void RemoveAssignedLicense(string entityId)
        {
        }

        public LicenseAssignmentManagerLicenseAssignment[] QueryAssignedLicenses(string entityId)
        {
            return default(LicenseAssignmentManagerLicenseAssignment[]);
        }

        public bool Equals(LicenseAssignmentManager licenseAssignmentManager)
        {
            return (licenseAssignmentManager != null && base.Equals(licenseAssignmentManager));
        }

        public override bool Equals(object licenseAssignmentManager)
        {
            return Equals(licenseAssignmentManager as LicenseAssignmentManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseAssignmentManagerLicenseAssignment : DynamicData, IEquatable<LicenseAssignmentManagerLicenseAssignment>
    {
        public string EntityId { get; set; }

        public string Scope { get; set; }

        public string EntityDisplayName { get; set; }

        public LicenseManagerLicenseInfo AssignedLicense { get; set; }

        public KeyAnyValue[] Properties { get; set; }

        public bool Equals(LicenseAssignmentManagerLicenseAssignment licenseAssignmentManagerLicenseAssignment)
        {
            return (licenseAssignmentManagerLicenseAssignment != null && this.EntityId == licenseAssignmentManagerLicenseAssignment.EntityId && this.Scope == licenseAssignmentManagerLicenseAssignment.Scope && this.EntityDisplayName == licenseAssignmentManagerLicenseAssignment.EntityDisplayName && ((this.AssignedLicense == null && licenseAssignmentManagerLicenseAssignment.AssignedLicense == null) || (this.AssignedLicense != null && this.AssignedLicense.Equals(licenseAssignmentManagerLicenseAssignment.AssignedLicense))) && ((this.Properties == null && licenseAssignmentManagerLicenseAssignment.Properties == null) || (this.Properties != null && licenseAssignmentManagerLicenseAssignment.Properties != null && Enumerable.SequenceEqual(this.Properties, licenseAssignmentManagerLicenseAssignment.Properties))));
        }

        public override bool Equals(object licenseAssignmentManagerLicenseAssignment)
        {
            return Equals(licenseAssignmentManagerLicenseAssignment as LicenseAssignmentManagerLicenseAssignment);
        }

        public override int GetHashCode()
        {
            return (EntityId + "_" + Scope + "_" + EntityDisplayName + "_" + AssignedLicense + "_" + Properties).GetHashCode();
        }
    }

    public class LicenseAvailabilityInfo : DynamicData, IEquatable<LicenseAvailabilityInfo>
    {
        public LicenseFeatureInfo Feature { get; set; }

        public int Total { get; set; }

        public int Available { get; set; }

        public bool Equals(LicenseAvailabilityInfo licenseAvailabilityInfo)
        {
            return (licenseAvailabilityInfo != null && ((this.Feature == null && licenseAvailabilityInfo.Feature == null) || (this.Feature != null && this.Feature.Equals(licenseAvailabilityInfo.Feature))) && this.Total == licenseAvailabilityInfo.Total && this.Available == licenseAvailabilityInfo.Available);
        }

        public override bool Equals(object licenseAvailabilityInfo)
        {
            return Equals(licenseAvailabilityInfo as LicenseAvailabilityInfo);
        }

        public override int GetHashCode()
        {
            return (Feature + "_" + Total + "_" + Available).GetHashCode();
        }
    }

    public class LicenseDiagnostics : DynamicData, IEquatable<LicenseDiagnostics>
    {
        public DateTime SourceLastChanged { get; set; }

        public string SourceLost { get; set; }

        public float SourceLatency { get; set; }

        public string LicenseRequests { get; set; }

        public string LicenseRequestFailures { get; set; }

        public string LicenseFeatureUnknowns { get; set; }

        public LicenseManagerState OpState { get; set; }

        public DateTime LastStatusUpdate { get; set; }

        public string OpFailureMessage { get; set; }

        public bool Equals(LicenseDiagnostics licenseDiagnostics)
        {
            return (licenseDiagnostics != null && this.SourceLastChanged == licenseDiagnostics.SourceLastChanged && this.SourceLost == licenseDiagnostics.SourceLost && this.SourceLatency == licenseDiagnostics.SourceLatency && this.LicenseRequests == licenseDiagnostics.LicenseRequests && this.LicenseRequestFailures == licenseDiagnostics.LicenseRequestFailures && this.LicenseFeatureUnknowns == licenseDiagnostics.LicenseFeatureUnknowns && this.OpState == licenseDiagnostics.OpState && this.LastStatusUpdate == licenseDiagnostics.LastStatusUpdate && this.OpFailureMessage == licenseDiagnostics.OpFailureMessage);
        }

        public override bool Equals(object licenseDiagnostics)
        {
            return Equals(licenseDiagnostics as LicenseDiagnostics);
        }

        public override int GetHashCode()
        {
            return (SourceLastChanged + "_" + SourceLost + "_" + SourceLatency + "_" + LicenseRequests + "_" + LicenseRequestFailures + "_" + LicenseFeatureUnknowns + "_" + OpState + "_" + LastStatusUpdate + "_" + OpFailureMessage).GetHashCode();
        }
    }

    public class LicenseDowngradeDisallowed : NotEnoughLicenses, IEquatable<LicenseDowngradeDisallowed>
    {
        public string Edition { get; set; }

        public string EntityId { get; set; }

        public KeyAnyValue[] Features { get; set; }

        public bool Equals(LicenseDowngradeDisallowed licenseDowngradeDisallowed)
        {
            return (licenseDowngradeDisallowed != null && this.Edition == licenseDowngradeDisallowed.Edition && this.EntityId == licenseDowngradeDisallowed.EntityId && ((this.Features == null && licenseDowngradeDisallowed.Features == null) || (this.Features != null && licenseDowngradeDisallowed.Features != null && Enumerable.SequenceEqual(this.Features, licenseDowngradeDisallowed.Features))));
        }

        public override bool Equals(object licenseDowngradeDisallowed)
        {
            return Equals(licenseDowngradeDisallowed as LicenseDowngradeDisallowed);
        }

        public override int GetHashCode()
        {
            return (Edition + "_" + EntityId + "_" + Features).GetHashCode();
        }
    }

    public class LicenseEntityNotFound : VimFault, IEquatable<LicenseEntityNotFound>
    {
        public string EntityId { get; set; }

        public bool Equals(LicenseEntityNotFound licenseEntityNotFound)
        {
            return (licenseEntityNotFound != null && this.EntityId == licenseEntityNotFound.EntityId);
        }

        public override bool Equals(object licenseEntityNotFound)
        {
            return Equals(licenseEntityNotFound as LicenseEntityNotFound);
        }

        public override int GetHashCode()
        {
            return (EntityId).GetHashCode();
        }
    }

    public class LicenseEvent : Event, IEquatable<LicenseEvent>
    {
        public bool Equals(LicenseEvent licenseEvent)
        {
            return (licenseEvent != null && base.Equals(licenseEvent));
        }

        public override bool Equals(object licenseEvent)
        {
            return Equals(licenseEvent as LicenseEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseExpired : NotEnoughLicenses, IEquatable<LicenseExpired>
    {
        public string LicenseKey { get; set; }

        public bool Equals(LicenseExpired licenseExpired)
        {
            return (licenseExpired != null && this.LicenseKey == licenseExpired.LicenseKey);
        }

        public override bool Equals(object licenseExpired)
        {
            return Equals(licenseExpired as LicenseExpired);
        }

        public override int GetHashCode()
        {
            return (LicenseKey).GetHashCode();
        }
    }

    public class LicenseExpiredEvent : Event, IEquatable<LicenseExpiredEvent>
    {
        public LicenseFeatureInfo Feature { get; set; }

        public bool Equals(LicenseExpiredEvent licenseExpiredEvent)
        {
            return (licenseExpiredEvent != null && ((this.Feature == null && licenseExpiredEvent.Feature == null) || (this.Feature != null && this.Feature.Equals(licenseExpiredEvent.Feature))));
        }

        public override bool Equals(object licenseExpiredEvent)
        {
            return Equals(licenseExpiredEvent as LicenseExpiredEvent);
        }

        public override int GetHashCode()
        {
            return (Feature).GetHashCode();
        }
    }

    public class LicenseFeatureInfo : DynamicData, IEquatable<LicenseFeatureInfo>
    {
        public string Key { get; set; }

        public string FeatureName { get; set; }

        public string FeatureDescription { get; set; }

        public LicenseFeatureInfoState? State { get; set; }

        public string CostUnit { get; set; }

        public string SourceRestriction { get; set; }

        public string[] DependentKey { get; set; }

        public bool? Edition { get; set; }

        public DateTime? ExpiresOn { get; set; }

        public bool Equals(LicenseFeatureInfo licenseFeatureInfo)
        {
            return (licenseFeatureInfo != null && this.Key == licenseFeatureInfo.Key && this.FeatureName == licenseFeatureInfo.FeatureName && this.FeatureDescription == licenseFeatureInfo.FeatureDescription && ((this.State == null && licenseFeatureInfo.State == null) || (this.State != null && this.State.Equals(licenseFeatureInfo.State))) && this.CostUnit == licenseFeatureInfo.CostUnit && this.SourceRestriction == licenseFeatureInfo.SourceRestriction && ((this.DependentKey == null && licenseFeatureInfo.DependentKey == null) || (this.DependentKey != null && licenseFeatureInfo.DependentKey != null && Enumerable.SequenceEqual(this.DependentKey, licenseFeatureInfo.DependentKey))) && ((this.Edition == null && licenseFeatureInfo.Edition == null) || (this.Edition != null && this.Edition.Equals(licenseFeatureInfo.Edition))) && ((this.ExpiresOn == null && licenseFeatureInfo.ExpiresOn == null) || (this.ExpiresOn != null && this.ExpiresOn.Equals(licenseFeatureInfo.ExpiresOn))));
        }

        public override bool Equals(object licenseFeatureInfo)
        {
            return Equals(licenseFeatureInfo as LicenseFeatureInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + FeatureName + "_" + FeatureDescription + "_" + State + "_" + CostUnit + "_" + SourceRestriction + "_" + DependentKey + "_" + Edition + "_" + ExpiresOn).GetHashCode();
        }
    }

    public class LicenseKeyEntityMismatch : NotEnoughLicenses, IEquatable<LicenseKeyEntityMismatch>
    {
        public bool Equals(LicenseKeyEntityMismatch licenseKeyEntityMismatch)
        {
            return (licenseKeyEntityMismatch != null && base.Equals(licenseKeyEntityMismatch));
        }

        public override bool Equals(object licenseKeyEntityMismatch)
        {
            return Equals(licenseKeyEntityMismatch as LicenseKeyEntityMismatch);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseManager : ViewBase, IEquatable<LicenseManager>
    {
        public LicenseSource Source { get; set; }

        public bool SourceAvailable { get; set; }

        public LicenseDiagnostics Diagnostics { get; set; }

        public LicenseFeatureInfo[] FeatureInfo { get; set; }

        public string LicensedEdition { get; set; }

        public LicenseManagerLicenseInfo[] Licenses { get; set; }

        public ManagedObjectReference LicenseAssignmentManager { get; set; }

        public LicenseManagerEvaluationInfo Evaluation { get; set; }

        public LicenseManager_LinkedView LinkedView { get; set; }

        public LicenseFeatureInfo[] QuerySupportedFeatures(ManagedObjectReference host)
        {
            return default(LicenseFeatureInfo[]);
        }

        public LicenseAvailabilityInfo[] QueryLicenseSourceAvailability(ManagedObjectReference host)
        {
            return default(LicenseAvailabilityInfo[]);
        }

        public LicenseUsageInfo QueryLicenseUsage(ManagedObjectReference host)
        {
            return default(LicenseUsageInfo);
        }

        public void SetLicenseEdition(ManagedObjectReference host, string featureKey)
        {
        }

        public bool CheckLicenseFeature(ManagedObjectReference host, string featureKey)
        {
            return default(bool);
        }

        public bool EnableFeature(ManagedObjectReference host, string featureKey)
        {
            return default(bool);
        }

        public bool DisableFeature(ManagedObjectReference host, string featureKey)
        {
            return default(bool);
        }

        public void ConfigureLicenseSource(ManagedObjectReference host, LicenseSource licenseSource)
        {
        }

        public LicenseManagerLicenseInfo UpdateLicense(string licenseKey, KeyValue[] labels)
        {
            return default(LicenseManagerLicenseInfo);
        }

        public LicenseManagerLicenseInfo AddLicense(string licenseKey, KeyValue[] labels)
        {
            return default(LicenseManagerLicenseInfo);
        }

        public void RemoveLicense(string licenseKey)
        {
        }

        public LicenseManagerLicenseInfo DecodeLicense(string licenseKey)
        {
            return default(LicenseManagerLicenseInfo);
        }

        public void UpdateLicenseLabel(string licenseKey, string labelKey, string labelValue)
        {
        }

        public void RemoveLicenseLabel(string licenseKey, string labelKey)
        {
        }

        public bool Equals(LicenseManager licenseManager)
        {
            return (licenseManager != null && ((this.Source == null && licenseManager.Source == null) || (this.Source != null && this.Source.Equals(licenseManager.Source))) && this.SourceAvailable == licenseManager.SourceAvailable && ((this.Diagnostics == null && licenseManager.Diagnostics == null) || (this.Diagnostics != null && this.Diagnostics.Equals(licenseManager.Diagnostics))) && ((this.FeatureInfo == null && licenseManager.FeatureInfo == null) || (this.FeatureInfo != null && licenseManager.FeatureInfo != null && Enumerable.SequenceEqual(this.FeatureInfo, licenseManager.FeatureInfo))) && this.LicensedEdition == licenseManager.LicensedEdition && ((this.Licenses == null && licenseManager.Licenses == null) || (this.Licenses != null && licenseManager.Licenses != null && Enumerable.SequenceEqual(this.Licenses, licenseManager.Licenses))) && ((this.LicenseAssignmentManager == null && licenseManager.LicenseAssignmentManager == null) || (this.LicenseAssignmentManager != null && this.LicenseAssignmentManager.Equals(licenseManager.LicenseAssignmentManager))) && ((this.Evaluation == null && licenseManager.Evaluation == null) || (this.Evaluation != null && this.Evaluation.Equals(licenseManager.Evaluation))) && ((this.LinkedView == null && licenseManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(licenseManager.LinkedView))));
        }

        public override bool Equals(object licenseManager)
        {
            return Equals(licenseManager as LicenseManager);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + SourceAvailable + "_" + Diagnostics + "_" + FeatureInfo + "_" + LicensedEdition + "_" + Licenses + "_" + LicenseAssignmentManager + "_" + Evaluation + "_" + LinkedView).GetHashCode();
        }
    }

    public class LicenseManager_LinkedView : IEquatable<LicenseManager_LinkedView>
    {
        public LicenseAssignmentManager LicenseAssignmentManager { get; set; }

        public bool Equals(LicenseManager_LinkedView licenseManager_LinkedView)
        {
            return (licenseManager_LinkedView != null && ((this.LicenseAssignmentManager == null && licenseManager_LinkedView.LicenseAssignmentManager == null) || (this.LicenseAssignmentManager != null && this.LicenseAssignmentManager.Equals(licenseManager_LinkedView.LicenseAssignmentManager))));
        }

        public override bool Equals(object licenseManager_LinkedView)
        {
            return Equals(licenseManager_LinkedView as LicenseManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (LicenseAssignmentManager).GetHashCode();
        }
    }

    public class LicenseManagerEvaluationInfo : DynamicData, IEquatable<LicenseManagerEvaluationInfo>
    {
        public KeyAnyValue[] Properties { get; set; }

        public bool Equals(LicenseManagerEvaluationInfo licenseManagerEvaluationInfo)
        {
            return (licenseManagerEvaluationInfo != null && ((this.Properties == null && licenseManagerEvaluationInfo.Properties == null) || (this.Properties != null && licenseManagerEvaluationInfo.Properties != null && Enumerable.SequenceEqual(this.Properties, licenseManagerEvaluationInfo.Properties))));
        }

        public override bool Equals(object licenseManagerEvaluationInfo)
        {
            return Equals(licenseManagerEvaluationInfo as LicenseManagerEvaluationInfo);
        }

        public override int GetHashCode()
        {
            return (Properties).GetHashCode();
        }
    }

    public class LicenseManagerLicenseInfo : DynamicData, IEquatable<LicenseManagerLicenseInfo>
    {
        public string LicenseKey { get; set; }

        public string EditionKey { get; set; }

        public string Name { get; set; }

        public int Total { get; set; }

        public int? Used { get; set; }

        public string CostUnit { get; set; }

        public KeyAnyValue[] Properties { get; set; }

        public KeyValue[] Labels { get; set; }

        public bool Equals(LicenseManagerLicenseInfo licenseManagerLicenseInfo)
        {
            return (licenseManagerLicenseInfo != null && this.LicenseKey == licenseManagerLicenseInfo.LicenseKey && this.EditionKey == licenseManagerLicenseInfo.EditionKey && this.Name == licenseManagerLicenseInfo.Name && this.Total == licenseManagerLicenseInfo.Total && ((this.Used == null && licenseManagerLicenseInfo.Used == null) || (this.Used != null && this.Used.Equals(licenseManagerLicenseInfo.Used))) && this.CostUnit == licenseManagerLicenseInfo.CostUnit && ((this.Properties == null && licenseManagerLicenseInfo.Properties == null) || (this.Properties != null && licenseManagerLicenseInfo.Properties != null && Enumerable.SequenceEqual(this.Properties, licenseManagerLicenseInfo.Properties))) && ((this.Labels == null && licenseManagerLicenseInfo.Labels == null) || (this.Labels != null && licenseManagerLicenseInfo.Labels != null && Enumerable.SequenceEqual(this.Labels, licenseManagerLicenseInfo.Labels))));
        }

        public override bool Equals(object licenseManagerLicenseInfo)
        {
            return Equals(licenseManagerLicenseInfo as LicenseManagerLicenseInfo);
        }

        public override int GetHashCode()
        {
            return (LicenseKey + "_" + EditionKey + "_" + Name + "_" + Total + "_" + Used + "_" + CostUnit + "_" + Properties + "_" + Labels).GetHashCode();
        }
    }

    public class LicenseNonComplianceEvent : LicenseEvent, IEquatable<LicenseNonComplianceEvent>
    {
        public string Url { get; set; }

        public bool Equals(LicenseNonComplianceEvent licenseNonComplianceEvent)
        {
            return (licenseNonComplianceEvent != null && this.Url == licenseNonComplianceEvent.Url);
        }

        public override bool Equals(object licenseNonComplianceEvent)
        {
            return Equals(licenseNonComplianceEvent as LicenseNonComplianceEvent);
        }

        public override int GetHashCode()
        {
            return (Url).GetHashCode();
        }
    }

    public class LicenseReservationInfo : DynamicData, IEquatable<LicenseReservationInfo>
    {
        public string Key { get; set; }

        public LicenseReservationInfoState State { get; set; }

        public int Required { get; set; }

        public bool Equals(LicenseReservationInfo licenseReservationInfo)
        {
            return (licenseReservationInfo != null && this.Key == licenseReservationInfo.Key && this.State == licenseReservationInfo.State && this.Required == licenseReservationInfo.Required);
        }

        public override bool Equals(object licenseReservationInfo)
        {
            return Equals(licenseReservationInfo as LicenseReservationInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + State + "_" + Required).GetHashCode();
        }
    }

    public class LicenseRestricted : NotEnoughLicenses, IEquatable<LicenseRestricted>
    {
        public bool Equals(LicenseRestricted licenseRestricted)
        {
            return (licenseRestricted != null && base.Equals(licenseRestricted));
        }

        public override bool Equals(object licenseRestricted)
        {
            return Equals(licenseRestricted as LicenseRestricted);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseRestrictedEvent : LicenseEvent, IEquatable<LicenseRestrictedEvent>
    {
        public bool Equals(LicenseRestrictedEvent licenseRestrictedEvent)
        {
            return (licenseRestrictedEvent != null && base.Equals(licenseRestrictedEvent));
        }

        public override bool Equals(object licenseRestrictedEvent)
        {
            return Equals(licenseRestrictedEvent as LicenseRestrictedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseServerAvailableEvent : LicenseEvent, IEquatable<LicenseServerAvailableEvent>
    {
        public string LicenseServer { get; set; }

        public bool Equals(LicenseServerAvailableEvent licenseServerAvailableEvent)
        {
            return (licenseServerAvailableEvent != null && this.LicenseServer == licenseServerAvailableEvent.LicenseServer);
        }

        public override bool Equals(object licenseServerAvailableEvent)
        {
            return Equals(licenseServerAvailableEvent as LicenseServerAvailableEvent);
        }

        public override int GetHashCode()
        {
            return (LicenseServer).GetHashCode();
        }
    }

    public class LicenseServerSource : LicenseSource, IEquatable<LicenseServerSource>
    {
        public string LicenseServer { get; set; }

        public bool Equals(LicenseServerSource licenseServerSource)
        {
            return (licenseServerSource != null && this.LicenseServer == licenseServerSource.LicenseServer);
        }

        public override bool Equals(object licenseServerSource)
        {
            return Equals(licenseServerSource as LicenseServerSource);
        }

        public override int GetHashCode()
        {
            return (LicenseServer).GetHashCode();
        }
    }

    public class LicenseServerUnavailable : VimFault, IEquatable<LicenseServerUnavailable>
    {
        public string LicenseServer { get; set; }

        public bool Equals(LicenseServerUnavailable licenseServerUnavailable)
        {
            return (licenseServerUnavailable != null && this.LicenseServer == licenseServerUnavailable.LicenseServer);
        }

        public override bool Equals(object licenseServerUnavailable)
        {
            return Equals(licenseServerUnavailable as LicenseServerUnavailable);
        }

        public override int GetHashCode()
        {
            return (LicenseServer).GetHashCode();
        }
    }

    public class LicenseServerUnavailableEvent : LicenseEvent, IEquatable<LicenseServerUnavailableEvent>
    {
        public string LicenseServer { get; set; }

        public bool Equals(LicenseServerUnavailableEvent licenseServerUnavailableEvent)
        {
            return (licenseServerUnavailableEvent != null && this.LicenseServer == licenseServerUnavailableEvent.LicenseServer);
        }

        public override bool Equals(object licenseServerUnavailableEvent)
        {
            return Equals(licenseServerUnavailableEvent as LicenseServerUnavailableEvent);
        }

        public override int GetHashCode()
        {
            return (LicenseServer).GetHashCode();
        }
    }

    public class LicenseSource : DynamicData, IEquatable<LicenseSource>
    {
        public bool Equals(LicenseSource licenseSource)
        {
            return (licenseSource != null && base.Equals(licenseSource));
        }

        public override bool Equals(object licenseSource)
        {
            return Equals(licenseSource as LicenseSource);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LicenseSourceUnavailable : NotEnoughLicenses, IEquatable<LicenseSourceUnavailable>
    {
        public LicenseSource LicenseSource { get; set; }

        public bool Equals(LicenseSourceUnavailable licenseSourceUnavailable)
        {
            return (licenseSourceUnavailable != null && ((this.LicenseSource == null && licenseSourceUnavailable.LicenseSource == null) || (this.LicenseSource != null && this.LicenseSource.Equals(licenseSourceUnavailable.LicenseSource))));
        }

        public override bool Equals(object licenseSourceUnavailable)
        {
            return Equals(licenseSourceUnavailable as LicenseSourceUnavailable);
        }

        public override int GetHashCode()
        {
            return (LicenseSource).GetHashCode();
        }
    }

    public class LicenseUsageInfo : DynamicData, IEquatable<LicenseUsageInfo>
    {
        public LicenseSource Source { get; set; }

        public bool SourceAvailable { get; set; }

        public LicenseReservationInfo[] ReservationInfo { get; set; }

        public LicenseFeatureInfo[] FeatureInfo { get; set; }

        public bool Equals(LicenseUsageInfo licenseUsageInfo)
        {
            return (licenseUsageInfo != null && ((this.Source == null && licenseUsageInfo.Source == null) || (this.Source != null && this.Source.Equals(licenseUsageInfo.Source))) && this.SourceAvailable == licenseUsageInfo.SourceAvailable && ((this.ReservationInfo == null && licenseUsageInfo.ReservationInfo == null) || (this.ReservationInfo != null && licenseUsageInfo.ReservationInfo != null && Enumerable.SequenceEqual(this.ReservationInfo, licenseUsageInfo.ReservationInfo))) && ((this.FeatureInfo == null && licenseUsageInfo.FeatureInfo == null) || (this.FeatureInfo != null && licenseUsageInfo.FeatureInfo != null && Enumerable.SequenceEqual(this.FeatureInfo, licenseUsageInfo.FeatureInfo))));
        }

        public override bool Equals(object licenseUsageInfo)
        {
            return Equals(licenseUsageInfo as LicenseUsageInfo);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + SourceAvailable + "_" + ReservationInfo + "_" + FeatureInfo).GetHashCode();
        }
    }

    public class LimitExceeded : VimFault, IEquatable<LimitExceeded>
    {
        public string Property { get; set; }

        public int? Limit { get; set; }

        public bool Equals(LimitExceeded limitExceeded)
        {
            return (limitExceeded != null && this.Property == limitExceeded.Property && ((this.Limit == null && limitExceeded.Limit == null) || (this.Limit != null && this.Limit.Equals(limitExceeded.Limit))));
        }

        public override bool Equals(object limitExceeded)
        {
            return Equals(limitExceeded as LimitExceeded);
        }

        public override int GetHashCode()
        {
            return (Property + "_" + Limit).GetHashCode();
        }
    }

    public class LinkDiscoveryProtocolConfig : DynamicData, IEquatable<LinkDiscoveryProtocolConfig>
    {
        public string Protocol { get; set; }

        public string Operation { get; set; }

        public bool Equals(LinkDiscoveryProtocolConfig linkDiscoveryProtocolConfig)
        {
            return (linkDiscoveryProtocolConfig != null && this.Protocol == linkDiscoveryProtocolConfig.Protocol && this.Operation == linkDiscoveryProtocolConfig.Operation);
        }

        public override bool Equals(object linkDiscoveryProtocolConfig)
        {
            return Equals(linkDiscoveryProtocolConfig as LinkDiscoveryProtocolConfig);
        }

        public override int GetHashCode()
        {
            return (Protocol + "_" + Operation).GetHashCode();
        }
    }

    public class LinkLayerDiscoveryProtocolInfo : DynamicData, IEquatable<LinkLayerDiscoveryProtocolInfo>
    {
        public string ChassisId { get; set; }

        public string PortId { get; set; }

        public int TimeToLive { get; set; }

        public KeyAnyValue[] Parameter { get; set; }

        public bool Equals(LinkLayerDiscoveryProtocolInfo linkLayerDiscoveryProtocolInfo)
        {
            return (linkLayerDiscoveryProtocolInfo != null && this.ChassisId == linkLayerDiscoveryProtocolInfo.ChassisId && this.PortId == linkLayerDiscoveryProtocolInfo.PortId && this.TimeToLive == linkLayerDiscoveryProtocolInfo.TimeToLive && ((this.Parameter == null && linkLayerDiscoveryProtocolInfo.Parameter == null) || (this.Parameter != null && linkLayerDiscoveryProtocolInfo.Parameter != null && Enumerable.SequenceEqual(this.Parameter, linkLayerDiscoveryProtocolInfo.Parameter))));
        }

        public override bool Equals(object linkLayerDiscoveryProtocolInfo)
        {
            return Equals(linkLayerDiscoveryProtocolInfo as LinkLayerDiscoveryProtocolInfo);
        }

        public override int GetHashCode()
        {
            return (ChassisId + "_" + PortId + "_" + TimeToLive + "_" + Parameter).GetHashCode();
        }
    }

    public class LinkProfile : ApplyProfile, IEquatable<LinkProfile>
    {
        public bool Equals(LinkProfile linkProfile)
        {
            return (linkProfile != null && base.Equals(linkProfile));
        }

        public override bool Equals(object linkProfile)
        {
            return Equals(linkProfile as LinkProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LinuxVolumeNotClean : CustomizationFault, IEquatable<LinuxVolumeNotClean>
    {
        public bool Equals(LinuxVolumeNotClean linuxVolumeNotClean)
        {
            return (linuxVolumeNotClean != null && base.Equals(linuxVolumeNotClean));
        }

        public override bool Equals(object linuxVolumeNotClean)
        {
            return Equals(linuxVolumeNotClean as LinuxVolumeNotClean);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ListView : ManagedObjectView, IEquatable<ListView>
    {
        public ManagedObjectReference[] ModifyListView(ManagedObjectReference[] add, ManagedObjectReference[] remove)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference[] ResetListView(ManagedObjectReference[] obj)
        {
            return default(ManagedObjectReference[]);
        }

        public void ResetListViewFromView(ManagedObjectReference view)
        {
        }

        public bool Equals(ListView listView)
        {
            return (listView != null && base.Equals(listView));
        }

        public override bool Equals(object listView)
        {
            return Equals(listView as ListView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LocalDatastoreCreatedEvent : HostEvent, IEquatable<LocalDatastoreCreatedEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public string DatastoreUrl { get; set; }

        public bool Equals(LocalDatastoreCreatedEvent localDatastoreCreatedEvent)
        {
            return (localDatastoreCreatedEvent != null && ((this.Datastore == null && localDatastoreCreatedEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(localDatastoreCreatedEvent.Datastore))) && this.DatastoreUrl == localDatastoreCreatedEvent.DatastoreUrl);
        }

        public override bool Equals(object localDatastoreCreatedEvent)
        {
            return Equals(localDatastoreCreatedEvent as LocalDatastoreCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + DatastoreUrl).GetHashCode();
        }
    }

    public class LocalDatastoreInfo : DatastoreInfo, IEquatable<LocalDatastoreInfo>
    {
        public string Path { get; set; }

        public bool Equals(LocalDatastoreInfo localDatastoreInfo)
        {
            return (localDatastoreInfo != null && this.Path == localDatastoreInfo.Path);
        }

        public override bool Equals(object localDatastoreInfo)
        {
            return Equals(localDatastoreInfo as LocalDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Path).GetHashCode();
        }
    }

    public class LocalizableMessage : DynamicData, IEquatable<LocalizableMessage>
    {
        public string Key { get; set; }

        public KeyAnyValue[] Arg { get; set; }

        public string Message { get; set; }

        public bool Equals(LocalizableMessage localizableMessage)
        {
            return (localizableMessage != null && this.Key == localizableMessage.Key && ((this.Arg == null && localizableMessage.Arg == null) || (this.Arg != null && localizableMessage.Arg != null && Enumerable.SequenceEqual(this.Arg, localizableMessage.Arg))) && this.Message == localizableMessage.Message);
        }

        public override bool Equals(object localizableMessage)
        {
            return Equals(localizableMessage as LocalizableMessage);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Arg + "_" + Message).GetHashCode();
        }
    }

    public class LocalizationManager : ViewBase, IEquatable<LocalizationManager>
    {
        public LocalizationManagerMessageCatalog[] Catalog { get; set; }

        public bool Equals(LocalizationManager localizationManager)
        {
            return (localizationManager != null && ((this.Catalog == null && localizationManager.Catalog == null) || (this.Catalog != null && localizationManager.Catalog != null && Enumerable.SequenceEqual(this.Catalog, localizationManager.Catalog))));
        }

        public override bool Equals(object localizationManager)
        {
            return Equals(localizationManager as LocalizationManager);
        }

        public override int GetHashCode()
        {
            return (Catalog).GetHashCode();
        }
    }

    public class LocalizationManagerMessageCatalog : DynamicData, IEquatable<LocalizationManagerMessageCatalog>
    {
        public string ModuleName { get; set; }

        public string CatalogName { get; set; }

        public string Locale { get; set; }

        public string CatalogUri { get; set; }

        public DateTime? LastModified { get; set; }

        public string Md5sum { get; set; }

        public string Version { get; set; }

        public bool Equals(LocalizationManagerMessageCatalog localizationManagerMessageCatalog)
        {
            return (localizationManagerMessageCatalog != null && this.ModuleName == localizationManagerMessageCatalog.ModuleName && this.CatalogName == localizationManagerMessageCatalog.CatalogName && this.Locale == localizationManagerMessageCatalog.Locale && this.CatalogUri == localizationManagerMessageCatalog.CatalogUri && ((this.LastModified == null && localizationManagerMessageCatalog.LastModified == null) || (this.LastModified != null && this.LastModified.Equals(localizationManagerMessageCatalog.LastModified))) && this.Md5sum == localizationManagerMessageCatalog.Md5sum && this.Version == localizationManagerMessageCatalog.Version);
        }

        public override bool Equals(object localizationManagerMessageCatalog)
        {
            return Equals(localizationManagerMessageCatalog as LocalizationManagerMessageCatalog);
        }

        public override int GetHashCode()
        {
            return (ModuleName + "_" + CatalogName + "_" + Locale + "_" + CatalogUri + "_" + LastModified + "_" + Md5sum + "_" + Version).GetHashCode();
        }
    }

    public class LocalizedMethodFault : DynamicData, IEquatable<LocalizedMethodFault>
    {
        public MethodFault Fault { get; set; }

        public string LocalizedMessage { get; set; }

        public bool Equals(LocalizedMethodFault localizedMethodFault)
        {
            return (localizedMethodFault != null && ((this.Fault == null && localizedMethodFault.Fault == null) || (this.Fault != null && this.Fault.Equals(localizedMethodFault.Fault))) && this.LocalizedMessage == localizedMethodFault.LocalizedMessage);
        }

        public override bool Equals(object localizedMethodFault)
        {
            return Equals(localizedMethodFault as LocalizedMethodFault);
        }

        public override int GetHashCode()
        {
            return (Fault + "_" + LocalizedMessage).GetHashCode();
        }
    }

    public class LocalLicenseSource : LicenseSource, IEquatable<LocalLicenseSource>
    {
        public string LicenseKeys { get; set; }

        public bool Equals(LocalLicenseSource localLicenseSource)
        {
            return (localLicenseSource != null && this.LicenseKeys == localLicenseSource.LicenseKeys);
        }

        public override bool Equals(object localLicenseSource)
        {
            return Equals(localLicenseSource as LocalLicenseSource);
        }

        public override int GetHashCode()
        {
            return (LicenseKeys).GetHashCode();
        }
    }

    public class LocalTSMEnabledEvent : HostEvent, IEquatable<LocalTSMEnabledEvent>
    {
        public bool Equals(LocalTSMEnabledEvent localTSMEnabledEvent)
        {
            return (localTSMEnabledEvent != null && base.Equals(localTSMEnabledEvent));
        }

        public override bool Equals(object localTSMEnabledEvent)
        {
            return Equals(localTSMEnabledEvent as LocalTSMEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LockerMisconfiguredEvent : Event, IEquatable<LockerMisconfiguredEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(LockerMisconfiguredEvent lockerMisconfiguredEvent)
        {
            return (lockerMisconfiguredEvent != null && ((this.Datastore == null && lockerMisconfiguredEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(lockerMisconfiguredEvent.Datastore))));
        }

        public override bool Equals(object lockerMisconfiguredEvent)
        {
            return Equals(lockerMisconfiguredEvent as LockerMisconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class LockerReconfiguredEvent : Event, IEquatable<LockerReconfiguredEvent>
    {
        public DatastoreEventArgument OldDatastore { get; set; }

        public DatastoreEventArgument NewDatastore { get; set; }

        public bool Equals(LockerReconfiguredEvent lockerReconfiguredEvent)
        {
            return (lockerReconfiguredEvent != null && ((this.OldDatastore == null && lockerReconfiguredEvent.OldDatastore == null) || (this.OldDatastore != null && this.OldDatastore.Equals(lockerReconfiguredEvent.OldDatastore))) && ((this.NewDatastore == null && lockerReconfiguredEvent.NewDatastore == null) || (this.NewDatastore != null && this.NewDatastore.Equals(lockerReconfiguredEvent.NewDatastore))));
        }

        public override bool Equals(object lockerReconfiguredEvent)
        {
            return Equals(lockerReconfiguredEvent as LockerReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (OldDatastore + "_" + NewDatastore).GetHashCode();
        }
    }

    public class LogBundlingFailed : VimFault, IEquatable<LogBundlingFailed>
    {
        public bool Equals(LogBundlingFailed logBundlingFailed)
        {
            return (logBundlingFailed != null && base.Equals(logBundlingFailed));
        }

        public override bool Equals(object logBundlingFailed)
        {
            return Equals(logBundlingFailed as LogBundlingFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class LongOption : OptionType, IEquatable<LongOption>
    {
        public long Min { get; set; }

        public long Max { get; set; }

        public long DefaultValue { get; set; }

        public bool Equals(LongOption longOption)
        {
            return (longOption != null && this.Min == longOption.Min && this.Max == longOption.Max && this.DefaultValue == longOption.DefaultValue);
        }

        public override bool Equals(object longOption)
        {
            return Equals(longOption as LongOption);
        }

        public override int GetHashCode()
        {
            return (Min + "_" + Max + "_" + DefaultValue).GetHashCode();
        }
    }

    public class LongPolicy : InheritablePolicy, IEquatable<LongPolicy>
    {
        public long? Value { get; set; }

        public bool Equals(LongPolicy longPolicy)
        {
            return (longPolicy != null && ((this.Value == null && longPolicy.Value == null) || (this.Value != null && this.Value.Equals(longPolicy.Value))));
        }

        public override bool Equals(object longPolicy)
        {
            return Equals(longPolicy as LongPolicy);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class MacAddress : NegatableExpression, IEquatable<MacAddress>
    {
        public bool Equals(MacAddress macAddress)
        {
            return (macAddress != null && base.Equals(macAddress));
        }

        public override bool Equals(object macAddress)
        {
            return Equals(macAddress as MacAddress);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MacRange : MacAddress, IEquatable<MacRange>
    {
        public string Address { get; set; }

        public string Mask { get; set; }

        public bool Equals(MacRange macRange)
        {
            return (macRange != null && this.Address == macRange.Address && this.Mask == macRange.Mask);
        }

        public override bool Equals(object macRange)
        {
            return Equals(macRange as MacRange);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + Mask).GetHashCode();
        }
    }

    public class MaintenanceModeFileMove : MigrationFault, IEquatable<MaintenanceModeFileMove>
    {
        public bool Equals(MaintenanceModeFileMove maintenanceModeFileMove)
        {
            return (maintenanceModeFileMove != null && base.Equals(maintenanceModeFileMove));
        }

        public override bool Equals(object maintenanceModeFileMove)
        {
            return Equals(maintenanceModeFileMove as MaintenanceModeFileMove);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ManagedByInfo : DynamicData, IEquatable<ManagedByInfo>
    {
        public string ExtensionKey { get; set; }

        public string Type { get; set; }

        public bool Equals(ManagedByInfo managedByInfo)
        {
            return (managedByInfo != null && this.ExtensionKey == managedByInfo.ExtensionKey && this.Type == managedByInfo.Type);
        }

        public override bool Equals(object managedByInfo)
        {
            return Equals(managedByInfo as ManagedByInfo);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + Type).GetHashCode();
        }
    }

    public class ManagedEntity : EntityViewBase, IEquatable<ManagedEntity>
    {
        public ManagedObjectReference Parent { get; set; }

        public CustomFieldValue[] CustomValue { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public ManagedEntityStatus ConfigStatus { get; set; }

        public Event[] ConfigIssue { get; set; }

        public int[] EffectiveRole { get; set; }

        public Permission[] Permission { get; set; }

        public string Name { get; set; }

        public string[] DisabledMethod { get; set; }

        public ManagedObjectReference[] RecentTask { get; set; }

        public AlarmState[] DeclaredAlarmState { get; set; }

        public AlarmState[] TriggeredAlarmState { get; set; }

        public bool AlarmActionsEnabled { get; set; }

        public Tag[] Tag { get; set; }

        public ManagedEntity_LinkedView LinkedView { get; set; }

        public void Reload()
        {
        }

        public ManagedObjectReference Rename_Task(string newName)
        {
            return default(ManagedObjectReference);
        }

        public void Rename(string newName)
        {
        }

        public ManagedObjectReference Destroy_Task()
        {
            return default(ManagedObjectReference);
        }

        public void Destroy()
        {
        }

        public bool Equals(ManagedEntity managedEntity)
        {
            return (managedEntity != null && ((this.Parent == null && managedEntity.Parent == null) || (this.Parent != null && this.Parent.Equals(managedEntity.Parent))) && ((this.CustomValue == null && managedEntity.CustomValue == null) || (this.CustomValue != null && managedEntity.CustomValue != null && Enumerable.SequenceEqual(this.CustomValue, managedEntity.CustomValue))) && this.OverallStatus == managedEntity.OverallStatus && this.ConfigStatus == managedEntity.ConfigStatus && ((this.ConfigIssue == null && managedEntity.ConfigIssue == null) || (this.ConfigIssue != null && managedEntity.ConfigIssue != null && Enumerable.SequenceEqual(this.ConfigIssue, managedEntity.ConfigIssue))) && ((this.EffectiveRole == null && managedEntity.EffectiveRole == null) || (this.EffectiveRole != null && managedEntity.EffectiveRole != null && Enumerable.SequenceEqual(this.EffectiveRole, managedEntity.EffectiveRole))) && ((this.Permission == null && managedEntity.Permission == null) || (this.Permission != null && managedEntity.Permission != null && Enumerable.SequenceEqual(this.Permission, managedEntity.Permission))) && this.Name == managedEntity.Name && ((this.DisabledMethod == null && managedEntity.DisabledMethod == null) || (this.DisabledMethod != null && managedEntity.DisabledMethod != null && Enumerable.SequenceEqual(this.DisabledMethod, managedEntity.DisabledMethod))) && ((this.RecentTask == null && managedEntity.RecentTask == null) || (this.RecentTask != null && managedEntity.RecentTask != null && Enumerable.SequenceEqual(this.RecentTask, managedEntity.RecentTask))) && ((this.DeclaredAlarmState == null && managedEntity.DeclaredAlarmState == null) || (this.DeclaredAlarmState != null && managedEntity.DeclaredAlarmState != null && Enumerable.SequenceEqual(this.DeclaredAlarmState, managedEntity.DeclaredAlarmState))) && ((this.TriggeredAlarmState == null && managedEntity.TriggeredAlarmState == null) || (this.TriggeredAlarmState != null && managedEntity.TriggeredAlarmState != null && Enumerable.SequenceEqual(this.TriggeredAlarmState, managedEntity.TriggeredAlarmState))) && this.AlarmActionsEnabled == managedEntity.AlarmActionsEnabled && ((this.Tag == null && managedEntity.Tag == null) || (this.Tag != null && managedEntity.Tag != null && Enumerable.SequenceEqual(this.Tag, managedEntity.Tag))) && ((this.LinkedView == null && managedEntity.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(managedEntity.LinkedView))));
        }

        public override bool Equals(object managedEntity)
        {
            return Equals(managedEntity as ManagedEntity);
        }

        public override int GetHashCode()
        {
            return (Parent + "_" + CustomValue + "_" + OverallStatus + "_" + ConfigStatus + "_" + ConfigIssue + "_" + EffectiveRole + "_" + Permission + "_" + Name + "_" + DisabledMethod + "_" + RecentTask + "_" + DeclaredAlarmState + "_" + TriggeredAlarmState + "_" + AlarmActionsEnabled + "_" + Tag + "_" + LinkedView).GetHashCode();
        }
    }

    public class ManagedEntity_LinkedView : IEquatable<ManagedEntity_LinkedView>
    {
        public ManagedEntity Parent { get; set; }

        public Task[] RecentTask { get; set; }

        public bool Equals(ManagedEntity_LinkedView managedEntity_LinkedView)
        {
            return (managedEntity_LinkedView != null && ((this.Parent == null && managedEntity_LinkedView.Parent == null) || (this.Parent != null && this.Parent.Equals(managedEntity_LinkedView.Parent))) && ((this.RecentTask == null && managedEntity_LinkedView.RecentTask == null) || (this.RecentTask != null && managedEntity_LinkedView.RecentTask != null && Enumerable.SequenceEqual(this.RecentTask, managedEntity_LinkedView.RecentTask))));
        }

        public override bool Equals(object managedEntity_LinkedView)
        {
            return Equals(managedEntity_LinkedView as ManagedEntity_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Parent + "_" + RecentTask).GetHashCode();
        }
    }

    public class ManagedEntityEventArgument : EntityEventArgument, IEquatable<ManagedEntityEventArgument>
    {
        public ManagedObjectReference Entity { get; set; }

        public ManagedEntityEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(ManagedEntityEventArgument managedEntityEventArgument)
        {
            return (managedEntityEventArgument != null && ((this.Entity == null && managedEntityEventArgument.Entity == null) || (this.Entity != null && this.Entity.Equals(managedEntityEventArgument.Entity))) && ((this.LinkedView == null && managedEntityEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(managedEntityEventArgument.LinkedView))));
        }

        public override bool Equals(object managedEntityEventArgument)
        {
            return Equals(managedEntityEventArgument as ManagedEntityEventArgument);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class ManagedEntityEventArgument_LinkedView : IEquatable<ManagedEntityEventArgument_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(ManagedEntityEventArgument_LinkedView managedEntityEventArgument_LinkedView)
        {
            return (managedEntityEventArgument_LinkedView != null && ((this.Entity == null && managedEntityEventArgument_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(managedEntityEventArgument_LinkedView.Entity))));
        }

        public override bool Equals(object managedEntityEventArgument_LinkedView)
        {
            return Equals(managedEntityEventArgument_LinkedView as ManagedEntityEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class ManagedObjectNotFound : RuntimeFault, IEquatable<ManagedObjectNotFound>
    {
        public ManagedObjectReference Obj { get; set; }

        public bool Equals(ManagedObjectNotFound managedObjectNotFound)
        {
            return (managedObjectNotFound != null && ((this.Obj == null && managedObjectNotFound.Obj == null) || (this.Obj != null && this.Obj.Equals(managedObjectNotFound.Obj))));
        }

        public override bool Equals(object managedObjectNotFound)
        {
            return Equals(managedObjectNotFound as ManagedObjectNotFound);
        }

        public override int GetHashCode()
        {
            return (Obj).GetHashCode();
        }
    }

    public class ManagedObjectReference : IEquatable<ManagedObjectReference>
    {
        public string Type { get; set; }

        public string Value { get; set; }

        public bool Equals(ManagedObjectReference managedObjectReference)
        {
            return (managedObjectReference != null && this.Type == managedObjectReference.Type && this.Value == managedObjectReference.Value);
        }

        public override bool Equals(object managedObjectReference)
        {
            return Equals(managedObjectReference as ManagedObjectReference);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Value).GetHashCode();
        }

        public override string ToString()
        {
            return (Type + "_" + Value);
        }
    }

    public class ManagedObjectView : View, IEquatable<ManagedObjectView>
    {
        public ManagedObjectReference[] View { get; set; }

        public bool Equals(ManagedObjectView managedObjectView)
        {
            return (managedObjectView != null && ((this.View == null && managedObjectView.View == null) || (this.View != null && managedObjectView.View != null && Enumerable.SequenceEqual(this.View, managedObjectView.View))));
        }

        public override bool Equals(object managedObjectView)
        {
            return Equals(managedObjectView as ManagedObjectView);
        }

        public override int GetHashCode()
        {
            return (View).GetHashCode();
        }
    }

    public class MemoryFileFormatNotSupportedByDatastore : UnsupportedDatastore, IEquatable<MemoryFileFormatNotSupportedByDatastore>
    {
        public string DatastoreName { get; set; }

        public string Type { get; set; }

        public new MemoryFileFormatNotSupportedByDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(MemoryFileFormatNotSupportedByDatastore memoryFileFormatNotSupportedByDatastore)
        {
            return (memoryFileFormatNotSupportedByDatastore != null && this.DatastoreName == memoryFileFormatNotSupportedByDatastore.DatastoreName && this.Type == memoryFileFormatNotSupportedByDatastore.Type && ((this.LinkedView == null && memoryFileFormatNotSupportedByDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(memoryFileFormatNotSupportedByDatastore.LinkedView))));
        }

        public override bool Equals(object memoryFileFormatNotSupportedByDatastore)
        {
            return Equals(memoryFileFormatNotSupportedByDatastore as MemoryFileFormatNotSupportedByDatastore);
        }

        public override int GetHashCode()
        {
            return (DatastoreName + "_" + Type + "_" + LinkedView).GetHashCode();
        }
    }

    public class MemoryFileFormatNotSupportedByDatastore_LinkedView : UnsupportedDatastore_LinkedView, IEquatable<MemoryFileFormatNotSupportedByDatastore_LinkedView>
    {
        public bool Equals(MemoryFileFormatNotSupportedByDatastore_LinkedView memoryFileFormatNotSupportedByDatastore_LinkedView)
        {
            return (memoryFileFormatNotSupportedByDatastore_LinkedView != null && base.Equals(memoryFileFormatNotSupportedByDatastore_LinkedView));
        }

        public override bool Equals(object memoryFileFormatNotSupportedByDatastore_LinkedView)
        {
            return Equals(memoryFileFormatNotSupportedByDatastore_LinkedView as MemoryFileFormatNotSupportedByDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MemoryHotPlugNotSupported : VmConfigFault, IEquatable<MemoryHotPlugNotSupported>
    {
        public bool Equals(MemoryHotPlugNotSupported memoryHotPlugNotSupported)
        {
            return (memoryHotPlugNotSupported != null && base.Equals(memoryHotPlugNotSupported));
        }

        public override bool Equals(object memoryHotPlugNotSupported)
        {
            return Equals(memoryHotPlugNotSupported as MemoryHotPlugNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MemorySizeNotRecommended : VirtualHardwareCompatibilityIssue, IEquatable<MemorySizeNotRecommended>
    {
        public int MemorySizeMB { get; set; }

        public int MinMemorySizeMB { get; set; }

        public int MaxMemorySizeMB { get; set; }

        public bool Equals(MemorySizeNotRecommended memorySizeNotRecommended)
        {
            return (memorySizeNotRecommended != null && this.MemorySizeMB == memorySizeNotRecommended.MemorySizeMB && this.MinMemorySizeMB == memorySizeNotRecommended.MinMemorySizeMB && this.MaxMemorySizeMB == memorySizeNotRecommended.MaxMemorySizeMB);
        }

        public override bool Equals(object memorySizeNotRecommended)
        {
            return Equals(memorySizeNotRecommended as MemorySizeNotRecommended);
        }

        public override int GetHashCode()
        {
            return (MemorySizeMB + "_" + MinMemorySizeMB + "_" + MaxMemorySizeMB).GetHashCode();
        }
    }

    public class MemorySizeNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<MemorySizeNotSupported>
    {
        public int MemorySizeMB { get; set; }

        public int MinMemorySizeMB { get; set; }

        public int MaxMemorySizeMB { get; set; }

        public bool Equals(MemorySizeNotSupported memorySizeNotSupported)
        {
            return (memorySizeNotSupported != null && this.MemorySizeMB == memorySizeNotSupported.MemorySizeMB && this.MinMemorySizeMB == memorySizeNotSupported.MinMemorySizeMB && this.MaxMemorySizeMB == memorySizeNotSupported.MaxMemorySizeMB);
        }

        public override bool Equals(object memorySizeNotSupported)
        {
            return Equals(memorySizeNotSupported as MemorySizeNotSupported);
        }

        public override int GetHashCode()
        {
            return (MemorySizeMB + "_" + MinMemorySizeMB + "_" + MaxMemorySizeMB).GetHashCode();
        }
    }

    public class MemorySizeNotSupportedByDatastore : VirtualHardwareCompatibilityIssue, IEquatable<MemorySizeNotSupportedByDatastore>
    {
        public ManagedObjectReference Datastore { get; set; }

        public int MemorySizeMB { get; set; }

        public int MaxMemorySizeMB { get; set; }

        public MemorySizeNotSupportedByDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(MemorySizeNotSupportedByDatastore memorySizeNotSupportedByDatastore)
        {
            return (memorySizeNotSupportedByDatastore != null && ((this.Datastore == null && memorySizeNotSupportedByDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(memorySizeNotSupportedByDatastore.Datastore))) && this.MemorySizeMB == memorySizeNotSupportedByDatastore.MemorySizeMB && this.MaxMemorySizeMB == memorySizeNotSupportedByDatastore.MaxMemorySizeMB && ((this.LinkedView == null && memorySizeNotSupportedByDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(memorySizeNotSupportedByDatastore.LinkedView))));
        }

        public override bool Equals(object memorySizeNotSupportedByDatastore)
        {
            return Equals(memorySizeNotSupportedByDatastore as MemorySizeNotSupportedByDatastore);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + MemorySizeMB + "_" + MaxMemorySizeMB + "_" + LinkedView).GetHashCode();
        }
    }

    public class MemorySizeNotSupportedByDatastore_LinkedView : IEquatable<MemorySizeNotSupportedByDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(MemorySizeNotSupportedByDatastore_LinkedView memorySizeNotSupportedByDatastore_LinkedView)
        {
            return (memorySizeNotSupportedByDatastore_LinkedView != null && ((this.Datastore == null && memorySizeNotSupportedByDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(memorySizeNotSupportedByDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object memorySizeNotSupportedByDatastore_LinkedView)
        {
            return Equals(memorySizeNotSupportedByDatastore_LinkedView as MemorySizeNotSupportedByDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class MemorySnapshotOnIndependentDisk : SnapshotFault, IEquatable<MemorySnapshotOnIndependentDisk>
    {
        public bool Equals(MemorySnapshotOnIndependentDisk memorySnapshotOnIndependentDisk)
        {
            return (memorySnapshotOnIndependentDisk != null && base.Equals(memorySnapshotOnIndependentDisk));
        }

        public override bool Equals(object memorySnapshotOnIndependentDisk)
        {
            return Equals(memorySnapshotOnIndependentDisk as MemorySnapshotOnIndependentDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MessageBusProxy : ViewBase, IEquatable<MessageBusProxy>
    {
        public bool Equals(MessageBusProxy messageBusProxy)
        {
            return (messageBusProxy != null && base.Equals(messageBusProxy));
        }

        public override bool Equals(object messageBusProxy)
        {
            return Equals(messageBusProxy as MessageBusProxy);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MethodAction : Action, IEquatable<MethodAction>
    {
        public string Name { get; set; }

        public MethodActionArgument[] Argument { get; set; }

        public bool Equals(MethodAction methodAction)
        {
            return (methodAction != null && this.Name == methodAction.Name && ((this.Argument == null && methodAction.Argument == null) || (this.Argument != null && methodAction.Argument != null && Enumerable.SequenceEqual(this.Argument, methodAction.Argument))));
        }

        public override bool Equals(object methodAction)
        {
            return Equals(methodAction as MethodAction);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Argument).GetHashCode();
        }
    }

    public class MethodActionArgument : DynamicData, IEquatable<MethodActionArgument>
    {
        public object Value { get; set; }

        public bool Equals(MethodActionArgument methodActionArgument)
        {
            return (methodActionArgument != null && ((this.Value == null && methodActionArgument.Value == null) || (this.Value != null && this.Value.Equals(methodActionArgument.Value))));
        }

        public override bool Equals(object methodActionArgument)
        {
            return Equals(methodActionArgument as MethodActionArgument);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class MethodAlreadyDisabledFault : RuntimeFault, IEquatable<MethodAlreadyDisabledFault>
    {
        public string SourceId { get; set; }

        public bool Equals(MethodAlreadyDisabledFault methodAlreadyDisabledFault)
        {
            return (methodAlreadyDisabledFault != null && this.SourceId == methodAlreadyDisabledFault.SourceId);
        }

        public override bool Equals(object methodAlreadyDisabledFault)
        {
            return Equals(methodAlreadyDisabledFault as MethodAlreadyDisabledFault);
        }

        public override int GetHashCode()
        {
            return (SourceId).GetHashCode();
        }
    }

    public class MethodDescription : Description, IEquatable<MethodDescription>
    {
        public string Key { get; set; }

        public bool Equals(MethodDescription methodDescription)
        {
            return (methodDescription != null && this.Key == methodDescription.Key);
        }

        public override bool Equals(object methodDescription)
        {
            return Equals(methodDescription as MethodDescription);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class MethodDisabled : RuntimeFault, IEquatable<MethodDisabled>
    {
        public string Source { get; set; }

        public bool Equals(MethodDisabled methodDisabled)
        {
            return (methodDisabled != null && this.Source == methodDisabled.Source);
        }

        public override bool Equals(object methodDisabled)
        {
            return Equals(methodDisabled as MethodDisabled);
        }

        public override int GetHashCode()
        {
            return (Source).GetHashCode();
        }
    }

    public class MethodFault : IEquatable<MethodFault>
    {
        public LocalizedMethodFault FaultCause { get; set; }

        public LocalizableMessage[] FaultMessage { get; set; }

        public bool Equals(MethodFault methodFault)
        {
            return (methodFault != null && ((this.FaultCause == null && methodFault.FaultCause == null) || (this.FaultCause != null && this.FaultCause.Equals(methodFault.FaultCause))) && ((this.FaultMessage == null && methodFault.FaultMessage == null) || (this.FaultMessage != null && methodFault.FaultMessage != null && Enumerable.SequenceEqual(this.FaultMessage, methodFault.FaultMessage))));
        }

        public override bool Equals(object methodFault)
        {
            return Equals(methodFault as MethodFault);
        }

        public override int GetHashCode()
        {
            return (FaultCause + "_" + FaultMessage).GetHashCode();
        }
    }

    public class MethodNotFound : InvalidRequest, IEquatable<MethodNotFound>
    {
        public ManagedObjectReference Receiver { get; set; }

        public string Method { get; set; }

        public bool Equals(MethodNotFound methodNotFound)
        {
            return (methodNotFound != null && ((this.Receiver == null && methodNotFound.Receiver == null) || (this.Receiver != null && this.Receiver.Equals(methodNotFound.Receiver))) && this.Method == methodNotFound.Method);
        }

        public override bool Equals(object methodNotFound)
        {
            return Equals(methodNotFound as MethodNotFound);
        }

        public override int GetHashCode()
        {
            return (Receiver + "_" + Method).GetHashCode();
        }
    }

    public class MetricAlarmExpression : AlarmExpression, IEquatable<MetricAlarmExpression>
    {
        public MetricAlarmOperator Operator { get; set; }

        public string Type { get; set; }

        public PerfMetricId Metric { get; set; }

        public int? Yellow { get; set; }

        public int? YellowInterval { get; set; }

        public int? Red { get; set; }

        public int? RedInterval { get; set; }

        public bool Equals(MetricAlarmExpression metricAlarmExpression)
        {
            return (metricAlarmExpression != null && this.Operator == metricAlarmExpression.Operator && this.Type == metricAlarmExpression.Type && ((this.Metric == null && metricAlarmExpression.Metric == null) || (this.Metric != null && this.Metric.Equals(metricAlarmExpression.Metric))) && ((this.Yellow == null && metricAlarmExpression.Yellow == null) || (this.Yellow != null && this.Yellow.Equals(metricAlarmExpression.Yellow))) && ((this.YellowInterval == null && metricAlarmExpression.YellowInterval == null) || (this.YellowInterval != null && this.YellowInterval.Equals(metricAlarmExpression.YellowInterval))) && ((this.Red == null && metricAlarmExpression.Red == null) || (this.Red != null && this.Red.Equals(metricAlarmExpression.Red))) && ((this.RedInterval == null && metricAlarmExpression.RedInterval == null) || (this.RedInterval != null && this.RedInterval.Equals(metricAlarmExpression.RedInterval))));
        }

        public override bool Equals(object metricAlarmExpression)
        {
            return Equals(metricAlarmExpression as MetricAlarmExpression);
        }

        public override int GetHashCode()
        {
            return (Operator + "_" + Type + "_" + Metric + "_" + Yellow + "_" + YellowInterval + "_" + Red + "_" + RedInterval).GetHashCode();
        }
    }

    public class MigrationDisabled : MigrationFault, IEquatable<MigrationDisabled>
    {
        public bool Equals(MigrationDisabled migrationDisabled)
        {
            return (migrationDisabled != null && base.Equals(migrationDisabled));
        }

        public override bool Equals(object migrationDisabled)
        {
            return Equals(migrationDisabled as MigrationDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MigrationErrorEvent : MigrationEvent, IEquatable<MigrationErrorEvent>
    {
        public bool Equals(MigrationErrorEvent migrationErrorEvent)
        {
            return (migrationErrorEvent != null && base.Equals(migrationErrorEvent));
        }

        public override bool Equals(object migrationErrorEvent)
        {
            return Equals(migrationErrorEvent as MigrationErrorEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MigrationEvent : VmEvent, IEquatable<MigrationEvent>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(MigrationEvent migrationEvent)
        {
            return (migrationEvent != null && ((this.Fault == null && migrationEvent.Fault == null) || (this.Fault != null && this.Fault.Equals(migrationEvent.Fault))));
        }

        public override bool Equals(object migrationEvent)
        {
            return Equals(migrationEvent as MigrationEvent);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class MigrationFault : VimFault, IEquatable<MigrationFault>
    {
        public bool Equals(MigrationFault migrationFault)
        {
            return (migrationFault != null && base.Equals(migrationFault));
        }

        public override bool Equals(object migrationFault)
        {
            return Equals(migrationFault as MigrationFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MigrationFeatureNotSupported : MigrationFault, IEquatable<MigrationFeatureNotSupported>
    {
        public bool AtSourceHost { get; set; }

        public string FailedHostName { get; set; }

        public ManagedObjectReference FailedHost { get; set; }

        public MigrationFeatureNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(MigrationFeatureNotSupported migrationFeatureNotSupported)
        {
            return (migrationFeatureNotSupported != null && this.AtSourceHost == migrationFeatureNotSupported.AtSourceHost && this.FailedHostName == migrationFeatureNotSupported.FailedHostName && ((this.FailedHost == null && migrationFeatureNotSupported.FailedHost == null) || (this.FailedHost != null && this.FailedHost.Equals(migrationFeatureNotSupported.FailedHost))) && ((this.LinkedView == null && migrationFeatureNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(migrationFeatureNotSupported.LinkedView))));
        }

        public override bool Equals(object migrationFeatureNotSupported)
        {
            return Equals(migrationFeatureNotSupported as MigrationFeatureNotSupported);
        }

        public override int GetHashCode()
        {
            return (AtSourceHost + "_" + FailedHostName + "_" + FailedHost + "_" + LinkedView).GetHashCode();
        }
    }

    public class MigrationFeatureNotSupported_LinkedView : IEquatable<MigrationFeatureNotSupported_LinkedView>
    {
        public HostSystem FailedHost { get; set; }

        public bool Equals(MigrationFeatureNotSupported_LinkedView migrationFeatureNotSupported_LinkedView)
        {
            return (migrationFeatureNotSupported_LinkedView != null && ((this.FailedHost == null && migrationFeatureNotSupported_LinkedView.FailedHost == null) || (this.FailedHost != null && this.FailedHost.Equals(migrationFeatureNotSupported_LinkedView.FailedHost))));
        }

        public override bool Equals(object migrationFeatureNotSupported_LinkedView)
        {
            return Equals(migrationFeatureNotSupported_LinkedView as MigrationFeatureNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return (FailedHost).GetHashCode();
        }
    }

    public class MigrationHostErrorEvent : MigrationEvent, IEquatable<MigrationHostErrorEvent>
    {
        public HostEventArgument DstHost { get; set; }

        public bool Equals(MigrationHostErrorEvent migrationHostErrorEvent)
        {
            return (migrationHostErrorEvent != null && ((this.DstHost == null && migrationHostErrorEvent.DstHost == null) || (this.DstHost != null && this.DstHost.Equals(migrationHostErrorEvent.DstHost))));
        }

        public override bool Equals(object migrationHostErrorEvent)
        {
            return Equals(migrationHostErrorEvent as MigrationHostErrorEvent);
        }

        public override int GetHashCode()
        {
            return (DstHost).GetHashCode();
        }
    }

    public class MigrationHostWarningEvent : MigrationEvent, IEquatable<MigrationHostWarningEvent>
    {
        public HostEventArgument DstHost { get; set; }

        public bool Equals(MigrationHostWarningEvent migrationHostWarningEvent)
        {
            return (migrationHostWarningEvent != null && ((this.DstHost == null && migrationHostWarningEvent.DstHost == null) || (this.DstHost != null && this.DstHost.Equals(migrationHostWarningEvent.DstHost))));
        }

        public override bool Equals(object migrationHostWarningEvent)
        {
            return Equals(migrationHostWarningEvent as MigrationHostWarningEvent);
        }

        public override int GetHashCode()
        {
            return (DstHost).GetHashCode();
        }
    }

    public class MigrationNotReady : MigrationFault, IEquatable<MigrationNotReady>
    {
        public string Reason { get; set; }

        public bool Equals(MigrationNotReady migrationNotReady)
        {
            return (migrationNotReady != null && this.Reason == migrationNotReady.Reason);
        }

        public override bool Equals(object migrationNotReady)
        {
            return Equals(migrationNotReady as MigrationNotReady);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class MigrationResourceErrorEvent : MigrationEvent, IEquatable<MigrationResourceErrorEvent>
    {
        public ResourcePoolEventArgument DstPool { get; set; }

        public HostEventArgument DstHost { get; set; }

        public bool Equals(MigrationResourceErrorEvent migrationResourceErrorEvent)
        {
            return (migrationResourceErrorEvent != null && ((this.DstPool == null && migrationResourceErrorEvent.DstPool == null) || (this.DstPool != null && this.DstPool.Equals(migrationResourceErrorEvent.DstPool))) && ((this.DstHost == null && migrationResourceErrorEvent.DstHost == null) || (this.DstHost != null && this.DstHost.Equals(migrationResourceErrorEvent.DstHost))));
        }

        public override bool Equals(object migrationResourceErrorEvent)
        {
            return Equals(migrationResourceErrorEvent as MigrationResourceErrorEvent);
        }

        public override int GetHashCode()
        {
            return (DstPool + "_" + DstHost).GetHashCode();
        }
    }

    public class MigrationResourceWarningEvent : MigrationEvent, IEquatable<MigrationResourceWarningEvent>
    {
        public ResourcePoolEventArgument DstPool { get; set; }

        public HostEventArgument DstHost { get; set; }

        public bool Equals(MigrationResourceWarningEvent migrationResourceWarningEvent)
        {
            return (migrationResourceWarningEvent != null && ((this.DstPool == null && migrationResourceWarningEvent.DstPool == null) || (this.DstPool != null && this.DstPool.Equals(migrationResourceWarningEvent.DstPool))) && ((this.DstHost == null && migrationResourceWarningEvent.DstHost == null) || (this.DstHost != null && this.DstHost.Equals(migrationResourceWarningEvent.DstHost))));
        }

        public override bool Equals(object migrationResourceWarningEvent)
        {
            return Equals(migrationResourceWarningEvent as MigrationResourceWarningEvent);
        }

        public override int GetHashCode()
        {
            return (DstPool + "_" + DstHost).GetHashCode();
        }
    }

    public class MigrationWarningEvent : MigrationEvent, IEquatable<MigrationWarningEvent>
    {
        public bool Equals(MigrationWarningEvent migrationWarningEvent)
        {
            return (migrationWarningEvent != null && base.Equals(migrationWarningEvent));
        }

        public override bool Equals(object migrationWarningEvent)
        {
            return Equals(migrationWarningEvent as MigrationWarningEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MismatchedBundle : VimFault, IEquatable<MismatchedBundle>
    {
        public string BundleUuid { get; set; }

        public string HostUuid { get; set; }

        public int BundleBuildNumber { get; set; }

        public int HostBuildNumber { get; set; }

        public bool Equals(MismatchedBundle mismatchedBundle)
        {
            return (mismatchedBundle != null && this.BundleUuid == mismatchedBundle.BundleUuid && this.HostUuid == mismatchedBundle.HostUuid && this.BundleBuildNumber == mismatchedBundle.BundleBuildNumber && this.HostBuildNumber == mismatchedBundle.HostBuildNumber);
        }

        public override bool Equals(object mismatchedBundle)
        {
            return Equals(mismatchedBundle as MismatchedBundle);
        }

        public override int GetHashCode()
        {
            return (BundleUuid + "_" + HostUuid + "_" + BundleBuildNumber + "_" + HostBuildNumber).GetHashCode();
        }
    }

    public class MismatchedNetworkPolicies : MigrationFault, IEquatable<MismatchedNetworkPolicies>
    {
        public string Device { get; set; }

        public string Backing { get; set; }

        public bool Connected { get; set; }

        public bool Equals(MismatchedNetworkPolicies mismatchedNetworkPolicies)
        {
            return (mismatchedNetworkPolicies != null && this.Device == mismatchedNetworkPolicies.Device && this.Backing == mismatchedNetworkPolicies.Backing && this.Connected == mismatchedNetworkPolicies.Connected);
        }

        public override bool Equals(object mismatchedNetworkPolicies)
        {
            return Equals(mismatchedNetworkPolicies as MismatchedNetworkPolicies);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Backing + "_" + Connected).GetHashCode();
        }
    }

    public class MismatchedVMotionNetworkNames : MigrationFault, IEquatable<MismatchedVMotionNetworkNames>
    {
        public string SourceNetwork { get; set; }

        public string DestNetwork { get; set; }

        public bool Equals(MismatchedVMotionNetworkNames mismatchedVMotionNetworkNames)
        {
            return (mismatchedVMotionNetworkNames != null && this.SourceNetwork == mismatchedVMotionNetworkNames.SourceNetwork && this.DestNetwork == mismatchedVMotionNetworkNames.DestNetwork);
        }

        public override bool Equals(object mismatchedVMotionNetworkNames)
        {
            return Equals(mismatchedVMotionNetworkNames as MismatchedVMotionNetworkNames);
        }

        public override int GetHashCode()
        {
            return (SourceNetwork + "_" + DestNetwork).GetHashCode();
        }
    }

    public class MissingBmcSupport : VimFault, IEquatable<MissingBmcSupport>
    {
        public bool Equals(MissingBmcSupport missingBmcSupport)
        {
            return (missingBmcSupport != null && base.Equals(missingBmcSupport));
        }

        public override bool Equals(object missingBmcSupport)
        {
            return Equals(missingBmcSupport as MissingBmcSupport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingController : InvalidDeviceSpec, IEquatable<MissingController>
    {
        public bool Equals(MissingController missingController)
        {
            return (missingController != null && base.Equals(missingController));
        }

        public override bool Equals(object missingController)
        {
            return Equals(missingController as MissingController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingIpPool : VAppPropertyFault, IEquatable<MissingIpPool>
    {
        public bool Equals(MissingIpPool missingIpPool)
        {
            return (missingIpPool != null && base.Equals(missingIpPool));
        }

        public override bool Equals(object missingIpPool)
        {
            return Equals(missingIpPool as MissingIpPool);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingLinuxCustResources : CustomizationFault, IEquatable<MissingLinuxCustResources>
    {
        public bool Equals(MissingLinuxCustResources missingLinuxCustResources)
        {
            return (missingLinuxCustResources != null && base.Equals(missingLinuxCustResources));
        }

        public override bool Equals(object missingLinuxCustResources)
        {
            return Equals(missingLinuxCustResources as MissingLinuxCustResources);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingNetworkIpConfig : VAppPropertyFault, IEquatable<MissingNetworkIpConfig>
    {
        public bool Equals(MissingNetworkIpConfig missingNetworkIpConfig)
        {
            return (missingNetworkIpConfig != null && base.Equals(missingNetworkIpConfig));
        }

        public override bool Equals(object missingNetworkIpConfig)
        {
            return Equals(missingNetworkIpConfig as MissingNetworkIpConfig);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingObject : DynamicData, IEquatable<MissingObject>
    {
        public ManagedObjectReference Obj { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(MissingObject missingObject)
        {
            return (missingObject != null && ((this.Obj == null && missingObject.Obj == null) || (this.Obj != null && this.Obj.Equals(missingObject.Obj))) && ((this.Fault == null && missingObject.Fault == null) || (this.Fault != null && this.Fault.Equals(missingObject.Fault))));
        }

        public override bool Equals(object missingObject)
        {
            return Equals(missingObject as MissingObject);
        }

        public override int GetHashCode()
        {
            return (Obj + "_" + Fault).GetHashCode();
        }
    }

    public class MissingPowerOffConfiguration : VAppConfigFault, IEquatable<MissingPowerOffConfiguration>
    {
        public bool Equals(MissingPowerOffConfiguration missingPowerOffConfiguration)
        {
            return (missingPowerOffConfiguration != null && base.Equals(missingPowerOffConfiguration));
        }

        public override bool Equals(object missingPowerOffConfiguration)
        {
            return Equals(missingPowerOffConfiguration as MissingPowerOffConfiguration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingPowerOnConfiguration : VAppConfigFault, IEquatable<MissingPowerOnConfiguration>
    {
        public bool Equals(MissingPowerOnConfiguration missingPowerOnConfiguration)
        {
            return (missingPowerOnConfiguration != null && base.Equals(missingPowerOnConfiguration));
        }

        public override bool Equals(object missingPowerOnConfiguration)
        {
            return Equals(missingPowerOnConfiguration as MissingPowerOnConfiguration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MissingProperty : DynamicData, IEquatable<MissingProperty>
    {
        public string Path { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(MissingProperty missingProperty)
        {
            return (missingProperty != null && this.Path == missingProperty.Path && ((this.Fault == null && missingProperty.Fault == null) || (this.Fault != null && this.Fault.Equals(missingProperty.Fault))));
        }

        public override bool Equals(object missingProperty)
        {
            return Equals(missingProperty as MissingProperty);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + Fault).GetHashCode();
        }
    }

    public class MissingWindowsCustResources : CustomizationFault, IEquatable<MissingWindowsCustResources>
    {
        public bool Equals(MissingWindowsCustResources missingWindowsCustResources)
        {
            return (missingWindowsCustResources != null && base.Equals(missingWindowsCustResources));
        }

        public override bool Equals(object missingWindowsCustResources)
        {
            return Equals(missingWindowsCustResources as MissingWindowsCustResources);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MksConnectionLimitReached : InvalidState, IEquatable<MksConnectionLimitReached>
    {
        public int ConnectionLimit { get; set; }

        public bool Equals(MksConnectionLimitReached mksConnectionLimitReached)
        {
            return (mksConnectionLimitReached != null && this.ConnectionLimit == mksConnectionLimitReached.ConnectionLimit);
        }

        public override bool Equals(object mksConnectionLimitReached)
        {
            return Equals(mksConnectionLimitReached as MksConnectionLimitReached);
        }

        public override int GetHashCode()
        {
            return (ConnectionLimit).GetHashCode();
        }
    }

    public class ModeInfo : DynamicData, IEquatable<ModeInfo>
    {
        public string Browse { get; set; }

        public string Read { get; set; }

        public string Modify { get; set; }

        public string Use { get; set; }

        public string Admin { get; set; }

        public string Full { get; set; }

        public bool Equals(ModeInfo modeInfo)
        {
            return (modeInfo != null && this.Browse == modeInfo.Browse && this.Read == modeInfo.Read && this.Modify == modeInfo.Modify && this.Use == modeInfo.Use && this.Admin == modeInfo.Admin && this.Full == modeInfo.Full);
        }

        public override bool Equals(object modeInfo)
        {
            return Equals(modeInfo as ModeInfo);
        }

        public override int GetHashCode()
        {
            return (Browse + "_" + Read + "_" + Modify + "_" + Use + "_" + Admin + "_" + Full).GetHashCode();
        }
    }

    public class MonthlyByDayTaskScheduler : MonthlyTaskScheduler, IEquatable<MonthlyByDayTaskScheduler>
    {
        public int Day { get; set; }

        public bool Equals(MonthlyByDayTaskScheduler monthlyByDayTaskScheduler)
        {
            return (monthlyByDayTaskScheduler != null && this.Day == monthlyByDayTaskScheduler.Day);
        }

        public override bool Equals(object monthlyByDayTaskScheduler)
        {
            return Equals(monthlyByDayTaskScheduler as MonthlyByDayTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Day).GetHashCode();
        }
    }

    public class MonthlyByWeekdayTaskScheduler : MonthlyTaskScheduler, IEquatable<MonthlyByWeekdayTaskScheduler>
    {
        public WeekOfMonth Offset { get; set; }

        public DayOfWeek Weekday { get; set; }

        public bool Equals(MonthlyByWeekdayTaskScheduler monthlyByWeekdayTaskScheduler)
        {
            return (monthlyByWeekdayTaskScheduler != null && this.Offset == monthlyByWeekdayTaskScheduler.Offset && this.Weekday == monthlyByWeekdayTaskScheduler.Weekday);
        }

        public override bool Equals(object monthlyByWeekdayTaskScheduler)
        {
            return Equals(monthlyByWeekdayTaskScheduler as MonthlyByWeekdayTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Offset + "_" + Weekday).GetHashCode();
        }
    }

    public class MonthlyTaskScheduler : DailyTaskScheduler, IEquatable<MonthlyTaskScheduler>
    {
        public bool Equals(MonthlyTaskScheduler monthlyTaskScheduler)
        {
            return (monthlyTaskScheduler != null && base.Equals(monthlyTaskScheduler));
        }

        public override bool Equals(object monthlyTaskScheduler)
        {
            return Equals(monthlyTaskScheduler as MonthlyTaskScheduler);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MountError : CustomizationFault, IEquatable<MountError>
    {
        public ManagedObjectReference Vm { get; set; }

        public int DiskIndex { get; set; }

        public MountError_LinkedView LinkedView { get; set; }

        public bool Equals(MountError mountError)
        {
            return (mountError != null && ((this.Vm == null && mountError.Vm == null) || (this.Vm != null && this.Vm.Equals(mountError.Vm))) && this.DiskIndex == mountError.DiskIndex && ((this.LinkedView == null && mountError.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(mountError.LinkedView))));
        }

        public override bool Equals(object mountError)
        {
            return Equals(mountError as MountError);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + DiskIndex + "_" + LinkedView).GetHashCode();
        }
    }

    public class MountError_LinkedView : IEquatable<MountError_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(MountError_LinkedView mountError_LinkedView)
        {
            return (mountError_LinkedView != null && ((this.Vm == null && mountError_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(mountError_LinkedView.Vm))));
        }

        public override bool Equals(object mountError_LinkedView)
        {
            return Equals(mountError_LinkedView as MountError_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class MtuMatchEvent : DvsHealthStatusChangeEvent, IEquatable<MtuMatchEvent>
    {
        public bool Equals(MtuMatchEvent mtuMatchEvent)
        {
            return (mtuMatchEvent != null && base.Equals(mtuMatchEvent));
        }

        public override bool Equals(object mtuMatchEvent)
        {
            return Equals(mtuMatchEvent as MtuMatchEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MtuMismatchEvent : DvsHealthStatusChangeEvent, IEquatable<MtuMismatchEvent>
    {
        public bool Equals(MtuMismatchEvent mtuMismatchEvent)
        {
            return (mtuMismatchEvent != null && base.Equals(mtuMismatchEvent));
        }

        public override bool Equals(object mtuMismatchEvent)
        {
            return Equals(mtuMismatchEvent as MtuMismatchEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MultipleCertificatesVerifyFault : HostConnectFault, IEquatable<MultipleCertificatesVerifyFault>
    {
        public MultipleCertificatesVerifyFaultThumbprintData[] ThumbprintData { get; set; }

        public bool Equals(MultipleCertificatesVerifyFault multipleCertificatesVerifyFault)
        {
            return (multipleCertificatesVerifyFault != null && ((this.ThumbprintData == null && multipleCertificatesVerifyFault.ThumbprintData == null) || (this.ThumbprintData != null && multipleCertificatesVerifyFault.ThumbprintData != null && Enumerable.SequenceEqual(this.ThumbprintData, multipleCertificatesVerifyFault.ThumbprintData))));
        }

        public override bool Equals(object multipleCertificatesVerifyFault)
        {
            return Equals(multipleCertificatesVerifyFault as MultipleCertificatesVerifyFault);
        }

        public override int GetHashCode()
        {
            return (ThumbprintData).GetHashCode();
        }
    }

    public class MultipleCertificatesVerifyFaultThumbprintData : DynamicData, IEquatable<MultipleCertificatesVerifyFaultThumbprintData>
    {
        public int Port { get; set; }

        public string Thumbprint { get; set; }

        public bool Equals(MultipleCertificatesVerifyFaultThumbprintData multipleCertificatesVerifyFaultThumbprintData)
        {
            return (multipleCertificatesVerifyFaultThumbprintData != null && this.Port == multipleCertificatesVerifyFaultThumbprintData.Port && this.Thumbprint == multipleCertificatesVerifyFaultThumbprintData.Thumbprint);
        }

        public override bool Equals(object multipleCertificatesVerifyFaultThumbprintData)
        {
            return Equals(multipleCertificatesVerifyFaultThumbprintData as MultipleCertificatesVerifyFaultThumbprintData);
        }

        public override int GetHashCode()
        {
            return (Port + "_" + Thumbprint).GetHashCode();
        }
    }

    public class MultipleSnapshotsNotSupported : SnapshotFault, IEquatable<MultipleSnapshotsNotSupported>
    {
        public bool Equals(MultipleSnapshotsNotSupported multipleSnapshotsNotSupported)
        {
            return (multipleSnapshotsNotSupported != null && base.Equals(multipleSnapshotsNotSupported));
        }

        public override bool Equals(object multipleSnapshotsNotSupported)
        {
            return Equals(multipleSnapshotsNotSupported as MultipleSnapshotsNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class MultiWriterNotSupported : DeviceNotSupported, IEquatable<MultiWriterNotSupported>
    {
        public bool Equals(MultiWriterNotSupported multiWriterNotSupported)
        {
            return (multiWriterNotSupported != null && base.Equals(multiWriterNotSupported));
        }

        public override bool Equals(object multiWriterNotSupported)
        {
            return Equals(multiWriterNotSupported as MultiWriterNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NamePasswordAuthentication : GuestAuthentication, IEquatable<NamePasswordAuthentication>
    {
        public string Username { get; set; }

        public string Password { get; set; }

        public bool Equals(NamePasswordAuthentication namePasswordAuthentication)
        {
            return (namePasswordAuthentication != null && this.Username == namePasswordAuthentication.Username && this.Password == namePasswordAuthentication.Password);
        }

        public override bool Equals(object namePasswordAuthentication)
        {
            return Equals(namePasswordAuthentication as NamePasswordAuthentication);
        }

        public override int GetHashCode()
        {
            return (Username + "_" + Password).GetHashCode();
        }
    }

    public class NamespaceFull : VimFault, IEquatable<NamespaceFull>
    {
        public string Name { get; set; }

        public long CurrentMaxSize { get; set; }

        public long? RequiredSize { get; set; }

        public bool Equals(NamespaceFull namespaceFull)
        {
            return (namespaceFull != null && this.Name == namespaceFull.Name && this.CurrentMaxSize == namespaceFull.CurrentMaxSize && ((this.RequiredSize == null && namespaceFull.RequiredSize == null) || (this.RequiredSize != null && this.RequiredSize.Equals(namespaceFull.RequiredSize))));
        }

        public override bool Equals(object namespaceFull)
        {
            return Equals(namespaceFull as NamespaceFull);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + CurrentMaxSize + "_" + RequiredSize).GetHashCode();
        }
    }

    public class NamespaceLimitReached : VimFault, IEquatable<NamespaceLimitReached>
    {
        public int? Limit { get; set; }

        public bool Equals(NamespaceLimitReached namespaceLimitReached)
        {
            return (namespaceLimitReached != null && ((this.Limit == null && namespaceLimitReached.Limit == null) || (this.Limit != null && this.Limit.Equals(namespaceLimitReached.Limit))));
        }

        public override bool Equals(object namespaceLimitReached)
        {
            return Equals(namespaceLimitReached as NamespaceLimitReached);
        }

        public override int GetHashCode()
        {
            return (Limit).GetHashCode();
        }
    }

    public class NamespaceWriteProtected : VimFault, IEquatable<NamespaceWriteProtected>
    {
        public string Name { get; set; }

        public bool Equals(NamespaceWriteProtected namespaceWriteProtected)
        {
            return (namespaceWriteProtected != null && this.Name == namespaceWriteProtected.Name);
        }

        public override bool Equals(object namespaceWriteProtected)
        {
            return Equals(namespaceWriteProtected as NamespaceWriteProtected);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class NasConfigFault : HostConfigFault, IEquatable<NasConfigFault>
    {
        public string Name { get; set; }

        public bool Equals(NasConfigFault nasConfigFault)
        {
            return (nasConfigFault != null && this.Name == nasConfigFault.Name);
        }

        public override bool Equals(object nasConfigFault)
        {
            return Equals(nasConfigFault as NasConfigFault);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class NasConnectionLimitReached : NasConfigFault, IEquatable<NasConnectionLimitReached>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public bool Equals(NasConnectionLimitReached nasConnectionLimitReached)
        {
            return (nasConnectionLimitReached != null && this.RemoteHost == nasConnectionLimitReached.RemoteHost && this.RemotePath == nasConnectionLimitReached.RemotePath);
        }

        public override bool Equals(object nasConnectionLimitReached)
        {
            return Equals(nasConnectionLimitReached as NasConnectionLimitReached);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath).GetHashCode();
        }
    }

    public class NASDatastoreCreatedEvent : HostEvent, IEquatable<NASDatastoreCreatedEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public string DatastoreUrl { get; set; }

        public bool Equals(NASDatastoreCreatedEvent nASDatastoreCreatedEvent)
        {
            return (nASDatastoreCreatedEvent != null && ((this.Datastore == null && nASDatastoreCreatedEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(nASDatastoreCreatedEvent.Datastore))) && this.DatastoreUrl == nASDatastoreCreatedEvent.DatastoreUrl);
        }

        public override bool Equals(object nASDatastoreCreatedEvent)
        {
            return Equals(nASDatastoreCreatedEvent as NASDatastoreCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + DatastoreUrl).GetHashCode();
        }
    }

    public class NasDatastoreInfo : DatastoreInfo, IEquatable<NasDatastoreInfo>
    {
        public HostNasVolume Nas { get; set; }

        public bool Equals(NasDatastoreInfo nasDatastoreInfo)
        {
            return (nasDatastoreInfo != null && ((this.Nas == null && nasDatastoreInfo.Nas == null) || (this.Nas != null && this.Nas.Equals(nasDatastoreInfo.Nas))));
        }

        public override bool Equals(object nasDatastoreInfo)
        {
            return Equals(nasDatastoreInfo as NasDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Nas).GetHashCode();
        }
    }

    public class NasSessionCredentialConflict : NasConfigFault, IEquatable<NasSessionCredentialConflict>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public string UserName { get; set; }

        public bool Equals(NasSessionCredentialConflict nasSessionCredentialConflict)
        {
            return (nasSessionCredentialConflict != null && this.RemoteHost == nasSessionCredentialConflict.RemoteHost && this.RemotePath == nasSessionCredentialConflict.RemotePath && this.UserName == nasSessionCredentialConflict.UserName);
        }

        public override bool Equals(object nasSessionCredentialConflict)
        {
            return Equals(nasSessionCredentialConflict as NasSessionCredentialConflict);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath + "_" + UserName).GetHashCode();
        }
    }

    public class NasStorageProfile : ApplyProfile, IEquatable<NasStorageProfile>
    {
        public string Key { get; set; }

        public bool Equals(NasStorageProfile nasStorageProfile)
        {
            return (nasStorageProfile != null && this.Key == nasStorageProfile.Key);
        }

        public override bool Equals(object nasStorageProfile)
        {
            return Equals(nasStorageProfile as NasStorageProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class NasVolumeNotMounted : NasConfigFault, IEquatable<NasVolumeNotMounted>
    {
        public string RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public bool Equals(NasVolumeNotMounted nasVolumeNotMounted)
        {
            return (nasVolumeNotMounted != null && this.RemoteHost == nasVolumeNotMounted.RemoteHost && this.RemotePath == nasVolumeNotMounted.RemotePath);
        }

        public override bool Equals(object nasVolumeNotMounted)
        {
            return Equals(nasVolumeNotMounted as NasVolumeNotMounted);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath).GetHashCode();
        }
    }

    public class NegatableExpression : DynamicData, IEquatable<NegatableExpression>
    {
        public bool? Negate { get; set; }

        public bool Equals(NegatableExpression negatableExpression)
        {
            return (negatableExpression != null && ((this.Negate == null && negatableExpression.Negate == null) || (this.Negate != null && this.Negate.Equals(negatableExpression.Negate))));
        }

        public override bool Equals(object negatableExpression)
        {
            return Equals(negatableExpression as NegatableExpression);
        }

        public override int GetHashCode()
        {
            return (Negate).GetHashCode();
        }
    }

    public class NetBIOSConfigInfo : DynamicData, IEquatable<NetBIOSConfigInfo>
    {
        public string Mode { get; set; }

        public bool Equals(NetBIOSConfigInfo netBIOSConfigInfo)
        {
            return (netBIOSConfigInfo != null && this.Mode == netBIOSConfigInfo.Mode);
        }

        public override bool Equals(object netBIOSConfigInfo)
        {
            return Equals(netBIOSConfigInfo as NetBIOSConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Mode).GetHashCode();
        }
    }

    public class NetDhcpConfigInfo : DynamicData, IEquatable<NetDhcpConfigInfo>
    {
        public NetDhcpConfigInfoDhcpOptions Ipv6 { get; set; }

        public NetDhcpConfigInfoDhcpOptions Ipv4 { get; set; }

        public bool Equals(NetDhcpConfigInfo netDhcpConfigInfo)
        {
            return (netDhcpConfigInfo != null && ((this.Ipv6 == null && netDhcpConfigInfo.Ipv6 == null) || (this.Ipv6 != null && this.Ipv6.Equals(netDhcpConfigInfo.Ipv6))) && ((this.Ipv4 == null && netDhcpConfigInfo.Ipv4 == null) || (this.Ipv4 != null && this.Ipv4.Equals(netDhcpConfigInfo.Ipv4))));
        }

        public override bool Equals(object netDhcpConfigInfo)
        {
            return Equals(netDhcpConfigInfo as NetDhcpConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Ipv6 + "_" + Ipv4).GetHashCode();
        }
    }

    public class NetDhcpConfigInfoDhcpOptions : DynamicData, IEquatable<NetDhcpConfigInfoDhcpOptions>
    {
        public bool Enable { get; set; }

        public KeyValue[] Config { get; set; }

        public bool Equals(NetDhcpConfigInfoDhcpOptions netDhcpConfigInfoDhcpOptions)
        {
            return (netDhcpConfigInfoDhcpOptions != null && this.Enable == netDhcpConfigInfoDhcpOptions.Enable && ((this.Config == null && netDhcpConfigInfoDhcpOptions.Config == null) || (this.Config != null && netDhcpConfigInfoDhcpOptions.Config != null && Enumerable.SequenceEqual(this.Config, netDhcpConfigInfoDhcpOptions.Config))));
        }

        public override bool Equals(object netDhcpConfigInfoDhcpOptions)
        {
            return Equals(netDhcpConfigInfoDhcpOptions as NetDhcpConfigInfoDhcpOptions);
        }

        public override int GetHashCode()
        {
            return (Enable + "_" + Config).GetHashCode();
        }
    }

    public class NetDhcpConfigSpec : DynamicData, IEquatable<NetDhcpConfigSpec>
    {
        public NetDhcpConfigSpecDhcpOptionsSpec Ipv6 { get; set; }

        public NetDhcpConfigSpecDhcpOptionsSpec Ipv4 { get; set; }

        public bool Equals(NetDhcpConfigSpec netDhcpConfigSpec)
        {
            return (netDhcpConfigSpec != null && ((this.Ipv6 == null && netDhcpConfigSpec.Ipv6 == null) || (this.Ipv6 != null && this.Ipv6.Equals(netDhcpConfigSpec.Ipv6))) && ((this.Ipv4 == null && netDhcpConfigSpec.Ipv4 == null) || (this.Ipv4 != null && this.Ipv4.Equals(netDhcpConfigSpec.Ipv4))));
        }

        public override bool Equals(object netDhcpConfigSpec)
        {
            return Equals(netDhcpConfigSpec as NetDhcpConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Ipv6 + "_" + Ipv4).GetHashCode();
        }
    }

    public class NetDhcpConfigSpecDhcpOptionsSpec : DynamicData, IEquatable<NetDhcpConfigSpecDhcpOptionsSpec>
    {
        public bool? Enable { get; set; }

        public KeyValue[] Config { get; set; }

        public string Operation { get; set; }

        public bool Equals(NetDhcpConfigSpecDhcpOptionsSpec netDhcpConfigSpecDhcpOptionsSpec)
        {
            return (netDhcpConfigSpecDhcpOptionsSpec != null && ((this.Enable == null && netDhcpConfigSpecDhcpOptionsSpec.Enable == null) || (this.Enable != null && this.Enable.Equals(netDhcpConfigSpecDhcpOptionsSpec.Enable))) && ((this.Config == null && netDhcpConfigSpecDhcpOptionsSpec.Config == null) || (this.Config != null && netDhcpConfigSpecDhcpOptionsSpec.Config != null && Enumerable.SequenceEqual(this.Config, netDhcpConfigSpecDhcpOptionsSpec.Config))) && this.Operation == netDhcpConfigSpecDhcpOptionsSpec.Operation);
        }

        public override bool Equals(object netDhcpConfigSpecDhcpOptionsSpec)
        {
            return Equals(netDhcpConfigSpecDhcpOptionsSpec as NetDhcpConfigSpecDhcpOptionsSpec);
        }

        public override int GetHashCode()
        {
            return (Enable + "_" + Config + "_" + Operation).GetHashCode();
        }
    }

    public class NetDnsConfigInfo : DynamicData, IEquatable<NetDnsConfigInfo>
    {
        public bool Dhcp { get; set; }

        public string HostName { get; set; }

        public string DomainName { get; set; }

        public string[] IpAddress { get; set; }

        public string[] SearchDomain { get; set; }

        public bool Equals(NetDnsConfigInfo netDnsConfigInfo)
        {
            return (netDnsConfigInfo != null && this.Dhcp == netDnsConfigInfo.Dhcp && this.HostName == netDnsConfigInfo.HostName && this.DomainName == netDnsConfigInfo.DomainName && ((this.IpAddress == null && netDnsConfigInfo.IpAddress == null) || (this.IpAddress != null && netDnsConfigInfo.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, netDnsConfigInfo.IpAddress))) && ((this.SearchDomain == null && netDnsConfigInfo.SearchDomain == null) || (this.SearchDomain != null && netDnsConfigInfo.SearchDomain != null && Enumerable.SequenceEqual(this.SearchDomain, netDnsConfigInfo.SearchDomain))));
        }

        public override bool Equals(object netDnsConfigInfo)
        {
            return Equals(netDnsConfigInfo as NetDnsConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Dhcp + "_" + HostName + "_" + DomainName + "_" + IpAddress + "_" + SearchDomain).GetHashCode();
        }
    }

    public class NetDnsConfigSpec : DynamicData, IEquatable<NetDnsConfigSpec>
    {
        public bool? Dhcp { get; set; }

        public string HostName { get; set; }

        public string DomainName { get; set; }

        public string[] IpAddress { get; set; }

        public string[] SearchDomain { get; set; }

        public bool Equals(NetDnsConfigSpec netDnsConfigSpec)
        {
            return (netDnsConfigSpec != null && ((this.Dhcp == null && netDnsConfigSpec.Dhcp == null) || (this.Dhcp != null && this.Dhcp.Equals(netDnsConfigSpec.Dhcp))) && this.HostName == netDnsConfigSpec.HostName && this.DomainName == netDnsConfigSpec.DomainName && ((this.IpAddress == null && netDnsConfigSpec.IpAddress == null) || (this.IpAddress != null && netDnsConfigSpec.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, netDnsConfigSpec.IpAddress))) && ((this.SearchDomain == null && netDnsConfigSpec.SearchDomain == null) || (this.SearchDomain != null && netDnsConfigSpec.SearchDomain != null && Enumerable.SequenceEqual(this.SearchDomain, netDnsConfigSpec.SearchDomain))));
        }

        public override bool Equals(object netDnsConfigSpec)
        {
            return Equals(netDnsConfigSpec as NetDnsConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Dhcp + "_" + HostName + "_" + DomainName + "_" + IpAddress + "_" + SearchDomain).GetHashCode();
        }
    }

    public class NetIpConfigInfo : DynamicData, IEquatable<NetIpConfigInfo>
    {
        public NetIpConfigInfoIpAddress[] IpAddress { get; set; }

        public NetDhcpConfigInfo Dhcp { get; set; }

        public bool? AutoConfigurationEnabled { get; set; }

        public bool Equals(NetIpConfigInfo netIpConfigInfo)
        {
            return (netIpConfigInfo != null && ((this.IpAddress == null && netIpConfigInfo.IpAddress == null) || (this.IpAddress != null && netIpConfigInfo.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, netIpConfigInfo.IpAddress))) && ((this.Dhcp == null && netIpConfigInfo.Dhcp == null) || (this.Dhcp != null && this.Dhcp.Equals(netIpConfigInfo.Dhcp))) && ((this.AutoConfigurationEnabled == null && netIpConfigInfo.AutoConfigurationEnabled == null) || (this.AutoConfigurationEnabled != null && this.AutoConfigurationEnabled.Equals(netIpConfigInfo.AutoConfigurationEnabled))));
        }

        public override bool Equals(object netIpConfigInfo)
        {
            return Equals(netIpConfigInfo as NetIpConfigInfo);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + Dhcp + "_" + AutoConfigurationEnabled).GetHashCode();
        }
    }

    public class NetIpConfigInfoIpAddress : DynamicData, IEquatable<NetIpConfigInfoIpAddress>
    {
        public string IpAddress { get; set; }

        public int PrefixLength { get; set; }

        public string Origin { get; set; }

        public string State { get; set; }

        public DateTime? Lifetime { get; set; }

        public bool Equals(NetIpConfigInfoIpAddress netIpConfigInfoIpAddress)
        {
            return (netIpConfigInfoIpAddress != null && this.IpAddress == netIpConfigInfoIpAddress.IpAddress && this.PrefixLength == netIpConfigInfoIpAddress.PrefixLength && this.Origin == netIpConfigInfoIpAddress.Origin && this.State == netIpConfigInfoIpAddress.State && ((this.Lifetime == null && netIpConfigInfoIpAddress.Lifetime == null) || (this.Lifetime != null && this.Lifetime.Equals(netIpConfigInfoIpAddress.Lifetime))));
        }

        public override bool Equals(object netIpConfigInfoIpAddress)
        {
            return Equals(netIpConfigInfoIpAddress as NetIpConfigInfoIpAddress);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + PrefixLength + "_" + Origin + "_" + State + "_" + Lifetime).GetHashCode();
        }
    }

    public class NetIpConfigSpec : DynamicData, IEquatable<NetIpConfigSpec>
    {
        public NetIpConfigSpecIpAddressSpec[] IpAddress { get; set; }

        public NetDhcpConfigSpec Dhcp { get; set; }

        public bool? AutoConfigurationEnabled { get; set; }

        public bool Equals(NetIpConfigSpec netIpConfigSpec)
        {
            return (netIpConfigSpec != null && ((this.IpAddress == null && netIpConfigSpec.IpAddress == null) || (this.IpAddress != null && netIpConfigSpec.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, netIpConfigSpec.IpAddress))) && ((this.Dhcp == null && netIpConfigSpec.Dhcp == null) || (this.Dhcp != null && this.Dhcp.Equals(netIpConfigSpec.Dhcp))) && ((this.AutoConfigurationEnabled == null && netIpConfigSpec.AutoConfigurationEnabled == null) || (this.AutoConfigurationEnabled != null && this.AutoConfigurationEnabled.Equals(netIpConfigSpec.AutoConfigurationEnabled))));
        }

        public override bool Equals(object netIpConfigSpec)
        {
            return Equals(netIpConfigSpec as NetIpConfigSpec);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + Dhcp + "_" + AutoConfigurationEnabled).GetHashCode();
        }
    }

    public class NetIpConfigSpecIpAddressSpec : DynamicData, IEquatable<NetIpConfigSpecIpAddressSpec>
    {
        public string IpAddress { get; set; }

        public int PrefixLength { get; set; }

        public string Operation { get; set; }

        public bool Equals(NetIpConfigSpecIpAddressSpec netIpConfigSpecIpAddressSpec)
        {
            return (netIpConfigSpecIpAddressSpec != null && this.IpAddress == netIpConfigSpecIpAddressSpec.IpAddress && this.PrefixLength == netIpConfigSpecIpAddressSpec.PrefixLength && this.Operation == netIpConfigSpecIpAddressSpec.Operation);
        }

        public override bool Equals(object netIpConfigSpecIpAddressSpec)
        {
            return Equals(netIpConfigSpecIpAddressSpec as NetIpConfigSpecIpAddressSpec);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + PrefixLength + "_" + Operation).GetHashCode();
        }
    }

    public class NetIpRouteConfigInfo : DynamicData, IEquatable<NetIpRouteConfigInfo>
    {
        public NetIpRouteConfigInfoIpRoute[] IpRoute { get; set; }

        public bool Equals(NetIpRouteConfigInfo netIpRouteConfigInfo)
        {
            return (netIpRouteConfigInfo != null && ((this.IpRoute == null && netIpRouteConfigInfo.IpRoute == null) || (this.IpRoute != null && netIpRouteConfigInfo.IpRoute != null && Enumerable.SequenceEqual(this.IpRoute, netIpRouteConfigInfo.IpRoute))));
        }

        public override bool Equals(object netIpRouteConfigInfo)
        {
            return Equals(netIpRouteConfigInfo as NetIpRouteConfigInfo);
        }

        public override int GetHashCode()
        {
            return (IpRoute).GetHashCode();
        }
    }

    public class NetIpRouteConfigInfoGateway : DynamicData, IEquatable<NetIpRouteConfigInfoGateway>
    {
        public string IpAddress { get; set; }

        public string Device { get; set; }

        public bool Equals(NetIpRouteConfigInfoGateway netIpRouteConfigInfoGateway)
        {
            return (netIpRouteConfigInfoGateway != null && this.IpAddress == netIpRouteConfigInfoGateway.IpAddress && this.Device == netIpRouteConfigInfoGateway.Device);
        }

        public override bool Equals(object netIpRouteConfigInfoGateway)
        {
            return Equals(netIpRouteConfigInfoGateway as NetIpRouteConfigInfoGateway);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + Device).GetHashCode();
        }
    }

    public class NetIpRouteConfigInfoIpRoute : DynamicData, IEquatable<NetIpRouteConfigInfoIpRoute>
    {
        public string Network { get; set; }

        public int PrefixLength { get; set; }

        public NetIpRouteConfigInfoGateway Gateway { get; set; }

        public bool Equals(NetIpRouteConfigInfoIpRoute netIpRouteConfigInfoIpRoute)
        {
            return (netIpRouteConfigInfoIpRoute != null && this.Network == netIpRouteConfigInfoIpRoute.Network && this.PrefixLength == netIpRouteConfigInfoIpRoute.PrefixLength && ((this.Gateway == null && netIpRouteConfigInfoIpRoute.Gateway == null) || (this.Gateway != null && this.Gateway.Equals(netIpRouteConfigInfoIpRoute.Gateway))));
        }

        public override bool Equals(object netIpRouteConfigInfoIpRoute)
        {
            return Equals(netIpRouteConfigInfoIpRoute as NetIpRouteConfigInfoIpRoute);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + PrefixLength + "_" + Gateway).GetHashCode();
        }
    }

    public class NetIpRouteConfigSpec : DynamicData, IEquatable<NetIpRouteConfigSpec>
    {
        public NetIpRouteConfigSpecIpRouteSpec[] IpRoute { get; set; }

        public bool Equals(NetIpRouteConfigSpec netIpRouteConfigSpec)
        {
            return (netIpRouteConfigSpec != null && ((this.IpRoute == null && netIpRouteConfigSpec.IpRoute == null) || (this.IpRoute != null && netIpRouteConfigSpec.IpRoute != null && Enumerable.SequenceEqual(this.IpRoute, netIpRouteConfigSpec.IpRoute))));
        }

        public override bool Equals(object netIpRouteConfigSpec)
        {
            return Equals(netIpRouteConfigSpec as NetIpRouteConfigSpec);
        }

        public override int GetHashCode()
        {
            return (IpRoute).GetHashCode();
        }
    }

    public class NetIpRouteConfigSpecGatewaySpec : DynamicData, IEquatable<NetIpRouteConfigSpecGatewaySpec>
    {
        public string IpAddress { get; set; }

        public string Device { get; set; }

        public bool Equals(NetIpRouteConfigSpecGatewaySpec netIpRouteConfigSpecGatewaySpec)
        {
            return (netIpRouteConfigSpecGatewaySpec != null && this.IpAddress == netIpRouteConfigSpecGatewaySpec.IpAddress && this.Device == netIpRouteConfigSpecGatewaySpec.Device);
        }

        public override bool Equals(object netIpRouteConfigSpecGatewaySpec)
        {
            return Equals(netIpRouteConfigSpecGatewaySpec as NetIpRouteConfigSpecGatewaySpec);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + Device).GetHashCode();
        }
    }

    public class NetIpRouteConfigSpecIpRouteSpec : DynamicData, IEquatable<NetIpRouteConfigSpecIpRouteSpec>
    {
        public string Network { get; set; }

        public int PrefixLength { get; set; }

        public NetIpRouteConfigSpecGatewaySpec Gateway { get; set; }

        public string Operation { get; set; }

        public bool Equals(NetIpRouteConfigSpecIpRouteSpec netIpRouteConfigSpecIpRouteSpec)
        {
            return (netIpRouteConfigSpecIpRouteSpec != null && this.Network == netIpRouteConfigSpecIpRouteSpec.Network && this.PrefixLength == netIpRouteConfigSpecIpRouteSpec.PrefixLength && ((this.Gateway == null && netIpRouteConfigSpecIpRouteSpec.Gateway == null) || (this.Gateway != null && this.Gateway.Equals(netIpRouteConfigSpecIpRouteSpec.Gateway))) && this.Operation == netIpRouteConfigSpecIpRouteSpec.Operation);
        }

        public override bool Equals(object netIpRouteConfigSpecIpRouteSpec)
        {
            return Equals(netIpRouteConfigSpecIpRouteSpec as NetIpRouteConfigSpecIpRouteSpec);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + PrefixLength + "_" + Gateway + "_" + Operation).GetHashCode();
        }
    }

    public class NetIpStackInfo : DynamicData, IEquatable<NetIpStackInfo>
    {
        public NetIpStackInfoNetToMedia[] Neighbor { get; set; }

        public NetIpStackInfoDefaultRouter[] DefaultRouter { get; set; }

        public bool Equals(NetIpStackInfo netIpStackInfo)
        {
            return (netIpStackInfo != null && ((this.Neighbor == null && netIpStackInfo.Neighbor == null) || (this.Neighbor != null && netIpStackInfo.Neighbor != null && Enumerable.SequenceEqual(this.Neighbor, netIpStackInfo.Neighbor))) && ((this.DefaultRouter == null && netIpStackInfo.DefaultRouter == null) || (this.DefaultRouter != null && netIpStackInfo.DefaultRouter != null && Enumerable.SequenceEqual(this.DefaultRouter, netIpStackInfo.DefaultRouter))));
        }

        public override bool Equals(object netIpStackInfo)
        {
            return Equals(netIpStackInfo as NetIpStackInfo);
        }

        public override int GetHashCode()
        {
            return (Neighbor + "_" + DefaultRouter).GetHashCode();
        }
    }

    public class NetIpStackInfoDefaultRouter : DynamicData, IEquatable<NetIpStackInfoDefaultRouter>
    {
        public string IpAddress { get; set; }

        public string Device { get; set; }

        public DateTime Lifetime { get; set; }

        public string Preference { get; set; }

        public bool Equals(NetIpStackInfoDefaultRouter netIpStackInfoDefaultRouter)
        {
            return (netIpStackInfoDefaultRouter != null && this.IpAddress == netIpStackInfoDefaultRouter.IpAddress && this.Device == netIpStackInfoDefaultRouter.Device && this.Lifetime == netIpStackInfoDefaultRouter.Lifetime && this.Preference == netIpStackInfoDefaultRouter.Preference);
        }

        public override bool Equals(object netIpStackInfoDefaultRouter)
        {
            return Equals(netIpStackInfoDefaultRouter as NetIpStackInfoDefaultRouter);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + Device + "_" + Lifetime + "_" + Preference).GetHashCode();
        }
    }

    public class NetIpStackInfoNetToMedia : DynamicData, IEquatable<NetIpStackInfoNetToMedia>
    {
        public string IpAddress { get; set; }

        public string PhysicalAddress { get; set; }

        public string Device { get; set; }

        public string Type { get; set; }

        public bool Equals(NetIpStackInfoNetToMedia netIpStackInfoNetToMedia)
        {
            return (netIpStackInfoNetToMedia != null && this.IpAddress == netIpStackInfoNetToMedia.IpAddress && this.PhysicalAddress == netIpStackInfoNetToMedia.PhysicalAddress && this.Device == netIpStackInfoNetToMedia.Device && this.Type == netIpStackInfoNetToMedia.Type);
        }

        public override bool Equals(object netIpStackInfoNetToMedia)
        {
            return Equals(netIpStackInfoNetToMedia as NetIpStackInfoNetToMedia);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + PhysicalAddress + "_" + Device + "_" + Type).GetHashCode();
        }
    }

    public class NetStackInstanceProfile : ApplyProfile, IEquatable<NetStackInstanceProfile>
    {
        public string Key { get; set; }

        public NetworkProfileDnsConfigProfile DnsConfig { get; set; }

        public IpRouteProfile IpRouteConfig { get; set; }

        public bool Equals(NetStackInstanceProfile netStackInstanceProfile)
        {
            return (netStackInstanceProfile != null && this.Key == netStackInstanceProfile.Key && ((this.DnsConfig == null && netStackInstanceProfile.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(netStackInstanceProfile.DnsConfig))) && ((this.IpRouteConfig == null && netStackInstanceProfile.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(netStackInstanceProfile.IpRouteConfig))));
        }

        public override bool Equals(object netStackInstanceProfile)
        {
            return Equals(netStackInstanceProfile as NetStackInstanceProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DnsConfig + "_" + IpRouteConfig).GetHashCode();
        }
    }

    public class Network : ManagedEntity, IEquatable<Network>
    {
        public new string Name { get; set; }

        public NetworkSummary Summary { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public new Network_LinkedView LinkedView { get; set; }

        public void DestroyNetwork()
        {
        }

        public bool Equals(Network network)
        {
            return (network != null && this.Name == network.Name && ((this.Summary == null && network.Summary == null) || (this.Summary != null && this.Summary.Equals(network.Summary))) && ((this.Host == null && network.Host == null) || (this.Host != null && network.Host != null && Enumerable.SequenceEqual(this.Host, network.Host))) && ((this.Vm == null && network.Vm == null) || (this.Vm != null && network.Vm != null && Enumerable.SequenceEqual(this.Vm, network.Vm))) && ((this.LinkedView == null && network.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(network.LinkedView))));
        }

        public override bool Equals(object network)
        {
            return Equals(network as Network);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Summary + "_" + Host + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class Network_LinkedView : ManagedEntity_LinkedView, IEquatable<Network_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public VirtualMachine[] Vm { get; set; }

        public bool Equals(Network_LinkedView network_LinkedView)
        {
            return (network_LinkedView != null && ((this.Host == null && network_LinkedView.Host == null) || (this.Host != null && network_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, network_LinkedView.Host))) && ((this.Vm == null && network_LinkedView.Vm == null) || (this.Vm != null && network_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, network_LinkedView.Vm))));
        }

        public override bool Equals(object network_LinkedView)
        {
            return Equals(network_LinkedView as Network_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Vm).GetHashCode();
        }
    }

    public class NetworkCopyFault : FileFault, IEquatable<NetworkCopyFault>
    {
        public bool Equals(NetworkCopyFault networkCopyFault)
        {
            return (networkCopyFault != null && base.Equals(networkCopyFault));
        }

        public override bool Equals(object networkCopyFault)
        {
            return Equals(networkCopyFault as NetworkCopyFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NetworkDisruptedAndConfigRolledBack : VimFault, IEquatable<NetworkDisruptedAndConfigRolledBack>
    {
        public string Host { get; set; }

        public bool Equals(NetworkDisruptedAndConfigRolledBack networkDisruptedAndConfigRolledBack)
        {
            return (networkDisruptedAndConfigRolledBack != null && this.Host == networkDisruptedAndConfigRolledBack.Host);
        }

        public override bool Equals(object networkDisruptedAndConfigRolledBack)
        {
            return Equals(networkDisruptedAndConfigRolledBack as NetworkDisruptedAndConfigRolledBack);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class NetworkEventArgument : EntityEventArgument, IEquatable<NetworkEventArgument>
    {
        public ManagedObjectReference Network { get; set; }

        public NetworkEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(NetworkEventArgument networkEventArgument)
        {
            return (networkEventArgument != null && ((this.Network == null && networkEventArgument.Network == null) || (this.Network != null && this.Network.Equals(networkEventArgument.Network))) && ((this.LinkedView == null && networkEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(networkEventArgument.LinkedView))));
        }

        public override bool Equals(object networkEventArgument)
        {
            return Equals(networkEventArgument as NetworkEventArgument);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class NetworkEventArgument_LinkedView : IEquatable<NetworkEventArgument_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(NetworkEventArgument_LinkedView networkEventArgument_LinkedView)
        {
            return (networkEventArgument_LinkedView != null && ((this.Network == null && networkEventArgument_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(networkEventArgument_LinkedView.Network))));
        }

        public override bool Equals(object networkEventArgument_LinkedView)
        {
            return Equals(networkEventArgument_LinkedView as NetworkEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class NetworkInaccessible : NasConfigFault, IEquatable<NetworkInaccessible>
    {
        public bool Equals(NetworkInaccessible networkInaccessible)
        {
            return (networkInaccessible != null && base.Equals(networkInaccessible));
        }

        public override bool Equals(object networkInaccessible)
        {
            return Equals(networkInaccessible as NetworkInaccessible);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NetworkPolicyProfile : ApplyProfile, IEquatable<NetworkPolicyProfile>
    {
        public bool Equals(NetworkPolicyProfile networkPolicyProfile)
        {
            return (networkPolicyProfile != null && base.Equals(networkPolicyProfile));
        }

        public override bool Equals(object networkPolicyProfile)
        {
            return Equals(networkPolicyProfile as NetworkPolicyProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NetworkProfile : ApplyProfile, IEquatable<NetworkProfile>
    {
        public VirtualSwitchProfile[] Vswitch { get; set; }

        public VmPortGroupProfile[] VmPortGroup { get; set; }

        public HostPortGroupProfile[] HostPortGroup { get; set; }

        public ServiceConsolePortGroupProfile[] ServiceConsolePortGroup { get; set; }

        public NetworkProfileDnsConfigProfile DnsConfig { get; set; }

        public IpRouteProfile IpRouteConfig { get; set; }

        public IpRouteProfile ConsoleIpRouteConfig { get; set; }

        public PhysicalNicProfile[] Pnic { get; set; }

        public DvsProfile[] Dvswitch { get; set; }

        public DvsServiceConsoleVNicProfile[] DvsServiceConsoleNic { get; set; }

        public DvsHostVNicProfile[] DvsHostNic { get; set; }

        public NsxHostVNicProfile[] NsxHostNic { get; set; }

        public NetStackInstanceProfile[] NetStackInstance { get; set; }

        public bool Equals(NetworkProfile networkProfile)
        {
            return (networkProfile != null && ((this.Vswitch == null && networkProfile.Vswitch == null) || (this.Vswitch != null && networkProfile.Vswitch != null && Enumerable.SequenceEqual(this.Vswitch, networkProfile.Vswitch))) && ((this.VmPortGroup == null && networkProfile.VmPortGroup == null) || (this.VmPortGroup != null && networkProfile.VmPortGroup != null && Enumerable.SequenceEqual(this.VmPortGroup, networkProfile.VmPortGroup))) && ((this.HostPortGroup == null && networkProfile.HostPortGroup == null) || (this.HostPortGroup != null && networkProfile.HostPortGroup != null && Enumerable.SequenceEqual(this.HostPortGroup, networkProfile.HostPortGroup))) && ((this.ServiceConsolePortGroup == null && networkProfile.ServiceConsolePortGroup == null) || (this.ServiceConsolePortGroup != null && networkProfile.ServiceConsolePortGroup != null && Enumerable.SequenceEqual(this.ServiceConsolePortGroup, networkProfile.ServiceConsolePortGroup))) && ((this.DnsConfig == null && networkProfile.DnsConfig == null) || (this.DnsConfig != null && this.DnsConfig.Equals(networkProfile.DnsConfig))) && ((this.IpRouteConfig == null && networkProfile.IpRouteConfig == null) || (this.IpRouteConfig != null && this.IpRouteConfig.Equals(networkProfile.IpRouteConfig))) && ((this.ConsoleIpRouteConfig == null && networkProfile.ConsoleIpRouteConfig == null) || (this.ConsoleIpRouteConfig != null && this.ConsoleIpRouteConfig.Equals(networkProfile.ConsoleIpRouteConfig))) && ((this.Pnic == null && networkProfile.Pnic == null) || (this.Pnic != null && networkProfile.Pnic != null && Enumerable.SequenceEqual(this.Pnic, networkProfile.Pnic))) && ((this.Dvswitch == null && networkProfile.Dvswitch == null) || (this.Dvswitch != null && networkProfile.Dvswitch != null && Enumerable.SequenceEqual(this.Dvswitch, networkProfile.Dvswitch))) && ((this.DvsServiceConsoleNic == null && networkProfile.DvsServiceConsoleNic == null) || (this.DvsServiceConsoleNic != null && networkProfile.DvsServiceConsoleNic != null && Enumerable.SequenceEqual(this.DvsServiceConsoleNic, networkProfile.DvsServiceConsoleNic))) && ((this.DvsHostNic == null && networkProfile.DvsHostNic == null) || (this.DvsHostNic != null && networkProfile.DvsHostNic != null && Enumerable.SequenceEqual(this.DvsHostNic, networkProfile.DvsHostNic))) && ((this.NsxHostNic == null && networkProfile.NsxHostNic == null) || (this.NsxHostNic != null && networkProfile.NsxHostNic != null && Enumerable.SequenceEqual(this.NsxHostNic, networkProfile.NsxHostNic))) && ((this.NetStackInstance == null && networkProfile.NetStackInstance == null) || (this.NetStackInstance != null && networkProfile.NetStackInstance != null && Enumerable.SequenceEqual(this.NetStackInstance, networkProfile.NetStackInstance))));
        }

        public override bool Equals(object networkProfile)
        {
            return Equals(networkProfile as NetworkProfile);
        }

        public override int GetHashCode()
        {
            return (Vswitch + "_" + VmPortGroup + "_" + HostPortGroup + "_" + ServiceConsolePortGroup + "_" + DnsConfig + "_" + IpRouteConfig + "_" + ConsoleIpRouteConfig + "_" + Pnic + "_" + Dvswitch + "_" + DvsServiceConsoleNic + "_" + DvsHostNic + "_" + NsxHostNic + "_" + NetStackInstance).GetHashCode();
        }
    }

    public class NetworkProfileDnsConfigProfile : ApplyProfile, IEquatable<NetworkProfileDnsConfigProfile>
    {
        public bool Equals(NetworkProfileDnsConfigProfile networkProfileDnsConfigProfile)
        {
            return (networkProfileDnsConfigProfile != null && base.Equals(networkProfileDnsConfigProfile));
        }

        public override bool Equals(object networkProfileDnsConfigProfile)
        {
            return Equals(networkProfileDnsConfigProfile as NetworkProfileDnsConfigProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NetworkRollbackEvent : Event, IEquatable<NetworkRollbackEvent>
    {
        public string MethodName { get; set; }

        public string TransactionId { get; set; }

        public bool Equals(NetworkRollbackEvent networkRollbackEvent)
        {
            return (networkRollbackEvent != null && this.MethodName == networkRollbackEvent.MethodName && this.TransactionId == networkRollbackEvent.TransactionId);
        }

        public override bool Equals(object networkRollbackEvent)
        {
            return Equals(networkRollbackEvent as NetworkRollbackEvent);
        }

        public override int GetHashCode()
        {
            return (MethodName + "_" + TransactionId).GetHashCode();
        }
    }

    public class NetworksMayNotBeTheSame : MigrationFault, IEquatable<NetworksMayNotBeTheSame>
    {
        public string Name { get; set; }

        public bool Equals(NetworksMayNotBeTheSame networksMayNotBeTheSame)
        {
            return (networksMayNotBeTheSame != null && this.Name == networksMayNotBeTheSame.Name);
        }

        public override bool Equals(object networksMayNotBeTheSame)
        {
            return Equals(networksMayNotBeTheSame as NetworksMayNotBeTheSame);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class NetworkSummary : DynamicData, IEquatable<NetworkSummary>
    {
        public ManagedObjectReference Network { get; set; }

        public string Name { get; set; }

        public bool Accessible { get; set; }

        public string IpPoolName { get; set; }

        public int? IpPoolId { get; set; }

        public NetworkSummary_LinkedView LinkedView { get; set; }

        public bool Equals(NetworkSummary networkSummary)
        {
            return (networkSummary != null && ((this.Network == null && networkSummary.Network == null) || (this.Network != null && this.Network.Equals(networkSummary.Network))) && this.Name == networkSummary.Name && this.Accessible == networkSummary.Accessible && this.IpPoolName == networkSummary.IpPoolName && ((this.IpPoolId == null && networkSummary.IpPoolId == null) || (this.IpPoolId != null && this.IpPoolId.Equals(networkSummary.IpPoolId))) && ((this.LinkedView == null && networkSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(networkSummary.LinkedView))));
        }

        public override bool Equals(object networkSummary)
        {
            return Equals(networkSummary as NetworkSummary);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + Name + "_" + Accessible + "_" + IpPoolName + "_" + IpPoolId + "_" + LinkedView).GetHashCode();
        }
    }

    public class NetworkSummary_LinkedView : IEquatable<NetworkSummary_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(NetworkSummary_LinkedView networkSummary_LinkedView)
        {
            return (networkSummary_LinkedView != null && ((this.Network == null && networkSummary_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(networkSummary_LinkedView.Network))));
        }

        public override bool Equals(object networkSummary_LinkedView)
        {
            return Equals(networkSummary_LinkedView as NetworkSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class NicSettingMismatch : CustomizationFault, IEquatable<NicSettingMismatch>
    {
        public int NumberOfNicsInSpec { get; set; }

        public int NumberOfNicsInVM { get; set; }

        public bool Equals(NicSettingMismatch nicSettingMismatch)
        {
            return (nicSettingMismatch != null && this.NumberOfNicsInSpec == nicSettingMismatch.NumberOfNicsInSpec && this.NumberOfNicsInVM == nicSettingMismatch.NumberOfNicsInVM);
        }

        public override bool Equals(object nicSettingMismatch)
        {
            return Equals(nicSettingMismatch as NicSettingMismatch);
        }

        public override int GetHashCode()
        {
            return (NumberOfNicsInSpec + "_" + NumberOfNicsInVM).GetHashCode();
        }
    }

    public class NoAccessUserEvent : SessionEvent, IEquatable<NoAccessUserEvent>
    {
        public string IpAddress { get; set; }

        public bool Equals(NoAccessUserEvent noAccessUserEvent)
        {
            return (noAccessUserEvent != null && this.IpAddress == noAccessUserEvent.IpAddress);
        }

        public override bool Equals(object noAccessUserEvent)
        {
            return Equals(noAccessUserEvent as NoAccessUserEvent);
        }

        public override int GetHashCode()
        {
            return (IpAddress).GetHashCode();
        }
    }

    public class NoActiveHostInCluster : InvalidState, IEquatable<NoActiveHostInCluster>
    {
        public ManagedObjectReference ComputeResource { get; set; }

        public NoActiveHostInCluster_LinkedView LinkedView { get; set; }

        public bool Equals(NoActiveHostInCluster noActiveHostInCluster)
        {
            return (noActiveHostInCluster != null && ((this.ComputeResource == null && noActiveHostInCluster.ComputeResource == null) || (this.ComputeResource != null && this.ComputeResource.Equals(noActiveHostInCluster.ComputeResource))) && ((this.LinkedView == null && noActiveHostInCluster.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(noActiveHostInCluster.LinkedView))));
        }

        public override bool Equals(object noActiveHostInCluster)
        {
            return Equals(noActiveHostInCluster as NoActiveHostInCluster);
        }

        public override int GetHashCode()
        {
            return (ComputeResource + "_" + LinkedView).GetHashCode();
        }
    }

    public class NoActiveHostInCluster_LinkedView : IEquatable<NoActiveHostInCluster_LinkedView>
    {
        public ComputeResource ComputeResource { get; set; }

        public bool Equals(NoActiveHostInCluster_LinkedView noActiveHostInCluster_LinkedView)
        {
            return (noActiveHostInCluster_LinkedView != null && ((this.ComputeResource == null && noActiveHostInCluster_LinkedView.ComputeResource == null) || (this.ComputeResource != null && this.ComputeResource.Equals(noActiveHostInCluster_LinkedView.ComputeResource))));
        }

        public override bool Equals(object noActiveHostInCluster_LinkedView)
        {
            return Equals(noActiveHostInCluster_LinkedView as NoActiveHostInCluster_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ComputeResource).GetHashCode();
        }
    }

    public class NoAvailableIp : VAppPropertyFault, IEquatable<NoAvailableIp>
    {
        public ManagedObjectReference Network { get; set; }

        public NoAvailableIp_LinkedView LinkedView { get; set; }

        public bool Equals(NoAvailableIp noAvailableIp)
        {
            return (noAvailableIp != null && ((this.Network == null && noAvailableIp.Network == null) || (this.Network != null && this.Network.Equals(noAvailableIp.Network))) && ((this.LinkedView == null && noAvailableIp.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(noAvailableIp.LinkedView))));
        }

        public override bool Equals(object noAvailableIp)
        {
            return Equals(noAvailableIp as NoAvailableIp);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class NoAvailableIp_LinkedView : IEquatable<NoAvailableIp_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(NoAvailableIp_LinkedView noAvailableIp_LinkedView)
        {
            return (noAvailableIp_LinkedView != null && ((this.Network == null && noAvailableIp_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(noAvailableIp_LinkedView.Network))));
        }

        public override bool Equals(object noAvailableIp_LinkedView)
        {
            return Equals(noAvailableIp_LinkedView as NoAvailableIp_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class NoClientCertificate : VimFault, IEquatable<NoClientCertificate>
    {
        public bool Equals(NoClientCertificate noClientCertificate)
        {
            return (noClientCertificate != null && base.Equals(noClientCertificate));
        }

        public override bool Equals(object noClientCertificate)
        {
            return Equals(noClientCertificate as NoClientCertificate);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoCompatibleDatastore : VimFault, IEquatable<NoCompatibleDatastore>
    {
        public bool Equals(NoCompatibleDatastore noCompatibleDatastore)
        {
            return (noCompatibleDatastore != null && base.Equals(noCompatibleDatastore));
        }

        public override bool Equals(object noCompatibleDatastore)
        {
            return Equals(noCompatibleDatastore as NoCompatibleDatastore);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoCompatibleHardAffinityHost : VmConfigFault, IEquatable<NoCompatibleHardAffinityHost>
    {
        public string VmName { get; set; }

        public bool Equals(NoCompatibleHardAffinityHost noCompatibleHardAffinityHost)
        {
            return (noCompatibleHardAffinityHost != null && this.VmName == noCompatibleHardAffinityHost.VmName);
        }

        public override bool Equals(object noCompatibleHardAffinityHost)
        {
            return Equals(noCompatibleHardAffinityHost as NoCompatibleHardAffinityHost);
        }

        public override int GetHashCode()
        {
            return (VmName).GetHashCode();
        }
    }

    public class NoCompatibleHost : VimFault, IEquatable<NoCompatibleHost>
    {
        public ManagedObjectReference[] Host { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public NoCompatibleHost_LinkedView LinkedView { get; set; }

        public bool Equals(NoCompatibleHost noCompatibleHost)
        {
            return (noCompatibleHost != null && ((this.Host == null && noCompatibleHost.Host == null) || (this.Host != null && noCompatibleHost.Host != null && Enumerable.SequenceEqual(this.Host, noCompatibleHost.Host))) && ((this.Error == null && noCompatibleHost.Error == null) || (this.Error != null && noCompatibleHost.Error != null && Enumerable.SequenceEqual(this.Error, noCompatibleHost.Error))) && ((this.LinkedView == null && noCompatibleHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(noCompatibleHost.LinkedView))));
        }

        public override bool Equals(object noCompatibleHost)
        {
            return Equals(noCompatibleHost as NoCompatibleHost);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class NoCompatibleHost_LinkedView : IEquatable<NoCompatibleHost_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(NoCompatibleHost_LinkedView noCompatibleHost_LinkedView)
        {
            return (noCompatibleHost_LinkedView != null && ((this.Host == null && noCompatibleHost_LinkedView.Host == null) || (this.Host != null && noCompatibleHost_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, noCompatibleHost_LinkedView.Host))));
        }

        public override bool Equals(object noCompatibleHost_LinkedView)
        {
            return Equals(noCompatibleHost_LinkedView as NoCompatibleHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class NoCompatibleHostWithAccessToDevice : NoCompatibleHost, IEquatable<NoCompatibleHostWithAccessToDevice>
    {
        public new NoCompatibleHostWithAccessToDevice_LinkedView LinkedView { get; set; }

        public bool Equals(NoCompatibleHostWithAccessToDevice noCompatibleHostWithAccessToDevice)
        {
            return (noCompatibleHostWithAccessToDevice != null && ((this.LinkedView == null && noCompatibleHostWithAccessToDevice.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(noCompatibleHostWithAccessToDevice.LinkedView))));
        }

        public override bool Equals(object noCompatibleHostWithAccessToDevice)
        {
            return Equals(noCompatibleHostWithAccessToDevice as NoCompatibleHostWithAccessToDevice);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class NoCompatibleHostWithAccessToDevice_LinkedView : NoCompatibleHost_LinkedView, IEquatable<NoCompatibleHostWithAccessToDevice_LinkedView>
    {
        public bool Equals(NoCompatibleHostWithAccessToDevice_LinkedView noCompatibleHostWithAccessToDevice_LinkedView)
        {
            return (noCompatibleHostWithAccessToDevice_LinkedView != null && base.Equals(noCompatibleHostWithAccessToDevice_LinkedView));
        }

        public override bool Equals(object noCompatibleHostWithAccessToDevice_LinkedView)
        {
            return Equals(noCompatibleHostWithAccessToDevice_LinkedView as NoCompatibleHostWithAccessToDevice_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoCompatibleSoftAffinityHost : VmConfigFault, IEquatable<NoCompatibleSoftAffinityHost>
    {
        public string VmName { get; set; }

        public bool Equals(NoCompatibleSoftAffinityHost noCompatibleSoftAffinityHost)
        {
            return (noCompatibleSoftAffinityHost != null && this.VmName == noCompatibleSoftAffinityHost.VmName);
        }

        public override bool Equals(object noCompatibleSoftAffinityHost)
        {
            return Equals(noCompatibleSoftAffinityHost as NoCompatibleSoftAffinityHost);
        }

        public override int GetHashCode()
        {
            return (VmName).GetHashCode();
        }
    }

    public class NoConnectedDatastore : VimFault, IEquatable<NoConnectedDatastore>
    {
        public bool Equals(NoConnectedDatastore noConnectedDatastore)
        {
            return (noConnectedDatastore != null && base.Equals(noConnectedDatastore));
        }

        public override bool Equals(object noConnectedDatastore)
        {
            return Equals(noConnectedDatastore as NoConnectedDatastore);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoDatastoresConfiguredEvent : HostEvent, IEquatable<NoDatastoresConfiguredEvent>
    {
        public bool Equals(NoDatastoresConfiguredEvent noDatastoresConfiguredEvent)
        {
            return (noDatastoresConfiguredEvent != null && base.Equals(noDatastoresConfiguredEvent));
        }

        public override bool Equals(object noDatastoresConfiguredEvent)
        {
            return Equals(noDatastoresConfiguredEvent as NoDatastoresConfiguredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NodeDeploymentSpec : DynamicData, IEquatable<NodeDeploymentSpec>
    {
        public ManagedObjectReference EsxHost { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public ManagedObjectReference PublicNetworkPortGroup { get; set; }

        public ManagedObjectReference ClusterNetworkPortGroup { get; set; }

        public ManagedObjectReference Folder { get; set; }

        public ManagedObjectReference ResourcePool { get; set; }

        public ServiceLocator ManagementVc { get; set; }

        public string NodeName { get; set; }

        public CustomizationIPSettings IpSettings { get; set; }

        public NodeDeploymentSpec_LinkedView LinkedView { get; set; }

        public bool Equals(NodeDeploymentSpec nodeDeploymentSpec)
        {
            return (nodeDeploymentSpec != null && ((this.EsxHost == null && nodeDeploymentSpec.EsxHost == null) || (this.EsxHost != null && this.EsxHost.Equals(nodeDeploymentSpec.EsxHost))) && ((this.Datastore == null && nodeDeploymentSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(nodeDeploymentSpec.Datastore))) && ((this.PublicNetworkPortGroup == null && nodeDeploymentSpec.PublicNetworkPortGroup == null) || (this.PublicNetworkPortGroup != null && this.PublicNetworkPortGroup.Equals(nodeDeploymentSpec.PublicNetworkPortGroup))) && ((this.ClusterNetworkPortGroup == null && nodeDeploymentSpec.ClusterNetworkPortGroup == null) || (this.ClusterNetworkPortGroup != null && this.ClusterNetworkPortGroup.Equals(nodeDeploymentSpec.ClusterNetworkPortGroup))) && ((this.Folder == null && nodeDeploymentSpec.Folder == null) || (this.Folder != null && this.Folder.Equals(nodeDeploymentSpec.Folder))) && ((this.ResourcePool == null && nodeDeploymentSpec.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(nodeDeploymentSpec.ResourcePool))) && ((this.ManagementVc == null && nodeDeploymentSpec.ManagementVc == null) || (this.ManagementVc != null && this.ManagementVc.Equals(nodeDeploymentSpec.ManagementVc))) && this.NodeName == nodeDeploymentSpec.NodeName && ((this.IpSettings == null && nodeDeploymentSpec.IpSettings == null) || (this.IpSettings != null && this.IpSettings.Equals(nodeDeploymentSpec.IpSettings))) && ((this.LinkedView == null && nodeDeploymentSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(nodeDeploymentSpec.LinkedView))));
        }

        public override bool Equals(object nodeDeploymentSpec)
        {
            return Equals(nodeDeploymentSpec as NodeDeploymentSpec);
        }

        public override int GetHashCode()
        {
            return (EsxHost + "_" + Datastore + "_" + PublicNetworkPortGroup + "_" + ClusterNetworkPortGroup + "_" + Folder + "_" + ResourcePool + "_" + ManagementVc + "_" + NodeName + "_" + IpSettings + "_" + LinkedView).GetHashCode();
        }
    }

    public class NodeDeploymentSpec_LinkedView : IEquatable<NodeDeploymentSpec_LinkedView>
    {
        public HostSystem EsxHost { get; set; }

        public Datastore Datastore { get; set; }

        public Network PublicNetworkPortGroup { get; set; }

        public Network ClusterNetworkPortGroup { get; set; }

        public Folder Folder { get; set; }

        public ResourcePool ResourcePool { get; set; }

        public bool Equals(NodeDeploymentSpec_LinkedView nodeDeploymentSpec_LinkedView)
        {
            return (nodeDeploymentSpec_LinkedView != null && ((this.EsxHost == null && nodeDeploymentSpec_LinkedView.EsxHost == null) || (this.EsxHost != null && this.EsxHost.Equals(nodeDeploymentSpec_LinkedView.EsxHost))) && ((this.Datastore == null && nodeDeploymentSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(nodeDeploymentSpec_LinkedView.Datastore))) && ((this.PublicNetworkPortGroup == null && nodeDeploymentSpec_LinkedView.PublicNetworkPortGroup == null) || (this.PublicNetworkPortGroup != null && this.PublicNetworkPortGroup.Equals(nodeDeploymentSpec_LinkedView.PublicNetworkPortGroup))) && ((this.ClusterNetworkPortGroup == null && nodeDeploymentSpec_LinkedView.ClusterNetworkPortGroup == null) || (this.ClusterNetworkPortGroup != null && this.ClusterNetworkPortGroup.Equals(nodeDeploymentSpec_LinkedView.ClusterNetworkPortGroup))) && ((this.Folder == null && nodeDeploymentSpec_LinkedView.Folder == null) || (this.Folder != null && this.Folder.Equals(nodeDeploymentSpec_LinkedView.Folder))) && ((this.ResourcePool == null && nodeDeploymentSpec_LinkedView.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(nodeDeploymentSpec_LinkedView.ResourcePool))));
        }

        public override bool Equals(object nodeDeploymentSpec_LinkedView)
        {
            return Equals(nodeDeploymentSpec_LinkedView as NodeDeploymentSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (EsxHost + "_" + Datastore + "_" + PublicNetworkPortGroup + "_" + ClusterNetworkPortGroup + "_" + Folder + "_" + ResourcePool).GetHashCode();
        }
    }

    public class NodeNetworkSpec : DynamicData, IEquatable<NodeNetworkSpec>
    {
        public CustomizationIPSettings IpSettings { get; set; }

        public bool Equals(NodeNetworkSpec nodeNetworkSpec)
        {
            return (nodeNetworkSpec != null && ((this.IpSettings == null && nodeNetworkSpec.IpSettings == null) || (this.IpSettings != null && this.IpSettings.Equals(nodeNetworkSpec.IpSettings))));
        }

        public override bool Equals(object nodeNetworkSpec)
        {
            return Equals(nodeNetworkSpec as NodeNetworkSpec);
        }

        public override int GetHashCode()
        {
            return (IpSettings).GetHashCode();
        }
    }

    public class NoDiskFound : VimFault, IEquatable<NoDiskFound>
    {
        public bool Equals(NoDiskFound noDiskFound)
        {
            return (noDiskFound != null && base.Equals(noDiskFound));
        }

        public override bool Equals(object noDiskFound)
        {
            return Equals(noDiskFound as NoDiskFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoDiskSpace : FileFault, IEquatable<NoDiskSpace>
    {
        public string Datastore { get; set; }

        public bool Equals(NoDiskSpace noDiskSpace)
        {
            return (noDiskSpace != null && this.Datastore == noDiskSpace.Datastore);
        }

        public override bool Equals(object noDiskSpace)
        {
            return Equals(noDiskSpace as NoDiskSpace);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class NoDisksToCustomize : CustomizationFault, IEquatable<NoDisksToCustomize>
    {
        public bool Equals(NoDisksToCustomize noDisksToCustomize)
        {
            return (noDisksToCustomize != null && base.Equals(noDisksToCustomize));
        }

        public override bool Equals(object noDisksToCustomize)
        {
            return Equals(noDisksToCustomize as NoDisksToCustomize);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoGateway : HostConfigFault, IEquatable<NoGateway>
    {
        public bool Equals(NoGateway noGateway)
        {
            return (noGateway != null && base.Equals(noGateway));
        }

        public override bool Equals(object noGateway)
        {
            return Equals(noGateway as NoGateway);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoGuestHeartbeat : MigrationFault, IEquatable<NoGuestHeartbeat>
    {
        public bool Equals(NoGuestHeartbeat noGuestHeartbeat)
        {
            return (noGuestHeartbeat != null && base.Equals(noGuestHeartbeat));
        }

        public override bool Equals(object noGuestHeartbeat)
        {
            return Equals(noGuestHeartbeat as NoGuestHeartbeat);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoHost : HostConnectFault, IEquatable<NoHost>
    {
        public string Name { get; set; }

        public bool Equals(NoHost noHost)
        {
            return (noHost != null && this.Name == noHost.Name);
        }

        public override bool Equals(object noHost)
        {
            return Equals(noHost as NoHost);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class NoHostSuitableForFtSecondary : VmFaultToleranceIssue, IEquatable<NoHostSuitableForFtSecondary>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public NoHostSuitableForFtSecondary_LinkedView LinkedView { get; set; }

        public bool Equals(NoHostSuitableForFtSecondary noHostSuitableForFtSecondary)
        {
            return (noHostSuitableForFtSecondary != null && ((this.Vm == null && noHostSuitableForFtSecondary.Vm == null) || (this.Vm != null && this.Vm.Equals(noHostSuitableForFtSecondary.Vm))) && this.VmName == noHostSuitableForFtSecondary.VmName && ((this.LinkedView == null && noHostSuitableForFtSecondary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(noHostSuitableForFtSecondary.LinkedView))));
        }

        public override bool Equals(object noHostSuitableForFtSecondary)
        {
            return Equals(noHostSuitableForFtSecondary as NoHostSuitableForFtSecondary);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + LinkedView).GetHashCode();
        }
    }

    public class NoHostSuitableForFtSecondary_LinkedView : IEquatable<NoHostSuitableForFtSecondary_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(NoHostSuitableForFtSecondary_LinkedView noHostSuitableForFtSecondary_LinkedView)
        {
            return (noHostSuitableForFtSecondary_LinkedView != null && ((this.Vm == null && noHostSuitableForFtSecondary_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(noHostSuitableForFtSecondary_LinkedView.Vm))));
        }

        public override bool Equals(object noHostSuitableForFtSecondary_LinkedView)
        {
            return Equals(noHostSuitableForFtSecondary_LinkedView as NoHostSuitableForFtSecondary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class NoLicenseEvent : LicenseEvent, IEquatable<NoLicenseEvent>
    {
        public LicenseFeatureInfo Feature { get; set; }

        public bool Equals(NoLicenseEvent noLicenseEvent)
        {
            return (noLicenseEvent != null && ((this.Feature == null && noLicenseEvent.Feature == null) || (this.Feature != null && this.Feature.Equals(noLicenseEvent.Feature))));
        }

        public override bool Equals(object noLicenseEvent)
        {
            return Equals(noLicenseEvent as NoLicenseEvent);
        }

        public override int GetHashCode()
        {
            return (Feature).GetHashCode();
        }
    }

    public class NoLicenseServerConfigured : NotEnoughLicenses, IEquatable<NoLicenseServerConfigured>
    {
        public bool Equals(NoLicenseServerConfigured noLicenseServerConfigured)
        {
            return (noLicenseServerConfigured != null && base.Equals(noLicenseServerConfigured));
        }

        public override bool Equals(object noLicenseServerConfigured)
        {
            return Equals(noLicenseServerConfigured as NoLicenseServerConfigured);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoMaintenanceModeDrsRecommendationForVM : VmEvent, IEquatable<NoMaintenanceModeDrsRecommendationForVM>
    {
        public bool Equals(NoMaintenanceModeDrsRecommendationForVM noMaintenanceModeDrsRecommendationForVM)
        {
            return (noMaintenanceModeDrsRecommendationForVM != null && base.Equals(noMaintenanceModeDrsRecommendationForVM));
        }

        public override bool Equals(object noMaintenanceModeDrsRecommendationForVM)
        {
            return Equals(noMaintenanceModeDrsRecommendationForVM as NoMaintenanceModeDrsRecommendationForVM);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NonADUserRequired : ActiveDirectoryFault, IEquatable<NonADUserRequired>
    {
        public bool Equals(NonADUserRequired nonADUserRequired)
        {
            return (nonADUserRequired != null && base.Equals(nonADUserRequired));
        }

        public override bool Equals(object nonADUserRequired)
        {
            return Equals(nonADUserRequired as NonADUserRequired);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NonHomeRDMVMotionNotSupported : MigrationFeatureNotSupported, IEquatable<NonHomeRDMVMotionNotSupported>
    {
        public string Device { get; set; }

        public new NonHomeRDMVMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(NonHomeRDMVMotionNotSupported nonHomeRDMVMotionNotSupported)
        {
            return (nonHomeRDMVMotionNotSupported != null && this.Device == nonHomeRDMVMotionNotSupported.Device && ((this.LinkedView == null && nonHomeRDMVMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(nonHomeRDMVMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object nonHomeRDMVMotionNotSupported)
        {
            return Equals(nonHomeRDMVMotionNotSupported as NonHomeRDMVMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + LinkedView).GetHashCode();
        }
    }

    public class NonHomeRDMVMotionNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<NonHomeRDMVMotionNotSupported_LinkedView>
    {
        public bool Equals(NonHomeRDMVMotionNotSupported_LinkedView nonHomeRDMVMotionNotSupported_LinkedView)
        {
            return (nonHomeRDMVMotionNotSupported_LinkedView != null && base.Equals(nonHomeRDMVMotionNotSupported_LinkedView));
        }

        public override bool Equals(object nonHomeRDMVMotionNotSupported_LinkedView)
        {
            return Equals(nonHomeRDMVMotionNotSupported_LinkedView as NonHomeRDMVMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NonPersistentDisksNotSupported : DeviceNotSupported, IEquatable<NonPersistentDisksNotSupported>
    {
        public bool Equals(NonPersistentDisksNotSupported nonPersistentDisksNotSupported)
        {
            return (nonPersistentDisksNotSupported != null && base.Equals(nonPersistentDisksNotSupported));
        }

        public override bool Equals(object nonPersistentDisksNotSupported)
        {
            return Equals(nonPersistentDisksNotSupported as NonPersistentDisksNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NonVIWorkloadDetectedOnDatastoreEvent : DatastoreEvent, IEquatable<NonVIWorkloadDetectedOnDatastoreEvent>
    {
        public bool Equals(NonVIWorkloadDetectedOnDatastoreEvent nonVIWorkloadDetectedOnDatastoreEvent)
        {
            return (nonVIWorkloadDetectedOnDatastoreEvent != null && base.Equals(nonVIWorkloadDetectedOnDatastoreEvent));
        }

        public override bool Equals(object nonVIWorkloadDetectedOnDatastoreEvent)
        {
            return Equals(nonVIWorkloadDetectedOnDatastoreEvent as NonVIWorkloadDetectedOnDatastoreEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NonVmwareOuiMacNotSupportedHost : NotSupportedHost, IEquatable<NonVmwareOuiMacNotSupportedHost>
    {
        public string HostName { get; set; }

        public bool Equals(NonVmwareOuiMacNotSupportedHost nonVmwareOuiMacNotSupportedHost)
        {
            return (nonVmwareOuiMacNotSupportedHost != null && this.HostName == nonVmwareOuiMacNotSupportedHost.HostName);
        }

        public override bool Equals(object nonVmwareOuiMacNotSupportedHost)
        {
            return Equals(nonVmwareOuiMacNotSupportedHost as NonVmwareOuiMacNotSupportedHost);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class NoPeerHostFound : HostPowerOpFailed, IEquatable<NoPeerHostFound>
    {
        public bool Equals(NoPeerHostFound noPeerHostFound)
        {
            return (noPeerHostFound != null && base.Equals(noPeerHostFound));
        }

        public override bool Equals(object noPeerHostFound)
        {
            return Equals(noPeerHostFound as NoPeerHostFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoPermission : SecurityError, IEquatable<NoPermission>
    {
        public ManagedObjectReference Object { get; set; }

        public string PrivilegeId { get; set; }

        public bool Equals(NoPermission noPermission)
        {
            return (noPermission != null && ((this.Object == null && noPermission.Object == null) || (this.Object != null && this.Object.Equals(noPermission.Object))) && this.PrivilegeId == noPermission.PrivilegeId);
        }

        public override bool Equals(object noPermission)
        {
            return Equals(noPermission as NoPermission);
        }

        public override int GetHashCode()
        {
            return (Object + "_" + PrivilegeId).GetHashCode();
        }
    }

    public class NoPermissionOnAD : ActiveDirectoryFault, IEquatable<NoPermissionOnAD>
    {
        public bool Equals(NoPermissionOnAD noPermissionOnAD)
        {
            return (noPermissionOnAD != null && base.Equals(noPermissionOnAD));
        }

        public override bool Equals(object noPermissionOnAD)
        {
            return Equals(noPermissionOnAD as NoPermissionOnAD);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoPermissionOnHost : HostConnectFault, IEquatable<NoPermissionOnHost>
    {
        public bool Equals(NoPermissionOnHost noPermissionOnHost)
        {
            return (noPermissionOnHost != null && base.Equals(noPermissionOnHost));
        }

        public override bool Equals(object noPermissionOnHost)
        {
            return Equals(noPermissionOnHost as NoPermissionOnHost);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoPermissionOnNasVolume : NasConfigFault, IEquatable<NoPermissionOnNasVolume>
    {
        public string UserName { get; set; }

        public bool Equals(NoPermissionOnNasVolume noPermissionOnNasVolume)
        {
            return (noPermissionOnNasVolume != null && this.UserName == noPermissionOnNasVolume.UserName);
        }

        public override bool Equals(object noPermissionOnNasVolume)
        {
            return Equals(noPermissionOnNasVolume as NoPermissionOnNasVolume);
        }

        public override int GetHashCode()
        {
            return (UserName).GetHashCode();
        }
    }

    public class NoSubjectName : VimFault, IEquatable<NoSubjectName>
    {
        public bool Equals(NoSubjectName noSubjectName)
        {
            return (noSubjectName != null && base.Equals(noSubjectName));
        }

        public override bool Equals(object noSubjectName)
        {
            return Equals(noSubjectName as NoSubjectName);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotADirectory : FileFault, IEquatable<NotADirectory>
    {
        public bool Equals(NotADirectory notADirectory)
        {
            return (notADirectory != null && base.Equals(notADirectory));
        }

        public override bool Equals(object notADirectory)
        {
            return Equals(notADirectory as NotADirectory);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotAFile : FileFault, IEquatable<NotAFile>
    {
        public bool Equals(NotAFile notAFile)
        {
            return (notAFile != null && base.Equals(notAFile));
        }

        public override bool Equals(object notAFile)
        {
            return Equals(notAFile as NotAFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotAuthenticated : NoPermission, IEquatable<NotAuthenticated>
    {
        public bool Equals(NotAuthenticated notAuthenticated)
        {
            return (notAuthenticated != null && base.Equals(notAuthenticated));
        }

        public override bool Equals(object notAuthenticated)
        {
            return Equals(notAuthenticated as NotAuthenticated);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotEnoughCpus : VirtualHardwareCompatibilityIssue, IEquatable<NotEnoughCpus>
    {
        public int NumCpuDest { get; set; }

        public int NumCpuVm { get; set; }

        public bool Equals(NotEnoughCpus notEnoughCpus)
        {
            return (notEnoughCpus != null && this.NumCpuDest == notEnoughCpus.NumCpuDest && this.NumCpuVm == notEnoughCpus.NumCpuVm);
        }

        public override bool Equals(object notEnoughCpus)
        {
            return Equals(notEnoughCpus as NotEnoughCpus);
        }

        public override int GetHashCode()
        {
            return (NumCpuDest + "_" + NumCpuVm).GetHashCode();
        }
    }

    public class NotEnoughLicenses : RuntimeFault, IEquatable<NotEnoughLicenses>
    {
        public bool Equals(NotEnoughLicenses notEnoughLicenses)
        {
            return (notEnoughLicenses != null && base.Equals(notEnoughLicenses));
        }

        public override bool Equals(object notEnoughLicenses)
        {
            return Equals(notEnoughLicenses as NotEnoughLicenses);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotEnoughLogicalCpus : NotEnoughCpus, IEquatable<NotEnoughLogicalCpus>
    {
        public ManagedObjectReference Host { get; set; }

        public NotEnoughLogicalCpus_LinkedView LinkedView { get; set; }

        public bool Equals(NotEnoughLogicalCpus notEnoughLogicalCpus)
        {
            return (notEnoughLogicalCpus != null && ((this.Host == null && notEnoughLogicalCpus.Host == null) || (this.Host != null && this.Host.Equals(notEnoughLogicalCpus.Host))) && ((this.LinkedView == null && notEnoughLogicalCpus.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(notEnoughLogicalCpus.LinkedView))));
        }

        public override bool Equals(object notEnoughLogicalCpus)
        {
            return Equals(notEnoughLogicalCpus as NotEnoughLogicalCpus);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class NotEnoughLogicalCpus_LinkedView : IEquatable<NotEnoughLogicalCpus_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(NotEnoughLogicalCpus_LinkedView notEnoughLogicalCpus_LinkedView)
        {
            return (notEnoughLogicalCpus_LinkedView != null && ((this.Host == null && notEnoughLogicalCpus_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(notEnoughLogicalCpus_LinkedView.Host))));
        }

        public override bool Equals(object notEnoughLogicalCpus_LinkedView)
        {
            return Equals(notEnoughLogicalCpus_LinkedView as NotEnoughLogicalCpus_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class NotEnoughResourcesToStartVmEvent : VmEvent, IEquatable<NotEnoughResourcesToStartVmEvent>
    {
        public string Reason { get; set; }

        public bool Equals(NotEnoughResourcesToStartVmEvent notEnoughResourcesToStartVmEvent)
        {
            return (notEnoughResourcesToStartVmEvent != null && this.Reason == notEnoughResourcesToStartVmEvent.Reason);
        }

        public override bool Equals(object notEnoughResourcesToStartVmEvent)
        {
            return Equals(notEnoughResourcesToStartVmEvent as NotEnoughResourcesToStartVmEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class NotFound : VimFault, IEquatable<NotFound>
    {
        public bool Equals(NotFound notFound)
        {
            return (notFound != null && base.Equals(notFound));
        }

        public override bool Equals(object notFound)
        {
            return Equals(notFound as NotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotImplemented : RuntimeFault, IEquatable<NotImplemented>
    {
        public bool Equals(NotImplemented notImplemented)
        {
            return (notImplemented != null && base.Equals(notImplemented));
        }

        public override bool Equals(object notImplemented)
        {
            return Equals(notImplemented as NotImplemented);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotSupported : RuntimeFault, IEquatable<NotSupported>
    {
        public bool Equals(NotSupported notSupported)
        {
            return (notSupported != null && base.Equals(notSupported));
        }

        public override bool Equals(object notSupported)
        {
            return Equals(notSupported as NotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotSupportedDeviceForFT : VmFaultToleranceIssue, IEquatable<NotSupportedDeviceForFT>
    {
        public ManagedObjectReference Host { get; set; }

        public string HostName { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public string DeviceType { get; set; }

        public string DeviceLabel { get; set; }

        public NotSupportedDeviceForFT_LinkedView LinkedView { get; set; }

        public bool Equals(NotSupportedDeviceForFT notSupportedDeviceForFT)
        {
            return (notSupportedDeviceForFT != null && ((this.Host == null && notSupportedDeviceForFT.Host == null) || (this.Host != null && this.Host.Equals(notSupportedDeviceForFT.Host))) && this.HostName == notSupportedDeviceForFT.HostName && ((this.Vm == null && notSupportedDeviceForFT.Vm == null) || (this.Vm != null && this.Vm.Equals(notSupportedDeviceForFT.Vm))) && this.VmName == notSupportedDeviceForFT.VmName && this.DeviceType == notSupportedDeviceForFT.DeviceType && this.DeviceLabel == notSupportedDeviceForFT.DeviceLabel && ((this.LinkedView == null && notSupportedDeviceForFT.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(notSupportedDeviceForFT.LinkedView))));
        }

        public override bool Equals(object notSupportedDeviceForFT)
        {
            return Equals(notSupportedDeviceForFT as NotSupportedDeviceForFT);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + Vm + "_" + VmName + "_" + DeviceType + "_" + DeviceLabel + "_" + LinkedView).GetHashCode();
        }
    }

    public class NotSupportedDeviceForFT_LinkedView : IEquatable<NotSupportedDeviceForFT_LinkedView>
    {
        public HostSystem Host { get; set; }

        public VirtualMachine Vm { get; set; }

        public bool Equals(NotSupportedDeviceForFT_LinkedView notSupportedDeviceForFT_LinkedView)
        {
            return (notSupportedDeviceForFT_LinkedView != null && ((this.Host == null && notSupportedDeviceForFT_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(notSupportedDeviceForFT_LinkedView.Host))) && ((this.Vm == null && notSupportedDeviceForFT_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(notSupportedDeviceForFT_LinkedView.Vm))));
        }

        public override bool Equals(object notSupportedDeviceForFT_LinkedView)
        {
            return Equals(notSupportedDeviceForFT_LinkedView as NotSupportedDeviceForFT_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Vm).GetHashCode();
        }
    }

    public class NotSupportedHost : HostConnectFault, IEquatable<NotSupportedHost>
    {
        public string ProductName { get; set; }

        public string ProductVersion { get; set; }

        public bool Equals(NotSupportedHost notSupportedHost)
        {
            return (notSupportedHost != null && this.ProductName == notSupportedHost.ProductName && this.ProductVersion == notSupportedHost.ProductVersion);
        }

        public override bool Equals(object notSupportedHost)
        {
            return Equals(notSupportedHost as NotSupportedHost);
        }

        public override int GetHashCode()
        {
            return (ProductName + "_" + ProductVersion).GetHashCode();
        }
    }

    public class NotSupportedHostForChecksum : VimFault, IEquatable<NotSupportedHostForChecksum>
    {
        public bool Equals(NotSupportedHostForChecksum notSupportedHostForChecksum)
        {
            return (notSupportedHostForChecksum != null && base.Equals(notSupportedHostForChecksum));
        }

        public override bool Equals(object notSupportedHostForChecksum)
        {
            return Equals(notSupportedHostForChecksum as NotSupportedHostForChecksum);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotSupportedHostForVFlash : NotSupportedHost, IEquatable<NotSupportedHostForVFlash>
    {
        public string HostName { get; set; }

        public bool Equals(NotSupportedHostForVFlash notSupportedHostForVFlash)
        {
            return (notSupportedHostForVFlash != null && this.HostName == notSupportedHostForVFlash.HostName);
        }

        public override bool Equals(object notSupportedHostForVFlash)
        {
            return Equals(notSupportedHostForVFlash as NotSupportedHostForVFlash);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class NotSupportedHostForVmcp : NotSupportedHost, IEquatable<NotSupportedHostForVmcp>
    {
        public string HostName { get; set; }

        public bool Equals(NotSupportedHostForVmcp notSupportedHostForVmcp)
        {
            return (notSupportedHostForVmcp != null && this.HostName == notSupportedHostForVmcp.HostName);
        }

        public override bool Equals(object notSupportedHostForVmcp)
        {
            return Equals(notSupportedHostForVmcp as NotSupportedHostForVmcp);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class NotSupportedHostForVmemFile : NotSupportedHost, IEquatable<NotSupportedHostForVmemFile>
    {
        public string HostName { get; set; }

        public bool Equals(NotSupportedHostForVmemFile notSupportedHostForVmemFile)
        {
            return (notSupportedHostForVmemFile != null && this.HostName == notSupportedHostForVmemFile.HostName);
        }

        public override bool Equals(object notSupportedHostForVmemFile)
        {
            return Equals(notSupportedHostForVmemFile as NotSupportedHostForVmemFile);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class NotSupportedHostForVsan : NotSupportedHost, IEquatable<NotSupportedHostForVsan>
    {
        public string HostName { get; set; }

        public bool Equals(NotSupportedHostForVsan notSupportedHostForVsan)
        {
            return (notSupportedHostForVsan != null && this.HostName == notSupportedHostForVsan.HostName);
        }

        public override bool Equals(object notSupportedHostForVsan)
        {
            return Equals(notSupportedHostForVsan as NotSupportedHostForVsan);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class NotSupportedHostInCluster : NotSupportedHost, IEquatable<NotSupportedHostInCluster>
    {
        public bool Equals(NotSupportedHostInCluster notSupportedHostInCluster)
        {
            return (notSupportedHostInCluster != null && base.Equals(notSupportedHostInCluster));
        }

        public override bool Equals(object notSupportedHostInCluster)
        {
            return Equals(notSupportedHostInCluster as NotSupportedHostInCluster);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NotSupportedHostInDvs : NotSupportedHost, IEquatable<NotSupportedHostInDvs>
    {
        public DistributedVirtualSwitchProductSpec SwitchProductSpec { get; set; }

        public bool Equals(NotSupportedHostInDvs notSupportedHostInDvs)
        {
            return (notSupportedHostInDvs != null && ((this.SwitchProductSpec == null && notSupportedHostInDvs.SwitchProductSpec == null) || (this.SwitchProductSpec != null && this.SwitchProductSpec.Equals(notSupportedHostInDvs.SwitchProductSpec))));
        }

        public override bool Equals(object notSupportedHostInDvs)
        {
            return Equals(notSupportedHostInDvs as NotSupportedHostInDvs);
        }

        public override int GetHashCode()
        {
            return (SwitchProductSpec).GetHashCode();
        }
    }

    public class NotSupportedHostInHACluster : NotSupportedHost, IEquatable<NotSupportedHostInHACluster>
    {
        public string HostName { get; set; }

        public string Build { get; set; }

        public bool Equals(NotSupportedHostInHACluster notSupportedHostInHACluster)
        {
            return (notSupportedHostInHACluster != null && this.HostName == notSupportedHostInHACluster.HostName && this.Build == notSupportedHostInHACluster.Build);
        }

        public override bool Equals(object notSupportedHostInHACluster)
        {
            return Equals(notSupportedHostInHACluster as NotSupportedHostInHACluster);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Build).GetHashCode();
        }
    }

    public class NotUserConfigurableProperty : VAppPropertyFault, IEquatable<NotUserConfigurableProperty>
    {
        public bool Equals(NotUserConfigurableProperty notUserConfigurableProperty)
        {
            return (notUserConfigurableProperty != null && base.Equals(notUserConfigurableProperty));
        }

        public override bool Equals(object notUserConfigurableProperty)
        {
            return Equals(notUserConfigurableProperty as NotUserConfigurableProperty);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoVcManagedIpConfigured : VAppPropertyFault, IEquatable<NoVcManagedIpConfigured>
    {
        public bool Equals(NoVcManagedIpConfigured noVcManagedIpConfigured)
        {
            return (noVcManagedIpConfigured != null && base.Equals(noVcManagedIpConfigured));
        }

        public override bool Equals(object noVcManagedIpConfigured)
        {
            return Equals(noVcManagedIpConfigured as NoVcManagedIpConfigured);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoVirtualNic : HostConfigFault, IEquatable<NoVirtualNic>
    {
        public bool Equals(NoVirtualNic noVirtualNic)
        {
            return (noVirtualNic != null && base.Equals(noVirtualNic));
        }

        public override bool Equals(object noVirtualNic)
        {
            return Equals(noVirtualNic as NoVirtualNic);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NoVmInVApp : VAppConfigFault, IEquatable<NoVmInVApp>
    {
        public bool Equals(NoVmInVApp noVmInVApp)
        {
            return (noVmInVApp != null && base.Equals(noVmInVApp));
        }

        public override bool Equals(object noVmInVApp)
        {
            return Equals(noVmInVApp as NoVmInVApp);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NsxHostVNicProfile : ApplyProfile, IEquatable<NsxHostVNicProfile>
    {
        public string Key { get; set; }

        public IpAddressProfile IpConfig { get; set; }

        public bool Equals(NsxHostVNicProfile nsxHostVNicProfile)
        {
            return (nsxHostVNicProfile != null && this.Key == nsxHostVNicProfile.Key && ((this.IpConfig == null && nsxHostVNicProfile.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(nsxHostVNicProfile.IpConfig))));
        }

        public override bool Equals(object nsxHostVNicProfile)
        {
            return Equals(nsxHostVNicProfile as NsxHostVNicProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + IpConfig).GetHashCode();
        }
    }

    public class NumericRange : DynamicData, IEquatable<NumericRange>
    {
        public int Start { get; set; }

        public int End { get; set; }

        public bool Equals(NumericRange numericRange)
        {
            return (numericRange != null && this.Start == numericRange.Start && this.End == numericRange.End);
        }

        public override bool Equals(object numericRange)
        {
            return Equals(numericRange as NumericRange);
        }

        public override int GetHashCode()
        {
            return (Start + "_" + End).GetHashCode();
        }
    }

    public class NumPortsProfile : ApplyProfile, IEquatable<NumPortsProfile>
    {
        public bool Equals(NumPortsProfile numPortsProfile)
        {
            return (numPortsProfile != null && base.Equals(numPortsProfile));
        }

        public override bool Equals(object numPortsProfile)
        {
            return Equals(numPortsProfile as NumPortsProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class NumVirtualCoresPerSocketNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<NumVirtualCoresPerSocketNotSupported>
    {
        public int MaxSupportedCoresPerSocketDest { get; set; }

        public int NumCoresPerSocketVm { get; set; }

        public bool Equals(NumVirtualCoresPerSocketNotSupported numVirtualCoresPerSocketNotSupported)
        {
            return (numVirtualCoresPerSocketNotSupported != null && this.MaxSupportedCoresPerSocketDest == numVirtualCoresPerSocketNotSupported.MaxSupportedCoresPerSocketDest && this.NumCoresPerSocketVm == numVirtualCoresPerSocketNotSupported.NumCoresPerSocketVm);
        }

        public override bool Equals(object numVirtualCoresPerSocketNotSupported)
        {
            return Equals(numVirtualCoresPerSocketNotSupported as NumVirtualCoresPerSocketNotSupported);
        }

        public override int GetHashCode()
        {
            return (MaxSupportedCoresPerSocketDest + "_" + NumCoresPerSocketVm).GetHashCode();
        }
    }

    public class NumVirtualCpusExceedsLimit : InsufficientResourcesFault, IEquatable<NumVirtualCpusExceedsLimit>
    {
        public int MaxSupportedVcpus { get; set; }

        public bool Equals(NumVirtualCpusExceedsLimit numVirtualCpusExceedsLimit)
        {
            return (numVirtualCpusExceedsLimit != null && this.MaxSupportedVcpus == numVirtualCpusExceedsLimit.MaxSupportedVcpus);
        }

        public override bool Equals(object numVirtualCpusExceedsLimit)
        {
            return Equals(numVirtualCpusExceedsLimit as NumVirtualCpusExceedsLimit);
        }

        public override int GetHashCode()
        {
            return (MaxSupportedVcpus).GetHashCode();
        }
    }

    public class NumVirtualCpusIncompatible : VmConfigFault, IEquatable<NumVirtualCpusIncompatible>
    {
        public string Reason { get; set; }

        public int NumCpu { get; set; }

        public bool Equals(NumVirtualCpusIncompatible numVirtualCpusIncompatible)
        {
            return (numVirtualCpusIncompatible != null && this.Reason == numVirtualCpusIncompatible.Reason && this.NumCpu == numVirtualCpusIncompatible.NumCpu);
        }

        public override bool Equals(object numVirtualCpusIncompatible)
        {
            return Equals(numVirtualCpusIncompatible as NumVirtualCpusIncompatible);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + NumCpu).GetHashCode();
        }
    }

    public class NumVirtualCpusNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<NumVirtualCpusNotSupported>
    {
        public int MaxSupportedVcpusDest { get; set; }

        public int NumCpuVm { get; set; }

        public bool Equals(NumVirtualCpusNotSupported numVirtualCpusNotSupported)
        {
            return (numVirtualCpusNotSupported != null && this.MaxSupportedVcpusDest == numVirtualCpusNotSupported.MaxSupportedVcpusDest && this.NumCpuVm == numVirtualCpusNotSupported.NumCpuVm);
        }

        public override bool Equals(object numVirtualCpusNotSupported)
        {
            return Equals(numVirtualCpusNotSupported as NumVirtualCpusNotSupported);
        }

        public override int GetHashCode()
        {
            return (MaxSupportedVcpusDest + "_" + NumCpuVm).GetHashCode();
        }
    }

    public class NvdimmDimmInfo : DynamicData, IEquatable<NvdimmDimmInfo>
    {
        public int DimmHandle { get; set; }

        public NvdimmHealthInfo HealthInfo { get; set; }

        public long TotalCapacity { get; set; }

        public long PersistentCapacity { get; set; }

        public long AvailablePersistentCapacity { get; set; }

        public long VolatileCapacity { get; set; }

        public long AvailableVolatileCapacity { get; set; }

        public long BlockCapacity { get; set; }

        public NvdimmRegionInfo[] RegionInfo { get; set; }

        public string RepresentationString { get; set; }

        public bool Equals(NvdimmDimmInfo nvdimmDimmInfo)
        {
            return (nvdimmDimmInfo != null && this.DimmHandle == nvdimmDimmInfo.DimmHandle && ((this.HealthInfo == null && nvdimmDimmInfo.HealthInfo == null) || (this.HealthInfo != null && this.HealthInfo.Equals(nvdimmDimmInfo.HealthInfo))) && this.TotalCapacity == nvdimmDimmInfo.TotalCapacity && this.PersistentCapacity == nvdimmDimmInfo.PersistentCapacity && this.AvailablePersistentCapacity == nvdimmDimmInfo.AvailablePersistentCapacity && this.VolatileCapacity == nvdimmDimmInfo.VolatileCapacity && this.AvailableVolatileCapacity == nvdimmDimmInfo.AvailableVolatileCapacity && this.BlockCapacity == nvdimmDimmInfo.BlockCapacity && ((this.RegionInfo == null && nvdimmDimmInfo.RegionInfo == null) || (this.RegionInfo != null && nvdimmDimmInfo.RegionInfo != null && Enumerable.SequenceEqual(this.RegionInfo, nvdimmDimmInfo.RegionInfo))) && this.RepresentationString == nvdimmDimmInfo.RepresentationString);
        }

        public override bool Equals(object nvdimmDimmInfo)
        {
            return Equals(nvdimmDimmInfo as NvdimmDimmInfo);
        }

        public override int GetHashCode()
        {
            return (DimmHandle + "_" + HealthInfo + "_" + TotalCapacity + "_" + PersistentCapacity + "_" + AvailablePersistentCapacity + "_" + VolatileCapacity + "_" + AvailableVolatileCapacity + "_" + BlockCapacity + "_" + RegionInfo + "_" + RepresentationString).GetHashCode();
        }
    }

    public class NvdimmGuid : DynamicData, IEquatable<NvdimmGuid>
    {
        public string Uuid { get; set; }

        public bool Equals(NvdimmGuid nvdimmGuid)
        {
            return (nvdimmGuid != null && this.Uuid == nvdimmGuid.Uuid);
        }

        public override bool Equals(object nvdimmGuid)
        {
            return Equals(nvdimmGuid as NvdimmGuid);
        }

        public override int GetHashCode()
        {
            return (Uuid).GetHashCode();
        }
    }

    public class NvdimmHealthInfo : DynamicData, IEquatable<NvdimmHealthInfo>
    {
        public string HealthStatus { get; set; }

        public string HealthInformation { get; set; }

        public string[] StateFlagInfo { get; set; }

        public int DimmTemperature { get; set; }

        public int DimmTemperatureThreshold { get; set; }

        public int SpareBlocksPercentage { get; set; }

        public int SpareBlockThreshold { get; set; }

        public int DimmLifespanPercentage { get; set; }

        public int? EsTemperature { get; set; }

        public int? EsTemperatureThreshold { get; set; }

        public int? EsLifespanPercentage { get; set; }

        public bool Equals(NvdimmHealthInfo nvdimmHealthInfo)
        {
            return (nvdimmHealthInfo != null && this.HealthStatus == nvdimmHealthInfo.HealthStatus && this.HealthInformation == nvdimmHealthInfo.HealthInformation && ((this.StateFlagInfo == null && nvdimmHealthInfo.StateFlagInfo == null) || (this.StateFlagInfo != null && nvdimmHealthInfo.StateFlagInfo != null && Enumerable.SequenceEqual(this.StateFlagInfo, nvdimmHealthInfo.StateFlagInfo))) && this.DimmTemperature == nvdimmHealthInfo.DimmTemperature && this.DimmTemperatureThreshold == nvdimmHealthInfo.DimmTemperatureThreshold && this.SpareBlocksPercentage == nvdimmHealthInfo.SpareBlocksPercentage && this.SpareBlockThreshold == nvdimmHealthInfo.SpareBlockThreshold && this.DimmLifespanPercentage == nvdimmHealthInfo.DimmLifespanPercentage && ((this.EsTemperature == null && nvdimmHealthInfo.EsTemperature == null) || (this.EsTemperature != null && this.EsTemperature.Equals(nvdimmHealthInfo.EsTemperature))) && ((this.EsTemperatureThreshold == null && nvdimmHealthInfo.EsTemperatureThreshold == null) || (this.EsTemperatureThreshold != null && this.EsTemperatureThreshold.Equals(nvdimmHealthInfo.EsTemperatureThreshold))) && ((this.EsLifespanPercentage == null && nvdimmHealthInfo.EsLifespanPercentage == null) || (this.EsLifespanPercentage != null && this.EsLifespanPercentage.Equals(nvdimmHealthInfo.EsLifespanPercentage))));
        }

        public override bool Equals(object nvdimmHealthInfo)
        {
            return Equals(nvdimmHealthInfo as NvdimmHealthInfo);
        }

        public override int GetHashCode()
        {
            return (HealthStatus + "_" + HealthInformation + "_" + StateFlagInfo + "_" + DimmTemperature + "_" + DimmTemperatureThreshold + "_" + SpareBlocksPercentage + "_" + SpareBlockThreshold + "_" + DimmLifespanPercentage + "_" + EsTemperature + "_" + EsTemperatureThreshold + "_" + EsLifespanPercentage).GetHashCode();
        }
    }

    public class NvdimmInterleaveSetInfo : DynamicData, IEquatable<NvdimmInterleaveSetInfo>
    {
        public int SetId { get; set; }

        public string RangeType { get; set; }

        public long BaseAddress { get; set; }

        public long Size { get; set; }

        public long AvailableSize { get; set; }

        public int[] DeviceList { get; set; }

        public string State { get; set; }

        public bool Equals(NvdimmInterleaveSetInfo nvdimmInterleaveSetInfo)
        {
            return (nvdimmInterleaveSetInfo != null && this.SetId == nvdimmInterleaveSetInfo.SetId && this.RangeType == nvdimmInterleaveSetInfo.RangeType && this.BaseAddress == nvdimmInterleaveSetInfo.BaseAddress && this.Size == nvdimmInterleaveSetInfo.Size && this.AvailableSize == nvdimmInterleaveSetInfo.AvailableSize && ((this.DeviceList == null && nvdimmInterleaveSetInfo.DeviceList == null) || (this.DeviceList != null && nvdimmInterleaveSetInfo.DeviceList != null && Enumerable.SequenceEqual(this.DeviceList, nvdimmInterleaveSetInfo.DeviceList))) && this.State == nvdimmInterleaveSetInfo.State);
        }

        public override bool Equals(object nvdimmInterleaveSetInfo)
        {
            return Equals(nvdimmInterleaveSetInfo as NvdimmInterleaveSetInfo);
        }

        public override int GetHashCode()
        {
            return (SetId + "_" + RangeType + "_" + BaseAddress + "_" + Size + "_" + AvailableSize + "_" + DeviceList + "_" + State).GetHashCode();
        }
    }

    public class NvdimmNamespaceCreateSpec : DynamicData, IEquatable<NvdimmNamespaceCreateSpec>
    {
        public string FriendlyName { get; set; }

        public long BlockSize { get; set; }

        public long BlockCount { get; set; }

        public string Type { get; set; }

        public int LocationID { get; set; }

        public bool Equals(NvdimmNamespaceCreateSpec nvdimmNamespaceCreateSpec)
        {
            return (nvdimmNamespaceCreateSpec != null && this.FriendlyName == nvdimmNamespaceCreateSpec.FriendlyName && this.BlockSize == nvdimmNamespaceCreateSpec.BlockSize && this.BlockCount == nvdimmNamespaceCreateSpec.BlockCount && this.Type == nvdimmNamespaceCreateSpec.Type && this.LocationID == nvdimmNamespaceCreateSpec.LocationID);
        }

        public override bool Equals(object nvdimmNamespaceCreateSpec)
        {
            return Equals(nvdimmNamespaceCreateSpec as NvdimmNamespaceCreateSpec);
        }

        public override int GetHashCode()
        {
            return (FriendlyName + "_" + BlockSize + "_" + BlockCount + "_" + Type + "_" + LocationID).GetHashCode();
        }
    }

    public class NvdimmNamespaceDeleteSpec : DynamicData, IEquatable<NvdimmNamespaceDeleteSpec>
    {
        public string Uuid { get; set; }

        public bool Equals(NvdimmNamespaceDeleteSpec nvdimmNamespaceDeleteSpec)
        {
            return (nvdimmNamespaceDeleteSpec != null && this.Uuid == nvdimmNamespaceDeleteSpec.Uuid);
        }

        public override bool Equals(object nvdimmNamespaceDeleteSpec)
        {
            return Equals(nvdimmNamespaceDeleteSpec as NvdimmNamespaceDeleteSpec);
        }

        public override int GetHashCode()
        {
            return (Uuid).GetHashCode();
        }
    }

    public class NvdimmNamespaceDetails : DynamicData, IEquatable<NvdimmNamespaceDetails>
    {
        public string Uuid { get; set; }

        public string FriendlyName { get; set; }

        public long Size { get; set; }

        public string Type { get; set; }

        public string NamespaceHealthStatus { get; set; }

        public int InterleavesetID { get; set; }

        public string State { get; set; }

        public bool Equals(NvdimmNamespaceDetails nvdimmNamespaceDetails)
        {
            return (nvdimmNamespaceDetails != null && this.Uuid == nvdimmNamespaceDetails.Uuid && this.FriendlyName == nvdimmNamespaceDetails.FriendlyName && this.Size == nvdimmNamespaceDetails.Size && this.Type == nvdimmNamespaceDetails.Type && this.NamespaceHealthStatus == nvdimmNamespaceDetails.NamespaceHealthStatus && this.InterleavesetID == nvdimmNamespaceDetails.InterleavesetID && this.State == nvdimmNamespaceDetails.State);
        }

        public override bool Equals(object nvdimmNamespaceDetails)
        {
            return Equals(nvdimmNamespaceDetails as NvdimmNamespaceDetails);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + FriendlyName + "_" + Size + "_" + Type + "_" + NamespaceHealthStatus + "_" + InterleavesetID + "_" + State).GetHashCode();
        }
    }

    public class NvdimmNamespaceInfo : DynamicData, IEquatable<NvdimmNamespaceInfo>
    {
        public string Uuid { get; set; }

        public string FriendlyName { get; set; }

        public long BlockSize { get; set; }

        public long BlockCount { get; set; }

        public string Type { get; set; }

        public string NamespaceHealthStatus { get; set; }

        public int LocationID { get; set; }

        public string State { get; set; }

        public bool Equals(NvdimmNamespaceInfo nvdimmNamespaceInfo)
        {
            return (nvdimmNamespaceInfo != null && this.Uuid == nvdimmNamespaceInfo.Uuid && this.FriendlyName == nvdimmNamespaceInfo.FriendlyName && this.BlockSize == nvdimmNamespaceInfo.BlockSize && this.BlockCount == nvdimmNamespaceInfo.BlockCount && this.Type == nvdimmNamespaceInfo.Type && this.NamespaceHealthStatus == nvdimmNamespaceInfo.NamespaceHealthStatus && this.LocationID == nvdimmNamespaceInfo.LocationID && this.State == nvdimmNamespaceInfo.State);
        }

        public override bool Equals(object nvdimmNamespaceInfo)
        {
            return Equals(nvdimmNamespaceInfo as NvdimmNamespaceInfo);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + FriendlyName + "_" + BlockSize + "_" + BlockCount + "_" + Type + "_" + NamespaceHealthStatus + "_" + LocationID + "_" + State).GetHashCode();
        }
    }

    public class NvdimmPMemNamespaceCreateSpec : DynamicData, IEquatable<NvdimmPMemNamespaceCreateSpec>
    {
        public string FriendlyName { get; set; }

        public long Size { get; set; }

        public int InterleavesetID { get; set; }

        public bool Equals(NvdimmPMemNamespaceCreateSpec nvdimmPMemNamespaceCreateSpec)
        {
            return (nvdimmPMemNamespaceCreateSpec != null && this.FriendlyName == nvdimmPMemNamespaceCreateSpec.FriendlyName && this.Size == nvdimmPMemNamespaceCreateSpec.Size && this.InterleavesetID == nvdimmPMemNamespaceCreateSpec.InterleavesetID);
        }

        public override bool Equals(object nvdimmPMemNamespaceCreateSpec)
        {
            return Equals(nvdimmPMemNamespaceCreateSpec as NvdimmPMemNamespaceCreateSpec);
        }

        public override int GetHashCode()
        {
            return (FriendlyName + "_" + Size + "_" + InterleavesetID).GetHashCode();
        }
    }

    public class NvdimmRegionInfo : DynamicData, IEquatable<NvdimmRegionInfo>
    {
        public int RegionId { get; set; }

        public int SetId { get; set; }

        public string RangeType { get; set; }

        public long StartAddr { get; set; }

        public long Size { get; set; }

        public long Offset { get; set; }

        public bool Equals(NvdimmRegionInfo nvdimmRegionInfo)
        {
            return (nvdimmRegionInfo != null && this.RegionId == nvdimmRegionInfo.RegionId && this.SetId == nvdimmRegionInfo.SetId && this.RangeType == nvdimmRegionInfo.RangeType && this.StartAddr == nvdimmRegionInfo.StartAddr && this.Size == nvdimmRegionInfo.Size && this.Offset == nvdimmRegionInfo.Offset);
        }

        public override bool Equals(object nvdimmRegionInfo)
        {
            return Equals(nvdimmRegionInfo as NvdimmRegionInfo);
        }

        public override int GetHashCode()
        {
            return (RegionId + "_" + SetId + "_" + RangeType + "_" + StartAddr + "_" + Size + "_" + Offset).GetHashCode();
        }
    }

    public class NvdimmSummary : DynamicData, IEquatable<NvdimmSummary>
    {
        public int NumDimms { get; set; }

        public string HealthStatus { get; set; }

        public long TotalCapacity { get; set; }

        public long PersistentCapacity { get; set; }

        public long BlockCapacity { get; set; }

        public long AvailableCapacity { get; set; }

        public int NumInterleavesets { get; set; }

        public int NumNamespaces { get; set; }

        public bool Equals(NvdimmSummary nvdimmSummary)
        {
            return (nvdimmSummary != null && this.NumDimms == nvdimmSummary.NumDimms && this.HealthStatus == nvdimmSummary.HealthStatus && this.TotalCapacity == nvdimmSummary.TotalCapacity && this.PersistentCapacity == nvdimmSummary.PersistentCapacity && this.BlockCapacity == nvdimmSummary.BlockCapacity && this.AvailableCapacity == nvdimmSummary.AvailableCapacity && this.NumInterleavesets == nvdimmSummary.NumInterleavesets && this.NumNamespaces == nvdimmSummary.NumNamespaces);
        }

        public override bool Equals(object nvdimmSummary)
        {
            return Equals(nvdimmSummary as NvdimmSummary);
        }

        public override int GetHashCode()
        {
            return (NumDimms + "_" + HealthStatus + "_" + TotalCapacity + "_" + PersistentCapacity + "_" + BlockCapacity + "_" + AvailableCapacity + "_" + NumInterleavesets + "_" + NumNamespaces).GetHashCode();
        }
    }

    public class NvdimmSystemInfo : DynamicData, IEquatable<NvdimmSystemInfo>
    {
        public NvdimmSummary Summary { get; set; }

        public int[] Dimms { get; set; }

        public NvdimmDimmInfo[] DimmInfo { get; set; }

        public int[] InterleaveSet { get; set; }

        public NvdimmInterleaveSetInfo[] ISetInfo { get; set; }

        public NvdimmGuid[] Namespace { get; set; }

        public NvdimmNamespaceInfo[] NsInfo { get; set; }

        public NvdimmNamespaceDetails[] NsDetails { get; set; }

        public bool Equals(NvdimmSystemInfo nvdimmSystemInfo)
        {
            return (nvdimmSystemInfo != null && ((this.Summary == null && nvdimmSystemInfo.Summary == null) || (this.Summary != null && this.Summary.Equals(nvdimmSystemInfo.Summary))) && ((this.Dimms == null && nvdimmSystemInfo.Dimms == null) || (this.Dimms != null && nvdimmSystemInfo.Dimms != null && Enumerable.SequenceEqual(this.Dimms, nvdimmSystemInfo.Dimms))) && ((this.DimmInfo == null && nvdimmSystemInfo.DimmInfo == null) || (this.DimmInfo != null && nvdimmSystemInfo.DimmInfo != null && Enumerable.SequenceEqual(this.DimmInfo, nvdimmSystemInfo.DimmInfo))) && ((this.InterleaveSet == null && nvdimmSystemInfo.InterleaveSet == null) || (this.InterleaveSet != null && nvdimmSystemInfo.InterleaveSet != null && Enumerable.SequenceEqual(this.InterleaveSet, nvdimmSystemInfo.InterleaveSet))) && ((this.ISetInfo == null && nvdimmSystemInfo.ISetInfo == null) || (this.ISetInfo != null && nvdimmSystemInfo.ISetInfo != null && Enumerable.SequenceEqual(this.ISetInfo, nvdimmSystemInfo.ISetInfo))) && ((this.Namespace == null && nvdimmSystemInfo.Namespace == null) || (this.Namespace != null && nvdimmSystemInfo.Namespace != null && Enumerable.SequenceEqual(this.Namespace, nvdimmSystemInfo.Namespace))) && ((this.NsInfo == null && nvdimmSystemInfo.NsInfo == null) || (this.NsInfo != null && nvdimmSystemInfo.NsInfo != null && Enumerable.SequenceEqual(this.NsInfo, nvdimmSystemInfo.NsInfo))) && ((this.NsDetails == null && nvdimmSystemInfo.NsDetails == null) || (this.NsDetails != null && nvdimmSystemInfo.NsDetails != null && Enumerable.SequenceEqual(this.NsDetails, nvdimmSystemInfo.NsDetails))));
        }

        public override bool Equals(object nvdimmSystemInfo)
        {
            return Equals(nvdimmSystemInfo as NvdimmSystemInfo);
        }

        public override int GetHashCode()
        {
            return (Summary + "_" + Dimms + "_" + DimmInfo + "_" + InterleaveSet + "_" + ISetInfo + "_" + Namespace + "_" + NsInfo + "_" + NsDetails).GetHashCode();
        }
    }

    public class ObjectContent : DynamicData, IEquatable<ObjectContent>
    {
        public ManagedObjectReference Obj { get; set; }

        public DynamicProperty[] PropSet { get; set; }

        public MissingProperty[] MissingSet { get; set; }

        public bool Equals(ObjectContent objectContent)
        {
            return (objectContent != null && ((this.Obj == null && objectContent.Obj == null) || (this.Obj != null && this.Obj.Equals(objectContent.Obj))) && ((this.PropSet == null && objectContent.PropSet == null) || (this.PropSet != null && objectContent.PropSet != null && Enumerable.SequenceEqual(this.PropSet, objectContent.PropSet))) && ((this.MissingSet == null && objectContent.MissingSet == null) || (this.MissingSet != null && objectContent.MissingSet != null && Enumerable.SequenceEqual(this.MissingSet, objectContent.MissingSet))));
        }

        public override bool Equals(object objectContent)
        {
            return Equals(objectContent as ObjectContent);
        }

        public override int GetHashCode()
        {
            return (Obj + "_" + PropSet + "_" + MissingSet).GetHashCode();
        }
    }

    public class ObjectSpec : DynamicData, IEquatable<ObjectSpec>
    {
        public ManagedObjectReference Obj { get; set; }

        public bool? Skip { get; set; }

        public SelectionSpec[] SelectSet { get; set; }

        public bool Equals(ObjectSpec objectSpec)
        {
            return (objectSpec != null && ((this.Obj == null && objectSpec.Obj == null) || (this.Obj != null && this.Obj.Equals(objectSpec.Obj))) && ((this.Skip == null && objectSpec.Skip == null) || (this.Skip != null && this.Skip.Equals(objectSpec.Skip))) && ((this.SelectSet == null && objectSpec.SelectSet == null) || (this.SelectSet != null && objectSpec.SelectSet != null && Enumerable.SequenceEqual(this.SelectSet, objectSpec.SelectSet))));
        }

        public override bool Equals(object objectSpec)
        {
            return Equals(objectSpec as ObjectSpec);
        }

        public override int GetHashCode()
        {
            return (Obj + "_" + Skip + "_" + SelectSet).GetHashCode();
        }
    }

    public class ObjectUpdate : DynamicData, IEquatable<ObjectUpdate>
    {
        public ObjectUpdateKind Kind { get; set; }

        public ManagedObjectReference Obj { get; set; }

        public PropertyChange[] ChangeSet { get; set; }

        public MissingProperty[] MissingSet { get; set; }

        public bool Equals(ObjectUpdate objectUpdate)
        {
            return (objectUpdate != null && this.Kind == objectUpdate.Kind && ((this.Obj == null && objectUpdate.Obj == null) || (this.Obj != null && this.Obj.Equals(objectUpdate.Obj))) && ((this.ChangeSet == null && objectUpdate.ChangeSet == null) || (this.ChangeSet != null && objectUpdate.ChangeSet != null && Enumerable.SequenceEqual(this.ChangeSet, objectUpdate.ChangeSet))) && ((this.MissingSet == null && objectUpdate.MissingSet == null) || (this.MissingSet != null && objectUpdate.MissingSet != null && Enumerable.SequenceEqual(this.MissingSet, objectUpdate.MissingSet))));
        }

        public override bool Equals(object objectUpdate)
        {
            return Equals(objectUpdate as ObjectUpdate);
        }

        public override int GetHashCode()
        {
            return (Kind + "_" + Obj + "_" + ChangeSet + "_" + MissingSet).GetHashCode();
        }
    }

    public class OnceTaskScheduler : TaskScheduler, IEquatable<OnceTaskScheduler>
    {
        public DateTime? RunAt { get; set; }

        public bool Equals(OnceTaskScheduler onceTaskScheduler)
        {
            return (onceTaskScheduler != null && ((this.RunAt == null && onceTaskScheduler.RunAt == null) || (this.RunAt != null && this.RunAt.Equals(onceTaskScheduler.RunAt))));
        }

        public override bool Equals(object onceTaskScheduler)
        {
            return Equals(onceTaskScheduler as OnceTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (RunAt).GetHashCode();
        }
    }

    public class OpaqueNetwork : Network, IEquatable<OpaqueNetwork>
    {
        public OpaqueNetworkCapability Capability { get; set; }

        public OptionValue[] ExtraConfig { get; set; }

        public new OpaqueNetwork_LinkedView LinkedView { get; set; }

        public bool Equals(OpaqueNetwork opaqueNetwork)
        {
            return (opaqueNetwork != null && ((this.Capability == null && opaqueNetwork.Capability == null) || (this.Capability != null && this.Capability.Equals(opaqueNetwork.Capability))) && ((this.ExtraConfig == null && opaqueNetwork.ExtraConfig == null) || (this.ExtraConfig != null && opaqueNetwork.ExtraConfig != null && Enumerable.SequenceEqual(this.ExtraConfig, opaqueNetwork.ExtraConfig))) && ((this.LinkedView == null && opaqueNetwork.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(opaqueNetwork.LinkedView))));
        }

        public override bool Equals(object opaqueNetwork)
        {
            return Equals(opaqueNetwork as OpaqueNetwork);
        }

        public override int GetHashCode()
        {
            return (Capability + "_" + ExtraConfig + "_" + LinkedView).GetHashCode();
        }
    }

    public class OpaqueNetwork_LinkedView : Network_LinkedView, IEquatable<OpaqueNetwork_LinkedView>
    {
        public bool Equals(OpaqueNetwork_LinkedView opaqueNetwork_LinkedView)
        {
            return (opaqueNetwork_LinkedView != null && base.Equals(opaqueNetwork_LinkedView));
        }

        public override bool Equals(object opaqueNetwork_LinkedView)
        {
            return Equals(opaqueNetwork_LinkedView as OpaqueNetwork_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OpaqueNetworkCapability : DynamicData, IEquatable<OpaqueNetworkCapability>
    {
        public bool NetworkReservationSupported { get; set; }

        public bool Equals(OpaqueNetworkCapability opaqueNetworkCapability)
        {
            return (opaqueNetworkCapability != null && this.NetworkReservationSupported == opaqueNetworkCapability.NetworkReservationSupported);
        }

        public override bool Equals(object opaqueNetworkCapability)
        {
            return Equals(opaqueNetworkCapability as OpaqueNetworkCapability);
        }

        public override int GetHashCode()
        {
            return (NetworkReservationSupported).GetHashCode();
        }
    }

    public class OpaqueNetworkSummary : NetworkSummary, IEquatable<OpaqueNetworkSummary>
    {
        public string OpaqueNetworkId { get; set; }

        public string OpaqueNetworkType { get; set; }

        public new OpaqueNetworkSummary_LinkedView LinkedView { get; set; }

        public bool Equals(OpaqueNetworkSummary opaqueNetworkSummary)
        {
            return (opaqueNetworkSummary != null && this.OpaqueNetworkId == opaqueNetworkSummary.OpaqueNetworkId && this.OpaqueNetworkType == opaqueNetworkSummary.OpaqueNetworkType && ((this.LinkedView == null && opaqueNetworkSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(opaqueNetworkSummary.LinkedView))));
        }

        public override bool Equals(object opaqueNetworkSummary)
        {
            return Equals(opaqueNetworkSummary as OpaqueNetworkSummary);
        }

        public override int GetHashCode()
        {
            return (OpaqueNetworkId + "_" + OpaqueNetworkType + "_" + LinkedView).GetHashCode();
        }
    }

    public class OpaqueNetworkSummary_LinkedView : NetworkSummary_LinkedView, IEquatable<OpaqueNetworkSummary_LinkedView>
    {
        public bool Equals(OpaqueNetworkSummary_LinkedView opaqueNetworkSummary_LinkedView)
        {
            return (opaqueNetworkSummary_LinkedView != null && base.Equals(opaqueNetworkSummary_LinkedView));
        }

        public override bool Equals(object opaqueNetworkSummary_LinkedView)
        {
            return Equals(opaqueNetworkSummary_LinkedView as OpaqueNetworkSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OpaqueNetworkTargetInfo : VirtualMachineTargetInfo, IEquatable<OpaqueNetworkTargetInfo>
    {
        public OpaqueNetworkSummary Network { get; set; }

        public bool? NetworkReservationSupported { get; set; }

        public bool Equals(OpaqueNetworkTargetInfo opaqueNetworkTargetInfo)
        {
            return (opaqueNetworkTargetInfo != null && ((this.Network == null && opaqueNetworkTargetInfo.Network == null) || (this.Network != null && this.Network.Equals(opaqueNetworkTargetInfo.Network))) && ((this.NetworkReservationSupported == null && opaqueNetworkTargetInfo.NetworkReservationSupported == null) || (this.NetworkReservationSupported != null && this.NetworkReservationSupported.Equals(opaqueNetworkTargetInfo.NetworkReservationSupported))));
        }

        public override bool Equals(object opaqueNetworkTargetInfo)
        {
            return Equals(opaqueNetworkTargetInfo as OpaqueNetworkTargetInfo);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + NetworkReservationSupported).GetHashCode();
        }
    }

    public class OperationDisabledByGuest : GuestOperationsFault, IEquatable<OperationDisabledByGuest>
    {
        public bool Equals(OperationDisabledByGuest operationDisabledByGuest)
        {
            return (operationDisabledByGuest != null && base.Equals(operationDisabledByGuest));
        }

        public override bool Equals(object operationDisabledByGuest)
        {
            return Equals(operationDisabledByGuest as OperationDisabledByGuest);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OperationDisallowedOnHost : RuntimeFault, IEquatable<OperationDisallowedOnHost>
    {
        public bool Equals(OperationDisallowedOnHost operationDisallowedOnHost)
        {
            return (operationDisallowedOnHost != null && base.Equals(operationDisallowedOnHost));
        }

        public override bool Equals(object operationDisallowedOnHost)
        {
            return Equals(operationDisallowedOnHost as OperationDisallowedOnHost);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OperationNotSupportedByGuest : GuestOperationsFault, IEquatable<OperationNotSupportedByGuest>
    {
        public bool Equals(OperationNotSupportedByGuest operationNotSupportedByGuest)
        {
            return (operationNotSupportedByGuest != null && base.Equals(operationNotSupportedByGuest));
        }

        public override bool Equals(object operationNotSupportedByGuest)
        {
            return Equals(operationNotSupportedByGuest as OperationNotSupportedByGuest);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OptionDef : ElementDescription, IEquatable<OptionDef>
    {
        public OptionType OptionType { get; set; }

        public bool Equals(OptionDef optionDef)
        {
            return (optionDef != null && ((this.OptionType == null && optionDef.OptionType == null) || (this.OptionType != null && this.OptionType.Equals(optionDef.OptionType))));
        }

        public override bool Equals(object optionDef)
        {
            return Equals(optionDef as OptionDef);
        }

        public override int GetHashCode()
        {
            return (OptionType).GetHashCode();
        }
    }

    public class OptionManager : ViewBase, IEquatable<OptionManager>
    {
        public OptionDef[] SupportedOption { get; set; }

        public OptionValue[] Setting { get; set; }

        public OptionValue[] QueryOptions(string name)
        {
            return default(OptionValue[]);
        }

        public void UpdateOptions(OptionValue[] changedValue)
        {
        }

        public bool Equals(OptionManager optionManager)
        {
            return (optionManager != null && ((this.SupportedOption == null && optionManager.SupportedOption == null) || (this.SupportedOption != null && optionManager.SupportedOption != null && Enumerable.SequenceEqual(this.SupportedOption, optionManager.SupportedOption))) && ((this.Setting == null && optionManager.Setting == null) || (this.Setting != null && optionManager.Setting != null && Enumerable.SequenceEqual(this.Setting, optionManager.Setting))));
        }

        public override bool Equals(object optionManager)
        {
            return Equals(optionManager as OptionManager);
        }

        public override int GetHashCode()
        {
            return (SupportedOption + "_" + Setting).GetHashCode();
        }
    }

    public class OptionProfile : ApplyProfile, IEquatable<OptionProfile>
    {
        public string Key { get; set; }

        public bool Equals(OptionProfile optionProfile)
        {
            return (optionProfile != null && this.Key == optionProfile.Key);
        }

        public override bool Equals(object optionProfile)
        {
            return Equals(optionProfile as OptionProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class OptionType : DynamicData, IEquatable<OptionType>
    {
        public bool? ValueIsReadonly { get; set; }

        public bool Equals(OptionType optionType)
        {
            return (optionType != null && ((this.ValueIsReadonly == null && optionType.ValueIsReadonly == null) || (this.ValueIsReadonly != null && this.ValueIsReadonly.Equals(optionType.ValueIsReadonly))));
        }

        public override bool Equals(object optionType)
        {
            return Equals(optionType as OptionType);
        }

        public override int GetHashCode()
        {
            return (ValueIsReadonly).GetHashCode();
        }
    }

    public class OptionValue : DynamicData, IEquatable<OptionValue>
    {
        public string Key { get; set; }

        public object Value { get; set; }

        public bool Equals(OptionValue optionValue)
        {
            return (optionValue != null && this.Key == optionValue.Key && ((this.Value == null && optionValue.Value == null) || (this.Value != null && this.Value.Equals(optionValue.Value))));
        }

        public override bool Equals(object optionValue)
        {
            return Equals(optionValue as OptionValue);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value).GetHashCode();
        }
    }

    public class OrAlarmExpression : AlarmExpression, IEquatable<OrAlarmExpression>
    {
        public AlarmExpression[] Expression { get; set; }

        public bool Equals(OrAlarmExpression orAlarmExpression)
        {
            return (orAlarmExpression != null && ((this.Expression == null && orAlarmExpression.Expression == null) || (this.Expression != null && orAlarmExpression.Expression != null && Enumerable.SequenceEqual(this.Expression, orAlarmExpression.Expression))));
        }

        public override bool Equals(object orAlarmExpression)
        {
            return Equals(orAlarmExpression as OrAlarmExpression);
        }

        public override int GetHashCode()
        {
            return (Expression).GetHashCode();
        }
    }

    public class OutOfBounds : VimFault, IEquatable<OutOfBounds>
    {
        public string ArgumentName { get; set; }

        public bool Equals(OutOfBounds outOfBounds)
        {
            return (outOfBounds != null && this.ArgumentName == outOfBounds.ArgumentName);
        }

        public override bool Equals(object outOfBounds)
        {
            return Equals(outOfBounds as OutOfBounds);
        }

        public override int GetHashCode()
        {
            return (ArgumentName).GetHashCode();
        }
    }

    public class OutOfSyncDvsHost : DvsEvent, IEquatable<OutOfSyncDvsHost>
    {
        public DvsOutOfSyncHostArgument[] HostOutOfSync { get; set; }

        public bool Equals(OutOfSyncDvsHost outOfSyncDvsHost)
        {
            return (outOfSyncDvsHost != null && ((this.HostOutOfSync == null && outOfSyncDvsHost.HostOutOfSync == null) || (this.HostOutOfSync != null && outOfSyncDvsHost.HostOutOfSync != null && Enumerable.SequenceEqual(this.HostOutOfSync, outOfSyncDvsHost.HostOutOfSync))));
        }

        public override bool Equals(object outOfSyncDvsHost)
        {
            return Equals(outOfSyncDvsHost as OutOfSyncDvsHost);
        }

        public override int GetHashCode()
        {
            return (HostOutOfSync).GetHashCode();
        }
    }

    public class OverheadMemoryManager : ViewBase, IEquatable<OverheadMemoryManager>
    {
        public long LookupVmOverheadMemory(ManagedObjectReference vm, ManagedObjectReference host)
        {
            return default(long);
        }

        public bool Equals(OverheadMemoryManager overheadMemoryManager)
        {
            return (overheadMemoryManager != null && base.Equals(overheadMemoryManager));
        }

        public override bool Equals(object overheadMemoryManager)
        {
            return Equals(overheadMemoryManager as OverheadMemoryManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfAttribute : OvfInvalidPackage, IEquatable<OvfAttribute>
    {
        public string ElementName { get; set; }

        public string AttributeName { get; set; }

        public bool Equals(OvfAttribute ovfAttribute)
        {
            return (ovfAttribute != null && this.ElementName == ovfAttribute.ElementName && this.AttributeName == ovfAttribute.AttributeName);
        }

        public override bool Equals(object ovfAttribute)
        {
            return Equals(ovfAttribute as OvfAttribute);
        }

        public override int GetHashCode()
        {
            return (ElementName + "_" + AttributeName).GetHashCode();
        }
    }

    public class OvfConnectedDevice : OvfHardwareExport, IEquatable<OvfConnectedDevice>
    {
        public bool Equals(OvfConnectedDevice ovfConnectedDevice)
        {
            return (ovfConnectedDevice != null && base.Equals(ovfConnectedDevice));
        }

        public override bool Equals(object ovfConnectedDevice)
        {
            return Equals(ovfConnectedDevice as OvfConnectedDevice);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfConnectedDeviceFloppy : OvfConnectedDevice, IEquatable<OvfConnectedDeviceFloppy>
    {
        public string Filename { get; set; }

        public bool Equals(OvfConnectedDeviceFloppy ovfConnectedDeviceFloppy)
        {
            return (ovfConnectedDeviceFloppy != null && this.Filename == ovfConnectedDeviceFloppy.Filename);
        }

        public override bool Equals(object ovfConnectedDeviceFloppy)
        {
            return Equals(ovfConnectedDeviceFloppy as OvfConnectedDeviceFloppy);
        }

        public override int GetHashCode()
        {
            return (Filename).GetHashCode();
        }
    }

    public class OvfConnectedDeviceIso : OvfConnectedDevice, IEquatable<OvfConnectedDeviceIso>
    {
        public string Filename { get; set; }

        public bool Equals(OvfConnectedDeviceIso ovfConnectedDeviceIso)
        {
            return (ovfConnectedDeviceIso != null && this.Filename == ovfConnectedDeviceIso.Filename);
        }

        public override bool Equals(object ovfConnectedDeviceIso)
        {
            return Equals(ovfConnectedDeviceIso as OvfConnectedDeviceIso);
        }

        public override int GetHashCode()
        {
            return (Filename).GetHashCode();
        }
    }

    public class OvfConstraint : OvfInvalidPackage, IEquatable<OvfConstraint>
    {
        public string Name { get; set; }

        public bool Equals(OvfConstraint ovfConstraint)
        {
            return (ovfConstraint != null && this.Name == ovfConstraint.Name);
        }

        public override bool Equals(object ovfConstraint)
        {
            return Equals(ovfConstraint as OvfConstraint);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class OvfConsumerCallbackFault : OvfFault, IEquatable<OvfConsumerCallbackFault>
    {
        public string ExtensionKey { get; set; }

        public string ExtensionName { get; set; }

        public bool Equals(OvfConsumerCallbackFault ovfConsumerCallbackFault)
        {
            return (ovfConsumerCallbackFault != null && this.ExtensionKey == ovfConsumerCallbackFault.ExtensionKey && this.ExtensionName == ovfConsumerCallbackFault.ExtensionName);
        }

        public override bool Equals(object ovfConsumerCallbackFault)
        {
            return Equals(ovfConsumerCallbackFault as OvfConsumerCallbackFault);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + ExtensionName).GetHashCode();
        }
    }

    public class OvfConsumerCommunicationError : OvfConsumerCallbackFault, IEquatable<OvfConsumerCommunicationError>
    {
        public string Description { get; set; }

        public bool Equals(OvfConsumerCommunicationError ovfConsumerCommunicationError)
        {
            return (ovfConsumerCommunicationError != null && this.Description == ovfConsumerCommunicationError.Description);
        }

        public override bool Equals(object ovfConsumerCommunicationError)
        {
            return Equals(ovfConsumerCommunicationError as OvfConsumerCommunicationError);
        }

        public override int GetHashCode()
        {
            return (Description).GetHashCode();
        }
    }

    public class OvfConsumerFault : OvfConsumerCallbackFault, IEquatable<OvfConsumerFault>
    {
        public string ErrorKey { get; set; }

        public string Message { get; set; }

        public KeyValue[] Params { get; set; }

        public bool Equals(OvfConsumerFault ovfConsumerFault)
        {
            return (ovfConsumerFault != null && this.ErrorKey == ovfConsumerFault.ErrorKey && this.Message == ovfConsumerFault.Message && ((this.Params == null && ovfConsumerFault.Params == null) || (this.Params != null && ovfConsumerFault.Params != null && Enumerable.SequenceEqual(this.Params, ovfConsumerFault.Params))));
        }

        public override bool Equals(object ovfConsumerFault)
        {
            return Equals(ovfConsumerFault as OvfConsumerFault);
        }

        public override int GetHashCode()
        {
            return (ErrorKey + "_" + Message + "_" + Params).GetHashCode();
        }
    }

    public class OvfConsumerInvalidSection : OvfConsumerCallbackFault, IEquatable<OvfConsumerInvalidSection>
    {
        public int LineNumber { get; set; }

        public string Description { get; set; }

        public bool Equals(OvfConsumerInvalidSection ovfConsumerInvalidSection)
        {
            return (ovfConsumerInvalidSection != null && this.LineNumber == ovfConsumerInvalidSection.LineNumber && this.Description == ovfConsumerInvalidSection.Description);
        }

        public override bool Equals(object ovfConsumerInvalidSection)
        {
            return Equals(ovfConsumerInvalidSection as OvfConsumerInvalidSection);
        }

        public override int GetHashCode()
        {
            return (LineNumber + "_" + Description).GetHashCode();
        }
    }

    public class OvfConsumerOstNode : DynamicData, IEquatable<OvfConsumerOstNode>
    {
        public string Id { get; set; }

        public string Type { get; set; }

        public OvfConsumerOvfSection[] Section { get; set; }

        public OvfConsumerOstNode[] Child { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public OvfConsumerOstNode_LinkedView LinkedView { get; set; }

        public bool Equals(OvfConsumerOstNode ovfConsumerOstNode)
        {
            return (ovfConsumerOstNode != null && this.Id == ovfConsumerOstNode.Id && this.Type == ovfConsumerOstNode.Type && ((this.Section == null && ovfConsumerOstNode.Section == null) || (this.Section != null && ovfConsumerOstNode.Section != null && Enumerable.SequenceEqual(this.Section, ovfConsumerOstNode.Section))) && ((this.Child == null && ovfConsumerOstNode.Child == null) || (this.Child != null && ovfConsumerOstNode.Child != null && Enumerable.SequenceEqual(this.Child, ovfConsumerOstNode.Child))) && ((this.Entity == null && ovfConsumerOstNode.Entity == null) || (this.Entity != null && this.Entity.Equals(ovfConsumerOstNode.Entity))) && ((this.LinkedView == null && ovfConsumerOstNode.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ovfConsumerOstNode.LinkedView))));
        }

        public override bool Equals(object ovfConsumerOstNode)
        {
            return Equals(ovfConsumerOstNode as OvfConsumerOstNode);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Type + "_" + Section + "_" + Child + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class OvfConsumerOstNode_LinkedView : IEquatable<OvfConsumerOstNode_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(OvfConsumerOstNode_LinkedView ovfConsumerOstNode_LinkedView)
        {
            return (ovfConsumerOstNode_LinkedView != null && ((this.Entity == null && ovfConsumerOstNode_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(ovfConsumerOstNode_LinkedView.Entity))));
        }

        public override bool Equals(object ovfConsumerOstNode_LinkedView)
        {
            return Equals(ovfConsumerOstNode_LinkedView as OvfConsumerOstNode_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class OvfConsumerOvfSection : DynamicData, IEquatable<OvfConsumerOvfSection>
    {
        public int LineNumber { get; set; }

        public string Xml { get; set; }

        public bool Equals(OvfConsumerOvfSection ovfConsumerOvfSection)
        {
            return (ovfConsumerOvfSection != null && this.LineNumber == ovfConsumerOvfSection.LineNumber && this.Xml == ovfConsumerOvfSection.Xml);
        }

        public override bool Equals(object ovfConsumerOvfSection)
        {
            return Equals(ovfConsumerOvfSection as OvfConsumerOvfSection);
        }

        public override int GetHashCode()
        {
            return (LineNumber + "_" + Xml).GetHashCode();
        }
    }

    public class OvfConsumerPowerOnFault : InvalidState, IEquatable<OvfConsumerPowerOnFault>
    {
        public string ExtensionKey { get; set; }

        public string ExtensionName { get; set; }

        public string Description { get; set; }

        public bool Equals(OvfConsumerPowerOnFault ovfConsumerPowerOnFault)
        {
            return (ovfConsumerPowerOnFault != null && this.ExtensionKey == ovfConsumerPowerOnFault.ExtensionKey && this.ExtensionName == ovfConsumerPowerOnFault.ExtensionName && this.Description == ovfConsumerPowerOnFault.Description);
        }

        public override bool Equals(object ovfConsumerPowerOnFault)
        {
            return Equals(ovfConsumerPowerOnFault as OvfConsumerPowerOnFault);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + ExtensionName + "_" + Description).GetHashCode();
        }
    }

    public class OvfConsumerUndeclaredSection : OvfConsumerCallbackFault, IEquatable<OvfConsumerUndeclaredSection>
    {
        public string QualifiedSectionType { get; set; }

        public bool Equals(OvfConsumerUndeclaredSection ovfConsumerUndeclaredSection)
        {
            return (ovfConsumerUndeclaredSection != null && this.QualifiedSectionType == ovfConsumerUndeclaredSection.QualifiedSectionType);
        }

        public override bool Equals(object ovfConsumerUndeclaredSection)
        {
            return Equals(ovfConsumerUndeclaredSection as OvfConsumerUndeclaredSection);
        }

        public override int GetHashCode()
        {
            return (QualifiedSectionType).GetHashCode();
        }
    }

    public class OvfConsumerUndefinedPrefix : OvfConsumerCallbackFault, IEquatable<OvfConsumerUndefinedPrefix>
    {
        public string Prefix { get; set; }

        public bool Equals(OvfConsumerUndefinedPrefix ovfConsumerUndefinedPrefix)
        {
            return (ovfConsumerUndefinedPrefix != null && this.Prefix == ovfConsumerUndefinedPrefix.Prefix);
        }

        public override bool Equals(object ovfConsumerUndefinedPrefix)
        {
            return Equals(ovfConsumerUndefinedPrefix as OvfConsumerUndefinedPrefix);
        }

        public override int GetHashCode()
        {
            return (Prefix).GetHashCode();
        }
    }

    public class OvfConsumerValidationFault : VmConfigFault, IEquatable<OvfConsumerValidationFault>
    {
        public string ExtensionKey { get; set; }

        public string ExtensionName { get; set; }

        public string Message { get; set; }

        public bool Equals(OvfConsumerValidationFault ovfConsumerValidationFault)
        {
            return (ovfConsumerValidationFault != null && this.ExtensionKey == ovfConsumerValidationFault.ExtensionKey && this.ExtensionName == ovfConsumerValidationFault.ExtensionName && this.Message == ovfConsumerValidationFault.Message);
        }

        public override bool Equals(object ovfConsumerValidationFault)
        {
            return Equals(ovfConsumerValidationFault as OvfConsumerValidationFault);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + ExtensionName + "_" + Message).GetHashCode();
        }
    }

    public class OvfCpuCompatibility : OvfImport, IEquatable<OvfCpuCompatibility>
    {
        public string RegisterName { get; set; }

        public int Level { get; set; }

        public string RegisterValue { get; set; }

        public string DesiredRegisterValue { get; set; }

        public bool Equals(OvfCpuCompatibility ovfCpuCompatibility)
        {
            return (ovfCpuCompatibility != null && this.RegisterName == ovfCpuCompatibility.RegisterName && this.Level == ovfCpuCompatibility.Level && this.RegisterValue == ovfCpuCompatibility.RegisterValue && this.DesiredRegisterValue == ovfCpuCompatibility.DesiredRegisterValue);
        }

        public override bool Equals(object ovfCpuCompatibility)
        {
            return Equals(ovfCpuCompatibility as OvfCpuCompatibility);
        }

        public override int GetHashCode()
        {
            return (RegisterName + "_" + Level + "_" + RegisterValue + "_" + DesiredRegisterValue).GetHashCode();
        }
    }

    public class OvfCpuCompatibilityCheckNotSupported : OvfImport, IEquatable<OvfCpuCompatibilityCheckNotSupported>
    {
        public bool Equals(OvfCpuCompatibilityCheckNotSupported ovfCpuCompatibilityCheckNotSupported)
        {
            return (ovfCpuCompatibilityCheckNotSupported != null && base.Equals(ovfCpuCompatibilityCheckNotSupported));
        }

        public override bool Equals(object ovfCpuCompatibilityCheckNotSupported)
        {
            return Equals(ovfCpuCompatibilityCheckNotSupported as OvfCpuCompatibilityCheckNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfCreateDescriptorParams : DynamicData, IEquatable<OvfCreateDescriptorParams>
    {
        public OvfFile[] OvfFiles { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public bool? IncludeImageFiles { get; set; }

        public string[] ExportOption { get; set; }

        public ManagedObjectReference Snapshot { get; set; }

        public OvfCreateDescriptorParams_LinkedView LinkedView { get; set; }

        public bool Equals(OvfCreateDescriptorParams ovfCreateDescriptorParams)
        {
            return (ovfCreateDescriptorParams != null && ((this.OvfFiles == null && ovfCreateDescriptorParams.OvfFiles == null) || (this.OvfFiles != null && ovfCreateDescriptorParams.OvfFiles != null && Enumerable.SequenceEqual(this.OvfFiles, ovfCreateDescriptorParams.OvfFiles))) && this.Name == ovfCreateDescriptorParams.Name && this.Description == ovfCreateDescriptorParams.Description && ((this.IncludeImageFiles == null && ovfCreateDescriptorParams.IncludeImageFiles == null) || (this.IncludeImageFiles != null && this.IncludeImageFiles.Equals(ovfCreateDescriptorParams.IncludeImageFiles))) && ((this.ExportOption == null && ovfCreateDescriptorParams.ExportOption == null) || (this.ExportOption != null && ovfCreateDescriptorParams.ExportOption != null && Enumerable.SequenceEqual(this.ExportOption, ovfCreateDescriptorParams.ExportOption))) && ((this.Snapshot == null && ovfCreateDescriptorParams.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(ovfCreateDescriptorParams.Snapshot))) && ((this.LinkedView == null && ovfCreateDescriptorParams.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ovfCreateDescriptorParams.LinkedView))));
        }

        public override bool Equals(object ovfCreateDescriptorParams)
        {
            return Equals(ovfCreateDescriptorParams as OvfCreateDescriptorParams);
        }

        public override int GetHashCode()
        {
            return (OvfFiles + "_" + Name + "_" + Description + "_" + IncludeImageFiles + "_" + ExportOption + "_" + Snapshot + "_" + LinkedView).GetHashCode();
        }
    }

    public class OvfCreateDescriptorParams_LinkedView : IEquatable<OvfCreateDescriptorParams_LinkedView>
    {
        public VirtualMachineSnapshot Snapshot { get; set; }

        public bool Equals(OvfCreateDescriptorParams_LinkedView ovfCreateDescriptorParams_LinkedView)
        {
            return (ovfCreateDescriptorParams_LinkedView != null && ((this.Snapshot == null && ovfCreateDescriptorParams_LinkedView.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(ovfCreateDescriptorParams_LinkedView.Snapshot))));
        }

        public override bool Equals(object ovfCreateDescriptorParams_LinkedView)
        {
            return Equals(ovfCreateDescriptorParams_LinkedView as OvfCreateDescriptorParams_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Snapshot).GetHashCode();
        }
    }

    public class OvfCreateDescriptorResult : DynamicData, IEquatable<OvfCreateDescriptorResult>
    {
        public string OvfDescriptor { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public LocalizedMethodFault[] Warning { get; set; }

        public bool? IncludeImageFiles { get; set; }

        public bool Equals(OvfCreateDescriptorResult ovfCreateDescriptorResult)
        {
            return (ovfCreateDescriptorResult != null && this.OvfDescriptor == ovfCreateDescriptorResult.OvfDescriptor && ((this.Error == null && ovfCreateDescriptorResult.Error == null) || (this.Error != null && ovfCreateDescriptorResult.Error != null && Enumerable.SequenceEqual(this.Error, ovfCreateDescriptorResult.Error))) && ((this.Warning == null && ovfCreateDescriptorResult.Warning == null) || (this.Warning != null && ovfCreateDescriptorResult.Warning != null && Enumerable.SequenceEqual(this.Warning, ovfCreateDescriptorResult.Warning))) && ((this.IncludeImageFiles == null && ovfCreateDescriptorResult.IncludeImageFiles == null) || (this.IncludeImageFiles != null && this.IncludeImageFiles.Equals(ovfCreateDescriptorResult.IncludeImageFiles))));
        }

        public override bool Equals(object ovfCreateDescriptorResult)
        {
            return Equals(ovfCreateDescriptorResult as OvfCreateDescriptorResult);
        }

        public override int GetHashCode()
        {
            return (OvfDescriptor + "_" + Error + "_" + Warning + "_" + IncludeImageFiles).GetHashCode();
        }
    }

    public class OvfCreateImportSpecParams : OvfManagerCommonParams, IEquatable<OvfCreateImportSpecParams>
    {
        public string EntityName { get; set; }

        public ManagedObjectReference HostSystem { get; set; }

        public OvfNetworkMapping[] NetworkMapping { get; set; }

        public string IpAllocationPolicy { get; set; }

        public string IpProtocol { get; set; }

        public KeyValue[] PropertyMapping { get; set; }

        public OvfResourceMap[] ResourceMapping { get; set; }

        public string DiskProvisioning { get; set; }

        public OvfConsumerOstNode InstantiationOst { get; set; }

        public OvfCreateImportSpecParams_LinkedView LinkedView { get; set; }

        public bool Equals(OvfCreateImportSpecParams ovfCreateImportSpecParams)
        {
            return (ovfCreateImportSpecParams != null && this.EntityName == ovfCreateImportSpecParams.EntityName && ((this.HostSystem == null && ovfCreateImportSpecParams.HostSystem == null) || (this.HostSystem != null && this.HostSystem.Equals(ovfCreateImportSpecParams.HostSystem))) && ((this.NetworkMapping == null && ovfCreateImportSpecParams.NetworkMapping == null) || (this.NetworkMapping != null && ovfCreateImportSpecParams.NetworkMapping != null && Enumerable.SequenceEqual(this.NetworkMapping, ovfCreateImportSpecParams.NetworkMapping))) && this.IpAllocationPolicy == ovfCreateImportSpecParams.IpAllocationPolicy && this.IpProtocol == ovfCreateImportSpecParams.IpProtocol && ((this.PropertyMapping == null && ovfCreateImportSpecParams.PropertyMapping == null) || (this.PropertyMapping != null && ovfCreateImportSpecParams.PropertyMapping != null && Enumerable.SequenceEqual(this.PropertyMapping, ovfCreateImportSpecParams.PropertyMapping))) && ((this.ResourceMapping == null && ovfCreateImportSpecParams.ResourceMapping == null) || (this.ResourceMapping != null && ovfCreateImportSpecParams.ResourceMapping != null && Enumerable.SequenceEqual(this.ResourceMapping, ovfCreateImportSpecParams.ResourceMapping))) && this.DiskProvisioning == ovfCreateImportSpecParams.DiskProvisioning && ((this.InstantiationOst == null && ovfCreateImportSpecParams.InstantiationOst == null) || (this.InstantiationOst != null && this.InstantiationOst.Equals(ovfCreateImportSpecParams.InstantiationOst))) && ((this.LinkedView == null && ovfCreateImportSpecParams.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ovfCreateImportSpecParams.LinkedView))));
        }

        public override bool Equals(object ovfCreateImportSpecParams)
        {
            return Equals(ovfCreateImportSpecParams as OvfCreateImportSpecParams);
        }

        public override int GetHashCode()
        {
            return (EntityName + "_" + HostSystem + "_" + NetworkMapping + "_" + IpAllocationPolicy + "_" + IpProtocol + "_" + PropertyMapping + "_" + ResourceMapping + "_" + DiskProvisioning + "_" + InstantiationOst + "_" + LinkedView).GetHashCode();
        }
    }

    public class OvfCreateImportSpecParams_LinkedView : IEquatable<OvfCreateImportSpecParams_LinkedView>
    {
        public HostSystem HostSystem { get; set; }

        public bool Equals(OvfCreateImportSpecParams_LinkedView ovfCreateImportSpecParams_LinkedView)
        {
            return (ovfCreateImportSpecParams_LinkedView != null && ((this.HostSystem == null && ovfCreateImportSpecParams_LinkedView.HostSystem == null) || (this.HostSystem != null && this.HostSystem.Equals(ovfCreateImportSpecParams_LinkedView.HostSystem))));
        }

        public override bool Equals(object ovfCreateImportSpecParams_LinkedView)
        {
            return Equals(ovfCreateImportSpecParams_LinkedView as OvfCreateImportSpecParams_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HostSystem).GetHashCode();
        }
    }

    public class OvfCreateImportSpecResult : DynamicData, IEquatable<OvfCreateImportSpecResult>
    {
        public ImportSpec ImportSpec { get; set; }

        public OvfFileItem[] FileItem { get; set; }

        public LocalizedMethodFault[] Warning { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public bool Equals(OvfCreateImportSpecResult ovfCreateImportSpecResult)
        {
            return (ovfCreateImportSpecResult != null && ((this.ImportSpec == null && ovfCreateImportSpecResult.ImportSpec == null) || (this.ImportSpec != null && this.ImportSpec.Equals(ovfCreateImportSpecResult.ImportSpec))) && ((this.FileItem == null && ovfCreateImportSpecResult.FileItem == null) || (this.FileItem != null && ovfCreateImportSpecResult.FileItem != null && Enumerable.SequenceEqual(this.FileItem, ovfCreateImportSpecResult.FileItem))) && ((this.Warning == null && ovfCreateImportSpecResult.Warning == null) || (this.Warning != null && ovfCreateImportSpecResult.Warning != null && Enumerable.SequenceEqual(this.Warning, ovfCreateImportSpecResult.Warning))) && ((this.Error == null && ovfCreateImportSpecResult.Error == null) || (this.Error != null && ovfCreateImportSpecResult.Error != null && Enumerable.SequenceEqual(this.Error, ovfCreateImportSpecResult.Error))));
        }

        public override bool Equals(object ovfCreateImportSpecResult)
        {
            return Equals(ovfCreateImportSpecResult as OvfCreateImportSpecResult);
        }

        public override int GetHashCode()
        {
            return (ImportSpec + "_" + FileItem + "_" + Warning + "_" + Error).GetHashCode();
        }
    }

    public class OvfDeploymentOption : DynamicData, IEquatable<OvfDeploymentOption>
    {
        public string Key { get; set; }

        public string Label { get; set; }

        public string Description { get; set; }

        public bool Equals(OvfDeploymentOption ovfDeploymentOption)
        {
            return (ovfDeploymentOption != null && this.Key == ovfDeploymentOption.Key && this.Label == ovfDeploymentOption.Label && this.Description == ovfDeploymentOption.Description);
        }

        public override bool Equals(object ovfDeploymentOption)
        {
            return Equals(ovfDeploymentOption as OvfDeploymentOption);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Label + "_" + Description).GetHashCode();
        }
    }

    public class OvfDiskMappingNotFound : OvfSystemFault, IEquatable<OvfDiskMappingNotFound>
    {
        public string DiskName { get; set; }

        public string VmName { get; set; }

        public bool Equals(OvfDiskMappingNotFound ovfDiskMappingNotFound)
        {
            return (ovfDiskMappingNotFound != null && this.DiskName == ovfDiskMappingNotFound.DiskName && this.VmName == ovfDiskMappingNotFound.VmName);
        }

        public override bool Equals(object ovfDiskMappingNotFound)
        {
            return Equals(ovfDiskMappingNotFound as OvfDiskMappingNotFound);
        }

        public override int GetHashCode()
        {
            return (DiskName + "_" + VmName).GetHashCode();
        }
    }

    public class OvfDiskOrderConstraint : OvfConstraint, IEquatable<OvfDiskOrderConstraint>
    {
        public bool Equals(OvfDiskOrderConstraint ovfDiskOrderConstraint)
        {
            return (ovfDiskOrderConstraint != null && base.Equals(ovfDiskOrderConstraint));
        }

        public override bool Equals(object ovfDiskOrderConstraint)
        {
            return Equals(ovfDiskOrderConstraint as OvfDiskOrderConstraint);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfDuplicatedElementBoundary : OvfElement, IEquatable<OvfDuplicatedElementBoundary>
    {
        public string Boundary { get; set; }

        public bool Equals(OvfDuplicatedElementBoundary ovfDuplicatedElementBoundary)
        {
            return (ovfDuplicatedElementBoundary != null && this.Boundary == ovfDuplicatedElementBoundary.Boundary);
        }

        public override bool Equals(object ovfDuplicatedElementBoundary)
        {
            return Equals(ovfDuplicatedElementBoundary as OvfDuplicatedElementBoundary);
        }

        public override int GetHashCode()
        {
            return (Boundary).GetHashCode();
        }
    }

    public class OvfDuplicatedPropertyIdExport : OvfExport, IEquatable<OvfDuplicatedPropertyIdExport>
    {
        public string Fqid { get; set; }

        public bool Equals(OvfDuplicatedPropertyIdExport ovfDuplicatedPropertyIdExport)
        {
            return (ovfDuplicatedPropertyIdExport != null && this.Fqid == ovfDuplicatedPropertyIdExport.Fqid);
        }

        public override bool Equals(object ovfDuplicatedPropertyIdExport)
        {
            return Equals(ovfDuplicatedPropertyIdExport as OvfDuplicatedPropertyIdExport);
        }

        public override int GetHashCode()
        {
            return (Fqid).GetHashCode();
        }
    }

    public class OvfDuplicatedPropertyIdImport : OvfExport, IEquatable<OvfDuplicatedPropertyIdImport>
    {
        public bool Equals(OvfDuplicatedPropertyIdImport ovfDuplicatedPropertyIdImport)
        {
            return (ovfDuplicatedPropertyIdImport != null && base.Equals(ovfDuplicatedPropertyIdImport));
        }

        public override bool Equals(object ovfDuplicatedPropertyIdImport)
        {
            return Equals(ovfDuplicatedPropertyIdImport as OvfDuplicatedPropertyIdImport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfDuplicateElement : OvfElement, IEquatable<OvfDuplicateElement>
    {
        public bool Equals(OvfDuplicateElement ovfDuplicateElement)
        {
            return (ovfDuplicateElement != null && base.Equals(ovfDuplicateElement));
        }

        public override bool Equals(object ovfDuplicateElement)
        {
            return Equals(ovfDuplicateElement as OvfDuplicateElement);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfElement : OvfInvalidPackage, IEquatable<OvfElement>
    {
        public string Name { get; set; }

        public bool Equals(OvfElement ovfElement)
        {
            return (ovfElement != null && this.Name == ovfElement.Name);
        }

        public override bool Equals(object ovfElement)
        {
            return Equals(ovfElement as OvfElement);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class OvfElementInvalidValue : OvfElement, IEquatable<OvfElementInvalidValue>
    {
        public string Value { get; set; }

        public bool Equals(OvfElementInvalidValue ovfElementInvalidValue)
        {
            return (ovfElementInvalidValue != null && this.Value == ovfElementInvalidValue.Value);
        }

        public override bool Equals(object ovfElementInvalidValue)
        {
            return Equals(ovfElementInvalidValue as OvfElementInvalidValue);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class OvfExport : OvfFault, IEquatable<OvfExport>
    {
        public bool Equals(OvfExport ovfExport)
        {
            return (ovfExport != null && base.Equals(ovfExport));
        }

        public override bool Equals(object ovfExport)
        {
            return Equals(ovfExport as OvfExport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfExportFailed : OvfExport, IEquatable<OvfExportFailed>
    {
        public bool Equals(OvfExportFailed ovfExportFailed)
        {
            return (ovfExportFailed != null && base.Equals(ovfExportFailed));
        }

        public override bool Equals(object ovfExportFailed)
        {
            return Equals(ovfExportFailed as OvfExportFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfFault : VimFault, IEquatable<OvfFault>
    {
        public bool Equals(OvfFault ovfFault)
        {
            return (ovfFault != null && base.Equals(ovfFault));
        }

        public override bool Equals(object ovfFault)
        {
            return Equals(ovfFault as OvfFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfFile : DynamicData, IEquatable<OvfFile>
    {
        public string DeviceId { get; set; }

        public string Path { get; set; }

        public string CompressionMethod { get; set; }

        public long? ChunkSize { get; set; }

        public long Size { get; set; }

        public long? Capacity { get; set; }

        public long? PopulatedSize { get; set; }

        public bool Equals(OvfFile ovfFile)
        {
            return (ovfFile != null && this.DeviceId == ovfFile.DeviceId && this.Path == ovfFile.Path && this.CompressionMethod == ovfFile.CompressionMethod && ((this.ChunkSize == null && ovfFile.ChunkSize == null) || (this.ChunkSize != null && this.ChunkSize.Equals(ovfFile.ChunkSize))) && this.Size == ovfFile.Size && ((this.Capacity == null && ovfFile.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(ovfFile.Capacity))) && ((this.PopulatedSize == null && ovfFile.PopulatedSize == null) || (this.PopulatedSize != null && this.PopulatedSize.Equals(ovfFile.PopulatedSize))));
        }

        public override bool Equals(object ovfFile)
        {
            return Equals(ovfFile as OvfFile);
        }

        public override int GetHashCode()
        {
            return (DeviceId + "_" + Path + "_" + CompressionMethod + "_" + ChunkSize + "_" + Size + "_" + Capacity + "_" + PopulatedSize).GetHashCode();
        }
    }

    public class OvfFileItem : DynamicData, IEquatable<OvfFileItem>
    {
        public string DeviceId { get; set; }

        public string Path { get; set; }

        public string CompressionMethod { get; set; }

        public long? ChunkSize { get; set; }

        public long? Size { get; set; }

        public int CimType { get; set; }

        public bool Create { get; set; }

        public bool Equals(OvfFileItem ovfFileItem)
        {
            return (ovfFileItem != null && this.DeviceId == ovfFileItem.DeviceId && this.Path == ovfFileItem.Path && this.CompressionMethod == ovfFileItem.CompressionMethod && ((this.ChunkSize == null && ovfFileItem.ChunkSize == null) || (this.ChunkSize != null && this.ChunkSize.Equals(ovfFileItem.ChunkSize))) && ((this.Size == null && ovfFileItem.Size == null) || (this.Size != null && this.Size.Equals(ovfFileItem.Size))) && this.CimType == ovfFileItem.CimType && this.Create == ovfFileItem.Create);
        }

        public override bool Equals(object ovfFileItem)
        {
            return Equals(ovfFileItem as OvfFileItem);
        }

        public override int GetHashCode()
        {
            return (DeviceId + "_" + Path + "_" + CompressionMethod + "_" + ChunkSize + "_" + Size + "_" + CimType + "_" + Create).GetHashCode();
        }
    }

    public class OvfHardwareCheck : OvfImport, IEquatable<OvfHardwareCheck>
    {
        public bool Equals(OvfHardwareCheck ovfHardwareCheck)
        {
            return (ovfHardwareCheck != null && base.Equals(ovfHardwareCheck));
        }

        public override bool Equals(object ovfHardwareCheck)
        {
            return Equals(ovfHardwareCheck as OvfHardwareCheck);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfHardwareExport : OvfExport, IEquatable<OvfHardwareExport>
    {
        public VirtualDevice Device { get; set; }

        public string VmPath { get; set; }

        public bool Equals(OvfHardwareExport ovfHardwareExport)
        {
            return (ovfHardwareExport != null && ((this.Device == null && ovfHardwareExport.Device == null) || (this.Device != null && this.Device.Equals(ovfHardwareExport.Device))) && this.VmPath == ovfHardwareExport.VmPath);
        }

        public override bool Equals(object ovfHardwareExport)
        {
            return Equals(ovfHardwareExport as OvfHardwareExport);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + VmPath).GetHashCode();
        }
    }

    public class OvfHostResourceConstraint : OvfConstraint, IEquatable<OvfHostResourceConstraint>
    {
        public string Value { get; set; }

        public bool Equals(OvfHostResourceConstraint ovfHostResourceConstraint)
        {
            return (ovfHostResourceConstraint != null && this.Value == ovfHostResourceConstraint.Value);
        }

        public override bool Equals(object ovfHostResourceConstraint)
        {
            return Equals(ovfHostResourceConstraint as OvfHostResourceConstraint);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class OvfHostValueNotParsed : OvfSystemFault, IEquatable<OvfHostValueNotParsed>
    {
        public string Property { get; set; }

        public string Value { get; set; }

        public bool Equals(OvfHostValueNotParsed ovfHostValueNotParsed)
        {
            return (ovfHostValueNotParsed != null && this.Property == ovfHostValueNotParsed.Property && this.Value == ovfHostValueNotParsed.Value);
        }

        public override bool Equals(object ovfHostValueNotParsed)
        {
            return Equals(ovfHostValueNotParsed as OvfHostValueNotParsed);
        }

        public override int GetHashCode()
        {
            return (Property + "_" + Value).GetHashCode();
        }
    }

    public class OvfImport : OvfFault, IEquatable<OvfImport>
    {
        public bool Equals(OvfImport ovfImport)
        {
            return (ovfImport != null && base.Equals(ovfImport));
        }

        public override bool Equals(object ovfImport)
        {
            return Equals(ovfImport as OvfImport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfImportFailed : OvfImport, IEquatable<OvfImportFailed>
    {
        public bool Equals(OvfImportFailed ovfImportFailed)
        {
            return (ovfImportFailed != null && base.Equals(ovfImportFailed));
        }

        public override bool Equals(object ovfImportFailed)
        {
            return Equals(ovfImportFailed as OvfImportFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInternalError : OvfSystemFault, IEquatable<OvfInternalError>
    {
        public bool Equals(OvfInternalError ovfInternalError)
        {
            return (ovfInternalError != null && base.Equals(ovfInternalError));
        }

        public override bool Equals(object ovfInternalError)
        {
            return Equals(ovfInternalError as OvfInternalError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInvalidPackage : OvfFault, IEquatable<OvfInvalidPackage>
    {
        public int LineNumber { get; set; }

        public bool Equals(OvfInvalidPackage ovfInvalidPackage)
        {
            return (ovfInvalidPackage != null && this.LineNumber == ovfInvalidPackage.LineNumber);
        }

        public override bool Equals(object ovfInvalidPackage)
        {
            return Equals(ovfInvalidPackage as OvfInvalidPackage);
        }

        public override int GetHashCode()
        {
            return (LineNumber).GetHashCode();
        }
    }

    public class OvfInvalidValue : OvfAttribute, IEquatable<OvfInvalidValue>
    {
        public string Value { get; set; }

        public bool Equals(OvfInvalidValue ovfInvalidValue)
        {
            return (ovfInvalidValue != null && this.Value == ovfInvalidValue.Value);
        }

        public override bool Equals(object ovfInvalidValue)
        {
            return Equals(ovfInvalidValue as OvfInvalidValue);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class OvfInvalidValueConfiguration : OvfInvalidValue, IEquatable<OvfInvalidValueConfiguration>
    {
        public bool Equals(OvfInvalidValueConfiguration ovfInvalidValueConfiguration)
        {
            return (ovfInvalidValueConfiguration != null && base.Equals(ovfInvalidValueConfiguration));
        }

        public override bool Equals(object ovfInvalidValueConfiguration)
        {
            return Equals(ovfInvalidValueConfiguration as OvfInvalidValueConfiguration);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInvalidValueEmpty : OvfInvalidValue, IEquatable<OvfInvalidValueEmpty>
    {
        public bool Equals(OvfInvalidValueEmpty ovfInvalidValueEmpty)
        {
            return (ovfInvalidValueEmpty != null && base.Equals(ovfInvalidValueEmpty));
        }

        public override bool Equals(object ovfInvalidValueEmpty)
        {
            return Equals(ovfInvalidValueEmpty as OvfInvalidValueEmpty);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInvalidValueFormatMalformed : OvfInvalidValue, IEquatable<OvfInvalidValueFormatMalformed>
    {
        public bool Equals(OvfInvalidValueFormatMalformed ovfInvalidValueFormatMalformed)
        {
            return (ovfInvalidValueFormatMalformed != null && base.Equals(ovfInvalidValueFormatMalformed));
        }

        public override bool Equals(object ovfInvalidValueFormatMalformed)
        {
            return Equals(ovfInvalidValueFormatMalformed as OvfInvalidValueFormatMalformed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInvalidValueReference : OvfInvalidValue, IEquatable<OvfInvalidValueReference>
    {
        public bool Equals(OvfInvalidValueReference ovfInvalidValueReference)
        {
            return (ovfInvalidValueReference != null && base.Equals(ovfInvalidValueReference));
        }

        public override bool Equals(object ovfInvalidValueReference)
        {
            return Equals(ovfInvalidValueReference as OvfInvalidValueReference);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfInvalidVmName : OvfUnsupportedPackage, IEquatable<OvfInvalidVmName>
    {
        public string Name { get; set; }

        public bool Equals(OvfInvalidVmName ovfInvalidVmName)
        {
            return (ovfInvalidVmName != null && this.Name == ovfInvalidVmName.Name);
        }

        public override bool Equals(object ovfInvalidVmName)
        {
            return Equals(ovfInvalidVmName as OvfInvalidVmName);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class OvfManager : ViewBase, IEquatable<OvfManager>
    {
        public OvfOptionInfo[] OvfImportOption { get; set; }

        public OvfOptionInfo[] OvfExportOption { get; set; }

        public OvfValidateHostResult ValidateHost(string ovfDescriptor, ManagedObjectReference host, OvfValidateHostParams vhp)
        {
            return default(OvfValidateHostResult);
        }

        public OvfParseDescriptorResult ParseDescriptor(string ovfDescriptor, OvfParseDescriptorParams pdp)
        {
            return default(OvfParseDescriptorResult);
        }

        public OvfCreateImportSpecResult CreateImportSpec(string ovfDescriptor, ManagedObjectReference resourcePool, ManagedObjectReference datastore, OvfCreateImportSpecParams cisp)
        {
            return default(OvfCreateImportSpecResult);
        }

        public OvfCreateDescriptorResult CreateDescriptor(ManagedObjectReference obj, OvfCreateDescriptorParams cdp)
        {
            return default(OvfCreateDescriptorResult);
        }

        public bool Equals(OvfManager ovfManager)
        {
            return (ovfManager != null && ((this.OvfImportOption == null && ovfManager.OvfImportOption == null) || (this.OvfImportOption != null && ovfManager.OvfImportOption != null && Enumerable.SequenceEqual(this.OvfImportOption, ovfManager.OvfImportOption))) && ((this.OvfExportOption == null && ovfManager.OvfExportOption == null) || (this.OvfExportOption != null && ovfManager.OvfExportOption != null && Enumerable.SequenceEqual(this.OvfExportOption, ovfManager.OvfExportOption))));
        }

        public override bool Equals(object ovfManager)
        {
            return Equals(ovfManager as OvfManager);
        }

        public override int GetHashCode()
        {
            return (OvfImportOption + "_" + OvfExportOption).GetHashCode();
        }
    }

    public class OvfManagerCommonParams : DynamicData, IEquatable<OvfManagerCommonParams>
    {
        public string Locale { get; set; }

        public string DeploymentOption { get; set; }

        public KeyValue[] MsgBundle { get; set; }

        public string[] ImportOption { get; set; }

        public bool Equals(OvfManagerCommonParams ovfManagerCommonParams)
        {
            return (ovfManagerCommonParams != null && this.Locale == ovfManagerCommonParams.Locale && this.DeploymentOption == ovfManagerCommonParams.DeploymentOption && ((this.MsgBundle == null && ovfManagerCommonParams.MsgBundle == null) || (this.MsgBundle != null && ovfManagerCommonParams.MsgBundle != null && Enumerable.SequenceEqual(this.MsgBundle, ovfManagerCommonParams.MsgBundle))) && ((this.ImportOption == null && ovfManagerCommonParams.ImportOption == null) || (this.ImportOption != null && ovfManagerCommonParams.ImportOption != null && Enumerable.SequenceEqual(this.ImportOption, ovfManagerCommonParams.ImportOption))));
        }

        public override bool Equals(object ovfManagerCommonParams)
        {
            return Equals(ovfManagerCommonParams as OvfManagerCommonParams);
        }

        public override int GetHashCode()
        {
            return (Locale + "_" + DeploymentOption + "_" + MsgBundle + "_" + ImportOption).GetHashCode();
        }
    }

    public class OvfMappedOsId : OvfImport, IEquatable<OvfMappedOsId>
    {
        public int OvfId { get; set; }

        public string OvfDescription { get; set; }

        public string TargetDescription { get; set; }

        public bool Equals(OvfMappedOsId ovfMappedOsId)
        {
            return (ovfMappedOsId != null && this.OvfId == ovfMappedOsId.OvfId && this.OvfDescription == ovfMappedOsId.OvfDescription && this.TargetDescription == ovfMappedOsId.TargetDescription);
        }

        public override bool Equals(object ovfMappedOsId)
        {
            return Equals(ovfMappedOsId as OvfMappedOsId);
        }

        public override int GetHashCode()
        {
            return (OvfId + "_" + OvfDescription + "_" + TargetDescription).GetHashCode();
        }
    }

    public class OvfMissingAttribute : OvfAttribute, IEquatable<OvfMissingAttribute>
    {
        public bool Equals(OvfMissingAttribute ovfMissingAttribute)
        {
            return (ovfMissingAttribute != null && base.Equals(ovfMissingAttribute));
        }

        public override bool Equals(object ovfMissingAttribute)
        {
            return Equals(ovfMissingAttribute as OvfMissingAttribute);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfMissingElement : OvfElement, IEquatable<OvfMissingElement>
    {
        public bool Equals(OvfMissingElement ovfMissingElement)
        {
            return (ovfMissingElement != null && base.Equals(ovfMissingElement));
        }

        public override bool Equals(object ovfMissingElement)
        {
            return Equals(ovfMissingElement as OvfMissingElement);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfMissingElementNormalBoundary : OvfMissingElement, IEquatable<OvfMissingElementNormalBoundary>
    {
        public string Boundary { get; set; }

        public bool Equals(OvfMissingElementNormalBoundary ovfMissingElementNormalBoundary)
        {
            return (ovfMissingElementNormalBoundary != null && this.Boundary == ovfMissingElementNormalBoundary.Boundary);
        }

        public override bool Equals(object ovfMissingElementNormalBoundary)
        {
            return Equals(ovfMissingElementNormalBoundary as OvfMissingElementNormalBoundary);
        }

        public override int GetHashCode()
        {
            return (Boundary).GetHashCode();
        }
    }

    public class OvfMissingHardware : OvfImport, IEquatable<OvfMissingHardware>
    {
        public string Name { get; set; }

        public int ResourceType { get; set; }

        public bool Equals(OvfMissingHardware ovfMissingHardware)
        {
            return (ovfMissingHardware != null && this.Name == ovfMissingHardware.Name && this.ResourceType == ovfMissingHardware.ResourceType);
        }

        public override bool Equals(object ovfMissingHardware)
        {
            return Equals(ovfMissingHardware as OvfMissingHardware);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + ResourceType).GetHashCode();
        }
    }

    public class OvfNetworkInfo : DynamicData, IEquatable<OvfNetworkInfo>
    {
        public string Name { get; set; }

        public string Description { get; set; }

        public bool Equals(OvfNetworkInfo ovfNetworkInfo)
        {
            return (ovfNetworkInfo != null && this.Name == ovfNetworkInfo.Name && this.Description == ovfNetworkInfo.Description);
        }

        public override bool Equals(object ovfNetworkInfo)
        {
            return Equals(ovfNetworkInfo as OvfNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Description).GetHashCode();
        }
    }

    public class OvfNetworkMapping : DynamicData, IEquatable<OvfNetworkMapping>
    {
        public string Name { get; set; }

        public ManagedObjectReference Network { get; set; }

        public OvfNetworkMapping_LinkedView LinkedView { get; set; }

        public bool Equals(OvfNetworkMapping ovfNetworkMapping)
        {
            return (ovfNetworkMapping != null && this.Name == ovfNetworkMapping.Name && ((this.Network == null && ovfNetworkMapping.Network == null) || (this.Network != null && this.Network.Equals(ovfNetworkMapping.Network))) && ((this.LinkedView == null && ovfNetworkMapping.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ovfNetworkMapping.LinkedView))));
        }

        public override bool Equals(object ovfNetworkMapping)
        {
            return Equals(ovfNetworkMapping as OvfNetworkMapping);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class OvfNetworkMapping_LinkedView : IEquatable<OvfNetworkMapping_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(OvfNetworkMapping_LinkedView ovfNetworkMapping_LinkedView)
        {
            return (ovfNetworkMapping_LinkedView != null && ((this.Network == null && ovfNetworkMapping_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(ovfNetworkMapping_LinkedView.Network))));
        }

        public override bool Equals(object ovfNetworkMapping_LinkedView)
        {
            return Equals(ovfNetworkMapping_LinkedView as OvfNetworkMapping_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class OvfNetworkMappingNotSupported : OvfImport, IEquatable<OvfNetworkMappingNotSupported>
    {
        public bool Equals(OvfNetworkMappingNotSupported ovfNetworkMappingNotSupported)
        {
            return (ovfNetworkMappingNotSupported != null && base.Equals(ovfNetworkMappingNotSupported));
        }

        public override bool Equals(object ovfNetworkMappingNotSupported)
        {
            return Equals(ovfNetworkMappingNotSupported as OvfNetworkMappingNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfNoHostNic : OvfUnsupportedPackage, IEquatable<OvfNoHostNic>
    {
        public bool Equals(OvfNoHostNic ovfNoHostNic)
        {
            return (ovfNoHostNic != null && base.Equals(ovfNoHostNic));
        }

        public override bool Equals(object ovfNoHostNic)
        {
            return Equals(ovfNoHostNic as OvfNoHostNic);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfNoSpaceOnController : OvfUnsupportedElement, IEquatable<OvfNoSpaceOnController>
    {
        public string Parent { get; set; }

        public bool Equals(OvfNoSpaceOnController ovfNoSpaceOnController)
        {
            return (ovfNoSpaceOnController != null && this.Parent == ovfNoSpaceOnController.Parent);
        }

        public override bool Equals(object ovfNoSpaceOnController)
        {
            return Equals(ovfNoSpaceOnController as OvfNoSpaceOnController);
        }

        public override int GetHashCode()
        {
            return (Parent).GetHashCode();
        }
    }

    public class OvfNoSupportedHardwareFamily : OvfUnsupportedPackage, IEquatable<OvfNoSupportedHardwareFamily>
    {
        public string Version { get; set; }

        public bool Equals(OvfNoSupportedHardwareFamily ovfNoSupportedHardwareFamily)
        {
            return (ovfNoSupportedHardwareFamily != null && this.Version == ovfNoSupportedHardwareFamily.Version);
        }

        public override bool Equals(object ovfNoSupportedHardwareFamily)
        {
            return Equals(ovfNoSupportedHardwareFamily as OvfNoSupportedHardwareFamily);
        }

        public override int GetHashCode()
        {
            return (Version).GetHashCode();
        }
    }

    public class OvfOptionInfo : DynamicData, IEquatable<OvfOptionInfo>
    {
        public string Option { get; set; }

        public LocalizableMessage Description { get; set; }

        public bool Equals(OvfOptionInfo ovfOptionInfo)
        {
            return (ovfOptionInfo != null && this.Option == ovfOptionInfo.Option && ((this.Description == null && ovfOptionInfo.Description == null) || (this.Description != null && this.Description.Equals(ovfOptionInfo.Description))));
        }

        public override bool Equals(object ovfOptionInfo)
        {
            return Equals(ovfOptionInfo as OvfOptionInfo);
        }

        public override int GetHashCode()
        {
            return (Option + "_" + Description).GetHashCode();
        }
    }

    public class OvfParseDescriptorParams : OvfManagerCommonParams, IEquatable<OvfParseDescriptorParams>
    {
        public bool Equals(OvfParseDescriptorParams ovfParseDescriptorParams)
        {
            return (ovfParseDescriptorParams != null && base.Equals(ovfParseDescriptorParams));
        }

        public override bool Equals(object ovfParseDescriptorParams)
        {
            return Equals(ovfParseDescriptorParams as OvfParseDescriptorParams);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfParseDescriptorResult : DynamicData, IEquatable<OvfParseDescriptorResult>
    {
        public string[] Eula { get; set; }

        public OvfNetworkInfo[] Network { get; set; }

        public string[] IpAllocationScheme { get; set; }

        public string[] IpProtocols { get; set; }

        public VAppPropertyInfo[] Property { get; set; }

        public VAppProductInfo ProductInfo { get; set; }

        public string Annotation { get; set; }

        public long? ApproximateDownloadSize { get; set; }

        public long? ApproximateFlatDeploymentSize { get; set; }

        public long? ApproximateSparseDeploymentSize { get; set; }

        public string DefaultEntityName { get; set; }

        public bool VirtualApp { get; set; }

        public OvfDeploymentOption[] DeploymentOption { get; set; }

        public string DefaultDeploymentOption { get; set; }

        public KeyValue[] EntityName { get; set; }

        public OvfConsumerOstNode AnnotatedOst { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public LocalizedMethodFault[] Warning { get; set; }

        public bool Equals(OvfParseDescriptorResult ovfParseDescriptorResult)
        {
            return (ovfParseDescriptorResult != null && ((this.Eula == null && ovfParseDescriptorResult.Eula == null) || (this.Eula != null && ovfParseDescriptorResult.Eula != null && Enumerable.SequenceEqual(this.Eula, ovfParseDescriptorResult.Eula))) && ((this.Network == null && ovfParseDescriptorResult.Network == null) || (this.Network != null && ovfParseDescriptorResult.Network != null && Enumerable.SequenceEqual(this.Network, ovfParseDescriptorResult.Network))) && ((this.IpAllocationScheme == null && ovfParseDescriptorResult.IpAllocationScheme == null) || (this.IpAllocationScheme != null && ovfParseDescriptorResult.IpAllocationScheme != null && Enumerable.SequenceEqual(this.IpAllocationScheme, ovfParseDescriptorResult.IpAllocationScheme))) && ((this.IpProtocols == null && ovfParseDescriptorResult.IpProtocols == null) || (this.IpProtocols != null && ovfParseDescriptorResult.IpProtocols != null && Enumerable.SequenceEqual(this.IpProtocols, ovfParseDescriptorResult.IpProtocols))) && ((this.Property == null && ovfParseDescriptorResult.Property == null) || (this.Property != null && ovfParseDescriptorResult.Property != null && Enumerable.SequenceEqual(this.Property, ovfParseDescriptorResult.Property))) && ((this.ProductInfo == null && ovfParseDescriptorResult.ProductInfo == null) || (this.ProductInfo != null && this.ProductInfo.Equals(ovfParseDescriptorResult.ProductInfo))) && this.Annotation == ovfParseDescriptorResult.Annotation && ((this.ApproximateDownloadSize == null && ovfParseDescriptorResult.ApproximateDownloadSize == null) || (this.ApproximateDownloadSize != null && this.ApproximateDownloadSize.Equals(ovfParseDescriptorResult.ApproximateDownloadSize))) && ((this.ApproximateFlatDeploymentSize == null && ovfParseDescriptorResult.ApproximateFlatDeploymentSize == null) || (this.ApproximateFlatDeploymentSize != null && this.ApproximateFlatDeploymentSize.Equals(ovfParseDescriptorResult.ApproximateFlatDeploymentSize))) && ((this.ApproximateSparseDeploymentSize == null && ovfParseDescriptorResult.ApproximateSparseDeploymentSize == null) || (this.ApproximateSparseDeploymentSize != null && this.ApproximateSparseDeploymentSize.Equals(ovfParseDescriptorResult.ApproximateSparseDeploymentSize))) && this.DefaultEntityName == ovfParseDescriptorResult.DefaultEntityName && this.VirtualApp == ovfParseDescriptorResult.VirtualApp && ((this.DeploymentOption == null && ovfParseDescriptorResult.DeploymentOption == null) || (this.DeploymentOption != null && ovfParseDescriptorResult.DeploymentOption != null && Enumerable.SequenceEqual(this.DeploymentOption, ovfParseDescriptorResult.DeploymentOption))) && this.DefaultDeploymentOption == ovfParseDescriptorResult.DefaultDeploymentOption && ((this.EntityName == null && ovfParseDescriptorResult.EntityName == null) || (this.EntityName != null && ovfParseDescriptorResult.EntityName != null && Enumerable.SequenceEqual(this.EntityName, ovfParseDescriptorResult.EntityName))) && ((this.AnnotatedOst == null && ovfParseDescriptorResult.AnnotatedOst == null) || (this.AnnotatedOst != null && this.AnnotatedOst.Equals(ovfParseDescriptorResult.AnnotatedOst))) && ((this.Error == null && ovfParseDescriptorResult.Error == null) || (this.Error != null && ovfParseDescriptorResult.Error != null && Enumerable.SequenceEqual(this.Error, ovfParseDescriptorResult.Error))) && ((this.Warning == null && ovfParseDescriptorResult.Warning == null) || (this.Warning != null && ovfParseDescriptorResult.Warning != null && Enumerable.SequenceEqual(this.Warning, ovfParseDescriptorResult.Warning))));
        }

        public override bool Equals(object ovfParseDescriptorResult)
        {
            return Equals(ovfParseDescriptorResult as OvfParseDescriptorResult);
        }

        public override int GetHashCode()
        {
            return (Eula + "_" + Network + "_" + IpAllocationScheme + "_" + IpProtocols + "_" + Property + "_" + ProductInfo + "_" + Annotation + "_" + ApproximateDownloadSize + "_" + ApproximateFlatDeploymentSize + "_" + ApproximateSparseDeploymentSize + "_" + DefaultEntityName + "_" + VirtualApp + "_" + DeploymentOption + "_" + DefaultDeploymentOption + "_" + EntityName + "_" + AnnotatedOst + "_" + Error + "_" + Warning).GetHashCode();
        }
    }

    public class OvfProperty : OvfInvalidPackage, IEquatable<OvfProperty>
    {
        public string Type { get; set; }

        public string Value { get; set; }

        public bool Equals(OvfProperty ovfProperty)
        {
            return (ovfProperty != null && this.Type == ovfProperty.Type && this.Value == ovfProperty.Value);
        }

        public override bool Equals(object ovfProperty)
        {
            return Equals(ovfProperty as OvfProperty);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Value).GetHashCode();
        }
    }

    public class OvfPropertyExport : OvfExport, IEquatable<OvfPropertyExport>
    {
        public string Type { get; set; }

        public string Value { get; set; }

        public bool Equals(OvfPropertyExport ovfPropertyExport)
        {
            return (ovfPropertyExport != null && this.Type == ovfPropertyExport.Type && this.Value == ovfPropertyExport.Value);
        }

        public override bool Equals(object ovfPropertyExport)
        {
            return Equals(ovfPropertyExport as OvfPropertyExport);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Value).GetHashCode();
        }
    }

    public class OvfPropertyNetwork : OvfProperty, IEquatable<OvfPropertyNetwork>
    {
        public bool Equals(OvfPropertyNetwork ovfPropertyNetwork)
        {
            return (ovfPropertyNetwork != null && base.Equals(ovfPropertyNetwork));
        }

        public override bool Equals(object ovfPropertyNetwork)
        {
            return Equals(ovfPropertyNetwork as OvfPropertyNetwork);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfPropertyNetworkExport : OvfExport, IEquatable<OvfPropertyNetworkExport>
    {
        public string Network { get; set; }

        public bool Equals(OvfPropertyNetworkExport ovfPropertyNetworkExport)
        {
            return (ovfPropertyNetworkExport != null && this.Network == ovfPropertyNetworkExport.Network);
        }

        public override bool Equals(object ovfPropertyNetworkExport)
        {
            return Equals(ovfPropertyNetworkExport as OvfPropertyNetworkExport);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class OvfPropertyQualifier : OvfProperty, IEquatable<OvfPropertyQualifier>
    {
        public string Qualifier { get; set; }

        public bool Equals(OvfPropertyQualifier ovfPropertyQualifier)
        {
            return (ovfPropertyQualifier != null && this.Qualifier == ovfPropertyQualifier.Qualifier);
        }

        public override bool Equals(object ovfPropertyQualifier)
        {
            return Equals(ovfPropertyQualifier as OvfPropertyQualifier);
        }

        public override int GetHashCode()
        {
            return (Qualifier).GetHashCode();
        }
    }

    public class OvfPropertyQualifierDuplicate : OvfProperty, IEquatable<OvfPropertyQualifierDuplicate>
    {
        public string Qualifier { get; set; }

        public bool Equals(OvfPropertyQualifierDuplicate ovfPropertyQualifierDuplicate)
        {
            return (ovfPropertyQualifierDuplicate != null && this.Qualifier == ovfPropertyQualifierDuplicate.Qualifier);
        }

        public override bool Equals(object ovfPropertyQualifierDuplicate)
        {
            return Equals(ovfPropertyQualifierDuplicate as OvfPropertyQualifierDuplicate);
        }

        public override int GetHashCode()
        {
            return (Qualifier).GetHashCode();
        }
    }

    public class OvfPropertyQualifierIgnored : OvfProperty, IEquatable<OvfPropertyQualifierIgnored>
    {
        public string Qualifier { get; set; }

        public bool Equals(OvfPropertyQualifierIgnored ovfPropertyQualifierIgnored)
        {
            return (ovfPropertyQualifierIgnored != null && this.Qualifier == ovfPropertyQualifierIgnored.Qualifier);
        }

        public override bool Equals(object ovfPropertyQualifierIgnored)
        {
            return Equals(ovfPropertyQualifierIgnored as OvfPropertyQualifierIgnored);
        }

        public override int GetHashCode()
        {
            return (Qualifier).GetHashCode();
        }
    }

    public class OvfPropertyType : OvfProperty, IEquatable<OvfPropertyType>
    {
        public bool Equals(OvfPropertyType ovfPropertyType)
        {
            return (ovfPropertyType != null && base.Equals(ovfPropertyType));
        }

        public override bool Equals(object ovfPropertyType)
        {
            return Equals(ovfPropertyType as OvfPropertyType);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfPropertyValue : OvfProperty, IEquatable<OvfPropertyValue>
    {
        public bool Equals(OvfPropertyValue ovfPropertyValue)
        {
            return (ovfPropertyValue != null && base.Equals(ovfPropertyValue));
        }

        public override bool Equals(object ovfPropertyValue)
        {
            return Equals(ovfPropertyValue as OvfPropertyValue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfResourceMap : DynamicData, IEquatable<OvfResourceMap>
    {
        public string Source { get; set; }

        public ManagedObjectReference Parent { get; set; }

        public ResourceConfigSpec ResourceSpec { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public OvfResourceMap_LinkedView LinkedView { get; set; }

        public bool Equals(OvfResourceMap ovfResourceMap)
        {
            return (ovfResourceMap != null && this.Source == ovfResourceMap.Source && ((this.Parent == null && ovfResourceMap.Parent == null) || (this.Parent != null && this.Parent.Equals(ovfResourceMap.Parent))) && ((this.ResourceSpec == null && ovfResourceMap.ResourceSpec == null) || (this.ResourceSpec != null && this.ResourceSpec.Equals(ovfResourceMap.ResourceSpec))) && ((this.Datastore == null && ovfResourceMap.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(ovfResourceMap.Datastore))) && ((this.LinkedView == null && ovfResourceMap.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ovfResourceMap.LinkedView))));
        }

        public override bool Equals(object ovfResourceMap)
        {
            return Equals(ovfResourceMap as OvfResourceMap);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Parent + "_" + ResourceSpec + "_" + Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class OvfResourceMap_LinkedView : IEquatable<OvfResourceMap_LinkedView>
    {
        public ResourcePool Parent { get; set; }

        public Datastore Datastore { get; set; }

        public bool Equals(OvfResourceMap_LinkedView ovfResourceMap_LinkedView)
        {
            return (ovfResourceMap_LinkedView != null && ((this.Parent == null && ovfResourceMap_LinkedView.Parent == null) || (this.Parent != null && this.Parent.Equals(ovfResourceMap_LinkedView.Parent))) && ((this.Datastore == null && ovfResourceMap_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(ovfResourceMap_LinkedView.Datastore))));
        }

        public override bool Equals(object ovfResourceMap_LinkedView)
        {
            return Equals(ovfResourceMap_LinkedView as OvfResourceMap_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Parent + "_" + Datastore).GetHashCode();
        }
    }

    public class OvfSystemFault : OvfFault, IEquatable<OvfSystemFault>
    {
        public bool Equals(OvfSystemFault ovfSystemFault)
        {
            return (ovfSystemFault != null && base.Equals(ovfSystemFault));
        }

        public override bool Equals(object ovfSystemFault)
        {
            return Equals(ovfSystemFault as OvfSystemFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfToXmlUnsupportedElement : OvfSystemFault, IEquatable<OvfToXmlUnsupportedElement>
    {
        public string Name { get; set; }

        public bool Equals(OvfToXmlUnsupportedElement ovfToXmlUnsupportedElement)
        {
            return (ovfToXmlUnsupportedElement != null && this.Name == ovfToXmlUnsupportedElement.Name);
        }

        public override bool Equals(object ovfToXmlUnsupportedElement)
        {
            return Equals(ovfToXmlUnsupportedElement as OvfToXmlUnsupportedElement);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class OvfUnableToExportDisk : OvfHardwareExport, IEquatable<OvfUnableToExportDisk>
    {
        public string DiskName { get; set; }

        public bool Equals(OvfUnableToExportDisk ovfUnableToExportDisk)
        {
            return (ovfUnableToExportDisk != null && this.DiskName == ovfUnableToExportDisk.DiskName);
        }

        public override bool Equals(object ovfUnableToExportDisk)
        {
            return Equals(ovfUnableToExportDisk as OvfUnableToExportDisk);
        }

        public override int GetHashCode()
        {
            return (DiskName).GetHashCode();
        }
    }

    public class OvfUnexpectedElement : OvfElement, IEquatable<OvfUnexpectedElement>
    {
        public bool Equals(OvfUnexpectedElement ovfUnexpectedElement)
        {
            return (ovfUnexpectedElement != null && base.Equals(ovfUnexpectedElement));
        }

        public override bool Equals(object ovfUnexpectedElement)
        {
            return Equals(ovfUnexpectedElement as OvfUnexpectedElement);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfUnknownDevice : OvfSystemFault, IEquatable<OvfUnknownDevice>
    {
        public VirtualDevice Device { get; set; }

        public string VmName { get; set; }

        public bool Equals(OvfUnknownDevice ovfUnknownDevice)
        {
            return (ovfUnknownDevice != null && ((this.Device == null && ovfUnknownDevice.Device == null) || (this.Device != null && this.Device.Equals(ovfUnknownDevice.Device))) && this.VmName == ovfUnknownDevice.VmName);
        }

        public override bool Equals(object ovfUnknownDevice)
        {
            return Equals(ovfUnknownDevice as OvfUnknownDevice);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + VmName).GetHashCode();
        }
    }

    public class OvfUnknownDeviceBacking : OvfHardwareExport, IEquatable<OvfUnknownDeviceBacking>
    {
        public VirtualDeviceBackingInfo Backing { get; set; }

        public bool Equals(OvfUnknownDeviceBacking ovfUnknownDeviceBacking)
        {
            return (ovfUnknownDeviceBacking != null && ((this.Backing == null && ovfUnknownDeviceBacking.Backing == null) || (this.Backing != null && this.Backing.Equals(ovfUnknownDeviceBacking.Backing))));
        }

        public override bool Equals(object ovfUnknownDeviceBacking)
        {
            return Equals(ovfUnknownDeviceBacking as OvfUnknownDeviceBacking);
        }

        public override int GetHashCode()
        {
            return (Backing).GetHashCode();
        }
    }

    public class OvfUnknownEntity : OvfSystemFault, IEquatable<OvfUnknownEntity>
    {
        public int LineNumber { get; set; }

        public bool Equals(OvfUnknownEntity ovfUnknownEntity)
        {
            return (ovfUnknownEntity != null && this.LineNumber == ovfUnknownEntity.LineNumber);
        }

        public override bool Equals(object ovfUnknownEntity)
        {
            return Equals(ovfUnknownEntity as OvfUnknownEntity);
        }

        public override int GetHashCode()
        {
            return (LineNumber).GetHashCode();
        }
    }

    public class OvfUnsupportedAttribute : OvfUnsupportedPackage, IEquatable<OvfUnsupportedAttribute>
    {
        public string ElementName { get; set; }

        public string AttributeName { get; set; }

        public bool Equals(OvfUnsupportedAttribute ovfUnsupportedAttribute)
        {
            return (ovfUnsupportedAttribute != null && this.ElementName == ovfUnsupportedAttribute.ElementName && this.AttributeName == ovfUnsupportedAttribute.AttributeName);
        }

        public override bool Equals(object ovfUnsupportedAttribute)
        {
            return Equals(ovfUnsupportedAttribute as OvfUnsupportedAttribute);
        }

        public override int GetHashCode()
        {
            return (ElementName + "_" + AttributeName).GetHashCode();
        }
    }

    public class OvfUnsupportedAttributeValue : OvfUnsupportedAttribute, IEquatable<OvfUnsupportedAttributeValue>
    {
        public string Value { get; set; }

        public bool Equals(OvfUnsupportedAttributeValue ovfUnsupportedAttributeValue)
        {
            return (ovfUnsupportedAttributeValue != null && this.Value == ovfUnsupportedAttributeValue.Value);
        }

        public override bool Equals(object ovfUnsupportedAttributeValue)
        {
            return Equals(ovfUnsupportedAttributeValue as OvfUnsupportedAttributeValue);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class OvfUnsupportedDeviceBackingInfo : OvfSystemFault, IEquatable<OvfUnsupportedDeviceBackingInfo>
    {
        public string ElementName { get; set; }

        public string InstanceId { get; set; }

        public string DeviceName { get; set; }

        public string BackingName { get; set; }

        public bool Equals(OvfUnsupportedDeviceBackingInfo ovfUnsupportedDeviceBackingInfo)
        {
            return (ovfUnsupportedDeviceBackingInfo != null && this.ElementName == ovfUnsupportedDeviceBackingInfo.ElementName && this.InstanceId == ovfUnsupportedDeviceBackingInfo.InstanceId && this.DeviceName == ovfUnsupportedDeviceBackingInfo.DeviceName && this.BackingName == ovfUnsupportedDeviceBackingInfo.BackingName);
        }

        public override bool Equals(object ovfUnsupportedDeviceBackingInfo)
        {
            return Equals(ovfUnsupportedDeviceBackingInfo as OvfUnsupportedDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return (ElementName + "_" + InstanceId + "_" + DeviceName + "_" + BackingName).GetHashCode();
        }
    }

    public class OvfUnsupportedDeviceBackingOption : OvfSystemFault, IEquatable<OvfUnsupportedDeviceBackingOption>
    {
        public string ElementName { get; set; }

        public string InstanceId { get; set; }

        public string DeviceName { get; set; }

        public string BackingName { get; set; }

        public bool Equals(OvfUnsupportedDeviceBackingOption ovfUnsupportedDeviceBackingOption)
        {
            return (ovfUnsupportedDeviceBackingOption != null && this.ElementName == ovfUnsupportedDeviceBackingOption.ElementName && this.InstanceId == ovfUnsupportedDeviceBackingOption.InstanceId && this.DeviceName == ovfUnsupportedDeviceBackingOption.DeviceName && this.BackingName == ovfUnsupportedDeviceBackingOption.BackingName);
        }

        public override bool Equals(object ovfUnsupportedDeviceBackingOption)
        {
            return Equals(ovfUnsupportedDeviceBackingOption as OvfUnsupportedDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return (ElementName + "_" + InstanceId + "_" + DeviceName + "_" + BackingName).GetHashCode();
        }
    }

    public class OvfUnsupportedDeviceExport : OvfHardwareExport, IEquatable<OvfUnsupportedDeviceExport>
    {
        public bool Equals(OvfUnsupportedDeviceExport ovfUnsupportedDeviceExport)
        {
            return (ovfUnsupportedDeviceExport != null && base.Equals(ovfUnsupportedDeviceExport));
        }

        public override bool Equals(object ovfUnsupportedDeviceExport)
        {
            return Equals(ovfUnsupportedDeviceExport as OvfUnsupportedDeviceExport);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfUnsupportedDiskProvisioning : OvfImport, IEquatable<OvfUnsupportedDiskProvisioning>
    {
        public string DiskProvisioning { get; set; }

        public string SupportedDiskProvisioning { get; set; }

        public bool Equals(OvfUnsupportedDiskProvisioning ovfUnsupportedDiskProvisioning)
        {
            return (ovfUnsupportedDiskProvisioning != null && this.DiskProvisioning == ovfUnsupportedDiskProvisioning.DiskProvisioning && this.SupportedDiskProvisioning == ovfUnsupportedDiskProvisioning.SupportedDiskProvisioning);
        }

        public override bool Equals(object ovfUnsupportedDiskProvisioning)
        {
            return Equals(ovfUnsupportedDiskProvisioning as OvfUnsupportedDiskProvisioning);
        }

        public override int GetHashCode()
        {
            return (DiskProvisioning + "_" + SupportedDiskProvisioning).GetHashCode();
        }
    }

    public class OvfUnsupportedElement : OvfUnsupportedPackage, IEquatable<OvfUnsupportedElement>
    {
        public string Name { get; set; }

        public bool Equals(OvfUnsupportedElement ovfUnsupportedElement)
        {
            return (ovfUnsupportedElement != null && this.Name == ovfUnsupportedElement.Name);
        }

        public override bool Equals(object ovfUnsupportedElement)
        {
            return Equals(ovfUnsupportedElement as OvfUnsupportedElement);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class OvfUnsupportedElementValue : OvfUnsupportedElement, IEquatable<OvfUnsupportedElementValue>
    {
        public string Value { get; set; }

        public bool Equals(OvfUnsupportedElementValue ovfUnsupportedElementValue)
        {
            return (ovfUnsupportedElementValue != null && this.Value == ovfUnsupportedElementValue.Value);
        }

        public override bool Equals(object ovfUnsupportedElementValue)
        {
            return Equals(ovfUnsupportedElementValue as OvfUnsupportedElementValue);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class OvfUnsupportedPackage : OvfFault, IEquatable<OvfUnsupportedPackage>
    {
        public int? LineNumber { get; set; }

        public bool Equals(OvfUnsupportedPackage ovfUnsupportedPackage)
        {
            return (ovfUnsupportedPackage != null && ((this.LineNumber == null && ovfUnsupportedPackage.LineNumber == null) || (this.LineNumber != null && this.LineNumber.Equals(ovfUnsupportedPackage.LineNumber))));
        }

        public override bool Equals(object ovfUnsupportedPackage)
        {
            return Equals(ovfUnsupportedPackage as OvfUnsupportedPackage);
        }

        public override int GetHashCode()
        {
            return (LineNumber).GetHashCode();
        }
    }

    public class OvfUnsupportedSection : OvfUnsupportedElement, IEquatable<OvfUnsupportedSection>
    {
        public string Info { get; set; }

        public bool Equals(OvfUnsupportedSection ovfUnsupportedSection)
        {
            return (ovfUnsupportedSection != null && this.Info == ovfUnsupportedSection.Info);
        }

        public override bool Equals(object ovfUnsupportedSection)
        {
            return Equals(ovfUnsupportedSection as OvfUnsupportedSection);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class OvfUnsupportedSubType : OvfUnsupportedPackage, IEquatable<OvfUnsupportedSubType>
    {
        public string ElementName { get; set; }

        public string InstanceId { get; set; }

        public int DeviceType { get; set; }

        public string DeviceSubType { get; set; }

        public bool Equals(OvfUnsupportedSubType ovfUnsupportedSubType)
        {
            return (ovfUnsupportedSubType != null && this.ElementName == ovfUnsupportedSubType.ElementName && this.InstanceId == ovfUnsupportedSubType.InstanceId && this.DeviceType == ovfUnsupportedSubType.DeviceType && this.DeviceSubType == ovfUnsupportedSubType.DeviceSubType);
        }

        public override bool Equals(object ovfUnsupportedSubType)
        {
            return Equals(ovfUnsupportedSubType as OvfUnsupportedSubType);
        }

        public override int GetHashCode()
        {
            return (ElementName + "_" + InstanceId + "_" + DeviceType + "_" + DeviceSubType).GetHashCode();
        }
    }

    public class OvfUnsupportedType : OvfUnsupportedPackage, IEquatable<OvfUnsupportedType>
    {
        public string Name { get; set; }

        public string InstanceId { get; set; }

        public int DeviceType { get; set; }

        public bool Equals(OvfUnsupportedType ovfUnsupportedType)
        {
            return (ovfUnsupportedType != null && this.Name == ovfUnsupportedType.Name && this.InstanceId == ovfUnsupportedType.InstanceId && this.DeviceType == ovfUnsupportedType.DeviceType);
        }

        public override bool Equals(object ovfUnsupportedType)
        {
            return Equals(ovfUnsupportedType as OvfUnsupportedType);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + InstanceId + "_" + DeviceType).GetHashCode();
        }
    }

    public class OvfValidateHostParams : OvfManagerCommonParams, IEquatable<OvfValidateHostParams>
    {
        public bool Equals(OvfValidateHostParams ovfValidateHostParams)
        {
            return (ovfValidateHostParams != null && base.Equals(ovfValidateHostParams));
        }

        public override bool Equals(object ovfValidateHostParams)
        {
            return Equals(ovfValidateHostParams as OvfValidateHostParams);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfValidateHostResult : DynamicData, IEquatable<OvfValidateHostResult>
    {
        public long? DownloadSize { get; set; }

        public long? FlatDeploymentSize { get; set; }

        public long? SparseDeploymentSize { get; set; }

        public LocalizedMethodFault[] Error { get; set; }

        public LocalizedMethodFault[] Warning { get; set; }

        public string[] SupportedDiskProvisioning { get; set; }

        public bool Equals(OvfValidateHostResult ovfValidateHostResult)
        {
            return (ovfValidateHostResult != null && ((this.DownloadSize == null && ovfValidateHostResult.DownloadSize == null) || (this.DownloadSize != null && this.DownloadSize.Equals(ovfValidateHostResult.DownloadSize))) && ((this.FlatDeploymentSize == null && ovfValidateHostResult.FlatDeploymentSize == null) || (this.FlatDeploymentSize != null && this.FlatDeploymentSize.Equals(ovfValidateHostResult.FlatDeploymentSize))) && ((this.SparseDeploymentSize == null && ovfValidateHostResult.SparseDeploymentSize == null) || (this.SparseDeploymentSize != null && this.SparseDeploymentSize.Equals(ovfValidateHostResult.SparseDeploymentSize))) && ((this.Error == null && ovfValidateHostResult.Error == null) || (this.Error != null && ovfValidateHostResult.Error != null && Enumerable.SequenceEqual(this.Error, ovfValidateHostResult.Error))) && ((this.Warning == null && ovfValidateHostResult.Warning == null) || (this.Warning != null && ovfValidateHostResult.Warning != null && Enumerable.SequenceEqual(this.Warning, ovfValidateHostResult.Warning))) && ((this.SupportedDiskProvisioning == null && ovfValidateHostResult.SupportedDiskProvisioning == null) || (this.SupportedDiskProvisioning != null && ovfValidateHostResult.SupportedDiskProvisioning != null && Enumerable.SequenceEqual(this.SupportedDiskProvisioning, ovfValidateHostResult.SupportedDiskProvisioning))));
        }

        public override bool Equals(object ovfValidateHostResult)
        {
            return Equals(ovfValidateHostResult as OvfValidateHostResult);
        }

        public override int GetHashCode()
        {
            return (DownloadSize + "_" + FlatDeploymentSize + "_" + SparseDeploymentSize + "_" + Error + "_" + Warning + "_" + SupportedDiskProvisioning).GetHashCode();
        }
    }

    public class OvfWrongElement : OvfElement, IEquatable<OvfWrongElement>
    {
        public bool Equals(OvfWrongElement ovfWrongElement)
        {
            return (ovfWrongElement != null && base.Equals(ovfWrongElement));
        }

        public override bool Equals(object ovfWrongElement)
        {
            return Equals(ovfWrongElement as OvfWrongElement);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class OvfWrongNamespace : OvfInvalidPackage, IEquatable<OvfWrongNamespace>
    {
        public string NamespaceName { get; set; }

        public bool Equals(OvfWrongNamespace ovfWrongNamespace)
        {
            return (ovfWrongNamespace != null && this.NamespaceName == ovfWrongNamespace.NamespaceName);
        }

        public override bool Equals(object ovfWrongNamespace)
        {
            return Equals(ovfWrongNamespace as OvfWrongNamespace);
        }

        public override int GetHashCode()
        {
            return (NamespaceName).GetHashCode();
        }
    }

    public class OvfXmlFormat : OvfInvalidPackage, IEquatable<OvfXmlFormat>
    {
        public string Description { get; set; }

        public bool Equals(OvfXmlFormat ovfXmlFormat)
        {
            return (ovfXmlFormat != null && this.Description == ovfXmlFormat.Description);
        }

        public override bool Equals(object ovfXmlFormat)
        {
            return Equals(ovfXmlFormat as OvfXmlFormat);
        }

        public override int GetHashCode()
        {
            return (Description).GetHashCode();
        }
    }

    public class ParaVirtualSCSIController : VirtualSCSIController, IEquatable<ParaVirtualSCSIController>
    {
        public bool Equals(ParaVirtualSCSIController paraVirtualSCSIController)
        {
            return (paraVirtualSCSIController != null && base.Equals(paraVirtualSCSIController));
        }

        public override bool Equals(object paraVirtualSCSIController)
        {
            return Equals(paraVirtualSCSIController as ParaVirtualSCSIController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ParaVirtualSCSIControllerOption : VirtualSCSIControllerOption, IEquatable<ParaVirtualSCSIControllerOption>
    {
        public bool Equals(ParaVirtualSCSIControllerOption paraVirtualSCSIControllerOption)
        {
            return (paraVirtualSCSIControllerOption != null && base.Equals(paraVirtualSCSIControllerOption));
        }

        public override bool Equals(object paraVirtualSCSIControllerOption)
        {
            return Equals(paraVirtualSCSIControllerOption as ParaVirtualSCSIControllerOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PassiveNodeDeploymentSpec : NodeDeploymentSpec, IEquatable<PassiveNodeDeploymentSpec>
    {
        public CustomizationIPSettings FailoverIpSettings { get; set; }

        public new PassiveNodeDeploymentSpec_LinkedView LinkedView { get; set; }

        public bool Equals(PassiveNodeDeploymentSpec passiveNodeDeploymentSpec)
        {
            return (passiveNodeDeploymentSpec != null && ((this.FailoverIpSettings == null && passiveNodeDeploymentSpec.FailoverIpSettings == null) || (this.FailoverIpSettings != null && this.FailoverIpSettings.Equals(passiveNodeDeploymentSpec.FailoverIpSettings))) && ((this.LinkedView == null && passiveNodeDeploymentSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(passiveNodeDeploymentSpec.LinkedView))));
        }

        public override bool Equals(object passiveNodeDeploymentSpec)
        {
            return Equals(passiveNodeDeploymentSpec as PassiveNodeDeploymentSpec);
        }

        public override int GetHashCode()
        {
            return (FailoverIpSettings + "_" + LinkedView).GetHashCode();
        }
    }

    public class PassiveNodeDeploymentSpec_LinkedView : NodeDeploymentSpec_LinkedView, IEquatable<PassiveNodeDeploymentSpec_LinkedView>
    {
        public bool Equals(PassiveNodeDeploymentSpec_LinkedView passiveNodeDeploymentSpec_LinkedView)
        {
            return (passiveNodeDeploymentSpec_LinkedView != null && base.Equals(passiveNodeDeploymentSpec_LinkedView));
        }

        public override bool Equals(object passiveNodeDeploymentSpec_LinkedView)
        {
            return Equals(passiveNodeDeploymentSpec_LinkedView as PassiveNodeDeploymentSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PassiveNodeNetworkSpec : NodeNetworkSpec, IEquatable<PassiveNodeNetworkSpec>
    {
        public CustomizationIPSettings FailoverIpSettings { get; set; }

        public bool Equals(PassiveNodeNetworkSpec passiveNodeNetworkSpec)
        {
            return (passiveNodeNetworkSpec != null && ((this.FailoverIpSettings == null && passiveNodeNetworkSpec.FailoverIpSettings == null) || (this.FailoverIpSettings != null && this.FailoverIpSettings.Equals(passiveNodeNetworkSpec.FailoverIpSettings))));
        }

        public override bool Equals(object passiveNodeNetworkSpec)
        {
            return Equals(passiveNodeNetworkSpec as PassiveNodeNetworkSpec);
        }

        public override int GetHashCode()
        {
            return (FailoverIpSettings).GetHashCode();
        }
    }

    public class PasswordField : DynamicData, IEquatable<PasswordField>
    {
        public string Value { get; set; }

        public bool Equals(PasswordField passwordField)
        {
            return (passwordField != null && this.Value == passwordField.Value);
        }

        public override bool Equals(object passwordField)
        {
            return Equals(passwordField as PasswordField);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class PatchAlreadyInstalled : PatchNotApplicable, IEquatable<PatchAlreadyInstalled>
    {
        public bool Equals(PatchAlreadyInstalled patchAlreadyInstalled)
        {
            return (patchAlreadyInstalled != null && base.Equals(patchAlreadyInstalled));
        }

        public override bool Equals(object patchAlreadyInstalled)
        {
            return Equals(patchAlreadyInstalled as PatchAlreadyInstalled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PatchBinariesNotFound : VimFault, IEquatable<PatchBinariesNotFound>
    {
        public string PatchID { get; set; }

        public string[] Binary { get; set; }

        public bool Equals(PatchBinariesNotFound patchBinariesNotFound)
        {
            return (patchBinariesNotFound != null && this.PatchID == patchBinariesNotFound.PatchID && ((this.Binary == null && patchBinariesNotFound.Binary == null) || (this.Binary != null && patchBinariesNotFound.Binary != null && Enumerable.SequenceEqual(this.Binary, patchBinariesNotFound.Binary))));
        }

        public override bool Equals(object patchBinariesNotFound)
        {
            return Equals(patchBinariesNotFound as PatchBinariesNotFound);
        }

        public override int GetHashCode()
        {
            return (PatchID + "_" + Binary).GetHashCode();
        }
    }

    public class PatchInstallFailed : PlatformConfigFault, IEquatable<PatchInstallFailed>
    {
        public bool RolledBack { get; set; }

        public bool Equals(PatchInstallFailed patchInstallFailed)
        {
            return (patchInstallFailed != null && this.RolledBack == patchInstallFailed.RolledBack);
        }

        public override bool Equals(object patchInstallFailed)
        {
            return Equals(patchInstallFailed as PatchInstallFailed);
        }

        public override int GetHashCode()
        {
            return (RolledBack).GetHashCode();
        }
    }

    public class PatchIntegrityError : PlatformConfigFault, IEquatable<PatchIntegrityError>
    {
        public bool Equals(PatchIntegrityError patchIntegrityError)
        {
            return (patchIntegrityError != null && base.Equals(patchIntegrityError));
        }

        public override bool Equals(object patchIntegrityError)
        {
            return Equals(patchIntegrityError as PatchIntegrityError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PatchMetadataCorrupted : PatchMetadataInvalid, IEquatable<PatchMetadataCorrupted>
    {
        public bool Equals(PatchMetadataCorrupted patchMetadataCorrupted)
        {
            return (patchMetadataCorrupted != null && base.Equals(patchMetadataCorrupted));
        }

        public override bool Equals(object patchMetadataCorrupted)
        {
            return Equals(patchMetadataCorrupted as PatchMetadataCorrupted);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PatchMetadataInvalid : VimFault, IEquatable<PatchMetadataInvalid>
    {
        public string PatchID { get; set; }

        public string[] MetaData { get; set; }

        public bool Equals(PatchMetadataInvalid patchMetadataInvalid)
        {
            return (patchMetadataInvalid != null && this.PatchID == patchMetadataInvalid.PatchID && ((this.MetaData == null && patchMetadataInvalid.MetaData == null) || (this.MetaData != null && patchMetadataInvalid.MetaData != null && Enumerable.SequenceEqual(this.MetaData, patchMetadataInvalid.MetaData))));
        }

        public override bool Equals(object patchMetadataInvalid)
        {
            return Equals(patchMetadataInvalid as PatchMetadataInvalid);
        }

        public override int GetHashCode()
        {
            return (PatchID + "_" + MetaData).GetHashCode();
        }
    }

    public class PatchMetadataNotFound : PatchMetadataInvalid, IEquatable<PatchMetadataNotFound>
    {
        public bool Equals(PatchMetadataNotFound patchMetadataNotFound)
        {
            return (patchMetadataNotFound != null && base.Equals(patchMetadataNotFound));
        }

        public override bool Equals(object patchMetadataNotFound)
        {
            return Equals(patchMetadataNotFound as PatchMetadataNotFound);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PatchMissingDependencies : PatchNotApplicable, IEquatable<PatchMissingDependencies>
    {
        public string[] PrerequisitePatch { get; set; }

        public string[] PrerequisiteLib { get; set; }

        public bool Equals(PatchMissingDependencies patchMissingDependencies)
        {
            return (patchMissingDependencies != null && ((this.PrerequisitePatch == null && patchMissingDependencies.PrerequisitePatch == null) || (this.PrerequisitePatch != null && patchMissingDependencies.PrerequisitePatch != null && Enumerable.SequenceEqual(this.PrerequisitePatch, patchMissingDependencies.PrerequisitePatch))) && ((this.PrerequisiteLib == null && patchMissingDependencies.PrerequisiteLib == null) || (this.PrerequisiteLib != null && patchMissingDependencies.PrerequisiteLib != null && Enumerable.SequenceEqual(this.PrerequisiteLib, patchMissingDependencies.PrerequisiteLib))));
        }

        public override bool Equals(object patchMissingDependencies)
        {
            return Equals(patchMissingDependencies as PatchMissingDependencies);
        }

        public override int GetHashCode()
        {
            return (PrerequisitePatch + "_" + PrerequisiteLib).GetHashCode();
        }
    }

    public class PatchNotApplicable : VimFault, IEquatable<PatchNotApplicable>
    {
        public string PatchID { get; set; }

        public bool Equals(PatchNotApplicable patchNotApplicable)
        {
            return (patchNotApplicable != null && this.PatchID == patchNotApplicable.PatchID);
        }

        public override bool Equals(object patchNotApplicable)
        {
            return Equals(patchNotApplicable as PatchNotApplicable);
        }

        public override int GetHashCode()
        {
            return (PatchID).GetHashCode();
        }
    }

    public class PatchSuperseded : PatchNotApplicable, IEquatable<PatchSuperseded>
    {
        public string[] Supersede { get; set; }

        public bool Equals(PatchSuperseded patchSuperseded)
        {
            return (patchSuperseded != null && ((this.Supersede == null && patchSuperseded.Supersede == null) || (this.Supersede != null && patchSuperseded.Supersede != null && Enumerable.SequenceEqual(this.Supersede, patchSuperseded.Supersede))));
        }

        public override bool Equals(object patchSuperseded)
        {
            return Equals(patchSuperseded as PatchSuperseded);
        }

        public override int GetHashCode()
        {
            return (Supersede).GetHashCode();
        }
    }

    public class PerfCompositeMetric : DynamicData, IEquatable<PerfCompositeMetric>
    {
        public PerfEntityMetricBase Entity { get; set; }

        public PerfEntityMetricBase[] ChildEntity { get; set; }

        public bool Equals(PerfCompositeMetric perfCompositeMetric)
        {
            return (perfCompositeMetric != null && ((this.Entity == null && perfCompositeMetric.Entity == null) || (this.Entity != null && this.Entity.Equals(perfCompositeMetric.Entity))) && ((this.ChildEntity == null && perfCompositeMetric.ChildEntity == null) || (this.ChildEntity != null && perfCompositeMetric.ChildEntity != null && Enumerable.SequenceEqual(this.ChildEntity, perfCompositeMetric.ChildEntity))));
        }

        public override bool Equals(object perfCompositeMetric)
        {
            return Equals(perfCompositeMetric as PerfCompositeMetric);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + ChildEntity).GetHashCode();
        }
    }

    public class PerfCounterInfo : DynamicData, IEquatable<PerfCounterInfo>
    {
        public int Key { get; set; }

        public ElementDescription NameInfo { get; set; }

        public ElementDescription GroupInfo { get; set; }

        public ElementDescription UnitInfo { get; set; }

        public PerfSummaryType RollupType { get; set; }

        public PerfStatsType StatsType { get; set; }

        public int? Level { get; set; }

        public int? PerDeviceLevel { get; set; }

        public int[] AssociatedCounterId { get; set; }

        public bool Equals(PerfCounterInfo perfCounterInfo)
        {
            return (perfCounterInfo != null && this.Key == perfCounterInfo.Key && ((this.NameInfo == null && perfCounterInfo.NameInfo == null) || (this.NameInfo != null && this.NameInfo.Equals(perfCounterInfo.NameInfo))) && ((this.GroupInfo == null && perfCounterInfo.GroupInfo == null) || (this.GroupInfo != null && this.GroupInfo.Equals(perfCounterInfo.GroupInfo))) && ((this.UnitInfo == null && perfCounterInfo.UnitInfo == null) || (this.UnitInfo != null && this.UnitInfo.Equals(perfCounterInfo.UnitInfo))) && this.RollupType == perfCounterInfo.RollupType && this.StatsType == perfCounterInfo.StatsType && ((this.Level == null && perfCounterInfo.Level == null) || (this.Level != null && this.Level.Equals(perfCounterInfo.Level))) && ((this.PerDeviceLevel == null && perfCounterInfo.PerDeviceLevel == null) || (this.PerDeviceLevel != null && this.PerDeviceLevel.Equals(perfCounterInfo.PerDeviceLevel))) && ((this.AssociatedCounterId == null && perfCounterInfo.AssociatedCounterId == null) || (this.AssociatedCounterId != null && perfCounterInfo.AssociatedCounterId != null && Enumerable.SequenceEqual(this.AssociatedCounterId, perfCounterInfo.AssociatedCounterId))));
        }

        public override bool Equals(object perfCounterInfo)
        {
            return Equals(perfCounterInfo as PerfCounterInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + NameInfo + "_" + GroupInfo + "_" + UnitInfo + "_" + RollupType + "_" + StatsType + "_" + Level + "_" + PerDeviceLevel + "_" + AssociatedCounterId).GetHashCode();
        }
    }

    public class PerfEntityMetric : PerfEntityMetricBase, IEquatable<PerfEntityMetric>
    {
        public PerfSampleInfo[] SampleInfo { get; set; }

        public PerfMetricSeries[] Value { get; set; }

        public bool Equals(PerfEntityMetric perfEntityMetric)
        {
            return (perfEntityMetric != null && ((this.SampleInfo == null && perfEntityMetric.SampleInfo == null) || (this.SampleInfo != null && perfEntityMetric.SampleInfo != null && Enumerable.SequenceEqual(this.SampleInfo, perfEntityMetric.SampleInfo))) && ((this.Value == null && perfEntityMetric.Value == null) || (this.Value != null && perfEntityMetric.Value != null && Enumerable.SequenceEqual(this.Value, perfEntityMetric.Value))));
        }

        public override bool Equals(object perfEntityMetric)
        {
            return Equals(perfEntityMetric as PerfEntityMetric);
        }

        public override int GetHashCode()
        {
            return (SampleInfo + "_" + Value).GetHashCode();
        }
    }

    public class PerfEntityMetricBase : DynamicData, IEquatable<PerfEntityMetricBase>
    {
        public ManagedObjectReference Entity { get; set; }

        public bool Equals(PerfEntityMetricBase perfEntityMetricBase)
        {
            return (perfEntityMetricBase != null && ((this.Entity == null && perfEntityMetricBase.Entity == null) || (this.Entity != null && this.Entity.Equals(perfEntityMetricBase.Entity))));
        }

        public override bool Equals(object perfEntityMetricBase)
        {
            return Equals(perfEntityMetricBase as PerfEntityMetricBase);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class PerfEntityMetricCSV : PerfEntityMetricBase, IEquatable<PerfEntityMetricCSV>
    {
        public string SampleInfoCSV { get; set; }

        public PerfMetricSeriesCSV[] Value { get; set; }

        public bool Equals(PerfEntityMetricCSV perfEntityMetricCSV)
        {
            return (perfEntityMetricCSV != null && this.SampleInfoCSV == perfEntityMetricCSV.SampleInfoCSV && ((this.Value == null && perfEntityMetricCSV.Value == null) || (this.Value != null && perfEntityMetricCSV.Value != null && Enumerable.SequenceEqual(this.Value, perfEntityMetricCSV.Value))));
        }

        public override bool Equals(object perfEntityMetricCSV)
        {
            return Equals(perfEntityMetricCSV as PerfEntityMetricCSV);
        }

        public override int GetHashCode()
        {
            return (SampleInfoCSV + "_" + Value).GetHashCode();
        }
    }

    public class PerfInterval : DynamicData, IEquatable<PerfInterval>
    {
        public int Key { get; set; }

        public int SamplingPeriod { get; set; }

        public string Name { get; set; }

        public int Length { get; set; }

        public int? Level { get; set; }

        public bool Enabled { get; set; }

        public bool Equals(PerfInterval perfInterval)
        {
            return (perfInterval != null && this.Key == perfInterval.Key && this.SamplingPeriod == perfInterval.SamplingPeriod && this.Name == perfInterval.Name && this.Length == perfInterval.Length && ((this.Level == null && perfInterval.Level == null) || (this.Level != null && this.Level.Equals(perfInterval.Level))) && this.Enabled == perfInterval.Enabled);
        }

        public override bool Equals(object perfInterval)
        {
            return Equals(perfInterval as PerfInterval);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + SamplingPeriod + "_" + Name + "_" + Length + "_" + Level + "_" + Enabled).GetHashCode();
        }
    }

    public class PerfMetricId : DynamicData, IEquatable<PerfMetricId>
    {
        public int CounterId { get; set; }

        public string Instance { get; set; }

        public bool Equals(PerfMetricId perfMetricId)
        {
            return (perfMetricId != null && this.CounterId == perfMetricId.CounterId && this.Instance == perfMetricId.Instance);
        }

        public override bool Equals(object perfMetricId)
        {
            return Equals(perfMetricId as PerfMetricId);
        }

        public override int GetHashCode()
        {
            return (CounterId + "_" + Instance).GetHashCode();
        }
    }

    public class PerfMetricIntSeries : PerfMetricSeries, IEquatable<PerfMetricIntSeries>
    {
        public long[] Value { get; set; }

        public bool Equals(PerfMetricIntSeries perfMetricIntSeries)
        {
            return (perfMetricIntSeries != null && ((this.Value == null && perfMetricIntSeries.Value == null) || (this.Value != null && perfMetricIntSeries.Value != null && Enumerable.SequenceEqual(this.Value, perfMetricIntSeries.Value))));
        }

        public override bool Equals(object perfMetricIntSeries)
        {
            return Equals(perfMetricIntSeries as PerfMetricIntSeries);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class PerfMetricSeries : DynamicData, IEquatable<PerfMetricSeries>
    {
        public PerfMetricId Id { get; set; }

        public bool Equals(PerfMetricSeries perfMetricSeries)
        {
            return (perfMetricSeries != null && ((this.Id == null && perfMetricSeries.Id == null) || (this.Id != null && this.Id.Equals(perfMetricSeries.Id))));
        }

        public override bool Equals(object perfMetricSeries)
        {
            return Equals(perfMetricSeries as PerfMetricSeries);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class PerfMetricSeriesCSV : PerfMetricSeries, IEquatable<PerfMetricSeriesCSV>
    {
        public string Value { get; set; }

        public bool Equals(PerfMetricSeriesCSV perfMetricSeriesCSV)
        {
            return (perfMetricSeriesCSV != null && this.Value == perfMetricSeriesCSV.Value);
        }

        public override bool Equals(object perfMetricSeriesCSV)
        {
            return Equals(perfMetricSeriesCSV as PerfMetricSeriesCSV);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class PerformanceDescription : DynamicData, IEquatable<PerformanceDescription>
    {
        public ElementDescription[] CounterType { get; set; }

        public ElementDescription[] StatsType { get; set; }

        public bool Equals(PerformanceDescription performanceDescription)
        {
            return (performanceDescription != null && ((this.CounterType == null && performanceDescription.CounterType == null) || (this.CounterType != null && performanceDescription.CounterType != null && Enumerable.SequenceEqual(this.CounterType, performanceDescription.CounterType))) && ((this.StatsType == null && performanceDescription.StatsType == null) || (this.StatsType != null && performanceDescription.StatsType != null && Enumerable.SequenceEqual(this.StatsType, performanceDescription.StatsType))));
        }

        public override bool Equals(object performanceDescription)
        {
            return Equals(performanceDescription as PerformanceDescription);
        }

        public override int GetHashCode()
        {
            return (CounterType + "_" + StatsType).GetHashCode();
        }
    }

    public class PerformanceManager : ViewBase, IEquatable<PerformanceManager>
    {
        public PerformanceDescription Description { get; set; }

        public PerfInterval[] HistoricalInterval { get; set; }

        public PerfCounterInfo[] PerfCounter { get; set; }

        public PerfProviderSummary QueryPerfProviderSummary(ManagedObjectReference entity)
        {
            return default(PerfProviderSummary);
        }

        public PerfMetricId[] QueryAvailablePerfMetric(ManagedObjectReference entity, DateTime? beginTime, DateTime? endTime, int? intervalId)
        {
            return default(PerfMetricId[]);
        }

        public PerfCounterInfo[] QueryPerfCounter(int[] counterId)
        {
            return default(PerfCounterInfo[]);
        }

        public PerfCounterInfo[] QueryPerfCounterByLevel(int level)
        {
            return default(PerfCounterInfo[]);
        }

        public PerfEntityMetricBase[] QueryPerf(PerfQuerySpec[] querySpec)
        {
            return default(PerfEntityMetricBase[]);
        }

        public PerfCompositeMetric QueryPerfComposite(PerfQuerySpec querySpec)
        {
            return default(PerfCompositeMetric);
        }

        public void CreatePerfInterval(PerfInterval intervalId)
        {
        }

        public void RemovePerfInterval(int samplePeriod)
        {
        }

        public void UpdatePerfInterval(PerfInterval interval)
        {
        }

        public void UpdateCounterLevelMapping(PerformanceManagerCounterLevelMapping[] counterLevelMap)
        {
        }

        public void ResetCounterLevelMapping(int[] counters)
        {
        }

        public bool Equals(PerformanceManager performanceManager)
        {
            return (performanceManager != null && ((this.Description == null && performanceManager.Description == null) || (this.Description != null && this.Description.Equals(performanceManager.Description))) && ((this.HistoricalInterval == null && performanceManager.HistoricalInterval == null) || (this.HistoricalInterval != null && performanceManager.HistoricalInterval != null && Enumerable.SequenceEqual(this.HistoricalInterval, performanceManager.HistoricalInterval))) && ((this.PerfCounter == null && performanceManager.PerfCounter == null) || (this.PerfCounter != null && performanceManager.PerfCounter != null && Enumerable.SequenceEqual(this.PerfCounter, performanceManager.PerfCounter))));
        }

        public override bool Equals(object performanceManager)
        {
            return Equals(performanceManager as PerformanceManager);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + HistoricalInterval + "_" + PerfCounter).GetHashCode();
        }
    }

    public class PerformanceManagerCounterLevelMapping : DynamicData, IEquatable<PerformanceManagerCounterLevelMapping>
    {
        public int CounterId { get; set; }

        public int? AggregateLevel { get; set; }

        public int? PerDeviceLevel { get; set; }

        public bool Equals(PerformanceManagerCounterLevelMapping performanceManagerCounterLevelMapping)
        {
            return (performanceManagerCounterLevelMapping != null && this.CounterId == performanceManagerCounterLevelMapping.CounterId && ((this.AggregateLevel == null && performanceManagerCounterLevelMapping.AggregateLevel == null) || (this.AggregateLevel != null && this.AggregateLevel.Equals(performanceManagerCounterLevelMapping.AggregateLevel))) && ((this.PerDeviceLevel == null && performanceManagerCounterLevelMapping.PerDeviceLevel == null) || (this.PerDeviceLevel != null && this.PerDeviceLevel.Equals(performanceManagerCounterLevelMapping.PerDeviceLevel))));
        }

        public override bool Equals(object performanceManagerCounterLevelMapping)
        {
            return Equals(performanceManagerCounterLevelMapping as PerformanceManagerCounterLevelMapping);
        }

        public override int GetHashCode()
        {
            return (CounterId + "_" + AggregateLevel + "_" + PerDeviceLevel).GetHashCode();
        }
    }

    public class PerformanceStatisticsDescription : DynamicData, IEquatable<PerformanceStatisticsDescription>
    {
        public PerfInterval[] Intervals { get; set; }

        public bool Equals(PerformanceStatisticsDescription performanceStatisticsDescription)
        {
            return (performanceStatisticsDescription != null && ((this.Intervals == null && performanceStatisticsDescription.Intervals == null) || (this.Intervals != null && performanceStatisticsDescription.Intervals != null && Enumerable.SequenceEqual(this.Intervals, performanceStatisticsDescription.Intervals))));
        }

        public override bool Equals(object performanceStatisticsDescription)
        {
            return Equals(performanceStatisticsDescription as PerformanceStatisticsDescription);
        }

        public override int GetHashCode()
        {
            return (Intervals).GetHashCode();
        }
    }

    public class PerfProviderSummary : DynamicData, IEquatable<PerfProviderSummary>
    {
        public ManagedObjectReference Entity { get; set; }

        public bool CurrentSupported { get; set; }

        public bool SummarySupported { get; set; }

        public int? RefreshRate { get; set; }

        public bool Equals(PerfProviderSummary perfProviderSummary)
        {
            return (perfProviderSummary != null && ((this.Entity == null && perfProviderSummary.Entity == null) || (this.Entity != null && this.Entity.Equals(perfProviderSummary.Entity))) && this.CurrentSupported == perfProviderSummary.CurrentSupported && this.SummarySupported == perfProviderSummary.SummarySupported && ((this.RefreshRate == null && perfProviderSummary.RefreshRate == null) || (this.RefreshRate != null && this.RefreshRate.Equals(perfProviderSummary.RefreshRate))));
        }

        public override bool Equals(object perfProviderSummary)
        {
            return Equals(perfProviderSummary as PerfProviderSummary);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + CurrentSupported + "_" + SummarySupported + "_" + RefreshRate).GetHashCode();
        }
    }

    public class PerfQuerySpec : DynamicData, IEquatable<PerfQuerySpec>
    {
        public ManagedObjectReference Entity { get; set; }

        public DateTime? StartTime { get; set; }

        public DateTime? EndTime { get; set; }

        public int? MaxSample { get; set; }

        public PerfMetricId[] MetricId { get; set; }

        public int? IntervalId { get; set; }

        public string Format { get; set; }

        public bool Equals(PerfQuerySpec perfQuerySpec)
        {
            return (perfQuerySpec != null && ((this.Entity == null && perfQuerySpec.Entity == null) || (this.Entity != null && this.Entity.Equals(perfQuerySpec.Entity))) && ((this.StartTime == null && perfQuerySpec.StartTime == null) || (this.StartTime != null && this.StartTime.Equals(perfQuerySpec.StartTime))) && ((this.EndTime == null && perfQuerySpec.EndTime == null) || (this.EndTime != null && this.EndTime.Equals(perfQuerySpec.EndTime))) && ((this.MaxSample == null && perfQuerySpec.MaxSample == null) || (this.MaxSample != null && this.MaxSample.Equals(perfQuerySpec.MaxSample))) && ((this.MetricId == null && perfQuerySpec.MetricId == null) || (this.MetricId != null && perfQuerySpec.MetricId != null && Enumerable.SequenceEqual(this.MetricId, perfQuerySpec.MetricId))) && ((this.IntervalId == null && perfQuerySpec.IntervalId == null) || (this.IntervalId != null && this.IntervalId.Equals(perfQuerySpec.IntervalId))) && this.Format == perfQuerySpec.Format);
        }

        public override bool Equals(object perfQuerySpec)
        {
            return Equals(perfQuerySpec as PerfQuerySpec);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + StartTime + "_" + EndTime + "_" + MaxSample + "_" + MetricId + "_" + IntervalId + "_" + Format).GetHashCode();
        }
    }

    public class PerfSampleInfo : DynamicData, IEquatable<PerfSampleInfo>
    {
        public DateTime Timestamp { get; set; }

        public int Interval { get; set; }

        public bool Equals(PerfSampleInfo perfSampleInfo)
        {
            return (perfSampleInfo != null && this.Timestamp == perfSampleInfo.Timestamp && this.Interval == perfSampleInfo.Interval);
        }

        public override bool Equals(object perfSampleInfo)
        {
            return Equals(perfSampleInfo as PerfSampleInfo);
        }

        public override int GetHashCode()
        {
            return (Timestamp + "_" + Interval).GetHashCode();
        }
    }

    public class Permission : DynamicData, IEquatable<Permission>
    {
        public ManagedObjectReference Entity { get; set; }

        public string Principal { get; set; }

        public bool Group { get; set; }

        public int RoleId { get; set; }

        public bool Propagate { get; set; }

        public Permission_LinkedView LinkedView { get; set; }

        public bool Equals(Permission permission)
        {
            return (permission != null && ((this.Entity == null && permission.Entity == null) || (this.Entity != null && this.Entity.Equals(permission.Entity))) && this.Principal == permission.Principal && this.Group == permission.Group && this.RoleId == permission.RoleId && this.Propagate == permission.Propagate && ((this.LinkedView == null && permission.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(permission.LinkedView))));
        }

        public override bool Equals(object permission)
        {
            return Equals(permission as Permission);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Principal + "_" + Group + "_" + RoleId + "_" + Propagate + "_" + LinkedView).GetHashCode();
        }
    }

    public class Permission_LinkedView : IEquatable<Permission_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(Permission_LinkedView permission_LinkedView)
        {
            return (permission_LinkedView != null && ((this.Entity == null && permission_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(permission_LinkedView.Entity))));
        }

        public override bool Equals(object permission_LinkedView)
        {
            return Equals(permission_LinkedView as Permission_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class PermissionAddedEvent : PermissionEvent, IEquatable<PermissionAddedEvent>
    {
        public RoleEventArgument Role { get; set; }

        public bool Propagate { get; set; }

        public bool Equals(PermissionAddedEvent permissionAddedEvent)
        {
            return (permissionAddedEvent != null && ((this.Role == null && permissionAddedEvent.Role == null) || (this.Role != null && this.Role.Equals(permissionAddedEvent.Role))) && this.Propagate == permissionAddedEvent.Propagate);
        }

        public override bool Equals(object permissionAddedEvent)
        {
            return Equals(permissionAddedEvent as PermissionAddedEvent);
        }

        public override int GetHashCode()
        {
            return (Role + "_" + Propagate).GetHashCode();
        }
    }

    public class PermissionEvent : AuthorizationEvent, IEquatable<PermissionEvent>
    {
        public ManagedEntityEventArgument Entity { get; set; }

        public string Principal { get; set; }

        public bool Group { get; set; }

        public bool Equals(PermissionEvent permissionEvent)
        {
            return (permissionEvent != null && ((this.Entity == null && permissionEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(permissionEvent.Entity))) && this.Principal == permissionEvent.Principal && this.Group == permissionEvent.Group);
        }

        public override bool Equals(object permissionEvent)
        {
            return Equals(permissionEvent as PermissionEvent);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Principal + "_" + Group).GetHashCode();
        }
    }

    public class PermissionProfile : ApplyProfile, IEquatable<PermissionProfile>
    {
        public string Key { get; set; }

        public bool Equals(PermissionProfile permissionProfile)
        {
            return (permissionProfile != null && this.Key == permissionProfile.Key);
        }

        public override bool Equals(object permissionProfile)
        {
            return Equals(permissionProfile as PermissionProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class PermissionRemovedEvent : PermissionEvent, IEquatable<PermissionRemovedEvent>
    {
        public bool Equals(PermissionRemovedEvent permissionRemovedEvent)
        {
            return (permissionRemovedEvent != null && base.Equals(permissionRemovedEvent));
        }

        public override bool Equals(object permissionRemovedEvent)
        {
            return Equals(permissionRemovedEvent as PermissionRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PermissionUpdatedEvent : PermissionEvent, IEquatable<PermissionUpdatedEvent>
    {
        public RoleEventArgument Role { get; set; }

        public bool Propagate { get; set; }

        public RoleEventArgument PrevRole { get; set; }

        public bool? PrevPropagate { get; set; }

        public bool Equals(PermissionUpdatedEvent permissionUpdatedEvent)
        {
            return (permissionUpdatedEvent != null && ((this.Role == null && permissionUpdatedEvent.Role == null) || (this.Role != null && this.Role.Equals(permissionUpdatedEvent.Role))) && this.Propagate == permissionUpdatedEvent.Propagate && ((this.PrevRole == null && permissionUpdatedEvent.PrevRole == null) || (this.PrevRole != null && this.PrevRole.Equals(permissionUpdatedEvent.PrevRole))) && ((this.PrevPropagate == null && permissionUpdatedEvent.PrevPropagate == null) || (this.PrevPropagate != null && this.PrevPropagate.Equals(permissionUpdatedEvent.PrevPropagate))));
        }

        public override bool Equals(object permissionUpdatedEvent)
        {
            return Equals(permissionUpdatedEvent as PermissionUpdatedEvent);
        }

        public override int GetHashCode()
        {
            return (Role + "_" + Propagate + "_" + PrevRole + "_" + PrevPropagate).GetHashCode();
        }
    }

    public class PhysCompatRDMNotSupported : RDMNotSupported, IEquatable<PhysCompatRDMNotSupported>
    {
        public bool Equals(PhysCompatRDMNotSupported physCompatRDMNotSupported)
        {
            return (physCompatRDMNotSupported != null && base.Equals(physCompatRDMNotSupported));
        }

        public override bool Equals(object physCompatRDMNotSupported)
        {
            return Equals(physCompatRDMNotSupported as PhysCompatRDMNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class PhysicalNic : DynamicData, IEquatable<PhysicalNic>
    {
        public string Key { get; set; }

        public string Device { get; set; }

        public string Pci { get; set; }

        public string Driver { get; set; }

        public PhysicalNicLinkInfo LinkSpeed { get; set; }

        public PhysicalNicLinkInfo[] ValidLinkSpecification { get; set; }

        public PhysicalNicSpec Spec { get; set; }

        public bool WakeOnLanSupported { get; set; }

        public string Mac { get; set; }

        public FcoeConfig FcoeConfiguration { get; set; }

        public bool? VmDirectPathGen2Supported { get; set; }

        public string VmDirectPathGen2SupportedMode { get; set; }

        public bool? ResourcePoolSchedulerAllowed { get; set; }

        public string[] ResourcePoolSchedulerDisallowedReason { get; set; }

        public bool? AutoNegotiateSupported { get; set; }

        public bool? EnhancedNetworkingStackSupported { get; set; }

        public bool Equals(PhysicalNic physicalNic)
        {
            return (physicalNic != null && this.Key == physicalNic.Key && this.Device == physicalNic.Device && this.Pci == physicalNic.Pci && this.Driver == physicalNic.Driver && ((this.LinkSpeed == null && physicalNic.LinkSpeed == null) || (this.LinkSpeed != null && this.LinkSpeed.Equals(physicalNic.LinkSpeed))) && ((this.ValidLinkSpecification == null && physicalNic.ValidLinkSpecification == null) || (this.ValidLinkSpecification != null && physicalNic.ValidLinkSpecification != null && Enumerable.SequenceEqual(this.ValidLinkSpecification, physicalNic.ValidLinkSpecification))) && ((this.Spec == null && physicalNic.Spec == null) || (this.Spec != null && this.Spec.Equals(physicalNic.Spec))) && this.WakeOnLanSupported == physicalNic.WakeOnLanSupported && this.Mac == physicalNic.Mac && ((this.FcoeConfiguration == null && physicalNic.FcoeConfiguration == null) || (this.FcoeConfiguration != null && this.FcoeConfiguration.Equals(physicalNic.FcoeConfiguration))) && ((this.VmDirectPathGen2Supported == null && physicalNic.VmDirectPathGen2Supported == null) || (this.VmDirectPathGen2Supported != null && this.VmDirectPathGen2Supported.Equals(physicalNic.VmDirectPathGen2Supported))) && this.VmDirectPathGen2SupportedMode == physicalNic.VmDirectPathGen2SupportedMode && ((this.ResourcePoolSchedulerAllowed == null && physicalNic.ResourcePoolSchedulerAllowed == null) || (this.ResourcePoolSchedulerAllowed != null && this.ResourcePoolSchedulerAllowed.Equals(physicalNic.ResourcePoolSchedulerAllowed))) && ((this.ResourcePoolSchedulerDisallowedReason == null && physicalNic.ResourcePoolSchedulerDisallowedReason == null) || (this.ResourcePoolSchedulerDisallowedReason != null && physicalNic.ResourcePoolSchedulerDisallowedReason != null && Enumerable.SequenceEqual(this.ResourcePoolSchedulerDisallowedReason, physicalNic.ResourcePoolSchedulerDisallowedReason))) && ((this.AutoNegotiateSupported == null && physicalNic.AutoNegotiateSupported == null) || (this.AutoNegotiateSupported != null && this.AutoNegotiateSupported.Equals(physicalNic.AutoNegotiateSupported))) && ((this.EnhancedNetworkingStackSupported == null && physicalNic.EnhancedNetworkingStackSupported == null) || (this.EnhancedNetworkingStackSupported != null && this.EnhancedNetworkingStackSupported.Equals(physicalNic.EnhancedNetworkingStackSupported))));
        }

        public override bool Equals(object physicalNic)
        {
            return Equals(physicalNic as PhysicalNic);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Device + "_" + Pci + "_" + Driver + "_" + LinkSpeed + "_" + ValidLinkSpecification + "_" + Spec + "_" + WakeOnLanSupported + "_" + Mac + "_" + FcoeConfiguration + "_" + VmDirectPathGen2Supported + "_" + VmDirectPathGen2SupportedMode + "_" + ResourcePoolSchedulerAllowed + "_" + ResourcePoolSchedulerDisallowedReason + "_" + AutoNegotiateSupported + "_" + EnhancedNetworkingStackSupported).GetHashCode();
        }
    }

    public class PhysicalNicCdpDeviceCapability : DynamicData, IEquatable<PhysicalNicCdpDeviceCapability>
    {
        public bool Router { get; set; }

        public bool TransparentBridge { get; set; }

        public bool SourceRouteBridge { get; set; }

        public bool NetworkSwitch { get; set; }

        public bool Host { get; set; }

        public bool IgmpEnabled { get; set; }

        public bool Repeater { get; set; }

        public bool Equals(PhysicalNicCdpDeviceCapability physicalNicCdpDeviceCapability)
        {
            return (physicalNicCdpDeviceCapability != null && this.Router == physicalNicCdpDeviceCapability.Router && this.TransparentBridge == physicalNicCdpDeviceCapability.TransparentBridge && this.SourceRouteBridge == physicalNicCdpDeviceCapability.SourceRouteBridge && this.NetworkSwitch == physicalNicCdpDeviceCapability.NetworkSwitch && this.Host == physicalNicCdpDeviceCapability.Host && this.IgmpEnabled == physicalNicCdpDeviceCapability.IgmpEnabled && this.Repeater == physicalNicCdpDeviceCapability.Repeater);
        }

        public override bool Equals(object physicalNicCdpDeviceCapability)
        {
            return Equals(physicalNicCdpDeviceCapability as PhysicalNicCdpDeviceCapability);
        }

        public override int GetHashCode()
        {
            return (Router + "_" + TransparentBridge + "_" + SourceRouteBridge + "_" + NetworkSwitch + "_" + Host + "_" + IgmpEnabled + "_" + Repeater).GetHashCode();
        }
    }

    public class PhysicalNicCdpInfo : DynamicData, IEquatable<PhysicalNicCdpInfo>
    {
        public int? CdpVersion { get; set; }

        public int? Timeout { get; set; }

        public int? Ttl { get; set; }

        public int? Samples { get; set; }

        public string DevId { get; set; }

        public string Address { get; set; }

        public string PortId { get; set; }

        public PhysicalNicCdpDeviceCapability DeviceCapability { get; set; }

        public string SoftwareVersion { get; set; }

        public string HardwarePlatform { get; set; }

        public string IpPrefix { get; set; }

        public int? IpPrefixLen { get; set; }

        public int? Vlan { get; set; }

        public bool? FullDuplex { get; set; }

        public int? Mtu { get; set; }

        public string SystemName { get; set; }

        public string SystemOID { get; set; }

        public string MgmtAddr { get; set; }

        public string Location { get; set; }

        public bool Equals(PhysicalNicCdpInfo physicalNicCdpInfo)
        {
            return (physicalNicCdpInfo != null && ((this.CdpVersion == null && physicalNicCdpInfo.CdpVersion == null) || (this.CdpVersion != null && this.CdpVersion.Equals(physicalNicCdpInfo.CdpVersion))) && ((this.Timeout == null && physicalNicCdpInfo.Timeout == null) || (this.Timeout != null && this.Timeout.Equals(physicalNicCdpInfo.Timeout))) && ((this.Ttl == null && physicalNicCdpInfo.Ttl == null) || (this.Ttl != null && this.Ttl.Equals(physicalNicCdpInfo.Ttl))) && ((this.Samples == null && physicalNicCdpInfo.Samples == null) || (this.Samples != null && this.Samples.Equals(physicalNicCdpInfo.Samples))) && this.DevId == physicalNicCdpInfo.DevId && this.Address == physicalNicCdpInfo.Address && this.PortId == physicalNicCdpInfo.PortId && ((this.DeviceCapability == null && physicalNicCdpInfo.DeviceCapability == null) || (this.DeviceCapability != null && this.DeviceCapability.Equals(physicalNicCdpInfo.DeviceCapability))) && this.SoftwareVersion == physicalNicCdpInfo.SoftwareVersion && this.HardwarePlatform == physicalNicCdpInfo.HardwarePlatform && this.IpPrefix == physicalNicCdpInfo.IpPrefix && ((this.IpPrefixLen == null && physicalNicCdpInfo.IpPrefixLen == null) || (this.IpPrefixLen != null && this.IpPrefixLen.Equals(physicalNicCdpInfo.IpPrefixLen))) && ((this.Vlan == null && physicalNicCdpInfo.Vlan == null) || (this.Vlan != null && this.Vlan.Equals(physicalNicCdpInfo.Vlan))) && ((this.FullDuplex == null && physicalNicCdpInfo.FullDuplex == null) || (this.FullDuplex != null && this.FullDuplex.Equals(physicalNicCdpInfo.FullDuplex))) && ((this.Mtu == null && physicalNicCdpInfo.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(physicalNicCdpInfo.Mtu))) && this.SystemName == physicalNicCdpInfo.SystemName && this.SystemOID == physicalNicCdpInfo.SystemOID && this.MgmtAddr == physicalNicCdpInfo.MgmtAddr && this.Location == physicalNicCdpInfo.Location);
        }

        public override bool Equals(object physicalNicCdpInfo)
        {
            return Equals(physicalNicCdpInfo as PhysicalNicCdpInfo);
        }

        public override int GetHashCode()
        {
            return (CdpVersion + "_" + Timeout + "_" + Ttl + "_" + Samples + "_" + DevId + "_" + Address + "_" + PortId + "_" + DeviceCapability + "_" + SoftwareVersion + "_" + HardwarePlatform + "_" + IpPrefix + "_" + IpPrefixLen + "_" + Vlan + "_" + FullDuplex + "_" + Mtu + "_" + SystemName + "_" + SystemOID + "_" + MgmtAddr + "_" + Location).GetHashCode();
        }
    }

    public class PhysicalNicConfig : DynamicData, IEquatable<PhysicalNicConfig>
    {
        public string Device { get; set; }

        public PhysicalNicSpec Spec { get; set; }

        public bool Equals(PhysicalNicConfig physicalNicConfig)
        {
            return (physicalNicConfig != null && this.Device == physicalNicConfig.Device && ((this.Spec == null && physicalNicConfig.Spec == null) || (this.Spec != null && this.Spec.Equals(physicalNicConfig.Spec))));
        }

        public override bool Equals(object physicalNicConfig)
        {
            return Equals(physicalNicConfig as PhysicalNicConfig);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Spec).GetHashCode();
        }
    }

    public class PhysicalNicHint : DynamicData, IEquatable<PhysicalNicHint>
    {
        public int? VlanId { get; set; }

        public bool Equals(PhysicalNicHint physicalNicHint)
        {
            return (physicalNicHint != null && ((this.VlanId == null && physicalNicHint.VlanId == null) || (this.VlanId != null && this.VlanId.Equals(physicalNicHint.VlanId))));
        }

        public override bool Equals(object physicalNicHint)
        {
            return Equals(physicalNicHint as PhysicalNicHint);
        }

        public override int GetHashCode()
        {
            return (VlanId).GetHashCode();
        }
    }

    public class PhysicalNicHintInfo : DynamicData, IEquatable<PhysicalNicHintInfo>
    {
        public string Device { get; set; }

        public PhysicalNicIpHint[] Subnet { get; set; }

        public PhysicalNicNameHint[] Network { get; set; }

        public PhysicalNicCdpInfo ConnectedSwitchPort { get; set; }

        public LinkLayerDiscoveryProtocolInfo LldpInfo { get; set; }

        public bool Equals(PhysicalNicHintInfo physicalNicHintInfo)
        {
            return (physicalNicHintInfo != null && this.Device == physicalNicHintInfo.Device && ((this.Subnet == null && physicalNicHintInfo.Subnet == null) || (this.Subnet != null && physicalNicHintInfo.Subnet != null && Enumerable.SequenceEqual(this.Subnet, physicalNicHintInfo.Subnet))) && ((this.Network == null && physicalNicHintInfo.Network == null) || (this.Network != null && physicalNicHintInfo.Network != null && Enumerable.SequenceEqual(this.Network, physicalNicHintInfo.Network))) && ((this.ConnectedSwitchPort == null && physicalNicHintInfo.ConnectedSwitchPort == null) || (this.ConnectedSwitchPort != null && this.ConnectedSwitchPort.Equals(physicalNicHintInfo.ConnectedSwitchPort))) && ((this.LldpInfo == null && physicalNicHintInfo.LldpInfo == null) || (this.LldpInfo != null && this.LldpInfo.Equals(physicalNicHintInfo.LldpInfo))));
        }

        public override bool Equals(object physicalNicHintInfo)
        {
            return Equals(physicalNicHintInfo as PhysicalNicHintInfo);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Subnet + "_" + Network + "_" + ConnectedSwitchPort + "_" + LldpInfo).GetHashCode();
        }
    }

    public class PhysicalNicIpHint : PhysicalNicHint, IEquatable<PhysicalNicIpHint>
    {
        public string IpSubnet { get; set; }

        public bool Equals(PhysicalNicIpHint physicalNicIpHint)
        {
            return (physicalNicIpHint != null && this.IpSubnet == physicalNicIpHint.IpSubnet);
        }

        public override bool Equals(object physicalNicIpHint)
        {
            return Equals(physicalNicIpHint as PhysicalNicIpHint);
        }

        public override int GetHashCode()
        {
            return (IpSubnet).GetHashCode();
        }
    }

    public class PhysicalNicLinkInfo : DynamicData, IEquatable<PhysicalNicLinkInfo>
    {
        public int SpeedMb { get; set; }

        public bool Duplex { get; set; }

        public bool Equals(PhysicalNicLinkInfo physicalNicLinkInfo)
        {
            return (physicalNicLinkInfo != null && this.SpeedMb == physicalNicLinkInfo.SpeedMb && this.Duplex == physicalNicLinkInfo.Duplex);
        }

        public override bool Equals(object physicalNicLinkInfo)
        {
            return Equals(physicalNicLinkInfo as PhysicalNicLinkInfo);
        }

        public override int GetHashCode()
        {
            return (SpeedMb + "_" + Duplex).GetHashCode();
        }
    }

    public class PhysicalNicNameHint : PhysicalNicHint, IEquatable<PhysicalNicNameHint>
    {
        public string Network { get; set; }

        public bool Equals(PhysicalNicNameHint physicalNicNameHint)
        {
            return (physicalNicNameHint != null && this.Network == physicalNicNameHint.Network);
        }

        public override bool Equals(object physicalNicNameHint)
        {
            return Equals(physicalNicNameHint as PhysicalNicNameHint);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class PhysicalNicProfile : ApplyProfile, IEquatable<PhysicalNicProfile>
    {
        public string Key { get; set; }

        public bool Equals(PhysicalNicProfile physicalNicProfile)
        {
            return (physicalNicProfile != null && this.Key == physicalNicProfile.Key);
        }

        public override bool Equals(object physicalNicProfile)
        {
            return Equals(physicalNicProfile as PhysicalNicProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class PhysicalNicSpec : DynamicData, IEquatable<PhysicalNicSpec>
    {
        public HostIpConfig Ip { get; set; }

        public PhysicalNicLinkInfo LinkSpeed { get; set; }

        public bool? EnableEnhancedNetworkingStack { get; set; }

        public bool Equals(PhysicalNicSpec physicalNicSpec)
        {
            return (physicalNicSpec != null && ((this.Ip == null && physicalNicSpec.Ip == null) || (this.Ip != null && this.Ip.Equals(physicalNicSpec.Ip))) && ((this.LinkSpeed == null && physicalNicSpec.LinkSpeed == null) || (this.LinkSpeed != null && this.LinkSpeed.Equals(physicalNicSpec.LinkSpeed))) && ((this.EnableEnhancedNetworkingStack == null && physicalNicSpec.EnableEnhancedNetworkingStack == null) || (this.EnableEnhancedNetworkingStack != null && this.EnableEnhancedNetworkingStack.Equals(physicalNicSpec.EnableEnhancedNetworkingStack))));
        }

        public override bool Equals(object physicalNicSpec)
        {
            return Equals(physicalNicSpec as PhysicalNicSpec);
        }

        public override int GetHashCode()
        {
            return (Ip + "_" + LinkSpeed + "_" + EnableEnhancedNetworkingStack).GetHashCode();
        }
    }

    public class PlacementAction : ClusterAction, IEquatable<PlacementAction>
    {
        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference TargetHost { get; set; }

        public VirtualMachineRelocateSpec RelocateSpec { get; set; }

        public PlacementAction_LinkedView LinkedView { get; set; }

        public bool Equals(PlacementAction placementAction)
        {
            return (placementAction != null && ((this.Vm == null && placementAction.Vm == null) || (this.Vm != null && this.Vm.Equals(placementAction.Vm))) && ((this.TargetHost == null && placementAction.TargetHost == null) || (this.TargetHost != null && this.TargetHost.Equals(placementAction.TargetHost))) && ((this.RelocateSpec == null && placementAction.RelocateSpec == null) || (this.RelocateSpec != null && this.RelocateSpec.Equals(placementAction.RelocateSpec))) && ((this.LinkedView == null && placementAction.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(placementAction.LinkedView))));
        }

        public override bool Equals(object placementAction)
        {
            return Equals(placementAction as PlacementAction);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + TargetHost + "_" + RelocateSpec + "_" + LinkedView).GetHashCode();
        }
    }

    public class PlacementAction_LinkedView : IEquatable<PlacementAction_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem TargetHost { get; set; }

        public bool Equals(PlacementAction_LinkedView placementAction_LinkedView)
        {
            return (placementAction_LinkedView != null && ((this.Vm == null && placementAction_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(placementAction_LinkedView.Vm))) && ((this.TargetHost == null && placementAction_LinkedView.TargetHost == null) || (this.TargetHost != null && this.TargetHost.Equals(placementAction_LinkedView.TargetHost))));
        }

        public override bool Equals(object placementAction_LinkedView)
        {
            return Equals(placementAction_LinkedView as PlacementAction_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + TargetHost).GetHashCode();
        }
    }

    public class PlacementAffinityRule : DynamicData, IEquatable<PlacementAffinityRule>
    {
        public string RuleType { get; set; }

        public string RuleScope { get; set; }

        public ManagedObjectReference[] Vms { get; set; }

        public string[] Keys { get; set; }

        public PlacementAffinityRule_LinkedView LinkedView { get; set; }

        public bool Equals(PlacementAffinityRule placementAffinityRule)
        {
            return (placementAffinityRule != null && this.RuleType == placementAffinityRule.RuleType && this.RuleScope == placementAffinityRule.RuleScope && ((this.Vms == null && placementAffinityRule.Vms == null) || (this.Vms != null && placementAffinityRule.Vms != null && Enumerable.SequenceEqual(this.Vms, placementAffinityRule.Vms))) && ((this.Keys == null && placementAffinityRule.Keys == null) || (this.Keys != null && placementAffinityRule.Keys != null && Enumerable.SequenceEqual(this.Keys, placementAffinityRule.Keys))) && ((this.LinkedView == null && placementAffinityRule.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(placementAffinityRule.LinkedView))));
        }

        public override bool Equals(object placementAffinityRule)
        {
            return Equals(placementAffinityRule as PlacementAffinityRule);
        }

        public override int GetHashCode()
        {
            return (RuleType + "_" + RuleScope + "_" + Vms + "_" + Keys + "_" + LinkedView).GetHashCode();
        }
    }

    public class PlacementAffinityRule_LinkedView : IEquatable<PlacementAffinityRule_LinkedView>
    {
        public VirtualMachine[] Vms { get; set; }

        public bool Equals(PlacementAffinityRule_LinkedView placementAffinityRule_LinkedView)
        {
            return (placementAffinityRule_LinkedView != null && ((this.Vms == null && placementAffinityRule_LinkedView.Vms == null) || (this.Vms != null && placementAffinityRule_LinkedView.Vms != null && Enumerable.SequenceEqual(this.Vms, placementAffinityRule_LinkedView.Vms))));
        }

        public override bool Equals(object placementAffinityRule_LinkedView)
        {
            return Equals(placementAffinityRule_LinkedView as PlacementAffinityRule_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vms).GetHashCode();
        }
    }

    public class PlacementRankResult : DynamicData, IEquatable<PlacementRankResult>
    {
        public string Key { get; set; }

        public ManagedObjectReference Candidate { get; set; }

        public long ReservedSpaceMB { get; set; }

        public long UsedSpaceMB { get; set; }

        public long TotalSpaceMB { get; set; }

        public double Utilization { get; set; }

        public LocalizedMethodFault[] Faults { get; set; }

        public PlacementRankResult_LinkedView LinkedView { get; set; }

        public bool Equals(PlacementRankResult placementRankResult)
        {
            return (placementRankResult != null && this.Key == placementRankResult.Key && ((this.Candidate == null && placementRankResult.Candidate == null) || (this.Candidate != null && this.Candidate.Equals(placementRankResult.Candidate))) && this.ReservedSpaceMB == placementRankResult.ReservedSpaceMB && this.UsedSpaceMB == placementRankResult.UsedSpaceMB && this.TotalSpaceMB == placementRankResult.TotalSpaceMB && this.Utilization == placementRankResult.Utilization && ((this.Faults == null && placementRankResult.Faults == null) || (this.Faults != null && placementRankResult.Faults != null && Enumerable.SequenceEqual(this.Faults, placementRankResult.Faults))) && ((this.LinkedView == null && placementRankResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(placementRankResult.LinkedView))));
        }

        public override bool Equals(object placementRankResult)
        {
            return Equals(placementRankResult as PlacementRankResult);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Candidate + "_" + ReservedSpaceMB + "_" + UsedSpaceMB + "_" + TotalSpaceMB + "_" + Utilization + "_" + Faults + "_" + LinkedView).GetHashCode();
        }
    }

    public class PlacementRankResult_LinkedView : IEquatable<PlacementRankResult_LinkedView>
    {
        public ClusterComputeResource Candidate { get; set; }

        public bool Equals(PlacementRankResult_LinkedView placementRankResult_LinkedView)
        {
            return (placementRankResult_LinkedView != null && ((this.Candidate == null && placementRankResult_LinkedView.Candidate == null) || (this.Candidate != null && this.Candidate.Equals(placementRankResult_LinkedView.Candidate))));
        }

        public override bool Equals(object placementRankResult_LinkedView)
        {
            return Equals(placementRankResult_LinkedView as PlacementRankResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Candidate).GetHashCode();
        }
    }

    public class PlacementRankSpec : DynamicData, IEquatable<PlacementRankSpec>
    {
        public PlacementSpec[] Specs { get; set; }

        public ManagedObjectReference[] Clusters { get; set; }

        public PlacementAffinityRule[] Rules { get; set; }

        public StorageDrsPlacementRankVmSpec[] PlacementRankByVm { get; set; }

        public PlacementRankSpec_LinkedView LinkedView { get; set; }

        public bool Equals(PlacementRankSpec placementRankSpec)
        {
            return (placementRankSpec != null && ((this.Specs == null && placementRankSpec.Specs == null) || (this.Specs != null && placementRankSpec.Specs != null && Enumerable.SequenceEqual(this.Specs, placementRankSpec.Specs))) && ((this.Clusters == null && placementRankSpec.Clusters == null) || (this.Clusters != null && placementRankSpec.Clusters != null && Enumerable.SequenceEqual(this.Clusters, placementRankSpec.Clusters))) && ((this.Rules == null && placementRankSpec.Rules == null) || (this.Rules != null && placementRankSpec.Rules != null && Enumerable.SequenceEqual(this.Rules, placementRankSpec.Rules))) && ((this.PlacementRankByVm == null && placementRankSpec.PlacementRankByVm == null) || (this.PlacementRankByVm != null && placementRankSpec.PlacementRankByVm != null && Enumerable.SequenceEqual(this.PlacementRankByVm, placementRankSpec.PlacementRankByVm))) && ((this.LinkedView == null && placementRankSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(placementRankSpec.LinkedView))));
        }

        public override bool Equals(object placementRankSpec)
        {
            return Equals(placementRankSpec as PlacementRankSpec);
        }

        public override int GetHashCode()
        {
            return (Specs + "_" + Clusters + "_" + Rules + "_" + PlacementRankByVm + "_" + LinkedView).GetHashCode();
        }
    }

    public class PlacementRankSpec_LinkedView : IEquatable<PlacementRankSpec_LinkedView>
    {
        public ClusterComputeResource[] Clusters { get; set; }

        public bool Equals(PlacementRankSpec_LinkedView placementRankSpec_LinkedView)
        {
            return (placementRankSpec_LinkedView != null && ((this.Clusters == null && placementRankSpec_LinkedView.Clusters == null) || (this.Clusters != null && placementRankSpec_LinkedView.Clusters != null && Enumerable.SequenceEqual(this.Clusters, placementRankSpec_LinkedView.Clusters))));
        }

        public override bool Equals(object placementRankSpec_LinkedView)
        {
            return Equals(placementRankSpec_LinkedView as PlacementRankSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Clusters).GetHashCode();
        }
    }

    public class PlacementResult : DynamicData, IEquatable<PlacementResult>
    {
        public ClusterRecommendation[] Recommendations { get; set; }

        public ClusterDrsFaults DrsFault { get; set; }

        public bool Equals(PlacementResult placementResult)
        {
            return (placementResult != null && ((this.Recommendations == null && placementResult.Recommendations == null) || (this.Recommendations != null && placementResult.Recommendations != null && Enumerable.SequenceEqual(this.Recommendations, placementResult.Recommendations))) && ((this.DrsFault == null && placementResult.DrsFault == null) || (this.DrsFault != null && this.DrsFault.Equals(placementResult.DrsFault))));
        }

        public override bool Equals(object placementResult)
        {
            return Equals(placementResult as PlacementResult);
        }

        public override int GetHashCode()
        {
            return (Recommendations + "_" + DrsFault).GetHashCode();
        }
    }

    public class PlacementSpec : DynamicData, IEquatable<PlacementSpec>
    {
        public VirtualMachineMovePriority? Priority { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public VirtualMachineConfigSpec ConfigSpec { get; set; }

        public VirtualMachineRelocateSpec RelocateSpec { get; set; }

        public ManagedObjectReference[] Hosts { get; set; }

        public ManagedObjectReference[] Datastores { get; set; }

        public ManagedObjectReference[] StoragePods { get; set; }

        public bool? DisallowPrerequisiteMoves { get; set; }

        public ClusterRuleInfo[] Rules { get; set; }

        public string Key { get; set; }

        public string PlacementType { get; set; }

        public VirtualMachineCloneSpec CloneSpec { get; set; }

        public string CloneName { get; set; }

        public PlacementSpec_LinkedView LinkedView { get; set; }

        public bool Equals(PlacementSpec placementSpec)
        {
            return (placementSpec != null && ((this.Priority == null && placementSpec.Priority == null) || (this.Priority != null && this.Priority.Equals(placementSpec.Priority))) && ((this.Vm == null && placementSpec.Vm == null) || (this.Vm != null && this.Vm.Equals(placementSpec.Vm))) && ((this.ConfigSpec == null && placementSpec.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(placementSpec.ConfigSpec))) && ((this.RelocateSpec == null && placementSpec.RelocateSpec == null) || (this.RelocateSpec != null && this.RelocateSpec.Equals(placementSpec.RelocateSpec))) && ((this.Hosts == null && placementSpec.Hosts == null) || (this.Hosts != null && placementSpec.Hosts != null && Enumerable.SequenceEqual(this.Hosts, placementSpec.Hosts))) && ((this.Datastores == null && placementSpec.Datastores == null) || (this.Datastores != null && placementSpec.Datastores != null && Enumerable.SequenceEqual(this.Datastores, placementSpec.Datastores))) && ((this.StoragePods == null && placementSpec.StoragePods == null) || (this.StoragePods != null && placementSpec.StoragePods != null && Enumerable.SequenceEqual(this.StoragePods, placementSpec.StoragePods))) && ((this.DisallowPrerequisiteMoves == null && placementSpec.DisallowPrerequisiteMoves == null) || (this.DisallowPrerequisiteMoves != null && this.DisallowPrerequisiteMoves.Equals(placementSpec.DisallowPrerequisiteMoves))) && ((this.Rules == null && placementSpec.Rules == null) || (this.Rules != null && placementSpec.Rules != null && Enumerable.SequenceEqual(this.Rules, placementSpec.Rules))) && this.Key == placementSpec.Key && this.PlacementType == placementSpec.PlacementType && ((this.CloneSpec == null && placementSpec.CloneSpec == null) || (this.CloneSpec != null && this.CloneSpec.Equals(placementSpec.CloneSpec))) && this.CloneName == placementSpec.CloneName && ((this.LinkedView == null && placementSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(placementSpec.LinkedView))));
        }

        public override bool Equals(object placementSpec)
        {
            return Equals(placementSpec as PlacementSpec);
        }

        public override int GetHashCode()
        {
            return (Priority + "_" + Vm + "_" + ConfigSpec + "_" + RelocateSpec + "_" + Hosts + "_" + Datastores + "_" + StoragePods + "_" + DisallowPrerequisiteMoves + "_" + Rules + "_" + Key + "_" + PlacementType + "_" + CloneSpec + "_" + CloneName + "_" + LinkedView).GetHashCode();
        }
    }

    public class PlacementSpec_LinkedView : IEquatable<PlacementSpec_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem[] Hosts { get; set; }

        public Datastore[] Datastores { get; set; }

        public StoragePod[] StoragePods { get; set; }

        public bool Equals(PlacementSpec_LinkedView placementSpec_LinkedView)
        {
            return (placementSpec_LinkedView != null && ((this.Vm == null && placementSpec_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(placementSpec_LinkedView.Vm))) && ((this.Hosts == null && placementSpec_LinkedView.Hosts == null) || (this.Hosts != null && placementSpec_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, placementSpec_LinkedView.Hosts))) && ((this.Datastores == null && placementSpec_LinkedView.Datastores == null) || (this.Datastores != null && placementSpec_LinkedView.Datastores != null && Enumerable.SequenceEqual(this.Datastores, placementSpec_LinkedView.Datastores))) && ((this.StoragePods == null && placementSpec_LinkedView.StoragePods == null) || (this.StoragePods != null && placementSpec_LinkedView.StoragePods != null && Enumerable.SequenceEqual(this.StoragePods, placementSpec_LinkedView.StoragePods))));
        }

        public override bool Equals(object placementSpec_LinkedView)
        {
            return Equals(placementSpec_LinkedView as PlacementSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Hosts + "_" + Datastores + "_" + StoragePods).GetHashCode();
        }
    }

    public class PlatformConfigFault : HostConfigFault, IEquatable<PlatformConfigFault>
    {
        public string Text { get; set; }

        public bool Equals(PlatformConfigFault platformConfigFault)
        {
            return (platformConfigFault != null && this.Text == platformConfigFault.Text);
        }

        public override bool Equals(object platformConfigFault)
        {
            return Equals(platformConfigFault as PlatformConfigFault);
        }

        public override int GetHashCode()
        {
            return (Text).GetHashCode();
        }
    }

    public class PMemDatastoreInfo : DatastoreInfo, IEquatable<PMemDatastoreInfo>
    {
        public HostPMemVolume Pmem { get; set; }

        public bool Equals(PMemDatastoreInfo pMemDatastoreInfo)
        {
            return (pMemDatastoreInfo != null && ((this.Pmem == null && pMemDatastoreInfo.Pmem == null) || (this.Pmem != null && this.Pmem.Equals(pMemDatastoreInfo.Pmem))));
        }

        public override bool Equals(object pMemDatastoreInfo)
        {
            return Equals(pMemDatastoreInfo as PMemDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Pmem).GetHashCode();
        }
    }

    public class PnicUplinkProfile : ApplyProfile, IEquatable<PnicUplinkProfile>
    {
        public string Key { get; set; }

        public bool Equals(PnicUplinkProfile pnicUplinkProfile)
        {
            return (pnicUplinkProfile != null && this.Key == pnicUplinkProfile.Key);
        }

        public override bool Equals(object pnicUplinkProfile)
        {
            return Equals(pnicUplinkProfile as PnicUplinkProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class PodDiskLocator : DynamicData, IEquatable<PodDiskLocator>
    {
        public int DiskId { get; set; }

        public string DiskMoveType { get; set; }

        public VirtualDeviceBackingInfo DiskBackingInfo { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public bool Equals(PodDiskLocator podDiskLocator)
        {
            return (podDiskLocator != null && this.DiskId == podDiskLocator.DiskId && this.DiskMoveType == podDiskLocator.DiskMoveType && ((this.DiskBackingInfo == null && podDiskLocator.DiskBackingInfo == null) || (this.DiskBackingInfo != null && this.DiskBackingInfo.Equals(podDiskLocator.DiskBackingInfo))) && ((this.Profile == null && podDiskLocator.Profile == null) || (this.Profile != null && podDiskLocator.Profile != null && Enumerable.SequenceEqual(this.Profile, podDiskLocator.Profile))));
        }

        public override bool Equals(object podDiskLocator)
        {
            return Equals(podDiskLocator as PodDiskLocator);
        }

        public override int GetHashCode()
        {
            return (DiskId + "_" + DiskMoveType + "_" + DiskBackingInfo + "_" + Profile).GetHashCode();
        }
    }

    public class PodStorageDrsEntry : DynamicData, IEquatable<PodStorageDrsEntry>
    {
        public StorageDrsConfigInfo StorageDrsConfig { get; set; }

        public ClusterRecommendation[] Recommendation { get; set; }

        public ClusterDrsFaults[] DrsFault { get; set; }

        public ClusterActionHistory[] ActionHistory { get; set; }

        public bool Equals(PodStorageDrsEntry podStorageDrsEntry)
        {
            return (podStorageDrsEntry != null && ((this.StorageDrsConfig == null && podStorageDrsEntry.StorageDrsConfig == null) || (this.StorageDrsConfig != null && this.StorageDrsConfig.Equals(podStorageDrsEntry.StorageDrsConfig))) && ((this.Recommendation == null && podStorageDrsEntry.Recommendation == null) || (this.Recommendation != null && podStorageDrsEntry.Recommendation != null && Enumerable.SequenceEqual(this.Recommendation, podStorageDrsEntry.Recommendation))) && ((this.DrsFault == null && podStorageDrsEntry.DrsFault == null) || (this.DrsFault != null && podStorageDrsEntry.DrsFault != null && Enumerable.SequenceEqual(this.DrsFault, podStorageDrsEntry.DrsFault))) && ((this.ActionHistory == null && podStorageDrsEntry.ActionHistory == null) || (this.ActionHistory != null && podStorageDrsEntry.ActionHistory != null && Enumerable.SequenceEqual(this.ActionHistory, podStorageDrsEntry.ActionHistory))));
        }

        public override bool Equals(object podStorageDrsEntry)
        {
            return Equals(podStorageDrsEntry as PodStorageDrsEntry);
        }

        public override int GetHashCode()
        {
            return (StorageDrsConfig + "_" + Recommendation + "_" + DrsFault + "_" + ActionHistory).GetHashCode();
        }
    }

    public class PolicyOption : DynamicData, IEquatable<PolicyOption>
    {
        public string Id { get; set; }

        public KeyAnyValue[] Parameter { get; set; }

        public bool Equals(PolicyOption policyOption)
        {
            return (policyOption != null && this.Id == policyOption.Id && ((this.Parameter == null && policyOption.Parameter == null) || (this.Parameter != null && policyOption.Parameter != null && Enumerable.SequenceEqual(this.Parameter, policyOption.Parameter))));
        }

        public override bool Equals(object policyOption)
        {
            return Equals(policyOption as PolicyOption);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Parameter).GetHashCode();
        }
    }

    public class PortGroupProfile : ApplyProfile, IEquatable<PortGroupProfile>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public VlanProfile Vlan { get; set; }

        public VirtualSwitchSelectionProfile Vswitch { get; set; }

        public NetworkPolicyProfile NetworkPolicy { get; set; }

        public bool Equals(PortGroupProfile portGroupProfile)
        {
            return (portGroupProfile != null && this.Key == portGroupProfile.Key && this.Name == portGroupProfile.Name && ((this.Vlan == null && portGroupProfile.Vlan == null) || (this.Vlan != null && this.Vlan.Equals(portGroupProfile.Vlan))) && ((this.Vswitch == null && portGroupProfile.Vswitch == null) || (this.Vswitch != null && this.Vswitch.Equals(portGroupProfile.Vswitch))) && ((this.NetworkPolicy == null && portGroupProfile.NetworkPolicy == null) || (this.NetworkPolicy != null && this.NetworkPolicy.Equals(portGroupProfile.NetworkPolicy))));
        }

        public override bool Equals(object portGroupProfile)
        {
            return Equals(portGroupProfile as PortGroupProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Vlan + "_" + Vswitch + "_" + NetworkPolicy).GetHashCode();
        }
    }

    public class PosixUserSearchResult : UserSearchResult, IEquatable<PosixUserSearchResult>
    {
        public int Id { get; set; }

        public bool? ShellAccess { get; set; }

        public bool Equals(PosixUserSearchResult posixUserSearchResult)
        {
            return (posixUserSearchResult != null && this.Id == posixUserSearchResult.Id && ((this.ShellAccess == null && posixUserSearchResult.ShellAccess == null) || (this.ShellAccess != null && this.ShellAccess.Equals(posixUserSearchResult.ShellAccess))));
        }

        public override bool Equals(object posixUserSearchResult)
        {
            return Equals(posixUserSearchResult as PosixUserSearchResult);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + ShellAccess).GetHashCode();
        }
    }

    public class PowerOnFtSecondaryFailed : VmFaultToleranceIssue, IEquatable<PowerOnFtSecondaryFailed>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public FtIssuesOnHostHostSelectionType HostSelectionBy { get; set; }

        public LocalizedMethodFault[] HostErrors { get; set; }

        public LocalizedMethodFault RootCause { get; set; }

        public PowerOnFtSecondaryFailed_LinkedView LinkedView { get; set; }

        public bool Equals(PowerOnFtSecondaryFailed powerOnFtSecondaryFailed)
        {
            return (powerOnFtSecondaryFailed != null && ((this.Vm == null && powerOnFtSecondaryFailed.Vm == null) || (this.Vm != null && this.Vm.Equals(powerOnFtSecondaryFailed.Vm))) && this.VmName == powerOnFtSecondaryFailed.VmName && this.HostSelectionBy == powerOnFtSecondaryFailed.HostSelectionBy && ((this.HostErrors == null && powerOnFtSecondaryFailed.HostErrors == null) || (this.HostErrors != null && powerOnFtSecondaryFailed.HostErrors != null && Enumerable.SequenceEqual(this.HostErrors, powerOnFtSecondaryFailed.HostErrors))) && ((this.RootCause == null && powerOnFtSecondaryFailed.RootCause == null) || (this.RootCause != null && this.RootCause.Equals(powerOnFtSecondaryFailed.RootCause))) && ((this.LinkedView == null && powerOnFtSecondaryFailed.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(powerOnFtSecondaryFailed.LinkedView))));
        }

        public override bool Equals(object powerOnFtSecondaryFailed)
        {
            return Equals(powerOnFtSecondaryFailed as PowerOnFtSecondaryFailed);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + HostSelectionBy + "_" + HostErrors + "_" + RootCause + "_" + LinkedView).GetHashCode();
        }
    }

    public class PowerOnFtSecondaryFailed_LinkedView : IEquatable<PowerOnFtSecondaryFailed_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(PowerOnFtSecondaryFailed_LinkedView powerOnFtSecondaryFailed_LinkedView)
        {
            return (powerOnFtSecondaryFailed_LinkedView != null && ((this.Vm == null && powerOnFtSecondaryFailed_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(powerOnFtSecondaryFailed_LinkedView.Vm))));
        }

        public override bool Equals(object powerOnFtSecondaryFailed_LinkedView)
        {
            return Equals(powerOnFtSecondaryFailed_LinkedView as PowerOnFtSecondaryFailed_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class PowerOnFtSecondaryTimedout : Timedout, IEquatable<PowerOnFtSecondaryTimedout>
    {
        public ManagedObjectReference Vm { get; set; }

        public string VmName { get; set; }

        public int Timeout { get; set; }

        public PowerOnFtSecondaryTimedout_LinkedView LinkedView { get; set; }

        public bool Equals(PowerOnFtSecondaryTimedout powerOnFtSecondaryTimedout)
        {
            return (powerOnFtSecondaryTimedout != null && ((this.Vm == null && powerOnFtSecondaryTimedout.Vm == null) || (this.Vm != null && this.Vm.Equals(powerOnFtSecondaryTimedout.Vm))) && this.VmName == powerOnFtSecondaryTimedout.VmName && this.Timeout == powerOnFtSecondaryTimedout.Timeout && ((this.LinkedView == null && powerOnFtSecondaryTimedout.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(powerOnFtSecondaryTimedout.LinkedView))));
        }

        public override bool Equals(object powerOnFtSecondaryTimedout)
        {
            return Equals(powerOnFtSecondaryTimedout as PowerOnFtSecondaryTimedout);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + VmName + "_" + Timeout + "_" + LinkedView).GetHashCode();
        }
    }

    public class PowerOnFtSecondaryTimedout_LinkedView : IEquatable<PowerOnFtSecondaryTimedout_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(PowerOnFtSecondaryTimedout_LinkedView powerOnFtSecondaryTimedout_LinkedView)
        {
            return (powerOnFtSecondaryTimedout_LinkedView != null && ((this.Vm == null && powerOnFtSecondaryTimedout_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(powerOnFtSecondaryTimedout_LinkedView.Vm))));
        }

        public override bool Equals(object powerOnFtSecondaryTimedout_LinkedView)
        {
            return Equals(powerOnFtSecondaryTimedout_LinkedView as PowerOnFtSecondaryTimedout_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class PowerSystemCapability : DynamicData, IEquatable<PowerSystemCapability>
    {
        public HostPowerPolicy[] AvailablePolicy { get; set; }

        public bool Equals(PowerSystemCapability powerSystemCapability)
        {
            return (powerSystemCapability != null && ((this.AvailablePolicy == null && powerSystemCapability.AvailablePolicy == null) || (this.AvailablePolicy != null && powerSystemCapability.AvailablePolicy != null && Enumerable.SequenceEqual(this.AvailablePolicy, powerSystemCapability.AvailablePolicy))));
        }

        public override bool Equals(object powerSystemCapability)
        {
            return Equals(powerSystemCapability as PowerSystemCapability);
        }

        public override int GetHashCode()
        {
            return (AvailablePolicy).GetHashCode();
        }
    }

    public class PowerSystemInfo : DynamicData, IEquatable<PowerSystemInfo>
    {
        public HostPowerPolicy CurrentPolicy { get; set; }

        public bool Equals(PowerSystemInfo powerSystemInfo)
        {
            return (powerSystemInfo != null && ((this.CurrentPolicy == null && powerSystemInfo.CurrentPolicy == null) || (this.CurrentPolicy != null && this.CurrentPolicy.Equals(powerSystemInfo.CurrentPolicy))));
        }

        public override bool Equals(object powerSystemInfo)
        {
            return Equals(powerSystemInfo as PowerSystemInfo);
        }

        public override int GetHashCode()
        {
            return (CurrentPolicy).GetHashCode();
        }
    }

    public class PrivilegeAvailability : DynamicData, IEquatable<PrivilegeAvailability>
    {
        public string PrivId { get; set; }

        public bool IsGranted { get; set; }

        public bool Equals(PrivilegeAvailability privilegeAvailability)
        {
            return (privilegeAvailability != null && this.PrivId == privilegeAvailability.PrivId && this.IsGranted == privilegeAvailability.IsGranted);
        }

        public override bool Equals(object privilegeAvailability)
        {
            return Equals(privilegeAvailability as PrivilegeAvailability);
        }

        public override int GetHashCode()
        {
            return (PrivId + "_" + IsGranted).GetHashCode();
        }
    }

    public class PrivilegePolicyDef : DynamicData, IEquatable<PrivilegePolicyDef>
    {
        public string CreatePrivilege { get; set; }

        public string ReadPrivilege { get; set; }

        public string UpdatePrivilege { get; set; }

        public string DeletePrivilege { get; set; }

        public bool Equals(PrivilegePolicyDef privilegePolicyDef)
        {
            return (privilegePolicyDef != null && this.CreatePrivilege == privilegePolicyDef.CreatePrivilege && this.ReadPrivilege == privilegePolicyDef.ReadPrivilege && this.UpdatePrivilege == privilegePolicyDef.UpdatePrivilege && this.DeletePrivilege == privilegePolicyDef.DeletePrivilege);
        }

        public override bool Equals(object privilegePolicyDef)
        {
            return Equals(privilegePolicyDef as PrivilegePolicyDef);
        }

        public override int GetHashCode()
        {
            return (CreatePrivilege + "_" + ReadPrivilege + "_" + UpdatePrivilege + "_" + DeletePrivilege).GetHashCode();
        }
    }

    public class ProductComponentInfo : DynamicData, IEquatable<ProductComponentInfo>
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string Version { get; set; }

        public int Release { get; set; }

        public bool Equals(ProductComponentInfo productComponentInfo)
        {
            return (productComponentInfo != null && this.Id == productComponentInfo.Id && this.Name == productComponentInfo.Name && this.Version == productComponentInfo.Version && this.Release == productComponentInfo.Release);
        }

        public override bool Equals(object productComponentInfo)
        {
            return Equals(productComponentInfo as ProductComponentInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Version + "_" + Release).GetHashCode();
        }
    }

    public class Profile : ViewBase, IEquatable<Profile>
    {
        public ProfileConfigInfo Config { get; set; }

        public ProfileDescription Description { get; set; }

        public string Name { get; set; }

        public DateTime CreatedTime { get; set; }

        public DateTime ModifiedTime { get; set; }

        public ManagedObjectReference[] Entity { get; set; }

        public string ComplianceStatus { get; set; }

        public Profile_LinkedView LinkedView { get; set; }

        public ProfileDescription RetrieveDescription()
        {
            return default(ProfileDescription);
        }

        public void DestroyProfile()
        {
        }

        public void AssociateProfile(ManagedObjectReference[] entity)
        {
        }

        public void DissociateProfile(ManagedObjectReference[] entity)
        {
        }

        public ManagedObjectReference CheckProfileCompliance_Task(ManagedObjectReference[] entity)
        {
            return default(ManagedObjectReference);
        }

        public ComplianceResult[] CheckProfileCompliance(ManagedObjectReference[] entity)
        {
            return default(ComplianceResult[]);
        }

        public string ExportProfile()
        {
            return default(string);
        }

        public bool Equals(Profile profile)
        {
            return (profile != null && ((this.Config == null && profile.Config == null) || (this.Config != null && this.Config.Equals(profile.Config))) && ((this.Description == null && profile.Description == null) || (this.Description != null && this.Description.Equals(profile.Description))) && this.Name == profile.Name && this.CreatedTime == profile.CreatedTime && this.ModifiedTime == profile.ModifiedTime && ((this.Entity == null && profile.Entity == null) || (this.Entity != null && profile.Entity != null && Enumerable.SequenceEqual(this.Entity, profile.Entity))) && this.ComplianceStatus == profile.ComplianceStatus && ((this.LinkedView == null && profile.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(profile.LinkedView))));
        }

        public override bool Equals(object profile)
        {
            return Equals(profile as Profile);
        }

        public override int GetHashCode()
        {
            return (Config + "_" + Description + "_" + Name + "_" + CreatedTime + "_" + ModifiedTime + "_" + Entity + "_" + ComplianceStatus + "_" + LinkedView).GetHashCode();
        }
    }

    public class Profile_LinkedView : IEquatable<Profile_LinkedView>
    {
        public ManagedEntity[] Entity { get; set; }

        public bool Equals(Profile_LinkedView profile_LinkedView)
        {
            return (profile_LinkedView != null && ((this.Entity == null && profile_LinkedView.Entity == null) || (this.Entity != null && profile_LinkedView.Entity != null && Enumerable.SequenceEqual(this.Entity, profile_LinkedView.Entity))));
        }

        public override bool Equals(object profile_LinkedView)
        {
            return Equals(profile_LinkedView as Profile_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class ProfileApplyProfileElement : ApplyProfile, IEquatable<ProfileApplyProfileElement>
    {
        public string Key { get; set; }

        public bool Equals(ProfileApplyProfileElement profileApplyProfileElement)
        {
            return (profileApplyProfileElement != null && this.Key == profileApplyProfileElement.Key);
        }

        public override bool Equals(object profileApplyProfileElement)
        {
            return Equals(profileApplyProfileElement as ProfileApplyProfileElement);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class ProfileApplyProfileProperty : DynamicData, IEquatable<ProfileApplyProfileProperty>
    {
        public string PropertyName { get; set; }

        public bool Array { get; set; }

        public ApplyProfile[] Profile { get; set; }

        public bool Equals(ProfileApplyProfileProperty profileApplyProfileProperty)
        {
            return (profileApplyProfileProperty != null && this.PropertyName == profileApplyProfileProperty.PropertyName && this.Array == profileApplyProfileProperty.Array && ((this.Profile == null && profileApplyProfileProperty.Profile == null) || (this.Profile != null && profileApplyProfileProperty.Profile != null && Enumerable.SequenceEqual(this.Profile, profileApplyProfileProperty.Profile))));
        }

        public override bool Equals(object profileApplyProfileProperty)
        {
            return Equals(profileApplyProfileProperty as ProfileApplyProfileProperty);
        }

        public override int GetHashCode()
        {
            return (PropertyName + "_" + Array + "_" + Profile).GetHashCode();
        }
    }

    public class ProfileAssociatedEvent : ProfileEvent, IEquatable<ProfileAssociatedEvent>
    {
        public bool Equals(ProfileAssociatedEvent profileAssociatedEvent)
        {
            return (profileAssociatedEvent != null && base.Equals(profileAssociatedEvent));
        }

        public override bool Equals(object profileAssociatedEvent)
        {
            return Equals(profileAssociatedEvent as ProfileAssociatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileChangedEvent : ProfileEvent, IEquatable<ProfileChangedEvent>
    {
        public bool Equals(ProfileChangedEvent profileChangedEvent)
        {
            return (profileChangedEvent != null && base.Equals(profileChangedEvent));
        }

        public override bool Equals(object profileChangedEvent)
        {
            return Equals(profileChangedEvent as ProfileChangedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileComplianceManager : ViewBase, IEquatable<ProfileComplianceManager>
    {
        public ManagedObjectReference CheckCompliance_Task(ManagedObjectReference[] profile, ManagedObjectReference[] entity)
        {
            return default(ManagedObjectReference);
        }

        public ComplianceResult[] CheckCompliance(ManagedObjectReference[] profile, ManagedObjectReference[] entity)
        {
            return default(ComplianceResult[]);
        }

        public ComplianceResult[] QueryComplianceStatus(ManagedObjectReference[] profile, ManagedObjectReference[] entity)
        {
            return default(ComplianceResult[]);
        }

        public void ClearComplianceStatus(ManagedObjectReference[] profile, ManagedObjectReference[] entity)
        {
        }

        public ProfileExpressionMetadata[] QueryExpressionMetadata(string[] expressionName, ManagedObjectReference profile)
        {
            return default(ProfileExpressionMetadata[]);
        }

        public bool Equals(ProfileComplianceManager profileComplianceManager)
        {
            return (profileComplianceManager != null && base.Equals(profileComplianceManager));
        }

        public override bool Equals(object profileComplianceManager)
        {
            return Equals(profileComplianceManager as ProfileComplianceManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileCompositeExpression : ProfileExpression, IEquatable<ProfileCompositeExpression>
    {
        public string Operator { get; set; }

        public string[] ExpressionName { get; set; }

        public bool Equals(ProfileCompositeExpression profileCompositeExpression)
        {
            return (profileCompositeExpression != null && this.Operator == profileCompositeExpression.Operator && ((this.ExpressionName == null && profileCompositeExpression.ExpressionName == null) || (this.ExpressionName != null && profileCompositeExpression.ExpressionName != null && Enumerable.SequenceEqual(this.ExpressionName, profileCompositeExpression.ExpressionName))));
        }

        public override bool Equals(object profileCompositeExpression)
        {
            return Equals(profileCompositeExpression as ProfileCompositeExpression);
        }

        public override int GetHashCode()
        {
            return (Operator + "_" + ExpressionName).GetHashCode();
        }
    }

    public class ProfileCompositePolicyOptionMetadata : ProfilePolicyOptionMetadata, IEquatable<ProfileCompositePolicyOptionMetadata>
    {
        public string[] Option { get; set; }

        public bool Equals(ProfileCompositePolicyOptionMetadata profileCompositePolicyOptionMetadata)
        {
            return (profileCompositePolicyOptionMetadata != null && ((this.Option == null && profileCompositePolicyOptionMetadata.Option == null) || (this.Option != null && profileCompositePolicyOptionMetadata.Option != null && Enumerable.SequenceEqual(this.Option, profileCompositePolicyOptionMetadata.Option))));
        }

        public override bool Equals(object profileCompositePolicyOptionMetadata)
        {
            return Equals(profileCompositePolicyOptionMetadata as ProfileCompositePolicyOptionMetadata);
        }

        public override int GetHashCode()
        {
            return (Option).GetHashCode();
        }
    }

    public class ProfileConfigInfo : DynamicData, IEquatable<ProfileConfigInfo>
    {
        public string Name { get; set; }

        public string Annotation { get; set; }

        public bool Enabled { get; set; }

        public bool Equals(ProfileConfigInfo profileConfigInfo)
        {
            return (profileConfigInfo != null && this.Name == profileConfigInfo.Name && this.Annotation == profileConfigInfo.Annotation && this.Enabled == profileConfigInfo.Enabled);
        }

        public override bool Equals(object profileConfigInfo)
        {
            return Equals(profileConfigInfo as ProfileConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Annotation + "_" + Enabled).GetHashCode();
        }
    }

    public class ProfileCreatedEvent : ProfileEvent, IEquatable<ProfileCreatedEvent>
    {
        public bool Equals(ProfileCreatedEvent profileCreatedEvent)
        {
            return (profileCreatedEvent != null && base.Equals(profileCreatedEvent));
        }

        public override bool Equals(object profileCreatedEvent)
        {
            return Equals(profileCreatedEvent as ProfileCreatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileCreateSpec : DynamicData, IEquatable<ProfileCreateSpec>
    {
        public string Name { get; set; }

        public string Annotation { get; set; }

        public bool? Enabled { get; set; }

        public bool Equals(ProfileCreateSpec profileCreateSpec)
        {
            return (profileCreateSpec != null && this.Name == profileCreateSpec.Name && this.Annotation == profileCreateSpec.Annotation && ((this.Enabled == null && profileCreateSpec.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(profileCreateSpec.Enabled))));
        }

        public override bool Equals(object profileCreateSpec)
        {
            return Equals(profileCreateSpec as ProfileCreateSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Annotation + "_" + Enabled).GetHashCode();
        }
    }

    public class ProfileDeferredPolicyOptionParameter : DynamicData, IEquatable<ProfileDeferredPolicyOptionParameter>
    {
        public ProfilePropertyPath InputPath { get; set; }

        public KeyAnyValue[] Parameter { get; set; }

        public bool Equals(ProfileDeferredPolicyOptionParameter profileDeferredPolicyOptionParameter)
        {
            return (profileDeferredPolicyOptionParameter != null && ((this.InputPath == null && profileDeferredPolicyOptionParameter.InputPath == null) || (this.InputPath != null && this.InputPath.Equals(profileDeferredPolicyOptionParameter.InputPath))) && ((this.Parameter == null && profileDeferredPolicyOptionParameter.Parameter == null) || (this.Parameter != null && profileDeferredPolicyOptionParameter.Parameter != null && Enumerable.SequenceEqual(this.Parameter, profileDeferredPolicyOptionParameter.Parameter))));
        }

        public override bool Equals(object profileDeferredPolicyOptionParameter)
        {
            return Equals(profileDeferredPolicyOptionParameter as ProfileDeferredPolicyOptionParameter);
        }

        public override int GetHashCode()
        {
            return (InputPath + "_" + Parameter).GetHashCode();
        }
    }

    public class ProfileDescription : DynamicData, IEquatable<ProfileDescription>
    {
        public ProfileDescriptionSection[] Section { get; set; }

        public bool Equals(ProfileDescription profileDescription)
        {
            return (profileDescription != null && ((this.Section == null && profileDescription.Section == null) || (this.Section != null && profileDescription.Section != null && Enumerable.SequenceEqual(this.Section, profileDescription.Section))));
        }

        public override bool Equals(object profileDescription)
        {
            return Equals(profileDescription as ProfileDescription);
        }

        public override int GetHashCode()
        {
            return (Section).GetHashCode();
        }
    }

    public class ProfileDescriptionSection : DynamicData, IEquatable<ProfileDescriptionSection>
    {
        public ExtendedElementDescription Description { get; set; }

        public LocalizableMessage[] Message { get; set; }

        public bool Equals(ProfileDescriptionSection profileDescriptionSection)
        {
            return (profileDescriptionSection != null && ((this.Description == null && profileDescriptionSection.Description == null) || (this.Description != null && this.Description.Equals(profileDescriptionSection.Description))) && ((this.Message == null && profileDescriptionSection.Message == null) || (this.Message != null && profileDescriptionSection.Message != null && Enumerable.SequenceEqual(this.Message, profileDescriptionSection.Message))));
        }

        public override bool Equals(object profileDescriptionSection)
        {
            return Equals(profileDescriptionSection as ProfileDescriptionSection);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + Message).GetHashCode();
        }
    }

    public class ProfileDissociatedEvent : ProfileEvent, IEquatable<ProfileDissociatedEvent>
    {
        public bool Equals(ProfileDissociatedEvent profileDissociatedEvent)
        {
            return (profileDissociatedEvent != null && base.Equals(profileDissociatedEvent));
        }

        public override bool Equals(object profileDissociatedEvent)
        {
            return Equals(profileDissociatedEvent as ProfileDissociatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileEvent : Event, IEquatable<ProfileEvent>
    {
        public ProfileEventArgument Profile { get; set; }

        public bool Equals(ProfileEvent profileEvent)
        {
            return (profileEvent != null && ((this.Profile == null && profileEvent.Profile == null) || (this.Profile != null && this.Profile.Equals(profileEvent.Profile))));
        }

        public override bool Equals(object profileEvent)
        {
            return Equals(profileEvent as ProfileEvent);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class ProfileEventArgument : EventArgument, IEquatable<ProfileEventArgument>
    {
        public ManagedObjectReference Profile { get; set; }

        public string Name { get; set; }

        public ProfileEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(ProfileEventArgument profileEventArgument)
        {
            return (profileEventArgument != null && ((this.Profile == null && profileEventArgument.Profile == null) || (this.Profile != null && this.Profile.Equals(profileEventArgument.Profile))) && this.Name == profileEventArgument.Name && ((this.LinkedView == null && profileEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(profileEventArgument.LinkedView))));
        }

        public override bool Equals(object profileEventArgument)
        {
            return Equals(profileEventArgument as ProfileEventArgument);
        }

        public override int GetHashCode()
        {
            return (Profile + "_" + Name + "_" + LinkedView).GetHashCode();
        }
    }

    public class ProfileEventArgument_LinkedView : IEquatable<ProfileEventArgument_LinkedView>
    {
        public Profile Profile { get; set; }

        public bool Equals(ProfileEventArgument_LinkedView profileEventArgument_LinkedView)
        {
            return (profileEventArgument_LinkedView != null && ((this.Profile == null && profileEventArgument_LinkedView.Profile == null) || (this.Profile != null && this.Profile.Equals(profileEventArgument_LinkedView.Profile))));
        }

        public override bool Equals(object profileEventArgument_LinkedView)
        {
            return Equals(profileEventArgument_LinkedView as ProfileEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class ProfileExecuteError : DynamicData, IEquatable<ProfileExecuteError>
    {
        public ProfilePropertyPath Path { get; set; }

        public LocalizableMessage Message { get; set; }

        public bool Equals(ProfileExecuteError profileExecuteError)
        {
            return (profileExecuteError != null && ((this.Path == null && profileExecuteError.Path == null) || (this.Path != null && this.Path.Equals(profileExecuteError.Path))) && ((this.Message == null && profileExecuteError.Message == null) || (this.Message != null && this.Message.Equals(profileExecuteError.Message))));
        }

        public override bool Equals(object profileExecuteError)
        {
            return Equals(profileExecuteError as ProfileExecuteError);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + Message).GetHashCode();
        }
    }

    public class ProfileExecuteResult : DynamicData, IEquatable<ProfileExecuteResult>
    {
        public string Status { get; set; }

        public HostConfigSpec ConfigSpec { get; set; }

        public string[] InapplicablePath { get; set; }

        public ProfileDeferredPolicyOptionParameter[] RequireInput { get; set; }

        public ProfileExecuteError[] Error { get; set; }

        public bool Equals(ProfileExecuteResult profileExecuteResult)
        {
            return (profileExecuteResult != null && this.Status == profileExecuteResult.Status && ((this.ConfigSpec == null && profileExecuteResult.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(profileExecuteResult.ConfigSpec))) && ((this.InapplicablePath == null && profileExecuteResult.InapplicablePath == null) || (this.InapplicablePath != null && profileExecuteResult.InapplicablePath != null && Enumerable.SequenceEqual(this.InapplicablePath, profileExecuteResult.InapplicablePath))) && ((this.RequireInput == null && profileExecuteResult.RequireInput == null) || (this.RequireInput != null && profileExecuteResult.RequireInput != null && Enumerable.SequenceEqual(this.RequireInput, profileExecuteResult.RequireInput))) && ((this.Error == null && profileExecuteResult.Error == null) || (this.Error != null && profileExecuteResult.Error != null && Enumerable.SequenceEqual(this.Error, profileExecuteResult.Error))));
        }

        public override bool Equals(object profileExecuteResult)
        {
            return Equals(profileExecuteResult as ProfileExecuteResult);
        }

        public override int GetHashCode()
        {
            return (Status + "_" + ConfigSpec + "_" + InapplicablePath + "_" + RequireInput + "_" + Error).GetHashCode();
        }
    }

    public class ProfileExpression : DynamicData, IEquatable<ProfileExpression>
    {
        public string Id { get; set; }

        public string DisplayName { get; set; }

        public bool Negated { get; set; }

        public bool Equals(ProfileExpression profileExpression)
        {
            return (profileExpression != null && this.Id == profileExpression.Id && this.DisplayName == profileExpression.DisplayName && this.Negated == profileExpression.Negated);
        }

        public override bool Equals(object profileExpression)
        {
            return Equals(profileExpression as ProfileExpression);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + DisplayName + "_" + Negated).GetHashCode();
        }
    }

    public class ProfileExpressionMetadata : DynamicData, IEquatable<ProfileExpressionMetadata>
    {
        public ExtendedElementDescription ExpressionId { get; set; }

        public ProfileParameterMetadata[] Parameter { get; set; }

        public bool Equals(ProfileExpressionMetadata profileExpressionMetadata)
        {
            return (profileExpressionMetadata != null && ((this.ExpressionId == null && profileExpressionMetadata.ExpressionId == null) || (this.ExpressionId != null && this.ExpressionId.Equals(profileExpressionMetadata.ExpressionId))) && ((this.Parameter == null && profileExpressionMetadata.Parameter == null) || (this.Parameter != null && profileExpressionMetadata.Parameter != null && Enumerable.SequenceEqual(this.Parameter, profileExpressionMetadata.Parameter))));
        }

        public override bool Equals(object profileExpressionMetadata)
        {
            return Equals(profileExpressionMetadata as ProfileExpressionMetadata);
        }

        public override int GetHashCode()
        {
            return (ExpressionId + "_" + Parameter).GetHashCode();
        }
    }

    public class ProfileManager : ViewBase, IEquatable<ProfileManager>
    {
        public ManagedObjectReference[] Profile { get; set; }

        public ProfileManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateProfile(ProfileCreateSpec createSpec)
        {
            return default(ManagedObjectReference);
        }

        public ProfilePolicyMetadata[] QueryPolicyMetadata(string[] policyName, ManagedObjectReference profile)
        {
            return default(ProfilePolicyMetadata[]);
        }

        public ManagedObjectReference[] FindAssociatedProfile(ManagedObjectReference entity)
        {
            return default(ManagedObjectReference[]);
        }

        public bool Equals(ProfileManager profileManager)
        {
            return (profileManager != null && ((this.Profile == null && profileManager.Profile == null) || (this.Profile != null && profileManager.Profile != null && Enumerable.SequenceEqual(this.Profile, profileManager.Profile))) && ((this.LinkedView == null && profileManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(profileManager.LinkedView))));
        }

        public override bool Equals(object profileManager)
        {
            return Equals(profileManager as ProfileManager);
        }

        public override int GetHashCode()
        {
            return (Profile + "_" + LinkedView).GetHashCode();
        }
    }

    public class ProfileManager_LinkedView : IEquatable<ProfileManager_LinkedView>
    {
        public Profile[] Profile { get; set; }

        public bool Equals(ProfileManager_LinkedView profileManager_LinkedView)
        {
            return (profileManager_LinkedView != null && ((this.Profile == null && profileManager_LinkedView.Profile == null) || (this.Profile != null && profileManager_LinkedView.Profile != null && Enumerable.SequenceEqual(this.Profile, profileManager_LinkedView.Profile))));
        }

        public override bool Equals(object profileManager_LinkedView)
        {
            return Equals(profileManager_LinkedView as ProfileManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Profile).GetHashCode();
        }
    }

    public class ProfileMetadata : DynamicData, IEquatable<ProfileMetadata>
    {
        public string Key { get; set; }

        public string ProfileTypeName { get; set; }

        public ExtendedDescription Description { get; set; }

        public ProfileMetadataProfileSortSpec[] SortSpec { get; set; }

        public string ProfileCategory { get; set; }

        public string ProfileComponent { get; set; }

        public ProfileMetadataProfileOperationMessage[] OperationMessages { get; set; }

        public bool Equals(ProfileMetadata profileMetadata)
        {
            return (profileMetadata != null && this.Key == profileMetadata.Key && this.ProfileTypeName == profileMetadata.ProfileTypeName && ((this.Description == null && profileMetadata.Description == null) || (this.Description != null && this.Description.Equals(profileMetadata.Description))) && ((this.SortSpec == null && profileMetadata.SortSpec == null) || (this.SortSpec != null && profileMetadata.SortSpec != null && Enumerable.SequenceEqual(this.SortSpec, profileMetadata.SortSpec))) && this.ProfileCategory == profileMetadata.ProfileCategory && this.ProfileComponent == profileMetadata.ProfileComponent && ((this.OperationMessages == null && profileMetadata.OperationMessages == null) || (this.OperationMessages != null && profileMetadata.OperationMessages != null && Enumerable.SequenceEqual(this.OperationMessages, profileMetadata.OperationMessages))));
        }

        public override bool Equals(object profileMetadata)
        {
            return Equals(profileMetadata as ProfileMetadata);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ProfileTypeName + "_" + Description + "_" + SortSpec + "_" + ProfileCategory + "_" + ProfileComponent + "_" + OperationMessages).GetHashCode();
        }
    }

    public class ProfileMetadataProfileOperationMessage : DynamicData, IEquatable<ProfileMetadataProfileOperationMessage>
    {
        public string OperationName { get; set; }

        public LocalizableMessage Message { get; set; }

        public bool Equals(ProfileMetadataProfileOperationMessage profileMetadataProfileOperationMessage)
        {
            return (profileMetadataProfileOperationMessage != null && this.OperationName == profileMetadataProfileOperationMessage.OperationName && ((this.Message == null && profileMetadataProfileOperationMessage.Message == null) || (this.Message != null && this.Message.Equals(profileMetadataProfileOperationMessage.Message))));
        }

        public override bool Equals(object profileMetadataProfileOperationMessage)
        {
            return Equals(profileMetadataProfileOperationMessage as ProfileMetadataProfileOperationMessage);
        }

        public override int GetHashCode()
        {
            return (OperationName + "_" + Message).GetHashCode();
        }
    }

    public class ProfileMetadataProfileSortSpec : DynamicData, IEquatable<ProfileMetadataProfileSortSpec>
    {
        public string PolicyId { get; set; }

        public string Parameter { get; set; }

        public bool Equals(ProfileMetadataProfileSortSpec profileMetadataProfileSortSpec)
        {
            return (profileMetadataProfileSortSpec != null && this.PolicyId == profileMetadataProfileSortSpec.PolicyId && this.Parameter == profileMetadataProfileSortSpec.Parameter);
        }

        public override bool Equals(object profileMetadataProfileSortSpec)
        {
            return Equals(profileMetadataProfileSortSpec as ProfileMetadataProfileSortSpec);
        }

        public override int GetHashCode()
        {
            return (PolicyId + "_" + Parameter).GetHashCode();
        }
    }

    public class ProfileParameterMetadata : DynamicData, IEquatable<ProfileParameterMetadata>
    {
        public ExtendedElementDescription Id { get; set; }

        public string Type { get; set; }

        public bool Optional { get; set; }

        public object DefaultValue { get; set; }

        public bool? Hidden { get; set; }

        public bool? SecuritySensitive { get; set; }

        public bool? ReadOnly { get; set; }

        public ProfileParameterMetadataParameterRelationMetadata[] ParameterRelations { get; set; }

        public bool Equals(ProfileParameterMetadata profileParameterMetadata)
        {
            return (profileParameterMetadata != null && ((this.Id == null && profileParameterMetadata.Id == null) || (this.Id != null && this.Id.Equals(profileParameterMetadata.Id))) && this.Type == profileParameterMetadata.Type && this.Optional == profileParameterMetadata.Optional && ((this.DefaultValue == null && profileParameterMetadata.DefaultValue == null) || (this.DefaultValue != null && this.DefaultValue.Equals(profileParameterMetadata.DefaultValue))) && ((this.Hidden == null && profileParameterMetadata.Hidden == null) || (this.Hidden != null && this.Hidden.Equals(profileParameterMetadata.Hidden))) && ((this.SecuritySensitive == null && profileParameterMetadata.SecuritySensitive == null) || (this.SecuritySensitive != null && this.SecuritySensitive.Equals(profileParameterMetadata.SecuritySensitive))) && ((this.ReadOnly == null && profileParameterMetadata.ReadOnly == null) || (this.ReadOnly != null && this.ReadOnly.Equals(profileParameterMetadata.ReadOnly))) && ((this.ParameterRelations == null && profileParameterMetadata.ParameterRelations == null) || (this.ParameterRelations != null && profileParameterMetadata.ParameterRelations != null && Enumerable.SequenceEqual(this.ParameterRelations, profileParameterMetadata.ParameterRelations))));
        }

        public override bool Equals(object profileParameterMetadata)
        {
            return Equals(profileParameterMetadata as ProfileParameterMetadata);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Type + "_" + Optional + "_" + DefaultValue + "_" + Hidden + "_" + SecuritySensitive + "_" + ReadOnly + "_" + ParameterRelations).GetHashCode();
        }
    }

    public class ProfileParameterMetadataParameterRelationMetadata : DynamicData, IEquatable<ProfileParameterMetadataParameterRelationMetadata>
    {
        public string[] RelationTypes { get; set; }

        public object[] Values { get; set; }

        public ProfilePropertyPath Path { get; set; }

        public int MinCount { get; set; }

        public int MaxCount { get; set; }

        public bool Equals(ProfileParameterMetadataParameterRelationMetadata profileParameterMetadataParameterRelationMetadata)
        {
            return (profileParameterMetadataParameterRelationMetadata != null && ((this.RelationTypes == null && profileParameterMetadataParameterRelationMetadata.RelationTypes == null) || (this.RelationTypes != null && profileParameterMetadataParameterRelationMetadata.RelationTypes != null && Enumerable.SequenceEqual(this.RelationTypes, profileParameterMetadataParameterRelationMetadata.RelationTypes))) && ((this.Values == null && profileParameterMetadataParameterRelationMetadata.Values == null) || (this.Values != null && profileParameterMetadataParameterRelationMetadata.Values != null && Enumerable.SequenceEqual(this.Values, profileParameterMetadataParameterRelationMetadata.Values))) && ((this.Path == null && profileParameterMetadataParameterRelationMetadata.Path == null) || (this.Path != null && this.Path.Equals(profileParameterMetadataParameterRelationMetadata.Path))) && this.MinCount == profileParameterMetadataParameterRelationMetadata.MinCount && this.MaxCount == profileParameterMetadataParameterRelationMetadata.MaxCount);
        }

        public override bool Equals(object profileParameterMetadataParameterRelationMetadata)
        {
            return Equals(profileParameterMetadataParameterRelationMetadata as ProfileParameterMetadataParameterRelationMetadata);
        }

        public override int GetHashCode()
        {
            return (RelationTypes + "_" + Values + "_" + Path + "_" + MinCount + "_" + MaxCount).GetHashCode();
        }
    }

    public class ProfilePolicy : DynamicData, IEquatable<ProfilePolicy>
    {
        public string Id { get; set; }

        public PolicyOption PolicyOption { get; set; }

        public bool Equals(ProfilePolicy profilePolicy)
        {
            return (profilePolicy != null && this.Id == profilePolicy.Id && ((this.PolicyOption == null && profilePolicy.PolicyOption == null) || (this.PolicyOption != null && this.PolicyOption.Equals(profilePolicy.PolicyOption))));
        }

        public override bool Equals(object profilePolicy)
        {
            return Equals(profilePolicy as ProfilePolicy);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + PolicyOption).GetHashCode();
        }
    }

    public class ProfilePolicyMetadata : DynamicData, IEquatable<ProfilePolicyMetadata>
    {
        public ExtendedElementDescription Id { get; set; }

        public ProfilePolicyOptionMetadata[] PossibleOption { get; set; }

        public bool Equals(ProfilePolicyMetadata profilePolicyMetadata)
        {
            return (profilePolicyMetadata != null && ((this.Id == null && profilePolicyMetadata.Id == null) || (this.Id != null && this.Id.Equals(profilePolicyMetadata.Id))) && ((this.PossibleOption == null && profilePolicyMetadata.PossibleOption == null) || (this.PossibleOption != null && profilePolicyMetadata.PossibleOption != null && Enumerable.SequenceEqual(this.PossibleOption, profilePolicyMetadata.PossibleOption))));
        }

        public override bool Equals(object profilePolicyMetadata)
        {
            return Equals(profilePolicyMetadata as ProfilePolicyMetadata);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + PossibleOption).GetHashCode();
        }
    }

    public class ProfilePolicyOptionMetadata : DynamicData, IEquatable<ProfilePolicyOptionMetadata>
    {
        public ExtendedElementDescription Id { get; set; }

        public ProfileParameterMetadata[] Parameter { get; set; }

        public bool Equals(ProfilePolicyOptionMetadata profilePolicyOptionMetadata)
        {
            return (profilePolicyOptionMetadata != null && ((this.Id == null && profilePolicyOptionMetadata.Id == null) || (this.Id != null && this.Id.Equals(profilePolicyOptionMetadata.Id))) && ((this.Parameter == null && profilePolicyOptionMetadata.Parameter == null) || (this.Parameter != null && profilePolicyOptionMetadata.Parameter != null && Enumerable.SequenceEqual(this.Parameter, profilePolicyOptionMetadata.Parameter))));
        }

        public override bool Equals(object profilePolicyOptionMetadata)
        {
            return Equals(profilePolicyOptionMetadata as ProfilePolicyOptionMetadata);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Parameter).GetHashCode();
        }
    }

    public class ProfileProfileStructure : DynamicData, IEquatable<ProfileProfileStructure>
    {
        public string ProfileTypeName { get; set; }

        public ProfileProfileStructureProperty[] Child { get; set; }

        public bool Equals(ProfileProfileStructure profileProfileStructure)
        {
            return (profileProfileStructure != null && this.ProfileTypeName == profileProfileStructure.ProfileTypeName && ((this.Child == null && profileProfileStructure.Child == null) || (this.Child != null && profileProfileStructure.Child != null && Enumerable.SequenceEqual(this.Child, profileProfileStructure.Child))));
        }

        public override bool Equals(object profileProfileStructure)
        {
            return Equals(profileProfileStructure as ProfileProfileStructure);
        }

        public override int GetHashCode()
        {
            return (ProfileTypeName + "_" + Child).GetHashCode();
        }
    }

    public class ProfileProfileStructureProperty : DynamicData, IEquatable<ProfileProfileStructureProperty>
    {
        public string PropertyName { get; set; }

        public bool Array { get; set; }

        public ProfileProfileStructure Element { get; set; }

        public bool Equals(ProfileProfileStructureProperty profileProfileStructureProperty)
        {
            return (profileProfileStructureProperty != null && this.PropertyName == profileProfileStructureProperty.PropertyName && this.Array == profileProfileStructureProperty.Array && ((this.Element == null && profileProfileStructureProperty.Element == null) || (this.Element != null && this.Element.Equals(profileProfileStructureProperty.Element))));
        }

        public override bool Equals(object profileProfileStructureProperty)
        {
            return Equals(profileProfileStructureProperty as ProfileProfileStructureProperty);
        }

        public override int GetHashCode()
        {
            return (PropertyName + "_" + Array + "_" + Element).GetHashCode();
        }
    }

    public class ProfilePropertyPath : DynamicData, IEquatable<ProfilePropertyPath>
    {
        public string ProfilePath { get; set; }

        public string PolicyId { get; set; }

        public string ParameterId { get; set; }

        public string PolicyOptionId { get; set; }

        public bool Equals(ProfilePropertyPath profilePropertyPath)
        {
            return (profilePropertyPath != null && this.ProfilePath == profilePropertyPath.ProfilePath && this.PolicyId == profilePropertyPath.PolicyId && this.ParameterId == profilePropertyPath.ParameterId && this.PolicyOptionId == profilePropertyPath.PolicyOptionId);
        }

        public override bool Equals(object profilePropertyPath)
        {
            return Equals(profilePropertyPath as ProfilePropertyPath);
        }

        public override int GetHashCode()
        {
            return (ProfilePath + "_" + PolicyId + "_" + ParameterId + "_" + PolicyOptionId).GetHashCode();
        }
    }

    public class ProfileReferenceHostChangedEvent : ProfileEvent, IEquatable<ProfileReferenceHostChangedEvent>
    {
        public ManagedObjectReference ReferenceHost { get; set; }

        public string ReferenceHostName { get; set; }

        public string PrevReferenceHostName { get; set; }

        public ProfileReferenceHostChangedEvent_LinkedView LinkedView { get; set; }

        public bool Equals(ProfileReferenceHostChangedEvent profileReferenceHostChangedEvent)
        {
            return (profileReferenceHostChangedEvent != null && ((this.ReferenceHost == null && profileReferenceHostChangedEvent.ReferenceHost == null) || (this.ReferenceHost != null && this.ReferenceHost.Equals(profileReferenceHostChangedEvent.ReferenceHost))) && this.ReferenceHostName == profileReferenceHostChangedEvent.ReferenceHostName && this.PrevReferenceHostName == profileReferenceHostChangedEvent.PrevReferenceHostName && ((this.LinkedView == null && profileReferenceHostChangedEvent.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(profileReferenceHostChangedEvent.LinkedView))));
        }

        public override bool Equals(object profileReferenceHostChangedEvent)
        {
            return Equals(profileReferenceHostChangedEvent as ProfileReferenceHostChangedEvent);
        }

        public override int GetHashCode()
        {
            return (ReferenceHost + "_" + ReferenceHostName + "_" + PrevReferenceHostName + "_" + LinkedView).GetHashCode();
        }
    }

    public class ProfileReferenceHostChangedEvent_LinkedView : IEquatable<ProfileReferenceHostChangedEvent_LinkedView>
    {
        public HostSystem ReferenceHost { get; set; }

        public bool Equals(ProfileReferenceHostChangedEvent_LinkedView profileReferenceHostChangedEvent_LinkedView)
        {
            return (profileReferenceHostChangedEvent_LinkedView != null && ((this.ReferenceHost == null && profileReferenceHostChangedEvent_LinkedView.ReferenceHost == null) || (this.ReferenceHost != null && this.ReferenceHost.Equals(profileReferenceHostChangedEvent_LinkedView.ReferenceHost))));
        }

        public override bool Equals(object profileReferenceHostChangedEvent_LinkedView)
        {
            return Equals(profileReferenceHostChangedEvent_LinkedView as ProfileReferenceHostChangedEvent_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ReferenceHost).GetHashCode();
        }
    }

    public class ProfileRemovedEvent : ProfileEvent, IEquatable<ProfileRemovedEvent>
    {
        public bool Equals(ProfileRemovedEvent profileRemovedEvent)
        {
            return (profileRemovedEvent != null && base.Equals(profileRemovedEvent));
        }

        public override bool Equals(object profileRemovedEvent)
        {
            return Equals(profileRemovedEvent as ProfileRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ProfileSerializedCreateSpec : ProfileCreateSpec, IEquatable<ProfileSerializedCreateSpec>
    {
        public string ProfileConfigString { get; set; }

        public bool Equals(ProfileSerializedCreateSpec profileSerializedCreateSpec)
        {
            return (profileSerializedCreateSpec != null && this.ProfileConfigString == profileSerializedCreateSpec.ProfileConfigString);
        }

        public override bool Equals(object profileSerializedCreateSpec)
        {
            return Equals(profileSerializedCreateSpec as ProfileSerializedCreateSpec);
        }

        public override int GetHashCode()
        {
            return (ProfileConfigString).GetHashCode();
        }
    }

    public class ProfileSimpleExpression : ProfileExpression, IEquatable<ProfileSimpleExpression>
    {
        public string ExpressionType { get; set; }

        public KeyAnyValue[] Parameter { get; set; }

        public bool Equals(ProfileSimpleExpression profileSimpleExpression)
        {
            return (profileSimpleExpression != null && this.ExpressionType == profileSimpleExpression.ExpressionType && ((this.Parameter == null && profileSimpleExpression.Parameter == null) || (this.Parameter != null && profileSimpleExpression.Parameter != null && Enumerable.SequenceEqual(this.Parameter, profileSimpleExpression.Parameter))));
        }

        public override bool Equals(object profileSimpleExpression)
        {
            return Equals(profileSimpleExpression as ProfileSimpleExpression);
        }

        public override int GetHashCode()
        {
            return (ExpressionType + "_" + Parameter).GetHashCode();
        }
    }

    public class ProfileUpdateFailed : VimFault, IEquatable<ProfileUpdateFailed>
    {
        public ProfileUpdateFailedUpdateFailure[] Failure { get; set; }

        public ProfileUpdateFailedUpdateFailure[] Warnings { get; set; }

        public bool Equals(ProfileUpdateFailed profileUpdateFailed)
        {
            return (profileUpdateFailed != null && ((this.Failure == null && profileUpdateFailed.Failure == null) || (this.Failure != null && profileUpdateFailed.Failure != null && Enumerable.SequenceEqual(this.Failure, profileUpdateFailed.Failure))) && ((this.Warnings == null && profileUpdateFailed.Warnings == null) || (this.Warnings != null && profileUpdateFailed.Warnings != null && Enumerable.SequenceEqual(this.Warnings, profileUpdateFailed.Warnings))));
        }

        public override bool Equals(object profileUpdateFailed)
        {
            return Equals(profileUpdateFailed as ProfileUpdateFailed);
        }

        public override int GetHashCode()
        {
            return (Failure + "_" + Warnings).GetHashCode();
        }
    }

    public class ProfileUpdateFailedUpdateFailure : DynamicData, IEquatable<ProfileUpdateFailedUpdateFailure>
    {
        public ProfilePropertyPath ProfilePath { get; set; }

        public LocalizableMessage ErrMsg { get; set; }

        public bool Equals(ProfileUpdateFailedUpdateFailure profileUpdateFailedUpdateFailure)
        {
            return (profileUpdateFailedUpdateFailure != null && ((this.ProfilePath == null && profileUpdateFailedUpdateFailure.ProfilePath == null) || (this.ProfilePath != null && this.ProfilePath.Equals(profileUpdateFailedUpdateFailure.ProfilePath))) && ((this.ErrMsg == null && profileUpdateFailedUpdateFailure.ErrMsg == null) || (this.ErrMsg != null && this.ErrMsg.Equals(profileUpdateFailedUpdateFailure.ErrMsg))));
        }

        public override bool Equals(object profileUpdateFailedUpdateFailure)
        {
            return Equals(profileUpdateFailedUpdateFailure as ProfileUpdateFailedUpdateFailure);
        }

        public override int GetHashCode()
        {
            return (ProfilePath + "_" + ErrMsg).GetHashCode();
        }
    }

    public class PropertyChange : DynamicData, IEquatable<PropertyChange>
    {
        public string Name { get; set; }

        public PropertyChangeOp Op { get; set; }

        public object Val { get; set; }

        public bool Equals(PropertyChange propertyChange)
        {
            return (propertyChange != null && this.Name == propertyChange.Name && this.Op == propertyChange.Op && ((this.Val == null && propertyChange.Val == null) || (this.Val != null && this.Val.Equals(propertyChange.Val))));
        }

        public override bool Equals(object propertyChange)
        {
            return Equals(propertyChange as PropertyChange);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Op + "_" + Val).GetHashCode();
        }
    }

    public class PropertyCollector : ViewBase, IEquatable<PropertyCollector>
    {
        public ManagedObjectReference[] Filter { get; set; }

        public PropertyCollector_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateFilter(PropertyFilterSpec spec, bool partialUpdates)
        {
            return default(ManagedObjectReference);
        }

        public ObjectContent[] RetrieveProperties(PropertyFilterSpec[] specSet)
        {
            return default(ObjectContent[]);
        }

        public UpdateSet CheckForUpdates(string version)
        {
            return default(UpdateSet);
        }

        public UpdateSet WaitForUpdates(string version)
        {
            return default(UpdateSet);
        }

        public void CancelWaitForUpdates()
        {
        }

        public UpdateSet WaitForUpdatesEx(string version, WaitOptions options)
        {
            return default(UpdateSet);
        }

        public RetrieveResult RetrievePropertiesEx(PropertyFilterSpec[] specSet, RetrieveOptions options)
        {
            return default(RetrieveResult);
        }

        public RetrieveResult ContinueRetrievePropertiesEx(string token)
        {
            return default(RetrieveResult);
        }

        public void CancelRetrievePropertiesEx(string token)
        {
        }

        public ManagedObjectReference CreatePropertyCollector()
        {
            return default(ManagedObjectReference);
        }

        public void DestroyPropertyCollector()
        {
        }

        public bool Equals(PropertyCollector propertyCollector)
        {
            return (propertyCollector != null && ((this.Filter == null && propertyCollector.Filter == null) || (this.Filter != null && propertyCollector.Filter != null && Enumerable.SequenceEqual(this.Filter, propertyCollector.Filter))) && ((this.LinkedView == null && propertyCollector.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(propertyCollector.LinkedView))));
        }

        public override bool Equals(object propertyCollector)
        {
            return Equals(propertyCollector as PropertyCollector);
        }

        public override int GetHashCode()
        {
            return (Filter + "_" + LinkedView).GetHashCode();
        }
    }

    public class PropertyCollector_LinkedView : IEquatable<PropertyCollector_LinkedView>
    {
        public PropertyFilter[] Filter { get; set; }

        public bool Equals(PropertyCollector_LinkedView propertyCollector_LinkedView)
        {
            return (propertyCollector_LinkedView != null && ((this.Filter == null && propertyCollector_LinkedView.Filter == null) || (this.Filter != null && propertyCollector_LinkedView.Filter != null && Enumerable.SequenceEqual(this.Filter, propertyCollector_LinkedView.Filter))));
        }

        public override bool Equals(object propertyCollector_LinkedView)
        {
            return Equals(propertyCollector_LinkedView as PropertyCollector_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Filter).GetHashCode();
        }
    }

    public class PropertyFilter : ViewBase, IEquatable<PropertyFilter>
    {
        public PropertyFilterSpec Spec { get; set; }

        public bool PartialUpdates { get; set; }

        public void DestroyPropertyFilter()
        {
        }

        public bool Equals(PropertyFilter propertyFilter)
        {
            return (propertyFilter != null && ((this.Spec == null && propertyFilter.Spec == null) || (this.Spec != null && this.Spec.Equals(propertyFilter.Spec))) && this.PartialUpdates == propertyFilter.PartialUpdates);
        }

        public override bool Equals(object propertyFilter)
        {
            return Equals(propertyFilter as PropertyFilter);
        }

        public override int GetHashCode()
        {
            return (Spec + "_" + PartialUpdates).GetHashCode();
        }
    }

    public class PropertyFilterSpec : DynamicData, IEquatable<PropertyFilterSpec>
    {
        public PropertySpec[] PropSet { get; set; }

        public ObjectSpec[] ObjectSet { get; set; }

        public bool? ReportMissingObjectsInResults { get; set; }

        public bool Equals(PropertyFilterSpec propertyFilterSpec)
        {
            return (propertyFilterSpec != null && ((this.PropSet == null && propertyFilterSpec.PropSet == null) || (this.PropSet != null && propertyFilterSpec.PropSet != null && Enumerable.SequenceEqual(this.PropSet, propertyFilterSpec.PropSet))) && ((this.ObjectSet == null && propertyFilterSpec.ObjectSet == null) || (this.ObjectSet != null && propertyFilterSpec.ObjectSet != null && Enumerable.SequenceEqual(this.ObjectSet, propertyFilterSpec.ObjectSet))) && ((this.ReportMissingObjectsInResults == null && propertyFilterSpec.ReportMissingObjectsInResults == null) || (this.ReportMissingObjectsInResults != null && this.ReportMissingObjectsInResults.Equals(propertyFilterSpec.ReportMissingObjectsInResults))));
        }

        public override bool Equals(object propertyFilterSpec)
        {
            return Equals(propertyFilterSpec as PropertyFilterSpec);
        }

        public override int GetHashCode()
        {
            return (PropSet + "_" + ObjectSet + "_" + ReportMissingObjectsInResults).GetHashCode();
        }
    }

    public class PropertyFilterUpdate : DynamicData, IEquatable<PropertyFilterUpdate>
    {
        public ManagedObjectReference Filter { get; set; }

        public ObjectUpdate[] ObjectSet { get; set; }

        public MissingObject[] MissingSet { get; set; }

        public PropertyFilterUpdate_LinkedView LinkedView { get; set; }

        public bool Equals(PropertyFilterUpdate propertyFilterUpdate)
        {
            return (propertyFilterUpdate != null && ((this.Filter == null && propertyFilterUpdate.Filter == null) || (this.Filter != null && this.Filter.Equals(propertyFilterUpdate.Filter))) && ((this.ObjectSet == null && propertyFilterUpdate.ObjectSet == null) || (this.ObjectSet != null && propertyFilterUpdate.ObjectSet != null && Enumerable.SequenceEqual(this.ObjectSet, propertyFilterUpdate.ObjectSet))) && ((this.MissingSet == null && propertyFilterUpdate.MissingSet == null) || (this.MissingSet != null && propertyFilterUpdate.MissingSet != null && Enumerable.SequenceEqual(this.MissingSet, propertyFilterUpdate.MissingSet))) && ((this.LinkedView == null && propertyFilterUpdate.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(propertyFilterUpdate.LinkedView))));
        }

        public override bool Equals(object propertyFilterUpdate)
        {
            return Equals(propertyFilterUpdate as PropertyFilterUpdate);
        }

        public override int GetHashCode()
        {
            return (Filter + "_" + ObjectSet + "_" + MissingSet + "_" + LinkedView).GetHashCode();
        }
    }

    public class PropertyFilterUpdate_LinkedView : IEquatable<PropertyFilterUpdate_LinkedView>
    {
        public PropertyFilter Filter { get; set; }

        public bool Equals(PropertyFilterUpdate_LinkedView propertyFilterUpdate_LinkedView)
        {
            return (propertyFilterUpdate_LinkedView != null && ((this.Filter == null && propertyFilterUpdate_LinkedView.Filter == null) || (this.Filter != null && this.Filter.Equals(propertyFilterUpdate_LinkedView.Filter))));
        }

        public override bool Equals(object propertyFilterUpdate_LinkedView)
        {
            return Equals(propertyFilterUpdate_LinkedView as PropertyFilterUpdate_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Filter).GetHashCode();
        }
    }

    public class PropertySpec : DynamicData, IEquatable<PropertySpec>
    {
        public string Type { get; set; }

        public bool? All { get; set; }

        public string[] PathSet { get; set; }

        public bool Equals(PropertySpec propertySpec)
        {
            return (propertySpec != null && this.Type == propertySpec.Type && ((this.All == null && propertySpec.All == null) || (this.All != null && this.All.Equals(propertySpec.All))) && ((this.PathSet == null && propertySpec.PathSet == null) || (this.PathSet != null && propertySpec.PathSet != null && Enumerable.SequenceEqual(this.PathSet, propertySpec.PathSet))));
        }

        public override bool Equals(object propertySpec)
        {
            return Equals(propertySpec as PropertySpec);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + All + "_" + PathSet).GetHashCode();
        }
    }

    public class QuarantineModeFault : VmConfigFault, IEquatable<QuarantineModeFault>
    {
        public string VmName { get; set; }

        public string FaultType { get; set; }

        public bool Equals(QuarantineModeFault quarantineModeFault)
        {
            return (quarantineModeFault != null && this.VmName == quarantineModeFault.VmName && this.FaultType == quarantineModeFault.FaultType);
        }

        public override bool Equals(object quarantineModeFault)
        {
            return Equals(quarantineModeFault as QuarantineModeFault);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + FaultType).GetHashCode();
        }
    }

    public class QuestionPending : InvalidState, IEquatable<QuestionPending>
    {
        public string Text { get; set; }

        public bool Equals(QuestionPending questionPending)
        {
            return (questionPending != null && this.Text == questionPending.Text);
        }

        public override bool Equals(object questionPending)
        {
            return Equals(questionPending as QuestionPending);
        }

        public override int GetHashCode()
        {
            return (Text).GetHashCode();
        }
    }

    public class QuiesceDatastoreIOForHAFailed : ResourceInUse, IEquatable<QuiesceDatastoreIOForHAFailed>
    {
        public ManagedObjectReference Host { get; set; }

        public string HostName { get; set; }

        public ManagedObjectReference Ds { get; set; }

        public string DsName { get; set; }

        public QuiesceDatastoreIOForHAFailed_LinkedView LinkedView { get; set; }

        public bool Equals(QuiesceDatastoreIOForHAFailed quiesceDatastoreIOForHAFailed)
        {
            return (quiesceDatastoreIOForHAFailed != null && ((this.Host == null && quiesceDatastoreIOForHAFailed.Host == null) || (this.Host != null && this.Host.Equals(quiesceDatastoreIOForHAFailed.Host))) && this.HostName == quiesceDatastoreIOForHAFailed.HostName && ((this.Ds == null && quiesceDatastoreIOForHAFailed.Ds == null) || (this.Ds != null && this.Ds.Equals(quiesceDatastoreIOForHAFailed.Ds))) && this.DsName == quiesceDatastoreIOForHAFailed.DsName && ((this.LinkedView == null && quiesceDatastoreIOForHAFailed.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(quiesceDatastoreIOForHAFailed.LinkedView))));
        }

        public override bool Equals(object quiesceDatastoreIOForHAFailed)
        {
            return Equals(quiesceDatastoreIOForHAFailed as QuiesceDatastoreIOForHAFailed);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + HostName + "_" + Ds + "_" + DsName + "_" + LinkedView).GetHashCode();
        }
    }

    public class QuiesceDatastoreIOForHAFailed_LinkedView : IEquatable<QuiesceDatastoreIOForHAFailed_LinkedView>
    {
        public HostSystem Host { get; set; }

        public Datastore Ds { get; set; }

        public bool Equals(QuiesceDatastoreIOForHAFailed_LinkedView quiesceDatastoreIOForHAFailed_LinkedView)
        {
            return (quiesceDatastoreIOForHAFailed_LinkedView != null && ((this.Host == null && quiesceDatastoreIOForHAFailed_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(quiesceDatastoreIOForHAFailed_LinkedView.Host))) && ((this.Ds == null && quiesceDatastoreIOForHAFailed_LinkedView.Ds == null) || (this.Ds != null && this.Ds.Equals(quiesceDatastoreIOForHAFailed_LinkedView.Ds))));
        }

        public override bool Equals(object quiesceDatastoreIOForHAFailed_LinkedView)
        {
            return Equals(quiesceDatastoreIOForHAFailed_LinkedView as QuiesceDatastoreIOForHAFailed_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Ds).GetHashCode();
        }
    }

    public class RawDiskNotSupported : DeviceNotSupported, IEquatable<RawDiskNotSupported>
    {
        public bool Equals(RawDiskNotSupported rawDiskNotSupported)
        {
            return (rawDiskNotSupported != null && base.Equals(rawDiskNotSupported));
        }

        public override bool Equals(object rawDiskNotSupported)
        {
            return Equals(rawDiskNotSupported as RawDiskNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RDMConversionNotSupported : MigrationFault, IEquatable<RDMConversionNotSupported>
    {
        public string Device { get; set; }

        public bool Equals(RDMConversionNotSupported rDMConversionNotSupported)
        {
            return (rDMConversionNotSupported != null && this.Device == rDMConversionNotSupported.Device);
        }

        public override bool Equals(object rDMConversionNotSupported)
        {
            return Equals(rDMConversionNotSupported as RDMConversionNotSupported);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class RDMNotPreserved : MigrationFault, IEquatable<RDMNotPreserved>
    {
        public string Device { get; set; }

        public bool Equals(RDMNotPreserved rDMNotPreserved)
        {
            return (rDMNotPreserved != null && this.Device == rDMNotPreserved.Device);
        }

        public override bool Equals(object rDMNotPreserved)
        {
            return Equals(rDMNotPreserved as RDMNotPreserved);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class RDMNotSupported : DeviceNotSupported, IEquatable<RDMNotSupported>
    {
        public bool Equals(RDMNotSupported rDMNotSupported)
        {
            return (rDMNotSupported != null && base.Equals(rDMNotSupported));
        }

        public override bool Equals(object rDMNotSupported)
        {
            return Equals(rDMNotSupported as RDMNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RDMNotSupportedOnDatastore : VmConfigFault, IEquatable<RDMNotSupportedOnDatastore>
    {
        public string Device { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public string DatastoreName { get; set; }

        public RDMNotSupportedOnDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(RDMNotSupportedOnDatastore rDMNotSupportedOnDatastore)
        {
            return (rDMNotSupportedOnDatastore != null && this.Device == rDMNotSupportedOnDatastore.Device && ((this.Datastore == null && rDMNotSupportedOnDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(rDMNotSupportedOnDatastore.Datastore))) && this.DatastoreName == rDMNotSupportedOnDatastore.DatastoreName && ((this.LinkedView == null && rDMNotSupportedOnDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(rDMNotSupportedOnDatastore.LinkedView))));
        }

        public override bool Equals(object rDMNotSupportedOnDatastore)
        {
            return Equals(rDMNotSupportedOnDatastore as RDMNotSupportedOnDatastore);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Datastore + "_" + DatastoreName + "_" + LinkedView).GetHashCode();
        }
    }

    public class RDMNotSupportedOnDatastore_LinkedView : IEquatable<RDMNotSupportedOnDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(RDMNotSupportedOnDatastore_LinkedView rDMNotSupportedOnDatastore_LinkedView)
        {
            return (rDMNotSupportedOnDatastore_LinkedView != null && ((this.Datastore == null && rDMNotSupportedOnDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(rDMNotSupportedOnDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object rDMNotSupportedOnDatastore_LinkedView)
        {
            return Equals(rDMNotSupportedOnDatastore_LinkedView as RDMNotSupportedOnDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class RDMPointsToInaccessibleDisk : CannotAccessVmDisk, IEquatable<RDMPointsToInaccessibleDisk>
    {
        public bool Equals(RDMPointsToInaccessibleDisk rDMPointsToInaccessibleDisk)
        {
            return (rDMPointsToInaccessibleDisk != null && base.Equals(rDMPointsToInaccessibleDisk));
        }

        public override bool Equals(object rDMPointsToInaccessibleDisk)
        {
            return Equals(rDMPointsToInaccessibleDisk as RDMPointsToInaccessibleDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReadHostResourcePoolTreeFailed : HostConnectFault, IEquatable<ReadHostResourcePoolTreeFailed>
    {
        public bool Equals(ReadHostResourcePoolTreeFailed readHostResourcePoolTreeFailed)
        {
            return (readHostResourcePoolTreeFailed != null && base.Equals(readHostResourcePoolTreeFailed));
        }

        public override bool Equals(object readHostResourcePoolTreeFailed)
        {
            return Equals(readHostResourcePoolTreeFailed as ReadHostResourcePoolTreeFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReadOnlyDisksWithLegacyDestination : MigrationFault, IEquatable<ReadOnlyDisksWithLegacyDestination>
    {
        public int RoDiskCount { get; set; }

        public bool TimeoutDanger { get; set; }

        public bool Equals(ReadOnlyDisksWithLegacyDestination readOnlyDisksWithLegacyDestination)
        {
            return (readOnlyDisksWithLegacyDestination != null && this.RoDiskCount == readOnlyDisksWithLegacyDestination.RoDiskCount && this.TimeoutDanger == readOnlyDisksWithLegacyDestination.TimeoutDanger);
        }

        public override bool Equals(object readOnlyDisksWithLegacyDestination)
        {
            return Equals(readOnlyDisksWithLegacyDestination as ReadOnlyDisksWithLegacyDestination);
        }

        public override int GetHashCode()
        {
            return (RoDiskCount + "_" + TimeoutDanger).GetHashCode();
        }
    }

    public class RebootRequired : VimFault, IEquatable<RebootRequired>
    {
        public string Patch { get; set; }

        public bool Equals(RebootRequired rebootRequired)
        {
            return (rebootRequired != null && this.Patch == rebootRequired.Patch);
        }

        public override bool Equals(object rebootRequired)
        {
            return Equals(rebootRequired as RebootRequired);
        }

        public override int GetHashCode()
        {
            return (Patch).GetHashCode();
        }
    }

    public class RecordReplayDisabled : VimFault, IEquatable<RecordReplayDisabled>
    {
        public bool Equals(RecordReplayDisabled recordReplayDisabled)
        {
            return (recordReplayDisabled != null && base.Equals(recordReplayDisabled));
        }

        public override bool Equals(object recordReplayDisabled)
        {
            return Equals(recordReplayDisabled as RecordReplayDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RecoveryEvent : DvsEvent, IEquatable<RecoveryEvent>
    {
        public string HostName { get; set; }

        public string PortKey { get; set; }

        public string DvsUuid { get; set; }

        public string Vnic { get; set; }

        public bool Equals(RecoveryEvent recoveryEvent)
        {
            return (recoveryEvent != null && this.HostName == recoveryEvent.HostName && this.PortKey == recoveryEvent.PortKey && this.DvsUuid == recoveryEvent.DvsUuid && this.Vnic == recoveryEvent.Vnic);
        }

        public override bool Equals(object recoveryEvent)
        {
            return Equals(recoveryEvent as RecoveryEvent);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + PortKey + "_" + DvsUuid + "_" + Vnic).GetHashCode();
        }
    }

    public class RecurrentTaskScheduler : TaskScheduler, IEquatable<RecurrentTaskScheduler>
    {
        public int Interval { get; set; }

        public bool Equals(RecurrentTaskScheduler recurrentTaskScheduler)
        {
            return (recurrentTaskScheduler != null && this.Interval == recurrentTaskScheduler.Interval);
        }

        public override bool Equals(object recurrentTaskScheduler)
        {
            return Equals(recurrentTaskScheduler as RecurrentTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Interval).GetHashCode();
        }
    }

    public class Relation : DynamicData, IEquatable<Relation>
    {
        public string Constraint { get; set; }

        public string Name { get; set; }

        public string Version { get; set; }

        public bool Equals(Relation relation)
        {
            return (relation != null && this.Constraint == relation.Constraint && this.Name == relation.Name && this.Version == relation.Version);
        }

        public override bool Equals(object relation)
        {
            return Equals(relation as Relation);
        }

        public override int GetHashCode()
        {
            return (Constraint + "_" + Name + "_" + Version).GetHashCode();
        }
    }

    public class RemoteDeviceNotSupported : DeviceNotSupported, IEquatable<RemoteDeviceNotSupported>
    {
        public bool Equals(RemoteDeviceNotSupported remoteDeviceNotSupported)
        {
            return (remoteDeviceNotSupported != null && base.Equals(remoteDeviceNotSupported));
        }

        public override bool Equals(object remoteDeviceNotSupported)
        {
            return Equals(remoteDeviceNotSupported as RemoteDeviceNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RemoteTSMEnabledEvent : HostEvent, IEquatable<RemoteTSMEnabledEvent>
    {
        public bool Equals(RemoteTSMEnabledEvent remoteTSMEnabledEvent)
        {
            return (remoteTSMEnabledEvent != null && base.Equals(remoteTSMEnabledEvent));
        }

        public override bool Equals(object remoteTSMEnabledEvent)
        {
            return Equals(remoteTSMEnabledEvent as RemoteTSMEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RemoveFailed : VimFault, IEquatable<RemoveFailed>
    {
        public bool Equals(RemoveFailed removeFailed)
        {
            return (removeFailed != null && base.Equals(removeFailed));
        }

        public override bool Equals(object removeFailed)
        {
            return Equals(removeFailed as RemoveFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationConfigFault : ReplicationFault, IEquatable<ReplicationConfigFault>
    {
        public bool Equals(ReplicationConfigFault replicationConfigFault)
        {
            return (replicationConfigFault != null && base.Equals(replicationConfigFault));
        }

        public override bool Equals(object replicationConfigFault)
        {
            return Equals(replicationConfigFault as ReplicationConfigFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationConfigSpec : DynamicData, IEquatable<ReplicationConfigSpec>
    {
        public long Generation { get; set; }

        public string VmReplicationId { get; set; }

        public string Destination { get; set; }

        public int Port { get; set; }

        public long Rpo { get; set; }

        public bool QuiesceGuestEnabled { get; set; }

        public bool Paused { get; set; }

        public bool OppUpdatesEnabled { get; set; }

        public bool? NetCompressionEnabled { get; set; }

        public bool? NetEncryptionEnabled { get; set; }

        public string EncryptionDestination { get; set; }

        public int? EncryptionPort { get; set; }

        public string RemoteCertificateThumbprint { get; set; }

        public ReplicationInfoDiskSettings[] Disk { get; set; }

        public bool Equals(ReplicationConfigSpec replicationConfigSpec)
        {
            return (replicationConfigSpec != null && this.Generation == replicationConfigSpec.Generation && this.VmReplicationId == replicationConfigSpec.VmReplicationId && this.Destination == replicationConfigSpec.Destination && this.Port == replicationConfigSpec.Port && this.Rpo == replicationConfigSpec.Rpo && this.QuiesceGuestEnabled == replicationConfigSpec.QuiesceGuestEnabled && this.Paused == replicationConfigSpec.Paused && this.OppUpdatesEnabled == replicationConfigSpec.OppUpdatesEnabled && ((this.NetCompressionEnabled == null && replicationConfigSpec.NetCompressionEnabled == null) || (this.NetCompressionEnabled != null && this.NetCompressionEnabled.Equals(replicationConfigSpec.NetCompressionEnabled))) && ((this.NetEncryptionEnabled == null && replicationConfigSpec.NetEncryptionEnabled == null) || (this.NetEncryptionEnabled != null && this.NetEncryptionEnabled.Equals(replicationConfigSpec.NetEncryptionEnabled))) && this.EncryptionDestination == replicationConfigSpec.EncryptionDestination && ((this.EncryptionPort == null && replicationConfigSpec.EncryptionPort == null) || (this.EncryptionPort != null && this.EncryptionPort.Equals(replicationConfigSpec.EncryptionPort))) && this.RemoteCertificateThumbprint == replicationConfigSpec.RemoteCertificateThumbprint && ((this.Disk == null && replicationConfigSpec.Disk == null) || (this.Disk != null && replicationConfigSpec.Disk != null && Enumerable.SequenceEqual(this.Disk, replicationConfigSpec.Disk))));
        }

        public override bool Equals(object replicationConfigSpec)
        {
            return Equals(replicationConfigSpec as ReplicationConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Generation + "_" + VmReplicationId + "_" + Destination + "_" + Port + "_" + Rpo + "_" + QuiesceGuestEnabled + "_" + Paused + "_" + OppUpdatesEnabled + "_" + NetCompressionEnabled + "_" + NetEncryptionEnabled + "_" + EncryptionDestination + "_" + EncryptionPort + "_" + RemoteCertificateThumbprint + "_" + Disk).GetHashCode();
        }
    }

    public class ReplicationDiskConfigFault : ReplicationConfigFault, IEquatable<ReplicationDiskConfigFault>
    {
        public string Reason { get; set; }

        public ManagedObjectReference VmRef { get; set; }

        public int? Key { get; set; }

        public ReplicationDiskConfigFault_LinkedView LinkedView { get; set; }

        public bool Equals(ReplicationDiskConfigFault replicationDiskConfigFault)
        {
            return (replicationDiskConfigFault != null && this.Reason == replicationDiskConfigFault.Reason && ((this.VmRef == null && replicationDiskConfigFault.VmRef == null) || (this.VmRef != null && this.VmRef.Equals(replicationDiskConfigFault.VmRef))) && ((this.Key == null && replicationDiskConfigFault.Key == null) || (this.Key != null && this.Key.Equals(replicationDiskConfigFault.Key))) && ((this.LinkedView == null && replicationDiskConfigFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(replicationDiskConfigFault.LinkedView))));
        }

        public override bool Equals(object replicationDiskConfigFault)
        {
            return Equals(replicationDiskConfigFault as ReplicationDiskConfigFault);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + VmRef + "_" + Key + "_" + LinkedView).GetHashCode();
        }
    }

    public class ReplicationDiskConfigFault_LinkedView : IEquatable<ReplicationDiskConfigFault_LinkedView>
    {
        public VirtualMachine VmRef { get; set; }

        public bool Equals(ReplicationDiskConfigFault_LinkedView replicationDiskConfigFault_LinkedView)
        {
            return (replicationDiskConfigFault_LinkedView != null && ((this.VmRef == null && replicationDiskConfigFault_LinkedView.VmRef == null) || (this.VmRef != null && this.VmRef.Equals(replicationDiskConfigFault_LinkedView.VmRef))));
        }

        public override bool Equals(object replicationDiskConfigFault_LinkedView)
        {
            return Equals(replicationDiskConfigFault_LinkedView as ReplicationDiskConfigFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmRef).GetHashCode();
        }
    }

    public class ReplicationFault : VimFault, IEquatable<ReplicationFault>
    {
        public bool Equals(ReplicationFault replicationFault)
        {
            return (replicationFault != null && base.Equals(replicationFault));
        }

        public override bool Equals(object replicationFault)
        {
            return Equals(replicationFault as ReplicationFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationGroupId : DynamicData, IEquatable<ReplicationGroupId>
    {
        public FaultDomainId FaultDomainId { get; set; }

        public DeviceGroupId DeviceGroupId { get; set; }

        public bool Equals(ReplicationGroupId replicationGroupId)
        {
            return (replicationGroupId != null && ((this.FaultDomainId == null && replicationGroupId.FaultDomainId == null) || (this.FaultDomainId != null && this.FaultDomainId.Equals(replicationGroupId.FaultDomainId))) && ((this.DeviceGroupId == null && replicationGroupId.DeviceGroupId == null) || (this.DeviceGroupId != null && this.DeviceGroupId.Equals(replicationGroupId.DeviceGroupId))));
        }

        public override bool Equals(object replicationGroupId)
        {
            return Equals(replicationGroupId as ReplicationGroupId);
        }

        public override int GetHashCode()
        {
            return (FaultDomainId + "_" + DeviceGroupId).GetHashCode();
        }
    }

    public class ReplicationIncompatibleWithFT : ReplicationFault, IEquatable<ReplicationIncompatibleWithFT>
    {
        public bool Equals(ReplicationIncompatibleWithFT replicationIncompatibleWithFT)
        {
            return (replicationIncompatibleWithFT != null && base.Equals(replicationIncompatibleWithFT));
        }

        public override bool Equals(object replicationIncompatibleWithFT)
        {
            return Equals(replicationIncompatibleWithFT as ReplicationIncompatibleWithFT);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationInfoDiskSettings : DynamicData, IEquatable<ReplicationInfoDiskSettings>
    {
        public int Key { get; set; }

        public string DiskReplicationId { get; set; }

        public bool Equals(ReplicationInfoDiskSettings replicationInfoDiskSettings)
        {
            return (replicationInfoDiskSettings != null && this.Key == replicationInfoDiskSettings.Key && this.DiskReplicationId == replicationInfoDiskSettings.DiskReplicationId);
        }

        public override bool Equals(object replicationInfoDiskSettings)
        {
            return Equals(replicationInfoDiskSettings as ReplicationInfoDiskSettings);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DiskReplicationId).GetHashCode();
        }
    }

    public class ReplicationInvalidOptions : ReplicationFault, IEquatable<ReplicationInvalidOptions>
    {
        public string Options { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public ReplicationInvalidOptions_LinkedView LinkedView { get; set; }

        public bool Equals(ReplicationInvalidOptions replicationInvalidOptions)
        {
            return (replicationInvalidOptions != null && this.Options == replicationInvalidOptions.Options && ((this.Entity == null && replicationInvalidOptions.Entity == null) || (this.Entity != null && this.Entity.Equals(replicationInvalidOptions.Entity))) && ((this.LinkedView == null && replicationInvalidOptions.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(replicationInvalidOptions.LinkedView))));
        }

        public override bool Equals(object replicationInvalidOptions)
        {
            return Equals(replicationInvalidOptions as ReplicationInvalidOptions);
        }

        public override int GetHashCode()
        {
            return (Options + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class ReplicationInvalidOptions_LinkedView : IEquatable<ReplicationInvalidOptions_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(ReplicationInvalidOptions_LinkedView replicationInvalidOptions_LinkedView)
        {
            return (replicationInvalidOptions_LinkedView != null && ((this.Entity == null && replicationInvalidOptions_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(replicationInvalidOptions_LinkedView.Entity))));
        }

        public override bool Equals(object replicationInvalidOptions_LinkedView)
        {
            return Equals(replicationInvalidOptions_LinkedView as ReplicationInvalidOptions_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class ReplicationNotSupportedOnHost : ReplicationFault, IEquatable<ReplicationNotSupportedOnHost>
    {
        public bool Equals(ReplicationNotSupportedOnHost replicationNotSupportedOnHost)
        {
            return (replicationNotSupportedOnHost != null && base.Equals(replicationNotSupportedOnHost));
        }

        public override bool Equals(object replicationNotSupportedOnHost)
        {
            return Equals(replicationNotSupportedOnHost as ReplicationNotSupportedOnHost);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationSpec : DynamicData, IEquatable<ReplicationSpec>
    {
        public ReplicationGroupId ReplicationGroupId { get; set; }

        public bool Equals(ReplicationSpec replicationSpec)
        {
            return (replicationSpec != null && ((this.ReplicationGroupId == null && replicationSpec.ReplicationGroupId == null) || (this.ReplicationGroupId != null && this.ReplicationGroupId.Equals(replicationSpec.ReplicationGroupId))));
        }

        public override bool Equals(object replicationSpec)
        {
            return Equals(replicationSpec as ReplicationSpec);
        }

        public override int GetHashCode()
        {
            return (ReplicationGroupId).GetHashCode();
        }
    }

    public class ReplicationVmConfigFault : ReplicationConfigFault, IEquatable<ReplicationVmConfigFault>
    {
        public string Reason { get; set; }

        public ManagedObjectReference VmRef { get; set; }

        public ReplicationVmConfigFault_LinkedView LinkedView { get; set; }

        public bool Equals(ReplicationVmConfigFault replicationVmConfigFault)
        {
            return (replicationVmConfigFault != null && this.Reason == replicationVmConfigFault.Reason && ((this.VmRef == null && replicationVmConfigFault.VmRef == null) || (this.VmRef != null && this.VmRef.Equals(replicationVmConfigFault.VmRef))) && ((this.LinkedView == null && replicationVmConfigFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(replicationVmConfigFault.LinkedView))));
        }

        public override bool Equals(object replicationVmConfigFault)
        {
            return Equals(replicationVmConfigFault as ReplicationVmConfigFault);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + VmRef + "_" + LinkedView).GetHashCode();
        }
    }

    public class ReplicationVmConfigFault_LinkedView : IEquatable<ReplicationVmConfigFault_LinkedView>
    {
        public VirtualMachine VmRef { get; set; }

        public bool Equals(ReplicationVmConfigFault_LinkedView replicationVmConfigFault_LinkedView)
        {
            return (replicationVmConfigFault_LinkedView != null && ((this.VmRef == null && replicationVmConfigFault_LinkedView.VmRef == null) || (this.VmRef != null && this.VmRef.Equals(replicationVmConfigFault_LinkedView.VmRef))));
        }

        public override bool Equals(object replicationVmConfigFault_LinkedView)
        {
            return Equals(replicationVmConfigFault_LinkedView as ReplicationVmConfigFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmRef).GetHashCode();
        }
    }

    public class ReplicationVmFault : ReplicationFault, IEquatable<ReplicationVmFault>
    {
        public string Reason { get; set; }

        public string State { get; set; }

        public string InstanceId { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public ReplicationVmFault_LinkedView LinkedView { get; set; }

        public bool Equals(ReplicationVmFault replicationVmFault)
        {
            return (replicationVmFault != null && this.Reason == replicationVmFault.Reason && this.State == replicationVmFault.State && this.InstanceId == replicationVmFault.InstanceId && ((this.Vm == null && replicationVmFault.Vm == null) || (this.Vm != null && this.Vm.Equals(replicationVmFault.Vm))) && ((this.LinkedView == null && replicationVmFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(replicationVmFault.LinkedView))));
        }

        public override bool Equals(object replicationVmFault)
        {
            return Equals(replicationVmFault as ReplicationVmFault);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + State + "_" + InstanceId + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class ReplicationVmFault_LinkedView : IEquatable<ReplicationVmFault_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(ReplicationVmFault_LinkedView replicationVmFault_LinkedView)
        {
            return (replicationVmFault_LinkedView != null && ((this.Vm == null && replicationVmFault_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(replicationVmFault_LinkedView.Vm))));
        }

        public override bool Equals(object replicationVmFault_LinkedView)
        {
            return Equals(replicationVmFault_LinkedView as ReplicationVmFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class ReplicationVmInProgressFault : ReplicationVmFault, IEquatable<ReplicationVmInProgressFault>
    {
        public string RequestedActivity { get; set; }

        public string InProgressActivity { get; set; }

        public new ReplicationVmInProgressFault_LinkedView LinkedView { get; set; }

        public bool Equals(ReplicationVmInProgressFault replicationVmInProgressFault)
        {
            return (replicationVmInProgressFault != null && this.RequestedActivity == replicationVmInProgressFault.RequestedActivity && this.InProgressActivity == replicationVmInProgressFault.InProgressActivity && ((this.LinkedView == null && replicationVmInProgressFault.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(replicationVmInProgressFault.LinkedView))));
        }

        public override bool Equals(object replicationVmInProgressFault)
        {
            return Equals(replicationVmInProgressFault as ReplicationVmInProgressFault);
        }

        public override int GetHashCode()
        {
            return (RequestedActivity + "_" + InProgressActivity + "_" + LinkedView).GetHashCode();
        }
    }

    public class ReplicationVmInProgressFault_LinkedView : ReplicationVmFault_LinkedView, IEquatable<ReplicationVmInProgressFault_LinkedView>
    {
        public bool Equals(ReplicationVmInProgressFault_LinkedView replicationVmInProgressFault_LinkedView)
        {
            return (replicationVmInProgressFault_LinkedView != null && base.Equals(replicationVmInProgressFault_LinkedView));
        }

        public override bool Equals(object replicationVmInProgressFault_LinkedView)
        {
            return Equals(replicationVmInProgressFault_LinkedView as ReplicationVmInProgressFault_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ReplicationVmProgressInfo : DynamicData, IEquatable<ReplicationVmProgressInfo>
    {
        public int Progress { get; set; }

        public long BytesTransferred { get; set; }

        public long BytesToTransfer { get; set; }

        public long? ChecksumTotalBytes { get; set; }

        public long? ChecksumComparedBytes { get; set; }

        public bool Equals(ReplicationVmProgressInfo replicationVmProgressInfo)
        {
            return (replicationVmProgressInfo != null && this.Progress == replicationVmProgressInfo.Progress && this.BytesTransferred == replicationVmProgressInfo.BytesTransferred && this.BytesToTransfer == replicationVmProgressInfo.BytesToTransfer && ((this.ChecksumTotalBytes == null && replicationVmProgressInfo.ChecksumTotalBytes == null) || (this.ChecksumTotalBytes != null && this.ChecksumTotalBytes.Equals(replicationVmProgressInfo.ChecksumTotalBytes))) && ((this.ChecksumComparedBytes == null && replicationVmProgressInfo.ChecksumComparedBytes == null) || (this.ChecksumComparedBytes != null && this.ChecksumComparedBytes.Equals(replicationVmProgressInfo.ChecksumComparedBytes))));
        }

        public override bool Equals(object replicationVmProgressInfo)
        {
            return Equals(replicationVmProgressInfo as ReplicationVmProgressInfo);
        }

        public override int GetHashCode()
        {
            return (Progress + "_" + BytesTransferred + "_" + BytesToTransfer + "_" + ChecksumTotalBytes + "_" + ChecksumComparedBytes).GetHashCode();
        }
    }

    public class RequestCanceled : RuntimeFault, IEquatable<RequestCanceled>
    {
        public bool Equals(RequestCanceled requestCanceled)
        {
            return (requestCanceled != null && base.Equals(requestCanceled));
        }

        public override bool Equals(object requestCanceled)
        {
            return Equals(requestCanceled as RequestCanceled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ResourceAllocationInfo : DynamicData, IEquatable<ResourceAllocationInfo>
    {
        public long? Reservation { get; set; }

        public bool? ExpandableReservation { get; set; }

        public long? Limit { get; set; }

        public SharesInfo Shares { get; set; }

        public long? OverheadLimit { get; set; }

        public bool Equals(ResourceAllocationInfo resourceAllocationInfo)
        {
            return (resourceAllocationInfo != null && ((this.Reservation == null && resourceAllocationInfo.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(resourceAllocationInfo.Reservation))) && ((this.ExpandableReservation == null && resourceAllocationInfo.ExpandableReservation == null) || (this.ExpandableReservation != null && this.ExpandableReservation.Equals(resourceAllocationInfo.ExpandableReservation))) && ((this.Limit == null && resourceAllocationInfo.Limit == null) || (this.Limit != null && this.Limit.Equals(resourceAllocationInfo.Limit))) && ((this.Shares == null && resourceAllocationInfo.Shares == null) || (this.Shares != null && this.Shares.Equals(resourceAllocationInfo.Shares))) && ((this.OverheadLimit == null && resourceAllocationInfo.OverheadLimit == null) || (this.OverheadLimit != null && this.OverheadLimit.Equals(resourceAllocationInfo.OverheadLimit))));
        }

        public override bool Equals(object resourceAllocationInfo)
        {
            return Equals(resourceAllocationInfo as ResourceAllocationInfo);
        }

        public override int GetHashCode()
        {
            return (Reservation + "_" + ExpandableReservation + "_" + Limit + "_" + Shares + "_" + OverheadLimit).GetHashCode();
        }
    }

    public class ResourceAllocationOption : DynamicData, IEquatable<ResourceAllocationOption>
    {
        public SharesOption SharesOption { get; set; }

        public bool Equals(ResourceAllocationOption resourceAllocationOption)
        {
            return (resourceAllocationOption != null && ((this.SharesOption == null && resourceAllocationOption.SharesOption == null) || (this.SharesOption != null && this.SharesOption.Equals(resourceAllocationOption.SharesOption))));
        }

        public override bool Equals(object resourceAllocationOption)
        {
            return Equals(resourceAllocationOption as ResourceAllocationOption);
        }

        public override int GetHashCode()
        {
            return (SharesOption).GetHashCode();
        }
    }

    public class ResourceConfigOption : DynamicData, IEquatable<ResourceConfigOption>
    {
        public ResourceAllocationOption CpuAllocationOption { get; set; }

        public ResourceAllocationOption MemoryAllocationOption { get; set; }

        public bool Equals(ResourceConfigOption resourceConfigOption)
        {
            return (resourceConfigOption != null && ((this.CpuAllocationOption == null && resourceConfigOption.CpuAllocationOption == null) || (this.CpuAllocationOption != null && this.CpuAllocationOption.Equals(resourceConfigOption.CpuAllocationOption))) && ((this.MemoryAllocationOption == null && resourceConfigOption.MemoryAllocationOption == null) || (this.MemoryAllocationOption != null && this.MemoryAllocationOption.Equals(resourceConfigOption.MemoryAllocationOption))));
        }

        public override bool Equals(object resourceConfigOption)
        {
            return Equals(resourceConfigOption as ResourceConfigOption);
        }

        public override int GetHashCode()
        {
            return (CpuAllocationOption + "_" + MemoryAllocationOption).GetHashCode();
        }
    }

    public class ResourceConfigSpec : DynamicData, IEquatable<ResourceConfigSpec>
    {
        public ManagedObjectReference Entity { get; set; }

        public string ChangeVersion { get; set; }

        public DateTime? LastModified { get; set; }

        public ResourceAllocationInfo CpuAllocation { get; set; }

        public ResourceAllocationInfo MemoryAllocation { get; set; }

        public ResourceConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(ResourceConfigSpec resourceConfigSpec)
        {
            return (resourceConfigSpec != null && ((this.Entity == null && resourceConfigSpec.Entity == null) || (this.Entity != null && this.Entity.Equals(resourceConfigSpec.Entity))) && this.ChangeVersion == resourceConfigSpec.ChangeVersion && ((this.LastModified == null && resourceConfigSpec.LastModified == null) || (this.LastModified != null && this.LastModified.Equals(resourceConfigSpec.LastModified))) && ((this.CpuAllocation == null && resourceConfigSpec.CpuAllocation == null) || (this.CpuAllocation != null && this.CpuAllocation.Equals(resourceConfigSpec.CpuAllocation))) && ((this.MemoryAllocation == null && resourceConfigSpec.MemoryAllocation == null) || (this.MemoryAllocation != null && this.MemoryAllocation.Equals(resourceConfigSpec.MemoryAllocation))) && ((this.LinkedView == null && resourceConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(resourceConfigSpec.LinkedView))));
        }

        public override bool Equals(object resourceConfigSpec)
        {
            return Equals(resourceConfigSpec as ResourceConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + ChangeVersion + "_" + LastModified + "_" + CpuAllocation + "_" + MemoryAllocation + "_" + LinkedView).GetHashCode();
        }
    }

    public class ResourceConfigSpec_LinkedView : IEquatable<ResourceConfigSpec_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(ResourceConfigSpec_LinkedView resourceConfigSpec_LinkedView)
        {
            return (resourceConfigSpec_LinkedView != null && ((this.Entity == null && resourceConfigSpec_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(resourceConfigSpec_LinkedView.Entity))));
        }

        public override bool Equals(object resourceConfigSpec_LinkedView)
        {
            return Equals(resourceConfigSpec_LinkedView as ResourceConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class ResourceInUse : VimFault, IEquatable<ResourceInUse>
    {
        public string Type { get; set; }

        public string Name { get; set; }

        public bool Equals(ResourceInUse resourceInUse)
        {
            return (resourceInUse != null && this.Type == resourceInUse.Type && this.Name == resourceInUse.Name);
        }

        public override bool Equals(object resourceInUse)
        {
            return Equals(resourceInUse as ResourceInUse);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Name).GetHashCode();
        }
    }

    public class ResourceNotAvailable : VimFault, IEquatable<ResourceNotAvailable>
    {
        public string ContainerType { get; set; }

        public string ContainerName { get; set; }

        public string Type { get; set; }

        public bool Equals(ResourceNotAvailable resourceNotAvailable)
        {
            return (resourceNotAvailable != null && this.ContainerType == resourceNotAvailable.ContainerType && this.ContainerName == resourceNotAvailable.ContainerName && this.Type == resourceNotAvailable.Type);
        }

        public override bool Equals(object resourceNotAvailable)
        {
            return Equals(resourceNotAvailable as ResourceNotAvailable);
        }

        public override int GetHashCode()
        {
            return (ContainerType + "_" + ContainerName + "_" + Type).GetHashCode();
        }
    }

    public class ResourcePlanningManager : ViewBase, IEquatable<ResourcePlanningManager>
    {
        public DatabaseSizeEstimate EstimateDatabaseSize(DatabaseSizeParam dbSizeParam)
        {
            return default(DatabaseSizeEstimate);
        }

        public bool Equals(ResourcePlanningManager resourcePlanningManager)
        {
            return (resourcePlanningManager != null && base.Equals(resourcePlanningManager));
        }

        public override bool Equals(object resourcePlanningManager)
        {
            return Equals(resourcePlanningManager as ResourcePlanningManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ResourcePool : ManagedEntity, IEquatable<ResourcePool>
    {
        public ResourcePoolSummary Summary { get; set; }

        public ResourcePoolRuntimeInfo Runtime { get; set; }

        public ManagedObjectReference Owner { get; set; }

        public ManagedObjectReference[] resourcePool { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public ResourceConfigSpec Config { get; set; }

        public ResourceConfigSpec[] ChildConfiguration { get; set; }

        public new ResourcePool_LinkedView LinkedView { get; set; }

        public void UpdateConfig(string name, ResourceConfigSpec config)
        {
        }

        public void MoveIntoResourcePool(ManagedObjectReference[] list)
        {
        }

        public void UpdateChildResourceConfiguration(ResourceConfigSpec[] spec)
        {
        }

        public ManagedObjectReference CreateResourcePool(string name, ResourceConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void DestroyChildren()
        {
        }

        public ManagedObjectReference CreateVApp(string name, ResourceConfigSpec resSpec, VAppConfigSpec configSpec, ManagedObjectReference vmFolder)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateChildVM_Task(VirtualMachineConfigSpec config, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateChildVM(VirtualMachineConfigSpec config, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference RegisterChildVM_Task(string path, string name, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference RegisterChildVM(string path, string name, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference ImportVApp(ImportSpec spec, ManagedObjectReference folder, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public ResourceConfigOption QueryResourceConfigOption()
        {
            return default(ResourceConfigOption);
        }

        public void RefreshRuntime()
        {
        }

        public bool Equals(ResourcePool resourcePool)
        {
            return (resourcePool != null && ((this.Summary == null && resourcePool.Summary == null) || (this.Summary != null && this.Summary.Equals(resourcePool.Summary))) && ((this.Runtime == null && resourcePool.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(resourcePool.Runtime))) && ((this.Owner == null && resourcePool.Owner == null) || (this.Owner != null && this.Owner.Equals(resourcePool.Owner))) && ((this.resourcePool == null && resourcePool.resourcePool == null) || (this.resourcePool != null && resourcePool.resourcePool != null && Enumerable.SequenceEqual(this.resourcePool, resourcePool.resourcePool))) && ((this.Vm == null && resourcePool.Vm == null) || (this.Vm != null && resourcePool.Vm != null && Enumerable.SequenceEqual(this.Vm, resourcePool.Vm))) && ((this.Config == null && resourcePool.Config == null) || (this.Config != null && this.Config.Equals(resourcePool.Config))) && ((this.ChildConfiguration == null && resourcePool.ChildConfiguration == null) || (this.ChildConfiguration != null && resourcePool.ChildConfiguration != null && Enumerable.SequenceEqual(this.ChildConfiguration, resourcePool.ChildConfiguration))) && ((this.LinkedView == null && resourcePool.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(resourcePool.LinkedView))));
        }

        public override bool Equals(object resourcePool)
        {
            return Equals(resourcePool as ResourcePool);
        }

        public override int GetHashCode()
        {
            return (Summary + "_" + Runtime + "_" + Owner + "_" + resourcePool + "_" + Vm + "_" + Config + "_" + ChildConfiguration + "_" + LinkedView).GetHashCode();
        }
    }

    public class ResourcePool_LinkedView : ManagedEntity_LinkedView, IEquatable<ResourcePool_LinkedView>
    {
        public ComputeResource Owner { get; set; }

        public ResourcePool[] ResourcePool { get; set; }

        public VirtualMachine[] Vm { get; set; }

        public bool Equals(ResourcePool_LinkedView resourcePool_LinkedView)
        {
            return (resourcePool_LinkedView != null && ((this.Owner == null && resourcePool_LinkedView.Owner == null) || (this.Owner != null && this.Owner.Equals(resourcePool_LinkedView.Owner))) && ((this.ResourcePool == null && resourcePool_LinkedView.ResourcePool == null) || (this.ResourcePool != null && resourcePool_LinkedView.ResourcePool != null && Enumerable.SequenceEqual(this.ResourcePool, resourcePool_LinkedView.ResourcePool))) && ((this.Vm == null && resourcePool_LinkedView.Vm == null) || (this.Vm != null && resourcePool_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, resourcePool_LinkedView.Vm))));
        }

        public override bool Equals(object resourcePool_LinkedView)
        {
            return Equals(resourcePool_LinkedView as ResourcePool_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Owner + "_" + ResourcePool + "_" + Vm).GetHashCode();
        }
    }

    public class ResourcePoolCreatedEvent : ResourcePoolEvent, IEquatable<ResourcePoolCreatedEvent>
    {
        public ResourcePoolEventArgument Parent { get; set; }

        public bool Equals(ResourcePoolCreatedEvent resourcePoolCreatedEvent)
        {
            return (resourcePoolCreatedEvent != null && ((this.Parent == null && resourcePoolCreatedEvent.Parent == null) || (this.Parent != null && this.Parent.Equals(resourcePoolCreatedEvent.Parent))));
        }

        public override bool Equals(object resourcePoolCreatedEvent)
        {
            return Equals(resourcePoolCreatedEvent as ResourcePoolCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Parent).GetHashCode();
        }
    }

    public class ResourcePoolDestroyedEvent : ResourcePoolEvent, IEquatable<ResourcePoolDestroyedEvent>
    {
        public bool Equals(ResourcePoolDestroyedEvent resourcePoolDestroyedEvent)
        {
            return (resourcePoolDestroyedEvent != null && base.Equals(resourcePoolDestroyedEvent));
        }

        public override bool Equals(object resourcePoolDestroyedEvent)
        {
            return Equals(resourcePoolDestroyedEvent as ResourcePoolDestroyedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ResourcePoolEvent : Event, IEquatable<ResourcePoolEvent>
    {
        public ResourcePoolEventArgument ResourcePool { get; set; }

        public bool Equals(ResourcePoolEvent resourcePoolEvent)
        {
            return (resourcePoolEvent != null && ((this.ResourcePool == null && resourcePoolEvent.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(resourcePoolEvent.ResourcePool))));
        }

        public override bool Equals(object resourcePoolEvent)
        {
            return Equals(resourcePoolEvent as ResourcePoolEvent);
        }

        public override int GetHashCode()
        {
            return (ResourcePool).GetHashCode();
        }
    }

    public class ResourcePoolEventArgument : EntityEventArgument, IEquatable<ResourcePoolEventArgument>
    {
        public ManagedObjectReference ResourcePool { get; set; }

        public ResourcePoolEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(ResourcePoolEventArgument resourcePoolEventArgument)
        {
            return (resourcePoolEventArgument != null && ((this.ResourcePool == null && resourcePoolEventArgument.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(resourcePoolEventArgument.ResourcePool))) && ((this.LinkedView == null && resourcePoolEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(resourcePoolEventArgument.LinkedView))));
        }

        public override bool Equals(object resourcePoolEventArgument)
        {
            return Equals(resourcePoolEventArgument as ResourcePoolEventArgument);
        }

        public override int GetHashCode()
        {
            return (ResourcePool + "_" + LinkedView).GetHashCode();
        }
    }

    public class ResourcePoolEventArgument_LinkedView : IEquatable<ResourcePoolEventArgument_LinkedView>
    {
        public ResourcePool ResourcePool { get; set; }

        public bool Equals(ResourcePoolEventArgument_LinkedView resourcePoolEventArgument_LinkedView)
        {
            return (resourcePoolEventArgument_LinkedView != null && ((this.ResourcePool == null && resourcePoolEventArgument_LinkedView.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(resourcePoolEventArgument_LinkedView.ResourcePool))));
        }

        public override bool Equals(object resourcePoolEventArgument_LinkedView)
        {
            return Equals(resourcePoolEventArgument_LinkedView as ResourcePoolEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ResourcePool).GetHashCode();
        }
    }

    public class ResourcePoolMovedEvent : ResourcePoolEvent, IEquatable<ResourcePoolMovedEvent>
    {
        public ResourcePoolEventArgument OldParent { get; set; }

        public ResourcePoolEventArgument NewParent { get; set; }

        public bool Equals(ResourcePoolMovedEvent resourcePoolMovedEvent)
        {
            return (resourcePoolMovedEvent != null && ((this.OldParent == null && resourcePoolMovedEvent.OldParent == null) || (this.OldParent != null && this.OldParent.Equals(resourcePoolMovedEvent.OldParent))) && ((this.NewParent == null && resourcePoolMovedEvent.NewParent == null) || (this.NewParent != null && this.NewParent.Equals(resourcePoolMovedEvent.NewParent))));
        }

        public override bool Equals(object resourcePoolMovedEvent)
        {
            return Equals(resourcePoolMovedEvent as ResourcePoolMovedEvent);
        }

        public override int GetHashCode()
        {
            return (OldParent + "_" + NewParent).GetHashCode();
        }
    }

    public class ResourcePoolQuickStats : DynamicData, IEquatable<ResourcePoolQuickStats>
    {
        public long? OverallCpuUsage { get; set; }

        public long? OverallCpuDemand { get; set; }

        public long? GuestMemoryUsage { get; set; }

        public long? HostMemoryUsage { get; set; }

        public long? DistributedCpuEntitlement { get; set; }

        public long? DistributedMemoryEntitlement { get; set; }

        public int? StaticCpuEntitlement { get; set; }

        public int? StaticMemoryEntitlement { get; set; }

        public long? PrivateMemory { get; set; }

        public long? SharedMemory { get; set; }

        public long? SwappedMemory { get; set; }

        public long? BalloonedMemory { get; set; }

        public long? OverheadMemory { get; set; }

        public long? ConsumedOverheadMemory { get; set; }

        public long? CompressedMemory { get; set; }

        public bool Equals(ResourcePoolQuickStats resourcePoolQuickStats)
        {
            return (resourcePoolQuickStats != null && ((this.OverallCpuUsage == null && resourcePoolQuickStats.OverallCpuUsage == null) || (this.OverallCpuUsage != null && this.OverallCpuUsage.Equals(resourcePoolQuickStats.OverallCpuUsage))) && ((this.OverallCpuDemand == null && resourcePoolQuickStats.OverallCpuDemand == null) || (this.OverallCpuDemand != null && this.OverallCpuDemand.Equals(resourcePoolQuickStats.OverallCpuDemand))) && ((this.GuestMemoryUsage == null && resourcePoolQuickStats.GuestMemoryUsage == null) || (this.GuestMemoryUsage != null && this.GuestMemoryUsage.Equals(resourcePoolQuickStats.GuestMemoryUsage))) && ((this.HostMemoryUsage == null && resourcePoolQuickStats.HostMemoryUsage == null) || (this.HostMemoryUsage != null && this.HostMemoryUsage.Equals(resourcePoolQuickStats.HostMemoryUsage))) && ((this.DistributedCpuEntitlement == null && resourcePoolQuickStats.DistributedCpuEntitlement == null) || (this.DistributedCpuEntitlement != null && this.DistributedCpuEntitlement.Equals(resourcePoolQuickStats.DistributedCpuEntitlement))) && ((this.DistributedMemoryEntitlement == null && resourcePoolQuickStats.DistributedMemoryEntitlement == null) || (this.DistributedMemoryEntitlement != null && this.DistributedMemoryEntitlement.Equals(resourcePoolQuickStats.DistributedMemoryEntitlement))) && ((this.StaticCpuEntitlement == null && resourcePoolQuickStats.StaticCpuEntitlement == null) || (this.StaticCpuEntitlement != null && this.StaticCpuEntitlement.Equals(resourcePoolQuickStats.StaticCpuEntitlement))) && ((this.StaticMemoryEntitlement == null && resourcePoolQuickStats.StaticMemoryEntitlement == null) || (this.StaticMemoryEntitlement != null && this.StaticMemoryEntitlement.Equals(resourcePoolQuickStats.StaticMemoryEntitlement))) && ((this.PrivateMemory == null && resourcePoolQuickStats.PrivateMemory == null) || (this.PrivateMemory != null && this.PrivateMemory.Equals(resourcePoolQuickStats.PrivateMemory))) && ((this.SharedMemory == null && resourcePoolQuickStats.SharedMemory == null) || (this.SharedMemory != null && this.SharedMemory.Equals(resourcePoolQuickStats.SharedMemory))) && ((this.SwappedMemory == null && resourcePoolQuickStats.SwappedMemory == null) || (this.SwappedMemory != null && this.SwappedMemory.Equals(resourcePoolQuickStats.SwappedMemory))) && ((this.BalloonedMemory == null && resourcePoolQuickStats.BalloonedMemory == null) || (this.BalloonedMemory != null && this.BalloonedMemory.Equals(resourcePoolQuickStats.BalloonedMemory))) && ((this.OverheadMemory == null && resourcePoolQuickStats.OverheadMemory == null) || (this.OverheadMemory != null && this.OverheadMemory.Equals(resourcePoolQuickStats.OverheadMemory))) && ((this.ConsumedOverheadMemory == null && resourcePoolQuickStats.ConsumedOverheadMemory == null) || (this.ConsumedOverheadMemory != null && this.ConsumedOverheadMemory.Equals(resourcePoolQuickStats.ConsumedOverheadMemory))) && ((this.CompressedMemory == null && resourcePoolQuickStats.CompressedMemory == null) || (this.CompressedMemory != null && this.CompressedMemory.Equals(resourcePoolQuickStats.CompressedMemory))));
        }

        public override bool Equals(object resourcePoolQuickStats)
        {
            return Equals(resourcePoolQuickStats as ResourcePoolQuickStats);
        }

        public override int GetHashCode()
        {
            return (OverallCpuUsage + "_" + OverallCpuDemand + "_" + GuestMemoryUsage + "_" + HostMemoryUsage + "_" + DistributedCpuEntitlement + "_" + DistributedMemoryEntitlement + "_" + StaticCpuEntitlement + "_" + StaticMemoryEntitlement + "_" + PrivateMemory + "_" + SharedMemory + "_" + SwappedMemory + "_" + BalloonedMemory + "_" + OverheadMemory + "_" + ConsumedOverheadMemory + "_" + CompressedMemory).GetHashCode();
        }
    }

    public class ResourcePoolReconfiguredEvent : ResourcePoolEvent, IEquatable<ResourcePoolReconfiguredEvent>
    {
        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(ResourcePoolReconfiguredEvent resourcePoolReconfiguredEvent)
        {
            return (resourcePoolReconfiguredEvent != null && ((this.ConfigChanges == null && resourcePoolReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(resourcePoolReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object resourcePoolReconfiguredEvent)
        {
            return Equals(resourcePoolReconfiguredEvent as ResourcePoolReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigChanges).GetHashCode();
        }
    }

    public class ResourcePoolResourceUsage : DynamicData, IEquatable<ResourcePoolResourceUsage>
    {
        public long ReservationUsed { get; set; }

        public long ReservationUsedForVm { get; set; }

        public long UnreservedForPool { get; set; }

        public long UnreservedForVm { get; set; }

        public long OverallUsage { get; set; }

        public long MaxUsage { get; set; }

        public bool Equals(ResourcePoolResourceUsage resourcePoolResourceUsage)
        {
            return (resourcePoolResourceUsage != null && this.ReservationUsed == resourcePoolResourceUsage.ReservationUsed && this.ReservationUsedForVm == resourcePoolResourceUsage.ReservationUsedForVm && this.UnreservedForPool == resourcePoolResourceUsage.UnreservedForPool && this.UnreservedForVm == resourcePoolResourceUsage.UnreservedForVm && this.OverallUsage == resourcePoolResourceUsage.OverallUsage && this.MaxUsage == resourcePoolResourceUsage.MaxUsage);
        }

        public override bool Equals(object resourcePoolResourceUsage)
        {
            return Equals(resourcePoolResourceUsage as ResourcePoolResourceUsage);
        }

        public override int GetHashCode()
        {
            return (ReservationUsed + "_" + ReservationUsedForVm + "_" + UnreservedForPool + "_" + UnreservedForVm + "_" + OverallUsage + "_" + MaxUsage).GetHashCode();
        }
    }

    public class ResourcePoolRuntimeInfo : DynamicData, IEquatable<ResourcePoolRuntimeInfo>
    {
        public ResourcePoolResourceUsage Memory { get; set; }

        public ResourcePoolResourceUsage Cpu { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public bool Equals(ResourcePoolRuntimeInfo resourcePoolRuntimeInfo)
        {
            return (resourcePoolRuntimeInfo != null && ((this.Memory == null && resourcePoolRuntimeInfo.Memory == null) || (this.Memory != null && this.Memory.Equals(resourcePoolRuntimeInfo.Memory))) && ((this.Cpu == null && resourcePoolRuntimeInfo.Cpu == null) || (this.Cpu != null && this.Cpu.Equals(resourcePoolRuntimeInfo.Cpu))) && this.OverallStatus == resourcePoolRuntimeInfo.OverallStatus);
        }

        public override bool Equals(object resourcePoolRuntimeInfo)
        {
            return Equals(resourcePoolRuntimeInfo as ResourcePoolRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (Memory + "_" + Cpu + "_" + OverallStatus).GetHashCode();
        }
    }

    public class ResourcePoolSummary : DynamicData, IEquatable<ResourcePoolSummary>
    {
        public string Name { get; set; }

        public ResourceConfigSpec Config { get; set; }

        public ResourcePoolRuntimeInfo Runtime { get; set; }

        public ResourcePoolQuickStats QuickStats { get; set; }

        public int? ConfiguredMemoryMB { get; set; }

        public bool Equals(ResourcePoolSummary resourcePoolSummary)
        {
            return (resourcePoolSummary != null && this.Name == resourcePoolSummary.Name && ((this.Config == null && resourcePoolSummary.Config == null) || (this.Config != null && this.Config.Equals(resourcePoolSummary.Config))) && ((this.Runtime == null && resourcePoolSummary.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(resourcePoolSummary.Runtime))) && ((this.QuickStats == null && resourcePoolSummary.QuickStats == null) || (this.QuickStats != null && this.QuickStats.Equals(resourcePoolSummary.QuickStats))) && ((this.ConfiguredMemoryMB == null && resourcePoolSummary.ConfiguredMemoryMB == null) || (this.ConfiguredMemoryMB != null && this.ConfiguredMemoryMB.Equals(resourcePoolSummary.ConfiguredMemoryMB))));
        }

        public override bool Equals(object resourcePoolSummary)
        {
            return Equals(resourcePoolSummary as ResourcePoolSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Config + "_" + Runtime + "_" + QuickStats + "_" + ConfiguredMemoryMB).GetHashCode();
        }
    }

    public class ResourceViolatedEvent : ResourcePoolEvent, IEquatable<ResourceViolatedEvent>
    {
        public bool Equals(ResourceViolatedEvent resourceViolatedEvent)
        {
            return (resourceViolatedEvent != null && base.Equals(resourceViolatedEvent));
        }

        public override bool Equals(object resourceViolatedEvent)
        {
            return Equals(resourceViolatedEvent as ResourceViolatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RestrictedByAdministrator : RuntimeFault, IEquatable<RestrictedByAdministrator>
    {
        public string Details { get; set; }

        public bool Equals(RestrictedByAdministrator restrictedByAdministrator)
        {
            return (restrictedByAdministrator != null && this.Details == restrictedByAdministrator.Details);
        }

        public override bool Equals(object restrictedByAdministrator)
        {
            return Equals(restrictedByAdministrator as RestrictedByAdministrator);
        }

        public override int GetHashCode()
        {
            return (Details).GetHashCode();
        }
    }

    public class RestrictedVersion : SecurityError, IEquatable<RestrictedVersion>
    {
        public bool Equals(RestrictedVersion restrictedVersion)
        {
            return (restrictedVersion != null && base.Equals(restrictedVersion));
        }

        public override bool Equals(object restrictedVersion)
        {
            return Equals(restrictedVersion as RestrictedVersion);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RetrieveOptions : DynamicData, IEquatable<RetrieveOptions>
    {
        public int? MaxObjects { get; set; }

        public bool Equals(RetrieveOptions retrieveOptions)
        {
            return (retrieveOptions != null && ((this.MaxObjects == null && retrieveOptions.MaxObjects == null) || (this.MaxObjects != null && this.MaxObjects.Equals(retrieveOptions.MaxObjects))));
        }

        public override bool Equals(object retrieveOptions)
        {
            return Equals(retrieveOptions as RetrieveOptions);
        }

        public override int GetHashCode()
        {
            return (MaxObjects).GetHashCode();
        }
    }

    public class RetrieveResult : DynamicData, IEquatable<RetrieveResult>
    {
        public string Token { get; set; }

        public ObjectContent[] Objects { get; set; }

        public bool Equals(RetrieveResult retrieveResult)
        {
            return (retrieveResult != null && this.Token == retrieveResult.Token && ((this.Objects == null && retrieveResult.Objects == null) || (this.Objects != null && retrieveResult.Objects != null && Enumerable.SequenceEqual(this.Objects, retrieveResult.Objects))));
        }

        public override bool Equals(object retrieveResult)
        {
            return Equals(retrieveResult as RetrieveResult);
        }

        public override int GetHashCode()
        {
            return (Token + "_" + Objects).GetHashCode();
        }
    }

    public class RetrieveVStorageObjSpec : DynamicData, IEquatable<RetrieveVStorageObjSpec>
    {
        public ID Id { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public RetrieveVStorageObjSpec_LinkedView LinkedView { get; set; }

        public bool Equals(RetrieveVStorageObjSpec retrieveVStorageObjSpec)
        {
            return (retrieveVStorageObjSpec != null && ((this.Id == null && retrieveVStorageObjSpec.Id == null) || (this.Id != null && this.Id.Equals(retrieveVStorageObjSpec.Id))) && ((this.Datastore == null && retrieveVStorageObjSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(retrieveVStorageObjSpec.Datastore))) && ((this.LinkedView == null && retrieveVStorageObjSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(retrieveVStorageObjSpec.LinkedView))));
        }

        public override bool Equals(object retrieveVStorageObjSpec)
        {
            return Equals(retrieveVStorageObjSpec as RetrieveVStorageObjSpec);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class RetrieveVStorageObjSpec_LinkedView : IEquatable<RetrieveVStorageObjSpec_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(RetrieveVStorageObjSpec_LinkedView retrieveVStorageObjSpec_LinkedView)
        {
            return (retrieveVStorageObjSpec_LinkedView != null && ((this.Datastore == null && retrieveVStorageObjSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(retrieveVStorageObjSpec_LinkedView.Datastore))));
        }

        public override bool Equals(object retrieveVStorageObjSpec_LinkedView)
        {
            return Equals(retrieveVStorageObjSpec_LinkedView as RetrieveVStorageObjSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class RoleAddedEvent : RoleEvent, IEquatable<RoleAddedEvent>
    {
        public string[] PrivilegeList { get; set; }

        public bool Equals(RoleAddedEvent roleAddedEvent)
        {
            return (roleAddedEvent != null && ((this.PrivilegeList == null && roleAddedEvent.PrivilegeList == null) || (this.PrivilegeList != null && roleAddedEvent.PrivilegeList != null && Enumerable.SequenceEqual(this.PrivilegeList, roleAddedEvent.PrivilegeList))));
        }

        public override bool Equals(object roleAddedEvent)
        {
            return Equals(roleAddedEvent as RoleAddedEvent);
        }

        public override int GetHashCode()
        {
            return (PrivilegeList).GetHashCode();
        }
    }

    public class RoleEvent : AuthorizationEvent, IEquatable<RoleEvent>
    {
        public RoleEventArgument Role { get; set; }

        public bool Equals(RoleEvent roleEvent)
        {
            return (roleEvent != null && ((this.Role == null && roleEvent.Role == null) || (this.Role != null && this.Role.Equals(roleEvent.Role))));
        }

        public override bool Equals(object roleEvent)
        {
            return Equals(roleEvent as RoleEvent);
        }

        public override int GetHashCode()
        {
            return (Role).GetHashCode();
        }
    }

    public class RoleEventArgument : EventArgument, IEquatable<RoleEventArgument>
    {
        public int RoleId { get; set; }

        public string Name { get; set; }

        public bool Equals(RoleEventArgument roleEventArgument)
        {
            return (roleEventArgument != null && this.RoleId == roleEventArgument.RoleId && this.Name == roleEventArgument.Name);
        }

        public override bool Equals(object roleEventArgument)
        {
            return Equals(roleEventArgument as RoleEventArgument);
        }

        public override int GetHashCode()
        {
            return (RoleId + "_" + Name).GetHashCode();
        }
    }

    public class RoleRemovedEvent : RoleEvent, IEquatable<RoleRemovedEvent>
    {
        public bool Equals(RoleRemovedEvent roleRemovedEvent)
        {
            return (roleRemovedEvent != null && base.Equals(roleRemovedEvent));
        }

        public override bool Equals(object roleRemovedEvent)
        {
            return Equals(roleRemovedEvent as RoleRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class RoleUpdatedEvent : RoleEvent, IEquatable<RoleUpdatedEvent>
    {
        public string[] PrivilegeList { get; set; }

        public string PrevRoleName { get; set; }

        public string[] PrivilegesAdded { get; set; }

        public string[] PrivilegesRemoved { get; set; }

        public bool Equals(RoleUpdatedEvent roleUpdatedEvent)
        {
            return (roleUpdatedEvent != null && ((this.PrivilegeList == null && roleUpdatedEvent.PrivilegeList == null) || (this.PrivilegeList != null && roleUpdatedEvent.PrivilegeList != null && Enumerable.SequenceEqual(this.PrivilegeList, roleUpdatedEvent.PrivilegeList))) && this.PrevRoleName == roleUpdatedEvent.PrevRoleName && ((this.PrivilegesAdded == null && roleUpdatedEvent.PrivilegesAdded == null) || (this.PrivilegesAdded != null && roleUpdatedEvent.PrivilegesAdded != null && Enumerable.SequenceEqual(this.PrivilegesAdded, roleUpdatedEvent.PrivilegesAdded))) && ((this.PrivilegesRemoved == null && roleUpdatedEvent.PrivilegesRemoved == null) || (this.PrivilegesRemoved != null && roleUpdatedEvent.PrivilegesRemoved != null && Enumerable.SequenceEqual(this.PrivilegesRemoved, roleUpdatedEvent.PrivilegesRemoved))));
        }

        public override bool Equals(object roleUpdatedEvent)
        {
            return Equals(roleUpdatedEvent as RoleUpdatedEvent);
        }

        public override int GetHashCode()
        {
            return (PrivilegeList + "_" + PrevRoleName + "_" + PrivilegesAdded + "_" + PrivilegesRemoved).GetHashCode();
        }
    }

    public class RollbackEvent : DvsEvent, IEquatable<RollbackEvent>
    {
        public string HostName { get; set; }

        public string MethodName { get; set; }

        public bool Equals(RollbackEvent rollbackEvent)
        {
            return (rollbackEvent != null && this.HostName == rollbackEvent.HostName && this.MethodName == rollbackEvent.MethodName);
        }

        public override bool Equals(object rollbackEvent)
        {
            return Equals(rollbackEvent as RollbackEvent);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + MethodName).GetHashCode();
        }
    }

    public class RollbackFailure : DvsFault, IEquatable<RollbackFailure>
    {
        public string EntityName { get; set; }

        public string EntityType { get; set; }

        public bool Equals(RollbackFailure rollbackFailure)
        {
            return (rollbackFailure != null && this.EntityName == rollbackFailure.EntityName && this.EntityType == rollbackFailure.EntityType);
        }

        public override bool Equals(object rollbackFailure)
        {
            return Equals(rollbackFailure as RollbackFailure);
        }

        public override int GetHashCode()
        {
            return (EntityName + "_" + EntityType).GetHashCode();
        }
    }

    public class RuleViolation : VmConfigFault, IEquatable<RuleViolation>
    {
        public ManagedObjectReference Host { get; set; }

        public ClusterRuleInfo Rule { get; set; }

        public RuleViolation_LinkedView LinkedView { get; set; }

        public bool Equals(RuleViolation ruleViolation)
        {
            return (ruleViolation != null && ((this.Host == null && ruleViolation.Host == null) || (this.Host != null && this.Host.Equals(ruleViolation.Host))) && ((this.Rule == null && ruleViolation.Rule == null) || (this.Rule != null && this.Rule.Equals(ruleViolation.Rule))) && ((this.LinkedView == null && ruleViolation.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(ruleViolation.LinkedView))));
        }

        public override bool Equals(object ruleViolation)
        {
            return Equals(ruleViolation as RuleViolation);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Rule + "_" + LinkedView).GetHashCode();
        }
    }

    public class RuleViolation_LinkedView : IEquatable<RuleViolation_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(RuleViolation_LinkedView ruleViolation_LinkedView)
        {
            return (ruleViolation_LinkedView != null && ((this.Host == null && ruleViolation_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(ruleViolation_LinkedView.Host))));
        }

        public override bool Equals(object ruleViolation_LinkedView)
        {
            return Equals(ruleViolation_LinkedView as RuleViolation_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class RunScriptAction : Action, IEquatable<RunScriptAction>
    {
        public string Script { get; set; }

        public bool Equals(RunScriptAction runScriptAction)
        {
            return (runScriptAction != null && this.Script == runScriptAction.Script);
        }

        public override bool Equals(object runScriptAction)
        {
            return Equals(runScriptAction as RunScriptAction);
        }

        public override int GetHashCode()
        {
            return (Script).GetHashCode();
        }
    }

    public class RuntimeFault : MethodFault, IEquatable<RuntimeFault>
    {
        public bool Equals(RuntimeFault runtimeFault)
        {
            return (runtimeFault != null && base.Equals(runtimeFault));
        }

        public override bool Equals(object runtimeFault)
        {
            return Equals(runtimeFault as RuntimeFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SAMLTokenAuthentication : GuestAuthentication, IEquatable<SAMLTokenAuthentication>
    {
        public string Token { get; set; }

        public string Username { get; set; }

        public bool Equals(SAMLTokenAuthentication sAMLTokenAuthentication)
        {
            return (sAMLTokenAuthentication != null && this.Token == sAMLTokenAuthentication.Token && this.Username == sAMLTokenAuthentication.Username);
        }

        public override bool Equals(object sAMLTokenAuthentication)
        {
            return Equals(sAMLTokenAuthentication as SAMLTokenAuthentication);
        }

        public override int GetHashCode()
        {
            return (Token + "_" + Username).GetHashCode();
        }
    }

    public class SatpClaimRule : IEquatable<SatpClaimRule>
    {
        public SatpClaimRule()
        {
        }

        public string Name { get; set; }

        public string PSPOptions { get; set; }

        public string Transport { get; set; }

        public string Description { get; set; }

        public string Vendor { get; set; }

        public string Device { get; set; }

        public string Driver { get; set; }

        public string ClaimOptions { get; set; }

        public string DefaultPSP { get; set; }

        public string Options { get; set; }

        public string Model { get; set; }

        public bool Equals(SatpClaimRule satpClaimRule)
        {
            return (satpClaimRule != null && this.Name == satpClaimRule.Name && this.PSPOptions == satpClaimRule.PSPOptions && this.Transport == satpClaimRule.Transport && this.Description == satpClaimRule.Description && this.Vendor == satpClaimRule.Vendor && this.Device == satpClaimRule.Device && this.Driver == satpClaimRule.Driver && this.ClaimOptions == satpClaimRule.ClaimOptions && this.DefaultPSP == satpClaimRule.DefaultPSP && this.Options == satpClaimRule.Options && this.Model == satpClaimRule.Model);
        }

        public override bool Equals(object satpClaimRule)
        {
            return Equals(satpClaimRule as SatpClaimRule);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + PSPOptions + "_" + Transport + "_" + Description + "_" + Vendor + "_" + Device + "_" + Driver + "_" + ClaimOptions + "_" + DefaultPSP + "_" + Options + "_" + Model).GetHashCode();
        }
    }

    public class ScheduledHardwareUpgradeInfo : DynamicData, IEquatable<ScheduledHardwareUpgradeInfo>
    {
        public string UpgradePolicy { get; set; }

        public string VersionKey { get; set; }

        public string ScheduledHardwareUpgradeStatus { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(ScheduledHardwareUpgradeInfo scheduledHardwareUpgradeInfo)
        {
            return (scheduledHardwareUpgradeInfo != null && this.UpgradePolicy == scheduledHardwareUpgradeInfo.UpgradePolicy && this.VersionKey == scheduledHardwareUpgradeInfo.VersionKey && this.ScheduledHardwareUpgradeStatus == scheduledHardwareUpgradeInfo.ScheduledHardwareUpgradeStatus && ((this.Fault == null && scheduledHardwareUpgradeInfo.Fault == null) || (this.Fault != null && this.Fault.Equals(scheduledHardwareUpgradeInfo.Fault))));
        }

        public override bool Equals(object scheduledHardwareUpgradeInfo)
        {
            return Equals(scheduledHardwareUpgradeInfo as ScheduledHardwareUpgradeInfo);
        }

        public override int GetHashCode()
        {
            return (UpgradePolicy + "_" + VersionKey + "_" + ScheduledHardwareUpgradeStatus + "_" + Fault).GetHashCode();
        }
    }

    public class ScheduledTask : ExtensibleManagedObject, IEquatable<ScheduledTask>
    {
        public ScheduledTaskInfo Info { get; set; }

        public void RemoveScheduledTask()
        {
        }

        public void ReconfigureScheduledTask(ScheduledTaskSpec spec)
        {
        }

        public void RunScheduledTask()
        {
        }

        public bool Equals(ScheduledTask scheduledTask)
        {
            return (scheduledTask != null && ((this.Info == null && scheduledTask.Info == null) || (this.Info != null && this.Info.Equals(scheduledTask.Info))));
        }

        public override bool Equals(object scheduledTask)
        {
            return Equals(scheduledTask as ScheduledTask);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class ScheduledTaskCompletedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskCompletedEvent>
    {
        public bool Equals(ScheduledTaskCompletedEvent scheduledTaskCompletedEvent)
        {
            return (scheduledTaskCompletedEvent != null && base.Equals(scheduledTaskCompletedEvent));
        }

        public override bool Equals(object scheduledTaskCompletedEvent)
        {
            return Equals(scheduledTaskCompletedEvent as ScheduledTaskCompletedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ScheduledTaskCreatedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskCreatedEvent>
    {
        public bool Equals(ScheduledTaskCreatedEvent scheduledTaskCreatedEvent)
        {
            return (scheduledTaskCreatedEvent != null && base.Equals(scheduledTaskCreatedEvent));
        }

        public override bool Equals(object scheduledTaskCreatedEvent)
        {
            return Equals(scheduledTaskCreatedEvent as ScheduledTaskCreatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ScheduledTaskDescription : DynamicData, IEquatable<ScheduledTaskDescription>
    {
        public TypeDescription[] Action { get; set; }

        public ScheduledTaskDetail[] SchedulerInfo { get; set; }

        public ElementDescription[] State { get; set; }

        public ElementDescription[] DayOfWeek { get; set; }

        public ElementDescription[] WeekOfMonth { get; set; }

        public bool Equals(ScheduledTaskDescription scheduledTaskDescription)
        {
            return (scheduledTaskDescription != null && ((this.Action == null && scheduledTaskDescription.Action == null) || (this.Action != null && scheduledTaskDescription.Action != null && Enumerable.SequenceEqual(this.Action, scheduledTaskDescription.Action))) && ((this.SchedulerInfo == null && scheduledTaskDescription.SchedulerInfo == null) || (this.SchedulerInfo != null && scheduledTaskDescription.SchedulerInfo != null && Enumerable.SequenceEqual(this.SchedulerInfo, scheduledTaskDescription.SchedulerInfo))) && ((this.State == null && scheduledTaskDescription.State == null) || (this.State != null && scheduledTaskDescription.State != null && Enumerable.SequenceEqual(this.State, scheduledTaskDescription.State))) && ((this.DayOfWeek == null && scheduledTaskDescription.DayOfWeek == null) || (this.DayOfWeek != null && scheduledTaskDescription.DayOfWeek != null && Enumerable.SequenceEqual(this.DayOfWeek, scheduledTaskDescription.DayOfWeek))) && ((this.WeekOfMonth == null && scheduledTaskDescription.WeekOfMonth == null) || (this.WeekOfMonth != null && scheduledTaskDescription.WeekOfMonth != null && Enumerable.SequenceEqual(this.WeekOfMonth, scheduledTaskDescription.WeekOfMonth))));
        }

        public override bool Equals(object scheduledTaskDescription)
        {
            return Equals(scheduledTaskDescription as ScheduledTaskDescription);
        }

        public override int GetHashCode()
        {
            return (Action + "_" + SchedulerInfo + "_" + State + "_" + DayOfWeek + "_" + WeekOfMonth).GetHashCode();
        }
    }

    public class ScheduledTaskDetail : TypeDescription, IEquatable<ScheduledTaskDetail>
    {
        public string Frequency { get; set; }

        public bool Equals(ScheduledTaskDetail scheduledTaskDetail)
        {
            return (scheduledTaskDetail != null && this.Frequency == scheduledTaskDetail.Frequency);
        }

        public override bool Equals(object scheduledTaskDetail)
        {
            return Equals(scheduledTaskDetail as ScheduledTaskDetail);
        }

        public override int GetHashCode()
        {
            return (Frequency).GetHashCode();
        }
    }

    public class ScheduledTaskEmailCompletedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskEmailCompletedEvent>
    {
        public string To { get; set; }

        public bool Equals(ScheduledTaskEmailCompletedEvent scheduledTaskEmailCompletedEvent)
        {
            return (scheduledTaskEmailCompletedEvent != null && this.To == scheduledTaskEmailCompletedEvent.To);
        }

        public override bool Equals(object scheduledTaskEmailCompletedEvent)
        {
            return Equals(scheduledTaskEmailCompletedEvent as ScheduledTaskEmailCompletedEvent);
        }

        public override int GetHashCode()
        {
            return (To).GetHashCode();
        }
    }

    public class ScheduledTaskEmailFailedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskEmailFailedEvent>
    {
        public string To { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(ScheduledTaskEmailFailedEvent scheduledTaskEmailFailedEvent)
        {
            return (scheduledTaskEmailFailedEvent != null && this.To == scheduledTaskEmailFailedEvent.To && ((this.Reason == null && scheduledTaskEmailFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(scheduledTaskEmailFailedEvent.Reason))));
        }

        public override bool Equals(object scheduledTaskEmailFailedEvent)
        {
            return Equals(scheduledTaskEmailFailedEvent as ScheduledTaskEmailFailedEvent);
        }

        public override int GetHashCode()
        {
            return (To + "_" + Reason).GetHashCode();
        }
    }

    public class ScheduledTaskEvent : Event, IEquatable<ScheduledTaskEvent>
    {
        public ScheduledTaskEventArgument ScheduledTask { get; set; }

        public ManagedEntityEventArgument Entity { get; set; }

        public bool Equals(ScheduledTaskEvent scheduledTaskEvent)
        {
            return (scheduledTaskEvent != null && ((this.ScheduledTask == null && scheduledTaskEvent.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(scheduledTaskEvent.ScheduledTask))) && ((this.Entity == null && scheduledTaskEvent.Entity == null) || (this.Entity != null && this.Entity.Equals(scheduledTaskEvent.Entity))));
        }

        public override bool Equals(object scheduledTaskEvent)
        {
            return Equals(scheduledTaskEvent as ScheduledTaskEvent);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask + "_" + Entity).GetHashCode();
        }
    }

    public class ScheduledTaskEventArgument : EntityEventArgument, IEquatable<ScheduledTaskEventArgument>
    {
        public ManagedObjectReference ScheduledTask { get; set; }

        public ScheduledTaskEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(ScheduledTaskEventArgument scheduledTaskEventArgument)
        {
            return (scheduledTaskEventArgument != null && ((this.ScheduledTask == null && scheduledTaskEventArgument.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(scheduledTaskEventArgument.ScheduledTask))) && ((this.LinkedView == null && scheduledTaskEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(scheduledTaskEventArgument.LinkedView))));
        }

        public override bool Equals(object scheduledTaskEventArgument)
        {
            return Equals(scheduledTaskEventArgument as ScheduledTaskEventArgument);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask + "_" + LinkedView).GetHashCode();
        }
    }

    public class ScheduledTaskEventArgument_LinkedView : IEquatable<ScheduledTaskEventArgument_LinkedView>
    {
        public ScheduledTask ScheduledTask { get; set; }

        public bool Equals(ScheduledTaskEventArgument_LinkedView scheduledTaskEventArgument_LinkedView)
        {
            return (scheduledTaskEventArgument_LinkedView != null && ((this.ScheduledTask == null && scheduledTaskEventArgument_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(scheduledTaskEventArgument_LinkedView.ScheduledTask))));
        }

        public override bool Equals(object scheduledTaskEventArgument_LinkedView)
        {
            return Equals(scheduledTaskEventArgument_LinkedView as ScheduledTaskEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask).GetHashCode();
        }
    }

    public class ScheduledTaskFailedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskFailedEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(ScheduledTaskFailedEvent scheduledTaskFailedEvent)
        {
            return (scheduledTaskFailedEvent != null && ((this.Reason == null && scheduledTaskFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(scheduledTaskFailedEvent.Reason))));
        }

        public override bool Equals(object scheduledTaskFailedEvent)
        {
            return Equals(scheduledTaskFailedEvent as ScheduledTaskFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class ScheduledTaskInfo : ScheduledTaskSpec, IEquatable<ScheduledTaskInfo>
    {
        public ManagedObjectReference ScheduledTask { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public DateTime LastModifiedTime { get; set; }

        public string LastModifiedUser { get; set; }

        public DateTime? NextRunTime { get; set; }

        public DateTime? PrevRunTime { get; set; }

        public TaskInfoState State { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public object Result { get; set; }

        public int? Progress { get; set; }

        public ManagedObjectReference ActiveTask { get; set; }

        public ManagedObjectReference TaskObject { get; set; }

        public ScheduledTaskInfo_LinkedView LinkedView { get; set; }

        public bool Equals(ScheduledTaskInfo scheduledTaskInfo)
        {
            return (scheduledTaskInfo != null && ((this.ScheduledTask == null && scheduledTaskInfo.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(scheduledTaskInfo.ScheduledTask))) && ((this.Entity == null && scheduledTaskInfo.Entity == null) || (this.Entity != null && this.Entity.Equals(scheduledTaskInfo.Entity))) && this.LastModifiedTime == scheduledTaskInfo.LastModifiedTime && this.LastModifiedUser == scheduledTaskInfo.LastModifiedUser && ((this.NextRunTime == null && scheduledTaskInfo.NextRunTime == null) || (this.NextRunTime != null && this.NextRunTime.Equals(scheduledTaskInfo.NextRunTime))) && ((this.PrevRunTime == null && scheduledTaskInfo.PrevRunTime == null) || (this.PrevRunTime != null && this.PrevRunTime.Equals(scheduledTaskInfo.PrevRunTime))) && this.State == scheduledTaskInfo.State && ((this.Error == null && scheduledTaskInfo.Error == null) || (this.Error != null && this.Error.Equals(scheduledTaskInfo.Error))) && ((this.Result == null && scheduledTaskInfo.Result == null) || (this.Result != null && this.Result.Equals(scheduledTaskInfo.Result))) && ((this.Progress == null && scheduledTaskInfo.Progress == null) || (this.Progress != null && this.Progress.Equals(scheduledTaskInfo.Progress))) && ((this.ActiveTask == null && scheduledTaskInfo.ActiveTask == null) || (this.ActiveTask != null && this.ActiveTask.Equals(scheduledTaskInfo.ActiveTask))) && ((this.TaskObject == null && scheduledTaskInfo.TaskObject == null) || (this.TaskObject != null && this.TaskObject.Equals(scheduledTaskInfo.TaskObject))) && ((this.LinkedView == null && scheduledTaskInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(scheduledTaskInfo.LinkedView))));
        }

        public override bool Equals(object scheduledTaskInfo)
        {
            return Equals(scheduledTaskInfo as ScheduledTaskInfo);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask + "_" + Entity + "_" + LastModifiedTime + "_" + LastModifiedUser + "_" + NextRunTime + "_" + PrevRunTime + "_" + State + "_" + Error + "_" + Result + "_" + Progress + "_" + ActiveTask + "_" + TaskObject + "_" + LinkedView).GetHashCode();
        }
    }

    public class ScheduledTaskInfo_LinkedView : IEquatable<ScheduledTaskInfo_LinkedView>
    {
        public ScheduledTask ScheduledTask { get; set; }

        public ManagedEntity Entity { get; set; }

        public Task ActiveTask { get; set; }

        public bool Equals(ScheduledTaskInfo_LinkedView scheduledTaskInfo_LinkedView)
        {
            return (scheduledTaskInfo_LinkedView != null && ((this.ScheduledTask == null && scheduledTaskInfo_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(scheduledTaskInfo_LinkedView.ScheduledTask))) && ((this.Entity == null && scheduledTaskInfo_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(scheduledTaskInfo_LinkedView.Entity))) && ((this.ActiveTask == null && scheduledTaskInfo_LinkedView.ActiveTask == null) || (this.ActiveTask != null && this.ActiveTask.Equals(scheduledTaskInfo_LinkedView.ActiveTask))));
        }

        public override bool Equals(object scheduledTaskInfo_LinkedView)
        {
            return Equals(scheduledTaskInfo_LinkedView as ScheduledTaskInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask + "_" + Entity + "_" + ActiveTask).GetHashCode();
        }
    }

    public class ScheduledTaskManager : ViewBase, IEquatable<ScheduledTaskManager>
    {
        public ManagedObjectReference[] ScheduledTask { get; set; }

        public ScheduledTaskDescription Description { get; set; }

        public ScheduledTaskManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateScheduledTask(ManagedObjectReference entity, ScheduledTaskSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference[] RetrieveEntityScheduledTask(ManagedObjectReference entity)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference CreateObjectScheduledTask(ManagedObjectReference obj, ScheduledTaskSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference[] RetrieveObjectScheduledTask(ManagedObjectReference obj)
        {
            return default(ManagedObjectReference[]);
        }

        public bool Equals(ScheduledTaskManager scheduledTaskManager)
        {
            return (scheduledTaskManager != null && ((this.ScheduledTask == null && scheduledTaskManager.ScheduledTask == null) || (this.ScheduledTask != null && scheduledTaskManager.ScheduledTask != null && Enumerable.SequenceEqual(this.ScheduledTask, scheduledTaskManager.ScheduledTask))) && ((this.Description == null && scheduledTaskManager.Description == null) || (this.Description != null && this.Description.Equals(scheduledTaskManager.Description))) && ((this.LinkedView == null && scheduledTaskManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(scheduledTaskManager.LinkedView))));
        }

        public override bool Equals(object scheduledTaskManager)
        {
            return Equals(scheduledTaskManager as ScheduledTaskManager);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask + "_" + Description + "_" + LinkedView).GetHashCode();
        }
    }

    public class ScheduledTaskManager_LinkedView : IEquatable<ScheduledTaskManager_LinkedView>
    {
        public ScheduledTask[] ScheduledTask { get; set; }

        public bool Equals(ScheduledTaskManager_LinkedView scheduledTaskManager_LinkedView)
        {
            return (scheduledTaskManager_LinkedView != null && ((this.ScheduledTask == null && scheduledTaskManager_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && scheduledTaskManager_LinkedView.ScheduledTask != null && Enumerable.SequenceEqual(this.ScheduledTask, scheduledTaskManager_LinkedView.ScheduledTask))));
        }

        public override bool Equals(object scheduledTaskManager_LinkedView)
        {
            return Equals(scheduledTaskManager_LinkedView as ScheduledTaskManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask).GetHashCode();
        }
    }

    public class ScheduledTaskReconfiguredEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskReconfiguredEvent>
    {
        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(ScheduledTaskReconfiguredEvent scheduledTaskReconfiguredEvent)
        {
            return (scheduledTaskReconfiguredEvent != null && ((this.ConfigChanges == null && scheduledTaskReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(scheduledTaskReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object scheduledTaskReconfiguredEvent)
        {
            return Equals(scheduledTaskReconfiguredEvent as ScheduledTaskReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigChanges).GetHashCode();
        }
    }

    public class ScheduledTaskRemovedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskRemovedEvent>
    {
        public bool Equals(ScheduledTaskRemovedEvent scheduledTaskRemovedEvent)
        {
            return (scheduledTaskRemovedEvent != null && base.Equals(scheduledTaskRemovedEvent));
        }

        public override bool Equals(object scheduledTaskRemovedEvent)
        {
            return Equals(scheduledTaskRemovedEvent as ScheduledTaskRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ScheduledTaskSpec : DynamicData, IEquatable<ScheduledTaskSpec>
    {
        public string Name { get; set; }

        public string Description { get; set; }

        public bool Enabled { get; set; }

        public TaskScheduler Scheduler { get; set; }

        public Action Action { get; set; }

        public string Notification { get; set; }

        public bool Equals(ScheduledTaskSpec scheduledTaskSpec)
        {
            return (scheduledTaskSpec != null && this.Name == scheduledTaskSpec.Name && this.Description == scheduledTaskSpec.Description && this.Enabled == scheduledTaskSpec.Enabled && ((this.Scheduler == null && scheduledTaskSpec.Scheduler == null) || (this.Scheduler != null && this.Scheduler.Equals(scheduledTaskSpec.Scheduler))) && ((this.Action == null && scheduledTaskSpec.Action == null) || (this.Action != null && this.Action.Equals(scheduledTaskSpec.Action))) && this.Notification == scheduledTaskSpec.Notification);
        }

        public override bool Equals(object scheduledTaskSpec)
        {
            return Equals(scheduledTaskSpec as ScheduledTaskSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Description + "_" + Enabled + "_" + Scheduler + "_" + Action + "_" + Notification).GetHashCode();
        }
    }

    public class ScheduledTaskStartedEvent : ScheduledTaskEvent, IEquatable<ScheduledTaskStartedEvent>
    {
        public bool Equals(ScheduledTaskStartedEvent scheduledTaskStartedEvent)
        {
            return (scheduledTaskStartedEvent != null && base.Equals(scheduledTaskStartedEvent));
        }

        public override bool Equals(object scheduledTaskStartedEvent)
        {
            return Equals(scheduledTaskStartedEvent as ScheduledTaskStartedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ScsiLun : HostDevice, IEquatable<ScsiLun>
    {
        public string Key { get; set; }

        public string Uuid { get; set; }

        public ScsiLunDescriptor[] Descriptor { get; set; }

        public string CanonicalName { get; set; }

        public string DisplayName { get; set; }

        public string LunType { get; set; }

        public string Vendor { get; set; }

        public string Model { get; set; }

        public string Revision { get; set; }

        public int? ScsiLevel { get; set; }

        public string SerialNumber { get; set; }

        public ScsiLunDurableName DurableName { get; set; }

        public ScsiLunDurableName[] AlternateName { get; set; }

        public sbyte[] StandardInquiry { get; set; }

        public int? QueueDepth { get; set; }

        public string[] OperationalState { get; set; }

        public ScsiLunCapabilities Capabilities { get; set; }

        public string VStorageSupport { get; set; }

        public bool? ProtocolEndpoint { get; set; }

        public bool Equals(ScsiLun scsiLun)
        {
            return (scsiLun != null && this.Key == scsiLun.Key && this.Uuid == scsiLun.Uuid && ((this.Descriptor == null && scsiLun.Descriptor == null) || (this.Descriptor != null && scsiLun.Descriptor != null && Enumerable.SequenceEqual(this.Descriptor, scsiLun.Descriptor))) && this.CanonicalName == scsiLun.CanonicalName && this.DisplayName == scsiLun.DisplayName && this.LunType == scsiLun.LunType && this.Vendor == scsiLun.Vendor && this.Model == scsiLun.Model && this.Revision == scsiLun.Revision && ((this.ScsiLevel == null && scsiLun.ScsiLevel == null) || (this.ScsiLevel != null && this.ScsiLevel.Equals(scsiLun.ScsiLevel))) && this.SerialNumber == scsiLun.SerialNumber && ((this.DurableName == null && scsiLun.DurableName == null) || (this.DurableName != null && this.DurableName.Equals(scsiLun.DurableName))) && ((this.AlternateName == null && scsiLun.AlternateName == null) || (this.AlternateName != null && scsiLun.AlternateName != null && Enumerable.SequenceEqual(this.AlternateName, scsiLun.AlternateName))) && ((this.StandardInquiry == null && scsiLun.StandardInquiry == null) || (this.StandardInquiry != null && scsiLun.StandardInquiry != null && Enumerable.SequenceEqual(this.StandardInquiry, scsiLun.StandardInquiry))) && ((this.QueueDepth == null && scsiLun.QueueDepth == null) || (this.QueueDepth != null && this.QueueDepth.Equals(scsiLun.QueueDepth))) && ((this.OperationalState == null && scsiLun.OperationalState == null) || (this.OperationalState != null && scsiLun.OperationalState != null && Enumerable.SequenceEqual(this.OperationalState, scsiLun.OperationalState))) && ((this.Capabilities == null && scsiLun.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(scsiLun.Capabilities))) && this.VStorageSupport == scsiLun.VStorageSupport && ((this.ProtocolEndpoint == null && scsiLun.ProtocolEndpoint == null) || (this.ProtocolEndpoint != null && this.ProtocolEndpoint.Equals(scsiLun.ProtocolEndpoint))));
        }

        public override bool Equals(object scsiLun)
        {
            return Equals(scsiLun as ScsiLun);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Uuid + "_" + Descriptor + "_" + CanonicalName + "_" + DisplayName + "_" + LunType + "_" + Vendor + "_" + Model + "_" + Revision + "_" + ScsiLevel + "_" + SerialNumber + "_" + DurableName + "_" + AlternateName + "_" + StandardInquiry + "_" + QueueDepth + "_" + OperationalState + "_" + Capabilities + "_" + VStorageSupport + "_" + ProtocolEndpoint).GetHashCode();
        }
    }

    public class ScsiLunCapabilities : DynamicData, IEquatable<ScsiLunCapabilities>
    {
        public bool UpdateDisplayNameSupported { get; set; }

        public bool Equals(ScsiLunCapabilities scsiLunCapabilities)
        {
            return (scsiLunCapabilities != null && this.UpdateDisplayNameSupported == scsiLunCapabilities.UpdateDisplayNameSupported);
        }

        public override bool Equals(object scsiLunCapabilities)
        {
            return Equals(scsiLunCapabilities as ScsiLunCapabilities);
        }

        public override int GetHashCode()
        {
            return (UpdateDisplayNameSupported).GetHashCode();
        }
    }

    public class ScsiLunDescriptor : DynamicData, IEquatable<ScsiLunDescriptor>
    {
        public string Quality { get; set; }

        public string Id { get; set; }

        public bool Equals(ScsiLunDescriptor scsiLunDescriptor)
        {
            return (scsiLunDescriptor != null && this.Quality == scsiLunDescriptor.Quality && this.Id == scsiLunDescriptor.Id);
        }

        public override bool Equals(object scsiLunDescriptor)
        {
            return Equals(scsiLunDescriptor as ScsiLunDescriptor);
        }

        public override int GetHashCode()
        {
            return (Quality + "_" + Id).GetHashCode();
        }
    }

    public class ScsiLunDurableName : DynamicData, IEquatable<ScsiLunDurableName>
    {
        public string Namespace { get; set; }

        public sbyte NamespaceId { get; set; }

        public sbyte[] Data { get; set; }

        public bool Equals(ScsiLunDurableName scsiLunDurableName)
        {
            return (scsiLunDurableName != null && this.Namespace == scsiLunDurableName.Namespace && this.NamespaceId == scsiLunDurableName.NamespaceId && ((this.Data == null && scsiLunDurableName.Data == null) || (this.Data != null && scsiLunDurableName.Data != null && Enumerable.SequenceEqual(this.Data, scsiLunDurableName.Data))));
        }

        public override bool Equals(object scsiLunDurableName)
        {
            return Equals(scsiLunDurableName as ScsiLunDurableName);
        }

        public override int GetHashCode()
        {
            return (Namespace + "_" + NamespaceId + "_" + Data).GetHashCode();
        }
    }

    public class SDDCBase : DynamicData, IEquatable<SDDCBase>
    {
        public bool Equals(SDDCBase sDDCBase)
        {
            return (sDDCBase != null && base.Equals(sDDCBase));
        }

        public override bool Equals(object sDDCBase)
        {
            return Equals(sDDCBase as SDDCBase);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SearchIndex : ViewBase, IEquatable<SearchIndex>
    {
        public ManagedObjectReference FindByUuid(ManagedObjectReference datacenter, string uuid, bool vmSearch, bool? instanceUuid)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference FindByDatastorePath(ManagedObjectReference datacenter, string path)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference FindByDnsName(ManagedObjectReference datacenter, string dnsName, bool vmSearch)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference FindByIp(ManagedObjectReference datacenter, string ip, bool vmSearch)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference FindByInventoryPath(string inventoryPath)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference FindChild(ManagedObjectReference entity, string name)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference[] FindAllByUuid(ManagedObjectReference datacenter, string uuid, bool vmSearch, bool? instanceUuid)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference[] FindAllByDnsName(ManagedObjectReference datacenter, string dnsName, bool vmSearch)
        {
            return default(ManagedObjectReference[]);
        }

        public ManagedObjectReference[] FindAllByIp(ManagedObjectReference datacenter, string ip, bool vmSearch)
        {
            return default(ManagedObjectReference[]);
        }

        public bool Equals(SearchIndex searchIndex)
        {
            return (searchIndex != null && base.Equals(searchIndex));
        }

        public override bool Equals(object searchIndex)
        {
            return Equals(searchIndex as SearchIndex);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SecondaryVmAlreadyDisabled : VmFaultToleranceIssue, IEquatable<SecondaryVmAlreadyDisabled>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(SecondaryVmAlreadyDisabled secondaryVmAlreadyDisabled)
        {
            return (secondaryVmAlreadyDisabled != null && this.InstanceUuid == secondaryVmAlreadyDisabled.InstanceUuid);
        }

        public override bool Equals(object secondaryVmAlreadyDisabled)
        {
            return Equals(secondaryVmAlreadyDisabled as SecondaryVmAlreadyDisabled);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class SecondaryVmAlreadyEnabled : VmFaultToleranceIssue, IEquatable<SecondaryVmAlreadyEnabled>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(SecondaryVmAlreadyEnabled secondaryVmAlreadyEnabled)
        {
            return (secondaryVmAlreadyEnabled != null && this.InstanceUuid == secondaryVmAlreadyEnabled.InstanceUuid);
        }

        public override bool Equals(object secondaryVmAlreadyEnabled)
        {
            return Equals(secondaryVmAlreadyEnabled as SecondaryVmAlreadyEnabled);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class SecondaryVmAlreadyRegistered : VmFaultToleranceIssue, IEquatable<SecondaryVmAlreadyRegistered>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(SecondaryVmAlreadyRegistered secondaryVmAlreadyRegistered)
        {
            return (secondaryVmAlreadyRegistered != null && this.InstanceUuid == secondaryVmAlreadyRegistered.InstanceUuid);
        }

        public override bool Equals(object secondaryVmAlreadyRegistered)
        {
            return Equals(secondaryVmAlreadyRegistered as SecondaryVmAlreadyRegistered);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class SecondaryVmNotRegistered : VmFaultToleranceIssue, IEquatable<SecondaryVmNotRegistered>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(SecondaryVmNotRegistered secondaryVmNotRegistered)
        {
            return (secondaryVmNotRegistered != null && this.InstanceUuid == secondaryVmNotRegistered.InstanceUuid);
        }

        public override bool Equals(object secondaryVmNotRegistered)
        {
            return Equals(secondaryVmNotRegistered as SecondaryVmNotRegistered);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class SecurityError : RuntimeFault, IEquatable<SecurityError>
    {
        public bool Equals(SecurityError securityError)
        {
            return (securityError != null && base.Equals(securityError));
        }

        public override bool Equals(object securityError)
        {
            return Equals(securityError as SecurityError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SecurityProfile : ApplyProfile, IEquatable<SecurityProfile>
    {
        public PermissionProfile[] Permission { get; set; }

        public bool Equals(SecurityProfile securityProfile)
        {
            return (securityProfile != null && ((this.Permission == null && securityProfile.Permission == null) || (this.Permission != null && securityProfile.Permission != null && Enumerable.SequenceEqual(this.Permission, securityProfile.Permission))));
        }

        public override bool Equals(object securityProfile)
        {
            return Equals(securityProfile as SecurityProfile);
        }

        public override int GetHashCode()
        {
            return (Permission).GetHashCode();
        }
    }

    public class SelectionSet : DynamicData, IEquatable<SelectionSet>
    {
        public bool Equals(SelectionSet selectionSet)
        {
            return (selectionSet != null && base.Equals(selectionSet));
        }

        public override bool Equals(object selectionSet)
        {
            return Equals(selectionSet as SelectionSet);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SelectionSpec : DynamicData, IEquatable<SelectionSpec>
    {
        public string Name { get; set; }

        public bool Equals(SelectionSpec selectionSpec)
        {
            return (selectionSpec != null && this.Name == selectionSpec.Name);
        }

        public override bool Equals(object selectionSpec)
        {
            return Equals(selectionSpec as SelectionSpec);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class SendEmailAction : Action, IEquatable<SendEmailAction>
    {
        public string ToList { get; set; }

        public string CcList { get; set; }

        public string Subject { get; set; }

        public string Body { get; set; }

        public bool Equals(SendEmailAction sendEmailAction)
        {
            return (sendEmailAction != null && this.ToList == sendEmailAction.ToList && this.CcList == sendEmailAction.CcList && this.Subject == sendEmailAction.Subject && this.Body == sendEmailAction.Body);
        }

        public override bool Equals(object sendEmailAction)
        {
            return Equals(sendEmailAction as SendEmailAction);
        }

        public override int GetHashCode()
        {
            return (ToList + "_" + CcList + "_" + Subject + "_" + Body).GetHashCode();
        }
    }

    public class SendSNMPAction : Action, IEquatable<SendSNMPAction>
    {
        public bool Equals(SendSNMPAction sendSNMPAction)
        {
            return (sendSNMPAction != null && base.Equals(sendSNMPAction));
        }

        public override bool Equals(object sendSNMPAction)
        {
            return Equals(sendSNMPAction as SendSNMPAction);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ServerLicenseExpiredEvent : LicenseEvent, IEquatable<ServerLicenseExpiredEvent>
    {
        public string Product { get; set; }

        public bool Equals(ServerLicenseExpiredEvent serverLicenseExpiredEvent)
        {
            return (serverLicenseExpiredEvent != null && this.Product == serverLicenseExpiredEvent.Product);
        }

        public override bool Equals(object serverLicenseExpiredEvent)
        {
            return Equals(serverLicenseExpiredEvent as ServerLicenseExpiredEvent);
        }

        public override int GetHashCode()
        {
            return (Product).GetHashCode();
        }
    }

    public class ServerStartedSessionEvent : SessionEvent, IEquatable<ServerStartedSessionEvent>
    {
        public bool Equals(ServerStartedSessionEvent serverStartedSessionEvent)
        {
            return (serverStartedSessionEvent != null && base.Equals(serverStartedSessionEvent));
        }

        public override bool Equals(object serverStartedSessionEvent)
        {
            return Equals(serverStartedSessionEvent as ServerStartedSessionEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ServiceConsolePortGroupProfile : PortGroupProfile, IEquatable<ServiceConsolePortGroupProfile>
    {
        public IpAddressProfile IpConfig { get; set; }

        public bool Equals(ServiceConsolePortGroupProfile serviceConsolePortGroupProfile)
        {
            return (serviceConsolePortGroupProfile != null && ((this.IpConfig == null && serviceConsolePortGroupProfile.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(serviceConsolePortGroupProfile.IpConfig))));
        }

        public override bool Equals(object serviceConsolePortGroupProfile)
        {
            return Equals(serviceConsolePortGroupProfile as ServiceConsolePortGroupProfile);
        }

        public override int GetHashCode()
        {
            return (IpConfig).GetHashCode();
        }
    }

    public class ServiceConsoleReservationInfo : DynamicData, IEquatable<ServiceConsoleReservationInfo>
    {
        public long ServiceConsoleReservedCfg { get; set; }

        public long ServiceConsoleReserved { get; set; }

        public long Unreserved { get; set; }

        public bool Equals(ServiceConsoleReservationInfo serviceConsoleReservationInfo)
        {
            return (serviceConsoleReservationInfo != null && this.ServiceConsoleReservedCfg == serviceConsoleReservationInfo.ServiceConsoleReservedCfg && this.ServiceConsoleReserved == serviceConsoleReservationInfo.ServiceConsoleReserved && this.Unreserved == serviceConsoleReservationInfo.Unreserved);
        }

        public override bool Equals(object serviceConsoleReservationInfo)
        {
            return Equals(serviceConsoleReservationInfo as ServiceConsoleReservationInfo);
        }

        public override int GetHashCode()
        {
            return (ServiceConsoleReservedCfg + "_" + ServiceConsoleReserved + "_" + Unreserved).GetHashCode();
        }
    }

    public class ServiceContent : DynamicData, IEquatable<ServiceContent>
    {
        public ManagedObjectReference RootFolder { get; set; }

        public ManagedObjectReference PropertyCollector { get; set; }

        public ManagedObjectReference ViewManager { get; set; }

        public AboutInfo About { get; set; }

        public ManagedObjectReference Setting { get; set; }

        public ManagedObjectReference UserDirectory { get; set; }

        public ManagedObjectReference SessionManager { get; set; }

        public ManagedObjectReference AuthorizationManager { get; set; }

        public ManagedObjectReference ServiceManager { get; set; }

        public ManagedObjectReference PerfManager { get; set; }

        public ManagedObjectReference ScheduledTaskManager { get; set; }

        public ManagedObjectReference AlarmManager { get; set; }

        public ManagedObjectReference EventManager { get; set; }

        public ManagedObjectReference TaskManager { get; set; }

        public ManagedObjectReference ExtensionManager { get; set; }

        public ManagedObjectReference CustomizationSpecManager { get; set; }

        public ManagedObjectReference CustomFieldsManager { get; set; }

        public ManagedObjectReference AccountManager { get; set; }

        public ManagedObjectReference DiagnosticManager { get; set; }

        public ManagedObjectReference LicenseManager { get; set; }

        public ManagedObjectReference SearchIndex { get; set; }

        public ManagedObjectReference FileManager { get; set; }

        public ManagedObjectReference DatastoreNamespaceManager { get; set; }

        public ManagedObjectReference VirtualDiskManager { get; set; }

        public ManagedObjectReference VirtualizationManager { get; set; }

        public ManagedObjectReference SnmpSystem { get; set; }

        public ManagedObjectReference VmProvisioningChecker { get; set; }

        public ManagedObjectReference VmCompatibilityChecker { get; set; }

        public ManagedObjectReference OvfManager { get; set; }

        public ManagedObjectReference IpPoolManager { get; set; }

        public ManagedObjectReference DvSwitchManager { get; set; }

        public ManagedObjectReference HostProfileManager { get; set; }

        public ManagedObjectReference ClusterProfileManager { get; set; }

        public ManagedObjectReference ComplianceManager { get; set; }

        public ManagedObjectReference LocalizationManager { get; set; }

        public ManagedObjectReference StorageResourceManager { get; set; }

        public ManagedObjectReference GuestOperationsManager { get; set; }

        public ManagedObjectReference OverheadMemoryManager { get; set; }

        public ManagedObjectReference CertificateManager { get; set; }

        public ManagedObjectReference IoFilterManager { get; set; }

        public ManagedObjectReference VStorageObjectManager { get; set; }

        public ManagedObjectReference HostSpecManager { get; set; }

        public ManagedObjectReference CryptoManager { get; set; }

        public ManagedObjectReference HealthUpdateManager { get; set; }

        public ManagedObjectReference FailoverClusterConfigurator { get; set; }

        public ManagedObjectReference FailoverClusterManager { get; set; }

        public ServiceContent_LinkedView LinkedView { get; set; }

        public bool Equals(ServiceContent serviceContent)
        {
            return (serviceContent != null && ((this.RootFolder == null && serviceContent.RootFolder == null) || (this.RootFolder != null && this.RootFolder.Equals(serviceContent.RootFolder))) && ((this.PropertyCollector == null && serviceContent.PropertyCollector == null) || (this.PropertyCollector != null && this.PropertyCollector.Equals(serviceContent.PropertyCollector))) && ((this.ViewManager == null && serviceContent.ViewManager == null) || (this.ViewManager != null && this.ViewManager.Equals(serviceContent.ViewManager))) && ((this.About == null && serviceContent.About == null) || (this.About != null && this.About.Equals(serviceContent.About))) && ((this.Setting == null && serviceContent.Setting == null) || (this.Setting != null && this.Setting.Equals(serviceContent.Setting))) && ((this.UserDirectory == null && serviceContent.UserDirectory == null) || (this.UserDirectory != null && this.UserDirectory.Equals(serviceContent.UserDirectory))) && ((this.SessionManager == null && serviceContent.SessionManager == null) || (this.SessionManager != null && this.SessionManager.Equals(serviceContent.SessionManager))) && ((this.AuthorizationManager == null && serviceContent.AuthorizationManager == null) || (this.AuthorizationManager != null && this.AuthorizationManager.Equals(serviceContent.AuthorizationManager))) && ((this.ServiceManager == null && serviceContent.ServiceManager == null) || (this.ServiceManager != null && this.ServiceManager.Equals(serviceContent.ServiceManager))) && ((this.PerfManager == null && serviceContent.PerfManager == null) || (this.PerfManager != null && this.PerfManager.Equals(serviceContent.PerfManager))) && ((this.ScheduledTaskManager == null && serviceContent.ScheduledTaskManager == null) || (this.ScheduledTaskManager != null && this.ScheduledTaskManager.Equals(serviceContent.ScheduledTaskManager))) && ((this.AlarmManager == null && serviceContent.AlarmManager == null) || (this.AlarmManager != null && this.AlarmManager.Equals(serviceContent.AlarmManager))) && ((this.EventManager == null && serviceContent.EventManager == null) || (this.EventManager != null && this.EventManager.Equals(serviceContent.EventManager))) && ((this.TaskManager == null && serviceContent.TaskManager == null) || (this.TaskManager != null && this.TaskManager.Equals(serviceContent.TaskManager))) && ((this.ExtensionManager == null && serviceContent.ExtensionManager == null) || (this.ExtensionManager != null && this.ExtensionManager.Equals(serviceContent.ExtensionManager))) && ((this.CustomizationSpecManager == null && serviceContent.CustomizationSpecManager == null) || (this.CustomizationSpecManager != null && this.CustomizationSpecManager.Equals(serviceContent.CustomizationSpecManager))) && ((this.CustomFieldsManager == null && serviceContent.CustomFieldsManager == null) || (this.CustomFieldsManager != null && this.CustomFieldsManager.Equals(serviceContent.CustomFieldsManager))) && ((this.AccountManager == null && serviceContent.AccountManager == null) || (this.AccountManager != null && this.AccountManager.Equals(serviceContent.AccountManager))) && ((this.DiagnosticManager == null && serviceContent.DiagnosticManager == null) || (this.DiagnosticManager != null && this.DiagnosticManager.Equals(serviceContent.DiagnosticManager))) && ((this.LicenseManager == null && serviceContent.LicenseManager == null) || (this.LicenseManager != null && this.LicenseManager.Equals(serviceContent.LicenseManager))) && ((this.SearchIndex == null && serviceContent.SearchIndex == null) || (this.SearchIndex != null && this.SearchIndex.Equals(serviceContent.SearchIndex))) && ((this.FileManager == null && serviceContent.FileManager == null) || (this.FileManager != null && this.FileManager.Equals(serviceContent.FileManager))) && ((this.DatastoreNamespaceManager == null && serviceContent.DatastoreNamespaceManager == null) || (this.DatastoreNamespaceManager != null && this.DatastoreNamespaceManager.Equals(serviceContent.DatastoreNamespaceManager))) && ((this.VirtualDiskManager == null && serviceContent.VirtualDiskManager == null) || (this.VirtualDiskManager != null && this.VirtualDiskManager.Equals(serviceContent.VirtualDiskManager))) && ((this.VirtualizationManager == null && serviceContent.VirtualizationManager == null) || (this.VirtualizationManager != null && this.VirtualizationManager.Equals(serviceContent.VirtualizationManager))) && ((this.SnmpSystem == null && serviceContent.SnmpSystem == null) || (this.SnmpSystem != null && this.SnmpSystem.Equals(serviceContent.SnmpSystem))) && ((this.VmProvisioningChecker == null && serviceContent.VmProvisioningChecker == null) || (this.VmProvisioningChecker != null && this.VmProvisioningChecker.Equals(serviceContent.VmProvisioningChecker))) && ((this.VmCompatibilityChecker == null && serviceContent.VmCompatibilityChecker == null) || (this.VmCompatibilityChecker != null && this.VmCompatibilityChecker.Equals(serviceContent.VmCompatibilityChecker))) && ((this.OvfManager == null && serviceContent.OvfManager == null) || (this.OvfManager != null && this.OvfManager.Equals(serviceContent.OvfManager))) && ((this.IpPoolManager == null && serviceContent.IpPoolManager == null) || (this.IpPoolManager != null && this.IpPoolManager.Equals(serviceContent.IpPoolManager))) && ((this.DvSwitchManager == null && serviceContent.DvSwitchManager == null) || (this.DvSwitchManager != null && this.DvSwitchManager.Equals(serviceContent.DvSwitchManager))) && ((this.HostProfileManager == null && serviceContent.HostProfileManager == null) || (this.HostProfileManager != null && this.HostProfileManager.Equals(serviceContent.HostProfileManager))) && ((this.ClusterProfileManager == null && serviceContent.ClusterProfileManager == null) || (this.ClusterProfileManager != null && this.ClusterProfileManager.Equals(serviceContent.ClusterProfileManager))) && ((this.ComplianceManager == null && serviceContent.ComplianceManager == null) || (this.ComplianceManager != null && this.ComplianceManager.Equals(serviceContent.ComplianceManager))) && ((this.LocalizationManager == null && serviceContent.LocalizationManager == null) || (this.LocalizationManager != null && this.LocalizationManager.Equals(serviceContent.LocalizationManager))) && ((this.StorageResourceManager == null && serviceContent.StorageResourceManager == null) || (this.StorageResourceManager != null && this.StorageResourceManager.Equals(serviceContent.StorageResourceManager))) && ((this.GuestOperationsManager == null && serviceContent.GuestOperationsManager == null) || (this.GuestOperationsManager != null && this.GuestOperationsManager.Equals(serviceContent.GuestOperationsManager))) && ((this.OverheadMemoryManager == null && serviceContent.OverheadMemoryManager == null) || (this.OverheadMemoryManager != null && this.OverheadMemoryManager.Equals(serviceContent.OverheadMemoryManager))) && ((this.CertificateManager == null && serviceContent.CertificateManager == null) || (this.CertificateManager != null && this.CertificateManager.Equals(serviceContent.CertificateManager))) && ((this.IoFilterManager == null && serviceContent.IoFilterManager == null) || (this.IoFilterManager != null && this.IoFilterManager.Equals(serviceContent.IoFilterManager))) && ((this.VStorageObjectManager == null && serviceContent.VStorageObjectManager == null) || (this.VStorageObjectManager != null && this.VStorageObjectManager.Equals(serviceContent.VStorageObjectManager))) && ((this.HostSpecManager == null && serviceContent.HostSpecManager == null) || (this.HostSpecManager != null && this.HostSpecManager.Equals(serviceContent.HostSpecManager))) && ((this.CryptoManager == null && serviceContent.CryptoManager == null) || (this.CryptoManager != null && this.CryptoManager.Equals(serviceContent.CryptoManager))) && ((this.HealthUpdateManager == null && serviceContent.HealthUpdateManager == null) || (this.HealthUpdateManager != null && this.HealthUpdateManager.Equals(serviceContent.HealthUpdateManager))) && ((this.FailoverClusterConfigurator == null && serviceContent.FailoverClusterConfigurator == null) || (this.FailoverClusterConfigurator != null && this.FailoverClusterConfigurator.Equals(serviceContent.FailoverClusterConfigurator))) && ((this.FailoverClusterManager == null && serviceContent.FailoverClusterManager == null) || (this.FailoverClusterManager != null && this.FailoverClusterManager.Equals(serviceContent.FailoverClusterManager))) && ((this.LinkedView == null && serviceContent.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(serviceContent.LinkedView))));
        }

        public override bool Equals(object serviceContent)
        {
            return Equals(serviceContent as ServiceContent);
        }

        public override int GetHashCode()
        {
            return (RootFolder + "_" + PropertyCollector + "_" + ViewManager + "_" + About + "_" + Setting + "_" + UserDirectory + "_" + SessionManager + "_" + AuthorizationManager + "_" + ServiceManager + "_" + PerfManager + "_" + ScheduledTaskManager + "_" + AlarmManager + "_" + EventManager + "_" + TaskManager + "_" + ExtensionManager + "_" + CustomizationSpecManager + "_" + CustomFieldsManager + "_" + AccountManager + "_" + DiagnosticManager + "_" + LicenseManager + "_" + SearchIndex + "_" + FileManager + "_" + DatastoreNamespaceManager + "_" + VirtualDiskManager + "_" + VirtualizationManager + "_" + SnmpSystem + "_" + VmProvisioningChecker + "_" + VmCompatibilityChecker + "_" + OvfManager + "_" + IpPoolManager + "_" + DvSwitchManager + "_" + HostProfileManager + "_" + ClusterProfileManager + "_" + ComplianceManager + "_" + LocalizationManager + "_" + StorageResourceManager + "_" + GuestOperationsManager + "_" + OverheadMemoryManager + "_" + CertificateManager + "_" + IoFilterManager + "_" + VStorageObjectManager + "_" + HostSpecManager + "_" + CryptoManager + "_" + HealthUpdateManager + "_" + FailoverClusterConfigurator + "_" + FailoverClusterManager + "_" + LinkedView).GetHashCode();
        }
    }

    public class ServiceContent_LinkedView : IEquatable<ServiceContent_LinkedView>
    {
        public Folder RootFolder { get; set; }

        public PropertyCollector PropertyCollector { get; set; }

        public ViewManager ViewManager { get; set; }

        public OptionManager Setting { get; set; }

        public UserDirectory UserDirectory { get; set; }

        public SessionManager SessionManager { get; set; }

        public AuthorizationManager AuthorizationManager { get; set; }

        public ServiceManager ServiceManager { get; set; }

        public PerformanceManager PerfManager { get; set; }

        public ScheduledTaskManager ScheduledTaskManager { get; set; }

        public AlarmManager AlarmManager { get; set; }

        public EventManager EventManager { get; set; }

        public TaskManager TaskManager { get; set; }

        public ExtensionManager ExtensionManager { get; set; }

        public CustomizationSpecManager CustomizationSpecManager { get; set; }

        public CustomFieldsManager CustomFieldsManager { get; set; }

        public HostLocalAccountManager AccountManager { get; set; }

        public DiagnosticManager DiagnosticManager { get; set; }

        public LicenseManager LicenseManager { get; set; }

        public SearchIndex SearchIndex { get; set; }

        public FileManager FileManager { get; set; }

        public DatastoreNamespaceManager DatastoreNamespaceManager { get; set; }

        public VirtualDiskManager VirtualDiskManager { get; set; }

        public VirtualizationManager VirtualizationManager { get; set; }

        public HostSnmpSystem SnmpSystem { get; set; }

        public VirtualMachineProvisioningChecker VmProvisioningChecker { get; set; }

        public VirtualMachineCompatibilityChecker VmCompatibilityChecker { get; set; }

        public OvfManager OvfManager { get; set; }

        public IpPoolManager IpPoolManager { get; set; }

        public DistributedVirtualSwitchManager DvSwitchManager { get; set; }

        public HostProfileManager HostProfileManager { get; set; }

        public ClusterProfileManager ClusterProfileManager { get; set; }

        public ProfileComplianceManager ComplianceManager { get; set; }

        public LocalizationManager LocalizationManager { get; set; }

        public StorageResourceManager StorageResourceManager { get; set; }

        public GuestOperationsManager GuestOperationsManager { get; set; }

        public OverheadMemoryManager OverheadMemoryManager { get; set; }

        public CertificateManager CertificateManager { get; set; }

        public IoFilterManager IoFilterManager { get; set; }

        public VStorageObjectManagerBase VStorageObjectManager { get; set; }

        public HostSpecificationManager HostSpecManager { get; set; }

        public CryptoManager CryptoManager { get; set; }

        public HealthUpdateManager HealthUpdateManager { get; set; }

        public FailoverClusterConfigurator FailoverClusterConfigurator { get; set; }

        public FailoverClusterManager FailoverClusterManager { get; set; }

        public bool Equals(ServiceContent_LinkedView serviceContent_LinkedView)
        {
            return (serviceContent_LinkedView != null && ((this.RootFolder == null && serviceContent_LinkedView.RootFolder == null) || (this.RootFolder != null && this.RootFolder.Equals(serviceContent_LinkedView.RootFolder))) && ((this.PropertyCollector == null && serviceContent_LinkedView.PropertyCollector == null) || (this.PropertyCollector != null && this.PropertyCollector.Equals(serviceContent_LinkedView.PropertyCollector))) && ((this.ViewManager == null && serviceContent_LinkedView.ViewManager == null) || (this.ViewManager != null && this.ViewManager.Equals(serviceContent_LinkedView.ViewManager))) && ((this.Setting == null && serviceContent_LinkedView.Setting == null) || (this.Setting != null && this.Setting.Equals(serviceContent_LinkedView.Setting))) && ((this.UserDirectory == null && serviceContent_LinkedView.UserDirectory == null) || (this.UserDirectory != null && this.UserDirectory.Equals(serviceContent_LinkedView.UserDirectory))) && ((this.SessionManager == null && serviceContent_LinkedView.SessionManager == null) || (this.SessionManager != null && this.SessionManager.Equals(serviceContent_LinkedView.SessionManager))) && ((this.AuthorizationManager == null && serviceContent_LinkedView.AuthorizationManager == null) || (this.AuthorizationManager != null && this.AuthorizationManager.Equals(serviceContent_LinkedView.AuthorizationManager))) && ((this.ServiceManager == null && serviceContent_LinkedView.ServiceManager == null) || (this.ServiceManager != null && this.ServiceManager.Equals(serviceContent_LinkedView.ServiceManager))) && ((this.PerfManager == null && serviceContent_LinkedView.PerfManager == null) || (this.PerfManager != null && this.PerfManager.Equals(serviceContent_LinkedView.PerfManager))) && ((this.ScheduledTaskManager == null && serviceContent_LinkedView.ScheduledTaskManager == null) || (this.ScheduledTaskManager != null && this.ScheduledTaskManager.Equals(serviceContent_LinkedView.ScheduledTaskManager))) && ((this.AlarmManager == null && serviceContent_LinkedView.AlarmManager == null) || (this.AlarmManager != null && this.AlarmManager.Equals(serviceContent_LinkedView.AlarmManager))) && ((this.EventManager == null && serviceContent_LinkedView.EventManager == null) || (this.EventManager != null && this.EventManager.Equals(serviceContent_LinkedView.EventManager))) && ((this.TaskManager == null && serviceContent_LinkedView.TaskManager == null) || (this.TaskManager != null && this.TaskManager.Equals(serviceContent_LinkedView.TaskManager))) && ((this.ExtensionManager == null && serviceContent_LinkedView.ExtensionManager == null) || (this.ExtensionManager != null && this.ExtensionManager.Equals(serviceContent_LinkedView.ExtensionManager))) && ((this.CustomizationSpecManager == null && serviceContent_LinkedView.CustomizationSpecManager == null) || (this.CustomizationSpecManager != null && this.CustomizationSpecManager.Equals(serviceContent_LinkedView.CustomizationSpecManager))) && ((this.CustomFieldsManager == null && serviceContent_LinkedView.CustomFieldsManager == null) || (this.CustomFieldsManager != null && this.CustomFieldsManager.Equals(serviceContent_LinkedView.CustomFieldsManager))) && ((this.AccountManager == null && serviceContent_LinkedView.AccountManager == null) || (this.AccountManager != null && this.AccountManager.Equals(serviceContent_LinkedView.AccountManager))) && ((this.DiagnosticManager == null && serviceContent_LinkedView.DiagnosticManager == null) || (this.DiagnosticManager != null && this.DiagnosticManager.Equals(serviceContent_LinkedView.DiagnosticManager))) && ((this.LicenseManager == null && serviceContent_LinkedView.LicenseManager == null) || (this.LicenseManager != null && this.LicenseManager.Equals(serviceContent_LinkedView.LicenseManager))) && ((this.SearchIndex == null && serviceContent_LinkedView.SearchIndex == null) || (this.SearchIndex != null && this.SearchIndex.Equals(serviceContent_LinkedView.SearchIndex))) && ((this.FileManager == null && serviceContent_LinkedView.FileManager == null) || (this.FileManager != null && this.FileManager.Equals(serviceContent_LinkedView.FileManager))) && ((this.DatastoreNamespaceManager == null && serviceContent_LinkedView.DatastoreNamespaceManager == null) || (this.DatastoreNamespaceManager != null && this.DatastoreNamespaceManager.Equals(serviceContent_LinkedView.DatastoreNamespaceManager))) && ((this.VirtualDiskManager == null && serviceContent_LinkedView.VirtualDiskManager == null) || (this.VirtualDiskManager != null && this.VirtualDiskManager.Equals(serviceContent_LinkedView.VirtualDiskManager))) && ((this.VirtualizationManager == null && serviceContent_LinkedView.VirtualizationManager == null) || (this.VirtualizationManager != null && this.VirtualizationManager.Equals(serviceContent_LinkedView.VirtualizationManager))) && ((this.SnmpSystem == null && serviceContent_LinkedView.SnmpSystem == null) || (this.SnmpSystem != null && this.SnmpSystem.Equals(serviceContent_LinkedView.SnmpSystem))) && ((this.VmProvisioningChecker == null && serviceContent_LinkedView.VmProvisioningChecker == null) || (this.VmProvisioningChecker != null && this.VmProvisioningChecker.Equals(serviceContent_LinkedView.VmProvisioningChecker))) && ((this.VmCompatibilityChecker == null && serviceContent_LinkedView.VmCompatibilityChecker == null) || (this.VmCompatibilityChecker != null && this.VmCompatibilityChecker.Equals(serviceContent_LinkedView.VmCompatibilityChecker))) && ((this.OvfManager == null && serviceContent_LinkedView.OvfManager == null) || (this.OvfManager != null && this.OvfManager.Equals(serviceContent_LinkedView.OvfManager))) && ((this.IpPoolManager == null && serviceContent_LinkedView.IpPoolManager == null) || (this.IpPoolManager != null && this.IpPoolManager.Equals(serviceContent_LinkedView.IpPoolManager))) && ((this.DvSwitchManager == null && serviceContent_LinkedView.DvSwitchManager == null) || (this.DvSwitchManager != null && this.DvSwitchManager.Equals(serviceContent_LinkedView.DvSwitchManager))) && ((this.HostProfileManager == null && serviceContent_LinkedView.HostProfileManager == null) || (this.HostProfileManager != null && this.HostProfileManager.Equals(serviceContent_LinkedView.HostProfileManager))) && ((this.ClusterProfileManager == null && serviceContent_LinkedView.ClusterProfileManager == null) || (this.ClusterProfileManager != null && this.ClusterProfileManager.Equals(serviceContent_LinkedView.ClusterProfileManager))) && ((this.ComplianceManager == null && serviceContent_LinkedView.ComplianceManager == null) || (this.ComplianceManager != null && this.ComplianceManager.Equals(serviceContent_LinkedView.ComplianceManager))) && ((this.LocalizationManager == null && serviceContent_LinkedView.LocalizationManager == null) || (this.LocalizationManager != null && this.LocalizationManager.Equals(serviceContent_LinkedView.LocalizationManager))) && ((this.StorageResourceManager == null && serviceContent_LinkedView.StorageResourceManager == null) || (this.StorageResourceManager != null && this.StorageResourceManager.Equals(serviceContent_LinkedView.StorageResourceManager))) && ((this.GuestOperationsManager == null && serviceContent_LinkedView.GuestOperationsManager == null) || (this.GuestOperationsManager != null && this.GuestOperationsManager.Equals(serviceContent_LinkedView.GuestOperationsManager))) && ((this.OverheadMemoryManager == null && serviceContent_LinkedView.OverheadMemoryManager == null) || (this.OverheadMemoryManager != null && this.OverheadMemoryManager.Equals(serviceContent_LinkedView.OverheadMemoryManager))) && ((this.CertificateManager == null && serviceContent_LinkedView.CertificateManager == null) || (this.CertificateManager != null && this.CertificateManager.Equals(serviceContent_LinkedView.CertificateManager))) && ((this.IoFilterManager == null && serviceContent_LinkedView.IoFilterManager == null) || (this.IoFilterManager != null && this.IoFilterManager.Equals(serviceContent_LinkedView.IoFilterManager))) && ((this.VStorageObjectManager == null && serviceContent_LinkedView.VStorageObjectManager == null) || (this.VStorageObjectManager != null && this.VStorageObjectManager.Equals(serviceContent_LinkedView.VStorageObjectManager))) && ((this.HostSpecManager == null && serviceContent_LinkedView.HostSpecManager == null) || (this.HostSpecManager != null && this.HostSpecManager.Equals(serviceContent_LinkedView.HostSpecManager))) && ((this.CryptoManager == null && serviceContent_LinkedView.CryptoManager == null) || (this.CryptoManager != null && this.CryptoManager.Equals(serviceContent_LinkedView.CryptoManager))) && ((this.HealthUpdateManager == null && serviceContent_LinkedView.HealthUpdateManager == null) || (this.HealthUpdateManager != null && this.HealthUpdateManager.Equals(serviceContent_LinkedView.HealthUpdateManager))) && ((this.FailoverClusterConfigurator == null && serviceContent_LinkedView.FailoverClusterConfigurator == null) || (this.FailoverClusterConfigurator != null && this.FailoverClusterConfigurator.Equals(serviceContent_LinkedView.FailoverClusterConfigurator))) && ((this.FailoverClusterManager == null && serviceContent_LinkedView.FailoverClusterManager == null) || (this.FailoverClusterManager != null && this.FailoverClusterManager.Equals(serviceContent_LinkedView.FailoverClusterManager))));
        }

        public override bool Equals(object serviceContent_LinkedView)
        {
            return Equals(serviceContent_LinkedView as ServiceContent_LinkedView);
        }

        public override int GetHashCode()
        {
            return (RootFolder + "_" + PropertyCollector + "_" + ViewManager + "_" + Setting + "_" + UserDirectory + "_" + SessionManager + "_" + AuthorizationManager + "_" + ServiceManager + "_" + PerfManager + "_" + ScheduledTaskManager + "_" + AlarmManager + "_" + EventManager + "_" + TaskManager + "_" + ExtensionManager + "_" + CustomizationSpecManager + "_" + CustomFieldsManager + "_" + AccountManager + "_" + DiagnosticManager + "_" + LicenseManager + "_" + SearchIndex + "_" + FileManager + "_" + DatastoreNamespaceManager + "_" + VirtualDiskManager + "_" + VirtualizationManager + "_" + SnmpSystem + "_" + VmProvisioningChecker + "_" + VmCompatibilityChecker + "_" + OvfManager + "_" + IpPoolManager + "_" + DvSwitchManager + "_" + HostProfileManager + "_" + ClusterProfileManager + "_" + ComplianceManager + "_" + LocalizationManager + "_" + StorageResourceManager + "_" + GuestOperationsManager + "_" + OverheadMemoryManager + "_" + CertificateManager + "_" + IoFilterManager + "_" + VStorageObjectManager + "_" + HostSpecManager + "_" + CryptoManager + "_" + HealthUpdateManager + "_" + FailoverClusterConfigurator + "_" + FailoverClusterManager).GetHashCode();
        }
    }

    public class ServiceInstance : ViewBase, IEquatable<ServiceInstance>
    {
        public DateTime ServerClock { get; set; }

        public Capability Capability { get; set; }

        public ServiceContent Content { get; set; }

        public DateTime CurrentTime()
        {
            return default(DateTime);
        }

        public ServiceContent RetrieveServiceContent()
        {
            return default(ServiceContent);
        }

        public Event[] ValidateMigration(ManagedObjectReference[] vm, VirtualMachinePowerState? state, string[] testType, ManagedObjectReference pool, ManagedObjectReference host)
        {
            return default(Event[]);
        }

        public HostVMotionCompatibility[] QueryVMotionCompatibility(ManagedObjectReference vm, ManagedObjectReference[] host, string[] compatibility)
        {
            return default(HostVMotionCompatibility[]);
        }

        public ProductComponentInfo[] RetrieveProductComponents()
        {
            return default(ProductComponentInfo[]);
        }

        public bool Equals(ServiceInstance serviceInstance)
        {
            return (serviceInstance != null && this.ServerClock == serviceInstance.ServerClock && ((this.Capability == null && serviceInstance.Capability == null) || (this.Capability != null && this.Capability.Equals(serviceInstance.Capability))) && ((this.Content == null && serviceInstance.Content == null) || (this.Content != null && this.Content.Equals(serviceInstance.Content))));
        }

        public override bool Equals(object serviceInstance)
        {
            return Equals(serviceInstance as ServiceInstance);
        }

        public override int GetHashCode()
        {
            return (ServerClock + "_" + Capability + "_" + Content).GetHashCode();
        }
    }

    public class ServiceLocator : DynamicData, IEquatable<ServiceLocator>
    {
        public string InstanceUuid { get; set; }

        public string Url { get; set; }

        public ServiceLocatorCredential Credential { get; set; }

        public string SslThumbprint { get; set; }

        public bool Equals(ServiceLocator serviceLocator)
        {
            return (serviceLocator != null && this.InstanceUuid == serviceLocator.InstanceUuid && this.Url == serviceLocator.Url && ((this.Credential == null && serviceLocator.Credential == null) || (this.Credential != null && this.Credential.Equals(serviceLocator.Credential))) && this.SslThumbprint == serviceLocator.SslThumbprint);
        }

        public override bool Equals(object serviceLocator)
        {
            return Equals(serviceLocator as ServiceLocator);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid + "_" + Url + "_" + Credential + "_" + SslThumbprint).GetHashCode();
        }
    }

    public class ServiceLocatorCredential : DynamicData, IEquatable<ServiceLocatorCredential>
    {
        public bool Equals(ServiceLocatorCredential serviceLocatorCredential)
        {
            return (serviceLocatorCredential != null && base.Equals(serviceLocatorCredential));
        }

        public override bool Equals(object serviceLocatorCredential)
        {
            return Equals(serviceLocatorCredential as ServiceLocatorCredential);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ServiceLocatorNamePassword : ServiceLocatorCredential, IEquatable<ServiceLocatorNamePassword>
    {
        public string Username { get; set; }

        public string Password { get; set; }

        public bool Equals(ServiceLocatorNamePassword serviceLocatorNamePassword)
        {
            return (serviceLocatorNamePassword != null && this.Username == serviceLocatorNamePassword.Username && this.Password == serviceLocatorNamePassword.Password);
        }

        public override bool Equals(object serviceLocatorNamePassword)
        {
            return Equals(serviceLocatorNamePassword as ServiceLocatorNamePassword);
        }

        public override int GetHashCode()
        {
            return (Username + "_" + Password).GetHashCode();
        }
    }

    public class ServiceLocatorSAMLCredential : ServiceLocatorCredential, IEquatable<ServiceLocatorSAMLCredential>
    {
        public string Token { get; set; }

        public bool Equals(ServiceLocatorSAMLCredential serviceLocatorSAMLCredential)
        {
            return (serviceLocatorSAMLCredential != null && this.Token == serviceLocatorSAMLCredential.Token);
        }

        public override bool Equals(object serviceLocatorSAMLCredential)
        {
            return Equals(serviceLocatorSAMLCredential as ServiceLocatorSAMLCredential);
        }

        public override int GetHashCode()
        {
            return (Token).GetHashCode();
        }
    }

    public class ServiceManager : ViewBase, IEquatable<ServiceManager>
    {
        public ServiceManagerServiceInfo[] Service { get; set; }

        public ServiceManagerServiceInfo[] QueryServiceList(string serviceName, string[] location)
        {
            return default(ServiceManagerServiceInfo[]);
        }

        public bool Equals(ServiceManager serviceManager)
        {
            return (serviceManager != null && ((this.Service == null && serviceManager.Service == null) || (this.Service != null && serviceManager.Service != null && Enumerable.SequenceEqual(this.Service, serviceManager.Service))));
        }

        public override bool Equals(object serviceManager)
        {
            return Equals(serviceManager as ServiceManager);
        }

        public override int GetHashCode()
        {
            return (Service).GetHashCode();
        }
    }

    public class ServiceManagerServiceInfo : DynamicData, IEquatable<ServiceManagerServiceInfo>
    {
        public string ServiceName { get; set; }

        public string[] Location { get; set; }

        public ManagedObjectReference Service { get; set; }

        public string Description { get; set; }

        public bool Equals(ServiceManagerServiceInfo serviceManagerServiceInfo)
        {
            return (serviceManagerServiceInfo != null && this.ServiceName == serviceManagerServiceInfo.ServiceName && ((this.Location == null && serviceManagerServiceInfo.Location == null) || (this.Location != null && serviceManagerServiceInfo.Location != null && Enumerable.SequenceEqual(this.Location, serviceManagerServiceInfo.Location))) && ((this.Service == null && serviceManagerServiceInfo.Service == null) || (this.Service != null && this.Service.Equals(serviceManagerServiceInfo.Service))) && this.Description == serviceManagerServiceInfo.Description);
        }

        public override bool Equals(object serviceManagerServiceInfo)
        {
            return Equals(serviceManagerServiceInfo as ServiceManagerServiceInfo);
        }

        public override int GetHashCode()
        {
            return (ServiceName + "_" + Location + "_" + Service + "_" + Description).GetHashCode();
        }
    }

    public class ServiceProfile : ApplyProfile, IEquatable<ServiceProfile>
    {
        public string Key { get; set; }

        public bool Equals(ServiceProfile serviceProfile)
        {
            return (serviceProfile != null && this.Key == serviceProfile.Key);
        }

        public override bool Equals(object serviceProfile)
        {
            return Equals(serviceProfile as ServiceProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class SeSparseVirtualDiskSpec : FileBackedVirtualDiskSpec, IEquatable<SeSparseVirtualDiskSpec>
    {
        public int? GrainSizeKb { get; set; }

        public bool Equals(SeSparseVirtualDiskSpec seSparseVirtualDiskSpec)
        {
            return (seSparseVirtualDiskSpec != null && ((this.GrainSizeKb == null && seSparseVirtualDiskSpec.GrainSizeKb == null) || (this.GrainSizeKb != null && this.GrainSizeKb.Equals(seSparseVirtualDiskSpec.GrainSizeKb))));
        }

        public override bool Equals(object seSparseVirtualDiskSpec)
        {
            return Equals(seSparseVirtualDiskSpec as SeSparseVirtualDiskSpec);
        }

        public override int GetHashCode()
        {
            return (GrainSizeKb).GetHashCode();
        }
    }

    public class SessionEvent : Event, IEquatable<SessionEvent>
    {
        public bool Equals(SessionEvent sessionEvent)
        {
            return (sessionEvent != null && base.Equals(sessionEvent));
        }

        public override bool Equals(object sessionEvent)
        {
            return Equals(sessionEvent as SessionEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SessionManager : ViewBase, IEquatable<SessionManager>
    {
        public UserSession[] SessionList { get; set; }

        public UserSession CurrentSession { get; set; }

        public string Message { get; set; }

        public string[] MessageLocaleList { get; set; }

        public string[] SupportedLocaleList { get; set; }

        public string DefaultLocale { get; set; }

        public void UpdateServiceMessage(string message)
        {
        }

        public UserSession LoginByToken(string locale)
        {
            return default(UserSession);
        }

        public UserSession Login(string userName, string password, string locale)
        {
            return default(UserSession);
        }

        public UserSession LoginBySSPI(string base64Token, string locale)
        {
            return default(UserSession);
        }

        public void Logout()
        {
        }

        public SessionManagerLocalTicket AcquireLocalTicket(string userName)
        {
            return default(SessionManagerLocalTicket);
        }

        public SessionManagerGenericServiceTicket AcquireGenericServiceTicket(SessionManagerServiceRequestSpec spec)
        {
            return default(SessionManagerGenericServiceTicket);
        }

        public void TerminateSession(string[] sessionId)
        {
        }

        public void SetLocale(string locale)
        {
        }

        public UserSession LoginExtensionBySubjectName(string extensionKey, string locale)
        {
            return default(UserSession);
        }

        public UserSession LoginExtensionByCertificate(string extensionKey, string locale)
        {
            return default(UserSession);
        }

        public UserSession ImpersonateUser(string userName, string locale)
        {
            return default(UserSession);
        }

        public bool SessionIsActive(string sessionID, string userName)
        {
            return default(bool);
        }

        public string AcquireCloneTicket()
        {
            return default(string);
        }

        public UserSession CloneSession(string cloneTicket)
        {
            return default(UserSession);
        }

        public bool Equals(SessionManager sessionManager)
        {
            return (sessionManager != null && ((this.SessionList == null && sessionManager.SessionList == null) || (this.SessionList != null && sessionManager.SessionList != null && Enumerable.SequenceEqual(this.SessionList, sessionManager.SessionList))) && ((this.CurrentSession == null && sessionManager.CurrentSession == null) || (this.CurrentSession != null && this.CurrentSession.Equals(sessionManager.CurrentSession))) && this.Message == sessionManager.Message && ((this.MessageLocaleList == null && sessionManager.MessageLocaleList == null) || (this.MessageLocaleList != null && sessionManager.MessageLocaleList != null && Enumerable.SequenceEqual(this.MessageLocaleList, sessionManager.MessageLocaleList))) && ((this.SupportedLocaleList == null && sessionManager.SupportedLocaleList == null) || (this.SupportedLocaleList != null && sessionManager.SupportedLocaleList != null && Enumerable.SequenceEqual(this.SupportedLocaleList, sessionManager.SupportedLocaleList))) && this.DefaultLocale == sessionManager.DefaultLocale);
        }

        public override bool Equals(object sessionManager)
        {
            return Equals(sessionManager as SessionManager);
        }

        public override int GetHashCode()
        {
            return (SessionList + "_" + CurrentSession + "_" + Message + "_" + MessageLocaleList + "_" + SupportedLocaleList + "_" + DefaultLocale).GetHashCode();
        }
    }

    public class SessionManagerGenericServiceTicket : DynamicData, IEquatable<SessionManagerGenericServiceTicket>
    {
        public string Id { get; set; }

        public string HostName { get; set; }

        public string SslThumbprint { get; set; }

        public bool Equals(SessionManagerGenericServiceTicket sessionManagerGenericServiceTicket)
        {
            return (sessionManagerGenericServiceTicket != null && this.Id == sessionManagerGenericServiceTicket.Id && this.HostName == sessionManagerGenericServiceTicket.HostName && this.SslThumbprint == sessionManagerGenericServiceTicket.SslThumbprint);
        }

        public override bool Equals(object sessionManagerGenericServiceTicket)
        {
            return Equals(sessionManagerGenericServiceTicket as SessionManagerGenericServiceTicket);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + HostName + "_" + SslThumbprint).GetHashCode();
        }
    }

    public class SessionManagerHttpServiceRequestSpec : SessionManagerServiceRequestSpec, IEquatable<SessionManagerHttpServiceRequestSpec>
    {
        public string Method { get; set; }

        public string Url { get; set; }

        public bool Equals(SessionManagerHttpServiceRequestSpec sessionManagerHttpServiceRequestSpec)
        {
            return (sessionManagerHttpServiceRequestSpec != null && this.Method == sessionManagerHttpServiceRequestSpec.Method && this.Url == sessionManagerHttpServiceRequestSpec.Url);
        }

        public override bool Equals(object sessionManagerHttpServiceRequestSpec)
        {
            return Equals(sessionManagerHttpServiceRequestSpec as SessionManagerHttpServiceRequestSpec);
        }

        public override int GetHashCode()
        {
            return (Method + "_" + Url).GetHashCode();
        }
    }

    public class SessionManagerLocalTicket : DynamicData, IEquatable<SessionManagerLocalTicket>
    {
        public string UserName { get; set; }

        public string PasswordFilePath { get; set; }

        public bool Equals(SessionManagerLocalTicket sessionManagerLocalTicket)
        {
            return (sessionManagerLocalTicket != null && this.UserName == sessionManagerLocalTicket.UserName && this.PasswordFilePath == sessionManagerLocalTicket.PasswordFilePath);
        }

        public override bool Equals(object sessionManagerLocalTicket)
        {
            return Equals(sessionManagerLocalTicket as SessionManagerLocalTicket);
        }

        public override int GetHashCode()
        {
            return (UserName + "_" + PasswordFilePath).GetHashCode();
        }
    }

    public class SessionManagerServiceRequestSpec : DynamicData, IEquatable<SessionManagerServiceRequestSpec>
    {
        public bool Equals(SessionManagerServiceRequestSpec sessionManagerServiceRequestSpec)
        {
            return (sessionManagerServiceRequestSpec != null && base.Equals(sessionManagerServiceRequestSpec));
        }

        public override bool Equals(object sessionManagerServiceRequestSpec)
        {
            return Equals(sessionManagerServiceRequestSpec as SessionManagerServiceRequestSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SessionManagerVmomiServiceRequestSpec : SessionManagerServiceRequestSpec, IEquatable<SessionManagerVmomiServiceRequestSpec>
    {
        public string Method { get; set; }

        public bool Equals(SessionManagerVmomiServiceRequestSpec sessionManagerVmomiServiceRequestSpec)
        {
            return (sessionManagerVmomiServiceRequestSpec != null && this.Method == sessionManagerVmomiServiceRequestSpec.Method);
        }

        public override bool Equals(object sessionManagerVmomiServiceRequestSpec)
        {
            return Equals(sessionManagerVmomiServiceRequestSpec as SessionManagerVmomiServiceRequestSpec);
        }

        public override int GetHashCode()
        {
            return (Method).GetHashCode();
        }
    }

    public class SessionTerminatedEvent : SessionEvent, IEquatable<SessionTerminatedEvent>
    {
        public string SessionId { get; set; }

        public string TerminatedUsername { get; set; }

        public bool Equals(SessionTerminatedEvent sessionTerminatedEvent)
        {
            return (sessionTerminatedEvent != null && this.SessionId == sessionTerminatedEvent.SessionId && this.TerminatedUsername == sessionTerminatedEvent.TerminatedUsername);
        }

        public override bool Equals(object sessionTerminatedEvent)
        {
            return Equals(sessionTerminatedEvent as SessionTerminatedEvent);
        }

        public override int GetHashCode()
        {
            return (SessionId + "_" + TerminatedUsername).GetHashCode();
        }
    }

    public class SharedBusControllerNotSupported : DeviceNotSupported, IEquatable<SharedBusControllerNotSupported>
    {
        public bool Equals(SharedBusControllerNotSupported sharedBusControllerNotSupported)
        {
            return (sharedBusControllerNotSupported != null && base.Equals(sharedBusControllerNotSupported));
        }

        public override bool Equals(object sharedBusControllerNotSupported)
        {
            return Equals(sharedBusControllerNotSupported as SharedBusControllerNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SharesInfo : DynamicData, IEquatable<SharesInfo>
    {
        public int Shares { get; set; }

        public SharesLevel Level { get; set; }

        public bool Equals(SharesInfo sharesInfo)
        {
            return (sharesInfo != null && this.Shares == sharesInfo.Shares && this.Level == sharesInfo.Level);
        }

        public override bool Equals(object sharesInfo)
        {
            return Equals(sharesInfo as SharesInfo);
        }

        public override int GetHashCode()
        {
            return (Shares + "_" + Level).GetHashCode();
        }
    }

    public class SharesOption : DynamicData, IEquatable<SharesOption>
    {
        public IntOption sharesOption { get; set; }

        public SharesLevel DefaultLevel { get; set; }

        public bool Equals(SharesOption sharesOption)
        {
            return (sharesOption != null && ((this.sharesOption == null && sharesOption.sharesOption == null) || (this.sharesOption != null && this.sharesOption.Equals(sharesOption.sharesOption))) && this.DefaultLevel == sharesOption.DefaultLevel);
        }

        public override bool Equals(object sharesOption)
        {
            return Equals(sharesOption as SharesOption);
        }

        public override int GetHashCode()
        {
            return (sharesOption + "_" + DefaultLevel).GetHashCode();
        }
    }

    public class ShrinkDiskFault : VimFault, IEquatable<ShrinkDiskFault>
    {
        public int? DiskId { get; set; }

        public bool Equals(ShrinkDiskFault shrinkDiskFault)
        {
            return (shrinkDiskFault != null && ((this.DiskId == null && shrinkDiskFault.DiskId == null) || (this.DiskId != null && this.DiskId.Equals(shrinkDiskFault.DiskId))));
        }

        public override bool Equals(object shrinkDiskFault)
        {
            return Equals(shrinkDiskFault as ShrinkDiskFault);
        }

        public override int GetHashCode()
        {
            return (DiskId).GetHashCode();
        }
    }

    public class SimpleCommand : ViewBase, IEquatable<SimpleCommand>
    {
        public SimpleCommandEncoding EncodingType { get; set; }

        public ServiceManagerServiceInfo Entity { get; set; }

        public string ExecuteSimpleCommand(string[] arguments)
        {
            return default(string);
        }

        public bool Equals(SimpleCommand simpleCommand)
        {
            return (simpleCommand != null && this.EncodingType == simpleCommand.EncodingType && ((this.Entity == null && simpleCommand.Entity == null) || (this.Entity != null && this.Entity.Equals(simpleCommand.Entity))));
        }

        public override bool Equals(object simpleCommand)
        {
            return Equals(simpleCommand as SimpleCommand);
        }

        public override int GetHashCode()
        {
            return (EncodingType + "_" + Entity).GetHashCode();
        }
    }

    public class SingleIp : IpAddress, IEquatable<SingleIp>
    {
        public string Address { get; set; }

        public bool Equals(SingleIp singleIp)
        {
            return (singleIp != null && this.Address == singleIp.Address);
        }

        public override bool Equals(object singleIp)
        {
            return Equals(singleIp as SingleIp);
        }

        public override int GetHashCode()
        {
            return (Address).GetHashCode();
        }
    }

    public class SingleMac : MacAddress, IEquatable<SingleMac>
    {
        public string Address { get; set; }

        public bool Equals(SingleMac singleMac)
        {
            return (singleMac != null && this.Address == singleMac.Address);
        }

        public override bool Equals(object singleMac)
        {
            return Equals(singleMac as SingleMac);
        }

        public override int GetHashCode()
        {
            return (Address).GetHashCode();
        }
    }

    public class SnapshotCloneNotSupported : SnapshotCopyNotSupported, IEquatable<SnapshotCloneNotSupported>
    {
        public bool Equals(SnapshotCloneNotSupported snapshotCloneNotSupported)
        {
            return (snapshotCloneNotSupported != null && base.Equals(snapshotCloneNotSupported));
        }

        public override bool Equals(object snapshotCloneNotSupported)
        {
            return Equals(snapshotCloneNotSupported as SnapshotCloneNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotCopyNotSupported : MigrationFault, IEquatable<SnapshotCopyNotSupported>
    {
        public bool Equals(SnapshotCopyNotSupported snapshotCopyNotSupported)
        {
            return (snapshotCopyNotSupported != null && base.Equals(snapshotCopyNotSupported));
        }

        public override bool Equals(object snapshotCopyNotSupported)
        {
            return Equals(snapshotCopyNotSupported as SnapshotCopyNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotDisabled : SnapshotFault, IEquatable<SnapshotDisabled>
    {
        public bool Equals(SnapshotDisabled snapshotDisabled)
        {
            return (snapshotDisabled != null && base.Equals(snapshotDisabled));
        }

        public override bool Equals(object snapshotDisabled)
        {
            return Equals(snapshotDisabled as SnapshotDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotFault : VimFault, IEquatable<SnapshotFault>
    {
        public bool Equals(SnapshotFault snapshotFault)
        {
            return (snapshotFault != null && base.Equals(snapshotFault));
        }

        public override bool Equals(object snapshotFault)
        {
            return Equals(snapshotFault as SnapshotFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotIncompatibleDeviceInVm : SnapshotFault, IEquatable<SnapshotIncompatibleDeviceInVm>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(SnapshotIncompatibleDeviceInVm snapshotIncompatibleDeviceInVm)
        {
            return (snapshotIncompatibleDeviceInVm != null && ((this.Fault == null && snapshotIncompatibleDeviceInVm.Fault == null) || (this.Fault != null && this.Fault.Equals(snapshotIncompatibleDeviceInVm.Fault))));
        }

        public override bool Equals(object snapshotIncompatibleDeviceInVm)
        {
            return Equals(snapshotIncompatibleDeviceInVm as SnapshotIncompatibleDeviceInVm);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class SnapshotLocked : SnapshotFault, IEquatable<SnapshotLocked>
    {
        public bool Equals(SnapshotLocked snapshotLocked)
        {
            return (snapshotLocked != null && base.Equals(snapshotLocked));
        }

        public override bool Equals(object snapshotLocked)
        {
            return Equals(snapshotLocked as SnapshotLocked);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotMoveFromNonHomeNotSupported : SnapshotCopyNotSupported, IEquatable<SnapshotMoveFromNonHomeNotSupported>
    {
        public bool Equals(SnapshotMoveFromNonHomeNotSupported snapshotMoveFromNonHomeNotSupported)
        {
            return (snapshotMoveFromNonHomeNotSupported != null && base.Equals(snapshotMoveFromNonHomeNotSupported));
        }

        public override bool Equals(object snapshotMoveFromNonHomeNotSupported)
        {
            return Equals(snapshotMoveFromNonHomeNotSupported as SnapshotMoveFromNonHomeNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotMoveNotSupported : SnapshotCopyNotSupported, IEquatable<SnapshotMoveNotSupported>
    {
        public bool Equals(SnapshotMoveNotSupported snapshotMoveNotSupported)
        {
            return (snapshotMoveNotSupported != null && base.Equals(snapshotMoveNotSupported));
        }

        public override bool Equals(object snapshotMoveNotSupported)
        {
            return Equals(snapshotMoveNotSupported as SnapshotMoveNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotMoveToNonHomeNotSupported : SnapshotCopyNotSupported, IEquatable<SnapshotMoveToNonHomeNotSupported>
    {
        public bool Equals(SnapshotMoveToNonHomeNotSupported snapshotMoveToNonHomeNotSupported)
        {
            return (snapshotMoveToNonHomeNotSupported != null && base.Equals(snapshotMoveToNonHomeNotSupported));
        }

        public override bool Equals(object snapshotMoveToNonHomeNotSupported)
        {
            return Equals(snapshotMoveToNonHomeNotSupported as SnapshotMoveToNonHomeNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotNoChange : SnapshotFault, IEquatable<SnapshotNoChange>
    {
        public bool Equals(SnapshotNoChange snapshotNoChange)
        {
            return (snapshotNoChange != null && base.Equals(snapshotNoChange));
        }

        public override bool Equals(object snapshotNoChange)
        {
            return Equals(snapshotNoChange as SnapshotNoChange);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SnapshotRevertIssue : MigrationFault, IEquatable<SnapshotRevertIssue>
    {
        public string SnapshotName { get; set; }

        public Event[] Event { get; set; }

        public bool Errors { get; set; }

        public bool Equals(SnapshotRevertIssue snapshotRevertIssue)
        {
            return (snapshotRevertIssue != null && this.SnapshotName == snapshotRevertIssue.SnapshotName && ((this.Event == null && snapshotRevertIssue.Event == null) || (this.Event != null && snapshotRevertIssue.Event != null && Enumerable.SequenceEqual(this.Event, snapshotRevertIssue.Event))) && this.Errors == snapshotRevertIssue.Errors);
        }

        public override bool Equals(object snapshotRevertIssue)
        {
            return Equals(snapshotRevertIssue as SnapshotRevertIssue);
        }

        public override int GetHashCode()
        {
            return (SnapshotName + "_" + Event + "_" + Errors).GetHashCode();
        }
    }

    public class SoftRuleVioCorrectionDisallowed : VmConfigFault, IEquatable<SoftRuleVioCorrectionDisallowed>
    {
        public string VmName { get; set; }

        public bool Equals(SoftRuleVioCorrectionDisallowed softRuleVioCorrectionDisallowed)
        {
            return (softRuleVioCorrectionDisallowed != null && this.VmName == softRuleVioCorrectionDisallowed.VmName);
        }

        public override bool Equals(object softRuleVioCorrectionDisallowed)
        {
            return Equals(softRuleVioCorrectionDisallowed as SoftRuleVioCorrectionDisallowed);
        }

        public override int GetHashCode()
        {
            return (VmName).GetHashCode();
        }
    }

    public class SoftRuleVioCorrectionImpact : VmConfigFault, IEquatable<SoftRuleVioCorrectionImpact>
    {
        public string VmName { get; set; }

        public bool Equals(SoftRuleVioCorrectionImpact softRuleVioCorrectionImpact)
        {
            return (softRuleVioCorrectionImpact != null && this.VmName == softRuleVioCorrectionImpact.VmName);
        }

        public override bool Equals(object softRuleVioCorrectionImpact)
        {
            return Equals(softRuleVioCorrectionImpact as SoftRuleVioCorrectionImpact);
        }

        public override int GetHashCode()
        {
            return (VmName).GetHashCode();
        }
    }

    public class SoftwarePackage : DynamicData, IEquatable<SoftwarePackage>
    {
        public string Name { get; set; }

        public string Version { get; set; }

        public string Type { get; set; }

        public string Vendor { get; set; }

        public string AcceptanceLevel { get; set; }

        public string Summary { get; set; }

        public string Description { get; set; }

        public string[] ReferenceURL { get; set; }

        public DateTime? CreationDate { get; set; }

        public Relation[] Depends { get; set; }

        public Relation[] Conflicts { get; set; }

        public Relation[] Replaces { get; set; }

        public string[] Provides { get; set; }

        public bool? MaintenanceModeRequired { get; set; }

        public string[] HardwarePlatformsRequired { get; set; }

        public SoftwarePackageCapability Capability { get; set; }

        public string[] Tag { get; set; }

        public string[] Payload { get; set; }

        public bool Equals(SoftwarePackage softwarePackage)
        {
            return (softwarePackage != null && this.Name == softwarePackage.Name && this.Version == softwarePackage.Version && this.Type == softwarePackage.Type && this.Vendor == softwarePackage.Vendor && this.AcceptanceLevel == softwarePackage.AcceptanceLevel && this.Summary == softwarePackage.Summary && this.Description == softwarePackage.Description && ((this.ReferenceURL == null && softwarePackage.ReferenceURL == null) || (this.ReferenceURL != null && softwarePackage.ReferenceURL != null && Enumerable.SequenceEqual(this.ReferenceURL, softwarePackage.ReferenceURL))) && ((this.CreationDate == null && softwarePackage.CreationDate == null) || (this.CreationDate != null && this.CreationDate.Equals(softwarePackage.CreationDate))) && ((this.Depends == null && softwarePackage.Depends == null) || (this.Depends != null && softwarePackage.Depends != null && Enumerable.SequenceEqual(this.Depends, softwarePackage.Depends))) && ((this.Conflicts == null && softwarePackage.Conflicts == null) || (this.Conflicts != null && softwarePackage.Conflicts != null && Enumerable.SequenceEqual(this.Conflicts, softwarePackage.Conflicts))) && ((this.Replaces == null && softwarePackage.Replaces == null) || (this.Replaces != null && softwarePackage.Replaces != null && Enumerable.SequenceEqual(this.Replaces, softwarePackage.Replaces))) && ((this.Provides == null && softwarePackage.Provides == null) || (this.Provides != null && softwarePackage.Provides != null && Enumerable.SequenceEqual(this.Provides, softwarePackage.Provides))) && ((this.MaintenanceModeRequired == null && softwarePackage.MaintenanceModeRequired == null) || (this.MaintenanceModeRequired != null && this.MaintenanceModeRequired.Equals(softwarePackage.MaintenanceModeRequired))) && ((this.HardwarePlatformsRequired == null && softwarePackage.HardwarePlatformsRequired == null) || (this.HardwarePlatformsRequired != null && softwarePackage.HardwarePlatformsRequired != null && Enumerable.SequenceEqual(this.HardwarePlatformsRequired, softwarePackage.HardwarePlatformsRequired))) && ((this.Capability == null && softwarePackage.Capability == null) || (this.Capability != null && this.Capability.Equals(softwarePackage.Capability))) && ((this.Tag == null && softwarePackage.Tag == null) || (this.Tag != null && softwarePackage.Tag != null && Enumerable.SequenceEqual(this.Tag, softwarePackage.Tag))) && ((this.Payload == null && softwarePackage.Payload == null) || (this.Payload != null && softwarePackage.Payload != null && Enumerable.SequenceEqual(this.Payload, softwarePackage.Payload))));
        }

        public override bool Equals(object softwarePackage)
        {
            return Equals(softwarePackage as SoftwarePackage);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Version + "_" + Type + "_" + Vendor + "_" + AcceptanceLevel + "_" + Summary + "_" + Description + "_" + ReferenceURL + "_" + CreationDate + "_" + Depends + "_" + Conflicts + "_" + Replaces + "_" + Provides + "_" + MaintenanceModeRequired + "_" + HardwarePlatformsRequired + "_" + Capability + "_" + Tag + "_" + Payload).GetHashCode();
        }
    }

    public class SoftwarePackageCapability : DynamicData, IEquatable<SoftwarePackageCapability>
    {
        public bool? LiveInstallAllowed { get; set; }

        public bool? LiveRemoveAllowed { get; set; }

        public bool? StatelessReady { get; set; }

        public bool? Overlay { get; set; }

        public bool Equals(SoftwarePackageCapability softwarePackageCapability)
        {
            return (softwarePackageCapability != null && ((this.LiveInstallAllowed == null && softwarePackageCapability.LiveInstallAllowed == null) || (this.LiveInstallAllowed != null && this.LiveInstallAllowed.Equals(softwarePackageCapability.LiveInstallAllowed))) && ((this.LiveRemoveAllowed == null && softwarePackageCapability.LiveRemoveAllowed == null) || (this.LiveRemoveAllowed != null && this.LiveRemoveAllowed.Equals(softwarePackageCapability.LiveRemoveAllowed))) && ((this.StatelessReady == null && softwarePackageCapability.StatelessReady == null) || (this.StatelessReady != null && this.StatelessReady.Equals(softwarePackageCapability.StatelessReady))) && ((this.Overlay == null && softwarePackageCapability.Overlay == null) || (this.Overlay != null && this.Overlay.Equals(softwarePackageCapability.Overlay))));
        }

        public override bool Equals(object softwarePackageCapability)
        {
            return Equals(softwarePackageCapability as SoftwarePackageCapability);
        }

        public override int GetHashCode()
        {
            return (LiveInstallAllowed + "_" + LiveRemoveAllowed + "_" + StatelessReady + "_" + Overlay).GetHashCode();
        }
    }

    public class SourceNodeSpec : DynamicData, IEquatable<SourceNodeSpec>
    {
        public ServiceLocator ManagementVc { get; set; }

        public ManagedObjectReference ActiveVc { get; set; }

        public SourceNodeSpec_LinkedView LinkedView { get; set; }

        public bool Equals(SourceNodeSpec sourceNodeSpec)
        {
            return (sourceNodeSpec != null && ((this.ManagementVc == null && sourceNodeSpec.ManagementVc == null) || (this.ManagementVc != null && this.ManagementVc.Equals(sourceNodeSpec.ManagementVc))) && ((this.ActiveVc == null && sourceNodeSpec.ActiveVc == null) || (this.ActiveVc != null && this.ActiveVc.Equals(sourceNodeSpec.ActiveVc))) && ((this.LinkedView == null && sourceNodeSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(sourceNodeSpec.LinkedView))));
        }

        public override bool Equals(object sourceNodeSpec)
        {
            return Equals(sourceNodeSpec as SourceNodeSpec);
        }

        public override int GetHashCode()
        {
            return (ManagementVc + "_" + ActiveVc + "_" + LinkedView).GetHashCode();
        }
    }

    public class SourceNodeSpec_LinkedView : IEquatable<SourceNodeSpec_LinkedView>
    {
        public VirtualMachine ActiveVc { get; set; }

        public bool Equals(SourceNodeSpec_LinkedView sourceNodeSpec_LinkedView)
        {
            return (sourceNodeSpec_LinkedView != null && ((this.ActiveVc == null && sourceNodeSpec_LinkedView.ActiveVc == null) || (this.ActiveVc != null && this.ActiveVc.Equals(sourceNodeSpec_LinkedView.ActiveVc))));
        }

        public override bool Equals(object sourceNodeSpec_LinkedView)
        {
            return Equals(sourceNodeSpec_LinkedView as SourceNodeSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ActiveVc).GetHashCode();
        }
    }

    public class SsdDiskNotAvailable : VimFault, IEquatable<SsdDiskNotAvailable>
    {
        public string DevicePath { get; set; }

        public bool Equals(SsdDiskNotAvailable ssdDiskNotAvailable)
        {
            return (ssdDiskNotAvailable != null && this.DevicePath == ssdDiskNotAvailable.DevicePath);
        }

        public override bool Equals(object ssdDiskNotAvailable)
        {
            return Equals(ssdDiskNotAvailable as SsdDiskNotAvailable);
        }

        public override int GetHashCode()
        {
            return (DevicePath).GetHashCode();
        }
    }

    public class SSLDisabledFault : HostConnectFault, IEquatable<SSLDisabledFault>
    {
        public bool Equals(SSLDisabledFault sSLDisabledFault)
        {
            return (sSLDisabledFault != null && base.Equals(sSLDisabledFault));
        }

        public override bool Equals(object sSLDisabledFault)
        {
            return Equals(sSLDisabledFault as SSLDisabledFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SSLVerifyFault : HostConnectFault, IEquatable<SSLVerifyFault>
    {
        public bool SelfSigned { get; set; }

        public string Thumbprint { get; set; }

        public bool Equals(SSLVerifyFault sSLVerifyFault)
        {
            return (sSLVerifyFault != null && this.SelfSigned == sSLVerifyFault.SelfSigned && this.Thumbprint == sSLVerifyFault.Thumbprint);
        }

        public override bool Equals(object sSLVerifyFault)
        {
            return Equals(sSLVerifyFault as SSLVerifyFault);
        }

        public override int GetHashCode()
        {
            return (SelfSigned + "_" + Thumbprint).GetHashCode();
        }
    }

    public class SSPIAuthentication : GuestAuthentication, IEquatable<SSPIAuthentication>
    {
        public string SspiToken { get; set; }

        public bool Equals(SSPIAuthentication sSPIAuthentication)
        {
            return (sSPIAuthentication != null && this.SspiToken == sSPIAuthentication.SspiToken);
        }

        public override bool Equals(object sSPIAuthentication)
        {
            return Equals(sSPIAuthentication as SSPIAuthentication);
        }

        public override int GetHashCode()
        {
            return (SspiToken).GetHashCode();
        }
    }

    public class SSPIChallenge : VimFault, IEquatable<SSPIChallenge>
    {
        public string Base64Token { get; set; }

        public bool Equals(SSPIChallenge sSPIChallenge)
        {
            return (sSPIChallenge != null && this.Base64Token == sSPIChallenge.Base64Token);
        }

        public override bool Equals(object sSPIChallenge)
        {
            return Equals(sSPIChallenge as SSPIChallenge);
        }

        public override int GetHashCode()
        {
            return (Base64Token).GetHashCode();
        }
    }

    public class StateAlarmExpression : AlarmExpression, IEquatable<StateAlarmExpression>
    {
        public StateAlarmOperator Operator { get; set; }

        public string Type { get; set; }

        public string StatePath { get; set; }

        public string Yellow { get; set; }

        public string Red { get; set; }

        public bool Equals(StateAlarmExpression stateAlarmExpression)
        {
            return (stateAlarmExpression != null && this.Operator == stateAlarmExpression.Operator && this.Type == stateAlarmExpression.Type && this.StatePath == stateAlarmExpression.StatePath && this.Yellow == stateAlarmExpression.Yellow && this.Red == stateAlarmExpression.Red);
        }

        public override bool Equals(object stateAlarmExpression)
        {
            return Equals(stateAlarmExpression as StateAlarmExpression);
        }

        public override int GetHashCode()
        {
            return (Operator + "_" + Type + "_" + StatePath + "_" + Yellow + "_" + Red).GetHashCode();
        }
    }

    public class StaticRouteProfile : ApplyProfile, IEquatable<StaticRouteProfile>
    {
        public string Key { get; set; }

        public bool Equals(StaticRouteProfile staticRouteProfile)
        {
            return (staticRouteProfile != null && this.Key == staticRouteProfile.Key);
        }

        public override bool Equals(object staticRouteProfile)
        {
            return Equals(staticRouteProfile as StaticRouteProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class StorageDrsAutomationConfig : DynamicData, IEquatable<StorageDrsAutomationConfig>
    {
        public string SpaceLoadBalanceAutomationMode { get; set; }

        public string IoLoadBalanceAutomationMode { get; set; }

        public string RuleEnforcementAutomationMode { get; set; }

        public string PolicyEnforcementAutomationMode { get; set; }

        public string VmEvacuationAutomationMode { get; set; }

        public bool Equals(StorageDrsAutomationConfig storageDrsAutomationConfig)
        {
            return (storageDrsAutomationConfig != null && this.SpaceLoadBalanceAutomationMode == storageDrsAutomationConfig.SpaceLoadBalanceAutomationMode && this.IoLoadBalanceAutomationMode == storageDrsAutomationConfig.IoLoadBalanceAutomationMode && this.RuleEnforcementAutomationMode == storageDrsAutomationConfig.RuleEnforcementAutomationMode && this.PolicyEnforcementAutomationMode == storageDrsAutomationConfig.PolicyEnforcementAutomationMode && this.VmEvacuationAutomationMode == storageDrsAutomationConfig.VmEvacuationAutomationMode);
        }

        public override bool Equals(object storageDrsAutomationConfig)
        {
            return Equals(storageDrsAutomationConfig as StorageDrsAutomationConfig);
        }

        public override int GetHashCode()
        {
            return (SpaceLoadBalanceAutomationMode + "_" + IoLoadBalanceAutomationMode + "_" + RuleEnforcementAutomationMode + "_" + PolicyEnforcementAutomationMode + "_" + VmEvacuationAutomationMode).GetHashCode();
        }
    }

    public class StorageDrsCannotMoveDiskInMultiWriterMode : VimFault, IEquatable<StorageDrsCannotMoveDiskInMultiWriterMode>
    {
        public bool Equals(StorageDrsCannotMoveDiskInMultiWriterMode storageDrsCannotMoveDiskInMultiWriterMode)
        {
            return (storageDrsCannotMoveDiskInMultiWriterMode != null && base.Equals(storageDrsCannotMoveDiskInMultiWriterMode));
        }

        public override bool Equals(object storageDrsCannotMoveDiskInMultiWriterMode)
        {
            return Equals(storageDrsCannotMoveDiskInMultiWriterMode as StorageDrsCannotMoveDiskInMultiWriterMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveFTVm : VimFault, IEquatable<StorageDrsCannotMoveFTVm>
    {
        public bool Equals(StorageDrsCannotMoveFTVm storageDrsCannotMoveFTVm)
        {
            return (storageDrsCannotMoveFTVm != null && base.Equals(storageDrsCannotMoveFTVm));
        }

        public override bool Equals(object storageDrsCannotMoveFTVm)
        {
            return Equals(storageDrsCannotMoveFTVm as StorageDrsCannotMoveFTVm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveIndependentDisk : VimFault, IEquatable<StorageDrsCannotMoveIndependentDisk>
    {
        public bool Equals(StorageDrsCannotMoveIndependentDisk storageDrsCannotMoveIndependentDisk)
        {
            return (storageDrsCannotMoveIndependentDisk != null && base.Equals(storageDrsCannotMoveIndependentDisk));
        }

        public override bool Equals(object storageDrsCannotMoveIndependentDisk)
        {
            return Equals(storageDrsCannotMoveIndependentDisk as StorageDrsCannotMoveIndependentDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveManuallyPlacedSwapFile : VimFault, IEquatable<StorageDrsCannotMoveManuallyPlacedSwapFile>
    {
        public bool Equals(StorageDrsCannotMoveManuallyPlacedSwapFile storageDrsCannotMoveManuallyPlacedSwapFile)
        {
            return (storageDrsCannotMoveManuallyPlacedSwapFile != null && base.Equals(storageDrsCannotMoveManuallyPlacedSwapFile));
        }

        public override bool Equals(object storageDrsCannotMoveManuallyPlacedSwapFile)
        {
            return Equals(storageDrsCannotMoveManuallyPlacedSwapFile as StorageDrsCannotMoveManuallyPlacedSwapFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveManuallyPlacedVm : VimFault, IEquatable<StorageDrsCannotMoveManuallyPlacedVm>
    {
        public bool Equals(StorageDrsCannotMoveManuallyPlacedVm storageDrsCannotMoveManuallyPlacedVm)
        {
            return (storageDrsCannotMoveManuallyPlacedVm != null && base.Equals(storageDrsCannotMoveManuallyPlacedVm));
        }

        public override bool Equals(object storageDrsCannotMoveManuallyPlacedVm)
        {
            return Equals(storageDrsCannotMoveManuallyPlacedVm as StorageDrsCannotMoveManuallyPlacedVm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveSharedDisk : VimFault, IEquatable<StorageDrsCannotMoveSharedDisk>
    {
        public bool Equals(StorageDrsCannotMoveSharedDisk storageDrsCannotMoveSharedDisk)
        {
            return (storageDrsCannotMoveSharedDisk != null && base.Equals(storageDrsCannotMoveSharedDisk));
        }

        public override bool Equals(object storageDrsCannotMoveSharedDisk)
        {
            return Equals(storageDrsCannotMoveSharedDisk as StorageDrsCannotMoveSharedDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveTemplate : VimFault, IEquatable<StorageDrsCannotMoveTemplate>
    {
        public bool Equals(StorageDrsCannotMoveTemplate storageDrsCannotMoveTemplate)
        {
            return (storageDrsCannotMoveTemplate != null && base.Equals(storageDrsCannotMoveTemplate));
        }

        public override bool Equals(object storageDrsCannotMoveTemplate)
        {
            return Equals(storageDrsCannotMoveTemplate as StorageDrsCannotMoveTemplate);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveVmInUserFolder : VimFault, IEquatable<StorageDrsCannotMoveVmInUserFolder>
    {
        public bool Equals(StorageDrsCannotMoveVmInUserFolder storageDrsCannotMoveVmInUserFolder)
        {
            return (storageDrsCannotMoveVmInUserFolder != null && base.Equals(storageDrsCannotMoveVmInUserFolder));
        }

        public override bool Equals(object storageDrsCannotMoveVmInUserFolder)
        {
            return Equals(storageDrsCannotMoveVmInUserFolder as StorageDrsCannotMoveVmInUserFolder);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveVmWithMountedCDROM : VimFault, IEquatable<StorageDrsCannotMoveVmWithMountedCDROM>
    {
        public bool Equals(StorageDrsCannotMoveVmWithMountedCDROM storageDrsCannotMoveVmWithMountedCDROM)
        {
            return (storageDrsCannotMoveVmWithMountedCDROM != null && base.Equals(storageDrsCannotMoveVmWithMountedCDROM));
        }

        public override bool Equals(object storageDrsCannotMoveVmWithMountedCDROM)
        {
            return Equals(storageDrsCannotMoveVmWithMountedCDROM as StorageDrsCannotMoveVmWithMountedCDROM);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsCannotMoveVmWithNoFilesInLayout : VimFault, IEquatable<StorageDrsCannotMoveVmWithNoFilesInLayout>
    {
        public bool Equals(StorageDrsCannotMoveVmWithNoFilesInLayout storageDrsCannotMoveVmWithNoFilesInLayout)
        {
            return (storageDrsCannotMoveVmWithNoFilesInLayout != null && base.Equals(storageDrsCannotMoveVmWithNoFilesInLayout));
        }

        public override bool Equals(object storageDrsCannotMoveVmWithNoFilesInLayout)
        {
            return Equals(storageDrsCannotMoveVmWithNoFilesInLayout as StorageDrsCannotMoveVmWithNoFilesInLayout);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsConfigInfo : DynamicData, IEquatable<StorageDrsConfigInfo>
    {
        public StorageDrsPodConfigInfo PodConfig { get; set; }

        public StorageDrsVmConfigInfo[] VmConfig { get; set; }

        public bool Equals(StorageDrsConfigInfo storageDrsConfigInfo)
        {
            return (storageDrsConfigInfo != null && ((this.PodConfig == null && storageDrsConfigInfo.PodConfig == null) || (this.PodConfig != null && this.PodConfig.Equals(storageDrsConfigInfo.PodConfig))) && ((this.VmConfig == null && storageDrsConfigInfo.VmConfig == null) || (this.VmConfig != null && storageDrsConfigInfo.VmConfig != null && Enumerable.SequenceEqual(this.VmConfig, storageDrsConfigInfo.VmConfig))));
        }

        public override bool Equals(object storageDrsConfigInfo)
        {
            return Equals(storageDrsConfigInfo as StorageDrsConfigInfo);
        }

        public override int GetHashCode()
        {
            return (PodConfig + "_" + VmConfig).GetHashCode();
        }
    }

    public class StorageDrsConfigSpec : DynamicData, IEquatable<StorageDrsConfigSpec>
    {
        public StorageDrsPodConfigSpec PodConfigSpec { get; set; }

        public StorageDrsVmConfigSpec[] VmConfigSpec { get; set; }

        public bool Equals(StorageDrsConfigSpec storageDrsConfigSpec)
        {
            return (storageDrsConfigSpec != null && ((this.PodConfigSpec == null && storageDrsConfigSpec.PodConfigSpec == null) || (this.PodConfigSpec != null && this.PodConfigSpec.Equals(storageDrsConfigSpec.PodConfigSpec))) && ((this.VmConfigSpec == null && storageDrsConfigSpec.VmConfigSpec == null) || (this.VmConfigSpec != null && storageDrsConfigSpec.VmConfigSpec != null && Enumerable.SequenceEqual(this.VmConfigSpec, storageDrsConfigSpec.VmConfigSpec))));
        }

        public override bool Equals(object storageDrsConfigSpec)
        {
            return Equals(storageDrsConfigSpec as StorageDrsConfigSpec);
        }

        public override int GetHashCode()
        {
            return (PodConfigSpec + "_" + VmConfigSpec).GetHashCode();
        }
    }

    public class StorageDrsDatacentersCannotShareDatastore : VimFault, IEquatable<StorageDrsDatacentersCannotShareDatastore>
    {
        public bool Equals(StorageDrsDatacentersCannotShareDatastore storageDrsDatacentersCannotShareDatastore)
        {
            return (storageDrsDatacentersCannotShareDatastore != null && base.Equals(storageDrsDatacentersCannotShareDatastore));
        }

        public override bool Equals(object storageDrsDatacentersCannotShareDatastore)
        {
            return Equals(storageDrsDatacentersCannotShareDatastore as StorageDrsDatacentersCannotShareDatastore);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsDisabledOnVm : VimFault, IEquatable<StorageDrsDisabledOnVm>
    {
        public bool Equals(StorageDrsDisabledOnVm storageDrsDisabledOnVm)
        {
            return (storageDrsDisabledOnVm != null && base.Equals(storageDrsDisabledOnVm));
        }

        public override bool Equals(object storageDrsDisabledOnVm)
        {
            return Equals(storageDrsDisabledOnVm as StorageDrsDisabledOnVm);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsHbrDiskNotMovable : VimFault, IEquatable<StorageDrsHbrDiskNotMovable>
    {
        public string NonMovableDiskIds { get; set; }

        public bool Equals(StorageDrsHbrDiskNotMovable storageDrsHbrDiskNotMovable)
        {
            return (storageDrsHbrDiskNotMovable != null && this.NonMovableDiskIds == storageDrsHbrDiskNotMovable.NonMovableDiskIds);
        }

        public override bool Equals(object storageDrsHbrDiskNotMovable)
        {
            return Equals(storageDrsHbrDiskNotMovable as StorageDrsHbrDiskNotMovable);
        }

        public override int GetHashCode()
        {
            return (NonMovableDiskIds).GetHashCode();
        }
    }

    public class StorageDrsHmsMoveInProgress : VimFault, IEquatable<StorageDrsHmsMoveInProgress>
    {
        public bool Equals(StorageDrsHmsMoveInProgress storageDrsHmsMoveInProgress)
        {
            return (storageDrsHmsMoveInProgress != null && base.Equals(storageDrsHmsMoveInProgress));
        }

        public override bool Equals(object storageDrsHmsMoveInProgress)
        {
            return Equals(storageDrsHmsMoveInProgress as StorageDrsHmsMoveInProgress);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsHmsUnreachable : VimFault, IEquatable<StorageDrsHmsUnreachable>
    {
        public bool Equals(StorageDrsHmsUnreachable storageDrsHmsUnreachable)
        {
            return (storageDrsHmsUnreachable != null && base.Equals(storageDrsHmsUnreachable));
        }

        public override bool Equals(object storageDrsHmsUnreachable)
        {
            return Equals(storageDrsHmsUnreachable as StorageDrsHmsUnreachable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsIolbDisabledInternally : VimFault, IEquatable<StorageDrsIolbDisabledInternally>
    {
        public bool Equals(StorageDrsIolbDisabledInternally storageDrsIolbDisabledInternally)
        {
            return (storageDrsIolbDisabledInternally != null && base.Equals(storageDrsIolbDisabledInternally));
        }

        public override bool Equals(object storageDrsIolbDisabledInternally)
        {
            return Equals(storageDrsIolbDisabledInternally as StorageDrsIolbDisabledInternally);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsIoLoadBalanceConfig : DynamicData, IEquatable<StorageDrsIoLoadBalanceConfig>
    {
        public int? ReservablePercentThreshold { get; set; }

        public int? ReservableIopsThreshold { get; set; }

        public string ReservableThresholdMode { get; set; }

        public int? IoLatencyThreshold { get; set; }

        public int? IoLoadImbalanceThreshold { get; set; }

        public bool Equals(StorageDrsIoLoadBalanceConfig storageDrsIoLoadBalanceConfig)
        {
            return (storageDrsIoLoadBalanceConfig != null && ((this.ReservablePercentThreshold == null && storageDrsIoLoadBalanceConfig.ReservablePercentThreshold == null) || (this.ReservablePercentThreshold != null && this.ReservablePercentThreshold.Equals(storageDrsIoLoadBalanceConfig.ReservablePercentThreshold))) && ((this.ReservableIopsThreshold == null && storageDrsIoLoadBalanceConfig.ReservableIopsThreshold == null) || (this.ReservableIopsThreshold != null && this.ReservableIopsThreshold.Equals(storageDrsIoLoadBalanceConfig.ReservableIopsThreshold))) && this.ReservableThresholdMode == storageDrsIoLoadBalanceConfig.ReservableThresholdMode && ((this.IoLatencyThreshold == null && storageDrsIoLoadBalanceConfig.IoLatencyThreshold == null) || (this.IoLatencyThreshold != null && this.IoLatencyThreshold.Equals(storageDrsIoLoadBalanceConfig.IoLatencyThreshold))) && ((this.IoLoadImbalanceThreshold == null && storageDrsIoLoadBalanceConfig.IoLoadImbalanceThreshold == null) || (this.IoLoadImbalanceThreshold != null && this.IoLoadImbalanceThreshold.Equals(storageDrsIoLoadBalanceConfig.IoLoadImbalanceThreshold))));
        }

        public override bool Equals(object storageDrsIoLoadBalanceConfig)
        {
            return Equals(storageDrsIoLoadBalanceConfig as StorageDrsIoLoadBalanceConfig);
        }

        public override int GetHashCode()
        {
            return (ReservablePercentThreshold + "_" + ReservableIopsThreshold + "_" + ReservableThresholdMode + "_" + IoLatencyThreshold + "_" + IoLoadImbalanceThreshold).GetHashCode();
        }
    }

    public class StorageDrsOptionSpec : ArrayUpdateSpec, IEquatable<StorageDrsOptionSpec>
    {
        public OptionValue Option { get; set; }

        public bool Equals(StorageDrsOptionSpec storageDrsOptionSpec)
        {
            return (storageDrsOptionSpec != null && ((this.Option == null && storageDrsOptionSpec.Option == null) || (this.Option != null && this.Option.Equals(storageDrsOptionSpec.Option))));
        }

        public override bool Equals(object storageDrsOptionSpec)
        {
            return Equals(storageDrsOptionSpec as StorageDrsOptionSpec);
        }

        public override int GetHashCode()
        {
            return (Option).GetHashCode();
        }
    }

    public class StorageDrsPlacementRankVmSpec : DynamicData, IEquatable<StorageDrsPlacementRankVmSpec>
    {
        public PlacementSpec VmPlacementSpec { get; set; }

        public ManagedObjectReference[] VmClusters { get; set; }

        public StorageDrsPlacementRankVmSpec_LinkedView LinkedView { get; set; }

        public bool Equals(StorageDrsPlacementRankVmSpec storageDrsPlacementRankVmSpec)
        {
            return (storageDrsPlacementRankVmSpec != null && ((this.VmPlacementSpec == null && storageDrsPlacementRankVmSpec.VmPlacementSpec == null) || (this.VmPlacementSpec != null && this.VmPlacementSpec.Equals(storageDrsPlacementRankVmSpec.VmPlacementSpec))) && ((this.VmClusters == null && storageDrsPlacementRankVmSpec.VmClusters == null) || (this.VmClusters != null && storageDrsPlacementRankVmSpec.VmClusters != null && Enumerable.SequenceEqual(this.VmClusters, storageDrsPlacementRankVmSpec.VmClusters))) && ((this.LinkedView == null && storageDrsPlacementRankVmSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageDrsPlacementRankVmSpec.LinkedView))));
        }

        public override bool Equals(object storageDrsPlacementRankVmSpec)
        {
            return Equals(storageDrsPlacementRankVmSpec as StorageDrsPlacementRankVmSpec);
        }

        public override int GetHashCode()
        {
            return (VmPlacementSpec + "_" + VmClusters + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageDrsPlacementRankVmSpec_LinkedView : IEquatable<StorageDrsPlacementRankVmSpec_LinkedView>
    {
        public ClusterComputeResource[] VmClusters { get; set; }

        public bool Equals(StorageDrsPlacementRankVmSpec_LinkedView storageDrsPlacementRankVmSpec_LinkedView)
        {
            return (storageDrsPlacementRankVmSpec_LinkedView != null && ((this.VmClusters == null && storageDrsPlacementRankVmSpec_LinkedView.VmClusters == null) || (this.VmClusters != null && storageDrsPlacementRankVmSpec_LinkedView.VmClusters != null && Enumerable.SequenceEqual(this.VmClusters, storageDrsPlacementRankVmSpec_LinkedView.VmClusters))));
        }

        public override bool Equals(object storageDrsPlacementRankVmSpec_LinkedView)
        {
            return Equals(storageDrsPlacementRankVmSpec_LinkedView as StorageDrsPlacementRankVmSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (VmClusters).GetHashCode();
        }
    }

    public class StorageDrsPodConfigInfo : DynamicData, IEquatable<StorageDrsPodConfigInfo>
    {
        public bool Enabled { get; set; }

        public bool IoLoadBalanceEnabled { get; set; }

        public string DefaultVmBehavior { get; set; }

        public int? LoadBalanceInterval { get; set; }

        public bool? DefaultIntraVmAffinity { get; set; }

        public StorageDrsSpaceLoadBalanceConfig SpaceLoadBalanceConfig { get; set; }

        public StorageDrsIoLoadBalanceConfig IoLoadBalanceConfig { get; set; }

        public StorageDrsAutomationConfig AutomationOverrides { get; set; }

        public ClusterRuleInfo[] Rule { get; set; }

        public OptionValue[] Option { get; set; }

        public bool Equals(StorageDrsPodConfigInfo storageDrsPodConfigInfo)
        {
            return (storageDrsPodConfigInfo != null && this.Enabled == storageDrsPodConfigInfo.Enabled && this.IoLoadBalanceEnabled == storageDrsPodConfigInfo.IoLoadBalanceEnabled && this.DefaultVmBehavior == storageDrsPodConfigInfo.DefaultVmBehavior && ((this.LoadBalanceInterval == null && storageDrsPodConfigInfo.LoadBalanceInterval == null) || (this.LoadBalanceInterval != null && this.LoadBalanceInterval.Equals(storageDrsPodConfigInfo.LoadBalanceInterval))) && ((this.DefaultIntraVmAffinity == null && storageDrsPodConfigInfo.DefaultIntraVmAffinity == null) || (this.DefaultIntraVmAffinity != null && this.DefaultIntraVmAffinity.Equals(storageDrsPodConfigInfo.DefaultIntraVmAffinity))) && ((this.SpaceLoadBalanceConfig == null && storageDrsPodConfigInfo.SpaceLoadBalanceConfig == null) || (this.SpaceLoadBalanceConfig != null && this.SpaceLoadBalanceConfig.Equals(storageDrsPodConfigInfo.SpaceLoadBalanceConfig))) && ((this.IoLoadBalanceConfig == null && storageDrsPodConfigInfo.IoLoadBalanceConfig == null) || (this.IoLoadBalanceConfig != null && this.IoLoadBalanceConfig.Equals(storageDrsPodConfigInfo.IoLoadBalanceConfig))) && ((this.AutomationOverrides == null && storageDrsPodConfigInfo.AutomationOverrides == null) || (this.AutomationOverrides != null && this.AutomationOverrides.Equals(storageDrsPodConfigInfo.AutomationOverrides))) && ((this.Rule == null && storageDrsPodConfigInfo.Rule == null) || (this.Rule != null && storageDrsPodConfigInfo.Rule != null && Enumerable.SequenceEqual(this.Rule, storageDrsPodConfigInfo.Rule))) && ((this.Option == null && storageDrsPodConfigInfo.Option == null) || (this.Option != null && storageDrsPodConfigInfo.Option != null && Enumerable.SequenceEqual(this.Option, storageDrsPodConfigInfo.Option))));
        }

        public override bool Equals(object storageDrsPodConfigInfo)
        {
            return Equals(storageDrsPodConfigInfo as StorageDrsPodConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + IoLoadBalanceEnabled + "_" + DefaultVmBehavior + "_" + LoadBalanceInterval + "_" + DefaultIntraVmAffinity + "_" + SpaceLoadBalanceConfig + "_" + IoLoadBalanceConfig + "_" + AutomationOverrides + "_" + Rule + "_" + Option).GetHashCode();
        }
    }

    public class StorageDrsPodConfigSpec : DynamicData, IEquatable<StorageDrsPodConfigSpec>
    {
        public bool? Enabled { get; set; }

        public bool? IoLoadBalanceEnabled { get; set; }

        public string DefaultVmBehavior { get; set; }

        public int? LoadBalanceInterval { get; set; }

        public bool? DefaultIntraVmAffinity { get; set; }

        public StorageDrsSpaceLoadBalanceConfig SpaceLoadBalanceConfig { get; set; }

        public StorageDrsIoLoadBalanceConfig IoLoadBalanceConfig { get; set; }

        public StorageDrsAutomationConfig AutomationOverrides { get; set; }

        public ClusterRuleSpec[] Rule { get; set; }

        public StorageDrsOptionSpec[] Option { get; set; }

        public bool Equals(StorageDrsPodConfigSpec storageDrsPodConfigSpec)
        {
            return (storageDrsPodConfigSpec != null && ((this.Enabled == null && storageDrsPodConfigSpec.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(storageDrsPodConfigSpec.Enabled))) && ((this.IoLoadBalanceEnabled == null && storageDrsPodConfigSpec.IoLoadBalanceEnabled == null) || (this.IoLoadBalanceEnabled != null && this.IoLoadBalanceEnabled.Equals(storageDrsPodConfigSpec.IoLoadBalanceEnabled))) && this.DefaultVmBehavior == storageDrsPodConfigSpec.DefaultVmBehavior && ((this.LoadBalanceInterval == null && storageDrsPodConfigSpec.LoadBalanceInterval == null) || (this.LoadBalanceInterval != null && this.LoadBalanceInterval.Equals(storageDrsPodConfigSpec.LoadBalanceInterval))) && ((this.DefaultIntraVmAffinity == null && storageDrsPodConfigSpec.DefaultIntraVmAffinity == null) || (this.DefaultIntraVmAffinity != null && this.DefaultIntraVmAffinity.Equals(storageDrsPodConfigSpec.DefaultIntraVmAffinity))) && ((this.SpaceLoadBalanceConfig == null && storageDrsPodConfigSpec.SpaceLoadBalanceConfig == null) || (this.SpaceLoadBalanceConfig != null && this.SpaceLoadBalanceConfig.Equals(storageDrsPodConfigSpec.SpaceLoadBalanceConfig))) && ((this.IoLoadBalanceConfig == null && storageDrsPodConfigSpec.IoLoadBalanceConfig == null) || (this.IoLoadBalanceConfig != null && this.IoLoadBalanceConfig.Equals(storageDrsPodConfigSpec.IoLoadBalanceConfig))) && ((this.AutomationOverrides == null && storageDrsPodConfigSpec.AutomationOverrides == null) || (this.AutomationOverrides != null && this.AutomationOverrides.Equals(storageDrsPodConfigSpec.AutomationOverrides))) && ((this.Rule == null && storageDrsPodConfigSpec.Rule == null) || (this.Rule != null && storageDrsPodConfigSpec.Rule != null && Enumerable.SequenceEqual(this.Rule, storageDrsPodConfigSpec.Rule))) && ((this.Option == null && storageDrsPodConfigSpec.Option == null) || (this.Option != null && storageDrsPodConfigSpec.Option != null && Enumerable.SequenceEqual(this.Option, storageDrsPodConfigSpec.Option))));
        }

        public override bool Equals(object storageDrsPodConfigSpec)
        {
            return Equals(storageDrsPodConfigSpec as StorageDrsPodConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + IoLoadBalanceEnabled + "_" + DefaultVmBehavior + "_" + LoadBalanceInterval + "_" + DefaultIntraVmAffinity + "_" + SpaceLoadBalanceConfig + "_" + IoLoadBalanceConfig + "_" + AutomationOverrides + "_" + Rule + "_" + Option).GetHashCode();
        }
    }

    public class StorageDrsPodSelectionSpec : DynamicData, IEquatable<StorageDrsPodSelectionSpec>
    {
        public VmPodConfigForPlacement[] InitialVmConfig { get; set; }

        public ManagedObjectReference StoragePod { get; set; }

        public StorageDrsPodSelectionSpec_LinkedView LinkedView { get; set; }

        public bool Equals(StorageDrsPodSelectionSpec storageDrsPodSelectionSpec)
        {
            return (storageDrsPodSelectionSpec != null && ((this.InitialVmConfig == null && storageDrsPodSelectionSpec.InitialVmConfig == null) || (this.InitialVmConfig != null && storageDrsPodSelectionSpec.InitialVmConfig != null && Enumerable.SequenceEqual(this.InitialVmConfig, storageDrsPodSelectionSpec.InitialVmConfig))) && ((this.StoragePod == null && storageDrsPodSelectionSpec.StoragePod == null) || (this.StoragePod != null && this.StoragePod.Equals(storageDrsPodSelectionSpec.StoragePod))) && ((this.LinkedView == null && storageDrsPodSelectionSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageDrsPodSelectionSpec.LinkedView))));
        }

        public override bool Equals(object storageDrsPodSelectionSpec)
        {
            return Equals(storageDrsPodSelectionSpec as StorageDrsPodSelectionSpec);
        }

        public override int GetHashCode()
        {
            return (InitialVmConfig + "_" + StoragePod + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageDrsPodSelectionSpec_LinkedView : IEquatable<StorageDrsPodSelectionSpec_LinkedView>
    {
        public StoragePod StoragePod { get; set; }

        public bool Equals(StorageDrsPodSelectionSpec_LinkedView storageDrsPodSelectionSpec_LinkedView)
        {
            return (storageDrsPodSelectionSpec_LinkedView != null && ((this.StoragePod == null && storageDrsPodSelectionSpec_LinkedView.StoragePod == null) || (this.StoragePod != null && this.StoragePod.Equals(storageDrsPodSelectionSpec_LinkedView.StoragePod))));
        }

        public override bool Equals(object storageDrsPodSelectionSpec_LinkedView)
        {
            return Equals(storageDrsPodSelectionSpec_LinkedView as StorageDrsPodSelectionSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (StoragePod).GetHashCode();
        }
    }

    public class StorageDrsRelocateDisabled : VimFault, IEquatable<StorageDrsRelocateDisabled>
    {
        public bool Equals(StorageDrsRelocateDisabled storageDrsRelocateDisabled)
        {
            return (storageDrsRelocateDisabled != null && base.Equals(storageDrsRelocateDisabled));
        }

        public override bool Equals(object storageDrsRelocateDisabled)
        {
            return Equals(storageDrsRelocateDisabled as StorageDrsRelocateDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsSpaceLoadBalanceConfig : DynamicData, IEquatable<StorageDrsSpaceLoadBalanceConfig>
    {
        public string SpaceThresholdMode { get; set; }

        public int? SpaceUtilizationThreshold { get; set; }

        public int? FreeSpaceThresholdGB { get; set; }

        public int? MinSpaceUtilizationDifference { get; set; }

        public bool Equals(StorageDrsSpaceLoadBalanceConfig storageDrsSpaceLoadBalanceConfig)
        {
            return (storageDrsSpaceLoadBalanceConfig != null && this.SpaceThresholdMode == storageDrsSpaceLoadBalanceConfig.SpaceThresholdMode && ((this.SpaceUtilizationThreshold == null && storageDrsSpaceLoadBalanceConfig.SpaceUtilizationThreshold == null) || (this.SpaceUtilizationThreshold != null && this.SpaceUtilizationThreshold.Equals(storageDrsSpaceLoadBalanceConfig.SpaceUtilizationThreshold))) && ((this.FreeSpaceThresholdGB == null && storageDrsSpaceLoadBalanceConfig.FreeSpaceThresholdGB == null) || (this.FreeSpaceThresholdGB != null && this.FreeSpaceThresholdGB.Equals(storageDrsSpaceLoadBalanceConfig.FreeSpaceThresholdGB))) && ((this.MinSpaceUtilizationDifference == null && storageDrsSpaceLoadBalanceConfig.MinSpaceUtilizationDifference == null) || (this.MinSpaceUtilizationDifference != null && this.MinSpaceUtilizationDifference.Equals(storageDrsSpaceLoadBalanceConfig.MinSpaceUtilizationDifference))));
        }

        public override bool Equals(object storageDrsSpaceLoadBalanceConfig)
        {
            return Equals(storageDrsSpaceLoadBalanceConfig as StorageDrsSpaceLoadBalanceConfig);
        }

        public override int GetHashCode()
        {
            return (SpaceThresholdMode + "_" + SpaceUtilizationThreshold + "_" + FreeSpaceThresholdGB + "_" + MinSpaceUtilizationDifference).GetHashCode();
        }
    }

    public class StorageDrsStaleHmsCollection : VimFault, IEquatable<StorageDrsStaleHmsCollection>
    {
        public bool Equals(StorageDrsStaleHmsCollection storageDrsStaleHmsCollection)
        {
            return (storageDrsStaleHmsCollection != null && base.Equals(storageDrsStaleHmsCollection));
        }

        public override bool Equals(object storageDrsStaleHmsCollection)
        {
            return Equals(storageDrsStaleHmsCollection as StorageDrsStaleHmsCollection);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsUnableToMoveFiles : VimFault, IEquatable<StorageDrsUnableToMoveFiles>
    {
        public bool Equals(StorageDrsUnableToMoveFiles storageDrsUnableToMoveFiles)
        {
            return (storageDrsUnableToMoveFiles != null && base.Equals(storageDrsUnableToMoveFiles));
        }

        public override bool Equals(object storageDrsUnableToMoveFiles)
        {
            return Equals(storageDrsUnableToMoveFiles as StorageDrsUnableToMoveFiles);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageDrsVmConfigInfo : DynamicData, IEquatable<StorageDrsVmConfigInfo>
    {
        public ManagedObjectReference Vm { get; set; }

        public bool? Enabled { get; set; }

        public string Behavior { get; set; }

        public bool? IntraVmAffinity { get; set; }

        public VirtualDiskAntiAffinityRuleSpec IntraVmAntiAffinity { get; set; }

        public VirtualDiskRuleSpec[] VirtualDiskRules { get; set; }

        public StorageDrsVmConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(StorageDrsVmConfigInfo storageDrsVmConfigInfo)
        {
            return (storageDrsVmConfigInfo != null && ((this.Vm == null && storageDrsVmConfigInfo.Vm == null) || (this.Vm != null && this.Vm.Equals(storageDrsVmConfigInfo.Vm))) && ((this.Enabled == null && storageDrsVmConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(storageDrsVmConfigInfo.Enabled))) && this.Behavior == storageDrsVmConfigInfo.Behavior && ((this.IntraVmAffinity == null && storageDrsVmConfigInfo.IntraVmAffinity == null) || (this.IntraVmAffinity != null && this.IntraVmAffinity.Equals(storageDrsVmConfigInfo.IntraVmAffinity))) && ((this.IntraVmAntiAffinity == null && storageDrsVmConfigInfo.IntraVmAntiAffinity == null) || (this.IntraVmAntiAffinity != null && this.IntraVmAntiAffinity.Equals(storageDrsVmConfigInfo.IntraVmAntiAffinity))) && ((this.VirtualDiskRules == null && storageDrsVmConfigInfo.VirtualDiskRules == null) || (this.VirtualDiskRules != null && storageDrsVmConfigInfo.VirtualDiskRules != null && Enumerable.SequenceEqual(this.VirtualDiskRules, storageDrsVmConfigInfo.VirtualDiskRules))) && ((this.LinkedView == null && storageDrsVmConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageDrsVmConfigInfo.LinkedView))));
        }

        public override bool Equals(object storageDrsVmConfigInfo)
        {
            return Equals(storageDrsVmConfigInfo as StorageDrsVmConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Enabled + "_" + Behavior + "_" + IntraVmAffinity + "_" + IntraVmAntiAffinity + "_" + VirtualDiskRules + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageDrsVmConfigInfo_LinkedView : IEquatable<StorageDrsVmConfigInfo_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(StorageDrsVmConfigInfo_LinkedView storageDrsVmConfigInfo_LinkedView)
        {
            return (storageDrsVmConfigInfo_LinkedView != null && ((this.Vm == null && storageDrsVmConfigInfo_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(storageDrsVmConfigInfo_LinkedView.Vm))));
        }

        public override bool Equals(object storageDrsVmConfigInfo_LinkedView)
        {
            return Equals(storageDrsVmConfigInfo_LinkedView as StorageDrsVmConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class StorageDrsVmConfigSpec : ArrayUpdateSpec, IEquatable<StorageDrsVmConfigSpec>
    {
        public StorageDrsVmConfigInfo Info { get; set; }

        public bool Equals(StorageDrsVmConfigSpec storageDrsVmConfigSpec)
        {
            return (storageDrsVmConfigSpec != null && ((this.Info == null && storageDrsVmConfigSpec.Info == null) || (this.Info != null && this.Info.Equals(storageDrsVmConfigSpec.Info))));
        }

        public override bool Equals(object storageDrsVmConfigSpec)
        {
            return Equals(storageDrsVmConfigSpec as StorageDrsVmConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class StorageIOAllocationInfo : DynamicData, IEquatable<StorageIOAllocationInfo>
    {
        public long? Limit { get; set; }

        public SharesInfo Shares { get; set; }

        public int? Reservation { get; set; }

        public bool Equals(StorageIOAllocationInfo storageIOAllocationInfo)
        {
            return (storageIOAllocationInfo != null && ((this.Limit == null && storageIOAllocationInfo.Limit == null) || (this.Limit != null && this.Limit.Equals(storageIOAllocationInfo.Limit))) && ((this.Shares == null && storageIOAllocationInfo.Shares == null) || (this.Shares != null && this.Shares.Equals(storageIOAllocationInfo.Shares))) && ((this.Reservation == null && storageIOAllocationInfo.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(storageIOAllocationInfo.Reservation))));
        }

        public override bool Equals(object storageIOAllocationInfo)
        {
            return Equals(storageIOAllocationInfo as StorageIOAllocationInfo);
        }

        public override int GetHashCode()
        {
            return (Limit + "_" + Shares + "_" + Reservation).GetHashCode();
        }
    }

    public class StorageIOAllocationOption : DynamicData, IEquatable<StorageIOAllocationOption>
    {
        public LongOption LimitOption { get; set; }

        public SharesOption SharesOption { get; set; }

        public bool Equals(StorageIOAllocationOption storageIOAllocationOption)
        {
            return (storageIOAllocationOption != null && ((this.LimitOption == null && storageIOAllocationOption.LimitOption == null) || (this.LimitOption != null && this.LimitOption.Equals(storageIOAllocationOption.LimitOption))) && ((this.SharesOption == null && storageIOAllocationOption.SharesOption == null) || (this.SharesOption != null && this.SharesOption.Equals(storageIOAllocationOption.SharesOption))));
        }

        public override bool Equals(object storageIOAllocationOption)
        {
            return Equals(storageIOAllocationOption as StorageIOAllocationOption);
        }

        public override int GetHashCode()
        {
            return (LimitOption + "_" + SharesOption).GetHashCode();
        }
    }

    public class StorageIORMConfigOption : DynamicData, IEquatable<StorageIORMConfigOption>
    {
        public BoolOption EnabledOption { get; set; }

        public IntOption CongestionThresholdOption { get; set; }

        public BoolOption StatsCollectionEnabledOption { get; set; }

        public BoolOption ReservationEnabledOption { get; set; }

        public bool Equals(StorageIORMConfigOption storageIORMConfigOption)
        {
            return (storageIORMConfigOption != null && ((this.EnabledOption == null && storageIORMConfigOption.EnabledOption == null) || (this.EnabledOption != null && this.EnabledOption.Equals(storageIORMConfigOption.EnabledOption))) && ((this.CongestionThresholdOption == null && storageIORMConfigOption.CongestionThresholdOption == null) || (this.CongestionThresholdOption != null && this.CongestionThresholdOption.Equals(storageIORMConfigOption.CongestionThresholdOption))) && ((this.StatsCollectionEnabledOption == null && storageIORMConfigOption.StatsCollectionEnabledOption == null) || (this.StatsCollectionEnabledOption != null && this.StatsCollectionEnabledOption.Equals(storageIORMConfigOption.StatsCollectionEnabledOption))) && ((this.ReservationEnabledOption == null && storageIORMConfigOption.ReservationEnabledOption == null) || (this.ReservationEnabledOption != null && this.ReservationEnabledOption.Equals(storageIORMConfigOption.ReservationEnabledOption))));
        }

        public override bool Equals(object storageIORMConfigOption)
        {
            return Equals(storageIORMConfigOption as StorageIORMConfigOption);
        }

        public override int GetHashCode()
        {
            return (EnabledOption + "_" + CongestionThresholdOption + "_" + StatsCollectionEnabledOption + "_" + ReservationEnabledOption).GetHashCode();
        }
    }

    public class StorageIORMConfigSpec : DynamicData, IEquatable<StorageIORMConfigSpec>
    {
        public bool? Enabled { get; set; }

        public string CongestionThresholdMode { get; set; }

        public int? CongestionThreshold { get; set; }

        public int? PercentOfPeakThroughput { get; set; }

        public bool? StatsCollectionEnabled { get; set; }

        public bool? ReservationEnabled { get; set; }

        public bool? StatsAggregationDisabled { get; set; }

        public int? ReservableIopsThreshold { get; set; }

        public bool Equals(StorageIORMConfigSpec storageIORMConfigSpec)
        {
            return (storageIORMConfigSpec != null && ((this.Enabled == null && storageIORMConfigSpec.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(storageIORMConfigSpec.Enabled))) && this.CongestionThresholdMode == storageIORMConfigSpec.CongestionThresholdMode && ((this.CongestionThreshold == null && storageIORMConfigSpec.CongestionThreshold == null) || (this.CongestionThreshold != null && this.CongestionThreshold.Equals(storageIORMConfigSpec.CongestionThreshold))) && ((this.PercentOfPeakThroughput == null && storageIORMConfigSpec.PercentOfPeakThroughput == null) || (this.PercentOfPeakThroughput != null && this.PercentOfPeakThroughput.Equals(storageIORMConfigSpec.PercentOfPeakThroughput))) && ((this.StatsCollectionEnabled == null && storageIORMConfigSpec.StatsCollectionEnabled == null) || (this.StatsCollectionEnabled != null && this.StatsCollectionEnabled.Equals(storageIORMConfigSpec.StatsCollectionEnabled))) && ((this.ReservationEnabled == null && storageIORMConfigSpec.ReservationEnabled == null) || (this.ReservationEnabled != null && this.ReservationEnabled.Equals(storageIORMConfigSpec.ReservationEnabled))) && ((this.StatsAggregationDisabled == null && storageIORMConfigSpec.StatsAggregationDisabled == null) || (this.StatsAggregationDisabled != null && this.StatsAggregationDisabled.Equals(storageIORMConfigSpec.StatsAggregationDisabled))) && ((this.ReservableIopsThreshold == null && storageIORMConfigSpec.ReservableIopsThreshold == null) || (this.ReservableIopsThreshold != null && this.ReservableIopsThreshold.Equals(storageIORMConfigSpec.ReservableIopsThreshold))));
        }

        public override bool Equals(object storageIORMConfigSpec)
        {
            return Equals(storageIORMConfigSpec as StorageIORMConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + CongestionThresholdMode + "_" + CongestionThreshold + "_" + PercentOfPeakThroughput + "_" + StatsCollectionEnabled + "_" + ReservationEnabled + "_" + StatsAggregationDisabled + "_" + ReservableIopsThreshold).GetHashCode();
        }
    }

    public class StorageIORMInfo : DynamicData, IEquatable<StorageIORMInfo>
    {
        public bool Enabled { get; set; }

        public string CongestionThresholdMode { get; set; }

        public int CongestionThreshold { get; set; }

        public int? PercentOfPeakThroughput { get; set; }

        public bool StatsCollectionEnabled { get; set; }

        public bool ReservationEnabled { get; set; }

        public bool? StatsAggregationDisabled { get; set; }

        public int? ReservableIopsThreshold { get; set; }

        public bool Equals(StorageIORMInfo storageIORMInfo)
        {
            return (storageIORMInfo != null && this.Enabled == storageIORMInfo.Enabled && this.CongestionThresholdMode == storageIORMInfo.CongestionThresholdMode && this.CongestionThreshold == storageIORMInfo.CongestionThreshold && ((this.PercentOfPeakThroughput == null && storageIORMInfo.PercentOfPeakThroughput == null) || (this.PercentOfPeakThroughput != null && this.PercentOfPeakThroughput.Equals(storageIORMInfo.PercentOfPeakThroughput))) && this.StatsCollectionEnabled == storageIORMInfo.StatsCollectionEnabled && this.ReservationEnabled == storageIORMInfo.ReservationEnabled && ((this.StatsAggregationDisabled == null && storageIORMInfo.StatsAggregationDisabled == null) || (this.StatsAggregationDisabled != null && this.StatsAggregationDisabled.Equals(storageIORMInfo.StatsAggregationDisabled))) && ((this.ReservableIopsThreshold == null && storageIORMInfo.ReservableIopsThreshold == null) || (this.ReservableIopsThreshold != null && this.ReservableIopsThreshold.Equals(storageIORMInfo.ReservableIopsThreshold))));
        }

        public override bool Equals(object storageIORMInfo)
        {
            return Equals(storageIORMInfo as StorageIORMInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + CongestionThresholdMode + "_" + CongestionThreshold + "_" + PercentOfPeakThroughput + "_" + StatsCollectionEnabled + "_" + ReservationEnabled + "_" + StatsAggregationDisabled + "_" + ReservableIopsThreshold).GetHashCode();
        }
    }

    public class StorageMigrationAction : ClusterAction, IEquatable<StorageMigrationAction>
    {
        public ManagedObjectReference Vm { get; set; }

        public VirtualMachineRelocateSpec RelocateSpec { get; set; }

        public ManagedObjectReference Source { get; set; }

        public ManagedObjectReference Destination { get; set; }

        public long SizeTransferred { get; set; }

        public float? SpaceUtilSrcBefore { get; set; }

        public float? SpaceUtilDstBefore { get; set; }

        public float? SpaceUtilSrcAfter { get; set; }

        public float? SpaceUtilDstAfter { get; set; }

        public float? IoLatencySrcBefore { get; set; }

        public float? IoLatencyDstBefore { get; set; }

        public StorageMigrationAction_LinkedView LinkedView { get; set; }

        public bool Equals(StorageMigrationAction storageMigrationAction)
        {
            return (storageMigrationAction != null && ((this.Vm == null && storageMigrationAction.Vm == null) || (this.Vm != null && this.Vm.Equals(storageMigrationAction.Vm))) && ((this.RelocateSpec == null && storageMigrationAction.RelocateSpec == null) || (this.RelocateSpec != null && this.RelocateSpec.Equals(storageMigrationAction.RelocateSpec))) && ((this.Source == null && storageMigrationAction.Source == null) || (this.Source != null && this.Source.Equals(storageMigrationAction.Source))) && ((this.Destination == null && storageMigrationAction.Destination == null) || (this.Destination != null && this.Destination.Equals(storageMigrationAction.Destination))) && this.SizeTransferred == storageMigrationAction.SizeTransferred && ((this.SpaceUtilSrcBefore == null && storageMigrationAction.SpaceUtilSrcBefore == null) || (this.SpaceUtilSrcBefore != null && this.SpaceUtilSrcBefore.Equals(storageMigrationAction.SpaceUtilSrcBefore))) && ((this.SpaceUtilDstBefore == null && storageMigrationAction.SpaceUtilDstBefore == null) || (this.SpaceUtilDstBefore != null && this.SpaceUtilDstBefore.Equals(storageMigrationAction.SpaceUtilDstBefore))) && ((this.SpaceUtilSrcAfter == null && storageMigrationAction.SpaceUtilSrcAfter == null) || (this.SpaceUtilSrcAfter != null && this.SpaceUtilSrcAfter.Equals(storageMigrationAction.SpaceUtilSrcAfter))) && ((this.SpaceUtilDstAfter == null && storageMigrationAction.SpaceUtilDstAfter == null) || (this.SpaceUtilDstAfter != null && this.SpaceUtilDstAfter.Equals(storageMigrationAction.SpaceUtilDstAfter))) && ((this.IoLatencySrcBefore == null && storageMigrationAction.IoLatencySrcBefore == null) || (this.IoLatencySrcBefore != null && this.IoLatencySrcBefore.Equals(storageMigrationAction.IoLatencySrcBefore))) && ((this.IoLatencyDstBefore == null && storageMigrationAction.IoLatencyDstBefore == null) || (this.IoLatencyDstBefore != null && this.IoLatencyDstBefore.Equals(storageMigrationAction.IoLatencyDstBefore))) && ((this.LinkedView == null && storageMigrationAction.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageMigrationAction.LinkedView))));
        }

        public override bool Equals(object storageMigrationAction)
        {
            return Equals(storageMigrationAction as StorageMigrationAction);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + RelocateSpec + "_" + Source + "_" + Destination + "_" + SizeTransferred + "_" + SpaceUtilSrcBefore + "_" + SpaceUtilDstBefore + "_" + SpaceUtilSrcAfter + "_" + SpaceUtilDstAfter + "_" + IoLatencySrcBefore + "_" + IoLatencyDstBefore + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageMigrationAction_LinkedView : IEquatable<StorageMigrationAction_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public Datastore Source { get; set; }

        public Datastore Destination { get; set; }

        public bool Equals(StorageMigrationAction_LinkedView storageMigrationAction_LinkedView)
        {
            return (storageMigrationAction_LinkedView != null && ((this.Vm == null && storageMigrationAction_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(storageMigrationAction_LinkedView.Vm))) && ((this.Source == null && storageMigrationAction_LinkedView.Source == null) || (this.Source != null && this.Source.Equals(storageMigrationAction_LinkedView.Source))) && ((this.Destination == null && storageMigrationAction_LinkedView.Destination == null) || (this.Destination != null && this.Destination.Equals(storageMigrationAction_LinkedView.Destination))));
        }

        public override bool Equals(object storageMigrationAction_LinkedView)
        {
            return Equals(storageMigrationAction_LinkedView as StorageMigrationAction_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Source + "_" + Destination).GetHashCode();
        }
    }

    public class StoragePerformanceSummary : DynamicData, IEquatable<StoragePerformanceSummary>
    {
        public int Interval { get; set; }

        public int[] Percentile { get; set; }

        public double[] DatastoreReadLatency { get; set; }

        public double[] DatastoreWriteLatency { get; set; }

        public double[] DatastoreVmLatency { get; set; }

        public double[] DatastoreReadIops { get; set; }

        public double[] DatastoreWriteIops { get; set; }

        public int SiocActivityDuration { get; set; }

        public bool Equals(StoragePerformanceSummary storagePerformanceSummary)
        {
            return (storagePerformanceSummary != null && this.Interval == storagePerformanceSummary.Interval && ((this.Percentile == null && storagePerformanceSummary.Percentile == null) || (this.Percentile != null && storagePerformanceSummary.Percentile != null && Enumerable.SequenceEqual(this.Percentile, storagePerformanceSummary.Percentile))) && ((this.DatastoreReadLatency == null && storagePerformanceSummary.DatastoreReadLatency == null) || (this.DatastoreReadLatency != null && storagePerformanceSummary.DatastoreReadLatency != null && Enumerable.SequenceEqual(this.DatastoreReadLatency, storagePerformanceSummary.DatastoreReadLatency))) && ((this.DatastoreWriteLatency == null && storagePerformanceSummary.DatastoreWriteLatency == null) || (this.DatastoreWriteLatency != null && storagePerformanceSummary.DatastoreWriteLatency != null && Enumerable.SequenceEqual(this.DatastoreWriteLatency, storagePerformanceSummary.DatastoreWriteLatency))) && ((this.DatastoreVmLatency == null && storagePerformanceSummary.DatastoreVmLatency == null) || (this.DatastoreVmLatency != null && storagePerformanceSummary.DatastoreVmLatency != null && Enumerable.SequenceEqual(this.DatastoreVmLatency, storagePerformanceSummary.DatastoreVmLatency))) && ((this.DatastoreReadIops == null && storagePerformanceSummary.DatastoreReadIops == null) || (this.DatastoreReadIops != null && storagePerformanceSummary.DatastoreReadIops != null && Enumerable.SequenceEqual(this.DatastoreReadIops, storagePerformanceSummary.DatastoreReadIops))) && ((this.DatastoreWriteIops == null && storagePerformanceSummary.DatastoreWriteIops == null) || (this.DatastoreWriteIops != null && storagePerformanceSummary.DatastoreWriteIops != null && Enumerable.SequenceEqual(this.DatastoreWriteIops, storagePerformanceSummary.DatastoreWriteIops))) && this.SiocActivityDuration == storagePerformanceSummary.SiocActivityDuration);
        }

        public override bool Equals(object storagePerformanceSummary)
        {
            return Equals(storagePerformanceSummary as StoragePerformanceSummary);
        }

        public override int GetHashCode()
        {
            return (Interval + "_" + Percentile + "_" + DatastoreReadLatency + "_" + DatastoreWriteLatency + "_" + DatastoreVmLatency + "_" + DatastoreReadIops + "_" + DatastoreWriteIops + "_" + SiocActivityDuration).GetHashCode();
        }
    }

    public class StoragePlacementAction : ClusterAction, IEquatable<StoragePlacementAction>
    {
        public ManagedObjectReference Vm { get; set; }

        public VirtualMachineRelocateSpec RelocateSpec { get; set; }

        public ManagedObjectReference Destination { get; set; }

        public float? SpaceUtilBefore { get; set; }

        public float? SpaceDemandBefore { get; set; }

        public float? SpaceUtilAfter { get; set; }

        public float? SpaceDemandAfter { get; set; }

        public float? IoLatencyBefore { get; set; }

        public StoragePlacementAction_LinkedView LinkedView { get; set; }

        public bool Equals(StoragePlacementAction storagePlacementAction)
        {
            return (storagePlacementAction != null && ((this.Vm == null && storagePlacementAction.Vm == null) || (this.Vm != null && this.Vm.Equals(storagePlacementAction.Vm))) && ((this.RelocateSpec == null && storagePlacementAction.RelocateSpec == null) || (this.RelocateSpec != null && this.RelocateSpec.Equals(storagePlacementAction.RelocateSpec))) && ((this.Destination == null && storagePlacementAction.Destination == null) || (this.Destination != null && this.Destination.Equals(storagePlacementAction.Destination))) && ((this.SpaceUtilBefore == null && storagePlacementAction.SpaceUtilBefore == null) || (this.SpaceUtilBefore != null && this.SpaceUtilBefore.Equals(storagePlacementAction.SpaceUtilBefore))) && ((this.SpaceDemandBefore == null && storagePlacementAction.SpaceDemandBefore == null) || (this.SpaceDemandBefore != null && this.SpaceDemandBefore.Equals(storagePlacementAction.SpaceDemandBefore))) && ((this.SpaceUtilAfter == null && storagePlacementAction.SpaceUtilAfter == null) || (this.SpaceUtilAfter != null && this.SpaceUtilAfter.Equals(storagePlacementAction.SpaceUtilAfter))) && ((this.SpaceDemandAfter == null && storagePlacementAction.SpaceDemandAfter == null) || (this.SpaceDemandAfter != null && this.SpaceDemandAfter.Equals(storagePlacementAction.SpaceDemandAfter))) && ((this.IoLatencyBefore == null && storagePlacementAction.IoLatencyBefore == null) || (this.IoLatencyBefore != null && this.IoLatencyBefore.Equals(storagePlacementAction.IoLatencyBefore))) && ((this.LinkedView == null && storagePlacementAction.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storagePlacementAction.LinkedView))));
        }

        public override bool Equals(object storagePlacementAction)
        {
            return Equals(storagePlacementAction as StoragePlacementAction);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + RelocateSpec + "_" + Destination + "_" + SpaceUtilBefore + "_" + SpaceDemandBefore + "_" + SpaceUtilAfter + "_" + SpaceDemandAfter + "_" + IoLatencyBefore + "_" + LinkedView).GetHashCode();
        }
    }

    public class StoragePlacementAction_LinkedView : IEquatable<StoragePlacementAction_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public Datastore Destination { get; set; }

        public bool Equals(StoragePlacementAction_LinkedView storagePlacementAction_LinkedView)
        {
            return (storagePlacementAction_LinkedView != null && ((this.Vm == null && storagePlacementAction_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(storagePlacementAction_LinkedView.Vm))) && ((this.Destination == null && storagePlacementAction_LinkedView.Destination == null) || (this.Destination != null && this.Destination.Equals(storagePlacementAction_LinkedView.Destination))));
        }

        public override bool Equals(object storagePlacementAction_LinkedView)
        {
            return Equals(storagePlacementAction_LinkedView as StoragePlacementAction_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Destination).GetHashCode();
        }
    }

    public class StoragePlacementResult : DynamicData, IEquatable<StoragePlacementResult>
    {
        public ClusterRecommendation[] Recommendations { get; set; }

        public ClusterDrsFaults DrsFault { get; set; }

        public ManagedObjectReference Task { get; set; }

        public StoragePlacementResult_LinkedView LinkedView { get; set; }

        public bool Equals(StoragePlacementResult storagePlacementResult)
        {
            return (storagePlacementResult != null && ((this.Recommendations == null && storagePlacementResult.Recommendations == null) || (this.Recommendations != null && storagePlacementResult.Recommendations != null && Enumerable.SequenceEqual(this.Recommendations, storagePlacementResult.Recommendations))) && ((this.DrsFault == null && storagePlacementResult.DrsFault == null) || (this.DrsFault != null && this.DrsFault.Equals(storagePlacementResult.DrsFault))) && ((this.Task == null && storagePlacementResult.Task == null) || (this.Task != null && this.Task.Equals(storagePlacementResult.Task))) && ((this.LinkedView == null && storagePlacementResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storagePlacementResult.LinkedView))));
        }

        public override bool Equals(object storagePlacementResult)
        {
            return Equals(storagePlacementResult as StoragePlacementResult);
        }

        public override int GetHashCode()
        {
            return (Recommendations + "_" + DrsFault + "_" + Task + "_" + LinkedView).GetHashCode();
        }
    }

    public class StoragePlacementResult_LinkedView : IEquatable<StoragePlacementResult_LinkedView>
    {
        public Task Task { get; set; }

        public bool Equals(StoragePlacementResult_LinkedView storagePlacementResult_LinkedView)
        {
            return (storagePlacementResult_LinkedView != null && ((this.Task == null && storagePlacementResult_LinkedView.Task == null) || (this.Task != null && this.Task.Equals(storagePlacementResult_LinkedView.Task))));
        }

        public override bool Equals(object storagePlacementResult_LinkedView)
        {
            return Equals(storagePlacementResult_LinkedView as StoragePlacementResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Task).GetHashCode();
        }
    }

    public class StoragePlacementSpec : DynamicData, IEquatable<StoragePlacementSpec>
    {
        public string Type { get; set; }

        public VirtualMachineMovePriority? Priority { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public StorageDrsPodSelectionSpec PodSelectionSpec { get; set; }

        public VirtualMachineCloneSpec CloneSpec { get; set; }

        public string CloneName { get; set; }

        public VirtualMachineConfigSpec ConfigSpec { get; set; }

        public VirtualMachineRelocateSpec RelocateSpec { get; set; }

        public ManagedObjectReference ResourcePool { get; set; }

        public ManagedObjectReference Host { get; set; }

        public ManagedObjectReference Folder { get; set; }

        public bool? DisallowPrerequisiteMoves { get; set; }

        public int? ResourceLeaseDurationSec { get; set; }

        public StoragePlacementSpec_LinkedView LinkedView { get; set; }

        public bool Equals(StoragePlacementSpec storagePlacementSpec)
        {
            return (storagePlacementSpec != null && this.Type == storagePlacementSpec.Type && ((this.Priority == null && storagePlacementSpec.Priority == null) || (this.Priority != null && this.Priority.Equals(storagePlacementSpec.Priority))) && ((this.Vm == null && storagePlacementSpec.Vm == null) || (this.Vm != null && this.Vm.Equals(storagePlacementSpec.Vm))) && ((this.PodSelectionSpec == null && storagePlacementSpec.PodSelectionSpec == null) || (this.PodSelectionSpec != null && this.PodSelectionSpec.Equals(storagePlacementSpec.PodSelectionSpec))) && ((this.CloneSpec == null && storagePlacementSpec.CloneSpec == null) || (this.CloneSpec != null && this.CloneSpec.Equals(storagePlacementSpec.CloneSpec))) && this.CloneName == storagePlacementSpec.CloneName && ((this.ConfigSpec == null && storagePlacementSpec.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(storagePlacementSpec.ConfigSpec))) && ((this.RelocateSpec == null && storagePlacementSpec.RelocateSpec == null) || (this.RelocateSpec != null && this.RelocateSpec.Equals(storagePlacementSpec.RelocateSpec))) && ((this.ResourcePool == null && storagePlacementSpec.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(storagePlacementSpec.ResourcePool))) && ((this.Host == null && storagePlacementSpec.Host == null) || (this.Host != null && this.Host.Equals(storagePlacementSpec.Host))) && ((this.Folder == null && storagePlacementSpec.Folder == null) || (this.Folder != null && this.Folder.Equals(storagePlacementSpec.Folder))) && ((this.DisallowPrerequisiteMoves == null && storagePlacementSpec.DisallowPrerequisiteMoves == null) || (this.DisallowPrerequisiteMoves != null && this.DisallowPrerequisiteMoves.Equals(storagePlacementSpec.DisallowPrerequisiteMoves))) && ((this.ResourceLeaseDurationSec == null && storagePlacementSpec.ResourceLeaseDurationSec == null) || (this.ResourceLeaseDurationSec != null && this.ResourceLeaseDurationSec.Equals(storagePlacementSpec.ResourceLeaseDurationSec))) && ((this.LinkedView == null && storagePlacementSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storagePlacementSpec.LinkedView))));
        }

        public override bool Equals(object storagePlacementSpec)
        {
            return Equals(storagePlacementSpec as StoragePlacementSpec);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Priority + "_" + Vm + "_" + PodSelectionSpec + "_" + CloneSpec + "_" + CloneName + "_" + ConfigSpec + "_" + RelocateSpec + "_" + ResourcePool + "_" + Host + "_" + Folder + "_" + DisallowPrerequisiteMoves + "_" + ResourceLeaseDurationSec + "_" + LinkedView).GetHashCode();
        }
    }

    public class StoragePlacementSpec_LinkedView : IEquatable<StoragePlacementSpec_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public ResourcePool ResourcePool { get; set; }

        public HostSystem Host { get; set; }

        public Folder Folder { get; set; }

        public bool Equals(StoragePlacementSpec_LinkedView storagePlacementSpec_LinkedView)
        {
            return (storagePlacementSpec_LinkedView != null && ((this.Vm == null && storagePlacementSpec_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(storagePlacementSpec_LinkedView.Vm))) && ((this.ResourcePool == null && storagePlacementSpec_LinkedView.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(storagePlacementSpec_LinkedView.ResourcePool))) && ((this.Host == null && storagePlacementSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(storagePlacementSpec_LinkedView.Host))) && ((this.Folder == null && storagePlacementSpec_LinkedView.Folder == null) || (this.Folder != null && this.Folder.Equals(storagePlacementSpec_LinkedView.Folder))));
        }

        public override bool Equals(object storagePlacementSpec_LinkedView)
        {
            return Equals(storagePlacementSpec_LinkedView as StoragePlacementSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + ResourcePool + "_" + Host + "_" + Folder).GetHashCode();
        }
    }

    public class StoragePod : Folder, IEquatable<StoragePod>
    {
        public StoragePodSummary Summary { get; set; }

        public PodStorageDrsEntry PodStorageDrsEntry { get; set; }

        public new StoragePod_LinkedView LinkedView { get; set; }

        public bool Equals(StoragePod storagePod)
        {
            return (storagePod != null && ((this.Summary == null && storagePod.Summary == null) || (this.Summary != null && this.Summary.Equals(storagePod.Summary))) && ((this.PodStorageDrsEntry == null && storagePod.PodStorageDrsEntry == null) || (this.PodStorageDrsEntry != null && this.PodStorageDrsEntry.Equals(storagePod.PodStorageDrsEntry))) && ((this.LinkedView == null && storagePod.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storagePod.LinkedView))));
        }

        public override bool Equals(object storagePod)
        {
            return Equals(storagePod as StoragePod);
        }

        public override int GetHashCode()
        {
            return (Summary + "_" + PodStorageDrsEntry + "_" + LinkedView).GetHashCode();
        }
    }

    public class StoragePod_LinkedView : Folder_LinkedView, IEquatable<StoragePod_LinkedView>
    {
        public bool Equals(StoragePod_LinkedView storagePod_LinkedView)
        {
            return (storagePod_LinkedView != null && base.Equals(storagePod_LinkedView));
        }

        public override bool Equals(object storagePod_LinkedView)
        {
            return Equals(storagePod_LinkedView as StoragePod_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StoragePodSummary : DynamicData, IEquatable<StoragePodSummary>
    {
        public string Name { get; set; }

        public long Capacity { get; set; }

        public long FreeSpace { get; set; }

        public bool Equals(StoragePodSummary storagePodSummary)
        {
            return (storagePodSummary != null && this.Name == storagePodSummary.Name && this.Capacity == storagePodSummary.Capacity && this.FreeSpace == storagePodSummary.FreeSpace);
        }

        public override bool Equals(object storagePodSummary)
        {
            return Equals(storagePodSummary as StoragePodSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Capacity + "_" + FreeSpace).GetHashCode();
        }
    }

    public class StorageProfile : ApplyProfile, IEquatable<StorageProfile>
    {
        public NasStorageProfile[] NasStorage { get; set; }

        public bool Equals(StorageProfile storageProfile)
        {
            return (storageProfile != null && ((this.NasStorage == null && storageProfile.NasStorage == null) || (this.NasStorage != null && storageProfile.NasStorage != null && Enumerable.SequenceEqual(this.NasStorage, storageProfile.NasStorage))));
        }

        public override bool Equals(object storageProfile)
        {
            return Equals(storageProfile as StorageProfile);
        }

        public override int GetHashCode()
        {
            return (NasStorage).GetHashCode();
        }
    }

    public class StorageRequirement : DynamicData, IEquatable<StorageRequirement>
    {
        public ManagedObjectReference Datastore { get; set; }

        public long FreeSpaceRequiredInKb { get; set; }

        public StorageRequirement_LinkedView LinkedView { get; set; }

        public bool Equals(StorageRequirement storageRequirement)
        {
            return (storageRequirement != null && ((this.Datastore == null && storageRequirement.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(storageRequirement.Datastore))) && this.FreeSpaceRequiredInKb == storageRequirement.FreeSpaceRequiredInKb && ((this.LinkedView == null && storageRequirement.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageRequirement.LinkedView))));
        }

        public override bool Equals(object storageRequirement)
        {
            return Equals(storageRequirement as StorageRequirement);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + FreeSpaceRequiredInKb + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageRequirement_LinkedView : IEquatable<StorageRequirement_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(StorageRequirement_LinkedView storageRequirement_LinkedView)
        {
            return (storageRequirement_LinkedView != null && ((this.Datastore == null && storageRequirement_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(storageRequirement_LinkedView.Datastore))));
        }

        public override bool Equals(object storageRequirement_LinkedView)
        {
            return Equals(storageRequirement_LinkedView as StorageRequirement_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class StorageResourceManager : ViewBase, IEquatable<StorageResourceManager>
    {
        public ManagedObjectReference ConfigureDatastoreIORM_Task(ManagedObjectReference datastore, StorageIORMConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void ConfigureDatastoreIORM(ManagedObjectReference datastore, StorageIORMConfigSpec spec)
        {
        }

        public StorageIORMConfigOption QueryIORMConfigOption(ManagedObjectReference host)
        {
            return default(StorageIORMConfigOption);
        }

        public StoragePerformanceSummary[] QueryDatastorePerformanceSummary(ManagedObjectReference datastore)
        {
            return default(StoragePerformanceSummary[]);
        }

        public ManagedObjectReference ApplyStorageDrsRecommendationToPod_Task(ManagedObjectReference pod, string key)
        {
            return default(ManagedObjectReference);
        }

        public ApplyStorageRecommendationResult ApplyStorageDrsRecommendationToPod(ManagedObjectReference pod, string key)
        {
            return default(ApplyStorageRecommendationResult);
        }

        public ManagedObjectReference ApplyStorageDrsRecommendation_Task(string[] key)
        {
            return default(ManagedObjectReference);
        }

        public ApplyStorageRecommendationResult ApplyStorageDrsRecommendation(string[] key)
        {
            return default(ApplyStorageRecommendationResult);
        }

        public void CancelStorageDrsRecommendation(string[] key)
        {
        }

        public void RefreshStorageDrsRecommendation(ManagedObjectReference pod)
        {
        }

        public ManagedObjectReference RefreshStorageDrsRecommendationsForPod_Task(ManagedObjectReference pod)
        {
            return default(ManagedObjectReference);
        }

        public void RefreshStorageDrsRecommendationsForPod(ManagedObjectReference pod)
        {
        }

        public ManagedObjectReference ConfigureStorageDrsForPod_Task(ManagedObjectReference pod, StorageDrsConfigSpec spec, bool modify)
        {
            return default(ManagedObjectReference);
        }

        public void ConfigureStorageDrsForPod(ManagedObjectReference pod, StorageDrsConfigSpec spec, bool modify)
        {
        }

        public LocalizedMethodFault ValidateStoragePodConfig(ManagedObjectReference pod, StorageDrsConfigSpec spec)
        {
            return default(LocalizedMethodFault);
        }

        public StoragePlacementResult RecommendDatastores(StoragePlacementSpec storageSpec)
        {
            return default(StoragePlacementResult);
        }

        public bool Equals(StorageResourceManager storageResourceManager)
        {
            return (storageResourceManager != null && base.Equals(storageResourceManager));
        }

        public override bool Equals(object storageResourceManager)
        {
            return Equals(storageResourceManager as StorageResourceManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StorageResourceManagerStorageProfileStatistics : DynamicData, IEquatable<StorageResourceManagerStorageProfileStatistics>
    {
        public string ProfileId { get; set; }

        public long TotalSpaceMB { get; set; }

        public long UsedSpaceMB { get; set; }

        public bool Equals(StorageResourceManagerStorageProfileStatistics storageResourceManagerStorageProfileStatistics)
        {
            return (storageResourceManagerStorageProfileStatistics != null && this.ProfileId == storageResourceManagerStorageProfileStatistics.ProfileId && this.TotalSpaceMB == storageResourceManagerStorageProfileStatistics.TotalSpaceMB && this.UsedSpaceMB == storageResourceManagerStorageProfileStatistics.UsedSpaceMB);
        }

        public override bool Equals(object storageResourceManagerStorageProfileStatistics)
        {
            return Equals(storageResourceManagerStorageProfileStatistics as StorageResourceManagerStorageProfileStatistics);
        }

        public override int GetHashCode()
        {
            return (ProfileId + "_" + TotalSpaceMB + "_" + UsedSpaceMB).GetHashCode();
        }
    }

    public class StorageVmotionIncompatible : VirtualHardwareCompatibilityIssue, IEquatable<StorageVmotionIncompatible>
    {
        public ManagedObjectReference Datastore { get; set; }

        public StorageVmotionIncompatible_LinkedView LinkedView { get; set; }

        public bool Equals(StorageVmotionIncompatible storageVmotionIncompatible)
        {
            return (storageVmotionIncompatible != null && ((this.Datastore == null && storageVmotionIncompatible.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(storageVmotionIncompatible.Datastore))) && ((this.LinkedView == null && storageVmotionIncompatible.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageVmotionIncompatible.LinkedView))));
        }

        public override bool Equals(object storageVmotionIncompatible)
        {
            return Equals(storageVmotionIncompatible as StorageVmotionIncompatible);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class StorageVmotionIncompatible_LinkedView : IEquatable<StorageVmotionIncompatible_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(StorageVmotionIncompatible_LinkedView storageVmotionIncompatible_LinkedView)
        {
            return (storageVmotionIncompatible_LinkedView != null && ((this.Datastore == null && storageVmotionIncompatible_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(storageVmotionIncompatible_LinkedView.Datastore))));
        }

        public override bool Equals(object storageVmotionIncompatible_LinkedView)
        {
            return Equals(storageVmotionIncompatible_LinkedView as StorageVmotionIncompatible_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class StorageVMotionNotSupported : MigrationFeatureNotSupported, IEquatable<StorageVMotionNotSupported>
    {
        public new StorageVMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(StorageVMotionNotSupported storageVMotionNotSupported)
        {
            return (storageVMotionNotSupported != null && ((this.LinkedView == null && storageVMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(storageVMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object storageVMotionNotSupported)
        {
            return Equals(storageVMotionNotSupported as StorageVMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class StorageVMotionNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<StorageVMotionNotSupported_LinkedView>
    {
        public bool Equals(StorageVMotionNotSupported_LinkedView storageVMotionNotSupported_LinkedView)
        {
            return (storageVMotionNotSupported_LinkedView != null && base.Equals(storageVMotionNotSupported_LinkedView));
        }

        public override bool Equals(object storageVMotionNotSupported_LinkedView)
        {
            return Equals(storageVMotionNotSupported_LinkedView as StorageVMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class StringExpression : NegatableExpression, IEquatable<StringExpression>
    {
        public string Value { get; set; }

        public bool Equals(StringExpression stringExpression)
        {
            return (stringExpression != null && this.Value == stringExpression.Value);
        }

        public override bool Equals(object stringExpression)
        {
            return Equals(stringExpression as StringExpression);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class StringOption : OptionType, IEquatable<StringOption>
    {
        public string DefaultValue { get; set; }

        public string ValidCharacters { get; set; }

        public bool Equals(StringOption stringOption)
        {
            return (stringOption != null && this.DefaultValue == stringOption.DefaultValue && this.ValidCharacters == stringOption.ValidCharacters);
        }

        public override bool Equals(object stringOption)
        {
            return Equals(stringOption as StringOption);
        }

        public override int GetHashCode()
        {
            return (DefaultValue + "_" + ValidCharacters).GetHashCode();
        }
    }

    public class StringPolicy : InheritablePolicy, IEquatable<StringPolicy>
    {
        public string Value { get; set; }

        public bool Equals(StringPolicy stringPolicy)
        {
            return (stringPolicy != null && this.Value == stringPolicy.Value);
        }

        public override bool Equals(object stringPolicy)
        {
            return Equals(stringPolicy as StringPolicy);
        }

        public override int GetHashCode()
        {
            return (Value).GetHashCode();
        }
    }

    public class StructuredCustomizations : HostProfilesEntityCustomizations, IEquatable<StructuredCustomizations>
    {
        public ManagedObjectReference Entity { get; set; }

        public AnswerFile Customizations { get; set; }

        public StructuredCustomizations_LinkedView LinkedView { get; set; }

        public bool Equals(StructuredCustomizations structuredCustomizations)
        {
            return (structuredCustomizations != null && ((this.Entity == null && structuredCustomizations.Entity == null) || (this.Entity != null && this.Entity.Equals(structuredCustomizations.Entity))) && ((this.Customizations == null && structuredCustomizations.Customizations == null) || (this.Customizations != null && this.Customizations.Equals(structuredCustomizations.Customizations))) && ((this.LinkedView == null && structuredCustomizations.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(structuredCustomizations.LinkedView))));
        }

        public override bool Equals(object structuredCustomizations)
        {
            return Equals(structuredCustomizations as StructuredCustomizations);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Customizations + "_" + LinkedView).GetHashCode();
        }
    }

    public class StructuredCustomizations_LinkedView : IEquatable<StructuredCustomizations_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(StructuredCustomizations_LinkedView structuredCustomizations_LinkedView)
        {
            return (structuredCustomizations_LinkedView != null && ((this.Entity == null && structuredCustomizations_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(structuredCustomizations_LinkedView.Entity))));
        }

        public override bool Equals(object structuredCustomizations_LinkedView)
        {
            return Equals(structuredCustomizations_LinkedView as StructuredCustomizations_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class SuspendedRelocateNotSupported : MigrationFault, IEquatable<SuspendedRelocateNotSupported>
    {
        public bool Equals(SuspendedRelocateNotSupported suspendedRelocateNotSupported)
        {
            return (suspendedRelocateNotSupported != null && base.Equals(suspendedRelocateNotSupported));
        }

        public override bool Equals(object suspendedRelocateNotSupported)
        {
            return Equals(suspendedRelocateNotSupported as SuspendedRelocateNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SwapDatastoreNotWritableOnHost : DatastoreNotWritableOnHost, IEquatable<SwapDatastoreNotWritableOnHost>
    {
        public new SwapDatastoreNotWritableOnHost_LinkedView LinkedView { get; set; }

        public bool Equals(SwapDatastoreNotWritableOnHost swapDatastoreNotWritableOnHost)
        {
            return (swapDatastoreNotWritableOnHost != null && ((this.LinkedView == null && swapDatastoreNotWritableOnHost.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(swapDatastoreNotWritableOnHost.LinkedView))));
        }

        public override bool Equals(object swapDatastoreNotWritableOnHost)
        {
            return Equals(swapDatastoreNotWritableOnHost as SwapDatastoreNotWritableOnHost);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class SwapDatastoreNotWritableOnHost_LinkedView : DatastoreNotWritableOnHost_LinkedView, IEquatable<SwapDatastoreNotWritableOnHost_LinkedView>
    {
        public bool Equals(SwapDatastoreNotWritableOnHost_LinkedView swapDatastoreNotWritableOnHost_LinkedView)
        {
            return (swapDatastoreNotWritableOnHost_LinkedView != null && base.Equals(swapDatastoreNotWritableOnHost_LinkedView));
        }

        public override bool Equals(object swapDatastoreNotWritableOnHost_LinkedView)
        {
            return Equals(swapDatastoreNotWritableOnHost_LinkedView as SwapDatastoreNotWritableOnHost_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SwapDatastoreUnset : VimFault, IEquatable<SwapDatastoreUnset>
    {
        public bool Equals(SwapDatastoreUnset swapDatastoreUnset)
        {
            return (swapDatastoreUnset != null && base.Equals(swapDatastoreUnset));
        }

        public override bool Equals(object swapDatastoreUnset)
        {
            return Equals(swapDatastoreUnset as SwapDatastoreUnset);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SwapPlacementOverrideNotSupported : InvalidVmConfig, IEquatable<SwapPlacementOverrideNotSupported>
    {
        public bool Equals(SwapPlacementOverrideNotSupported swapPlacementOverrideNotSupported)
        {
            return (swapPlacementOverrideNotSupported != null && base.Equals(swapPlacementOverrideNotSupported));
        }

        public override bool Equals(object swapPlacementOverrideNotSupported)
        {
            return Equals(swapPlacementOverrideNotSupported as SwapPlacementOverrideNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SwitchIpUnset : DvsFault, IEquatable<SwitchIpUnset>
    {
        public bool Equals(SwitchIpUnset switchIpUnset)
        {
            return (switchIpUnset != null && base.Equals(switchIpUnset));
        }

        public override bool Equals(object switchIpUnset)
        {
            return Equals(switchIpUnset as SwitchIpUnset);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SwitchNotInUpgradeMode : DvsFault, IEquatable<SwitchNotInUpgradeMode>
    {
        public bool Equals(SwitchNotInUpgradeMode switchNotInUpgradeMode)
        {
            return (switchNotInUpgradeMode != null && base.Equals(switchNotInUpgradeMode));
        }

        public override bool Equals(object switchNotInUpgradeMode)
        {
            return Equals(switchNotInUpgradeMode as SwitchNotInUpgradeMode);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class SyslogConfig : IEquatable<SyslogConfig>
    {
        public SyslogConfig()
        {
        }

        public string LogHost { get; set; }

        public string LogDir { get; set; }

        public bool LogDirUnique { get; set; }

        public bool CheckSslCerts { get; set; }

        public long DefaultRotate { get; set; }

        public long DefaultSize { get; set; }

        public long DefaultTimeout { get; set; }

        public long QueueDropMark { get; set; }

        public long DropLogRotate { get; set; }

        public long DropLogSize { get; set; }

        public bool Equals(SyslogConfig syslogConfig)
        {
            return (syslogConfig != null && this.LogHost == syslogConfig.LogHost && this.CheckSslCerts == syslogConfig.CheckSslCerts && this.DefaultRotate == syslogConfig.DefaultRotate && this.DefaultSize == syslogConfig.DefaultSize && this.DefaultTimeout == syslogConfig.DefaultTimeout && this.DropLogRotate == syslogConfig.DropLogRotate && this.DropLogSize == syslogConfig.DropLogSize && this.LogDir == syslogConfig.LogDir && this.LogDirUnique == syslogConfig.LogDirUnique && this.QueueDropMark == syslogConfig.QueueDropMark);
        }

        public override bool Equals(object syslogConfig)
        {
            return this.Equals(syslogConfig as SyslogConfig);
        }

        public override int GetHashCode()
        {
            return (LogHost + "_" +LogDir + "_" + DefaultRotate + "_" + DefaultSize + "_" + DefaultTimeout + "_" + QueueDropMark + "_" + DropLogRotate + "_" + DropLogSize).GetHashCode();
        }
    }

    public class SyslogConfigOut : IEquatable<SyslogConfigOut>
    {
        public SyslogConfigOut()
        {
        }

        public string RemoteHost { get; set; }

        public string LogDir { get; set; }

        public bool LogDirUnique { get; set; }

        public bool CheckSslCerts { get; set; }

        public long DefaultRotate { get; set; }

        public long DefaultSize { get; set; }

        public long DefaultTimeout { get; set; }

        public long QueueDropMark { get; set; }

        public long DropLogRotate { get; set; }

        public long DropLogSize { get; set; }

        public bool Equals(SyslogConfigOut syslogConfigOut)
        {
            return (syslogConfigOut != null && this.RemoteHost == syslogConfigOut.RemoteHost && this.LogDir == syslogConfigOut.LogDir && this.LogDirUnique == syslogConfigOut.LogDirUnique && this.CheckSslCerts == syslogConfigOut.CheckSslCerts && this.DefaultRotate == syslogConfigOut.DefaultRotate && this.DefaultSize == syslogConfigOut.DefaultSize && this.DefaultTimeout == syslogConfigOut.DefaultTimeout && this.QueueDropMark == syslogConfigOut.QueueDropMark && this.DropLogRotate == syslogConfigOut.DropLogRotate && this.DropLogSize == syslogConfigOut.DropLogSize);
        }

        public override bool Equals(object syslogConfigOut)
        {
            return this.Equals(syslogConfigOut as SyslogConfigOut);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + LogDir + "_" + LogDirUnique + "_" + CheckSslCerts + "_" + DefaultRotate + "_" + DefaultSize + "_" + DefaultTimeout + "_" + QueueDropMark + "_" + DropLogRotate + "_" + DropLogSize).GetHashCode();
        }
    }

    public class SystemError : RuntimeFault, IEquatable<SystemError>
    {
        public string Reason { get; set; }

        public bool Equals(SystemError systemError)
        {
            return (systemError != null && this.Reason == systemError.Reason);
        }

        public override bool Equals(object systemError)
        {
            return Equals(systemError as SystemError);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class SystemEventInfo : DynamicData, IEquatable<SystemEventInfo>
    {
        public long RecordId { get; set; }

        public string When { get; set; }

        public long SelType { get; set; }

        public string Message { get; set; }

        public long SensorNumber { get; set; }

        public bool Equals(SystemEventInfo systemEventInfo)
        {
            return (systemEventInfo != null && this.RecordId == systemEventInfo.RecordId && this.When == systemEventInfo.When && this.SelType == systemEventInfo.SelType && this.Message == systemEventInfo.Message && this.SensorNumber == systemEventInfo.SensorNumber);
        }

        public override bool Equals(object systemEventInfo)
        {
            return Equals(systemEventInfo as SystemEventInfo);
        }

        public override int GetHashCode()
        {
            return (RecordId + "_" + When + "_" + SelType + "_" + Message + "_" + SensorNumber).GetHashCode();
        }
    }

    public class Tag : DynamicData, IEquatable<Tag>
    {
        public string Key { get; set; }

        public bool Equals(Tag tag)
        {
            return (tag != null && this.Key == tag.Key);
        }

        public override bool Equals(object tag)
        {
            return Equals(tag as Tag);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class Task : ExtensibleManagedObject, IEquatable<Task>
    {
        public TaskInfo Info { get; set; }

        public void CancelTask()
        {
        }

        public void UpdateProgress(int percentDone)
        {
        }

        public void SetTaskState(TaskInfoState state, object result, LocalizedMethodFault fault)
        {
        }

        public void SetTaskDescription(LocalizableMessage description)
        {
        }

        public bool Equals(Task task)
        {
            return (task != null && ((this.Info == null && task.Info == null) || (this.Info != null && this.Info.Equals(task.Info))));
        }

        public override bool Equals(object task)
        {
            return Equals(task as Task);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class TaskDescription : DynamicData, IEquatable<TaskDescription>
    {
        public ElementDescription[] MethodInfo { get; set; }

        public ElementDescription[] State { get; set; }

        public TypeDescription[] Reason { get; set; }

        public bool Equals(TaskDescription taskDescription)
        {
            return (taskDescription != null && ((this.MethodInfo == null && taskDescription.MethodInfo == null) || (this.MethodInfo != null && taskDescription.MethodInfo != null && Enumerable.SequenceEqual(this.MethodInfo, taskDescription.MethodInfo))) && ((this.State == null && taskDescription.State == null) || (this.State != null && taskDescription.State != null && Enumerable.SequenceEqual(this.State, taskDescription.State))) && ((this.Reason == null && taskDescription.Reason == null) || (this.Reason != null && taskDescription.Reason != null && Enumerable.SequenceEqual(this.Reason, taskDescription.Reason))));
        }

        public override bool Equals(object taskDescription)
        {
            return Equals(taskDescription as TaskDescription);
        }

        public override int GetHashCode()
        {
            return (MethodInfo + "_" + State + "_" + Reason).GetHashCode();
        }
    }

    public class TaskEvent : Event, IEquatable<TaskEvent>
    {
        public TaskInfo Info { get; set; }

        public bool Equals(TaskEvent taskEvent)
        {
            return (taskEvent != null && ((this.Info == null && taskEvent.Info == null) || (this.Info != null && this.Info.Equals(taskEvent.Info))));
        }

        public override bool Equals(object taskEvent)
        {
            return Equals(taskEvent as TaskEvent);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class TaskFilterSpec : DynamicData, IEquatable<TaskFilterSpec>
    {
        public TaskFilterSpecByEntity Entity { get; set; }

        public TaskFilterSpecByTime Time { get; set; }

        public TaskFilterSpecByUsername UserName { get; set; }

        public string[] ActivationId { get; set; }

        public TaskInfoState[] State { get; set; }

        public ManagedObjectReference Alarm { get; set; }

        public ManagedObjectReference ScheduledTask { get; set; }

        public int[] EventChainId { get; set; }

        public string[] Tag { get; set; }

        public string[] ParentTaskKey { get; set; }

        public string[] RootTaskKey { get; set; }

        public TaskFilterSpec_LinkedView LinkedView { get; set; }

        public bool Equals(TaskFilterSpec taskFilterSpec)
        {
            return (taskFilterSpec != null && ((this.Entity == null && taskFilterSpec.Entity == null) || (this.Entity != null && this.Entity.Equals(taskFilterSpec.Entity))) && ((this.Time == null && taskFilterSpec.Time == null) || (this.Time != null && this.Time.Equals(taskFilterSpec.Time))) && ((this.UserName == null && taskFilterSpec.UserName == null) || (this.UserName != null && this.UserName.Equals(taskFilterSpec.UserName))) && ((this.ActivationId == null && taskFilterSpec.ActivationId == null) || (this.ActivationId != null && taskFilterSpec.ActivationId != null && Enumerable.SequenceEqual(this.ActivationId, taskFilterSpec.ActivationId))) && ((this.State == null && taskFilterSpec.State == null) || (this.State != null && taskFilterSpec.State != null && Enumerable.SequenceEqual(this.State, taskFilterSpec.State))) && ((this.Alarm == null && taskFilterSpec.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(taskFilterSpec.Alarm))) && ((this.ScheduledTask == null && taskFilterSpec.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(taskFilterSpec.ScheduledTask))) && ((this.EventChainId == null && taskFilterSpec.EventChainId == null) || (this.EventChainId != null && taskFilterSpec.EventChainId != null && Enumerable.SequenceEqual(this.EventChainId, taskFilterSpec.EventChainId))) && ((this.Tag == null && taskFilterSpec.Tag == null) || (this.Tag != null && taskFilterSpec.Tag != null && Enumerable.SequenceEqual(this.Tag, taskFilterSpec.Tag))) && ((this.ParentTaskKey == null && taskFilterSpec.ParentTaskKey == null) || (this.ParentTaskKey != null && taskFilterSpec.ParentTaskKey != null && Enumerable.SequenceEqual(this.ParentTaskKey, taskFilterSpec.ParentTaskKey))) && ((this.RootTaskKey == null && taskFilterSpec.RootTaskKey == null) || (this.RootTaskKey != null && taskFilterSpec.RootTaskKey != null && Enumerable.SequenceEqual(this.RootTaskKey, taskFilterSpec.RootTaskKey))) && ((this.LinkedView == null && taskFilterSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskFilterSpec.LinkedView))));
        }

        public override bool Equals(object taskFilterSpec)
        {
            return Equals(taskFilterSpec as TaskFilterSpec);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Time + "_" + UserName + "_" + ActivationId + "_" + State + "_" + Alarm + "_" + ScheduledTask + "_" + EventChainId + "_" + Tag + "_" + ParentTaskKey + "_" + RootTaskKey + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskFilterSpec_LinkedView : IEquatable<TaskFilterSpec_LinkedView>
    {
        public Alarm Alarm { get; set; }

        public ScheduledTask ScheduledTask { get; set; }

        public bool Equals(TaskFilterSpec_LinkedView taskFilterSpec_LinkedView)
        {
            return (taskFilterSpec_LinkedView != null && ((this.Alarm == null && taskFilterSpec_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(taskFilterSpec_LinkedView.Alarm))) && ((this.ScheduledTask == null && taskFilterSpec_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(taskFilterSpec_LinkedView.ScheduledTask))));
        }

        public override bool Equals(object taskFilterSpec_LinkedView)
        {
            return Equals(taskFilterSpec_LinkedView as TaskFilterSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Alarm + "_" + ScheduledTask).GetHashCode();
        }
    }

    public class TaskFilterSpecByEntity : DynamicData, IEquatable<TaskFilterSpecByEntity>
    {
        public ManagedObjectReference Entity { get; set; }

        public TaskFilterSpecRecursionOption Recursion { get; set; }

        public TaskFilterSpecByEntity_LinkedView LinkedView { get; set; }

        public bool Equals(TaskFilterSpecByEntity taskFilterSpecByEntity)
        {
            return (taskFilterSpecByEntity != null && ((this.Entity == null && taskFilterSpecByEntity.Entity == null) || (this.Entity != null && this.Entity.Equals(taskFilterSpecByEntity.Entity))) && this.Recursion == taskFilterSpecByEntity.Recursion && ((this.LinkedView == null && taskFilterSpecByEntity.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskFilterSpecByEntity.LinkedView))));
        }

        public override bool Equals(object taskFilterSpecByEntity)
        {
            return Equals(taskFilterSpecByEntity as TaskFilterSpecByEntity);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Recursion + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskFilterSpecByEntity_LinkedView : IEquatable<TaskFilterSpecByEntity_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(TaskFilterSpecByEntity_LinkedView taskFilterSpecByEntity_LinkedView)
        {
            return (taskFilterSpecByEntity_LinkedView != null && ((this.Entity == null && taskFilterSpecByEntity_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(taskFilterSpecByEntity_LinkedView.Entity))));
        }

        public override bool Equals(object taskFilterSpecByEntity_LinkedView)
        {
            return Equals(taskFilterSpecByEntity_LinkedView as TaskFilterSpecByEntity_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class TaskFilterSpecByTime : DynamicData, IEquatable<TaskFilterSpecByTime>
    {
        public TaskFilterSpecTimeOption TimeType { get; set; }

        public DateTime? BeginTime { get; set; }

        public DateTime? EndTime { get; set; }

        public bool Equals(TaskFilterSpecByTime taskFilterSpecByTime)
        {
            return (taskFilterSpecByTime != null && this.TimeType == taskFilterSpecByTime.TimeType && ((this.BeginTime == null && taskFilterSpecByTime.BeginTime == null) || (this.BeginTime != null && this.BeginTime.Equals(taskFilterSpecByTime.BeginTime))) && ((this.EndTime == null && taskFilterSpecByTime.EndTime == null) || (this.EndTime != null && this.EndTime.Equals(taskFilterSpecByTime.EndTime))));
        }

        public override bool Equals(object taskFilterSpecByTime)
        {
            return Equals(taskFilterSpecByTime as TaskFilterSpecByTime);
        }

        public override int GetHashCode()
        {
            return (TimeType + "_" + BeginTime + "_" + EndTime).GetHashCode();
        }
    }

    public class TaskFilterSpecByUsername : DynamicData, IEquatable<TaskFilterSpecByUsername>
    {
        public bool SystemUser { get; set; }

        public string[] UserList { get; set; }

        public bool Equals(TaskFilterSpecByUsername taskFilterSpecByUsername)
        {
            return (taskFilterSpecByUsername != null && this.SystemUser == taskFilterSpecByUsername.SystemUser && ((this.UserList == null && taskFilterSpecByUsername.UserList == null) || (this.UserList != null && taskFilterSpecByUsername.UserList != null && Enumerable.SequenceEqual(this.UserList, taskFilterSpecByUsername.UserList))));
        }

        public override bool Equals(object taskFilterSpecByUsername)
        {
            return Equals(taskFilterSpecByUsername as TaskFilterSpecByUsername);
        }

        public override int GetHashCode()
        {
            return (SystemUser + "_" + UserList).GetHashCode();
        }
    }

    public class TaskHistoryCollector : HistoryCollector, IEquatable<TaskHistoryCollector>
    {
        public TaskInfo[] LatestPage { get; set; }

        public TaskInfo[] ReadNextTasks(int maxCount)
        {
            return default(TaskInfo[]);
        }

        public TaskInfo[] ReadPreviousTasks(int maxCount)
        {
            return default(TaskInfo[]);
        }

        public bool Equals(TaskHistoryCollector taskHistoryCollector)
        {
            return (taskHistoryCollector != null && ((this.LatestPage == null && taskHistoryCollector.LatestPage == null) || (this.LatestPage != null && taskHistoryCollector.LatestPage != null && Enumerable.SequenceEqual(this.LatestPage, taskHistoryCollector.LatestPage))));
        }

        public override bool Equals(object taskHistoryCollector)
        {
            return Equals(taskHistoryCollector as TaskHistoryCollector);
        }

        public override int GetHashCode()
        {
            return (LatestPage).GetHashCode();
        }
    }

    public class TaskInfo : DynamicData, IEquatable<TaskInfo>
    {
        public string Key { get; set; }

        public ManagedObjectReference Task { get; set; }

        public LocalizableMessage Description { get; set; }

        public string Name { get; set; }

        public string DescriptionId { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public string EntityName { get; set; }

        public ManagedObjectReference[] Locked { get; set; }

        public TaskInfoState State { get; set; }

        public bool Cancelled { get; set; }

        public bool Cancelable { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public object Result { get; set; }

        public int? Progress { get; set; }

        public TaskReason Reason { get; set; }

        public DateTime QueueTime { get; set; }

        public DateTime? StartTime { get; set; }

        public DateTime? CompleteTime { get; set; }

        public int EventChainId { get; set; }

        public string ChangeTag { get; set; }

        public string ParentTaskKey { get; set; }

        public string RootTaskKey { get; set; }

        public string ActivationId { get; set; }

        public TaskInfo_LinkedView LinkedView { get; set; }

        public bool Equals(TaskInfo taskInfo)
        {
            return (taskInfo != null && this.Key == taskInfo.Key && ((this.Task == null && taskInfo.Task == null) || (this.Task != null && this.Task.Equals(taskInfo.Task))) && ((this.Description == null && taskInfo.Description == null) || (this.Description != null && this.Description.Equals(taskInfo.Description))) && this.Name == taskInfo.Name && this.DescriptionId == taskInfo.DescriptionId && ((this.Entity == null && taskInfo.Entity == null) || (this.Entity != null && this.Entity.Equals(taskInfo.Entity))) && this.EntityName == taskInfo.EntityName && ((this.Locked == null && taskInfo.Locked == null) || (this.Locked != null && taskInfo.Locked != null && Enumerable.SequenceEqual(this.Locked, taskInfo.Locked))) && this.State == taskInfo.State && this.Cancelled == taskInfo.Cancelled && this.Cancelable == taskInfo.Cancelable && ((this.Error == null && taskInfo.Error == null) || (this.Error != null && this.Error.Equals(taskInfo.Error))) && ((this.Result == null && taskInfo.Result == null) || (this.Result != null && this.Result.Equals(taskInfo.Result))) && ((this.Progress == null && taskInfo.Progress == null) || (this.Progress != null && this.Progress.Equals(taskInfo.Progress))) && ((this.Reason == null && taskInfo.Reason == null) || (this.Reason != null && this.Reason.Equals(taskInfo.Reason))) && this.QueueTime == taskInfo.QueueTime && ((this.StartTime == null && taskInfo.StartTime == null) || (this.StartTime != null && this.StartTime.Equals(taskInfo.StartTime))) && ((this.CompleteTime == null && taskInfo.CompleteTime == null) || (this.CompleteTime != null && this.CompleteTime.Equals(taskInfo.CompleteTime))) && this.EventChainId == taskInfo.EventChainId && this.ChangeTag == taskInfo.ChangeTag && this.ParentTaskKey == taskInfo.ParentTaskKey && this.RootTaskKey == taskInfo.RootTaskKey && this.ActivationId == taskInfo.ActivationId && ((this.LinkedView == null && taskInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskInfo.LinkedView))));
        }

        public override bool Equals(object taskInfo)
        {
            return Equals(taskInfo as TaskInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Task + "_" + Description + "_" + Name + "_" + DescriptionId + "_" + Entity + "_" + EntityName + "_" + Locked + "_" + State + "_" + Cancelled + "_" + Cancelable + "_" + Error + "_" + Result + "_" + Progress + "_" + Reason + "_" + QueueTime + "_" + StartTime + "_" + CompleteTime + "_" + EventChainId + "_" + ChangeTag + "_" + ParentTaskKey + "_" + RootTaskKey + "_" + ActivationId + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskInfo_LinkedView : IEquatable<TaskInfo_LinkedView>
    {
        public Task Task { get; set; }

        public ManagedEntity Entity { get; set; }

        public ManagedEntity[] Locked { get; set; }

        public bool Equals(TaskInfo_LinkedView taskInfo_LinkedView)
        {
            return (taskInfo_LinkedView != null && ((this.Task == null && taskInfo_LinkedView.Task == null) || (this.Task != null && this.Task.Equals(taskInfo_LinkedView.Task))) && ((this.Entity == null && taskInfo_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(taskInfo_LinkedView.Entity))) && ((this.Locked == null && taskInfo_LinkedView.Locked == null) || (this.Locked != null && taskInfo_LinkedView.Locked != null && Enumerable.SequenceEqual(this.Locked, taskInfo_LinkedView.Locked))));
        }

        public override bool Equals(object taskInfo_LinkedView)
        {
            return Equals(taskInfo_LinkedView as TaskInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Task + "_" + Entity + "_" + Locked).GetHashCode();
        }
    }

    public class TaskInProgress : VimFault, IEquatable<TaskInProgress>
    {
        public ManagedObjectReference Task { get; set; }

        public TaskInProgress_LinkedView LinkedView { get; set; }

        public bool Equals(TaskInProgress taskInProgress)
        {
            return (taskInProgress != null && ((this.Task == null && taskInProgress.Task == null) || (this.Task != null && this.Task.Equals(taskInProgress.Task))) && ((this.LinkedView == null && taskInProgress.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskInProgress.LinkedView))));
        }

        public override bool Equals(object taskInProgress)
        {
            return Equals(taskInProgress as TaskInProgress);
        }

        public override int GetHashCode()
        {
            return (Task + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskInProgress_LinkedView : IEquatable<TaskInProgress_LinkedView>
    {
        public Task Task { get; set; }

        public bool Equals(TaskInProgress_LinkedView taskInProgress_LinkedView)
        {
            return (taskInProgress_LinkedView != null && ((this.Task == null && taskInProgress_LinkedView.Task == null) || (this.Task != null && this.Task.Equals(taskInProgress_LinkedView.Task))));
        }

        public override bool Equals(object taskInProgress_LinkedView)
        {
            return Equals(taskInProgress_LinkedView as TaskInProgress_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Task).GetHashCode();
        }
    }

    public class TaskManager : ViewBase, IEquatable<TaskManager>
    {
        public ManagedObjectReference[] RecentTask { get; set; }

        public TaskDescription Description { get; set; }

        public int MaxCollector { get; set; }

        public TaskManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateCollectorForTasks(TaskFilterSpec filter)
        {
            return default(ManagedObjectReference);
        }

        public TaskInfo CreateTask(ManagedObjectReference obj, string taskTypeId, string initiatedBy, bool cancelable, string parentTaskKey, string activationId)
        {
            return default(TaskInfo);
        }

        public bool Equals(TaskManager taskManager)
        {
            return (taskManager != null && ((this.RecentTask == null && taskManager.RecentTask == null) || (this.RecentTask != null && taskManager.RecentTask != null && Enumerable.SequenceEqual(this.RecentTask, taskManager.RecentTask))) && ((this.Description == null && taskManager.Description == null) || (this.Description != null && this.Description.Equals(taskManager.Description))) && this.MaxCollector == taskManager.MaxCollector && ((this.LinkedView == null && taskManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskManager.LinkedView))));
        }

        public override bool Equals(object taskManager)
        {
            return Equals(taskManager as TaskManager);
        }

        public override int GetHashCode()
        {
            return (RecentTask + "_" + Description + "_" + MaxCollector + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskManager_LinkedView : IEquatable<TaskManager_LinkedView>
    {
        public Task[] RecentTask { get; set; }

        public bool Equals(TaskManager_LinkedView taskManager_LinkedView)
        {
            return (taskManager_LinkedView != null && ((this.RecentTask == null && taskManager_LinkedView.RecentTask == null) || (this.RecentTask != null && taskManager_LinkedView.RecentTask != null && Enumerable.SequenceEqual(this.RecentTask, taskManager_LinkedView.RecentTask))));
        }

        public override bool Equals(object taskManager_LinkedView)
        {
            return Equals(taskManager_LinkedView as TaskManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (RecentTask).GetHashCode();
        }
    }

    public class TaskReason : DynamicData, IEquatable<TaskReason>
    {
        public bool Equals(TaskReason taskReason)
        {
            return (taskReason != null && base.Equals(taskReason));
        }

        public override bool Equals(object taskReason)
        {
            return Equals(taskReason as TaskReason);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TaskReasonAlarm : TaskReason, IEquatable<TaskReasonAlarm>
    {
        public string AlarmName { get; set; }

        public ManagedObjectReference Alarm { get; set; }

        public string EntityName { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public TaskReasonAlarm_LinkedView LinkedView { get; set; }

        public bool Equals(TaskReasonAlarm taskReasonAlarm)
        {
            return (taskReasonAlarm != null && this.AlarmName == taskReasonAlarm.AlarmName && ((this.Alarm == null && taskReasonAlarm.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(taskReasonAlarm.Alarm))) && this.EntityName == taskReasonAlarm.EntityName && ((this.Entity == null && taskReasonAlarm.Entity == null) || (this.Entity != null && this.Entity.Equals(taskReasonAlarm.Entity))) && ((this.LinkedView == null && taskReasonAlarm.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskReasonAlarm.LinkedView))));
        }

        public override bool Equals(object taskReasonAlarm)
        {
            return Equals(taskReasonAlarm as TaskReasonAlarm);
        }

        public override int GetHashCode()
        {
            return (AlarmName + "_" + Alarm + "_" + EntityName + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskReasonAlarm_LinkedView : IEquatable<TaskReasonAlarm_LinkedView>
    {
        public Alarm Alarm { get; set; }

        public ManagedEntity Entity { get; set; }

        public bool Equals(TaskReasonAlarm_LinkedView taskReasonAlarm_LinkedView)
        {
            return (taskReasonAlarm_LinkedView != null && ((this.Alarm == null && taskReasonAlarm_LinkedView.Alarm == null) || (this.Alarm != null && this.Alarm.Equals(taskReasonAlarm_LinkedView.Alarm))) && ((this.Entity == null && taskReasonAlarm_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(taskReasonAlarm_LinkedView.Entity))));
        }

        public override bool Equals(object taskReasonAlarm_LinkedView)
        {
            return Equals(taskReasonAlarm_LinkedView as TaskReasonAlarm_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Alarm + "_" + Entity).GetHashCode();
        }
    }

    public class TaskReasonSchedule : TaskReason, IEquatable<TaskReasonSchedule>
    {
        public string Name { get; set; }

        public ManagedObjectReference ScheduledTask { get; set; }

        public TaskReasonSchedule_LinkedView LinkedView { get; set; }

        public bool Equals(TaskReasonSchedule taskReasonSchedule)
        {
            return (taskReasonSchedule != null && this.Name == taskReasonSchedule.Name && ((this.ScheduledTask == null && taskReasonSchedule.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(taskReasonSchedule.ScheduledTask))) && ((this.LinkedView == null && taskReasonSchedule.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(taskReasonSchedule.LinkedView))));
        }

        public override bool Equals(object taskReasonSchedule)
        {
            return Equals(taskReasonSchedule as TaskReasonSchedule);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + ScheduledTask + "_" + LinkedView).GetHashCode();
        }
    }

    public class TaskReasonSchedule_LinkedView : IEquatable<TaskReasonSchedule_LinkedView>
    {
        public ScheduledTask ScheduledTask { get; set; }

        public bool Equals(TaskReasonSchedule_LinkedView taskReasonSchedule_LinkedView)
        {
            return (taskReasonSchedule_LinkedView != null && ((this.ScheduledTask == null && taskReasonSchedule_LinkedView.ScheduledTask == null) || (this.ScheduledTask != null && this.ScheduledTask.Equals(taskReasonSchedule_LinkedView.ScheduledTask))));
        }

        public override bool Equals(object taskReasonSchedule_LinkedView)
        {
            return Equals(taskReasonSchedule_LinkedView as TaskReasonSchedule_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ScheduledTask).GetHashCode();
        }
    }

    public class TaskReasonSystem : TaskReason, IEquatable<TaskReasonSystem>
    {
        public bool Equals(TaskReasonSystem taskReasonSystem)
        {
            return (taskReasonSystem != null && base.Equals(taskReasonSystem));
        }

        public override bool Equals(object taskReasonSystem)
        {
            return Equals(taskReasonSystem as TaskReasonSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TaskReasonUser : TaskReason, IEquatable<TaskReasonUser>
    {
        public string UserName { get; set; }

        public bool Equals(TaskReasonUser taskReasonUser)
        {
            return (taskReasonUser != null && this.UserName == taskReasonUser.UserName);
        }

        public override bool Equals(object taskReasonUser)
        {
            return Equals(taskReasonUser as TaskReasonUser);
        }

        public override int GetHashCode()
        {
            return (UserName).GetHashCode();
        }
    }

    public class TaskScheduler : DynamicData, IEquatable<TaskScheduler>
    {
        public DateTime? ActiveTime { get; set; }

        public DateTime? ExpireTime { get; set; }

        public bool Equals(TaskScheduler taskScheduler)
        {
            return (taskScheduler != null && ((this.ActiveTime == null && taskScheduler.ActiveTime == null) || (this.ActiveTime != null && this.ActiveTime.Equals(taskScheduler.ActiveTime))) && ((this.ExpireTime == null && taskScheduler.ExpireTime == null) || (this.ExpireTime != null && this.ExpireTime.Equals(taskScheduler.ExpireTime))));
        }

        public override bool Equals(object taskScheduler)
        {
            return Equals(taskScheduler as TaskScheduler);
        }

        public override int GetHashCode()
        {
            return (ActiveTime + "_" + ExpireTime).GetHashCode();
        }
    }

    public class TaskTimeoutEvent : TaskEvent, IEquatable<TaskTimeoutEvent>
    {
        public bool Equals(TaskTimeoutEvent taskTimeoutEvent)
        {
            return (taskTimeoutEvent != null && base.Equals(taskTimeoutEvent));
        }

        public override bool Equals(object taskTimeoutEvent)
        {
            return Equals(taskTimeoutEvent as TaskTimeoutEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TeamingMatchEvent : DvsHealthStatusChangeEvent, IEquatable<TeamingMatchEvent>
    {
        public bool Equals(TeamingMatchEvent teamingMatchEvent)
        {
            return (teamingMatchEvent != null && base.Equals(teamingMatchEvent));
        }

        public override bool Equals(object teamingMatchEvent)
        {
            return Equals(teamingMatchEvent as TeamingMatchEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TeamingMisMatchEvent : DvsHealthStatusChangeEvent, IEquatable<TeamingMisMatchEvent>
    {
        public bool Equals(TeamingMisMatchEvent teamingMisMatchEvent)
        {
            return (teamingMisMatchEvent != null && base.Equals(teamingMisMatchEvent));
        }

        public override bool Equals(object teamingMisMatchEvent)
        {
            return Equals(teamingMisMatchEvent as TeamingMisMatchEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TemplateBeingUpgradedEvent : TemplateUpgradeEvent, IEquatable<TemplateBeingUpgradedEvent>
    {
        public bool Equals(TemplateBeingUpgradedEvent templateBeingUpgradedEvent)
        {
            return (templateBeingUpgradedEvent != null && base.Equals(templateBeingUpgradedEvent));
        }

        public override bool Equals(object templateBeingUpgradedEvent)
        {
            return Equals(templateBeingUpgradedEvent as TemplateBeingUpgradedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TemplateConfigFileInfo : VmConfigFileInfo, IEquatable<TemplateConfigFileInfo>
    {
        public bool Equals(TemplateConfigFileInfo templateConfigFileInfo)
        {
            return (templateConfigFileInfo != null && base.Equals(templateConfigFileInfo));
        }

        public override bool Equals(object templateConfigFileInfo)
        {
            return Equals(templateConfigFileInfo as TemplateConfigFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TemplateConfigFileQuery : VmConfigFileQuery, IEquatable<TemplateConfigFileQuery>
    {
        public bool Equals(TemplateConfigFileQuery templateConfigFileQuery)
        {
            return (templateConfigFileQuery != null && base.Equals(templateConfigFileQuery));
        }

        public override bool Equals(object templateConfigFileQuery)
        {
            return Equals(templateConfigFileQuery as TemplateConfigFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TemplateUpgradedEvent : TemplateUpgradeEvent, IEquatable<TemplateUpgradedEvent>
    {
        public bool Equals(TemplateUpgradedEvent templateUpgradedEvent)
        {
            return (templateUpgradedEvent != null && base.Equals(templateUpgradedEvent));
        }

        public override bool Equals(object templateUpgradedEvent)
        {
            return Equals(templateUpgradedEvent as TemplateUpgradedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TemplateUpgradeEvent : Event, IEquatable<TemplateUpgradeEvent>
    {
        public string LegacyTemplate { get; set; }

        public bool Equals(TemplateUpgradeEvent templateUpgradeEvent)
        {
            return (templateUpgradeEvent != null && this.LegacyTemplate == templateUpgradeEvent.LegacyTemplate);
        }

        public override bool Equals(object templateUpgradeEvent)
        {
            return Equals(templateUpgradeEvent as TemplateUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return (LegacyTemplate).GetHashCode();
        }
    }

    public class TemplateUpgradeFailedEvent : TemplateUpgradeEvent, IEquatable<TemplateUpgradeFailedEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(TemplateUpgradeFailedEvent templateUpgradeFailedEvent)
        {
            return (templateUpgradeFailedEvent != null && ((this.Reason == null && templateUpgradeFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(templateUpgradeFailedEvent.Reason))));
        }

        public override bool Equals(object templateUpgradeFailedEvent)
        {
            return Equals(templateUpgradeFailedEvent as TemplateUpgradeFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class ThirdPartyLicenseAssignmentFailed : RuntimeFault, IEquatable<ThirdPartyLicenseAssignmentFailed>
    {
        public ManagedObjectReference Host { get; set; }

        public string Module { get; set; }

        public string Reason { get; set; }

        public ThirdPartyLicenseAssignmentFailed_LinkedView LinkedView { get; set; }

        public bool Equals(ThirdPartyLicenseAssignmentFailed thirdPartyLicenseAssignmentFailed)
        {
            return (thirdPartyLicenseAssignmentFailed != null && ((this.Host == null && thirdPartyLicenseAssignmentFailed.Host == null) || (this.Host != null && this.Host.Equals(thirdPartyLicenseAssignmentFailed.Host))) && this.Module == thirdPartyLicenseAssignmentFailed.Module && this.Reason == thirdPartyLicenseAssignmentFailed.Reason && ((this.LinkedView == null && thirdPartyLicenseAssignmentFailed.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(thirdPartyLicenseAssignmentFailed.LinkedView))));
        }

        public override bool Equals(object thirdPartyLicenseAssignmentFailed)
        {
            return Equals(thirdPartyLicenseAssignmentFailed as ThirdPartyLicenseAssignmentFailed);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Module + "_" + Reason + "_" + LinkedView).GetHashCode();
        }
    }

    public class ThirdPartyLicenseAssignmentFailed_LinkedView : IEquatable<ThirdPartyLicenseAssignmentFailed_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(ThirdPartyLicenseAssignmentFailed_LinkedView thirdPartyLicenseAssignmentFailed_LinkedView)
        {
            return (thirdPartyLicenseAssignmentFailed_LinkedView != null && ((this.Host == null && thirdPartyLicenseAssignmentFailed_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(thirdPartyLicenseAssignmentFailed_LinkedView.Host))));
        }

        public override bool Equals(object thirdPartyLicenseAssignmentFailed_LinkedView)
        {
            return Equals(thirdPartyLicenseAssignmentFailed_LinkedView as ThirdPartyLicenseAssignmentFailed_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class TicketedSessionAuthentication : GuestAuthentication, IEquatable<TicketedSessionAuthentication>
    {
        public string Ticket { get; set; }

        public bool Equals(TicketedSessionAuthentication ticketedSessionAuthentication)
        {
            return (ticketedSessionAuthentication != null && this.Ticket == ticketedSessionAuthentication.Ticket);
        }

        public override bool Equals(object ticketedSessionAuthentication)
        {
            return Equals(ticketedSessionAuthentication as TicketedSessionAuthentication);
        }

        public override int GetHashCode()
        {
            return (Ticket).GetHashCode();
        }
    }

    public class Timedout : VimFault, IEquatable<Timedout>
    {
        public bool Equals(Timedout timedout)
        {
            return (timedout != null && base.Equals(timedout));
        }

        public override bool Equals(object timedout)
        {
            return Equals(timedout as Timedout);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TimedOutHostOperationEvent : HostEvent, IEquatable<TimedOutHostOperationEvent>
    {
        public bool Equals(TimedOutHostOperationEvent timedOutHostOperationEvent)
        {
            return (timedOutHostOperationEvent != null && base.Equals(timedOutHostOperationEvent));
        }

        public override bool Equals(object timedOutHostOperationEvent)
        {
            return Equals(timedOutHostOperationEvent as TimedOutHostOperationEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsAlreadyUpgraded : VmToolsUpgradeFault, IEquatable<ToolsAlreadyUpgraded>
    {
        public bool Equals(ToolsAlreadyUpgraded toolsAlreadyUpgraded)
        {
            return (toolsAlreadyUpgraded != null && base.Equals(toolsAlreadyUpgraded));
        }

        public override bool Equals(object toolsAlreadyUpgraded)
        {
            return Equals(toolsAlreadyUpgraded as ToolsAlreadyUpgraded);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsAutoUpgradeNotSupported : VmToolsUpgradeFault, IEquatable<ToolsAutoUpgradeNotSupported>
    {
        public bool Equals(ToolsAutoUpgradeNotSupported toolsAutoUpgradeNotSupported)
        {
            return (toolsAutoUpgradeNotSupported != null && base.Equals(toolsAutoUpgradeNotSupported));
        }

        public override bool Equals(object toolsAutoUpgradeNotSupported)
        {
            return Equals(toolsAutoUpgradeNotSupported as ToolsAutoUpgradeNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsConfigInfo : DynamicData, IEquatable<ToolsConfigInfo>
    {
        public int? ToolsVersion { get; set; }

        public string ToolsInstallType { get; set; }

        public bool? AfterPowerOn { get; set; }

        public bool? AfterResume { get; set; }

        public bool? BeforeGuestStandby { get; set; }

        public bool? BeforeGuestShutdown { get; set; }

        public bool? BeforeGuestReboot { get; set; }

        public string ToolsUpgradePolicy { get; set; }

        public string PendingCustomization { get; set; }

        public CryptoKeyId CustomizationKeyId { get; set; }

        public bool? SyncTimeWithHost { get; set; }

        public ToolsConfigInfoToolsLastInstallInfo LastInstallInfo { get; set; }

        public bool Equals(ToolsConfigInfo toolsConfigInfo)
        {
            return (toolsConfigInfo != null && ((this.ToolsVersion == null && toolsConfigInfo.ToolsVersion == null) || (this.ToolsVersion != null && this.ToolsVersion.Equals(toolsConfigInfo.ToolsVersion))) && this.ToolsInstallType == toolsConfigInfo.ToolsInstallType && ((this.AfterPowerOn == null && toolsConfigInfo.AfterPowerOn == null) || (this.AfterPowerOn != null && this.AfterPowerOn.Equals(toolsConfigInfo.AfterPowerOn))) && ((this.AfterResume == null && toolsConfigInfo.AfterResume == null) || (this.AfterResume != null && this.AfterResume.Equals(toolsConfigInfo.AfterResume))) && ((this.BeforeGuestStandby == null && toolsConfigInfo.BeforeGuestStandby == null) || (this.BeforeGuestStandby != null && this.BeforeGuestStandby.Equals(toolsConfigInfo.BeforeGuestStandby))) && ((this.BeforeGuestShutdown == null && toolsConfigInfo.BeforeGuestShutdown == null) || (this.BeforeGuestShutdown != null && this.BeforeGuestShutdown.Equals(toolsConfigInfo.BeforeGuestShutdown))) && ((this.BeforeGuestReboot == null && toolsConfigInfo.BeforeGuestReboot == null) || (this.BeforeGuestReboot != null && this.BeforeGuestReboot.Equals(toolsConfigInfo.BeforeGuestReboot))) && this.ToolsUpgradePolicy == toolsConfigInfo.ToolsUpgradePolicy && this.PendingCustomization == toolsConfigInfo.PendingCustomization && ((this.CustomizationKeyId == null && toolsConfigInfo.CustomizationKeyId == null) || (this.CustomizationKeyId != null && this.CustomizationKeyId.Equals(toolsConfigInfo.CustomizationKeyId))) && ((this.SyncTimeWithHost == null && toolsConfigInfo.SyncTimeWithHost == null) || (this.SyncTimeWithHost != null && this.SyncTimeWithHost.Equals(toolsConfigInfo.SyncTimeWithHost))) && ((this.LastInstallInfo == null && toolsConfigInfo.LastInstallInfo == null) || (this.LastInstallInfo != null && this.LastInstallInfo.Equals(toolsConfigInfo.LastInstallInfo))));
        }

        public override bool Equals(object toolsConfigInfo)
        {
            return Equals(toolsConfigInfo as ToolsConfigInfo);
        }

        public override int GetHashCode()
        {
            return (ToolsVersion + "_" + ToolsInstallType + "_" + AfterPowerOn + "_" + AfterResume + "_" + BeforeGuestStandby + "_" + BeforeGuestShutdown + "_" + BeforeGuestReboot + "_" + ToolsUpgradePolicy + "_" + PendingCustomization + "_" + CustomizationKeyId + "_" + SyncTimeWithHost + "_" + LastInstallInfo).GetHashCode();
        }
    }

    public class ToolsConfigInfoToolsLastInstallInfo : DynamicData, IEquatable<ToolsConfigInfoToolsLastInstallInfo>
    {
        public int Counter { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(ToolsConfigInfoToolsLastInstallInfo toolsConfigInfoToolsLastInstallInfo)
        {
            return (toolsConfigInfoToolsLastInstallInfo != null && this.Counter == toolsConfigInfoToolsLastInstallInfo.Counter && ((this.Fault == null && toolsConfigInfoToolsLastInstallInfo.Fault == null) || (this.Fault != null && this.Fault.Equals(toolsConfigInfoToolsLastInstallInfo.Fault))));
        }

        public override bool Equals(object toolsConfigInfoToolsLastInstallInfo)
        {
            return Equals(toolsConfigInfoToolsLastInstallInfo as ToolsConfigInfoToolsLastInstallInfo);
        }

        public override int GetHashCode()
        {
            return (Counter + "_" + Fault).GetHashCode();
        }
    }

    public class ToolsImageCopyFailed : VmToolsUpgradeFault, IEquatable<ToolsImageCopyFailed>
    {
        public bool Equals(ToolsImageCopyFailed toolsImageCopyFailed)
        {
            return (toolsImageCopyFailed != null && base.Equals(toolsImageCopyFailed));
        }

        public override bool Equals(object toolsImageCopyFailed)
        {
            return Equals(toolsImageCopyFailed as ToolsImageCopyFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsImageNotAvailable : VmToolsUpgradeFault, IEquatable<ToolsImageNotAvailable>
    {
        public bool Equals(ToolsImageNotAvailable toolsImageNotAvailable)
        {
            return (toolsImageNotAvailable != null && base.Equals(toolsImageNotAvailable));
        }

        public override bool Equals(object toolsImageNotAvailable)
        {
            return Equals(toolsImageNotAvailable as ToolsImageNotAvailable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsImageSignatureCheckFailed : VmToolsUpgradeFault, IEquatable<ToolsImageSignatureCheckFailed>
    {
        public bool Equals(ToolsImageSignatureCheckFailed toolsImageSignatureCheckFailed)
        {
            return (toolsImageSignatureCheckFailed != null && base.Equals(toolsImageSignatureCheckFailed));
        }

        public override bool Equals(object toolsImageSignatureCheckFailed)
        {
            return Equals(toolsImageSignatureCheckFailed as ToolsImageSignatureCheckFailed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsInstallationInProgress : MigrationFault, IEquatable<ToolsInstallationInProgress>
    {
        public bool Equals(ToolsInstallationInProgress toolsInstallationInProgress)
        {
            return (toolsInstallationInProgress != null && base.Equals(toolsInstallationInProgress));
        }

        public override bool Equals(object toolsInstallationInProgress)
        {
            return Equals(toolsInstallationInProgress as ToolsInstallationInProgress);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsUnavailable : VimFault, IEquatable<ToolsUnavailable>
    {
        public bool Equals(ToolsUnavailable toolsUnavailable)
        {
            return (toolsUnavailable != null && base.Equals(toolsUnavailable));
        }

        public override bool Equals(object toolsUnavailable)
        {
            return Equals(toolsUnavailable as ToolsUnavailable);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ToolsUpgradeCancelled : VmToolsUpgradeFault, IEquatable<ToolsUpgradeCancelled>
    {
        public bool Equals(ToolsUpgradeCancelled toolsUpgradeCancelled)
        {
            return (toolsUpgradeCancelled != null && base.Equals(toolsUpgradeCancelled));
        }

        public override bool Equals(object toolsUpgradeCancelled)
        {
            return Equals(toolsUpgradeCancelled as ToolsUpgradeCancelled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyConcurrentNativeClones : FileFault, IEquatable<TooManyConcurrentNativeClones>
    {
        public bool Equals(TooManyConcurrentNativeClones tooManyConcurrentNativeClones)
        {
            return (tooManyConcurrentNativeClones != null && base.Equals(tooManyConcurrentNativeClones));
        }

        public override bool Equals(object tooManyConcurrentNativeClones)
        {
            return Equals(tooManyConcurrentNativeClones as TooManyConcurrentNativeClones);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyConsecutiveOverrides : VimFault, IEquatable<TooManyConsecutiveOverrides>
    {
        public bool Equals(TooManyConsecutiveOverrides tooManyConsecutiveOverrides)
        {
            return (tooManyConsecutiveOverrides != null && base.Equals(tooManyConsecutiveOverrides));
        }

        public override bool Equals(object tooManyConsecutiveOverrides)
        {
            return Equals(tooManyConsecutiveOverrides as TooManyConsecutiveOverrides);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyDevices : InvalidVmConfig, IEquatable<TooManyDevices>
    {
        public bool Equals(TooManyDevices tooManyDevices)
        {
            return (tooManyDevices != null && base.Equals(tooManyDevices));
        }

        public override bool Equals(object tooManyDevices)
        {
            return Equals(tooManyDevices as TooManyDevices);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyDisksOnLegacyHost : MigrationFault, IEquatable<TooManyDisksOnLegacyHost>
    {
        public int DiskCount { get; set; }

        public bool TimeoutDanger { get; set; }

        public bool Equals(TooManyDisksOnLegacyHost tooManyDisksOnLegacyHost)
        {
            return (tooManyDisksOnLegacyHost != null && this.DiskCount == tooManyDisksOnLegacyHost.DiskCount && this.TimeoutDanger == tooManyDisksOnLegacyHost.TimeoutDanger);
        }

        public override bool Equals(object tooManyDisksOnLegacyHost)
        {
            return Equals(tooManyDisksOnLegacyHost as TooManyDisksOnLegacyHost);
        }

        public override int GetHashCode()
        {
            return (DiskCount + "_" + TimeoutDanger).GetHashCode();
        }
    }

    public class TooManyGuestLogons : GuestOperationsFault, IEquatable<TooManyGuestLogons>
    {
        public bool Equals(TooManyGuestLogons tooManyGuestLogons)
        {
            return (tooManyGuestLogons != null && base.Equals(tooManyGuestLogons));
        }

        public override bool Equals(object tooManyGuestLogons)
        {
            return Equals(tooManyGuestLogons as TooManyGuestLogons);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyHosts : HostConnectFault, IEquatable<TooManyHosts>
    {
        public bool Equals(TooManyHosts tooManyHosts)
        {
            return (tooManyHosts != null && base.Equals(tooManyHosts));
        }

        public override bool Equals(object tooManyHosts)
        {
            return Equals(tooManyHosts as TooManyHosts);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyNativeCloneLevels : FileFault, IEquatable<TooManyNativeCloneLevels>
    {
        public bool Equals(TooManyNativeCloneLevels tooManyNativeCloneLevels)
        {
            return (tooManyNativeCloneLevels != null && base.Equals(tooManyNativeCloneLevels));
        }

        public override bool Equals(object tooManyNativeCloneLevels)
        {
            return Equals(tooManyNativeCloneLevels as TooManyNativeCloneLevels);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManyNativeClonesOnFile : FileFault, IEquatable<TooManyNativeClonesOnFile>
    {
        public bool Equals(TooManyNativeClonesOnFile tooManyNativeClonesOnFile)
        {
            return (tooManyNativeClonesOnFile != null && base.Equals(tooManyNativeClonesOnFile));
        }

        public override bool Equals(object tooManyNativeClonesOnFile)
        {
            return Equals(tooManyNativeClonesOnFile as TooManyNativeClonesOnFile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TooManySnapshotLevels : SnapshotFault, IEquatable<TooManySnapshotLevels>
    {
        public bool Equals(TooManySnapshotLevels tooManySnapshotLevels)
        {
            return (tooManySnapshotLevels != null && base.Equals(tooManySnapshotLevels));
        }

        public override bool Equals(object tooManySnapshotLevels)
        {
            return Equals(tooManySnapshotLevels as TooManySnapshotLevels);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TraversalSpec : SelectionSpec, IEquatable<TraversalSpec>
    {
        public string Type { get; set; }

        public string Path { get; set; }

        public bool? Skip { get; set; }

        public SelectionSpec[] SelectSet { get; set; }

        public bool Equals(TraversalSpec traversalSpec)
        {
            return (traversalSpec != null && this.Type == traversalSpec.Type && this.Path == traversalSpec.Path && ((this.Skip == null && traversalSpec.Skip == null) || (this.Skip != null && this.Skip.Equals(traversalSpec.Skip))) && ((this.SelectSet == null && traversalSpec.SelectSet == null) || (this.SelectSet != null && traversalSpec.SelectSet != null && Enumerable.SequenceEqual(this.SelectSet, traversalSpec.SelectSet))));
        }

        public override bool Equals(object traversalSpec)
        {
            return Equals(traversalSpec as TraversalSpec);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Path + "_" + Skip + "_" + SelectSet).GetHashCode();
        }
    }

    public class TypeDescription : Description, IEquatable<TypeDescription>
    {
        public string Key { get; set; }

        public bool Equals(TypeDescription typeDescription)
        {
            return (typeDescription != null && this.Key == typeDescription.Key);
        }

        public override bool Equals(object typeDescription)
        {
            return Equals(typeDescription as TypeDescription);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class UncommittedUndoableDisk : MigrationFault, IEquatable<UncommittedUndoableDisk>
    {
        public bool Equals(UncommittedUndoableDisk uncommittedUndoableDisk)
        {
            return (uncommittedUndoableDisk != null && base.Equals(uncommittedUndoableDisk));
        }

        public override bool Equals(object uncommittedUndoableDisk)
        {
            return Equals(uncommittedUndoableDisk as UncommittedUndoableDisk);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UnconfiguredPropertyValue : InvalidPropertyValue, IEquatable<UnconfiguredPropertyValue>
    {
        public bool Equals(UnconfiguredPropertyValue unconfiguredPropertyValue)
        {
            return (unconfiguredPropertyValue != null && base.Equals(unconfiguredPropertyValue));
        }

        public override bool Equals(object unconfiguredPropertyValue)
        {
            return Equals(unconfiguredPropertyValue as UnconfiguredPropertyValue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UncustomizableGuest : CustomizationFault, IEquatable<UncustomizableGuest>
    {
        public string UncustomizableGuestOS { get; set; }

        public bool Equals(UncustomizableGuest uncustomizableGuest)
        {
            return (uncustomizableGuest != null && this.UncustomizableGuestOS == uncustomizableGuest.UncustomizableGuestOS);
        }

        public override bool Equals(object uncustomizableGuest)
        {
            return Equals(uncustomizableGuest as UncustomizableGuest);
        }

        public override int GetHashCode()
        {
            return (UncustomizableGuestOS).GetHashCode();
        }
    }

    public class UnexpectedCustomizationFault : CustomizationFault, IEquatable<UnexpectedCustomizationFault>
    {
        public bool Equals(UnexpectedCustomizationFault unexpectedCustomizationFault)
        {
            return (unexpectedCustomizationFault != null && base.Equals(unexpectedCustomizationFault));
        }

        public override bool Equals(object unexpectedCustomizationFault)
        {
            return Equals(unexpectedCustomizationFault as UnexpectedCustomizationFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UnexpectedFault : RuntimeFault, IEquatable<UnexpectedFault>
    {
        public string FaultName { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(UnexpectedFault unexpectedFault)
        {
            return (unexpectedFault != null && this.FaultName == unexpectedFault.FaultName && ((this.Fault == null && unexpectedFault.Fault == null) || (this.Fault != null && this.Fault.Equals(unexpectedFault.Fault))));
        }

        public override bool Equals(object unexpectedFault)
        {
            return Equals(unexpectedFault as UnexpectedFault);
        }

        public override int GetHashCode()
        {
            return (FaultName + "_" + Fault).GetHashCode();
        }
    }

    public class UnlicensedVirtualMachinesEvent : LicenseEvent, IEquatable<UnlicensedVirtualMachinesEvent>
    {
        public int Unlicensed { get; set; }

        public int Available { get; set; }

        public bool Equals(UnlicensedVirtualMachinesEvent unlicensedVirtualMachinesEvent)
        {
            return (unlicensedVirtualMachinesEvent != null && this.Unlicensed == unlicensedVirtualMachinesEvent.Unlicensed && this.Available == unlicensedVirtualMachinesEvent.Available);
        }

        public override bool Equals(object unlicensedVirtualMachinesEvent)
        {
            return Equals(unlicensedVirtualMachinesEvent as UnlicensedVirtualMachinesEvent);
        }

        public override int GetHashCode()
        {
            return (Unlicensed + "_" + Available).GetHashCode();
        }
    }

    public class UnlicensedVirtualMachinesFoundEvent : LicenseEvent, IEquatable<UnlicensedVirtualMachinesFoundEvent>
    {
        public int Available { get; set; }

        public bool Equals(UnlicensedVirtualMachinesFoundEvent unlicensedVirtualMachinesFoundEvent)
        {
            return (unlicensedVirtualMachinesFoundEvent != null && this.Available == unlicensedVirtualMachinesFoundEvent.Available);
        }

        public override bool Equals(object unlicensedVirtualMachinesFoundEvent)
        {
            return Equals(unlicensedVirtualMachinesFoundEvent as UnlicensedVirtualMachinesFoundEvent);
        }

        public override int GetHashCode()
        {
            return (Available).GetHashCode();
        }
    }

    public class UnrecognizedHost : VimFault, IEquatable<UnrecognizedHost>
    {
        public string HostName { get; set; }

        public bool Equals(UnrecognizedHost unrecognizedHost)
        {
            return (unrecognizedHost != null && this.HostName == unrecognizedHost.HostName);
        }

        public override bool Equals(object unrecognizedHost)
        {
            return Equals(unrecognizedHost as UnrecognizedHost);
        }

        public override int GetHashCode()
        {
            return (HostName).GetHashCode();
        }
    }

    public class UnsharedSwapVMotionNotSupported : MigrationFeatureNotSupported, IEquatable<UnsharedSwapVMotionNotSupported>
    {
        public new UnsharedSwapVMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(UnsharedSwapVMotionNotSupported unsharedSwapVMotionNotSupported)
        {
            return (unsharedSwapVMotionNotSupported != null && ((this.LinkedView == null && unsharedSwapVMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(unsharedSwapVMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object unsharedSwapVMotionNotSupported)
        {
            return Equals(unsharedSwapVMotionNotSupported as UnsharedSwapVMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class UnsharedSwapVMotionNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<UnsharedSwapVMotionNotSupported_LinkedView>
    {
        public bool Equals(UnsharedSwapVMotionNotSupported_LinkedView unsharedSwapVMotionNotSupported_LinkedView)
        {
            return (unsharedSwapVMotionNotSupported_LinkedView != null && base.Equals(unsharedSwapVMotionNotSupported_LinkedView));
        }

        public override bool Equals(object unsharedSwapVMotionNotSupported_LinkedView)
        {
            return Equals(unsharedSwapVMotionNotSupported_LinkedView as UnsharedSwapVMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UnsupportedDatastore : VmConfigFault, IEquatable<UnsupportedDatastore>
    {
        public ManagedObjectReference Datastore { get; set; }

        public UnsupportedDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(UnsupportedDatastore unsupportedDatastore)
        {
            return (unsupportedDatastore != null && ((this.Datastore == null && unsupportedDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(unsupportedDatastore.Datastore))) && ((this.LinkedView == null && unsupportedDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(unsupportedDatastore.LinkedView))));
        }

        public override bool Equals(object unsupportedDatastore)
        {
            return Equals(unsupportedDatastore as UnsupportedDatastore);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + LinkedView).GetHashCode();
        }
    }

    public class UnsupportedDatastore_LinkedView : IEquatable<UnsupportedDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(UnsupportedDatastore_LinkedView unsupportedDatastore_LinkedView)
        {
            return (unsupportedDatastore_LinkedView != null && ((this.Datastore == null && unsupportedDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(unsupportedDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object unsupportedDatastore_LinkedView)
        {
            return Equals(unsupportedDatastore_LinkedView as UnsupportedDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class UnSupportedDatastoreForVFlash : UnsupportedDatastore, IEquatable<UnSupportedDatastoreForVFlash>
    {
        public string DatastoreName { get; set; }

        public string Type { get; set; }

        public new UnSupportedDatastoreForVFlash_LinkedView LinkedView { get; set; }

        public bool Equals(UnSupportedDatastoreForVFlash unSupportedDatastoreForVFlash)
        {
            return (unSupportedDatastoreForVFlash != null && this.DatastoreName == unSupportedDatastoreForVFlash.DatastoreName && this.Type == unSupportedDatastoreForVFlash.Type && ((this.LinkedView == null && unSupportedDatastoreForVFlash.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(unSupportedDatastoreForVFlash.LinkedView))));
        }

        public override bool Equals(object unSupportedDatastoreForVFlash)
        {
            return Equals(unSupportedDatastoreForVFlash as UnSupportedDatastoreForVFlash);
        }

        public override int GetHashCode()
        {
            return (DatastoreName + "_" + Type + "_" + LinkedView).GetHashCode();
        }
    }

    public class UnSupportedDatastoreForVFlash_LinkedView : UnsupportedDatastore_LinkedView, IEquatable<UnSupportedDatastoreForVFlash_LinkedView>
    {
        public bool Equals(UnSupportedDatastoreForVFlash_LinkedView unSupportedDatastoreForVFlash_LinkedView)
        {
            return (unSupportedDatastoreForVFlash_LinkedView != null && base.Equals(unSupportedDatastoreForVFlash_LinkedView));
        }

        public override bool Equals(object unSupportedDatastoreForVFlash_LinkedView)
        {
            return Equals(unSupportedDatastoreForVFlash_LinkedView as UnSupportedDatastoreForVFlash_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UnsupportedGuest : InvalidVmConfig, IEquatable<UnsupportedGuest>
    {
        public string UnsupportedGuestOS { get; set; }

        public bool Equals(UnsupportedGuest unsupportedGuest)
        {
            return (unsupportedGuest != null && this.UnsupportedGuestOS == unsupportedGuest.UnsupportedGuestOS);
        }

        public override bool Equals(object unsupportedGuest)
        {
            return Equals(unsupportedGuest as UnsupportedGuest);
        }

        public override int GetHashCode()
        {
            return (UnsupportedGuestOS).GetHashCode();
        }
    }

    public class UnsupportedVimApiVersion : VimFault, IEquatable<UnsupportedVimApiVersion>
    {
        public string Version { get; set; }

        public bool Equals(UnsupportedVimApiVersion unsupportedVimApiVersion)
        {
            return (unsupportedVimApiVersion != null && this.Version == unsupportedVimApiVersion.Version);
        }

        public override bool Equals(object unsupportedVimApiVersion)
        {
            return Equals(unsupportedVimApiVersion as UnsupportedVimApiVersion);
        }

        public override int GetHashCode()
        {
            return (Version).GetHashCode();
        }
    }

    public class UnsupportedVmxLocation : VmConfigFault, IEquatable<UnsupportedVmxLocation>
    {
        public bool Equals(UnsupportedVmxLocation unsupportedVmxLocation)
        {
            return (unsupportedVmxLocation != null && base.Equals(unsupportedVmxLocation));
        }

        public override bool Equals(object unsupportedVmxLocation)
        {
            return Equals(unsupportedVmxLocation as UnsupportedVmxLocation);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UnusedVirtualDiskBlocksNotScrubbed : DeviceBackingNotSupported, IEquatable<UnusedVirtualDiskBlocksNotScrubbed>
    {
        public bool Equals(UnusedVirtualDiskBlocksNotScrubbed unusedVirtualDiskBlocksNotScrubbed)
        {
            return (unusedVirtualDiskBlocksNotScrubbed != null && base.Equals(unusedVirtualDiskBlocksNotScrubbed));
        }

        public override bool Equals(object unusedVirtualDiskBlocksNotScrubbed)
        {
            return Equals(unusedVirtualDiskBlocksNotScrubbed as UnusedVirtualDiskBlocksNotScrubbed);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UpdatedAgentBeingRestartedEvent : HostEvent, IEquatable<UpdatedAgentBeingRestartedEvent>
    {
        public bool Equals(UpdatedAgentBeingRestartedEvent updatedAgentBeingRestartedEvent)
        {
            return (updatedAgentBeingRestartedEvent != null && base.Equals(updatedAgentBeingRestartedEvent));
        }

        public override bool Equals(object updatedAgentBeingRestartedEvent)
        {
            return Equals(updatedAgentBeingRestartedEvent as UpdatedAgentBeingRestartedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UpdateSet : DynamicData, IEquatable<UpdateSet>
    {
        public string Version { get; set; }

        public PropertyFilterUpdate[] FilterSet { get; set; }

        public bool? Truncated { get; set; }

        public bool Equals(UpdateSet updateSet)
        {
            return (updateSet != null && this.Version == updateSet.Version && ((this.FilterSet == null && updateSet.FilterSet == null) || (this.FilterSet != null && updateSet.FilterSet != null && Enumerable.SequenceEqual(this.FilterSet, updateSet.FilterSet))) && ((this.Truncated == null && updateSet.Truncated == null) || (this.Truncated != null && this.Truncated.Equals(updateSet.Truncated))));
        }

        public override bool Equals(object updateSet)
        {
            return Equals(updateSet as UpdateSet);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + FilterSet + "_" + Truncated).GetHashCode();
        }
    }

    public class UpdateVirtualMachineFilesResult : DynamicData, IEquatable<UpdateVirtualMachineFilesResult>
    {
        public UpdateVirtualMachineFilesResultFailedVmFileInfo[] FailedVmFile { get; set; }

        public bool Equals(UpdateVirtualMachineFilesResult updateVirtualMachineFilesResult)
        {
            return (updateVirtualMachineFilesResult != null && ((this.FailedVmFile == null && updateVirtualMachineFilesResult.FailedVmFile == null) || (this.FailedVmFile != null && updateVirtualMachineFilesResult.FailedVmFile != null && Enumerable.SequenceEqual(this.FailedVmFile, updateVirtualMachineFilesResult.FailedVmFile))));
        }

        public override bool Equals(object updateVirtualMachineFilesResult)
        {
            return Equals(updateVirtualMachineFilesResult as UpdateVirtualMachineFilesResult);
        }

        public override int GetHashCode()
        {
            return (FailedVmFile).GetHashCode();
        }
    }

    public class UpdateVirtualMachineFilesResultFailedVmFileInfo : DynamicData, IEquatable<UpdateVirtualMachineFilesResultFailedVmFileInfo>
    {
        public string VmFile { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(UpdateVirtualMachineFilesResultFailedVmFileInfo updateVirtualMachineFilesResultFailedVmFileInfo)
        {
            return (updateVirtualMachineFilesResultFailedVmFileInfo != null && this.VmFile == updateVirtualMachineFilesResultFailedVmFileInfo.VmFile && ((this.Fault == null && updateVirtualMachineFilesResultFailedVmFileInfo.Fault == null) || (this.Fault != null && this.Fault.Equals(updateVirtualMachineFilesResultFailedVmFileInfo.Fault))));
        }

        public override bool Equals(object updateVirtualMachineFilesResultFailedVmFileInfo)
        {
            return Equals(updateVirtualMachineFilesResultFailedVmFileInfo as UpdateVirtualMachineFilesResultFailedVmFileInfo);
        }

        public override int GetHashCode()
        {
            return (VmFile + "_" + Fault).GetHashCode();
        }
    }

    public class UpgradeEvent : Event, IEquatable<UpgradeEvent>
    {
        public string Message { get; set; }

        public bool Equals(UpgradeEvent upgradeEvent)
        {
            return (upgradeEvent != null && this.Message == upgradeEvent.Message);
        }

        public override bool Equals(object upgradeEvent)
        {
            return Equals(upgradeEvent as UpgradeEvent);
        }

        public override int GetHashCode()
        {
            return (Message).GetHashCode();
        }
    }

    public class UplinkPortMtuNotSupportEvent : DvsHealthStatusChangeEvent, IEquatable<UplinkPortMtuNotSupportEvent>
    {
        public bool Equals(UplinkPortMtuNotSupportEvent uplinkPortMtuNotSupportEvent)
        {
            return (uplinkPortMtuNotSupportEvent != null && base.Equals(uplinkPortMtuNotSupportEvent));
        }

        public override bool Equals(object uplinkPortMtuNotSupportEvent)
        {
            return Equals(uplinkPortMtuNotSupportEvent as UplinkPortMtuNotSupportEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UplinkPortMtuSupportEvent : DvsHealthStatusChangeEvent, IEquatable<UplinkPortMtuSupportEvent>
    {
        public bool Equals(UplinkPortMtuSupportEvent uplinkPortMtuSupportEvent)
        {
            return (uplinkPortMtuSupportEvent != null && base.Equals(uplinkPortMtuSupportEvent));
        }

        public override bool Equals(object uplinkPortMtuSupportEvent)
        {
            return Equals(uplinkPortMtuSupportEvent as UplinkPortMtuSupportEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UplinkPortVlanTrunkedEvent : DvsHealthStatusChangeEvent, IEquatable<UplinkPortVlanTrunkedEvent>
    {
        public bool Equals(UplinkPortVlanTrunkedEvent uplinkPortVlanTrunkedEvent)
        {
            return (uplinkPortVlanTrunkedEvent != null && base.Equals(uplinkPortVlanTrunkedEvent));
        }

        public override bool Equals(object uplinkPortVlanTrunkedEvent)
        {
            return Equals(uplinkPortVlanTrunkedEvent as UplinkPortVlanTrunkedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UplinkPortVlanUntrunkedEvent : DvsHealthStatusChangeEvent, IEquatable<UplinkPortVlanUntrunkedEvent>
    {
        public bool Equals(UplinkPortVlanUntrunkedEvent uplinkPortVlanUntrunkedEvent)
        {
            return (uplinkPortVlanUntrunkedEvent != null && base.Equals(uplinkPortVlanUntrunkedEvent));
        }

        public override bool Equals(object uplinkPortVlanUntrunkedEvent)
        {
            return Equals(uplinkPortVlanUntrunkedEvent as UplinkPortVlanUntrunkedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class UsbScanCodeSpec : DynamicData, IEquatable<UsbScanCodeSpec>
    {
        public UsbScanCodeSpecKeyEvent[] KeyEvents { get; set; }

        public bool Equals(UsbScanCodeSpec usbScanCodeSpec)
        {
            return (usbScanCodeSpec != null && ((this.KeyEvents == null && usbScanCodeSpec.KeyEvents == null) || (this.KeyEvents != null && usbScanCodeSpec.KeyEvents != null && Enumerable.SequenceEqual(this.KeyEvents, usbScanCodeSpec.KeyEvents))));
        }

        public override bool Equals(object usbScanCodeSpec)
        {
            return Equals(usbScanCodeSpec as UsbScanCodeSpec);
        }

        public override int GetHashCode()
        {
            return (KeyEvents).GetHashCode();
        }
    }

    public class UsbScanCodeSpecKeyEvent : DynamicData, IEquatable<UsbScanCodeSpecKeyEvent>
    {
        public int UsbHidCode { get; set; }

        public UsbScanCodeSpecModifierType Modifiers { get; set; }

        public bool Equals(UsbScanCodeSpecKeyEvent usbScanCodeSpecKeyEvent)
        {
            return (usbScanCodeSpecKeyEvent != null && this.UsbHidCode == usbScanCodeSpecKeyEvent.UsbHidCode && ((this.Modifiers == null && usbScanCodeSpecKeyEvent.Modifiers == null) || (this.Modifiers != null && this.Modifiers.Equals(usbScanCodeSpecKeyEvent.Modifiers))));
        }

        public override bool Equals(object usbScanCodeSpecKeyEvent)
        {
            return Equals(usbScanCodeSpecKeyEvent as UsbScanCodeSpecKeyEvent);
        }

        public override int GetHashCode()
        {
            return (UsbHidCode + "_" + Modifiers).GetHashCode();
        }
    }

    public class UsbScanCodeSpecModifierType : DynamicData, IEquatable<UsbScanCodeSpecModifierType>
    {
        public bool? LeftControl { get; set; }

        public bool? LeftShift { get; set; }

        public bool? LeftAlt { get; set; }

        public bool? LeftGui { get; set; }

        public bool? RightControl { get; set; }

        public bool? RightShift { get; set; }

        public bool? RightAlt { get; set; }

        public bool? RightGui { get; set; }

        public bool Equals(UsbScanCodeSpecModifierType usbScanCodeSpecModifierType)
        {
            return (usbScanCodeSpecModifierType != null && ((this.LeftControl == null && usbScanCodeSpecModifierType.LeftControl == null) || (this.LeftControl != null && this.LeftControl.Equals(usbScanCodeSpecModifierType.LeftControl))) && ((this.LeftShift == null && usbScanCodeSpecModifierType.LeftShift == null) || (this.LeftShift != null && this.LeftShift.Equals(usbScanCodeSpecModifierType.LeftShift))) && ((this.LeftAlt == null && usbScanCodeSpecModifierType.LeftAlt == null) || (this.LeftAlt != null && this.LeftAlt.Equals(usbScanCodeSpecModifierType.LeftAlt))) && ((this.LeftGui == null && usbScanCodeSpecModifierType.LeftGui == null) || (this.LeftGui != null && this.LeftGui.Equals(usbScanCodeSpecModifierType.LeftGui))) && ((this.RightControl == null && usbScanCodeSpecModifierType.RightControl == null) || (this.RightControl != null && this.RightControl.Equals(usbScanCodeSpecModifierType.RightControl))) && ((this.RightShift == null && usbScanCodeSpecModifierType.RightShift == null) || (this.RightShift != null && this.RightShift.Equals(usbScanCodeSpecModifierType.RightShift))) && ((this.RightAlt == null && usbScanCodeSpecModifierType.RightAlt == null) || (this.RightAlt != null && this.RightAlt.Equals(usbScanCodeSpecModifierType.RightAlt))) && ((this.RightGui == null && usbScanCodeSpecModifierType.RightGui == null) || (this.RightGui != null && this.RightGui.Equals(usbScanCodeSpecModifierType.RightGui))));
        }

        public override bool Equals(object usbScanCodeSpecModifierType)
        {
            return Equals(usbScanCodeSpecModifierType as UsbScanCodeSpecModifierType);
        }

        public override int GetHashCode()
        {
            return (LeftControl + "_" + LeftShift + "_" + LeftAlt + "_" + LeftGui + "_" + RightControl + "_" + RightShift + "_" + RightAlt + "_" + RightGui).GetHashCode();
        }
    }

    public class UserAssignedToGroup : HostEvent, IEquatable<UserAssignedToGroup>
    {
        public string UserLogin { get; set; }

        public string Group { get; set; }

        public bool Equals(UserAssignedToGroup userAssignedToGroup)
        {
            return (userAssignedToGroup != null && this.UserLogin == userAssignedToGroup.UserLogin && this.Group == userAssignedToGroup.Group);
        }

        public override bool Equals(object userAssignedToGroup)
        {
            return Equals(userAssignedToGroup as UserAssignedToGroup);
        }

        public override int GetHashCode()
        {
            return (UserLogin + "_" + Group).GetHashCode();
        }
    }

    public class UserDirectory : ViewBase, IEquatable<UserDirectory>
    {
        public string[] DomainList { get; set; }

        public UserSearchResult[] RetrieveUserGroups(string domain, string searchStr, string belongsToGroup, string belongsToUser, bool exactMatch, bool findUsers, bool findGroups)
        {
            return default(UserSearchResult[]);
        }

        public bool Equals(UserDirectory userDirectory)
        {
            return (userDirectory != null && ((this.DomainList == null && userDirectory.DomainList == null) || (this.DomainList != null && userDirectory.DomainList != null && Enumerable.SequenceEqual(this.DomainList, userDirectory.DomainList))));
        }

        public override bool Equals(object userDirectory)
        {
            return Equals(userDirectory as UserDirectory);
        }

        public override int GetHashCode()
        {
            return (DomainList).GetHashCode();
        }
    }

    public class UserGroupProfile : ApplyProfile, IEquatable<UserGroupProfile>
    {
        public string Key { get; set; }

        public bool Equals(UserGroupProfile userGroupProfile)
        {
            return (userGroupProfile != null && this.Key == userGroupProfile.Key);
        }

        public override bool Equals(object userGroupProfile)
        {
            return Equals(userGroupProfile as UserGroupProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class UserInputRequiredParameterMetadata : ProfilePolicyOptionMetadata, IEquatable<UserInputRequiredParameterMetadata>
    {
        public ProfileParameterMetadata[] UserInputParameter { get; set; }

        public bool Equals(UserInputRequiredParameterMetadata userInputRequiredParameterMetadata)
        {
            return (userInputRequiredParameterMetadata != null && ((this.UserInputParameter == null && userInputRequiredParameterMetadata.UserInputParameter == null) || (this.UserInputParameter != null && userInputRequiredParameterMetadata.UserInputParameter != null && Enumerable.SequenceEqual(this.UserInputParameter, userInputRequiredParameterMetadata.UserInputParameter))));
        }

        public override bool Equals(object userInputRequiredParameterMetadata)
        {
            return Equals(userInputRequiredParameterMetadata as UserInputRequiredParameterMetadata);
        }

        public override int GetHashCode()
        {
            return (UserInputParameter).GetHashCode();
        }
    }

    public class UserLoginSessionEvent : SessionEvent, IEquatable<UserLoginSessionEvent>
    {
        public string IpAddress { get; set; }

        public string UserAgent { get; set; }

        public string Locale { get; set; }

        public string SessionId { get; set; }

        public bool Equals(UserLoginSessionEvent userLoginSessionEvent)
        {
            return (userLoginSessionEvent != null && this.IpAddress == userLoginSessionEvent.IpAddress && this.UserAgent == userLoginSessionEvent.UserAgent && this.Locale == userLoginSessionEvent.Locale && this.SessionId == userLoginSessionEvent.SessionId);
        }

        public override bool Equals(object userLoginSessionEvent)
        {
            return Equals(userLoginSessionEvent as UserLoginSessionEvent);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + UserAgent + "_" + Locale + "_" + SessionId).GetHashCode();
        }
    }

    public class UserLogoutSessionEvent : SessionEvent, IEquatable<UserLogoutSessionEvent>
    {
        public string IpAddress { get; set; }

        public string UserAgent { get; set; }

        public long? CallCount { get; set; }

        public string SessionId { get; set; }

        public DateTime? LoginTime { get; set; }

        public bool Equals(UserLogoutSessionEvent userLogoutSessionEvent)
        {
            return (userLogoutSessionEvent != null && this.IpAddress == userLogoutSessionEvent.IpAddress && this.UserAgent == userLogoutSessionEvent.UserAgent && ((this.CallCount == null && userLogoutSessionEvent.CallCount == null) || (this.CallCount != null && this.CallCount.Equals(userLogoutSessionEvent.CallCount))) && this.SessionId == userLogoutSessionEvent.SessionId && ((this.LoginTime == null && userLogoutSessionEvent.LoginTime == null) || (this.LoginTime != null && this.LoginTime.Equals(userLogoutSessionEvent.LoginTime))));
        }

        public override bool Equals(object userLogoutSessionEvent)
        {
            return Equals(userLogoutSessionEvent as UserLogoutSessionEvent);
        }

        public override int GetHashCode()
        {
            return (IpAddress + "_" + UserAgent + "_" + CallCount + "_" + SessionId + "_" + LoginTime).GetHashCode();
        }
    }

    public class UserNotFound : VimFault, IEquatable<UserNotFound>
    {
        public string Principal { get; set; }

        public bool Unresolved { get; set; }

        public bool Equals(UserNotFound userNotFound)
        {
            return (userNotFound != null && this.Principal == userNotFound.Principal && this.Unresolved == userNotFound.Unresolved);
        }

        public override bool Equals(object userNotFound)
        {
            return Equals(userNotFound as UserNotFound);
        }

        public override int GetHashCode()
        {
            return (Principal + "_" + Unresolved).GetHashCode();
        }
    }

    public class UserPasswordChanged : HostEvent, IEquatable<UserPasswordChanged>
    {
        public string UserLogin { get; set; }

        public bool Equals(UserPasswordChanged userPasswordChanged)
        {
            return (userPasswordChanged != null && this.UserLogin == userPasswordChanged.UserLogin);
        }

        public override bool Equals(object userPasswordChanged)
        {
            return Equals(userPasswordChanged as UserPasswordChanged);
        }

        public override int GetHashCode()
        {
            return (UserLogin).GetHashCode();
        }
    }

    public class UserPrivilegeResult : DynamicData, IEquatable<UserPrivilegeResult>
    {
        public ManagedObjectReference Entity { get; set; }

        public string[] Privileges { get; set; }

        public UserPrivilegeResult_LinkedView LinkedView { get; set; }

        public bool Equals(UserPrivilegeResult userPrivilegeResult)
        {
            return (userPrivilegeResult != null && ((this.Entity == null && userPrivilegeResult.Entity == null) || (this.Entity != null && this.Entity.Equals(userPrivilegeResult.Entity))) && ((this.Privileges == null && userPrivilegeResult.Privileges == null) || (this.Privileges != null && userPrivilegeResult.Privileges != null && Enumerable.SequenceEqual(this.Privileges, userPrivilegeResult.Privileges))) && ((this.LinkedView == null && userPrivilegeResult.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(userPrivilegeResult.LinkedView))));
        }

        public override bool Equals(object userPrivilegeResult)
        {
            return Equals(userPrivilegeResult as UserPrivilegeResult);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Privileges + "_" + LinkedView).GetHashCode();
        }
    }

    public class UserPrivilegeResult_LinkedView : IEquatable<UserPrivilegeResult_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(UserPrivilegeResult_LinkedView userPrivilegeResult_LinkedView)
        {
            return (userPrivilegeResult_LinkedView != null && ((this.Entity == null && userPrivilegeResult_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(userPrivilegeResult_LinkedView.Entity))));
        }

        public override bool Equals(object userPrivilegeResult_LinkedView)
        {
            return Equals(userPrivilegeResult_LinkedView as UserPrivilegeResult_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class UserProfile : ApplyProfile, IEquatable<UserProfile>
    {
        public string Key { get; set; }

        public bool Equals(UserProfile userProfile)
        {
            return (userProfile != null && this.Key == userProfile.Key);
        }

        public override bool Equals(object userProfile)
        {
            return Equals(userProfile as UserProfile);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class UserSearchResult : DynamicData, IEquatable<UserSearchResult>
    {
        public string Principal { get; set; }

        public string FullName { get; set; }

        public bool Group { get; set; }

        public bool Equals(UserSearchResult userSearchResult)
        {
            return (userSearchResult != null && this.Principal == userSearchResult.Principal && this.FullName == userSearchResult.FullName && this.Group == userSearchResult.Group);
        }

        public override bool Equals(object userSearchResult)
        {
            return Equals(userSearchResult as UserSearchResult);
        }

        public override int GetHashCode()
        {
            return (Principal + "_" + FullName + "_" + Group).GetHashCode();
        }
    }

    public class UserSession : DynamicData, IEquatable<UserSession>
    {
        public string Key { get; set; }

        public string UserName { get; set; }

        public string FullName { get; set; }

        public DateTime LoginTime { get; set; }

        public DateTime LastActiveTime { get; set; }

        public string Locale { get; set; }

        public string MessageLocale { get; set; }

        public bool ExtensionSession { get; set; }

        public string IpAddress { get; set; }

        public string UserAgent { get; set; }

        public long CallCount { get; set; }

        public bool Equals(UserSession userSession)
        {
            return (userSession != null && this.Key == userSession.Key && this.UserName == userSession.UserName && this.FullName == userSession.FullName && this.LoginTime == userSession.LoginTime && this.LastActiveTime == userSession.LastActiveTime && this.Locale == userSession.Locale && this.MessageLocale == userSession.MessageLocale && this.ExtensionSession == userSession.ExtensionSession && this.IpAddress == userSession.IpAddress && this.UserAgent == userSession.UserAgent && this.CallCount == userSession.CallCount);
        }

        public override bool Equals(object userSession)
        {
            return Equals(userSession as UserSession);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + UserName + "_" + FullName + "_" + LoginTime + "_" + LastActiveTime + "_" + Locale + "_" + MessageLocale + "_" + ExtensionSession + "_" + IpAddress + "_" + UserAgent + "_" + CallCount).GetHashCode();
        }
    }

    public class UserUnassignedFromGroup : HostEvent, IEquatable<UserUnassignedFromGroup>
    {
        public string UserLogin { get; set; }

        public string Group { get; set; }

        public bool Equals(UserUnassignedFromGroup userUnassignedFromGroup)
        {
            return (userUnassignedFromGroup != null && this.UserLogin == userUnassignedFromGroup.UserLogin && this.Group == userUnassignedFromGroup.Group);
        }

        public override bool Equals(object userUnassignedFromGroup)
        {
            return Equals(userUnassignedFromGroup as UserUnassignedFromGroup);
        }

        public override int GetHashCode()
        {
            return (UserLogin + "_" + Group).GetHashCode();
        }
    }

    public class UserUpgradeEvent : UpgradeEvent, IEquatable<UserUpgradeEvent>
    {
        public bool Equals(UserUpgradeEvent userUpgradeEvent)
        {
            return (userUpgradeEvent != null && base.Equals(userUpgradeEvent));
        }

        public override bool Equals(object userUpgradeEvent)
        {
            return Equals(userUpgradeEvent as UserUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VAppCloneSpec : DynamicData, IEquatable<VAppCloneSpec>
    {
        public ManagedObjectReference Location { get; set; }

        public ManagedObjectReference Host { get; set; }

        public ResourceConfigSpec ResourceSpec { get; set; }

        public ManagedObjectReference VmFolder { get; set; }

        public VAppCloneSpecNetworkMappingPair[] NetworkMapping { get; set; }

        public KeyValue[] Property { get; set; }

        public VAppCloneSpecResourceMap[] ResourceMapping { get; set; }

        public string Provisioning { get; set; }

        public VAppCloneSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VAppCloneSpec vAppCloneSpec)
        {
            return (vAppCloneSpec != null && ((this.Location == null && vAppCloneSpec.Location == null) || (this.Location != null && this.Location.Equals(vAppCloneSpec.Location))) && ((this.Host == null && vAppCloneSpec.Host == null) || (this.Host != null && this.Host.Equals(vAppCloneSpec.Host))) && ((this.ResourceSpec == null && vAppCloneSpec.ResourceSpec == null) || (this.ResourceSpec != null && this.ResourceSpec.Equals(vAppCloneSpec.ResourceSpec))) && ((this.VmFolder == null && vAppCloneSpec.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(vAppCloneSpec.VmFolder))) && ((this.NetworkMapping == null && vAppCloneSpec.NetworkMapping == null) || (this.NetworkMapping != null && vAppCloneSpec.NetworkMapping != null && Enumerable.SequenceEqual(this.NetworkMapping, vAppCloneSpec.NetworkMapping))) && ((this.Property == null && vAppCloneSpec.Property == null) || (this.Property != null && vAppCloneSpec.Property != null && Enumerable.SequenceEqual(this.Property, vAppCloneSpec.Property))) && ((this.ResourceMapping == null && vAppCloneSpec.ResourceMapping == null) || (this.ResourceMapping != null && vAppCloneSpec.ResourceMapping != null && Enumerable.SequenceEqual(this.ResourceMapping, vAppCloneSpec.ResourceMapping))) && this.Provisioning == vAppCloneSpec.Provisioning && ((this.LinkedView == null && vAppCloneSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vAppCloneSpec.LinkedView))));
        }

        public override bool Equals(object vAppCloneSpec)
        {
            return Equals(vAppCloneSpec as VAppCloneSpec);
        }

        public override int GetHashCode()
        {
            return (Location + "_" + Host + "_" + ResourceSpec + "_" + VmFolder + "_" + NetworkMapping + "_" + Property + "_" + ResourceMapping + "_" + Provisioning + "_" + LinkedView).GetHashCode();
        }
    }

    public class VAppCloneSpec_LinkedView : IEquatable<VAppCloneSpec_LinkedView>
    {
        public Datastore Location { get; set; }

        public HostSystem Host { get; set; }

        public Folder VmFolder { get; set; }

        public bool Equals(VAppCloneSpec_LinkedView vAppCloneSpec_LinkedView)
        {
            return (vAppCloneSpec_LinkedView != null && ((this.Location == null && vAppCloneSpec_LinkedView.Location == null) || (this.Location != null && this.Location.Equals(vAppCloneSpec_LinkedView.Location))) && ((this.Host == null && vAppCloneSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(vAppCloneSpec_LinkedView.Host))) && ((this.VmFolder == null && vAppCloneSpec_LinkedView.VmFolder == null) || (this.VmFolder != null && this.VmFolder.Equals(vAppCloneSpec_LinkedView.VmFolder))));
        }

        public override bool Equals(object vAppCloneSpec_LinkedView)
        {
            return Equals(vAppCloneSpec_LinkedView as VAppCloneSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Location + "_" + Host + "_" + VmFolder).GetHashCode();
        }
    }

    public class VAppCloneSpecNetworkMappingPair : DynamicData, IEquatable<VAppCloneSpecNetworkMappingPair>
    {
        public ManagedObjectReference Source { get; set; }

        public ManagedObjectReference Destination { get; set; }

        public VAppCloneSpecNetworkMappingPair_LinkedView LinkedView { get; set; }

        public bool Equals(VAppCloneSpecNetworkMappingPair vAppCloneSpecNetworkMappingPair)
        {
            return (vAppCloneSpecNetworkMappingPair != null && ((this.Source == null && vAppCloneSpecNetworkMappingPair.Source == null) || (this.Source != null && this.Source.Equals(vAppCloneSpecNetworkMappingPair.Source))) && ((this.Destination == null && vAppCloneSpecNetworkMappingPair.Destination == null) || (this.Destination != null && this.Destination.Equals(vAppCloneSpecNetworkMappingPair.Destination))) && ((this.LinkedView == null && vAppCloneSpecNetworkMappingPair.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vAppCloneSpecNetworkMappingPair.LinkedView))));
        }

        public override bool Equals(object vAppCloneSpecNetworkMappingPair)
        {
            return Equals(vAppCloneSpecNetworkMappingPair as VAppCloneSpecNetworkMappingPair);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Destination + "_" + LinkedView).GetHashCode();
        }
    }

    public class VAppCloneSpecNetworkMappingPair_LinkedView : IEquatable<VAppCloneSpecNetworkMappingPair_LinkedView>
    {
        public Network Source { get; set; }

        public Network Destination { get; set; }

        public bool Equals(VAppCloneSpecNetworkMappingPair_LinkedView vAppCloneSpecNetworkMappingPair_LinkedView)
        {
            return (vAppCloneSpecNetworkMappingPair_LinkedView != null && ((this.Source == null && vAppCloneSpecNetworkMappingPair_LinkedView.Source == null) || (this.Source != null && this.Source.Equals(vAppCloneSpecNetworkMappingPair_LinkedView.Source))) && ((this.Destination == null && vAppCloneSpecNetworkMappingPair_LinkedView.Destination == null) || (this.Destination != null && this.Destination.Equals(vAppCloneSpecNetworkMappingPair_LinkedView.Destination))));
        }

        public override bool Equals(object vAppCloneSpecNetworkMappingPair_LinkedView)
        {
            return Equals(vAppCloneSpecNetworkMappingPair_LinkedView as VAppCloneSpecNetworkMappingPair_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Destination).GetHashCode();
        }
    }

    public class VAppCloneSpecResourceMap : DynamicData, IEquatable<VAppCloneSpecResourceMap>
    {
        public ManagedObjectReference Source { get; set; }

        public ManagedObjectReference Parent { get; set; }

        public ResourceConfigSpec ResourceSpec { get; set; }

        public ManagedObjectReference Location { get; set; }

        public VAppCloneSpecResourceMap_LinkedView LinkedView { get; set; }

        public bool Equals(VAppCloneSpecResourceMap vAppCloneSpecResourceMap)
        {
            return (vAppCloneSpecResourceMap != null && ((this.Source == null && vAppCloneSpecResourceMap.Source == null) || (this.Source != null && this.Source.Equals(vAppCloneSpecResourceMap.Source))) && ((this.Parent == null && vAppCloneSpecResourceMap.Parent == null) || (this.Parent != null && this.Parent.Equals(vAppCloneSpecResourceMap.Parent))) && ((this.ResourceSpec == null && vAppCloneSpecResourceMap.ResourceSpec == null) || (this.ResourceSpec != null && this.ResourceSpec.Equals(vAppCloneSpecResourceMap.ResourceSpec))) && ((this.Location == null && vAppCloneSpecResourceMap.Location == null) || (this.Location != null && this.Location.Equals(vAppCloneSpecResourceMap.Location))) && ((this.LinkedView == null && vAppCloneSpecResourceMap.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vAppCloneSpecResourceMap.LinkedView))));
        }

        public override bool Equals(object vAppCloneSpecResourceMap)
        {
            return Equals(vAppCloneSpecResourceMap as VAppCloneSpecResourceMap);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Parent + "_" + ResourceSpec + "_" + Location + "_" + LinkedView).GetHashCode();
        }
    }

    public class VAppCloneSpecResourceMap_LinkedView : IEquatable<VAppCloneSpecResourceMap_LinkedView>
    {
        public ManagedEntity Source { get; set; }

        public ResourcePool Parent { get; set; }

        public Datastore Location { get; set; }

        public bool Equals(VAppCloneSpecResourceMap_LinkedView vAppCloneSpecResourceMap_LinkedView)
        {
            return (vAppCloneSpecResourceMap_LinkedView != null && ((this.Source == null && vAppCloneSpecResourceMap_LinkedView.Source == null) || (this.Source != null && this.Source.Equals(vAppCloneSpecResourceMap_LinkedView.Source))) && ((this.Parent == null && vAppCloneSpecResourceMap_LinkedView.Parent == null) || (this.Parent != null && this.Parent.Equals(vAppCloneSpecResourceMap_LinkedView.Parent))) && ((this.Location == null && vAppCloneSpecResourceMap_LinkedView.Location == null) || (this.Location != null && this.Location.Equals(vAppCloneSpecResourceMap_LinkedView.Location))));
        }

        public override bool Equals(object vAppCloneSpecResourceMap_LinkedView)
        {
            return Equals(vAppCloneSpecResourceMap_LinkedView as VAppCloneSpecResourceMap_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Source + "_" + Parent + "_" + Location).GetHashCode();
        }
    }

    public class VAppConfigFault : VimFault, IEquatable<VAppConfigFault>
    {
        public bool Equals(VAppConfigFault vAppConfigFault)
        {
            return (vAppConfigFault != null && base.Equals(vAppConfigFault));
        }

        public override bool Equals(object vAppConfigFault)
        {
            return Equals(vAppConfigFault as VAppConfigFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VAppConfigInfo : VmConfigInfo, IEquatable<VAppConfigInfo>
    {
        public VAppEntityConfigInfo[] EntityConfig { get; set; }

        public string Annotation { get; set; }

        public string InstanceUuid { get; set; }

        public ManagedByInfo ManagedBy { get; set; }

        public bool Equals(VAppConfigInfo vAppConfigInfo)
        {
            return (vAppConfigInfo != null && ((this.EntityConfig == null && vAppConfigInfo.EntityConfig == null) || (this.EntityConfig != null && vAppConfigInfo.EntityConfig != null && Enumerable.SequenceEqual(this.EntityConfig, vAppConfigInfo.EntityConfig))) && this.Annotation == vAppConfigInfo.Annotation && this.InstanceUuid == vAppConfigInfo.InstanceUuid && ((this.ManagedBy == null && vAppConfigInfo.ManagedBy == null) || (this.ManagedBy != null && this.ManagedBy.Equals(vAppConfigInfo.ManagedBy))));
        }

        public override bool Equals(object vAppConfigInfo)
        {
            return Equals(vAppConfigInfo as VAppConfigInfo);
        }

        public override int GetHashCode()
        {
            return (EntityConfig + "_" + Annotation + "_" + InstanceUuid + "_" + ManagedBy).GetHashCode();
        }
    }

    public class VAppConfigSpec : VmConfigSpec, IEquatable<VAppConfigSpec>
    {
        public VAppEntityConfigInfo[] EntityConfig { get; set; }

        public string Annotation { get; set; }

        public string InstanceUuid { get; set; }

        public ManagedByInfo ManagedBy { get; set; }

        public bool Equals(VAppConfigSpec vAppConfigSpec)
        {
            return (vAppConfigSpec != null && ((this.EntityConfig == null && vAppConfigSpec.EntityConfig == null) || (this.EntityConfig != null && vAppConfigSpec.EntityConfig != null && Enumerable.SequenceEqual(this.EntityConfig, vAppConfigSpec.EntityConfig))) && this.Annotation == vAppConfigSpec.Annotation && this.InstanceUuid == vAppConfigSpec.InstanceUuid && ((this.ManagedBy == null && vAppConfigSpec.ManagedBy == null) || (this.ManagedBy != null && this.ManagedBy.Equals(vAppConfigSpec.ManagedBy))));
        }

        public override bool Equals(object vAppConfigSpec)
        {
            return Equals(vAppConfigSpec as VAppConfigSpec);
        }

        public override int GetHashCode()
        {
            return (EntityConfig + "_" + Annotation + "_" + InstanceUuid + "_" + ManagedBy).GetHashCode();
        }
    }

    public class VAppEntityConfigInfo : DynamicData, IEquatable<VAppEntityConfigInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public string Tag { get; set; }

        public int? StartOrder { get; set; }

        public int? StartDelay { get; set; }

        public bool? WaitingForGuest { get; set; }

        public string StartAction { get; set; }

        public int? StopDelay { get; set; }

        public string StopAction { get; set; }

        public bool? DestroyWithParent { get; set; }

        public VAppEntityConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VAppEntityConfigInfo vAppEntityConfigInfo)
        {
            return (vAppEntityConfigInfo != null && ((this.Key == null && vAppEntityConfigInfo.Key == null) || (this.Key != null && this.Key.Equals(vAppEntityConfigInfo.Key))) && this.Tag == vAppEntityConfigInfo.Tag && ((this.StartOrder == null && vAppEntityConfigInfo.StartOrder == null) || (this.StartOrder != null && this.StartOrder.Equals(vAppEntityConfigInfo.StartOrder))) && ((this.StartDelay == null && vAppEntityConfigInfo.StartDelay == null) || (this.StartDelay != null && this.StartDelay.Equals(vAppEntityConfigInfo.StartDelay))) && ((this.WaitingForGuest == null && vAppEntityConfigInfo.WaitingForGuest == null) || (this.WaitingForGuest != null && this.WaitingForGuest.Equals(vAppEntityConfigInfo.WaitingForGuest))) && this.StartAction == vAppEntityConfigInfo.StartAction && ((this.StopDelay == null && vAppEntityConfigInfo.StopDelay == null) || (this.StopDelay != null && this.StopDelay.Equals(vAppEntityConfigInfo.StopDelay))) && this.StopAction == vAppEntityConfigInfo.StopAction && ((this.DestroyWithParent == null && vAppEntityConfigInfo.DestroyWithParent == null) || (this.DestroyWithParent != null && this.DestroyWithParent.Equals(vAppEntityConfigInfo.DestroyWithParent))) && ((this.LinkedView == null && vAppEntityConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vAppEntityConfigInfo.LinkedView))));
        }

        public override bool Equals(object vAppEntityConfigInfo)
        {
            return Equals(vAppEntityConfigInfo as VAppEntityConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Tag + "_" + StartOrder + "_" + StartDelay + "_" + WaitingForGuest + "_" + StartAction + "_" + StopDelay + "_" + StopAction + "_" + DestroyWithParent + "_" + LinkedView).GetHashCode();
        }
    }

    public class VAppEntityConfigInfo_LinkedView : IEquatable<VAppEntityConfigInfo_LinkedView>
    {
        public ManagedEntity Key { get; set; }

        public bool Equals(VAppEntityConfigInfo_LinkedView vAppEntityConfigInfo_LinkedView)
        {
            return (vAppEntityConfigInfo_LinkedView != null && ((this.Key == null && vAppEntityConfigInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(vAppEntityConfigInfo_LinkedView.Key))));
        }

        public override bool Equals(object vAppEntityConfigInfo_LinkedView)
        {
            return Equals(vAppEntityConfigInfo_LinkedView as VAppEntityConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VAppIPAssignmentInfo : DynamicData, IEquatable<VAppIPAssignmentInfo>
    {
        public string[] SupportedAllocationScheme { get; set; }

        public string IpAllocationPolicy { get; set; }

        public string[] SupportedIpProtocol { get; set; }

        public string IpProtocol { get; set; }

        public bool Equals(VAppIPAssignmentInfo vAppIPAssignmentInfo)
        {
            return (vAppIPAssignmentInfo != null && ((this.SupportedAllocationScheme == null && vAppIPAssignmentInfo.SupportedAllocationScheme == null) || (this.SupportedAllocationScheme != null && vAppIPAssignmentInfo.SupportedAllocationScheme != null && Enumerable.SequenceEqual(this.SupportedAllocationScheme, vAppIPAssignmentInfo.SupportedAllocationScheme))) && this.IpAllocationPolicy == vAppIPAssignmentInfo.IpAllocationPolicy && ((this.SupportedIpProtocol == null && vAppIPAssignmentInfo.SupportedIpProtocol == null) || (this.SupportedIpProtocol != null && vAppIPAssignmentInfo.SupportedIpProtocol != null && Enumerable.SequenceEqual(this.SupportedIpProtocol, vAppIPAssignmentInfo.SupportedIpProtocol))) && this.IpProtocol == vAppIPAssignmentInfo.IpProtocol);
        }

        public override bool Equals(object vAppIPAssignmentInfo)
        {
            return Equals(vAppIPAssignmentInfo as VAppIPAssignmentInfo);
        }

        public override int GetHashCode()
        {
            return (SupportedAllocationScheme + "_" + IpAllocationPolicy + "_" + SupportedIpProtocol + "_" + IpProtocol).GetHashCode();
        }
    }

    public class VAppNotRunning : VmConfigFault, IEquatable<VAppNotRunning>
    {
        public bool Equals(VAppNotRunning vAppNotRunning)
        {
            return (vAppNotRunning != null && base.Equals(vAppNotRunning));
        }

        public override bool Equals(object vAppNotRunning)
        {
            return Equals(vAppNotRunning as VAppNotRunning);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VAppOperationInProgress : RuntimeFault, IEquatable<VAppOperationInProgress>
    {
        public bool Equals(VAppOperationInProgress vAppOperationInProgress)
        {
            return (vAppOperationInProgress != null && base.Equals(vAppOperationInProgress));
        }

        public override bool Equals(object vAppOperationInProgress)
        {
            return Equals(vAppOperationInProgress as VAppOperationInProgress);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VAppOvfSectionInfo : DynamicData, IEquatable<VAppOvfSectionInfo>
    {
        public int? Key { get; set; }

        public string Namespace { get; set; }

        public string Type { get; set; }

        public bool? AtEnvelopeLevel { get; set; }

        public string Contents { get; set; }

        public bool Equals(VAppOvfSectionInfo vAppOvfSectionInfo)
        {
            return (vAppOvfSectionInfo != null && ((this.Key == null && vAppOvfSectionInfo.Key == null) || (this.Key != null && this.Key.Equals(vAppOvfSectionInfo.Key))) && this.Namespace == vAppOvfSectionInfo.Namespace && this.Type == vAppOvfSectionInfo.Type && ((this.AtEnvelopeLevel == null && vAppOvfSectionInfo.AtEnvelopeLevel == null) || (this.AtEnvelopeLevel != null && this.AtEnvelopeLevel.Equals(vAppOvfSectionInfo.AtEnvelopeLevel))) && this.Contents == vAppOvfSectionInfo.Contents);
        }

        public override bool Equals(object vAppOvfSectionInfo)
        {
            return Equals(vAppOvfSectionInfo as VAppOvfSectionInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Namespace + "_" + Type + "_" + AtEnvelopeLevel + "_" + Contents).GetHashCode();
        }
    }

    public class VAppOvfSectionSpec : ArrayUpdateSpec, IEquatable<VAppOvfSectionSpec>
    {
        public VAppOvfSectionInfo Info { get; set; }

        public bool Equals(VAppOvfSectionSpec vAppOvfSectionSpec)
        {
            return (vAppOvfSectionSpec != null && ((this.Info == null && vAppOvfSectionSpec.Info == null) || (this.Info != null && this.Info.Equals(vAppOvfSectionSpec.Info))));
        }

        public override bool Equals(object vAppOvfSectionSpec)
        {
            return Equals(vAppOvfSectionSpec as VAppOvfSectionSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class VAppProductInfo : DynamicData, IEquatable<VAppProductInfo>
    {
        public int Key { get; set; }

        public string ClassId { get; set; }

        public string InstanceId { get; set; }

        public string Name { get; set; }

        public string Vendor { get; set; }

        public string Version { get; set; }

        public string FullVersion { get; set; }

        public string VendorUrl { get; set; }

        public string ProductUrl { get; set; }

        public string AppUrl { get; set; }

        public bool Equals(VAppProductInfo vAppProductInfo)
        {
            return (vAppProductInfo != null && this.Key == vAppProductInfo.Key && this.ClassId == vAppProductInfo.ClassId && this.InstanceId == vAppProductInfo.InstanceId && this.Name == vAppProductInfo.Name && this.Vendor == vAppProductInfo.Vendor && this.Version == vAppProductInfo.Version && this.FullVersion == vAppProductInfo.FullVersion && this.VendorUrl == vAppProductInfo.VendorUrl && this.ProductUrl == vAppProductInfo.ProductUrl && this.AppUrl == vAppProductInfo.AppUrl);
        }

        public override bool Equals(object vAppProductInfo)
        {
            return Equals(vAppProductInfo as VAppProductInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ClassId + "_" + InstanceId + "_" + Name + "_" + Vendor + "_" + Version + "_" + FullVersion + "_" + VendorUrl + "_" + ProductUrl + "_" + AppUrl).GetHashCode();
        }
    }

    public class VAppProductSpec : ArrayUpdateSpec, IEquatable<VAppProductSpec>
    {
        public VAppProductInfo Info { get; set; }

        public bool Equals(VAppProductSpec vAppProductSpec)
        {
            return (vAppProductSpec != null && ((this.Info == null && vAppProductSpec.Info == null) || (this.Info != null && this.Info.Equals(vAppProductSpec.Info))));
        }

        public override bool Equals(object vAppProductSpec)
        {
            return Equals(vAppProductSpec as VAppProductSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class VAppPropertyFault : VmConfigFault, IEquatable<VAppPropertyFault>
    {
        public string Id { get; set; }

        public string Category { get; set; }

        public string Label { get; set; }

        public string Type { get; set; }

        public string Value { get; set; }

        public bool Equals(VAppPropertyFault vAppPropertyFault)
        {
            return (vAppPropertyFault != null && this.Id == vAppPropertyFault.Id && this.Category == vAppPropertyFault.Category && this.Label == vAppPropertyFault.Label && this.Type == vAppPropertyFault.Type && this.Value == vAppPropertyFault.Value);
        }

        public override bool Equals(object vAppPropertyFault)
        {
            return Equals(vAppPropertyFault as VAppPropertyFault);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Category + "_" + Label + "_" + Type + "_" + Value).GetHashCode();
        }
    }

    public class VAppPropertyInfo : DynamicData, IEquatable<VAppPropertyInfo>
    {
        public int Key { get; set; }

        public string ClassId { get; set; }

        public string InstanceId { get; set; }

        public string Id { get; set; }

        public string Category { get; set; }

        public string Label { get; set; }

        public string Type { get; set; }

        public string TypeReference { get; set; }

        public bool? UserConfigurable { get; set; }

        public string DefaultValue { get; set; }

        public string Value { get; set; }

        public string Description { get; set; }

        public bool Equals(VAppPropertyInfo vAppPropertyInfo)
        {
            return (vAppPropertyInfo != null && this.Key == vAppPropertyInfo.Key && this.ClassId == vAppPropertyInfo.ClassId && this.InstanceId == vAppPropertyInfo.InstanceId && this.Id == vAppPropertyInfo.Id && this.Category == vAppPropertyInfo.Category && this.Label == vAppPropertyInfo.Label && this.Type == vAppPropertyInfo.Type && this.TypeReference == vAppPropertyInfo.TypeReference && ((this.UserConfigurable == null && vAppPropertyInfo.UserConfigurable == null) || (this.UserConfigurable != null && this.UserConfigurable.Equals(vAppPropertyInfo.UserConfigurable))) && this.DefaultValue == vAppPropertyInfo.DefaultValue && this.Value == vAppPropertyInfo.Value && this.Description == vAppPropertyInfo.Description);
        }

        public override bool Equals(object vAppPropertyInfo)
        {
            return Equals(vAppPropertyInfo as VAppPropertyInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ClassId + "_" + InstanceId + "_" + Id + "_" + Category + "_" + Label + "_" + Type + "_" + TypeReference + "_" + UserConfigurable + "_" + DefaultValue + "_" + Value + "_" + Description).GetHashCode();
        }
    }

    public class VAppPropertySpec : ArrayUpdateSpec, IEquatable<VAppPropertySpec>
    {
        public VAppPropertyInfo Info { get; set; }

        public bool Equals(VAppPropertySpec vAppPropertySpec)
        {
            return (vAppPropertySpec != null && ((this.Info == null && vAppPropertySpec.Info == null) || (this.Info != null && this.Info.Equals(vAppPropertySpec.Info))));
        }

        public override bool Equals(object vAppPropertySpec)
        {
            return Equals(vAppPropertySpec as VAppPropertySpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class VAppTaskInProgress : TaskInProgress, IEquatable<VAppTaskInProgress>
    {
        public new VAppTaskInProgress_LinkedView LinkedView { get; set; }

        public bool Equals(VAppTaskInProgress vAppTaskInProgress)
        {
            return (vAppTaskInProgress != null && ((this.LinkedView == null && vAppTaskInProgress.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vAppTaskInProgress.LinkedView))));
        }

        public override bool Equals(object vAppTaskInProgress)
        {
            return Equals(vAppTaskInProgress as VAppTaskInProgress);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VAppTaskInProgress_LinkedView : TaskInProgress_LinkedView, IEquatable<VAppTaskInProgress_LinkedView>
    {
        public bool Equals(VAppTaskInProgress_LinkedView vAppTaskInProgress_LinkedView)
        {
            return (vAppTaskInProgress_LinkedView != null && base.Equals(vAppTaskInProgress_LinkedView));
        }

        public override bool Equals(object vAppTaskInProgress_LinkedView)
        {
            return Equals(vAppTaskInProgress_LinkedView as VAppTaskInProgress_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VasaProviderContainerSpec : DynamicData, IEquatable<VasaProviderContainerSpec>
    {
        public VimVasaProviderInfo[] VasaProviderInfo { get; set; }

        public string ScId { get; set; }

        public bool Deleted { get; set; }

        public bool Equals(VasaProviderContainerSpec vasaProviderContainerSpec)
        {
            return (vasaProviderContainerSpec != null && ((this.VasaProviderInfo == null && vasaProviderContainerSpec.VasaProviderInfo == null) || (this.VasaProviderInfo != null && vasaProviderContainerSpec.VasaProviderInfo != null && Enumerable.SequenceEqual(this.VasaProviderInfo, vasaProviderContainerSpec.VasaProviderInfo))) && this.ScId == vasaProviderContainerSpec.ScId && this.Deleted == vasaProviderContainerSpec.Deleted);
        }

        public override bool Equals(object vasaProviderContainerSpec)
        {
            return Equals(vasaProviderContainerSpec as VasaProviderContainerSpec);
        }

        public override int GetHashCode()
        {
            return (VasaProviderInfo + "_" + ScId + "_" + Deleted).GetHashCode();
        }
    }

    public class VASAStorageArray : DynamicData, IEquatable<VASAStorageArray>
    {
        public string Name { get; set; }

        public string Uuid { get; set; }

        public string VendorId { get; set; }

        public string ModelId { get; set; }

        public bool Equals(VASAStorageArray vASAStorageArray)
        {
            return (vASAStorageArray != null && this.Name == vASAStorageArray.Name && this.Uuid == vASAStorageArray.Uuid && this.VendorId == vASAStorageArray.VendorId && this.ModelId == vASAStorageArray.ModelId);
        }

        public override bool Equals(object vASAStorageArray)
        {
            return Equals(vASAStorageArray as VASAStorageArray);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Uuid + "_" + VendorId + "_" + ModelId).GetHashCode();
        }
    }

    public class VcAgentUninstalledEvent : HostEvent, IEquatable<VcAgentUninstalledEvent>
    {
        public bool Equals(VcAgentUninstalledEvent vcAgentUninstalledEvent)
        {
            return (vcAgentUninstalledEvent != null && base.Equals(vcAgentUninstalledEvent));
        }

        public override bool Equals(object vcAgentUninstalledEvent)
        {
            return Equals(vcAgentUninstalledEvent as VcAgentUninstalledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VcAgentUninstallFailedEvent : HostEvent, IEquatable<VcAgentUninstallFailedEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VcAgentUninstallFailedEvent vcAgentUninstallFailedEvent)
        {
            return (vcAgentUninstallFailedEvent != null && this.Reason == vcAgentUninstallFailedEvent.Reason);
        }

        public override bool Equals(object vcAgentUninstallFailedEvent)
        {
            return Equals(vcAgentUninstallFailedEvent as VcAgentUninstallFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VcAgentUpgradedEvent : HostEvent, IEquatable<VcAgentUpgradedEvent>
    {
        public bool Equals(VcAgentUpgradedEvent vcAgentUpgradedEvent)
        {
            return (vcAgentUpgradedEvent != null && base.Equals(vcAgentUpgradedEvent));
        }

        public override bool Equals(object vcAgentUpgradedEvent)
        {
            return Equals(vcAgentUpgradedEvent as VcAgentUpgradedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VcAgentUpgradeFailedEvent : HostEvent, IEquatable<VcAgentUpgradeFailedEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VcAgentUpgradeFailedEvent vcAgentUpgradeFailedEvent)
        {
            return (vcAgentUpgradeFailedEvent != null && this.Reason == vcAgentUpgradeFailedEvent.Reason);
        }

        public override bool Equals(object vcAgentUpgradeFailedEvent)
        {
            return Equals(vcAgentUpgradeFailedEvent as VcAgentUpgradeFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VcenterVStorageObjectManager : VStorageObjectManagerBase, IEquatable<VcenterVStorageObjectManager>
    {
        public ManagedObjectReference CreateDisk_Task(VslmCreateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject CreateDisk(VslmCreateSpec spec)
        {
            return default(VStorageObject);
        }

        public VStorageObject RegisterDisk(string path, string name)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference ExtendDisk_Task(ID id, ManagedObjectReference datastore, long newCapacityInMB)
        {
            return default(ManagedObjectReference);
        }

        public void ExtendDisk(ID id, ManagedObjectReference datastore, long newCapacityInMB)
        {
        }

        public ManagedObjectReference InflateDisk_Task(ID id, ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void InflateDisk(ID id, ManagedObjectReference datastore)
        {
        }

        public void RenameVStorageObject(ID id, ManagedObjectReference datastore, string name)
        {
        }

        public ManagedObjectReference UpdateVStorageObjectPolicy_Task(ID id, ManagedObjectReference datastore, VirtualMachineProfileSpec[] profile)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateVStorageObjectPolicy(ID id, ManagedObjectReference datastore, VirtualMachineProfileSpec[] profile)
        {
        }

        public ManagedObjectReference UpdateVStorageInfrastructureObjectPolicy_Task(vslmInfrastructureObjectPolicySpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateVStorageInfrastructureObjectPolicy(vslmInfrastructureObjectPolicySpec spec)
        {
        }

        public vslmInfrastructureObjectPolicy[] RetrieveVStorageInfrastructureObjectPolicy(ManagedObjectReference datastore)
        {
            return default(vslmInfrastructureObjectPolicy[]);
        }

        public ManagedObjectReference DeleteVStorageObject_Task(ID id, ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void DeleteVStorageObject(ID id, ManagedObjectReference datastore)
        {
        }

        public VStorageObject RetrieveVStorageObject(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObject);
        }

        public VStorageObjectStateInfo RetrieveVStorageObjectState(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObjectStateInfo);
        }

        public VStorageObjectAssociations[] RetrieveVStorageObjectAssociations(RetrieveVStorageObjSpec[] ids)
        {
            return default(VStorageObjectAssociations[]);
        }

        public ID[] ListVStorageObject(ManagedObjectReference datastore)
        {
            return default(ID[]);
        }

        public ManagedObjectReference CloneVStorageObject_Task(ID id, ManagedObjectReference datastore, VslmCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject CloneVStorageObject(ID id, ManagedObjectReference datastore, VslmCloneSpec spec)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference RelocateVStorageObject_Task(ID id, ManagedObjectReference datastore, VslmRelocateSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject RelocateVStorageObject(ID id, ManagedObjectReference datastore, VslmRelocateSpec spec)
        {
            return default(VStorageObject);
        }

        public void SetVStorageObjectControlFlags(ID id, ManagedObjectReference datastore, string[] controlFlags)
        {
        }

        public void ClearVStorageObjectControlFlags(ID id, ManagedObjectReference datastore, string[] controlFlags)
        {
        }

        public void AttachTagToVStorageObject(ID id, string category, string tag)
        {
        }

        public void DetachTagFromVStorageObject(ID id, string category, string tag)
        {
        }

        public ID[] ListVStorageObjectsAttachedToTag(string category, string tag)
        {
            return default(ID[]);
        }

        public VslmTagEntry[] ListTagsAttachedToVStorageObject(ID id)
        {
            return default(VslmTagEntry[]);
        }

        public ManagedObjectReference ReconcileDatastoreInventory_Task(ManagedObjectReference datastore)
        {
            return default(ManagedObjectReference);
        }

        public void ReconcileDatastoreInventory(ManagedObjectReference datastore)
        {
        }

        public void ScheduleReconcileDatastoreInventory(ManagedObjectReference datastore)
        {
        }

        public ManagedObjectReference VStorageObjectCreateSnapshot_Task(ID id, ManagedObjectReference datastore, string description)
        {
            return default(ManagedObjectReference);
        }

        public ID VStorageObjectCreateSnapshot(ID id, ManagedObjectReference datastore, string description)
        {
            return default(ID);
        }

        public ManagedObjectReference DeleteSnapshot_Task(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
            return default(ManagedObjectReference);
        }

        public void DeleteSnapshot(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
        }

        public VStorageObjectSnapshotInfo RetrieveSnapshotInfo(ID id, ManagedObjectReference datastore)
        {
            return default(VStorageObjectSnapshotInfo);
        }

        public ManagedObjectReference CreateDiskFromSnapshot_Task(ID id, ManagedObjectReference datastore, ID snapshotId, string name, VirtualMachineProfileSpec[] profile, CryptoSpec crypto, string path)
        {
            return default(ManagedObjectReference);
        }

        public VStorageObject CreateDiskFromSnapshot(ID id, ManagedObjectReference datastore, ID snapshotId, string name, VirtualMachineProfileSpec[] profile, CryptoSpec crypto, string path)
        {
            return default(VStorageObject);
        }

        public ManagedObjectReference RevertVStorageObject_Task(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
            return default(ManagedObjectReference);
        }

        public void RevertVStorageObject(ID id, ManagedObjectReference datastore, ID snapshotId)
        {
        }

        public bool Equals(VcenterVStorageObjectManager vcenterVStorageObjectManager)
        {
            return (vcenterVStorageObjectManager != null && base.Equals(vcenterVStorageObjectManager));
        }

        public override bool Equals(object vcenterVStorageObjectManager)
        {
            return Equals(vcenterVStorageObjectManager as VcenterVStorageObjectManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VchaClusterConfigInfo : DynamicData, IEquatable<VchaClusterConfigInfo>
    {
        public FailoverNodeInfo FailoverNodeInfo1 { get; set; }

        public FailoverNodeInfo FailoverNodeInfo2 { get; set; }

        public WitnessNodeInfo WitnessNodeInfo { get; set; }

        public string State { get; set; }

        public bool Equals(VchaClusterConfigInfo vchaClusterConfigInfo)
        {
            return (vchaClusterConfigInfo != null && ((this.FailoverNodeInfo1 == null && vchaClusterConfigInfo.FailoverNodeInfo1 == null) || (this.FailoverNodeInfo1 != null && this.FailoverNodeInfo1.Equals(vchaClusterConfigInfo.FailoverNodeInfo1))) && ((this.FailoverNodeInfo2 == null && vchaClusterConfigInfo.FailoverNodeInfo2 == null) || (this.FailoverNodeInfo2 != null && this.FailoverNodeInfo2.Equals(vchaClusterConfigInfo.FailoverNodeInfo2))) && ((this.WitnessNodeInfo == null && vchaClusterConfigInfo.WitnessNodeInfo == null) || (this.WitnessNodeInfo != null && this.WitnessNodeInfo.Equals(vchaClusterConfigInfo.WitnessNodeInfo))) && this.State == vchaClusterConfigInfo.State);
        }

        public override bool Equals(object vchaClusterConfigInfo)
        {
            return Equals(vchaClusterConfigInfo as VchaClusterConfigInfo);
        }

        public override int GetHashCode()
        {
            return (FailoverNodeInfo1 + "_" + FailoverNodeInfo2 + "_" + WitnessNodeInfo + "_" + State).GetHashCode();
        }
    }

    public class VchaClusterConfigSpec : DynamicData, IEquatable<VchaClusterConfigSpec>
    {
        public string PassiveIp { get; set; }

        public string WitnessIp { get; set; }

        public bool Equals(VchaClusterConfigSpec vchaClusterConfigSpec)
        {
            return (vchaClusterConfigSpec != null && this.PassiveIp == vchaClusterConfigSpec.PassiveIp && this.WitnessIp == vchaClusterConfigSpec.WitnessIp);
        }

        public override bool Equals(object vchaClusterConfigSpec)
        {
            return Equals(vchaClusterConfigSpec as VchaClusterConfigSpec);
        }

        public override int GetHashCode()
        {
            return (PassiveIp + "_" + WitnessIp).GetHashCode();
        }
    }

    public class VchaClusterDeploymentSpec : DynamicData, IEquatable<VchaClusterDeploymentSpec>
    {
        public PassiveNodeDeploymentSpec PassiveDeploymentSpec { get; set; }

        public NodeDeploymentSpec WitnessDeploymentSpec { get; set; }

        public SourceNodeSpec ActiveVcSpec { get; set; }

        public ClusterNetworkConfigSpec ActiveVcNetworkConfig { get; set; }

        public bool Equals(VchaClusterDeploymentSpec vchaClusterDeploymentSpec)
        {
            return (vchaClusterDeploymentSpec != null && ((this.PassiveDeploymentSpec == null && vchaClusterDeploymentSpec.PassiveDeploymentSpec == null) || (this.PassiveDeploymentSpec != null && this.PassiveDeploymentSpec.Equals(vchaClusterDeploymentSpec.PassiveDeploymentSpec))) && ((this.WitnessDeploymentSpec == null && vchaClusterDeploymentSpec.WitnessDeploymentSpec == null) || (this.WitnessDeploymentSpec != null && this.WitnessDeploymentSpec.Equals(vchaClusterDeploymentSpec.WitnessDeploymentSpec))) && ((this.ActiveVcSpec == null && vchaClusterDeploymentSpec.ActiveVcSpec == null) || (this.ActiveVcSpec != null && this.ActiveVcSpec.Equals(vchaClusterDeploymentSpec.ActiveVcSpec))) && ((this.ActiveVcNetworkConfig == null && vchaClusterDeploymentSpec.ActiveVcNetworkConfig == null) || (this.ActiveVcNetworkConfig != null && this.ActiveVcNetworkConfig.Equals(vchaClusterDeploymentSpec.ActiveVcNetworkConfig))));
        }

        public override bool Equals(object vchaClusterDeploymentSpec)
        {
            return Equals(vchaClusterDeploymentSpec as VchaClusterDeploymentSpec);
        }

        public override int GetHashCode()
        {
            return (PassiveDeploymentSpec + "_" + WitnessDeploymentSpec + "_" + ActiveVcSpec + "_" + ActiveVcNetworkConfig).GetHashCode();
        }
    }

    public class VchaClusterHealth : DynamicData, IEquatable<VchaClusterHealth>
    {
        public VchaClusterRuntimeInfo RuntimeInfo { get; set; }

        public LocalizableMessage[] HealthMessages { get; set; }

        public LocalizableMessage[] AdditionalInformation { get; set; }

        public bool Equals(VchaClusterHealth vchaClusterHealth)
        {
            return (vchaClusterHealth != null && ((this.RuntimeInfo == null && vchaClusterHealth.RuntimeInfo == null) || (this.RuntimeInfo != null && this.RuntimeInfo.Equals(vchaClusterHealth.RuntimeInfo))) && ((this.HealthMessages == null && vchaClusterHealth.HealthMessages == null) || (this.HealthMessages != null && vchaClusterHealth.HealthMessages != null && Enumerable.SequenceEqual(this.HealthMessages, vchaClusterHealth.HealthMessages))) && ((this.AdditionalInformation == null && vchaClusterHealth.AdditionalInformation == null) || (this.AdditionalInformation != null && vchaClusterHealth.AdditionalInformation != null && Enumerable.SequenceEqual(this.AdditionalInformation, vchaClusterHealth.AdditionalInformation))));
        }

        public override bool Equals(object vchaClusterHealth)
        {
            return Equals(vchaClusterHealth as VchaClusterHealth);
        }

        public override int GetHashCode()
        {
            return (RuntimeInfo + "_" + HealthMessages + "_" + AdditionalInformation).GetHashCode();
        }
    }

    public class VchaClusterNetworkSpec : DynamicData, IEquatable<VchaClusterNetworkSpec>
    {
        public NodeNetworkSpec WitnessNetworkSpec { get; set; }

        public PassiveNodeNetworkSpec PassiveNetworkSpec { get; set; }

        public bool Equals(VchaClusterNetworkSpec vchaClusterNetworkSpec)
        {
            return (vchaClusterNetworkSpec != null && ((this.WitnessNetworkSpec == null && vchaClusterNetworkSpec.WitnessNetworkSpec == null) || (this.WitnessNetworkSpec != null && this.WitnessNetworkSpec.Equals(vchaClusterNetworkSpec.WitnessNetworkSpec))) && ((this.PassiveNetworkSpec == null && vchaClusterNetworkSpec.PassiveNetworkSpec == null) || (this.PassiveNetworkSpec != null && this.PassiveNetworkSpec.Equals(vchaClusterNetworkSpec.PassiveNetworkSpec))));
        }

        public override bool Equals(object vchaClusterNetworkSpec)
        {
            return Equals(vchaClusterNetworkSpec as VchaClusterNetworkSpec);
        }

        public override int GetHashCode()
        {
            return (WitnessNetworkSpec + "_" + PassiveNetworkSpec).GetHashCode();
        }
    }

    public class VchaClusterRuntimeInfo : DynamicData, IEquatable<VchaClusterRuntimeInfo>
    {
        public string ClusterState { get; set; }

        public VchaNodeRuntimeInfo[] NodeInfo { get; set; }

        public string ClusterMode { get; set; }

        public bool Equals(VchaClusterRuntimeInfo vchaClusterRuntimeInfo)
        {
            return (vchaClusterRuntimeInfo != null && this.ClusterState == vchaClusterRuntimeInfo.ClusterState && ((this.NodeInfo == null && vchaClusterRuntimeInfo.NodeInfo == null) || (this.NodeInfo != null && vchaClusterRuntimeInfo.NodeInfo != null && Enumerable.SequenceEqual(this.NodeInfo, vchaClusterRuntimeInfo.NodeInfo))) && this.ClusterMode == vchaClusterRuntimeInfo.ClusterMode);
        }

        public override bool Equals(object vchaClusterRuntimeInfo)
        {
            return Equals(vchaClusterRuntimeInfo as VchaClusterRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (ClusterState + "_" + NodeInfo + "_" + ClusterMode).GetHashCode();
        }
    }

    public class VchaNodeRuntimeInfo : DynamicData, IEquatable<VchaNodeRuntimeInfo>
    {
        public string NodeState { get; set; }

        public string NodeRole { get; set; }

        public string NodeIp { get; set; }

        public bool Equals(VchaNodeRuntimeInfo vchaNodeRuntimeInfo)
        {
            return (vchaNodeRuntimeInfo != null && this.NodeState == vchaNodeRuntimeInfo.NodeState && this.NodeRole == vchaNodeRuntimeInfo.NodeRole && this.NodeIp == vchaNodeRuntimeInfo.NodeIp);
        }

        public override bool Equals(object vchaNodeRuntimeInfo)
        {
            return Equals(vchaNodeRuntimeInfo as VchaNodeRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (NodeState + "_" + NodeRole + "_" + NodeIp).GetHashCode();
        }
    }

    public class VFlashCacheHotConfigNotSupported : VmConfigFault, IEquatable<VFlashCacheHotConfigNotSupported>
    {
        public bool Equals(VFlashCacheHotConfigNotSupported vFlashCacheHotConfigNotSupported)
        {
            return (vFlashCacheHotConfigNotSupported != null && base.Equals(vFlashCacheHotConfigNotSupported));
        }

        public override bool Equals(object vFlashCacheHotConfigNotSupported)
        {
            return Equals(vFlashCacheHotConfigNotSupported as VFlashCacheHotConfigNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VFlashModuleNotSupported : VmConfigFault, IEquatable<VFlashModuleNotSupported>
    {
        public string VmName { get; set; }

        public string ModuleName { get; set; }

        public string Reason { get; set; }

        public string HostName { get; set; }

        public bool Equals(VFlashModuleNotSupported vFlashModuleNotSupported)
        {
            return (vFlashModuleNotSupported != null && this.VmName == vFlashModuleNotSupported.VmName && this.ModuleName == vFlashModuleNotSupported.ModuleName && this.Reason == vFlashModuleNotSupported.Reason && this.HostName == vFlashModuleNotSupported.HostName);
        }

        public override bool Equals(object vFlashModuleNotSupported)
        {
            return Equals(vFlashModuleNotSupported as VFlashModuleNotSupported);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + ModuleName + "_" + Reason + "_" + HostName).GetHashCode();
        }
    }

    public class VFlashModuleVersionIncompatible : VimFault, IEquatable<VFlashModuleVersionIncompatible>
    {
        public string ModuleName { get; set; }

        public string VmRequestModuleVersion { get; set; }

        public string HostMinSupportedVerson { get; set; }

        public string HostModuleVersion { get; set; }

        public bool Equals(VFlashModuleVersionIncompatible vFlashModuleVersionIncompatible)
        {
            return (vFlashModuleVersionIncompatible != null && this.ModuleName == vFlashModuleVersionIncompatible.ModuleName && this.VmRequestModuleVersion == vFlashModuleVersionIncompatible.VmRequestModuleVersion && this.HostMinSupportedVerson == vFlashModuleVersionIncompatible.HostMinSupportedVerson && this.HostModuleVersion == vFlashModuleVersionIncompatible.HostModuleVersion);
        }

        public override bool Equals(object vFlashModuleVersionIncompatible)
        {
            return Equals(vFlashModuleVersionIncompatible as VFlashModuleVersionIncompatible);
        }

        public override int GetHashCode()
        {
            return (ModuleName + "_" + VmRequestModuleVersion + "_" + HostMinSupportedVerson + "_" + HostModuleVersion).GetHashCode();
        }
    }

    public class VIConvert : IEquatable<VIConvert>
    {
        public bool Equals(VIConvert vIConvert)
        {
            return (vIConvert != null);
        }

        public override bool Equals(object vIConvert)
        {
            return Equals(vIConvert as VIConvert);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class View : ViewBase, IEquatable<View>
    {
        public void DestroyView()
        {
        }

        public bool Equals(View view)
        {
            return (view != null && base.Equals(view));
        }

        public override bool Equals(object view)
        {
            return Equals(view as View);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class ViewBase : IEquatable<ViewBase>
    {
        public ManagedObjectReference MoRef { get; set; }

        public VimClient Client { get; set; }

        public void UpdateViewData(string[] properties)
        {
        }

        public void UpdateViewData()
        {
        }

        public void SetViewData(ObjectContent objectContent, string[] properties)
        {
        }

        public object WaitForTask(ManagedObjectReference taskReference)
        {
            return default(object);
        }

        public bool Equals(ViewBase viewBase)
        {
            return (viewBase != null && ((this.MoRef == null && viewBase.MoRef == null) || (this.MoRef != null && this.MoRef.Equals(viewBase.MoRef))) && ((this.Client == null && viewBase.Client == null) || (this.Client != null && this.Client.Equals(viewBase.Client))));
        }

        public override bool Equals(object viewBase)
        {
            return Equals(viewBase as ViewBase);
        }

        public override int GetHashCode()
        {
            return (MoRef + "_" + Client).GetHashCode();
        }
    }

    public class ViewManager : ViewBase, IEquatable<ViewManager>
    {
        public ManagedObjectReference[] ViewList { get; set; }

        public ViewManager_LinkedView LinkedView { get; set; }

        public ManagedObjectReference CreateInventoryView()
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateContainerView(ManagedObjectReference container, string[] type, bool recursive)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateListView(ManagedObjectReference[] obj)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateListViewFromView(ManagedObjectReference view)
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(ViewManager viewManager)
        {
            return (viewManager != null && ((this.ViewList == null && viewManager.ViewList == null) || (this.ViewList != null && viewManager.ViewList != null && Enumerable.SequenceEqual(this.ViewList, viewManager.ViewList))) && ((this.LinkedView == null && viewManager.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(viewManager.LinkedView))));
        }

        public override bool Equals(object viewManager)
        {
            return Equals(viewManager as ViewManager);
        }

        public override int GetHashCode()
        {
            return (ViewList + "_" + LinkedView).GetHashCode();
        }
    }

    public class ViewManager_LinkedView : IEquatable<ViewManager_LinkedView>
    {
        public View[] ViewList { get; set; }

        public bool Equals(ViewManager_LinkedView viewManager_LinkedView)
        {
            return (viewManager_LinkedView != null && ((this.ViewList == null && viewManager_LinkedView.ViewList == null) || (this.ViewList != null && viewManager_LinkedView.ViewList != null && Enumerable.SequenceEqual(this.ViewList, viewManager_LinkedView.ViewList))));
        }

        public override bool Equals(object viewManager_LinkedView)
        {
            return Equals(viewManager_LinkedView as ViewManager_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ViewList).GetHashCode();
        }
    }

    public class VimAccountPasswordChangedEvent : HostEvent, IEquatable<VimAccountPasswordChangedEvent>
    {
        public bool Equals(VimAccountPasswordChangedEvent vimAccountPasswordChangedEvent)
        {
            return (vimAccountPasswordChangedEvent != null && base.Equals(vimAccountPasswordChangedEvent));
        }

        public override bool Equals(object vimAccountPasswordChangedEvent)
        {
            return Equals(vimAccountPasswordChangedEvent as VimAccountPasswordChangedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VimClientImpl : VimClient, IEquatable<VimClientImpl>
    {
        public VimVersion Version { get; set; }

        public ServiceContent ServiceContent { get; set; }

        public string ServiceUrl { get; set; }

        public int ServiceTimeout { get; set; }

        public bool UseSystemProxy { get; set; }

        public Action<X509Certificate2> CertificateValidationHandler { get; set; }

        public bool IgnoreServerCertificateErrors { get; set; }

        public string SessionSecret { get; set; }

        public string UserAgent { get; set; }

        public object VimService { get; set; }

        public ServiceContent Connect()
        {
            return default(ServiceContent);
        }

        public ServiceContent Connect(string serviceUrl)
        {
            return default(ServiceContent);
        }

        public ServiceContent Connect(string server, CommunicationProtocol? protocol, ushort? port)
        {
            return default(ServiceContent);
        }

        public UserSession Login(string username, string password)
        {
            return default(UserSession);
        }

        public UserSession Login(string serviceUrl, string username, string password)
        {
            return default(UserSession);
        }

        public void Logout()
        {
        }

        public UserSession ConnectToSession(string serviceUrl, string soapSessionId)
        {
            return default(UserSession);
        }

        public EntityViewBase FindEntityView(Type viewType, ManagedObjectReference beginEntity, NameValueCollection filter, string[] properties)
        {
            return default(EntityViewBase);
        }

        public List<EntityViewBase> FindEntityViews(Type viewType, ManagedObjectReference beginEntity, NameValueCollection filter, string[] properties)
        {
            return default(List<EntityViewBase>);
        }

        public List<ViewBase> GetViews(IEnumerable<ManagedObjectReference> moRefs, string[] properties)
        {
            return default(List<ViewBase>);
        }

        public List<ViewBase> GetViews(ObjectContent[] objectContent, string[] properties)
        {
            return default(List<ViewBase>);
        }

        public List<ViewBase> GetViewsByMorefs(IEnumerable<ManagedObjectReference> moRefs, string[] properties)
        {
            return default(List<ViewBase>);
        }

        public ViewBase GetView(ManagedObjectReference moRef, string[] properties)
        {
            return default(ViewBase);
        }

        public void Disconnect()
        {
        }

        public void SaveSession(string fileName)
        {
        }

        public void LoadSession(string fileName)
        {
        }

        public bool IsVimVersionOrHigher(VimVersion version)
        {
            return default(bool);
        }

        public object WaitForTask(ManagedObjectReference taskReference)
        {
            return default(object);
        }

        public bool Equals(VimClientImpl vimClientImpl)
        {
            return (vimClientImpl != null && this.Version == vimClientImpl.Version && ((this.ServiceContent == null && vimClientImpl.ServiceContent == null) || (this.ServiceContent != null && this.ServiceContent.Equals(vimClientImpl.ServiceContent))) && this.ServiceUrl == vimClientImpl.ServiceUrl && this.ServiceTimeout == vimClientImpl.ServiceTimeout && this.UseSystemProxy == vimClientImpl.UseSystemProxy && ((this.CertificateValidationHandler == null && vimClientImpl.CertificateValidationHandler == null) || (this.CertificateValidationHandler != null && this.CertificateValidationHandler.Equals(vimClientImpl.CertificateValidationHandler))) && this.IgnoreServerCertificateErrors == vimClientImpl.IgnoreServerCertificateErrors && this.SessionSecret == vimClientImpl.SessionSecret && this.UserAgent == vimClientImpl.UserAgent && ((this.VimService == null && vimClientImpl.VimService == null) || (this.VimService != null && this.VimService.Equals(vimClientImpl.VimService))));
        }

        public override bool Equals(object vimClientImpl)
        {
            return Equals(vimClientImpl as VimClientImpl);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + ServiceContent + "_" + ServiceUrl + "_" + ServiceTimeout + "_" + UseSystemProxy + "_" + CertificateValidationHandler + "_" + IgnoreServerCertificateErrors + "_" + SessionSecret + "_" + UserAgent + "_" + VimService).GetHashCode();
        }
    }

    public class VimEndpointNotFoundException : VimException, IEquatable<VimEndpointNotFoundException>
    {
        public bool Equals(VimEndpointNotFoundException vimEndpointNotFoundException)
        {
            return (vimEndpointNotFoundException != null && base.Equals(vimEndpointNotFoundException));
        }

        public override bool Equals(object vimEndpointNotFoundException)
        {
            return Equals(vimEndpointNotFoundException as VimEndpointNotFoundException);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VimException : Exception, IEquatable<VimException>
    {
        public MethodFault MethodFault { get; set; }

        public bool Equals(VimException vimException)
        {
            return (vimException != null && ((this.MethodFault == null && vimException.MethodFault == null) || (this.MethodFault != null && this.MethodFault.Equals(vimException.MethodFault))));
        }

        public override bool Equals(object vimException)
        {
            return Equals(vimException as VimException);
        }

        public override int GetHashCode()
        {
            return (MethodFault).GetHashCode();
        }
    }

    public class VimFault : MethodFault, IEquatable<VimFault>
    {
        public bool Equals(VimFault vimFault)
        {
            return (vimFault != null && base.Equals(vimFault));
        }

        public override bool Equals(object vimFault)
        {
            return Equals(vimFault as VimFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VimProtocolException : VimException, IEquatable<VimProtocolException>
    {
        public bool Equals(VimProtocolException vimProtocolException)
        {
            return (vimProtocolException != null && base.Equals(vimProtocolException));
        }

        public override bool Equals(object vimProtocolException)
        {
            return Equals(vimProtocolException as VimProtocolException);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VimSecurityNegotiationException : VimException, IEquatable<VimSecurityNegotiationException>
    {
        public bool Equals(VimSecurityNegotiationException vimSecurityNegotiationException)
        {
            return (vimSecurityNegotiationException != null && base.Equals(vimSecurityNegotiationException));
        }

        public override bool Equals(object vimSecurityNegotiationException)
        {
            return Equals(vimSecurityNegotiationException as VimSecurityNegotiationException);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VimVasaProvider : DynamicData, IEquatable<VimVasaProvider>
    {
        public string Uid { get; set; }

        public string Url { get; set; }

        public string Name { get; set; }

        public string SelfSignedCertificate { get; set; }

        public bool Equals(VimVasaProvider vimVasaProvider)
        {
            return (vimVasaProvider != null && this.Uid == vimVasaProvider.Uid && this.Url == vimVasaProvider.Url && this.Name == vimVasaProvider.Name && this.SelfSignedCertificate == vimVasaProvider.SelfSignedCertificate);
        }

        public override bool Equals(object vimVasaProvider)
        {
            return Equals(vimVasaProvider as VimVasaProvider);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + Url + "_" + Name + "_" + SelfSignedCertificate).GetHashCode();
        }
    }

    public class VimVasaProviderInfo : DynamicData, IEquatable<VimVasaProviderInfo>
    {
        public VimVasaProvider Provider { get; set; }

        public VimVasaProviderStatePerArray[] ArrayState { get; set; }

        public bool Equals(VimVasaProviderInfo vimVasaProviderInfo)
        {
            return (vimVasaProviderInfo != null && ((this.Provider == null && vimVasaProviderInfo.Provider == null) || (this.Provider != null && this.Provider.Equals(vimVasaProviderInfo.Provider))) && ((this.ArrayState == null && vimVasaProviderInfo.ArrayState == null) || (this.ArrayState != null && vimVasaProviderInfo.ArrayState != null && Enumerable.SequenceEqual(this.ArrayState, vimVasaProviderInfo.ArrayState))));
        }

        public override bool Equals(object vimVasaProviderInfo)
        {
            return Equals(vimVasaProviderInfo as VimVasaProviderInfo);
        }

        public override int GetHashCode()
        {
            return (Provider + "_" + ArrayState).GetHashCode();
        }
    }

    public class VimVasaProviderStatePerArray : DynamicData, IEquatable<VimVasaProviderStatePerArray>
    {
        public int Priority { get; set; }

        public string ArrayId { get; set; }

        public bool Active { get; set; }

        public bool Equals(VimVasaProviderStatePerArray vimVasaProviderStatePerArray)
        {
            return (vimVasaProviderStatePerArray != null && this.Priority == vimVasaProviderStatePerArray.Priority && this.ArrayId == vimVasaProviderStatePerArray.ArrayId && this.Active == vimVasaProviderStatePerArray.Active);
        }

        public override bool Equals(object vimVasaProviderStatePerArray)
        {
            return Equals(vimVasaProviderStatePerArray as VimVasaProviderStatePerArray);
        }

        public override int GetHashCode()
        {
            return (Priority + "_" + ArrayId + "_" + Active).GetHashCode();
        }
    }

    public class VirtualAHCIController : VirtualSATAController, IEquatable<VirtualAHCIController>
    {
        public bool Equals(VirtualAHCIController virtualAHCIController)
        {
            return (virtualAHCIController != null && base.Equals(virtualAHCIController));
        }

        public override bool Equals(object virtualAHCIController)
        {
            return Equals(virtualAHCIController as VirtualAHCIController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualAHCIControllerOption : VirtualSATAControllerOption, IEquatable<VirtualAHCIControllerOption>
    {
        public bool Equals(VirtualAHCIControllerOption virtualAHCIControllerOption)
        {
            return (virtualAHCIControllerOption != null && base.Equals(virtualAHCIControllerOption));
        }

        public override bool Equals(object virtualAHCIControllerOption)
        {
            return Equals(virtualAHCIControllerOption as VirtualAHCIControllerOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualApp : ResourcePool, IEquatable<VirtualApp>
    {
        public ManagedObjectReference ParentFolder { get; set; }

        public ManagedObjectReference[] Datastore { get; set; }

        public ManagedObjectReference[] Network { get; set; }

        public VAppConfigInfo VAppConfig { get; set; }

        public ManagedObjectReference ParentVApp { get; set; }

        public VirtualAppLinkInfo[] ChildLink { get; set; }

        public new VirtualApp_LinkedView LinkedView { get; set; }

        public void UpdateVAppConfig(VAppConfigSpec spec)
        {
        }

        public void UpdateLinkedChildren(VirtualAppLinkInfo[] addChangeSet, ManagedObjectReference[] removeSet)
        {
        }

        public ManagedObjectReference CloneVApp_Task(string name, ManagedObjectReference target, VAppCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CloneVApp(string name, ManagedObjectReference target, VAppCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference ExportVApp()
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference PowerOnVApp_Task()
        {
            return default(ManagedObjectReference);
        }

        public void PowerOnVApp()
        {
        }

        public ManagedObjectReference PowerOffVApp_Task(bool force)
        {
            return default(ManagedObjectReference);
        }

        public void PowerOffVApp(bool force)
        {
        }

        public ManagedObjectReference SuspendVApp_Task()
        {
            return default(ManagedObjectReference);
        }

        public void SuspendVApp()
        {
        }

        public ManagedObjectReference unregisterVApp_Task()
        {
            return default(ManagedObjectReference);
        }

        public void unregisterVApp()
        {
        }

        public bool Equals(VirtualApp virtualApp)
        {
            return (virtualApp != null && ((this.ParentFolder == null && virtualApp.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(virtualApp.ParentFolder))) && ((this.Datastore == null && virtualApp.Datastore == null) || (this.Datastore != null && virtualApp.Datastore != null && Enumerable.SequenceEqual(this.Datastore, virtualApp.Datastore))) && ((this.Network == null && virtualApp.Network == null) || (this.Network != null && virtualApp.Network != null && Enumerable.SequenceEqual(this.Network, virtualApp.Network))) && ((this.VAppConfig == null && virtualApp.VAppConfig == null) || (this.VAppConfig != null && this.VAppConfig.Equals(virtualApp.VAppConfig))) && ((this.ParentVApp == null && virtualApp.ParentVApp == null) || (this.ParentVApp != null && this.ParentVApp.Equals(virtualApp.ParentVApp))) && ((this.ChildLink == null && virtualApp.ChildLink == null) || (this.ChildLink != null && virtualApp.ChildLink != null && Enumerable.SequenceEqual(this.ChildLink, virtualApp.ChildLink))) && ((this.LinkedView == null && virtualApp.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualApp.LinkedView))));
        }

        public override bool Equals(object virtualApp)
        {
            return Equals(virtualApp as VirtualApp);
        }

        public override int GetHashCode()
        {
            return (ParentFolder + "_" + Datastore + "_" + Network + "_" + VAppConfig + "_" + ParentVApp + "_" + ChildLink + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualApp_LinkedView : ResourcePool_LinkedView, IEquatable<VirtualApp_LinkedView>
    {
        public Folder ParentFolder { get; set; }

        public Datastore[] Datastore { get; set; }

        public Network[] Network { get; set; }

        public ManagedEntity ParentVApp { get; set; }

        public bool Equals(VirtualApp_LinkedView virtualApp_LinkedView)
        {
            return (virtualApp_LinkedView != null && ((this.ParentFolder == null && virtualApp_LinkedView.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(virtualApp_LinkedView.ParentFolder))) && ((this.Datastore == null && virtualApp_LinkedView.Datastore == null) || (this.Datastore != null && virtualApp_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, virtualApp_LinkedView.Datastore))) && ((this.Network == null && virtualApp_LinkedView.Network == null) || (this.Network != null && virtualApp_LinkedView.Network != null && Enumerable.SequenceEqual(this.Network, virtualApp_LinkedView.Network))) && ((this.ParentVApp == null && virtualApp_LinkedView.ParentVApp == null) || (this.ParentVApp != null && this.ParentVApp.Equals(virtualApp_LinkedView.ParentVApp))));
        }

        public override bool Equals(object virtualApp_LinkedView)
        {
            return Equals(virtualApp_LinkedView as VirtualApp_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ParentFolder + "_" + Datastore + "_" + Network + "_" + ParentVApp).GetHashCode();
        }
    }

    public class VirtualAppImportSpec : ImportSpec, IEquatable<VirtualAppImportSpec>
    {
        public string Name { get; set; }

        public VAppConfigSpec VAppConfigSpec { get; set; }

        public ResourceConfigSpec ResourcePoolSpec { get; set; }

        public ImportSpec[] Child { get; set; }

        public bool Equals(VirtualAppImportSpec virtualAppImportSpec)
        {
            return (virtualAppImportSpec != null && this.Name == virtualAppImportSpec.Name && ((this.VAppConfigSpec == null && virtualAppImportSpec.VAppConfigSpec == null) || (this.VAppConfigSpec != null && this.VAppConfigSpec.Equals(virtualAppImportSpec.VAppConfigSpec))) && ((this.ResourcePoolSpec == null && virtualAppImportSpec.ResourcePoolSpec == null) || (this.ResourcePoolSpec != null && this.ResourcePoolSpec.Equals(virtualAppImportSpec.ResourcePoolSpec))) && ((this.Child == null && virtualAppImportSpec.Child == null) || (this.Child != null && virtualAppImportSpec.Child != null && Enumerable.SequenceEqual(this.Child, virtualAppImportSpec.Child))));
        }

        public override bool Equals(object virtualAppImportSpec)
        {
            return Equals(virtualAppImportSpec as VirtualAppImportSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + VAppConfigSpec + "_" + ResourcePoolSpec + "_" + Child).GetHashCode();
        }
    }

    public class VirtualAppLinkInfo : DynamicData, IEquatable<VirtualAppLinkInfo>
    {
        public ManagedObjectReference Key { get; set; }

        public bool? DestroyWithParent { get; set; }

        public VirtualAppLinkInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualAppLinkInfo virtualAppLinkInfo)
        {
            return (virtualAppLinkInfo != null && ((this.Key == null && virtualAppLinkInfo.Key == null) || (this.Key != null && this.Key.Equals(virtualAppLinkInfo.Key))) && ((this.DestroyWithParent == null && virtualAppLinkInfo.DestroyWithParent == null) || (this.DestroyWithParent != null && this.DestroyWithParent.Equals(virtualAppLinkInfo.DestroyWithParent))) && ((this.LinkedView == null && virtualAppLinkInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualAppLinkInfo.LinkedView))));
        }

        public override bool Equals(object virtualAppLinkInfo)
        {
            return Equals(virtualAppLinkInfo as VirtualAppLinkInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DestroyWithParent + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualAppLinkInfo_LinkedView : IEquatable<VirtualAppLinkInfo_LinkedView>
    {
        public ManagedEntity Key { get; set; }

        public bool Equals(VirtualAppLinkInfo_LinkedView virtualAppLinkInfo_LinkedView)
        {
            return (virtualAppLinkInfo_LinkedView != null && ((this.Key == null && virtualAppLinkInfo_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(virtualAppLinkInfo_LinkedView.Key))));
        }

        public override bool Equals(object virtualAppLinkInfo_LinkedView)
        {
            return Equals(virtualAppLinkInfo_LinkedView as VirtualAppLinkInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VirtualAppSummary : ResourcePoolSummary, IEquatable<VirtualAppSummary>
    {
        public VAppProductInfo Product { get; set; }

        public VirtualAppVAppState? VAppState { get; set; }

        public bool? Suspended { get; set; }

        public bool? InstallBootRequired { get; set; }

        public string InstanceUuid { get; set; }

        public bool Equals(VirtualAppSummary virtualAppSummary)
        {
            return (virtualAppSummary != null && ((this.Product == null && virtualAppSummary.Product == null) || (this.Product != null && this.Product.Equals(virtualAppSummary.Product))) && ((this.VAppState == null && virtualAppSummary.VAppState == null) || (this.VAppState != null && this.VAppState.Equals(virtualAppSummary.VAppState))) && ((this.Suspended == null && virtualAppSummary.Suspended == null) || (this.Suspended != null && this.Suspended.Equals(virtualAppSummary.Suspended))) && ((this.InstallBootRequired == null && virtualAppSummary.InstallBootRequired == null) || (this.InstallBootRequired != null && this.InstallBootRequired.Equals(virtualAppSummary.InstallBootRequired))) && this.InstanceUuid == virtualAppSummary.InstanceUuid);
        }

        public override bool Equals(object virtualAppSummary)
        {
            return Equals(virtualAppSummary as VirtualAppSummary);
        }

        public override int GetHashCode()
        {
            return (Product + "_" + VAppState + "_" + Suspended + "_" + InstallBootRequired + "_" + InstanceUuid).GetHashCode();
        }
    }

    public class VirtualBusLogicController : VirtualSCSIController, IEquatable<VirtualBusLogicController>
    {
        public bool Equals(VirtualBusLogicController virtualBusLogicController)
        {
            return (virtualBusLogicController != null && base.Equals(virtualBusLogicController));
        }

        public override bool Equals(object virtualBusLogicController)
        {
            return Equals(virtualBusLogicController as VirtualBusLogicController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualBusLogicControllerOption : VirtualSCSIControllerOption, IEquatable<VirtualBusLogicControllerOption>
    {
        public bool Equals(VirtualBusLogicControllerOption virtualBusLogicControllerOption)
        {
            return (virtualBusLogicControllerOption != null && base.Equals(virtualBusLogicControllerOption));
        }

        public override bool Equals(object virtualBusLogicControllerOption)
        {
            return Equals(virtualBusLogicControllerOption as VirtualBusLogicControllerOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdrom : VirtualDevice, IEquatable<VirtualCdrom>
    {
        public bool Equals(VirtualCdrom virtualCdrom)
        {
            return (virtualCdrom != null && base.Equals(virtualCdrom));
        }

        public override bool Equals(object virtualCdrom)
        {
            return Equals(virtualCdrom as VirtualCdrom);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromAtapiBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualCdromAtapiBackingInfo>
    {
        public bool Equals(VirtualCdromAtapiBackingInfo virtualCdromAtapiBackingInfo)
        {
            return (virtualCdromAtapiBackingInfo != null && base.Equals(virtualCdromAtapiBackingInfo));
        }

        public override bool Equals(object virtualCdromAtapiBackingInfo)
        {
            return Equals(virtualCdromAtapiBackingInfo as VirtualCdromAtapiBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromAtapiBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualCdromAtapiBackingOption>
    {
        public bool Equals(VirtualCdromAtapiBackingOption virtualCdromAtapiBackingOption)
        {
            return (virtualCdromAtapiBackingOption != null && base.Equals(virtualCdromAtapiBackingOption));
        }

        public override bool Equals(object virtualCdromAtapiBackingOption)
        {
            return Equals(virtualCdromAtapiBackingOption as VirtualCdromAtapiBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromIsoBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualCdromIsoBackingInfo>
    {
        public new VirtualCdromIsoBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualCdromIsoBackingInfo virtualCdromIsoBackingInfo)
        {
            return (virtualCdromIsoBackingInfo != null && ((this.LinkedView == null && virtualCdromIsoBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualCdromIsoBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualCdromIsoBackingInfo)
        {
            return Equals(virtualCdromIsoBackingInfo as VirtualCdromIsoBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VirtualCdromIsoBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualCdromIsoBackingInfo_LinkedView>
    {
        public bool Equals(VirtualCdromIsoBackingInfo_LinkedView virtualCdromIsoBackingInfo_LinkedView)
        {
            return (virtualCdromIsoBackingInfo_LinkedView != null && base.Equals(virtualCdromIsoBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualCdromIsoBackingInfo_LinkedView)
        {
            return Equals(virtualCdromIsoBackingInfo_LinkedView as VirtualCdromIsoBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromIsoBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualCdromIsoBackingOption>
    {
        public bool Equals(VirtualCdromIsoBackingOption virtualCdromIsoBackingOption)
        {
            return (virtualCdromIsoBackingOption != null && base.Equals(virtualCdromIsoBackingOption));
        }

        public override bool Equals(object virtualCdromIsoBackingOption)
        {
            return Equals(virtualCdromIsoBackingOption as VirtualCdromIsoBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromOption : VirtualDeviceOption, IEquatable<VirtualCdromOption>
    {
        public bool Equals(VirtualCdromOption virtualCdromOption)
        {
            return (virtualCdromOption != null && base.Equals(virtualCdromOption));
        }

        public override bool Equals(object virtualCdromOption)
        {
            return Equals(virtualCdromOption as VirtualCdromOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromPassthroughBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualCdromPassthroughBackingInfo>
    {
        public bool Exclusive { get; set; }

        public bool Equals(VirtualCdromPassthroughBackingInfo virtualCdromPassthroughBackingInfo)
        {
            return (virtualCdromPassthroughBackingInfo != null && this.Exclusive == virtualCdromPassthroughBackingInfo.Exclusive);
        }

        public override bool Equals(object virtualCdromPassthroughBackingInfo)
        {
            return Equals(virtualCdromPassthroughBackingInfo as VirtualCdromPassthroughBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Exclusive).GetHashCode();
        }
    }

    public class VirtualCdromPassthroughBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualCdromPassthroughBackingOption>
    {
        public BoolOption Exclusive { get; set; }

        public bool Equals(VirtualCdromPassthroughBackingOption virtualCdromPassthroughBackingOption)
        {
            return (virtualCdromPassthroughBackingOption != null && ((this.Exclusive == null && virtualCdromPassthroughBackingOption.Exclusive == null) || (this.Exclusive != null && this.Exclusive.Equals(virtualCdromPassthroughBackingOption.Exclusive))));
        }

        public override bool Equals(object virtualCdromPassthroughBackingOption)
        {
            return Equals(virtualCdromPassthroughBackingOption as VirtualCdromPassthroughBackingOption);
        }

        public override int GetHashCode()
        {
            return (Exclusive).GetHashCode();
        }
    }

    public class VirtualCdromRemoteAtapiBackingInfo : VirtualDeviceRemoteDeviceBackingInfo, IEquatable<VirtualCdromRemoteAtapiBackingInfo>
    {
        public bool Equals(VirtualCdromRemoteAtapiBackingInfo virtualCdromRemoteAtapiBackingInfo)
        {
            return (virtualCdromRemoteAtapiBackingInfo != null && base.Equals(virtualCdromRemoteAtapiBackingInfo));
        }

        public override bool Equals(object virtualCdromRemoteAtapiBackingInfo)
        {
            return Equals(virtualCdromRemoteAtapiBackingInfo as VirtualCdromRemoteAtapiBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromRemoteAtapiBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualCdromRemoteAtapiBackingOption>
    {
        public bool Equals(VirtualCdromRemoteAtapiBackingOption virtualCdromRemoteAtapiBackingOption)
        {
            return (virtualCdromRemoteAtapiBackingOption != null && base.Equals(virtualCdromRemoteAtapiBackingOption));
        }

        public override bool Equals(object virtualCdromRemoteAtapiBackingOption)
        {
            return Equals(virtualCdromRemoteAtapiBackingOption as VirtualCdromRemoteAtapiBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualCdromRemotePassthroughBackingInfo : VirtualDeviceRemoteDeviceBackingInfo, IEquatable<VirtualCdromRemotePassthroughBackingInfo>
    {
        public bool Exclusive { get; set; }

        public bool Equals(VirtualCdromRemotePassthroughBackingInfo virtualCdromRemotePassthroughBackingInfo)
        {
            return (virtualCdromRemotePassthroughBackingInfo != null && this.Exclusive == virtualCdromRemotePassthroughBackingInfo.Exclusive);
        }

        public override bool Equals(object virtualCdromRemotePassthroughBackingInfo)
        {
            return Equals(virtualCdromRemotePassthroughBackingInfo as VirtualCdromRemotePassthroughBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Exclusive).GetHashCode();
        }
    }

    public class VirtualCdromRemotePassthroughBackingOption : VirtualDeviceRemoteDeviceBackingOption, IEquatable<VirtualCdromRemotePassthroughBackingOption>
    {
        public BoolOption Exclusive { get; set; }

        public bool Equals(VirtualCdromRemotePassthroughBackingOption virtualCdromRemotePassthroughBackingOption)
        {
            return (virtualCdromRemotePassthroughBackingOption != null && ((this.Exclusive == null && virtualCdromRemotePassthroughBackingOption.Exclusive == null) || (this.Exclusive != null && this.Exclusive.Equals(virtualCdromRemotePassthroughBackingOption.Exclusive))));
        }

        public override bool Equals(object virtualCdromRemotePassthroughBackingOption)
        {
            return Equals(virtualCdromRemotePassthroughBackingOption as VirtualCdromRemotePassthroughBackingOption);
        }

        public override int GetHashCode()
        {
            return (Exclusive).GetHashCode();
        }
    }

    public class VirtualController : VirtualDevice, IEquatable<VirtualController>
    {
        public int BusNumber { get; set; }

        public int[] Device { get; set; }

        public bool Equals(VirtualController virtualController)
        {
            return (virtualController != null && this.BusNumber == virtualController.BusNumber && ((this.Device == null && virtualController.Device == null) || (this.Device != null && virtualController.Device != null && Enumerable.SequenceEqual(this.Device, virtualController.Device))));
        }

        public override bool Equals(object virtualController)
        {
            return Equals(virtualController as VirtualController);
        }

        public override int GetHashCode()
        {
            return (BusNumber + "_" + Device).GetHashCode();
        }
    }

    public class VirtualControllerOption : VirtualDeviceOption, IEquatable<VirtualControllerOption>
    {
        public IntOption Devices { get; set; }

        public string[] SupportedDevice { get; set; }

        public bool Equals(VirtualControllerOption virtualControllerOption)
        {
            return (virtualControllerOption != null && ((this.Devices == null && virtualControllerOption.Devices == null) || (this.Devices != null && this.Devices.Equals(virtualControllerOption.Devices))) && ((this.SupportedDevice == null && virtualControllerOption.SupportedDevice == null) || (this.SupportedDevice != null && virtualControllerOption.SupportedDevice != null && Enumerable.SequenceEqual(this.SupportedDevice, virtualControllerOption.SupportedDevice))));
        }

        public override bool Equals(object virtualControllerOption)
        {
            return Equals(virtualControllerOption as VirtualControllerOption);
        }

        public override int GetHashCode()
        {
            return (Devices + "_" + SupportedDevice).GetHashCode();
        }
    }

    public class VirtualDevice : DynamicData, IEquatable<VirtualDevice>
    {
        public int Key { get; set; }

        public Description DeviceInfo { get; set; }

        public VirtualDeviceBackingInfo Backing { get; set; }

        public VirtualDeviceConnectInfo Connectable { get; set; }

        public VirtualDeviceBusSlotInfo SlotInfo { get; set; }

        public int? ControllerKey { get; set; }

        public int? UnitNumber { get; set; }

        public bool Equals(VirtualDevice virtualDevice)
        {
            return (virtualDevice != null && this.Key == virtualDevice.Key && ((this.DeviceInfo == null && virtualDevice.DeviceInfo == null) || (this.DeviceInfo != null && this.DeviceInfo.Equals(virtualDevice.DeviceInfo))) && ((this.Backing == null && virtualDevice.Backing == null) || (this.Backing != null && this.Backing.Equals(virtualDevice.Backing))) && ((this.Connectable == null && virtualDevice.Connectable == null) || (this.Connectable != null && this.Connectable.Equals(virtualDevice.Connectable))) && ((this.SlotInfo == null && virtualDevice.SlotInfo == null) || (this.SlotInfo != null && this.SlotInfo.Equals(virtualDevice.SlotInfo))) && ((this.ControllerKey == null && virtualDevice.ControllerKey == null) || (this.ControllerKey != null && this.ControllerKey.Equals(virtualDevice.ControllerKey))) && ((this.UnitNumber == null && virtualDevice.UnitNumber == null) || (this.UnitNumber != null && this.UnitNumber.Equals(virtualDevice.UnitNumber))));
        }

        public override bool Equals(object virtualDevice)
        {
            return Equals(virtualDevice as VirtualDevice);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DeviceInfo + "_" + Backing + "_" + Connectable + "_" + SlotInfo + "_" + ControllerKey + "_" + UnitNumber).GetHashCode();
        }
    }

    public class VirtualDeviceBackingInfo : DynamicData, IEquatable<VirtualDeviceBackingInfo>
    {
        public bool Equals(VirtualDeviceBackingInfo virtualDeviceBackingInfo)
        {
            return (virtualDeviceBackingInfo != null && base.Equals(virtualDeviceBackingInfo));
        }

        public override bool Equals(object virtualDeviceBackingInfo)
        {
            return Equals(virtualDeviceBackingInfo as VirtualDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDeviceBackingOption : DynamicData, IEquatable<VirtualDeviceBackingOption>
    {
        public string Type { get; set; }

        public bool Equals(VirtualDeviceBackingOption virtualDeviceBackingOption)
        {
            return (virtualDeviceBackingOption != null && this.Type == virtualDeviceBackingOption.Type);
        }

        public override bool Equals(object virtualDeviceBackingOption)
        {
            return Equals(virtualDeviceBackingOption as VirtualDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return (Type).GetHashCode();
        }
    }

    public class VirtualDeviceBusSlotInfo : DynamicData, IEquatable<VirtualDeviceBusSlotInfo>
    {
        public bool Equals(VirtualDeviceBusSlotInfo virtualDeviceBusSlotInfo)
        {
            return (virtualDeviceBusSlotInfo != null && base.Equals(virtualDeviceBusSlotInfo));
        }

        public override bool Equals(object virtualDeviceBusSlotInfo)
        {
            return Equals(virtualDeviceBusSlotInfo as VirtualDeviceBusSlotInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDeviceBusSlotOption : DynamicData, IEquatable<VirtualDeviceBusSlotOption>
    {
        public string Type { get; set; }

        public bool Equals(VirtualDeviceBusSlotOption virtualDeviceBusSlotOption)
        {
            return (virtualDeviceBusSlotOption != null && this.Type == virtualDeviceBusSlotOption.Type);
        }

        public override bool Equals(object virtualDeviceBusSlotOption)
        {
            return Equals(virtualDeviceBusSlotOption as VirtualDeviceBusSlotOption);
        }

        public override int GetHashCode()
        {
            return (Type).GetHashCode();
        }
    }

    public class VirtualDeviceConfigSpec : DynamicData, IEquatable<VirtualDeviceConfigSpec>
    {
        public VirtualDeviceConfigSpecOperation? Operation { get; set; }

        public VirtualDeviceConfigSpecFileOperation? FileOperation { get; set; }

        public VirtualDevice Device { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public VirtualDeviceConfigSpecBackingSpec Backing { get; set; }

        public bool Equals(VirtualDeviceConfigSpec virtualDeviceConfigSpec)
        {
            return (virtualDeviceConfigSpec != null && ((this.Operation == null && virtualDeviceConfigSpec.Operation == null) || (this.Operation != null && this.Operation.Equals(virtualDeviceConfigSpec.Operation))) && ((this.FileOperation == null && virtualDeviceConfigSpec.FileOperation == null) || (this.FileOperation != null && this.FileOperation.Equals(virtualDeviceConfigSpec.FileOperation))) && ((this.Device == null && virtualDeviceConfigSpec.Device == null) || (this.Device != null && this.Device.Equals(virtualDeviceConfigSpec.Device))) && ((this.Profile == null && virtualDeviceConfigSpec.Profile == null) || (this.Profile != null && virtualDeviceConfigSpec.Profile != null && Enumerable.SequenceEqual(this.Profile, virtualDeviceConfigSpec.Profile))) && ((this.Backing == null && virtualDeviceConfigSpec.Backing == null) || (this.Backing != null && this.Backing.Equals(virtualDeviceConfigSpec.Backing))));
        }

        public override bool Equals(object virtualDeviceConfigSpec)
        {
            return Equals(virtualDeviceConfigSpec as VirtualDeviceConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + FileOperation + "_" + Device + "_" + Profile + "_" + Backing).GetHashCode();
        }
    }

    public class VirtualDeviceConfigSpecBackingSpec : DynamicData, IEquatable<VirtualDeviceConfigSpecBackingSpec>
    {
        public VirtualDeviceConfigSpecBackingSpec Parent { get; set; }

        public CryptoSpec Crypto { get; set; }

        public bool Equals(VirtualDeviceConfigSpecBackingSpec virtualDeviceConfigSpecBackingSpec)
        {
            return (virtualDeviceConfigSpecBackingSpec != null && ((this.Parent == null && virtualDeviceConfigSpecBackingSpec.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDeviceConfigSpecBackingSpec.Parent))) && ((this.Crypto == null && virtualDeviceConfigSpecBackingSpec.Crypto == null) || (this.Crypto != null && this.Crypto.Equals(virtualDeviceConfigSpecBackingSpec.Crypto))));
        }

        public override bool Equals(object virtualDeviceConfigSpecBackingSpec)
        {
            return Equals(virtualDeviceConfigSpecBackingSpec as VirtualDeviceConfigSpecBackingSpec);
        }

        public override int GetHashCode()
        {
            return (Parent + "_" + Crypto).GetHashCode();
        }
    }

    public class VirtualDeviceConnectInfo : DynamicData, IEquatable<VirtualDeviceConnectInfo>
    {
        public string MigrateConnect { get; set; }

        public bool StartConnected { get; set; }

        public bool AllowGuestControl { get; set; }

        public bool Connected { get; set; }

        public string Status { get; set; }

        public bool Equals(VirtualDeviceConnectInfo virtualDeviceConnectInfo)
        {
            return (virtualDeviceConnectInfo != null && this.MigrateConnect == virtualDeviceConnectInfo.MigrateConnect && this.StartConnected == virtualDeviceConnectInfo.StartConnected && this.AllowGuestControl == virtualDeviceConnectInfo.AllowGuestControl && this.Connected == virtualDeviceConnectInfo.Connected && this.Status == virtualDeviceConnectInfo.Status);
        }

        public override bool Equals(object virtualDeviceConnectInfo)
        {
            return Equals(virtualDeviceConnectInfo as VirtualDeviceConnectInfo);
        }

        public override int GetHashCode()
        {
            return (MigrateConnect + "_" + StartConnected + "_" + AllowGuestControl + "_" + Connected + "_" + Status).GetHashCode();
        }
    }

    public class VirtualDeviceConnectOption : DynamicData, IEquatable<VirtualDeviceConnectOption>
    {
        public BoolOption StartConnected { get; set; }

        public BoolOption AllowGuestControl { get; set; }

        public bool Equals(VirtualDeviceConnectOption virtualDeviceConnectOption)
        {
            return (virtualDeviceConnectOption != null && ((this.StartConnected == null && virtualDeviceConnectOption.StartConnected == null) || (this.StartConnected != null && this.StartConnected.Equals(virtualDeviceConnectOption.StartConnected))) && ((this.AllowGuestControl == null && virtualDeviceConnectOption.AllowGuestControl == null) || (this.AllowGuestControl != null && this.AllowGuestControl.Equals(virtualDeviceConnectOption.AllowGuestControl))));
        }

        public override bool Equals(object virtualDeviceConnectOption)
        {
            return Equals(virtualDeviceConnectOption as VirtualDeviceConnectOption);
        }

        public override int GetHashCode()
        {
            return (StartConnected + "_" + AllowGuestControl).GetHashCode();
        }
    }

    public class VirtualDeviceDeviceBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualDeviceDeviceBackingInfo>
    {
        public string DeviceName { get; set; }

        public bool? UseAutoDetect { get; set; }

        public bool Equals(VirtualDeviceDeviceBackingInfo virtualDeviceDeviceBackingInfo)
        {
            return (virtualDeviceDeviceBackingInfo != null && this.DeviceName == virtualDeviceDeviceBackingInfo.DeviceName && ((this.UseAutoDetect == null && virtualDeviceDeviceBackingInfo.UseAutoDetect == null) || (this.UseAutoDetect != null && this.UseAutoDetect.Equals(virtualDeviceDeviceBackingInfo.UseAutoDetect))));
        }

        public override bool Equals(object virtualDeviceDeviceBackingInfo)
        {
            return Equals(virtualDeviceDeviceBackingInfo as VirtualDeviceDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + UseAutoDetect).GetHashCode();
        }
    }

    public class VirtualDeviceDeviceBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualDeviceDeviceBackingOption>
    {
        public BoolOption AutoDetectAvailable { get; set; }

        public bool Equals(VirtualDeviceDeviceBackingOption virtualDeviceDeviceBackingOption)
        {
            return (virtualDeviceDeviceBackingOption != null && ((this.AutoDetectAvailable == null && virtualDeviceDeviceBackingOption.AutoDetectAvailable == null) || (this.AutoDetectAvailable != null && this.AutoDetectAvailable.Equals(virtualDeviceDeviceBackingOption.AutoDetectAvailable))));
        }

        public override bool Equals(object virtualDeviceDeviceBackingOption)
        {
            return Equals(virtualDeviceDeviceBackingOption as VirtualDeviceDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return (AutoDetectAvailable).GetHashCode();
        }
    }

    public class VirtualDeviceFileBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualDeviceFileBackingInfo>
    {
        public string FileName { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public string BackingObjectId { get; set; }

        public VirtualDeviceFileBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDeviceFileBackingInfo virtualDeviceFileBackingInfo)
        {
            return (virtualDeviceFileBackingInfo != null && this.FileName == virtualDeviceFileBackingInfo.FileName && ((this.Datastore == null && virtualDeviceFileBackingInfo.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualDeviceFileBackingInfo.Datastore))) && this.BackingObjectId == virtualDeviceFileBackingInfo.BackingObjectId && ((this.LinkedView == null && virtualDeviceFileBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDeviceFileBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDeviceFileBackingInfo)
        {
            return Equals(virtualDeviceFileBackingInfo as VirtualDeviceFileBackingInfo);
        }

        public override int GetHashCode()
        {
            return (FileName + "_" + Datastore + "_" + BackingObjectId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDeviceFileBackingInfo_LinkedView : IEquatable<VirtualDeviceFileBackingInfo_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(VirtualDeviceFileBackingInfo_LinkedView virtualDeviceFileBackingInfo_LinkedView)
        {
            return (virtualDeviceFileBackingInfo_LinkedView != null && ((this.Datastore == null && virtualDeviceFileBackingInfo_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualDeviceFileBackingInfo_LinkedView.Datastore))));
        }

        public override bool Equals(object virtualDeviceFileBackingInfo_LinkedView)
        {
            return Equals(virtualDeviceFileBackingInfo_LinkedView as VirtualDeviceFileBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VirtualDeviceFileBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualDeviceFileBackingOption>
    {
        public ChoiceOption FileNameExtensions { get; set; }

        public bool Equals(VirtualDeviceFileBackingOption virtualDeviceFileBackingOption)
        {
            return (virtualDeviceFileBackingOption != null && ((this.FileNameExtensions == null && virtualDeviceFileBackingOption.FileNameExtensions == null) || (this.FileNameExtensions != null && this.FileNameExtensions.Equals(virtualDeviceFileBackingOption.FileNameExtensions))));
        }

        public override bool Equals(object virtualDeviceFileBackingOption)
        {
            return Equals(virtualDeviceFileBackingOption as VirtualDeviceFileBackingOption);
        }

        public override int GetHashCode()
        {
            return (FileNameExtensions).GetHashCode();
        }
    }

    public class VirtualDeviceOption : DynamicData, IEquatable<VirtualDeviceOption>
    {
        public string Type { get; set; }

        public VirtualDeviceConnectOption ConnectOption { get; set; }

        public VirtualDeviceBusSlotOption BusSlotOption { get; set; }

        public string ControllerType { get; set; }

        public BoolOption AutoAssignController { get; set; }

        public VirtualDeviceBackingOption[] BackingOption { get; set; }

        public int? DefaultBackingOptionIndex { get; set; }

        public string[] LicensingLimit { get; set; }

        public bool Deprecated { get; set; }

        public bool PlugAndPlay { get; set; }

        public bool HotRemoveSupported { get; set; }

        public bool Equals(VirtualDeviceOption virtualDeviceOption)
        {
            return (virtualDeviceOption != null && this.Type == virtualDeviceOption.Type && ((this.ConnectOption == null && virtualDeviceOption.ConnectOption == null) || (this.ConnectOption != null && this.ConnectOption.Equals(virtualDeviceOption.ConnectOption))) && ((this.BusSlotOption == null && virtualDeviceOption.BusSlotOption == null) || (this.BusSlotOption != null && this.BusSlotOption.Equals(virtualDeviceOption.BusSlotOption))) && this.ControllerType == virtualDeviceOption.ControllerType && ((this.AutoAssignController == null && virtualDeviceOption.AutoAssignController == null) || (this.AutoAssignController != null && this.AutoAssignController.Equals(virtualDeviceOption.AutoAssignController))) && ((this.BackingOption == null && virtualDeviceOption.BackingOption == null) || (this.BackingOption != null && virtualDeviceOption.BackingOption != null && Enumerable.SequenceEqual(this.BackingOption, virtualDeviceOption.BackingOption))) && ((this.DefaultBackingOptionIndex == null && virtualDeviceOption.DefaultBackingOptionIndex == null) || (this.DefaultBackingOptionIndex != null && this.DefaultBackingOptionIndex.Equals(virtualDeviceOption.DefaultBackingOptionIndex))) && ((this.LicensingLimit == null && virtualDeviceOption.LicensingLimit == null) || (this.LicensingLimit != null && virtualDeviceOption.LicensingLimit != null && Enumerable.SequenceEqual(this.LicensingLimit, virtualDeviceOption.LicensingLimit))) && this.Deprecated == virtualDeviceOption.Deprecated && this.PlugAndPlay == virtualDeviceOption.PlugAndPlay && this.HotRemoveSupported == virtualDeviceOption.HotRemoveSupported);
        }

        public override bool Equals(object virtualDeviceOption)
        {
            return Equals(virtualDeviceOption as VirtualDeviceOption);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + ConnectOption + "_" + BusSlotOption + "_" + ControllerType + "_" + AutoAssignController + "_" + BackingOption + "_" + DefaultBackingOptionIndex + "_" + LicensingLimit + "_" + Deprecated + "_" + PlugAndPlay + "_" + HotRemoveSupported).GetHashCode();
        }
    }

    public class VirtualDevicePciBusSlotInfo : VirtualDeviceBusSlotInfo, IEquatable<VirtualDevicePciBusSlotInfo>
    {
        public int PciSlotNumber { get; set; }

        public bool Equals(VirtualDevicePciBusSlotInfo virtualDevicePciBusSlotInfo)
        {
            return (virtualDevicePciBusSlotInfo != null && this.PciSlotNumber == virtualDevicePciBusSlotInfo.PciSlotNumber);
        }

        public override bool Equals(object virtualDevicePciBusSlotInfo)
        {
            return Equals(virtualDevicePciBusSlotInfo as VirtualDevicePciBusSlotInfo);
        }

        public override int GetHashCode()
        {
            return (PciSlotNumber).GetHashCode();
        }
    }

    public class VirtualDevicePipeBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualDevicePipeBackingInfo>
    {
        public string PipeName { get; set; }

        public bool Equals(VirtualDevicePipeBackingInfo virtualDevicePipeBackingInfo)
        {
            return (virtualDevicePipeBackingInfo != null && this.PipeName == virtualDevicePipeBackingInfo.PipeName);
        }

        public override bool Equals(object virtualDevicePipeBackingInfo)
        {
            return Equals(virtualDevicePipeBackingInfo as VirtualDevicePipeBackingInfo);
        }

        public override int GetHashCode()
        {
            return (PipeName).GetHashCode();
        }
    }

    public class VirtualDevicePipeBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualDevicePipeBackingOption>
    {
        public bool Equals(VirtualDevicePipeBackingOption virtualDevicePipeBackingOption)
        {
            return (virtualDevicePipeBackingOption != null && base.Equals(virtualDevicePipeBackingOption));
        }

        public override bool Equals(object virtualDevicePipeBackingOption)
        {
            return Equals(virtualDevicePipeBackingOption as VirtualDevicePipeBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDeviceRemoteDeviceBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualDeviceRemoteDeviceBackingInfo>
    {
        public string DeviceName { get; set; }

        public bool? UseAutoDetect { get; set; }

        public bool Equals(VirtualDeviceRemoteDeviceBackingInfo virtualDeviceRemoteDeviceBackingInfo)
        {
            return (virtualDeviceRemoteDeviceBackingInfo != null && this.DeviceName == virtualDeviceRemoteDeviceBackingInfo.DeviceName && ((this.UseAutoDetect == null && virtualDeviceRemoteDeviceBackingInfo.UseAutoDetect == null) || (this.UseAutoDetect != null && this.UseAutoDetect.Equals(virtualDeviceRemoteDeviceBackingInfo.UseAutoDetect))));
        }

        public override bool Equals(object virtualDeviceRemoteDeviceBackingInfo)
        {
            return Equals(virtualDeviceRemoteDeviceBackingInfo as VirtualDeviceRemoteDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + UseAutoDetect).GetHashCode();
        }
    }

    public class VirtualDeviceRemoteDeviceBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualDeviceRemoteDeviceBackingOption>
    {
        public BoolOption AutoDetectAvailable { get; set; }

        public bool Equals(VirtualDeviceRemoteDeviceBackingOption virtualDeviceRemoteDeviceBackingOption)
        {
            return (virtualDeviceRemoteDeviceBackingOption != null && ((this.AutoDetectAvailable == null && virtualDeviceRemoteDeviceBackingOption.AutoDetectAvailable == null) || (this.AutoDetectAvailable != null && this.AutoDetectAvailable.Equals(virtualDeviceRemoteDeviceBackingOption.AutoDetectAvailable))));
        }

        public override bool Equals(object virtualDeviceRemoteDeviceBackingOption)
        {
            return Equals(virtualDeviceRemoteDeviceBackingOption as VirtualDeviceRemoteDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return (AutoDetectAvailable).GetHashCode();
        }
    }

    public class VirtualDeviceURIBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualDeviceURIBackingInfo>
    {
        public string ServiceURI { get; set; }

        public string Direction { get; set; }

        public string ProxyURI { get; set; }

        public bool Equals(VirtualDeviceURIBackingInfo virtualDeviceURIBackingInfo)
        {
            return (virtualDeviceURIBackingInfo != null && this.ServiceURI == virtualDeviceURIBackingInfo.ServiceURI && this.Direction == virtualDeviceURIBackingInfo.Direction && this.ProxyURI == virtualDeviceURIBackingInfo.ProxyURI);
        }

        public override bool Equals(object virtualDeviceURIBackingInfo)
        {
            return Equals(virtualDeviceURIBackingInfo as VirtualDeviceURIBackingInfo);
        }

        public override int GetHashCode()
        {
            return (ServiceURI + "_" + Direction + "_" + ProxyURI).GetHashCode();
        }
    }

    public class VirtualDeviceURIBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualDeviceURIBackingOption>
    {
        public ChoiceOption Directions { get; set; }

        public bool Equals(VirtualDeviceURIBackingOption virtualDeviceURIBackingOption)
        {
            return (virtualDeviceURIBackingOption != null && ((this.Directions == null && virtualDeviceURIBackingOption.Directions == null) || (this.Directions != null && this.Directions.Equals(virtualDeviceURIBackingOption.Directions))));
        }

        public override bool Equals(object virtualDeviceURIBackingOption)
        {
            return Equals(virtualDeviceURIBackingOption as VirtualDeviceURIBackingOption);
        }

        public override int GetHashCode()
        {
            return (Directions).GetHashCode();
        }
    }

    public class VirtualDisk : VirtualDevice, IEquatable<VirtualDisk>
    {
        public long CapacityInKB { get; set; }

        public long? CapacityInBytes { get; set; }

        public SharesInfo Shares { get; set; }

        public StorageIOAllocationInfo StorageIOAllocation { get; set; }

        public string DiskObjectId { get; set; }

        public VirtualDiskVFlashCacheConfigInfo VFlashCacheConfigInfo { get; set; }

        public string[] Iofilter { get; set; }

        public ID VDiskId { get; set; }

        public bool? NativeUnmanagedLinkedClone { get; set; }

        public bool Equals(VirtualDisk virtualDisk)
        {
            return (virtualDisk != null && this.CapacityInKB == virtualDisk.CapacityInKB && ((this.CapacityInBytes == null && virtualDisk.CapacityInBytes == null) || (this.CapacityInBytes != null && this.CapacityInBytes.Equals(virtualDisk.CapacityInBytes))) && ((this.Shares == null && virtualDisk.Shares == null) || (this.Shares != null && this.Shares.Equals(virtualDisk.Shares))) && ((this.StorageIOAllocation == null && virtualDisk.StorageIOAllocation == null) || (this.StorageIOAllocation != null && this.StorageIOAllocation.Equals(virtualDisk.StorageIOAllocation))) && this.DiskObjectId == virtualDisk.DiskObjectId && ((this.VFlashCacheConfigInfo == null && virtualDisk.VFlashCacheConfigInfo == null) || (this.VFlashCacheConfigInfo != null && this.VFlashCacheConfigInfo.Equals(virtualDisk.VFlashCacheConfigInfo))) && ((this.Iofilter == null && virtualDisk.Iofilter == null) || (this.Iofilter != null && virtualDisk.Iofilter != null && Enumerable.SequenceEqual(this.Iofilter, virtualDisk.Iofilter))) && ((this.VDiskId == null && virtualDisk.VDiskId == null) || (this.VDiskId != null && this.VDiskId.Equals(virtualDisk.VDiskId))) && ((this.NativeUnmanagedLinkedClone == null && virtualDisk.NativeUnmanagedLinkedClone == null) || (this.NativeUnmanagedLinkedClone != null && this.NativeUnmanagedLinkedClone.Equals(virtualDisk.NativeUnmanagedLinkedClone))));
        }

        public override bool Equals(object virtualDisk)
        {
            return Equals(virtualDisk as VirtualDisk);
        }

        public override int GetHashCode()
        {
            return (CapacityInKB + "_" + CapacityInBytes + "_" + Shares + "_" + StorageIOAllocation + "_" + DiskObjectId + "_" + VFlashCacheConfigInfo + "_" + Iofilter + "_" + VDiskId + "_" + NativeUnmanagedLinkedClone).GetHashCode();
        }
    }

    public class VirtualDiskAntiAffinityRuleSpec : ClusterRuleInfo, IEquatable<VirtualDiskAntiAffinityRuleSpec>
    {
        public int[] DiskId { get; set; }

        public bool Equals(VirtualDiskAntiAffinityRuleSpec virtualDiskAntiAffinityRuleSpec)
        {
            return (virtualDiskAntiAffinityRuleSpec != null && ((this.DiskId == null && virtualDiskAntiAffinityRuleSpec.DiskId == null) || (this.DiskId != null && virtualDiskAntiAffinityRuleSpec.DiskId != null && Enumerable.SequenceEqual(this.DiskId, virtualDiskAntiAffinityRuleSpec.DiskId))));
        }

        public override bool Equals(object virtualDiskAntiAffinityRuleSpec)
        {
            return Equals(virtualDiskAntiAffinityRuleSpec as VirtualDiskAntiAffinityRuleSpec);
        }

        public override int GetHashCode()
        {
            return (DiskId).GetHashCode();
        }
    }

    public class VirtualDiskBlocksNotFullyProvisioned : DeviceBackingNotSupported, IEquatable<VirtualDiskBlocksNotFullyProvisioned>
    {
        public bool Equals(VirtualDiskBlocksNotFullyProvisioned virtualDiskBlocksNotFullyProvisioned)
        {
            return (virtualDiskBlocksNotFullyProvisioned != null && base.Equals(virtualDiskBlocksNotFullyProvisioned));
        }

        public override bool Equals(object virtualDiskBlocksNotFullyProvisioned)
        {
            return Equals(virtualDiskBlocksNotFullyProvisioned as VirtualDiskBlocksNotFullyProvisioned);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskConfigSpec : VirtualDeviceConfigSpec, IEquatable<VirtualDiskConfigSpec>
    {
        public string DiskMoveType { get; set; }

        public bool? MigrateCache { get; set; }

        public bool Equals(VirtualDiskConfigSpec virtualDiskConfigSpec)
        {
            return (virtualDiskConfigSpec != null && this.DiskMoveType == virtualDiskConfigSpec.DiskMoveType && ((this.MigrateCache == null && virtualDiskConfigSpec.MigrateCache == null) || (this.MigrateCache != null && this.MigrateCache.Equals(virtualDiskConfigSpec.MigrateCache))));
        }

        public override bool Equals(object virtualDiskConfigSpec)
        {
            return Equals(virtualDiskConfigSpec as VirtualDiskConfigSpec);
        }

        public override int GetHashCode()
        {
            return (DiskMoveType + "_" + MigrateCache).GetHashCode();
        }
    }

    public class VirtualDiskDeltaDiskFormatsSupported : DynamicData, IEquatable<VirtualDiskDeltaDiskFormatsSupported>
    {
        public string DatastoreType { get; set; }

        public ChoiceOption DeltaDiskFormat { get; set; }

        public bool Equals(VirtualDiskDeltaDiskFormatsSupported virtualDiskDeltaDiskFormatsSupported)
        {
            return (virtualDiskDeltaDiskFormatsSupported != null && this.DatastoreType == virtualDiskDeltaDiskFormatsSupported.DatastoreType && ((this.DeltaDiskFormat == null && virtualDiskDeltaDiskFormatsSupported.DeltaDiskFormat == null) || (this.DeltaDiskFormat != null && this.DeltaDiskFormat.Equals(virtualDiskDeltaDiskFormatsSupported.DeltaDiskFormat))));
        }

        public override bool Equals(object virtualDiskDeltaDiskFormatsSupported)
        {
            return Equals(virtualDiskDeltaDiskFormatsSupported as VirtualDiskDeltaDiskFormatsSupported);
        }

        public override int GetHashCode()
        {
            return (DatastoreType + "_" + DeltaDiskFormat).GetHashCode();
        }
    }

    public class VirtualDiskFlatVer1BackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskFlatVer1BackingInfo>
    {
        public string DiskMode { get; set; }

        public bool? Split { get; set; }

        public bool? WriteThrough { get; set; }

        public string ContentId { get; set; }

        public VirtualDiskFlatVer1BackingInfo Parent { get; set; }

        public new VirtualDiskFlatVer1BackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskFlatVer1BackingInfo virtualDiskFlatVer1BackingInfo)
        {
            return (virtualDiskFlatVer1BackingInfo != null && this.DiskMode == virtualDiskFlatVer1BackingInfo.DiskMode && ((this.Split == null && virtualDiskFlatVer1BackingInfo.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskFlatVer1BackingInfo.Split))) && ((this.WriteThrough == null && virtualDiskFlatVer1BackingInfo.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskFlatVer1BackingInfo.WriteThrough))) && this.ContentId == virtualDiskFlatVer1BackingInfo.ContentId && ((this.Parent == null && virtualDiskFlatVer1BackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskFlatVer1BackingInfo.Parent))) && ((this.LinkedView == null && virtualDiskFlatVer1BackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskFlatVer1BackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskFlatVer1BackingInfo)
        {
            return Equals(virtualDiskFlatVer1BackingInfo as VirtualDiskFlatVer1BackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + ContentId + "_" + Parent + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskFlatVer1BackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskFlatVer1BackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskFlatVer1BackingInfo_LinkedView virtualDiskFlatVer1BackingInfo_LinkedView)
        {
            return (virtualDiskFlatVer1BackingInfo_LinkedView != null && base.Equals(virtualDiskFlatVer1BackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskFlatVer1BackingInfo_LinkedView)
        {
            return Equals(virtualDiskFlatVer1BackingInfo_LinkedView as VirtualDiskFlatVer1BackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskFlatVer1BackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskFlatVer1BackingOption>
    {
        public ChoiceOption DiskMode { get; set; }

        public BoolOption Split { get; set; }

        public BoolOption WriteThrough { get; set; }

        public bool Growable { get; set; }

        public bool Equals(VirtualDiskFlatVer1BackingOption virtualDiskFlatVer1BackingOption)
        {
            return (virtualDiskFlatVer1BackingOption != null && ((this.DiskMode == null && virtualDiskFlatVer1BackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskFlatVer1BackingOption.DiskMode))) && ((this.Split == null && virtualDiskFlatVer1BackingOption.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskFlatVer1BackingOption.Split))) && ((this.WriteThrough == null && virtualDiskFlatVer1BackingOption.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskFlatVer1BackingOption.WriteThrough))) && this.Growable == virtualDiskFlatVer1BackingOption.Growable);
        }

        public override bool Equals(object virtualDiskFlatVer1BackingOption)
        {
            return Equals(virtualDiskFlatVer1BackingOption as VirtualDiskFlatVer1BackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + Growable).GetHashCode();
        }
    }

    public class VirtualDiskFlatVer2BackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskFlatVer2BackingInfo>
    {
        public string DiskMode { get; set; }

        public bool? Split { get; set; }

        public bool? WriteThrough { get; set; }

        public bool? ThinProvisioned { get; set; }

        public bool? EagerlyScrub { get; set; }

        public string Uuid { get; set; }

        public string ContentId { get; set; }

        public string ChangeId { get; set; }

        public VirtualDiskFlatVer2BackingInfo Parent { get; set; }

        public string DeltaDiskFormat { get; set; }

        public bool? DigestEnabled { get; set; }

        public int? DeltaGrainSize { get; set; }

        public string DeltaDiskFormatVariant { get; set; }

        public string Sharing { get; set; }

        public CryptoKeyId KeyId { get; set; }

        public new VirtualDiskFlatVer2BackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskFlatVer2BackingInfo virtualDiskFlatVer2BackingInfo)
        {
            return (virtualDiskFlatVer2BackingInfo != null && this.DiskMode == virtualDiskFlatVer2BackingInfo.DiskMode && ((this.Split == null && virtualDiskFlatVer2BackingInfo.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskFlatVer2BackingInfo.Split))) && ((this.WriteThrough == null && virtualDiskFlatVer2BackingInfo.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskFlatVer2BackingInfo.WriteThrough))) && ((this.ThinProvisioned == null && virtualDiskFlatVer2BackingInfo.ThinProvisioned == null) || (this.ThinProvisioned != null && this.ThinProvisioned.Equals(virtualDiskFlatVer2BackingInfo.ThinProvisioned))) && ((this.EagerlyScrub == null && virtualDiskFlatVer2BackingInfo.EagerlyScrub == null) || (this.EagerlyScrub != null && this.EagerlyScrub.Equals(virtualDiskFlatVer2BackingInfo.EagerlyScrub))) && this.Uuid == virtualDiskFlatVer2BackingInfo.Uuid && this.ContentId == virtualDiskFlatVer2BackingInfo.ContentId && this.ChangeId == virtualDiskFlatVer2BackingInfo.ChangeId && ((this.Parent == null && virtualDiskFlatVer2BackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskFlatVer2BackingInfo.Parent))) && this.DeltaDiskFormat == virtualDiskFlatVer2BackingInfo.DeltaDiskFormat && ((this.DigestEnabled == null && virtualDiskFlatVer2BackingInfo.DigestEnabled == null) || (this.DigestEnabled != null && this.DigestEnabled.Equals(virtualDiskFlatVer2BackingInfo.DigestEnabled))) && ((this.DeltaGrainSize == null && virtualDiskFlatVer2BackingInfo.DeltaGrainSize == null) || (this.DeltaGrainSize != null && this.DeltaGrainSize.Equals(virtualDiskFlatVer2BackingInfo.DeltaGrainSize))) && this.DeltaDiskFormatVariant == virtualDiskFlatVer2BackingInfo.DeltaDiskFormatVariant && this.Sharing == virtualDiskFlatVer2BackingInfo.Sharing && ((this.KeyId == null && virtualDiskFlatVer2BackingInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(virtualDiskFlatVer2BackingInfo.KeyId))) && ((this.LinkedView == null && virtualDiskFlatVer2BackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskFlatVer2BackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskFlatVer2BackingInfo)
        {
            return Equals(virtualDiskFlatVer2BackingInfo as VirtualDiskFlatVer2BackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + ThinProvisioned + "_" + EagerlyScrub + "_" + Uuid + "_" + ContentId + "_" + ChangeId + "_" + Parent + "_" + DeltaDiskFormat + "_" + DigestEnabled + "_" + DeltaGrainSize + "_" + DeltaDiskFormatVariant + "_" + Sharing + "_" + KeyId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskFlatVer2BackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskFlatVer2BackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskFlatVer2BackingInfo_LinkedView virtualDiskFlatVer2BackingInfo_LinkedView)
        {
            return (virtualDiskFlatVer2BackingInfo_LinkedView != null && base.Equals(virtualDiskFlatVer2BackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskFlatVer2BackingInfo_LinkedView)
        {
            return Equals(virtualDiskFlatVer2BackingInfo_LinkedView as VirtualDiskFlatVer2BackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskFlatVer2BackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskFlatVer2BackingOption>
    {
        public ChoiceOption DiskMode { get; set; }

        public BoolOption Split { get; set; }

        public BoolOption WriteThrough { get; set; }

        public bool Growable { get; set; }

        public bool HotGrowable { get; set; }

        public bool Uuid { get; set; }

        public BoolOption ThinProvisioned { get; set; }

        public BoolOption EagerlyScrub { get; set; }

        public ChoiceOption DeltaDiskFormat { get; set; }

        public VirtualDiskDeltaDiskFormatsSupported[] DeltaDiskFormatsSupported { get; set; }

        public bool Equals(VirtualDiskFlatVer2BackingOption virtualDiskFlatVer2BackingOption)
        {
            return (virtualDiskFlatVer2BackingOption != null && ((this.DiskMode == null && virtualDiskFlatVer2BackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskFlatVer2BackingOption.DiskMode))) && ((this.Split == null && virtualDiskFlatVer2BackingOption.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskFlatVer2BackingOption.Split))) && ((this.WriteThrough == null && virtualDiskFlatVer2BackingOption.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskFlatVer2BackingOption.WriteThrough))) && this.Growable == virtualDiskFlatVer2BackingOption.Growable && this.HotGrowable == virtualDiskFlatVer2BackingOption.HotGrowable && this.Uuid == virtualDiskFlatVer2BackingOption.Uuid && ((this.ThinProvisioned == null && virtualDiskFlatVer2BackingOption.ThinProvisioned == null) || (this.ThinProvisioned != null && this.ThinProvisioned.Equals(virtualDiskFlatVer2BackingOption.ThinProvisioned))) && ((this.EagerlyScrub == null && virtualDiskFlatVer2BackingOption.EagerlyScrub == null) || (this.EagerlyScrub != null && this.EagerlyScrub.Equals(virtualDiskFlatVer2BackingOption.EagerlyScrub))) && ((this.DeltaDiskFormat == null && virtualDiskFlatVer2BackingOption.DeltaDiskFormat == null) || (this.DeltaDiskFormat != null && this.DeltaDiskFormat.Equals(virtualDiskFlatVer2BackingOption.DeltaDiskFormat))) && ((this.DeltaDiskFormatsSupported == null && virtualDiskFlatVer2BackingOption.DeltaDiskFormatsSupported == null) || (this.DeltaDiskFormatsSupported != null && virtualDiskFlatVer2BackingOption.DeltaDiskFormatsSupported != null && Enumerable.SequenceEqual(this.DeltaDiskFormatsSupported, virtualDiskFlatVer2BackingOption.DeltaDiskFormatsSupported))));
        }

        public override bool Equals(object virtualDiskFlatVer2BackingOption)
        {
            return Equals(virtualDiskFlatVer2BackingOption as VirtualDiskFlatVer2BackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + Growable + "_" + HotGrowable + "_" + Uuid + "_" + ThinProvisioned + "_" + EagerlyScrub + "_" + DeltaDiskFormat + "_" + DeltaDiskFormatsSupported).GetHashCode();
        }
    }

    public class VirtualDiskId : DynamicData, IEquatable<VirtualDiskId>
    {
        public ManagedObjectReference Vm { get; set; }

        public int DiskId { get; set; }

        public VirtualDiskId_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskId virtualDiskId)
        {
            return (virtualDiskId != null && ((this.Vm == null && virtualDiskId.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualDiskId.Vm))) && this.DiskId == virtualDiskId.DiskId && ((this.LinkedView == null && virtualDiskId.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskId.LinkedView))));
        }

        public override bool Equals(object virtualDiskId)
        {
            return Equals(virtualDiskId as VirtualDiskId);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + DiskId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskId_LinkedView : IEquatable<VirtualDiskId_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(VirtualDiskId_LinkedView virtualDiskId_LinkedView)
        {
            return (virtualDiskId_LinkedView != null && ((this.Vm == null && virtualDiskId_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualDiskId_LinkedView.Vm))));
        }

        public override bool Equals(object virtualDiskId_LinkedView)
        {
            return Equals(virtualDiskId_LinkedView as VirtualDiskId_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class VirtualDiskLocalPMemBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskLocalPMemBackingInfo>
    {
        public string DiskMode { get; set; }

        public string Uuid { get; set; }

        public string VolumeUUID { get; set; }

        public string ContentId { get; set; }

        public new VirtualDiskLocalPMemBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskLocalPMemBackingInfo virtualDiskLocalPMemBackingInfo)
        {
            return (virtualDiskLocalPMemBackingInfo != null && this.DiskMode == virtualDiskLocalPMemBackingInfo.DiskMode && this.Uuid == virtualDiskLocalPMemBackingInfo.Uuid && this.VolumeUUID == virtualDiskLocalPMemBackingInfo.VolumeUUID && this.ContentId == virtualDiskLocalPMemBackingInfo.ContentId && ((this.LinkedView == null && virtualDiskLocalPMemBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskLocalPMemBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskLocalPMemBackingInfo)
        {
            return Equals(virtualDiskLocalPMemBackingInfo as VirtualDiskLocalPMemBackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Uuid + "_" + VolumeUUID + "_" + ContentId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskLocalPMemBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskLocalPMemBackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskLocalPMemBackingInfo_LinkedView virtualDiskLocalPMemBackingInfo_LinkedView)
        {
            return (virtualDiskLocalPMemBackingInfo_LinkedView != null && base.Equals(virtualDiskLocalPMemBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskLocalPMemBackingInfo_LinkedView)
        {
            return Equals(virtualDiskLocalPMemBackingInfo_LinkedView as VirtualDiskLocalPMemBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskLocalPMemBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskLocalPMemBackingOption>
    {
        public ChoiceOption DiskMode { get; set; }

        public bool Growable { get; set; }

        public bool HotGrowable { get; set; }

        public bool Uuid { get; set; }

        public bool Equals(VirtualDiskLocalPMemBackingOption virtualDiskLocalPMemBackingOption)
        {
            return (virtualDiskLocalPMemBackingOption != null && ((this.DiskMode == null && virtualDiskLocalPMemBackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskLocalPMemBackingOption.DiskMode))) && this.Growable == virtualDiskLocalPMemBackingOption.Growable && this.HotGrowable == virtualDiskLocalPMemBackingOption.HotGrowable && this.Uuid == virtualDiskLocalPMemBackingOption.Uuid);
        }

        public override bool Equals(object virtualDiskLocalPMemBackingOption)
        {
            return Equals(virtualDiskLocalPMemBackingOption as VirtualDiskLocalPMemBackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Growable + "_" + HotGrowable + "_" + Uuid).GetHashCode();
        }
    }

    public class VirtualDiskManager : ViewBase, IEquatable<VirtualDiskManager>
    {
        public ManagedObjectReference CreateVirtualDisk_Task(string name, ManagedObjectReference datacenter, VirtualDiskSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public string CreateVirtualDisk(string name, ManagedObjectReference datacenter, VirtualDiskSpec spec)
        {
            return default(string);
        }

        public ManagedObjectReference DeleteVirtualDisk_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void DeleteVirtualDisk(string name, ManagedObjectReference datacenter)
        {
        }

        public ManagedObjectReference MoveVirtualDisk_Task(string sourceName, ManagedObjectReference sourceDatacenter, string destName, ManagedObjectReference destDatacenter, bool? force, VirtualMachineProfileSpec[] profile)
        {
            return default(ManagedObjectReference);
        }

        public string MoveVirtualDisk(string sourceName, ManagedObjectReference sourceDatacenter, string destName, ManagedObjectReference destDatacenter, bool? force, VirtualMachineProfileSpec[] profile)
        {
            return default(string);
        }

        public ManagedObjectReference CopyVirtualDisk_Task(string sourceName, ManagedObjectReference sourceDatacenter, string destName, ManagedObjectReference destDatacenter, VirtualDiskSpec destSpec, bool? force)
        {
            return default(ManagedObjectReference);
        }

        public string CopyVirtualDisk(string sourceName, ManagedObjectReference sourceDatacenter, string destName, ManagedObjectReference destDatacenter, VirtualDiskSpec destSpec, bool? force)
        {
            return default(string);
        }

        public ManagedObjectReference ExtendVirtualDisk_Task(string name, ManagedObjectReference datacenter, long newCapacityKb, bool? eagerZero)
        {
            return default(ManagedObjectReference);
        }

        public void ExtendVirtualDisk(string name, ManagedObjectReference datacenter, long newCapacityKb, bool? eagerZero)
        {
        }

        public int QueryVirtualDiskFragmentation(string name, ManagedObjectReference datacenter)
        {
            return default(int);
        }

        public ManagedObjectReference DefragmentVirtualDisk_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void DefragmentVirtualDisk(string name, ManagedObjectReference datacenter)
        {
        }

        public ManagedObjectReference ShrinkVirtualDisk_Task(string name, ManagedObjectReference datacenter, bool? copy)
        {
            return default(ManagedObjectReference);
        }

        public void ShrinkVirtualDisk(string name, ManagedObjectReference datacenter, bool? copy)
        {
        }

        public ManagedObjectReference InflateVirtualDisk_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void InflateVirtualDisk(string name, ManagedObjectReference datacenter)
        {
        }

        public ManagedObjectReference EagerZeroVirtualDisk_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void EagerZeroVirtualDisk(string name, ManagedObjectReference datacenter)
        {
        }

        public ManagedObjectReference ZeroFillVirtualDisk_Task(string name, ManagedObjectReference datacenter)
        {
            return default(ManagedObjectReference);
        }

        public void ZeroFillVirtualDisk(string name, ManagedObjectReference datacenter)
        {
        }

        public void SetVirtualDiskUuid(string name, ManagedObjectReference datacenter, string uuid)
        {
        }

        public string QueryVirtualDiskUuid(string name, ManagedObjectReference datacenter)
        {
            return default(string);
        }

        public HostDiskDimensionsChs QueryVirtualDiskGeometry(string name, ManagedObjectReference datacenter)
        {
            return default(HostDiskDimensionsChs);
        }

        public void ImportUnmanagedSnapshot(string vdisk, ManagedObjectReference datacenter, string vvolId)
        {
        }

        public void ReleaseManagedSnapshot(string vdisk, ManagedObjectReference datacenter)
        {
        }

        public bool Equals(VirtualDiskManager virtualDiskManager)
        {
            return (virtualDiskManager != null && base.Equals(virtualDiskManager));
        }

        public override bool Equals(object virtualDiskManager)
        {
            return Equals(virtualDiskManager as VirtualDiskManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskModeNotSupported : DeviceNotSupported, IEquatable<VirtualDiskModeNotSupported>
    {
        public string Mode { get; set; }

        public bool Equals(VirtualDiskModeNotSupported virtualDiskModeNotSupported)
        {
            return (virtualDiskModeNotSupported != null && this.Mode == virtualDiskModeNotSupported.Mode);
        }

        public override bool Equals(object virtualDiskModeNotSupported)
        {
            return Equals(virtualDiskModeNotSupported as VirtualDiskModeNotSupported);
        }

        public override int GetHashCode()
        {
            return (Mode).GetHashCode();
        }
    }

    public class VirtualDiskOption : VirtualDeviceOption, IEquatable<VirtualDiskOption>
    {
        public LongOption CapacityInKB { get; set; }

        public StorageIOAllocationOption IoAllocationOption { get; set; }

        public VirtualDiskOptionVFlashCacheConfigOption VFlashCacheConfigOption { get; set; }

        public bool Equals(VirtualDiskOption virtualDiskOption)
        {
            return (virtualDiskOption != null && ((this.CapacityInKB == null && virtualDiskOption.CapacityInKB == null) || (this.CapacityInKB != null && this.CapacityInKB.Equals(virtualDiskOption.CapacityInKB))) && ((this.IoAllocationOption == null && virtualDiskOption.IoAllocationOption == null) || (this.IoAllocationOption != null && this.IoAllocationOption.Equals(virtualDiskOption.IoAllocationOption))) && ((this.VFlashCacheConfigOption == null && virtualDiskOption.VFlashCacheConfigOption == null) || (this.VFlashCacheConfigOption != null && this.VFlashCacheConfigOption.Equals(virtualDiskOption.VFlashCacheConfigOption))));
        }

        public override bool Equals(object virtualDiskOption)
        {
            return Equals(virtualDiskOption as VirtualDiskOption);
        }

        public override int GetHashCode()
        {
            return (CapacityInKB + "_" + IoAllocationOption + "_" + VFlashCacheConfigOption).GetHashCode();
        }
    }

    public class VirtualDiskOptionVFlashCacheConfigOption : DynamicData, IEquatable<VirtualDiskOptionVFlashCacheConfigOption>
    {
        public ChoiceOption CacheConsistencyType { get; set; }

        public ChoiceOption CacheMode { get; set; }

        public LongOption ReservationInMB { get; set; }

        public LongOption BlockSizeInKB { get; set; }

        public bool Equals(VirtualDiskOptionVFlashCacheConfigOption virtualDiskOptionVFlashCacheConfigOption)
        {
            return (virtualDiskOptionVFlashCacheConfigOption != null && ((this.CacheConsistencyType == null && virtualDiskOptionVFlashCacheConfigOption.CacheConsistencyType == null) || (this.CacheConsistencyType != null && this.CacheConsistencyType.Equals(virtualDiskOptionVFlashCacheConfigOption.CacheConsistencyType))) && ((this.CacheMode == null && virtualDiskOptionVFlashCacheConfigOption.CacheMode == null) || (this.CacheMode != null && this.CacheMode.Equals(virtualDiskOptionVFlashCacheConfigOption.CacheMode))) && ((this.ReservationInMB == null && virtualDiskOptionVFlashCacheConfigOption.ReservationInMB == null) || (this.ReservationInMB != null && this.ReservationInMB.Equals(virtualDiskOptionVFlashCacheConfigOption.ReservationInMB))) && ((this.BlockSizeInKB == null && virtualDiskOptionVFlashCacheConfigOption.BlockSizeInKB == null) || (this.BlockSizeInKB != null && this.BlockSizeInKB.Equals(virtualDiskOptionVFlashCacheConfigOption.BlockSizeInKB))));
        }

        public override bool Equals(object virtualDiskOptionVFlashCacheConfigOption)
        {
            return Equals(virtualDiskOptionVFlashCacheConfigOption as VirtualDiskOptionVFlashCacheConfigOption);
        }

        public override int GetHashCode()
        {
            return (CacheConsistencyType + "_" + CacheMode + "_" + ReservationInMB + "_" + BlockSizeInKB).GetHashCode();
        }
    }

    public class VirtualDiskPartitionedRawDiskVer2BackingInfo : VirtualDiskRawDiskVer2BackingInfo, IEquatable<VirtualDiskPartitionedRawDiskVer2BackingInfo>
    {
        public int[] Partition { get; set; }

        public bool Equals(VirtualDiskPartitionedRawDiskVer2BackingInfo virtualDiskPartitionedRawDiskVer2BackingInfo)
        {
            return (virtualDiskPartitionedRawDiskVer2BackingInfo != null && ((this.Partition == null && virtualDiskPartitionedRawDiskVer2BackingInfo.Partition == null) || (this.Partition != null && virtualDiskPartitionedRawDiskVer2BackingInfo.Partition != null && Enumerable.SequenceEqual(this.Partition, virtualDiskPartitionedRawDiskVer2BackingInfo.Partition))));
        }

        public override bool Equals(object virtualDiskPartitionedRawDiskVer2BackingInfo)
        {
            return Equals(virtualDiskPartitionedRawDiskVer2BackingInfo as VirtualDiskPartitionedRawDiskVer2BackingInfo);
        }

        public override int GetHashCode()
        {
            return (Partition).GetHashCode();
        }
    }

    public class VirtualDiskPartitionedRawDiskVer2BackingOption : VirtualDiskRawDiskVer2BackingOption, IEquatable<VirtualDiskPartitionedRawDiskVer2BackingOption>
    {
        public bool Equals(VirtualDiskPartitionedRawDiskVer2BackingOption virtualDiskPartitionedRawDiskVer2BackingOption)
        {
            return (virtualDiskPartitionedRawDiskVer2BackingOption != null && base.Equals(virtualDiskPartitionedRawDiskVer2BackingOption));
        }

        public override bool Equals(object virtualDiskPartitionedRawDiskVer2BackingOption)
        {
            return Equals(virtualDiskPartitionedRawDiskVer2BackingOption as VirtualDiskPartitionedRawDiskVer2BackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskRawDiskMappingVer1BackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskRawDiskMappingVer1BackingInfo>
    {
        public string LunUuid { get; set; }

        public string DeviceName { get; set; }

        public string CompatibilityMode { get; set; }

        public string DiskMode { get; set; }

        public string Uuid { get; set; }

        public string ContentId { get; set; }

        public string ChangeId { get; set; }

        public VirtualDiskRawDiskMappingVer1BackingInfo Parent { get; set; }

        public string DeltaDiskFormat { get; set; }

        public int? DeltaGrainSize { get; set; }

        public string Sharing { get; set; }

        public new VirtualDiskRawDiskMappingVer1BackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskRawDiskMappingVer1BackingInfo virtualDiskRawDiskMappingVer1BackingInfo)
        {
            return (virtualDiskRawDiskMappingVer1BackingInfo != null && this.LunUuid == virtualDiskRawDiskMappingVer1BackingInfo.LunUuid && this.DeviceName == virtualDiskRawDiskMappingVer1BackingInfo.DeviceName && this.CompatibilityMode == virtualDiskRawDiskMappingVer1BackingInfo.CompatibilityMode && this.DiskMode == virtualDiskRawDiskMappingVer1BackingInfo.DiskMode && this.Uuid == virtualDiskRawDiskMappingVer1BackingInfo.Uuid && this.ContentId == virtualDiskRawDiskMappingVer1BackingInfo.ContentId && this.ChangeId == virtualDiskRawDiskMappingVer1BackingInfo.ChangeId && ((this.Parent == null && virtualDiskRawDiskMappingVer1BackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskRawDiskMappingVer1BackingInfo.Parent))) && this.DeltaDiskFormat == virtualDiskRawDiskMappingVer1BackingInfo.DeltaDiskFormat && ((this.DeltaGrainSize == null && virtualDiskRawDiskMappingVer1BackingInfo.DeltaGrainSize == null) || (this.DeltaGrainSize != null && this.DeltaGrainSize.Equals(virtualDiskRawDiskMappingVer1BackingInfo.DeltaGrainSize))) && this.Sharing == virtualDiskRawDiskMappingVer1BackingInfo.Sharing && ((this.LinkedView == null && virtualDiskRawDiskMappingVer1BackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskRawDiskMappingVer1BackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskRawDiskMappingVer1BackingInfo)
        {
            return Equals(virtualDiskRawDiskMappingVer1BackingInfo as VirtualDiskRawDiskMappingVer1BackingInfo);
        }

        public override int GetHashCode()
        {
            return (LunUuid + "_" + DeviceName + "_" + CompatibilityMode + "_" + DiskMode + "_" + Uuid + "_" + ContentId + "_" + ChangeId + "_" + Parent + "_" + DeltaDiskFormat + "_" + DeltaGrainSize + "_" + Sharing + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskRawDiskMappingVer1BackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskRawDiskMappingVer1BackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskRawDiskMappingVer1BackingInfo_LinkedView virtualDiskRawDiskMappingVer1BackingInfo_LinkedView)
        {
            return (virtualDiskRawDiskMappingVer1BackingInfo_LinkedView != null && base.Equals(virtualDiskRawDiskMappingVer1BackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskRawDiskMappingVer1BackingInfo_LinkedView)
        {
            return Equals(virtualDiskRawDiskMappingVer1BackingInfo_LinkedView as VirtualDiskRawDiskMappingVer1BackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskRawDiskMappingVer1BackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualDiskRawDiskMappingVer1BackingOption>
    {
        public ChoiceOption DescriptorFileNameExtensions { get; set; }

        public ChoiceOption CompatibilityMode { get; set; }

        public ChoiceOption DiskMode { get; set; }

        public bool Uuid { get; set; }

        public bool Equals(VirtualDiskRawDiskMappingVer1BackingOption virtualDiskRawDiskMappingVer1BackingOption)
        {
            return (virtualDiskRawDiskMappingVer1BackingOption != null && ((this.DescriptorFileNameExtensions == null && virtualDiskRawDiskMappingVer1BackingOption.DescriptorFileNameExtensions == null) || (this.DescriptorFileNameExtensions != null && this.DescriptorFileNameExtensions.Equals(virtualDiskRawDiskMappingVer1BackingOption.DescriptorFileNameExtensions))) && ((this.CompatibilityMode == null && virtualDiskRawDiskMappingVer1BackingOption.CompatibilityMode == null) || (this.CompatibilityMode != null && this.CompatibilityMode.Equals(virtualDiskRawDiskMappingVer1BackingOption.CompatibilityMode))) && ((this.DiskMode == null && virtualDiskRawDiskMappingVer1BackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskRawDiskMappingVer1BackingOption.DiskMode))) && this.Uuid == virtualDiskRawDiskMappingVer1BackingOption.Uuid);
        }

        public override bool Equals(object virtualDiskRawDiskMappingVer1BackingOption)
        {
            return Equals(virtualDiskRawDiskMappingVer1BackingOption as VirtualDiskRawDiskMappingVer1BackingOption);
        }

        public override int GetHashCode()
        {
            return (DescriptorFileNameExtensions + "_" + CompatibilityMode + "_" + DiskMode + "_" + Uuid).GetHashCode();
        }
    }

    public class VirtualDiskRawDiskVer2BackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualDiskRawDiskVer2BackingInfo>
    {
        public string DescriptorFileName { get; set; }

        public string Uuid { get; set; }

        public string ChangeId { get; set; }

        public string Sharing { get; set; }

        public bool Equals(VirtualDiskRawDiskVer2BackingInfo virtualDiskRawDiskVer2BackingInfo)
        {
            return (virtualDiskRawDiskVer2BackingInfo != null && this.DescriptorFileName == virtualDiskRawDiskVer2BackingInfo.DescriptorFileName && this.Uuid == virtualDiskRawDiskVer2BackingInfo.Uuid && this.ChangeId == virtualDiskRawDiskVer2BackingInfo.ChangeId && this.Sharing == virtualDiskRawDiskVer2BackingInfo.Sharing);
        }

        public override bool Equals(object virtualDiskRawDiskVer2BackingInfo)
        {
            return Equals(virtualDiskRawDiskVer2BackingInfo as VirtualDiskRawDiskVer2BackingInfo);
        }

        public override int GetHashCode()
        {
            return (DescriptorFileName + "_" + Uuid + "_" + ChangeId + "_" + Sharing).GetHashCode();
        }
    }

    public class VirtualDiskRawDiskVer2BackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualDiskRawDiskVer2BackingOption>
    {
        public ChoiceOption DescriptorFileNameExtensions { get; set; }

        public bool Uuid { get; set; }

        public bool Equals(VirtualDiskRawDiskVer2BackingOption virtualDiskRawDiskVer2BackingOption)
        {
            return (virtualDiskRawDiskVer2BackingOption != null && ((this.DescriptorFileNameExtensions == null && virtualDiskRawDiskVer2BackingOption.DescriptorFileNameExtensions == null) || (this.DescriptorFileNameExtensions != null && this.DescriptorFileNameExtensions.Equals(virtualDiskRawDiskVer2BackingOption.DescriptorFileNameExtensions))) && this.Uuid == virtualDiskRawDiskVer2BackingOption.Uuid);
        }

        public override bool Equals(object virtualDiskRawDiskVer2BackingOption)
        {
            return Equals(virtualDiskRawDiskVer2BackingOption as VirtualDiskRawDiskVer2BackingOption);
        }

        public override int GetHashCode()
        {
            return (DescriptorFileNameExtensions + "_" + Uuid).GetHashCode();
        }
    }

    public class VirtualDiskRuleSpec : ClusterRuleInfo, IEquatable<VirtualDiskRuleSpec>
    {
        public string DiskRuleType { get; set; }

        public int[] DiskId { get; set; }

        public bool Equals(VirtualDiskRuleSpec virtualDiskRuleSpec)
        {
            return (virtualDiskRuleSpec != null && this.DiskRuleType == virtualDiskRuleSpec.DiskRuleType && ((this.DiskId == null && virtualDiskRuleSpec.DiskId == null) || (this.DiskId != null && virtualDiskRuleSpec.DiskId != null && Enumerable.SequenceEqual(this.DiskId, virtualDiskRuleSpec.DiskId))));
        }

        public override bool Equals(object virtualDiskRuleSpec)
        {
            return Equals(virtualDiskRuleSpec as VirtualDiskRuleSpec);
        }

        public override int GetHashCode()
        {
            return (DiskRuleType + "_" + DiskId).GetHashCode();
        }
    }

    public class VirtualDiskSeSparseBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskSeSparseBackingInfo>
    {
        public string DiskMode { get; set; }

        public bool? WriteThrough { get; set; }

        public string Uuid { get; set; }

        public string ContentId { get; set; }

        public string ChangeId { get; set; }

        public VirtualDiskSeSparseBackingInfo Parent { get; set; }

        public string DeltaDiskFormat { get; set; }

        public bool? DigestEnabled { get; set; }

        public int? GrainSize { get; set; }

        public CryptoKeyId KeyId { get; set; }

        public new VirtualDiskSeSparseBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskSeSparseBackingInfo virtualDiskSeSparseBackingInfo)
        {
            return (virtualDiskSeSparseBackingInfo != null && this.DiskMode == virtualDiskSeSparseBackingInfo.DiskMode && ((this.WriteThrough == null && virtualDiskSeSparseBackingInfo.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSeSparseBackingInfo.WriteThrough))) && this.Uuid == virtualDiskSeSparseBackingInfo.Uuid && this.ContentId == virtualDiskSeSparseBackingInfo.ContentId && this.ChangeId == virtualDiskSeSparseBackingInfo.ChangeId && ((this.Parent == null && virtualDiskSeSparseBackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskSeSparseBackingInfo.Parent))) && this.DeltaDiskFormat == virtualDiskSeSparseBackingInfo.DeltaDiskFormat && ((this.DigestEnabled == null && virtualDiskSeSparseBackingInfo.DigestEnabled == null) || (this.DigestEnabled != null && this.DigestEnabled.Equals(virtualDiskSeSparseBackingInfo.DigestEnabled))) && ((this.GrainSize == null && virtualDiskSeSparseBackingInfo.GrainSize == null) || (this.GrainSize != null && this.GrainSize.Equals(virtualDiskSeSparseBackingInfo.GrainSize))) && ((this.KeyId == null && virtualDiskSeSparseBackingInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(virtualDiskSeSparseBackingInfo.KeyId))) && ((this.LinkedView == null && virtualDiskSeSparseBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskSeSparseBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskSeSparseBackingInfo)
        {
            return Equals(virtualDiskSeSparseBackingInfo as VirtualDiskSeSparseBackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + WriteThrough + "_" + Uuid + "_" + ContentId + "_" + ChangeId + "_" + Parent + "_" + DeltaDiskFormat + "_" + DigestEnabled + "_" + GrainSize + "_" + KeyId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskSeSparseBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskSeSparseBackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskSeSparseBackingInfo_LinkedView virtualDiskSeSparseBackingInfo_LinkedView)
        {
            return (virtualDiskSeSparseBackingInfo_LinkedView != null && base.Equals(virtualDiskSeSparseBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskSeSparseBackingInfo_LinkedView)
        {
            return Equals(virtualDiskSeSparseBackingInfo_LinkedView as VirtualDiskSeSparseBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskSeSparseBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskSeSparseBackingOption>
    {
        public ChoiceOption DiskMode { get; set; }

        public BoolOption WriteThrough { get; set; }

        public bool Growable { get; set; }

        public bool HotGrowable { get; set; }

        public bool Uuid { get; set; }

        public VirtualDiskDeltaDiskFormatsSupported[] DeltaDiskFormatsSupported { get; set; }

        public bool Equals(VirtualDiskSeSparseBackingOption virtualDiskSeSparseBackingOption)
        {
            return (virtualDiskSeSparseBackingOption != null && ((this.DiskMode == null && virtualDiskSeSparseBackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskSeSparseBackingOption.DiskMode))) && ((this.WriteThrough == null && virtualDiskSeSparseBackingOption.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSeSparseBackingOption.WriteThrough))) && this.Growable == virtualDiskSeSparseBackingOption.Growable && this.HotGrowable == virtualDiskSeSparseBackingOption.HotGrowable && this.Uuid == virtualDiskSeSparseBackingOption.Uuid && ((this.DeltaDiskFormatsSupported == null && virtualDiskSeSparseBackingOption.DeltaDiskFormatsSupported == null) || (this.DeltaDiskFormatsSupported != null && virtualDiskSeSparseBackingOption.DeltaDiskFormatsSupported != null && Enumerable.SequenceEqual(this.DeltaDiskFormatsSupported, virtualDiskSeSparseBackingOption.DeltaDiskFormatsSupported))));
        }

        public override bool Equals(object virtualDiskSeSparseBackingOption)
        {
            return Equals(virtualDiskSeSparseBackingOption as VirtualDiskSeSparseBackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + WriteThrough + "_" + Growable + "_" + HotGrowable + "_" + Uuid + "_" + DeltaDiskFormatsSupported).GetHashCode();
        }
    }

    public class VirtualDiskSparseVer1BackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskSparseVer1BackingInfo>
    {
        public string DiskMode { get; set; }

        public bool? Split { get; set; }

        public bool? WriteThrough { get; set; }

        public long? SpaceUsedInKB { get; set; }

        public string ContentId { get; set; }

        public VirtualDiskSparseVer1BackingInfo Parent { get; set; }

        public new VirtualDiskSparseVer1BackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskSparseVer1BackingInfo virtualDiskSparseVer1BackingInfo)
        {
            return (virtualDiskSparseVer1BackingInfo != null && this.DiskMode == virtualDiskSparseVer1BackingInfo.DiskMode && ((this.Split == null && virtualDiskSparseVer1BackingInfo.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskSparseVer1BackingInfo.Split))) && ((this.WriteThrough == null && virtualDiskSparseVer1BackingInfo.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSparseVer1BackingInfo.WriteThrough))) && ((this.SpaceUsedInKB == null && virtualDiskSparseVer1BackingInfo.SpaceUsedInKB == null) || (this.SpaceUsedInKB != null && this.SpaceUsedInKB.Equals(virtualDiskSparseVer1BackingInfo.SpaceUsedInKB))) && this.ContentId == virtualDiskSparseVer1BackingInfo.ContentId && ((this.Parent == null && virtualDiskSparseVer1BackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskSparseVer1BackingInfo.Parent))) && ((this.LinkedView == null && virtualDiskSparseVer1BackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskSparseVer1BackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskSparseVer1BackingInfo)
        {
            return Equals(virtualDiskSparseVer1BackingInfo as VirtualDiskSparseVer1BackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + SpaceUsedInKB + "_" + ContentId + "_" + Parent + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskSparseVer1BackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskSparseVer1BackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskSparseVer1BackingInfo_LinkedView virtualDiskSparseVer1BackingInfo_LinkedView)
        {
            return (virtualDiskSparseVer1BackingInfo_LinkedView != null && base.Equals(virtualDiskSparseVer1BackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskSparseVer1BackingInfo_LinkedView)
        {
            return Equals(virtualDiskSparseVer1BackingInfo_LinkedView as VirtualDiskSparseVer1BackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskSparseVer1BackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskSparseVer1BackingOption>
    {
        public ChoiceOption DiskModes { get; set; }

        public BoolOption Split { get; set; }

        public BoolOption WriteThrough { get; set; }

        public bool Growable { get; set; }

        public bool Equals(VirtualDiskSparseVer1BackingOption virtualDiskSparseVer1BackingOption)
        {
            return (virtualDiskSparseVer1BackingOption != null && ((this.DiskModes == null && virtualDiskSparseVer1BackingOption.DiskModes == null) || (this.DiskModes != null && this.DiskModes.Equals(virtualDiskSparseVer1BackingOption.DiskModes))) && ((this.Split == null && virtualDiskSparseVer1BackingOption.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskSparseVer1BackingOption.Split))) && ((this.WriteThrough == null && virtualDiskSparseVer1BackingOption.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSparseVer1BackingOption.WriteThrough))) && this.Growable == virtualDiskSparseVer1BackingOption.Growable);
        }

        public override bool Equals(object virtualDiskSparseVer1BackingOption)
        {
            return Equals(virtualDiskSparseVer1BackingOption as VirtualDiskSparseVer1BackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskModes + "_" + Split + "_" + WriteThrough + "_" + Growable).GetHashCode();
        }
    }

    public class VirtualDiskSparseVer2BackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualDiskSparseVer2BackingInfo>
    {
        public string DiskMode { get; set; }

        public bool? Split { get; set; }

        public bool? WriteThrough { get; set; }

        public long? SpaceUsedInKB { get; set; }

        public string Uuid { get; set; }

        public string ContentId { get; set; }

        public string ChangeId { get; set; }

        public VirtualDiskSparseVer2BackingInfo Parent { get; set; }

        public CryptoKeyId KeyId { get; set; }

        public new VirtualDiskSparseVer2BackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualDiskSparseVer2BackingInfo virtualDiskSparseVer2BackingInfo)
        {
            return (virtualDiskSparseVer2BackingInfo != null && this.DiskMode == virtualDiskSparseVer2BackingInfo.DiskMode && ((this.Split == null && virtualDiskSparseVer2BackingInfo.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskSparseVer2BackingInfo.Split))) && ((this.WriteThrough == null && virtualDiskSparseVer2BackingInfo.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSparseVer2BackingInfo.WriteThrough))) && ((this.SpaceUsedInKB == null && virtualDiskSparseVer2BackingInfo.SpaceUsedInKB == null) || (this.SpaceUsedInKB != null && this.SpaceUsedInKB.Equals(virtualDiskSparseVer2BackingInfo.SpaceUsedInKB))) && this.Uuid == virtualDiskSparseVer2BackingInfo.Uuid && this.ContentId == virtualDiskSparseVer2BackingInfo.ContentId && this.ChangeId == virtualDiskSparseVer2BackingInfo.ChangeId && ((this.Parent == null && virtualDiskSparseVer2BackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualDiskSparseVer2BackingInfo.Parent))) && ((this.KeyId == null && virtualDiskSparseVer2BackingInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(virtualDiskSparseVer2BackingInfo.KeyId))) && ((this.LinkedView == null && virtualDiskSparseVer2BackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualDiskSparseVer2BackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualDiskSparseVer2BackingInfo)
        {
            return Equals(virtualDiskSparseVer2BackingInfo as VirtualDiskSparseVer2BackingInfo);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + SpaceUsedInKB + "_" + Uuid + "_" + ContentId + "_" + ChangeId + "_" + Parent + "_" + KeyId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualDiskSparseVer2BackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualDiskSparseVer2BackingInfo_LinkedView>
    {
        public bool Equals(VirtualDiskSparseVer2BackingInfo_LinkedView virtualDiskSparseVer2BackingInfo_LinkedView)
        {
            return (virtualDiskSparseVer2BackingInfo_LinkedView != null && base.Equals(virtualDiskSparseVer2BackingInfo_LinkedView));
        }

        public override bool Equals(object virtualDiskSparseVer2BackingInfo_LinkedView)
        {
            return Equals(virtualDiskSparseVer2BackingInfo_LinkedView as VirtualDiskSparseVer2BackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualDiskSparseVer2BackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualDiskSparseVer2BackingOption>
    {
        public ChoiceOption DiskMode { get; set; }

        public BoolOption Split { get; set; }

        public BoolOption WriteThrough { get; set; }

        public bool Growable { get; set; }

        public bool HotGrowable { get; set; }

        public bool Uuid { get; set; }

        public bool Equals(VirtualDiskSparseVer2BackingOption virtualDiskSparseVer2BackingOption)
        {
            return (virtualDiskSparseVer2BackingOption != null && ((this.DiskMode == null && virtualDiskSparseVer2BackingOption.DiskMode == null) || (this.DiskMode != null && this.DiskMode.Equals(virtualDiskSparseVer2BackingOption.DiskMode))) && ((this.Split == null && virtualDiskSparseVer2BackingOption.Split == null) || (this.Split != null && this.Split.Equals(virtualDiskSparseVer2BackingOption.Split))) && ((this.WriteThrough == null && virtualDiskSparseVer2BackingOption.WriteThrough == null) || (this.WriteThrough != null && this.WriteThrough.Equals(virtualDiskSparseVer2BackingOption.WriteThrough))) && this.Growable == virtualDiskSparseVer2BackingOption.Growable && this.HotGrowable == virtualDiskSparseVer2BackingOption.HotGrowable && this.Uuid == virtualDiskSparseVer2BackingOption.Uuid);
        }

        public override bool Equals(object virtualDiskSparseVer2BackingOption)
        {
            return Equals(virtualDiskSparseVer2BackingOption as VirtualDiskSparseVer2BackingOption);
        }

        public override int GetHashCode()
        {
            return (DiskMode + "_" + Split + "_" + WriteThrough + "_" + Growable + "_" + HotGrowable + "_" + Uuid).GetHashCode();
        }
    }

    public class VirtualDiskSpec : DynamicData, IEquatable<VirtualDiskSpec>
    {
        public string DiskType { get; set; }

        public string AdapterType { get; set; }

        public bool Equals(VirtualDiskSpec virtualDiskSpec)
        {
            return (virtualDiskSpec != null && this.DiskType == virtualDiskSpec.DiskType && this.AdapterType == virtualDiskSpec.AdapterType);
        }

        public override bool Equals(object virtualDiskSpec)
        {
            return Equals(virtualDiskSpec as VirtualDiskSpec);
        }

        public override int GetHashCode()
        {
            return (DiskType + "_" + AdapterType).GetHashCode();
        }
    }

    public class VirtualDiskVFlashCacheConfigInfo : DynamicData, IEquatable<VirtualDiskVFlashCacheConfigInfo>
    {
        public string VFlashModule { get; set; }

        public long? ReservationInMB { get; set; }

        public string CacheConsistencyType { get; set; }

        public string CacheMode { get; set; }

        public long? BlockSizeInKB { get; set; }

        public bool Equals(VirtualDiskVFlashCacheConfigInfo virtualDiskVFlashCacheConfigInfo)
        {
            return (virtualDiskVFlashCacheConfigInfo != null && this.VFlashModule == virtualDiskVFlashCacheConfigInfo.VFlashModule && ((this.ReservationInMB == null && virtualDiskVFlashCacheConfigInfo.ReservationInMB == null) || (this.ReservationInMB != null && this.ReservationInMB.Equals(virtualDiskVFlashCacheConfigInfo.ReservationInMB))) && this.CacheConsistencyType == virtualDiskVFlashCacheConfigInfo.CacheConsistencyType && this.CacheMode == virtualDiskVFlashCacheConfigInfo.CacheMode && ((this.BlockSizeInKB == null && virtualDiskVFlashCacheConfigInfo.BlockSizeInKB == null) || (this.BlockSizeInKB != null && this.BlockSizeInKB.Equals(virtualDiskVFlashCacheConfigInfo.BlockSizeInKB))));
        }

        public override bool Equals(object virtualDiskVFlashCacheConfigInfo)
        {
            return Equals(virtualDiskVFlashCacheConfigInfo as VirtualDiskVFlashCacheConfigInfo);
        }

        public override int GetHashCode()
        {
            return (VFlashModule + "_" + ReservationInMB + "_" + CacheConsistencyType + "_" + CacheMode + "_" + BlockSizeInKB).GetHashCode();
        }
    }

    public class VirtualE1000 : VirtualEthernetCard, IEquatable<VirtualE1000>
    {
        public bool Equals(VirtualE1000 virtualE1000)
        {
            return (virtualE1000 != null && base.Equals(virtualE1000));
        }

        public override bool Equals(object virtualE1000)
        {
            return Equals(virtualE1000 as VirtualE1000);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualE1000e : VirtualEthernetCard, IEquatable<VirtualE1000e>
    {
        public bool Equals(VirtualE1000e virtualE1000e)
        {
            return (virtualE1000e != null && base.Equals(virtualE1000e));
        }

        public override bool Equals(object virtualE1000e)
        {
            return Equals(virtualE1000e as VirtualE1000e);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualE1000eOption : VirtualEthernetCardOption, IEquatable<VirtualE1000eOption>
    {
        public bool Equals(VirtualE1000eOption virtualE1000eOption)
        {
            return (virtualE1000eOption != null && base.Equals(virtualE1000eOption));
        }

        public override bool Equals(object virtualE1000eOption)
        {
            return Equals(virtualE1000eOption as VirtualE1000eOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualE1000Option : VirtualEthernetCardOption, IEquatable<VirtualE1000Option>
    {
        public bool Equals(VirtualE1000Option virtualE1000Option)
        {
            return (virtualE1000Option != null && base.Equals(virtualE1000Option));
        }

        public override bool Equals(object virtualE1000Option)
        {
            return Equals(virtualE1000Option as VirtualE1000Option);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEnsoniq1371 : VirtualSoundCard, IEquatable<VirtualEnsoniq1371>
    {
        public bool Equals(VirtualEnsoniq1371 virtualEnsoniq1371)
        {
            return (virtualEnsoniq1371 != null && base.Equals(virtualEnsoniq1371));
        }

        public override bool Equals(object virtualEnsoniq1371)
        {
            return Equals(virtualEnsoniq1371 as VirtualEnsoniq1371);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEnsoniq1371Option : VirtualSoundCardOption, IEquatable<VirtualEnsoniq1371Option>
    {
        public bool Equals(VirtualEnsoniq1371Option virtualEnsoniq1371Option)
        {
            return (virtualEnsoniq1371Option != null && base.Equals(virtualEnsoniq1371Option));
        }

        public override bool Equals(object virtualEnsoniq1371Option)
        {
            return Equals(virtualEnsoniq1371Option as VirtualEnsoniq1371Option);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCard : VirtualDevice, IEquatable<VirtualEthernetCard>
    {
        public string AddressType { get; set; }

        public string MacAddress { get; set; }

        public bool? WakeOnLanEnabled { get; set; }

        public VirtualEthernetCardResourceAllocation ResourceAllocation { get; set; }

        public string ExternalId { get; set; }

        public bool? UptCompatibilityEnabled { get; set; }

        public bool Equals(VirtualEthernetCard virtualEthernetCard)
        {
            return (virtualEthernetCard != null && this.AddressType == virtualEthernetCard.AddressType && this.MacAddress == virtualEthernetCard.MacAddress && ((this.WakeOnLanEnabled == null && virtualEthernetCard.WakeOnLanEnabled == null) || (this.WakeOnLanEnabled != null && this.WakeOnLanEnabled.Equals(virtualEthernetCard.WakeOnLanEnabled))) && ((this.ResourceAllocation == null && virtualEthernetCard.ResourceAllocation == null) || (this.ResourceAllocation != null && this.ResourceAllocation.Equals(virtualEthernetCard.ResourceAllocation))) && this.ExternalId == virtualEthernetCard.ExternalId && ((this.UptCompatibilityEnabled == null && virtualEthernetCard.UptCompatibilityEnabled == null) || (this.UptCompatibilityEnabled != null && this.UptCompatibilityEnabled.Equals(virtualEthernetCard.UptCompatibilityEnabled))));
        }

        public override bool Equals(object virtualEthernetCard)
        {
            return Equals(virtualEthernetCard as VirtualEthernetCard);
        }

        public override int GetHashCode()
        {
            return (AddressType + "_" + MacAddress + "_" + WakeOnLanEnabled + "_" + ResourceAllocation + "_" + ExternalId + "_" + UptCompatibilityEnabled).GetHashCode();
        }
    }

    public class VirtualEthernetCardDistributedVirtualPortBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualEthernetCardDistributedVirtualPortBackingInfo>
    {
        public DistributedVirtualSwitchPortConnection Port { get; set; }

        public bool Equals(VirtualEthernetCardDistributedVirtualPortBackingInfo virtualEthernetCardDistributedVirtualPortBackingInfo)
        {
            return (virtualEthernetCardDistributedVirtualPortBackingInfo != null && ((this.Port == null && virtualEthernetCardDistributedVirtualPortBackingInfo.Port == null) || (this.Port != null && this.Port.Equals(virtualEthernetCardDistributedVirtualPortBackingInfo.Port))));
        }

        public override bool Equals(object virtualEthernetCardDistributedVirtualPortBackingInfo)
        {
            return Equals(virtualEthernetCardDistributedVirtualPortBackingInfo as VirtualEthernetCardDistributedVirtualPortBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Port).GetHashCode();
        }
    }

    public class VirtualEthernetCardDVPortBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualEthernetCardDVPortBackingOption>
    {
        public bool Equals(VirtualEthernetCardDVPortBackingOption virtualEthernetCardDVPortBackingOption)
        {
            return (virtualEthernetCardDVPortBackingOption != null && base.Equals(virtualEthernetCardDVPortBackingOption));
        }

        public override bool Equals(object virtualEthernetCardDVPortBackingOption)
        {
            return Equals(virtualEthernetCardDVPortBackingOption as VirtualEthernetCardDVPortBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardLegacyNetworkBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualEthernetCardLegacyNetworkBackingInfo>
    {
        public bool Equals(VirtualEthernetCardLegacyNetworkBackingInfo virtualEthernetCardLegacyNetworkBackingInfo)
        {
            return (virtualEthernetCardLegacyNetworkBackingInfo != null && base.Equals(virtualEthernetCardLegacyNetworkBackingInfo));
        }

        public override bool Equals(object virtualEthernetCardLegacyNetworkBackingInfo)
        {
            return Equals(virtualEthernetCardLegacyNetworkBackingInfo as VirtualEthernetCardLegacyNetworkBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardLegacyNetworkBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualEthernetCardLegacyNetworkBackingOption>
    {
        public bool Equals(VirtualEthernetCardLegacyNetworkBackingOption virtualEthernetCardLegacyNetworkBackingOption)
        {
            return (virtualEthernetCardLegacyNetworkBackingOption != null && base.Equals(virtualEthernetCardLegacyNetworkBackingOption));
        }

        public override bool Equals(object virtualEthernetCardLegacyNetworkBackingOption)
        {
            return Equals(virtualEthernetCardLegacyNetworkBackingOption as VirtualEthernetCardLegacyNetworkBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardNetworkBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualEthernetCardNetworkBackingInfo>
    {
        public ManagedObjectReference Network { get; set; }

        public bool? InPassthroughMode { get; set; }

        public VirtualEthernetCardNetworkBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualEthernetCardNetworkBackingInfo virtualEthernetCardNetworkBackingInfo)
        {
            return (virtualEthernetCardNetworkBackingInfo != null && ((this.Network == null && virtualEthernetCardNetworkBackingInfo.Network == null) || (this.Network != null && this.Network.Equals(virtualEthernetCardNetworkBackingInfo.Network))) && ((this.InPassthroughMode == null && virtualEthernetCardNetworkBackingInfo.InPassthroughMode == null) || (this.InPassthroughMode != null && this.InPassthroughMode.Equals(virtualEthernetCardNetworkBackingInfo.InPassthroughMode))) && ((this.LinkedView == null && virtualEthernetCardNetworkBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualEthernetCardNetworkBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualEthernetCardNetworkBackingInfo)
        {
            return Equals(virtualEthernetCardNetworkBackingInfo as VirtualEthernetCardNetworkBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + InPassthroughMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualEthernetCardNetworkBackingInfo_LinkedView : IEquatable<VirtualEthernetCardNetworkBackingInfo_LinkedView>
    {
        public Network Network { get; set; }

        public bool Equals(VirtualEthernetCardNetworkBackingInfo_LinkedView virtualEthernetCardNetworkBackingInfo_LinkedView)
        {
            return (virtualEthernetCardNetworkBackingInfo_LinkedView != null && ((this.Network == null && virtualEthernetCardNetworkBackingInfo_LinkedView.Network == null) || (this.Network != null && this.Network.Equals(virtualEthernetCardNetworkBackingInfo_LinkedView.Network))));
        }

        public override bool Equals(object virtualEthernetCardNetworkBackingInfo_LinkedView)
        {
            return Equals(virtualEthernetCardNetworkBackingInfo_LinkedView as VirtualEthernetCardNetworkBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Network).GetHashCode();
        }
    }

    public class VirtualEthernetCardNetworkBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualEthernetCardNetworkBackingOption>
    {
        public bool Equals(VirtualEthernetCardNetworkBackingOption virtualEthernetCardNetworkBackingOption)
        {
            return (virtualEthernetCardNetworkBackingOption != null && base.Equals(virtualEthernetCardNetworkBackingOption));
        }

        public override bool Equals(object virtualEthernetCardNetworkBackingOption)
        {
            return Equals(virtualEthernetCardNetworkBackingOption as VirtualEthernetCardNetworkBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardNotSupported : DeviceNotSupported, IEquatable<VirtualEthernetCardNotSupported>
    {
        public bool Equals(VirtualEthernetCardNotSupported virtualEthernetCardNotSupported)
        {
            return (virtualEthernetCardNotSupported != null && base.Equals(virtualEthernetCardNotSupported));
        }

        public override bool Equals(object virtualEthernetCardNotSupported)
        {
            return Equals(virtualEthernetCardNotSupported as VirtualEthernetCardNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardOpaqueNetworkBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualEthernetCardOpaqueNetworkBackingInfo>
    {
        public string OpaqueNetworkId { get; set; }

        public string OpaqueNetworkType { get; set; }

        public bool Equals(VirtualEthernetCardOpaqueNetworkBackingInfo virtualEthernetCardOpaqueNetworkBackingInfo)
        {
            return (virtualEthernetCardOpaqueNetworkBackingInfo != null && this.OpaqueNetworkId == virtualEthernetCardOpaqueNetworkBackingInfo.OpaqueNetworkId && this.OpaqueNetworkType == virtualEthernetCardOpaqueNetworkBackingInfo.OpaqueNetworkType);
        }

        public override bool Equals(object virtualEthernetCardOpaqueNetworkBackingInfo)
        {
            return Equals(virtualEthernetCardOpaqueNetworkBackingInfo as VirtualEthernetCardOpaqueNetworkBackingInfo);
        }

        public override int GetHashCode()
        {
            return (OpaqueNetworkId + "_" + OpaqueNetworkType).GetHashCode();
        }
    }

    public class VirtualEthernetCardOpaqueNetworkBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualEthernetCardOpaqueNetworkBackingOption>
    {
        public bool Equals(VirtualEthernetCardOpaqueNetworkBackingOption virtualEthernetCardOpaqueNetworkBackingOption)
        {
            return (virtualEthernetCardOpaqueNetworkBackingOption != null && base.Equals(virtualEthernetCardOpaqueNetworkBackingOption));
        }

        public override bool Equals(object virtualEthernetCardOpaqueNetworkBackingOption)
        {
            return Equals(virtualEthernetCardOpaqueNetworkBackingOption as VirtualEthernetCardOpaqueNetworkBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualEthernetCardOption : VirtualDeviceOption, IEquatable<VirtualEthernetCardOption>
    {
        public ChoiceOption SupportedOUI { get; set; }

        public ChoiceOption MacType { get; set; }

        public BoolOption WakeOnLanEnabled { get; set; }

        public bool VmDirectPathGen2Supported { get; set; }

        public BoolOption UptCompatibilityEnabled { get; set; }

        public bool Equals(VirtualEthernetCardOption virtualEthernetCardOption)
        {
            return (virtualEthernetCardOption != null && ((this.SupportedOUI == null && virtualEthernetCardOption.SupportedOUI == null) || (this.SupportedOUI != null && this.SupportedOUI.Equals(virtualEthernetCardOption.SupportedOUI))) && ((this.MacType == null && virtualEthernetCardOption.MacType == null) || (this.MacType != null && this.MacType.Equals(virtualEthernetCardOption.MacType))) && ((this.WakeOnLanEnabled == null && virtualEthernetCardOption.WakeOnLanEnabled == null) || (this.WakeOnLanEnabled != null && this.WakeOnLanEnabled.Equals(virtualEthernetCardOption.WakeOnLanEnabled))) && this.VmDirectPathGen2Supported == virtualEthernetCardOption.VmDirectPathGen2Supported && ((this.UptCompatibilityEnabled == null && virtualEthernetCardOption.UptCompatibilityEnabled == null) || (this.UptCompatibilityEnabled != null && this.UptCompatibilityEnabled.Equals(virtualEthernetCardOption.UptCompatibilityEnabled))));
        }

        public override bool Equals(object virtualEthernetCardOption)
        {
            return Equals(virtualEthernetCardOption as VirtualEthernetCardOption);
        }

        public override int GetHashCode()
        {
            return (SupportedOUI + "_" + MacType + "_" + WakeOnLanEnabled + "_" + VmDirectPathGen2Supported + "_" + UptCompatibilityEnabled).GetHashCode();
        }
    }

    public class VirtualEthernetCardResourceAllocation : DynamicData, IEquatable<VirtualEthernetCardResourceAllocation>
    {
        public long? Reservation { get; set; }

        public SharesInfo Share { get; set; }

        public long? Limit { get; set; }

        public bool Equals(VirtualEthernetCardResourceAllocation virtualEthernetCardResourceAllocation)
        {
            return (virtualEthernetCardResourceAllocation != null && ((this.Reservation == null && virtualEthernetCardResourceAllocation.Reservation == null) || (this.Reservation != null && this.Reservation.Equals(virtualEthernetCardResourceAllocation.Reservation))) && ((this.Share == null && virtualEthernetCardResourceAllocation.Share == null) || (this.Share != null && this.Share.Equals(virtualEthernetCardResourceAllocation.Share))) && ((this.Limit == null && virtualEthernetCardResourceAllocation.Limit == null) || (this.Limit != null && this.Limit.Equals(virtualEthernetCardResourceAllocation.Limit))));
        }

        public override bool Equals(object virtualEthernetCardResourceAllocation)
        {
            return Equals(virtualEthernetCardResourceAllocation as VirtualEthernetCardResourceAllocation);
        }

        public override int GetHashCode()
        {
            return (Reservation + "_" + Share + "_" + Limit).GetHashCode();
        }
    }

    public class VirtualFloppy : VirtualDevice, IEquatable<VirtualFloppy>
    {
        public bool Equals(VirtualFloppy virtualFloppy)
        {
            return (virtualFloppy != null && base.Equals(virtualFloppy));
        }

        public override bool Equals(object virtualFloppy)
        {
            return Equals(virtualFloppy as VirtualFloppy);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualFloppyDeviceBackingInfo>
    {
        public bool Equals(VirtualFloppyDeviceBackingInfo virtualFloppyDeviceBackingInfo)
        {
            return (virtualFloppyDeviceBackingInfo != null && base.Equals(virtualFloppyDeviceBackingInfo));
        }

        public override bool Equals(object virtualFloppyDeviceBackingInfo)
        {
            return Equals(virtualFloppyDeviceBackingInfo as VirtualFloppyDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualFloppyDeviceBackingOption>
    {
        public bool Equals(VirtualFloppyDeviceBackingOption virtualFloppyDeviceBackingOption)
        {
            return (virtualFloppyDeviceBackingOption != null && base.Equals(virtualFloppyDeviceBackingOption));
        }

        public override bool Equals(object virtualFloppyDeviceBackingOption)
        {
            return Equals(virtualFloppyDeviceBackingOption as VirtualFloppyDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyImageBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualFloppyImageBackingInfo>
    {
        public new VirtualFloppyImageBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualFloppyImageBackingInfo virtualFloppyImageBackingInfo)
        {
            return (virtualFloppyImageBackingInfo != null && ((this.LinkedView == null && virtualFloppyImageBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualFloppyImageBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualFloppyImageBackingInfo)
        {
            return Equals(virtualFloppyImageBackingInfo as VirtualFloppyImageBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VirtualFloppyImageBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualFloppyImageBackingInfo_LinkedView>
    {
        public bool Equals(VirtualFloppyImageBackingInfo_LinkedView virtualFloppyImageBackingInfo_LinkedView)
        {
            return (virtualFloppyImageBackingInfo_LinkedView != null && base.Equals(virtualFloppyImageBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualFloppyImageBackingInfo_LinkedView)
        {
            return Equals(virtualFloppyImageBackingInfo_LinkedView as VirtualFloppyImageBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyImageBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualFloppyImageBackingOption>
    {
        public bool Equals(VirtualFloppyImageBackingOption virtualFloppyImageBackingOption)
        {
            return (virtualFloppyImageBackingOption != null && base.Equals(virtualFloppyImageBackingOption));
        }

        public override bool Equals(object virtualFloppyImageBackingOption)
        {
            return Equals(virtualFloppyImageBackingOption as VirtualFloppyImageBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyOption : VirtualDeviceOption, IEquatable<VirtualFloppyOption>
    {
        public bool Equals(VirtualFloppyOption virtualFloppyOption)
        {
            return (virtualFloppyOption != null && base.Equals(virtualFloppyOption));
        }

        public override bool Equals(object virtualFloppyOption)
        {
            return Equals(virtualFloppyOption as VirtualFloppyOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyRemoteDeviceBackingInfo : VirtualDeviceRemoteDeviceBackingInfo, IEquatable<VirtualFloppyRemoteDeviceBackingInfo>
    {
        public bool Equals(VirtualFloppyRemoteDeviceBackingInfo virtualFloppyRemoteDeviceBackingInfo)
        {
            return (virtualFloppyRemoteDeviceBackingInfo != null && base.Equals(virtualFloppyRemoteDeviceBackingInfo));
        }

        public override bool Equals(object virtualFloppyRemoteDeviceBackingInfo)
        {
            return Equals(virtualFloppyRemoteDeviceBackingInfo as VirtualFloppyRemoteDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualFloppyRemoteDeviceBackingOption : VirtualDeviceRemoteDeviceBackingOption, IEquatable<VirtualFloppyRemoteDeviceBackingOption>
    {
        public bool Equals(VirtualFloppyRemoteDeviceBackingOption virtualFloppyRemoteDeviceBackingOption)
        {
            return (virtualFloppyRemoteDeviceBackingOption != null && base.Equals(virtualFloppyRemoteDeviceBackingOption));
        }

        public override bool Equals(object virtualFloppyRemoteDeviceBackingOption)
        {
            return Equals(virtualFloppyRemoteDeviceBackingOption as VirtualFloppyRemoteDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualHardware : DynamicData, IEquatable<VirtualHardware>
    {
        public int NumCPU { get; set; }

        public int? NumCoresPerSocket { get; set; }

        public int MemoryMB { get; set; }

        public bool? VirtualICH7MPresent { get; set; }

        public bool? VirtualSMCPresent { get; set; }

        public VirtualDevice[] Device { get; set; }

        public bool Equals(VirtualHardware virtualHardware)
        {
            return (virtualHardware != null && this.NumCPU == virtualHardware.NumCPU && ((this.NumCoresPerSocket == null && virtualHardware.NumCoresPerSocket == null) || (this.NumCoresPerSocket != null && this.NumCoresPerSocket.Equals(virtualHardware.NumCoresPerSocket))) && this.MemoryMB == virtualHardware.MemoryMB && ((this.VirtualICH7MPresent == null && virtualHardware.VirtualICH7MPresent == null) || (this.VirtualICH7MPresent != null && this.VirtualICH7MPresent.Equals(virtualHardware.VirtualICH7MPresent))) && ((this.VirtualSMCPresent == null && virtualHardware.VirtualSMCPresent == null) || (this.VirtualSMCPresent != null && this.VirtualSMCPresent.Equals(virtualHardware.VirtualSMCPresent))) && ((this.Device == null && virtualHardware.Device == null) || (this.Device != null && virtualHardware.Device != null && Enumerable.SequenceEqual(this.Device, virtualHardware.Device))));
        }

        public override bool Equals(object virtualHardware)
        {
            return Equals(virtualHardware as VirtualHardware);
        }

        public override int GetHashCode()
        {
            return (NumCPU + "_" + NumCoresPerSocket + "_" + MemoryMB + "_" + VirtualICH7MPresent + "_" + VirtualSMCPresent + "_" + Device).GetHashCode();
        }
    }

    public class VirtualHardwareCompatibilityIssue : VmConfigFault, IEquatable<VirtualHardwareCompatibilityIssue>
    {
        public bool Equals(VirtualHardwareCompatibilityIssue virtualHardwareCompatibilityIssue)
        {
            return (virtualHardwareCompatibilityIssue != null && base.Equals(virtualHardwareCompatibilityIssue));
        }

        public override bool Equals(object virtualHardwareCompatibilityIssue)
        {
            return Equals(virtualHardwareCompatibilityIssue as VirtualHardwareCompatibilityIssue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualHardwareOption : DynamicData, IEquatable<VirtualHardwareOption>
    {
        public int HwVersion { get; set; }

        public VirtualDeviceOption[] VirtualDeviceOption { get; set; }

        public bool DeviceListReadonly { get; set; }

        public int[] NumCPU { get; set; }

        public IntOption NumCoresPerSocket { get; set; }

        public bool NumCpuReadonly { get; set; }

        public LongOption MemoryMB { get; set; }

        public IntOption NumPCIControllers { get; set; }

        public IntOption NumIDEControllers { get; set; }

        public IntOption NumUSBControllers { get; set; }

        public IntOption NumUSBXHCIControllers { get; set; }

        public IntOption NumSIOControllers { get; set; }

        public IntOption NumPS2Controllers { get; set; }

        public string[] LicensingLimit { get; set; }

        public IntOption NumSupportedWwnPorts { get; set; }

        public IntOption NumSupportedWwnNodes { get; set; }

        public ResourceConfigOption ResourceConfigOption { get; set; }

        public IntOption NumNVDIMMControllers { get; set; }

        public IntOption NumTPMDevices { get; set; }

        public bool Equals(VirtualHardwareOption virtualHardwareOption)
        {
            return (virtualHardwareOption != null && this.HwVersion == virtualHardwareOption.HwVersion && ((this.VirtualDeviceOption == null && virtualHardwareOption.VirtualDeviceOption == null) || (this.VirtualDeviceOption != null && virtualHardwareOption.VirtualDeviceOption != null && Enumerable.SequenceEqual(this.VirtualDeviceOption, virtualHardwareOption.VirtualDeviceOption))) && this.DeviceListReadonly == virtualHardwareOption.DeviceListReadonly && ((this.NumCPU == null && virtualHardwareOption.NumCPU == null) || (this.NumCPU != null && virtualHardwareOption.NumCPU != null && Enumerable.SequenceEqual(this.NumCPU, virtualHardwareOption.NumCPU))) && ((this.NumCoresPerSocket == null && virtualHardwareOption.NumCoresPerSocket == null) || (this.NumCoresPerSocket != null && this.NumCoresPerSocket.Equals(virtualHardwareOption.NumCoresPerSocket))) && this.NumCpuReadonly == virtualHardwareOption.NumCpuReadonly && ((this.MemoryMB == null && virtualHardwareOption.MemoryMB == null) || (this.MemoryMB != null && this.MemoryMB.Equals(virtualHardwareOption.MemoryMB))) && ((this.NumPCIControllers == null && virtualHardwareOption.NumPCIControllers == null) || (this.NumPCIControllers != null && this.NumPCIControllers.Equals(virtualHardwareOption.NumPCIControllers))) && ((this.NumIDEControllers == null && virtualHardwareOption.NumIDEControllers == null) || (this.NumIDEControllers != null && this.NumIDEControllers.Equals(virtualHardwareOption.NumIDEControllers))) && ((this.NumUSBControllers == null && virtualHardwareOption.NumUSBControllers == null) || (this.NumUSBControllers != null && this.NumUSBControllers.Equals(virtualHardwareOption.NumUSBControllers))) && ((this.NumUSBXHCIControllers == null && virtualHardwareOption.NumUSBXHCIControllers == null) || (this.NumUSBXHCIControllers != null && this.NumUSBXHCIControllers.Equals(virtualHardwareOption.NumUSBXHCIControllers))) && ((this.NumSIOControllers == null && virtualHardwareOption.NumSIOControllers == null) || (this.NumSIOControllers != null && this.NumSIOControllers.Equals(virtualHardwareOption.NumSIOControllers))) && ((this.NumPS2Controllers == null && virtualHardwareOption.NumPS2Controllers == null) || (this.NumPS2Controllers != null && this.NumPS2Controllers.Equals(virtualHardwareOption.NumPS2Controllers))) && ((this.LicensingLimit == null && virtualHardwareOption.LicensingLimit == null) || (this.LicensingLimit != null && virtualHardwareOption.LicensingLimit != null && Enumerable.SequenceEqual(this.LicensingLimit, virtualHardwareOption.LicensingLimit))) && ((this.NumSupportedWwnPorts == null && virtualHardwareOption.NumSupportedWwnPorts == null) || (this.NumSupportedWwnPorts != null && this.NumSupportedWwnPorts.Equals(virtualHardwareOption.NumSupportedWwnPorts))) && ((this.NumSupportedWwnNodes == null && virtualHardwareOption.NumSupportedWwnNodes == null) || (this.NumSupportedWwnNodes != null && this.NumSupportedWwnNodes.Equals(virtualHardwareOption.NumSupportedWwnNodes))) && ((this.ResourceConfigOption == null && virtualHardwareOption.ResourceConfigOption == null) || (this.ResourceConfigOption != null && this.ResourceConfigOption.Equals(virtualHardwareOption.ResourceConfigOption))) && ((this.NumNVDIMMControllers == null && virtualHardwareOption.NumNVDIMMControllers == null) || (this.NumNVDIMMControllers != null && this.NumNVDIMMControllers.Equals(virtualHardwareOption.NumNVDIMMControllers))) && ((this.NumTPMDevices == null && virtualHardwareOption.NumTPMDevices == null) || (this.NumTPMDevices != null && this.NumTPMDevices.Equals(virtualHardwareOption.NumTPMDevices))));
        }

        public override bool Equals(object virtualHardwareOption)
        {
            return Equals(virtualHardwareOption as VirtualHardwareOption);
        }

        public override int GetHashCode()
        {
            return (HwVersion + "_" + VirtualDeviceOption + "_" + DeviceListReadonly + "_" + NumCPU + "_" + NumCoresPerSocket + "_" + NumCpuReadonly + "_" + MemoryMB + "_" + NumPCIControllers + "_" + NumIDEControllers + "_" + NumUSBControllers + "_" + NumUSBXHCIControllers + "_" + NumSIOControllers + "_" + NumPS2Controllers + "_" + LicensingLimit + "_" + NumSupportedWwnPorts + "_" + NumSupportedWwnNodes + "_" + ResourceConfigOption + "_" + NumNVDIMMControllers + "_" + NumTPMDevices).GetHashCode();
        }
    }

    public class VirtualHardwareVersionNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<VirtualHardwareVersionNotSupported>
    {
        public string HostName { get; set; }

        public ManagedObjectReference Host { get; set; }

        public VirtualHardwareVersionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualHardwareVersionNotSupported virtualHardwareVersionNotSupported)
        {
            return (virtualHardwareVersionNotSupported != null && this.HostName == virtualHardwareVersionNotSupported.HostName && ((this.Host == null && virtualHardwareVersionNotSupported.Host == null) || (this.Host != null && this.Host.Equals(virtualHardwareVersionNotSupported.Host))) && ((this.LinkedView == null && virtualHardwareVersionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualHardwareVersionNotSupported.LinkedView))));
        }

        public override bool Equals(object virtualHardwareVersionNotSupported)
        {
            return Equals(virtualHardwareVersionNotSupported as VirtualHardwareVersionNotSupported);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + Host + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualHardwareVersionNotSupported_LinkedView : IEquatable<VirtualHardwareVersionNotSupported_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(VirtualHardwareVersionNotSupported_LinkedView virtualHardwareVersionNotSupported_LinkedView)
        {
            return (virtualHardwareVersionNotSupported_LinkedView != null && ((this.Host == null && virtualHardwareVersionNotSupported_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(virtualHardwareVersionNotSupported_LinkedView.Host))));
        }

        public override bool Equals(object virtualHardwareVersionNotSupported_LinkedView)
        {
            return Equals(virtualHardwareVersionNotSupported_LinkedView as VirtualHardwareVersionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class VirtualHdAudioCard : VirtualSoundCard, IEquatable<VirtualHdAudioCard>
    {
        public bool Equals(VirtualHdAudioCard virtualHdAudioCard)
        {
            return (virtualHdAudioCard != null && base.Equals(virtualHdAudioCard));
        }

        public override bool Equals(object virtualHdAudioCard)
        {
            return Equals(virtualHdAudioCard as VirtualHdAudioCard);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualHdAudioCardOption : VirtualSoundCardOption, IEquatable<VirtualHdAudioCardOption>
    {
        public bool Equals(VirtualHdAudioCardOption virtualHdAudioCardOption)
        {
            return (virtualHdAudioCardOption != null && base.Equals(virtualHdAudioCardOption));
        }

        public override bool Equals(object virtualHdAudioCardOption)
        {
            return Equals(virtualHdAudioCardOption as VirtualHdAudioCardOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualIDEController : VirtualController, IEquatable<VirtualIDEController>
    {
        public bool Equals(VirtualIDEController virtualIDEController)
        {
            return (virtualIDEController != null && base.Equals(virtualIDEController));
        }

        public override bool Equals(object virtualIDEController)
        {
            return Equals(virtualIDEController as VirtualIDEController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualIDEControllerOption : VirtualControllerOption, IEquatable<VirtualIDEControllerOption>
    {
        public IntOption NumIDEDisks { get; set; }

        public IntOption NumIDECdroms { get; set; }

        public bool Equals(VirtualIDEControllerOption virtualIDEControllerOption)
        {
            return (virtualIDEControllerOption != null && ((this.NumIDEDisks == null && virtualIDEControllerOption.NumIDEDisks == null) || (this.NumIDEDisks != null && this.NumIDEDisks.Equals(virtualIDEControllerOption.NumIDEDisks))) && ((this.NumIDECdroms == null && virtualIDEControllerOption.NumIDECdroms == null) || (this.NumIDECdroms != null && this.NumIDECdroms.Equals(virtualIDEControllerOption.NumIDECdroms))));
        }

        public override bool Equals(object virtualIDEControllerOption)
        {
            return Equals(virtualIDEControllerOption as VirtualIDEControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumIDEDisks + "_" + NumIDECdroms).GetHashCode();
        }
    }

    public class VirtualizationManager : ViewBase, IEquatable<VirtualizationManager>
    {
        public bool Equals(VirtualizationManager virtualizationManager)
        {
            return (virtualizationManager != null && base.Equals(virtualizationManager));
        }

        public override bool Equals(object virtualizationManager)
        {
            return Equals(virtualizationManager as VirtualizationManager);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualKeyboard : VirtualDevice, IEquatable<VirtualKeyboard>
    {
        public bool Equals(VirtualKeyboard virtualKeyboard)
        {
            return (virtualKeyboard != null && base.Equals(virtualKeyboard));
        }

        public override bool Equals(object virtualKeyboard)
        {
            return Equals(virtualKeyboard as VirtualKeyboard);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualKeyboardOption : VirtualDeviceOption, IEquatable<VirtualKeyboardOption>
    {
        public bool Equals(VirtualKeyboardOption virtualKeyboardOption)
        {
            return (virtualKeyboardOption != null && base.Equals(virtualKeyboardOption));
        }

        public override bool Equals(object virtualKeyboardOption)
        {
            return Equals(virtualKeyboardOption as VirtualKeyboardOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualLsiLogicController : VirtualSCSIController, IEquatable<VirtualLsiLogicController>
    {
        public bool Equals(VirtualLsiLogicController virtualLsiLogicController)
        {
            return (virtualLsiLogicController != null && base.Equals(virtualLsiLogicController));
        }

        public override bool Equals(object virtualLsiLogicController)
        {
            return Equals(virtualLsiLogicController as VirtualLsiLogicController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualLsiLogicControllerOption : VirtualSCSIControllerOption, IEquatable<VirtualLsiLogicControllerOption>
    {
        public bool Equals(VirtualLsiLogicControllerOption virtualLsiLogicControllerOption)
        {
            return (virtualLsiLogicControllerOption != null && base.Equals(virtualLsiLogicControllerOption));
        }

        public override bool Equals(object virtualLsiLogicControllerOption)
        {
            return Equals(virtualLsiLogicControllerOption as VirtualLsiLogicControllerOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualLsiLogicSASController : VirtualSCSIController, IEquatable<VirtualLsiLogicSASController>
    {
        public bool Equals(VirtualLsiLogicSASController virtualLsiLogicSASController)
        {
            return (virtualLsiLogicSASController != null && base.Equals(virtualLsiLogicSASController));
        }

        public override bool Equals(object virtualLsiLogicSASController)
        {
            return Equals(virtualLsiLogicSASController as VirtualLsiLogicSASController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualLsiLogicSASControllerOption : VirtualSCSIControllerOption, IEquatable<VirtualLsiLogicSASControllerOption>
    {
        public bool Equals(VirtualLsiLogicSASControllerOption virtualLsiLogicSASControllerOption)
        {
            return (virtualLsiLogicSASControllerOption != null && base.Equals(virtualLsiLogicSASControllerOption));
        }

        public override bool Equals(object virtualLsiLogicSASControllerOption)
        {
            return Equals(virtualLsiLogicSASControllerOption as VirtualLsiLogicSASControllerOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachine : ManagedEntity, IEquatable<VirtualMachine>
    {
        public VirtualMachineCapability Capability { get; set; }

        public VirtualMachineConfigInfo Config { get; set; }

        public VirtualMachineFileLayout Layout { get; set; }

        public VirtualMachineFileLayoutEx LayoutEx { get; set; }

        public VirtualMachineStorageInfo Storage { get; set; }

        public ManagedObjectReference EnvironmentBrowser { get; set; }

        public ManagedObjectReference ResourcePool { get; set; }

        public ManagedObjectReference ParentVApp { get; set; }

        public ResourceConfigSpec ResourceConfig { get; set; }

        public VirtualMachineRuntimeInfo Runtime { get; set; }

        public GuestInfo Guest { get; set; }

        public VirtualMachineSummary Summary { get; set; }

        public ManagedObjectReference[] Datastore { get; set; }

        public ManagedObjectReference[] Network { get; set; }

        public VirtualMachineSnapshotInfo Snapshot { get; set; }

        public ManagedObjectReference[] RootSnapshot { get; set; }

        public ManagedEntityStatus GuestHeartbeatStatus { get; set; }

        public new VirtualMachine_LinkedView LinkedView { get; set; }

        public void RefreshStorageInfo()
        {
        }

        public ManagedObjectReference CreateSnapshot_Task(string name, string description, bool memory, bool quiesce)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateSnapshot(string name, string description, bool memory, bool quiesce)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateSnapshotEx_Task(string name, string description, bool memory, VirtualMachineGuestQuiesceSpec quiesceSpec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CreateSnapshotEx(string name, string description, bool memory, VirtualMachineGuestQuiesceSpec quiesceSpec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference RevertToCurrentSnapshot_Task(ManagedObjectReference host, bool? suppressPowerOn)
        {
            return default(ManagedObjectReference);
        }

        public void RevertToCurrentSnapshot(ManagedObjectReference host, bool? suppressPowerOn)
        {
        }

        public ManagedObjectReference RemoveAllSnapshots_Task(bool? consolidate)
        {
            return default(ManagedObjectReference);
        }

        public void RemoveAllSnapshots(bool? consolidate)
        {
        }

        public ManagedObjectReference ConsolidateVMDisks_Task()
        {
            return default(ManagedObjectReference);
        }

        public void ConsolidateVMDisks()
        {
        }

        public ManagedObjectReference EstimateStorageForConsolidateSnapshots_Task()
        {
            return default(ManagedObjectReference);
        }

        public StorageRequirement[] EstimateStorageForConsolidateSnapshots()
        {
            return default(StorageRequirement[]);
        }

        public ManagedObjectReference ReconfigVM_Task(VirtualMachineConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void ReconfigVM(VirtualMachineConfigSpec spec)
        {
        }

        public ManagedObjectReference UpgradeVM_Task(string version)
        {
            return default(ManagedObjectReference);
        }

        public void UpgradeVM(string version)
        {
        }

        public string ExtractOvfEnvironment()
        {
            return default(string);
        }

        public ManagedObjectReference PowerOnVM_Task(ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public void PowerOnVM(ManagedObjectReference host)
        {
        }

        public ManagedObjectReference PowerOffVM_Task()
        {
            return default(ManagedObjectReference);
        }

        public void PowerOffVM()
        {
        }

        public ManagedObjectReference SuspendVM_Task()
        {
            return default(ManagedObjectReference);
        }

        public void SuspendVM()
        {
        }

        public ManagedObjectReference ResetVM_Task()
        {
            return default(ManagedObjectReference);
        }

        public void ResetVM()
        {
        }

        public void ShutdownGuest()
        {
        }

        public void RebootGuest()
        {
        }

        public void StandbyGuest()
        {
        }

        public void AnswerVM(string questionId, string answerChoice)
        {
        }

        public ManagedObjectReference CustomizeVM_Task(CustomizationSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public void CustomizeVM(CustomizationSpec spec)
        {
        }

        public void CheckCustomizationSpec(CustomizationSpec spec)
        {
        }

        public ManagedObjectReference MigrateVM_Task(ManagedObjectReference pool, ManagedObjectReference host, VirtualMachineMovePriority priority, VirtualMachinePowerState? state)
        {
            return default(ManagedObjectReference);
        }

        public void MigrateVM(ManagedObjectReference pool, ManagedObjectReference host, VirtualMachineMovePriority priority, VirtualMachinePowerState? state)
        {
        }

        public ManagedObjectReference RelocateVM_Task(VirtualMachineRelocateSpec spec, VirtualMachineMovePriority? priority)
        {
            return default(ManagedObjectReference);
        }

        public void RelocateVM(VirtualMachineRelocateSpec spec, VirtualMachineMovePriority? priority)
        {
        }

        public ManagedObjectReference CloneVM_Task(ManagedObjectReference folder, string name, VirtualMachineCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference CloneVM(ManagedObjectReference folder, string name, VirtualMachineCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference InstantClone_Task(VirtualMachineInstantCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference InstantClone(VirtualMachineInstantCloneSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference ExportVm()
        {
            return default(ManagedObjectReference);
        }

        public void MarkAsTemplate()
        {
        }

        public void MarkAsVirtualMachine(ManagedObjectReference pool, ManagedObjectReference host)
        {
        }

        public void UnregisterVM()
        {
        }

        public void ResetGuestInformation()
        {
        }

        public void MountToolsInstaller()
        {
        }

        public void UnmountToolsInstaller()
        {
        }

        public ManagedObjectReference UpgradeTools_Task(string installerOptions)
        {
            return default(ManagedObjectReference);
        }

        public void UpgradeTools(string installerOptions)
        {
        }

        public VirtualMachineMksTicket AcquireMksTicket()
        {
            return default(VirtualMachineMksTicket);
        }

        public VirtualMachineTicket AcquireTicket(string ticketType)
        {
            return default(VirtualMachineTicket);
        }

        public void SetScreenResolution(int width, int height)
        {
        }

        public void DefragmentAllDisks()
        {
        }

        public ManagedObjectReference CreateSecondaryVM_Task(ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public FaultToleranceSecondaryOpResult CreateSecondaryVM(ManagedObjectReference host)
        {
            return default(FaultToleranceSecondaryOpResult);
        }

        public ManagedObjectReference CreateSecondaryVMEx_Task(ManagedObjectReference host, FaultToleranceConfigSpec spec)
        {
            return default(ManagedObjectReference);
        }

        public FaultToleranceSecondaryOpResult CreateSecondaryVMEx(ManagedObjectReference host, FaultToleranceConfigSpec spec)
        {
            return default(FaultToleranceSecondaryOpResult);
        }

        public ManagedObjectReference TurnOffFaultToleranceForVM_Task()
        {
            return default(ManagedObjectReference);
        }

        public void TurnOffFaultToleranceForVM()
        {
        }

        public ManagedObjectReference MakePrimaryVM_Task(ManagedObjectReference vm)
        {
            return default(ManagedObjectReference);
        }

        public void MakePrimaryVM(ManagedObjectReference vm)
        {
        }

        public ManagedObjectReference TerminateFaultTolerantVM_Task(ManagedObjectReference vm)
        {
            return default(ManagedObjectReference);
        }

        public void TerminateFaultTolerantVM(ManagedObjectReference vm)
        {
        }

        public ManagedObjectReference DisableSecondaryVM_Task(ManagedObjectReference vm)
        {
            return default(ManagedObjectReference);
        }

        public void DisableSecondaryVM(ManagedObjectReference vm)
        {
        }

        public ManagedObjectReference EnableSecondaryVM_Task(ManagedObjectReference vm, ManagedObjectReference host)
        {
            return default(ManagedObjectReference);
        }

        public FaultToleranceSecondaryOpResult EnableSecondaryVM(ManagedObjectReference vm, ManagedObjectReference host)
        {
            return default(FaultToleranceSecondaryOpResult);
        }

        public void SetDisplayTopology(VirtualMachineDisplayTopology[] displays)
        {
        }

        public ManagedObjectReference StartRecording_Task(string name, string description)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference StartRecording(string name, string description)
        {
            return default(ManagedObjectReference);
        }

        public ManagedObjectReference StopRecording_Task()
        {
            return default(ManagedObjectReference);
        }

        public void StopRecording()
        {
        }

        public ManagedObjectReference StartReplaying_Task(ManagedObjectReference replaySnapshot)
        {
            return default(ManagedObjectReference);
        }

        public void StartReplaying(ManagedObjectReference replaySnapshot)
        {
        }

        public ManagedObjectReference StopReplaying_Task()
        {
            return default(ManagedObjectReference);
        }

        public void StopReplaying()
        {
        }

        public ManagedObjectReference PromoteDisks_Task(bool unlink, VirtualDisk[] disks)
        {
            return default(ManagedObjectReference);
        }

        public void PromoteDisks(bool unlink, VirtualDisk[] disks)
        {
        }

        public ManagedObjectReference CreateScreenshot_Task()
        {
            return default(ManagedObjectReference);
        }

        public string CreateScreenshot()
        {
            return default(string);
        }

        public int PutUsbScanCodes(UsbScanCodeSpec spec)
        {
            return default(int);
        }

        public DiskChangeInfo QueryChangedDiskAreas(ManagedObjectReference snapshot, int deviceKey, long startOffset, string changeId)
        {
            return default(DiskChangeInfo);
        }

        public string[] QueryUnownedFiles()
        {
            return default(string[]);
        }

        public ManagedObjectReference reloadVirtualMachineFromPath_Task(string configurationPath)
        {
            return default(ManagedObjectReference);
        }

        public void reloadVirtualMachineFromPath(string configurationPath)
        {
        }

        public LocalizedMethodFault[] QueryFaultToleranceCompatibility()
        {
            return default(LocalizedMethodFault[]);
        }

        public LocalizedMethodFault[] QueryFaultToleranceCompatibilityEx(bool? forLegacyFt)
        {
            return default(LocalizedMethodFault[]);
        }

        public void TerminateVM()
        {
        }

        public void SendNMI()
        {
        }

        public ManagedObjectReference AttachDisk_Task(ID diskId, ManagedObjectReference datastore, int? controllerKey, int? unitNumber)
        {
            return default(ManagedObjectReference);
        }

        public void AttachDisk(ID diskId, ManagedObjectReference datastore, int? controllerKey, int? unitNumber)
        {
        }

        public ManagedObjectReference DetachDisk_Task(ID diskId)
        {
            return default(ManagedObjectReference);
        }

        public void DetachDisk(ID diskId)
        {
        }

        public ManagedObjectReference ApplyEvcModeVM_Task(HostFeatureMask[] mask, bool? completeMasks)
        {
            return default(ManagedObjectReference);
        }

        public void ApplyEvcModeVM(HostFeatureMask[] mask, bool? completeMasks)
        {
        }

        public ManagedObjectReference CryptoUnlock_Task()
        {
            return default(ManagedObjectReference);
        }

        public void CryptoUnlock()
        {
        }

        public bool Equals(VirtualMachine virtualMachine)
        {
            return (virtualMachine != null && ((this.Capability == null && virtualMachine.Capability == null) || (this.Capability != null && this.Capability.Equals(virtualMachine.Capability))) && ((this.Config == null && virtualMachine.Config == null) || (this.Config != null && this.Config.Equals(virtualMachine.Config))) && ((this.Layout == null && virtualMachine.Layout == null) || (this.Layout != null && this.Layout.Equals(virtualMachine.Layout))) && ((this.LayoutEx == null && virtualMachine.LayoutEx == null) || (this.LayoutEx != null && this.LayoutEx.Equals(virtualMachine.LayoutEx))) && ((this.Storage == null && virtualMachine.Storage == null) || (this.Storage != null && this.Storage.Equals(virtualMachine.Storage))) && ((this.EnvironmentBrowser == null && virtualMachine.EnvironmentBrowser == null) || (this.EnvironmentBrowser != null && this.EnvironmentBrowser.Equals(virtualMachine.EnvironmentBrowser))) && ((this.ResourcePool == null && virtualMachine.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(virtualMachine.ResourcePool))) && ((this.ParentVApp == null && virtualMachine.ParentVApp == null) || (this.ParentVApp != null && this.ParentVApp.Equals(virtualMachine.ParentVApp))) && ((this.ResourceConfig == null && virtualMachine.ResourceConfig == null) || (this.ResourceConfig != null && this.ResourceConfig.Equals(virtualMachine.ResourceConfig))) && ((this.Runtime == null && virtualMachine.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(virtualMachine.Runtime))) && ((this.Guest == null && virtualMachine.Guest == null) || (this.Guest != null && this.Guest.Equals(virtualMachine.Guest))) && ((this.Summary == null && virtualMachine.Summary == null) || (this.Summary != null && this.Summary.Equals(virtualMachine.Summary))) && ((this.Datastore == null && virtualMachine.Datastore == null) || (this.Datastore != null && virtualMachine.Datastore != null && Enumerable.SequenceEqual(this.Datastore, virtualMachine.Datastore))) && ((this.Network == null && virtualMachine.Network == null) || (this.Network != null && virtualMachine.Network != null && Enumerable.SequenceEqual(this.Network, virtualMachine.Network))) && ((this.Snapshot == null && virtualMachine.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(virtualMachine.Snapshot))) && ((this.RootSnapshot == null && virtualMachine.RootSnapshot == null) || (this.RootSnapshot != null && virtualMachine.RootSnapshot != null && Enumerable.SequenceEqual(this.RootSnapshot, virtualMachine.RootSnapshot))) && this.GuestHeartbeatStatus == virtualMachine.GuestHeartbeatStatus && ((this.LinkedView == null && virtualMachine.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachine.LinkedView))));
        }

        public override bool Equals(object virtualMachine)
        {
            return Equals(virtualMachine as VirtualMachine);
        }

        public override int GetHashCode()
        {
            return (Capability + "_" + Config + "_" + Layout + "_" + LayoutEx + "_" + Storage + "_" + EnvironmentBrowser + "_" + ResourcePool + "_" + ParentVApp + "_" + ResourceConfig + "_" + Runtime + "_" + Guest + "_" + Summary + "_" + Datastore + "_" + Network + "_" + Snapshot + "_" + RootSnapshot + "_" + GuestHeartbeatStatus + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachine_LinkedView : ManagedEntity_LinkedView, IEquatable<VirtualMachine_LinkedView>
    {
        public EnvironmentBrowser EnvironmentBrowser { get; set; }

        public ResourcePool ResourcePool { get; set; }

        public ManagedEntity ParentVApp { get; set; }

        public Datastore[] Datastore { get; set; }

        public Network[] Network { get; set; }

        public VirtualMachineSnapshot[] RootSnapshot { get; set; }

        public bool Equals(VirtualMachine_LinkedView virtualMachine_LinkedView)
        {
            return (virtualMachine_LinkedView != null && ((this.EnvironmentBrowser == null && virtualMachine_LinkedView.EnvironmentBrowser == null) || (this.EnvironmentBrowser != null && this.EnvironmentBrowser.Equals(virtualMachine_LinkedView.EnvironmentBrowser))) && ((this.ResourcePool == null && virtualMachine_LinkedView.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(virtualMachine_LinkedView.ResourcePool))) && ((this.ParentVApp == null && virtualMachine_LinkedView.ParentVApp == null) || (this.ParentVApp != null && this.ParentVApp.Equals(virtualMachine_LinkedView.ParentVApp))) && ((this.Datastore == null && virtualMachine_LinkedView.Datastore == null) || (this.Datastore != null && virtualMachine_LinkedView.Datastore != null && Enumerable.SequenceEqual(this.Datastore, virtualMachine_LinkedView.Datastore))) && ((this.Network == null && virtualMachine_LinkedView.Network == null) || (this.Network != null && virtualMachine_LinkedView.Network != null && Enumerable.SequenceEqual(this.Network, virtualMachine_LinkedView.Network))) && ((this.RootSnapshot == null && virtualMachine_LinkedView.RootSnapshot == null) || (this.RootSnapshot != null && virtualMachine_LinkedView.RootSnapshot != null && Enumerable.SequenceEqual(this.RootSnapshot, virtualMachine_LinkedView.RootSnapshot))));
        }

        public override bool Equals(object virtualMachine_LinkedView)
        {
            return Equals(virtualMachine_LinkedView as VirtualMachine_LinkedView);
        }

        public override int GetHashCode()
        {
            return (EnvironmentBrowser + "_" + ResourcePool + "_" + ParentVApp + "_" + Datastore + "_" + Network + "_" + RootSnapshot).GetHashCode();
        }
    }

    public class VirtualMachineAffinityInfo : DynamicData, IEquatable<VirtualMachineAffinityInfo>
    {
        public int[] AffinitySet { get; set; }

        public bool Equals(VirtualMachineAffinityInfo virtualMachineAffinityInfo)
        {
            return (virtualMachineAffinityInfo != null && ((this.AffinitySet == null && virtualMachineAffinityInfo.AffinitySet == null) || (this.AffinitySet != null && virtualMachineAffinityInfo.AffinitySet != null && Enumerable.SequenceEqual(this.AffinitySet, virtualMachineAffinityInfo.AffinitySet))));
        }

        public override bool Equals(object virtualMachineAffinityInfo)
        {
            return Equals(virtualMachineAffinityInfo as VirtualMachineAffinityInfo);
        }

        public override int GetHashCode()
        {
            return (AffinitySet).GetHashCode();
        }
    }

    public class VirtualMachineBootOptions : DynamicData, IEquatable<VirtualMachineBootOptions>
    {
        public long? BootDelay { get; set; }

        public bool? EnterBIOSSetup { get; set; }

        public bool? EfiSecureBootEnabled { get; set; }

        public bool? BootRetryEnabled { get; set; }

        public long? BootRetryDelay { get; set; }

        public VirtualMachineBootOptionsBootableDevice[] BootOrder { get; set; }

        public string NetworkBootProtocol { get; set; }

        public bool Equals(VirtualMachineBootOptions virtualMachineBootOptions)
        {
            return (virtualMachineBootOptions != null && ((this.BootDelay == null && virtualMachineBootOptions.BootDelay == null) || (this.BootDelay != null && this.BootDelay.Equals(virtualMachineBootOptions.BootDelay))) && ((this.EnterBIOSSetup == null && virtualMachineBootOptions.EnterBIOSSetup == null) || (this.EnterBIOSSetup != null && this.EnterBIOSSetup.Equals(virtualMachineBootOptions.EnterBIOSSetup))) && ((this.EfiSecureBootEnabled == null && virtualMachineBootOptions.EfiSecureBootEnabled == null) || (this.EfiSecureBootEnabled != null && this.EfiSecureBootEnabled.Equals(virtualMachineBootOptions.EfiSecureBootEnabled))) && ((this.BootRetryEnabled == null && virtualMachineBootOptions.BootRetryEnabled == null) || (this.BootRetryEnabled != null && this.BootRetryEnabled.Equals(virtualMachineBootOptions.BootRetryEnabled))) && ((this.BootRetryDelay == null && virtualMachineBootOptions.BootRetryDelay == null) || (this.BootRetryDelay != null && this.BootRetryDelay.Equals(virtualMachineBootOptions.BootRetryDelay))) && ((this.BootOrder == null && virtualMachineBootOptions.BootOrder == null) || (this.BootOrder != null && virtualMachineBootOptions.BootOrder != null && Enumerable.SequenceEqual(this.BootOrder, virtualMachineBootOptions.BootOrder))) && this.NetworkBootProtocol == virtualMachineBootOptions.NetworkBootProtocol);
        }

        public override bool Equals(object virtualMachineBootOptions)
        {
            return Equals(virtualMachineBootOptions as VirtualMachineBootOptions);
        }

        public override int GetHashCode()
        {
            return (BootDelay + "_" + EnterBIOSSetup + "_" + EfiSecureBootEnabled + "_" + BootRetryEnabled + "_" + BootRetryDelay + "_" + BootOrder + "_" + NetworkBootProtocol).GetHashCode();
        }
    }

    public class VirtualMachineBootOptionsBootableCdromDevice : VirtualMachineBootOptionsBootableDevice, IEquatable<VirtualMachineBootOptionsBootableCdromDevice>
    {
        public bool Equals(VirtualMachineBootOptionsBootableCdromDevice virtualMachineBootOptionsBootableCdromDevice)
        {
            return (virtualMachineBootOptionsBootableCdromDevice != null && base.Equals(virtualMachineBootOptionsBootableCdromDevice));
        }

        public override bool Equals(object virtualMachineBootOptionsBootableCdromDevice)
        {
            return Equals(virtualMachineBootOptionsBootableCdromDevice as VirtualMachineBootOptionsBootableCdromDevice);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineBootOptionsBootableDevice : DynamicData, IEquatable<VirtualMachineBootOptionsBootableDevice>
    {
        public bool Equals(VirtualMachineBootOptionsBootableDevice virtualMachineBootOptionsBootableDevice)
        {
            return (virtualMachineBootOptionsBootableDevice != null && base.Equals(virtualMachineBootOptionsBootableDevice));
        }

        public override bool Equals(object virtualMachineBootOptionsBootableDevice)
        {
            return Equals(virtualMachineBootOptionsBootableDevice as VirtualMachineBootOptionsBootableDevice);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineBootOptionsBootableDiskDevice : VirtualMachineBootOptionsBootableDevice, IEquatable<VirtualMachineBootOptionsBootableDiskDevice>
    {
        public int DeviceKey { get; set; }

        public bool Equals(VirtualMachineBootOptionsBootableDiskDevice virtualMachineBootOptionsBootableDiskDevice)
        {
            return (virtualMachineBootOptionsBootableDiskDevice != null && this.DeviceKey == virtualMachineBootOptionsBootableDiskDevice.DeviceKey);
        }

        public override bool Equals(object virtualMachineBootOptionsBootableDiskDevice)
        {
            return Equals(virtualMachineBootOptionsBootableDiskDevice as VirtualMachineBootOptionsBootableDiskDevice);
        }

        public override int GetHashCode()
        {
            return (DeviceKey).GetHashCode();
        }
    }

    public class VirtualMachineBootOptionsBootableEthernetDevice : VirtualMachineBootOptionsBootableDevice, IEquatable<VirtualMachineBootOptionsBootableEthernetDevice>
    {
        public int DeviceKey { get; set; }

        public bool Equals(VirtualMachineBootOptionsBootableEthernetDevice virtualMachineBootOptionsBootableEthernetDevice)
        {
            return (virtualMachineBootOptionsBootableEthernetDevice != null && this.DeviceKey == virtualMachineBootOptionsBootableEthernetDevice.DeviceKey);
        }

        public override bool Equals(object virtualMachineBootOptionsBootableEthernetDevice)
        {
            return Equals(virtualMachineBootOptionsBootableEthernetDevice as VirtualMachineBootOptionsBootableEthernetDevice);
        }

        public override int GetHashCode()
        {
            return (DeviceKey).GetHashCode();
        }
    }

    public class VirtualMachineBootOptionsBootableFloppyDevice : VirtualMachineBootOptionsBootableDevice, IEquatable<VirtualMachineBootOptionsBootableFloppyDevice>
    {
        public bool Equals(VirtualMachineBootOptionsBootableFloppyDevice virtualMachineBootOptionsBootableFloppyDevice)
        {
            return (virtualMachineBootOptionsBootableFloppyDevice != null && base.Equals(virtualMachineBootOptionsBootableFloppyDevice));
        }

        public override bool Equals(object virtualMachineBootOptionsBootableFloppyDevice)
        {
            return Equals(virtualMachineBootOptionsBootableFloppyDevice as VirtualMachineBootOptionsBootableFloppyDevice);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineCapability : DynamicData, IEquatable<VirtualMachineCapability>
    {
        public bool SnapshotOperationsSupported { get; set; }

        public bool MultipleSnapshotsSupported { get; set; }

        public bool SnapshotConfigSupported { get; set; }

        public bool PoweredOffSnapshotsSupported { get; set; }

        public bool MemorySnapshotsSupported { get; set; }

        public bool RevertToSnapshotSupported { get; set; }

        public bool QuiescedSnapshotsSupported { get; set; }

        public bool DisableSnapshotsSupported { get; set; }

        public bool LockSnapshotsSupported { get; set; }

        public bool ConsolePreferencesSupported { get; set; }

        public bool CpuFeatureMaskSupported { get; set; }

        public bool S1AcpiManagementSupported { get; set; }

        public bool SettingScreenResolutionSupported { get; set; }

        public bool ToolsAutoUpdateSupported { get; set; }

        public bool VmNpivWwnSupported { get; set; }

        public bool NpivWwnOnNonRdmVmSupported { get; set; }

        public bool VmNpivWwnDisableSupported { get; set; }

        public bool VmNpivWwnUpdateSupported { get; set; }

        public bool SwapPlacementSupported { get; set; }

        public bool ToolsSyncTimeSupported { get; set; }

        public bool VirtualMmuUsageSupported { get; set; }

        public bool DiskSharesSupported { get; set; }

        public bool BootOptionsSupported { get; set; }

        public bool BootRetryOptionsSupported { get; set; }

        public bool SettingVideoRamSizeSupported { get; set; }

        public bool SettingDisplayTopologySupported { get; set; }

        public bool RecordReplaySupported { get; set; }

        public bool ChangeTrackingSupported { get; set; }

        public bool MultipleCoresPerSocketSupported { get; set; }

        public bool HostBasedReplicationSupported { get; set; }

        public bool GuestAutoLockSupported { get; set; }

        public bool MemoryReservationLockSupported { get; set; }

        public bool FeatureRequirementSupported { get; set; }

        public bool PoweredOnMonitorTypeChangeSupported { get; set; }

        public bool SeSparseDiskSupported { get; set; }

        public bool NestedHVSupported { get; set; }

        public bool VPMCSupported { get; set; }

        public bool? SecureBootSupported { get; set; }

        public bool? PerVmEvcSupported { get; set; }

        public bool? VirtualMmuUsageIgnored { get; set; }

        public bool? VirtualExecUsageIgnored { get; set; }

        public bool? DiskOnlySnapshotOnSuspendedVMSupported { get; set; }

        public bool Equals(VirtualMachineCapability virtualMachineCapability)
        {
            return (virtualMachineCapability != null && this.SnapshotOperationsSupported == virtualMachineCapability.SnapshotOperationsSupported && this.MultipleSnapshotsSupported == virtualMachineCapability.MultipleSnapshotsSupported && this.SnapshotConfigSupported == virtualMachineCapability.SnapshotConfigSupported && this.PoweredOffSnapshotsSupported == virtualMachineCapability.PoweredOffSnapshotsSupported && this.MemorySnapshotsSupported == virtualMachineCapability.MemorySnapshotsSupported && this.RevertToSnapshotSupported == virtualMachineCapability.RevertToSnapshotSupported && this.QuiescedSnapshotsSupported == virtualMachineCapability.QuiescedSnapshotsSupported && this.DisableSnapshotsSupported == virtualMachineCapability.DisableSnapshotsSupported && this.LockSnapshotsSupported == virtualMachineCapability.LockSnapshotsSupported && this.ConsolePreferencesSupported == virtualMachineCapability.ConsolePreferencesSupported && this.CpuFeatureMaskSupported == virtualMachineCapability.CpuFeatureMaskSupported && this.S1AcpiManagementSupported == virtualMachineCapability.S1AcpiManagementSupported && this.SettingScreenResolutionSupported == virtualMachineCapability.SettingScreenResolutionSupported && this.ToolsAutoUpdateSupported == virtualMachineCapability.ToolsAutoUpdateSupported && this.VmNpivWwnSupported == virtualMachineCapability.VmNpivWwnSupported && this.NpivWwnOnNonRdmVmSupported == virtualMachineCapability.NpivWwnOnNonRdmVmSupported && this.VmNpivWwnDisableSupported == virtualMachineCapability.VmNpivWwnDisableSupported && this.VmNpivWwnUpdateSupported == virtualMachineCapability.VmNpivWwnUpdateSupported && this.SwapPlacementSupported == virtualMachineCapability.SwapPlacementSupported && this.ToolsSyncTimeSupported == virtualMachineCapability.ToolsSyncTimeSupported && this.VirtualMmuUsageSupported == virtualMachineCapability.VirtualMmuUsageSupported && this.DiskSharesSupported == virtualMachineCapability.DiskSharesSupported && this.BootOptionsSupported == virtualMachineCapability.BootOptionsSupported && this.BootRetryOptionsSupported == virtualMachineCapability.BootRetryOptionsSupported && this.SettingVideoRamSizeSupported == virtualMachineCapability.SettingVideoRamSizeSupported && this.SettingDisplayTopologySupported == virtualMachineCapability.SettingDisplayTopologySupported && this.RecordReplaySupported == virtualMachineCapability.RecordReplaySupported && this.ChangeTrackingSupported == virtualMachineCapability.ChangeTrackingSupported && this.MultipleCoresPerSocketSupported == virtualMachineCapability.MultipleCoresPerSocketSupported && this.HostBasedReplicationSupported == virtualMachineCapability.HostBasedReplicationSupported && this.GuestAutoLockSupported == virtualMachineCapability.GuestAutoLockSupported && this.MemoryReservationLockSupported == virtualMachineCapability.MemoryReservationLockSupported && this.FeatureRequirementSupported == virtualMachineCapability.FeatureRequirementSupported && this.PoweredOnMonitorTypeChangeSupported == virtualMachineCapability.PoweredOnMonitorTypeChangeSupported && this.SeSparseDiskSupported == virtualMachineCapability.SeSparseDiskSupported && this.NestedHVSupported == virtualMachineCapability.NestedHVSupported && this.VPMCSupported == virtualMachineCapability.VPMCSupported && ((this.SecureBootSupported == null && virtualMachineCapability.SecureBootSupported == null) || (this.SecureBootSupported != null && this.SecureBootSupported.Equals(virtualMachineCapability.SecureBootSupported))) && ((this.PerVmEvcSupported == null && virtualMachineCapability.PerVmEvcSupported == null) || (this.PerVmEvcSupported != null && this.PerVmEvcSupported.Equals(virtualMachineCapability.PerVmEvcSupported))) && ((this.VirtualMmuUsageIgnored == null && virtualMachineCapability.VirtualMmuUsageIgnored == null) || (this.VirtualMmuUsageIgnored != null && this.VirtualMmuUsageIgnored.Equals(virtualMachineCapability.VirtualMmuUsageIgnored))) && ((this.VirtualExecUsageIgnored == null && virtualMachineCapability.VirtualExecUsageIgnored == null) || (this.VirtualExecUsageIgnored != null && this.VirtualExecUsageIgnored.Equals(virtualMachineCapability.VirtualExecUsageIgnored))) && ((this.DiskOnlySnapshotOnSuspendedVMSupported == null && virtualMachineCapability.DiskOnlySnapshotOnSuspendedVMSupported == null) || (this.DiskOnlySnapshotOnSuspendedVMSupported != null && this.DiskOnlySnapshotOnSuspendedVMSupported.Equals(virtualMachineCapability.DiskOnlySnapshotOnSuspendedVMSupported))));
        }

        public override bool Equals(object virtualMachineCapability)
        {
            return Equals(virtualMachineCapability as VirtualMachineCapability);
        }

        public override int GetHashCode()
        {
            return (SnapshotOperationsSupported + "_" + MultipleSnapshotsSupported + "_" + SnapshotConfigSupported + "_" + PoweredOffSnapshotsSupported + "_" + MemorySnapshotsSupported + "_" + RevertToSnapshotSupported + "_" + QuiescedSnapshotsSupported + "_" + DisableSnapshotsSupported + "_" + LockSnapshotsSupported + "_" + ConsolePreferencesSupported + "_" + CpuFeatureMaskSupported + "_" + S1AcpiManagementSupported + "_" + SettingScreenResolutionSupported + "_" + ToolsAutoUpdateSupported + "_" + VmNpivWwnSupported + "_" + NpivWwnOnNonRdmVmSupported + "_" + VmNpivWwnDisableSupported + "_" + VmNpivWwnUpdateSupported + "_" + SwapPlacementSupported + "_" + ToolsSyncTimeSupported + "_" + VirtualMmuUsageSupported + "_" + DiskSharesSupported + "_" + BootOptionsSupported + "_" + BootRetryOptionsSupported + "_" + SettingVideoRamSizeSupported + "_" + SettingDisplayTopologySupported + "_" + RecordReplaySupported + "_" + ChangeTrackingSupported + "_" + MultipleCoresPerSocketSupported + "_" + HostBasedReplicationSupported + "_" + GuestAutoLockSupported + "_" + MemoryReservationLockSupported + "_" + FeatureRequirementSupported + "_" + PoweredOnMonitorTypeChangeSupported + "_" + SeSparseDiskSupported + "_" + NestedHVSupported + "_" + VPMCSupported + "_" + SecureBootSupported + "_" + PerVmEvcSupported + "_" + VirtualMmuUsageIgnored + "_" + VirtualExecUsageIgnored + "_" + DiskOnlySnapshotOnSuspendedVMSupported).GetHashCode();
        }
    }

    public class VirtualMachineCdromInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineCdromInfo>
    {
        public string Description { get; set; }

        public bool Equals(VirtualMachineCdromInfo virtualMachineCdromInfo)
        {
            return (virtualMachineCdromInfo != null && this.Description == virtualMachineCdromInfo.Description);
        }

        public override bool Equals(object virtualMachineCdromInfo)
        {
            return Equals(virtualMachineCdromInfo as VirtualMachineCdromInfo);
        }

        public override int GetHashCode()
        {
            return (Description).GetHashCode();
        }
    }

    public class VirtualMachineCloneSpec : DynamicData, IEquatable<VirtualMachineCloneSpec>
    {
        public VirtualMachineRelocateSpec Location { get; set; }

        public bool Template { get; set; }

        public VirtualMachineConfigSpec Config { get; set; }

        public CustomizationSpec Customization { get; set; }

        public bool PowerOn { get; set; }

        public ManagedObjectReference Snapshot { get; set; }

        public bool? Memory { get; set; }

        public VirtualMachineCloneSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineCloneSpec virtualMachineCloneSpec)
        {
            return (virtualMachineCloneSpec != null && ((this.Location == null && virtualMachineCloneSpec.Location == null) || (this.Location != null && this.Location.Equals(virtualMachineCloneSpec.Location))) && this.Template == virtualMachineCloneSpec.Template && ((this.Config == null && virtualMachineCloneSpec.Config == null) || (this.Config != null && this.Config.Equals(virtualMachineCloneSpec.Config))) && ((this.Customization == null && virtualMachineCloneSpec.Customization == null) || (this.Customization != null && this.Customization.Equals(virtualMachineCloneSpec.Customization))) && this.PowerOn == virtualMachineCloneSpec.PowerOn && ((this.Snapshot == null && virtualMachineCloneSpec.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(virtualMachineCloneSpec.Snapshot))) && ((this.Memory == null && virtualMachineCloneSpec.Memory == null) || (this.Memory != null && this.Memory.Equals(virtualMachineCloneSpec.Memory))) && ((this.LinkedView == null && virtualMachineCloneSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineCloneSpec.LinkedView))));
        }

        public override bool Equals(object virtualMachineCloneSpec)
        {
            return Equals(virtualMachineCloneSpec as VirtualMachineCloneSpec);
        }

        public override int GetHashCode()
        {
            return (Location + "_" + Template + "_" + Config + "_" + Customization + "_" + PowerOn + "_" + Snapshot + "_" + Memory + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineCloneSpec_LinkedView : IEquatable<VirtualMachineCloneSpec_LinkedView>
    {
        public VirtualMachineSnapshot Snapshot { get; set; }

        public bool Equals(VirtualMachineCloneSpec_LinkedView virtualMachineCloneSpec_LinkedView)
        {
            return (virtualMachineCloneSpec_LinkedView != null && ((this.Snapshot == null && virtualMachineCloneSpec_LinkedView.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(virtualMachineCloneSpec_LinkedView.Snapshot))));
        }

        public override bool Equals(object virtualMachineCloneSpec_LinkedView)
        {
            return Equals(virtualMachineCloneSpec_LinkedView as VirtualMachineCloneSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Snapshot).GetHashCode();
        }
    }

    public class VirtualMachineCompatibilityChecker : ViewBase, IEquatable<VirtualMachineCompatibilityChecker>
    {
        public ManagedObjectReference CheckCompatibility_Task(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckCompatibility(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckVmConfig_Task(VirtualMachineConfigSpec spec, ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckVmConfig(VirtualMachineConfigSpec spec, ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckPowerOn_Task(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckPowerOn(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, string[] testType)
        {
            return default(CheckResult[]);
        }

        public bool Equals(VirtualMachineCompatibilityChecker virtualMachineCompatibilityChecker)
        {
            return (virtualMachineCompatibilityChecker != null && base.Equals(virtualMachineCompatibilityChecker));
        }

        public override bool Equals(object virtualMachineCompatibilityChecker)
        {
            return Equals(virtualMachineCompatibilityChecker as VirtualMachineCompatibilityChecker);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineConfigInfo : DynamicData, IEquatable<VirtualMachineConfigInfo>
    {
        public string ChangeVersion { get; set; }

        public DateTime Modified { get; set; }

        public string Name { get; set; }

        public string GuestFullName { get; set; }

        public string Version { get; set; }

        public string Uuid { get; set; }

        public DateTime? CreateDate { get; set; }

        public string InstanceUuid { get; set; }

        public long[] NpivNodeWorldWideName { get; set; }

        public long[] NpivPortWorldWideName { get; set; }

        public string NpivWorldWideNameType { get; set; }

        public short? NpivDesiredNodeWwns { get; set; }

        public short? NpivDesiredPortWwns { get; set; }

        public bool? NpivTemporaryDisabled { get; set; }

        public bool? NpivOnNonRdmDisks { get; set; }

        public string LocationId { get; set; }

        public bool Template { get; set; }

        public string GuestId { get; set; }

        public string AlternateGuestName { get; set; }

        public string Annotation { get; set; }

        public VirtualMachineFileInfo Files { get; set; }

        public ToolsConfigInfo Tools { get; set; }

        public VirtualMachineFlagInfo Flags { get; set; }

        public VirtualMachineConsolePreferences ConsolePreferences { get; set; }

        public VirtualMachineDefaultPowerOpInfo DefaultPowerOps { get; set; }

        public VirtualHardware Hardware { get; set; }

        public ResourceAllocationInfo CpuAllocation { get; set; }

        public ResourceAllocationInfo MemoryAllocation { get; set; }

        public LatencySensitivity LatencySensitivity { get; set; }

        public bool? MemoryHotAddEnabled { get; set; }

        public bool? CpuHotAddEnabled { get; set; }

        public bool? CpuHotRemoveEnabled { get; set; }

        public long? HotPlugMemoryLimit { get; set; }

        public long? HotPlugMemoryIncrementSize { get; set; }

        public VirtualMachineAffinityInfo CpuAffinity { get; set; }

        public VirtualMachineAffinityInfo MemoryAffinity { get; set; }

        public VirtualMachineNetworkShaperInfo NetworkShaper { get; set; }

        public OptionValue[] ExtraConfig { get; set; }

        public HostCpuIdInfo[] CpuFeatureMask { get; set; }

        public VirtualMachineConfigInfoDatastoreUrlPair[] DatastoreUrl { get; set; }

        public string SwapPlacement { get; set; }

        public VirtualMachineBootOptions BootOptions { get; set; }

        public FaultToleranceConfigInfo FtInfo { get; set; }

        public ReplicationConfigSpec RepConfig { get; set; }

        public VmConfigInfo VAppConfig { get; set; }

        public bool? VAssertsEnabled { get; set; }

        public bool? ChangeTrackingEnabled { get; set; }

        public string Firmware { get; set; }

        public int? MaxMksConnections { get; set; }

        public bool? GuestAutoLockEnabled { get; set; }

        public ManagedByInfo ManagedBy { get; set; }

        public bool? MemoryReservationLockedToMax { get; set; }

        public VirtualMachineConfigInfoOverheadInfo InitialOverhead { get; set; }

        public bool? NestedHVEnabled { get; set; }

        public bool? VPMCEnabled { get; set; }

        public ScheduledHardwareUpgradeInfo ScheduledHardwareUpgradeInfo { get; set; }

        public VirtualMachineForkConfigInfo ForkConfigInfo { get; set; }

        public long? VFlashCacheReservation { get; set; }

        public byte[] VmxConfigChecksum { get; set; }

        public bool? MessageBusTunnelEnabled { get; set; }

        public string VmStorageObjectId { get; set; }

        public string SwapStorageObjectId { get; set; }

        public CryptoKeyId KeyId { get; set; }

        public VirtualMachineGuestIntegrityInfo GuestIntegrityInfo { get; set; }

        public string MigrateEncryption { get; set; }

        public bool Equals(VirtualMachineConfigInfo virtualMachineConfigInfo)
        {
            return (virtualMachineConfigInfo != null && this.ChangeVersion == virtualMachineConfigInfo.ChangeVersion && this.Modified == virtualMachineConfigInfo.Modified && this.Name == virtualMachineConfigInfo.Name && this.GuestFullName == virtualMachineConfigInfo.GuestFullName && this.Version == virtualMachineConfigInfo.Version && this.Uuid == virtualMachineConfigInfo.Uuid && ((this.CreateDate == null && virtualMachineConfigInfo.CreateDate == null) || (this.CreateDate != null && this.CreateDate.Equals(virtualMachineConfigInfo.CreateDate))) && this.InstanceUuid == virtualMachineConfigInfo.InstanceUuid && ((this.NpivNodeWorldWideName == null && virtualMachineConfigInfo.NpivNodeWorldWideName == null) || (this.NpivNodeWorldWideName != null && virtualMachineConfigInfo.NpivNodeWorldWideName != null && Enumerable.SequenceEqual(this.NpivNodeWorldWideName, virtualMachineConfigInfo.NpivNodeWorldWideName))) && ((this.NpivPortWorldWideName == null && virtualMachineConfigInfo.NpivPortWorldWideName == null) || (this.NpivPortWorldWideName != null && virtualMachineConfigInfo.NpivPortWorldWideName != null && Enumerable.SequenceEqual(this.NpivPortWorldWideName, virtualMachineConfigInfo.NpivPortWorldWideName))) && this.NpivWorldWideNameType == virtualMachineConfigInfo.NpivWorldWideNameType && ((this.NpivDesiredNodeWwns == null && virtualMachineConfigInfo.NpivDesiredNodeWwns == null) || (this.NpivDesiredNodeWwns != null && this.NpivDesiredNodeWwns.Equals(virtualMachineConfigInfo.NpivDesiredNodeWwns))) && ((this.NpivDesiredPortWwns == null && virtualMachineConfigInfo.NpivDesiredPortWwns == null) || (this.NpivDesiredPortWwns != null && this.NpivDesiredPortWwns.Equals(virtualMachineConfigInfo.NpivDesiredPortWwns))) && ((this.NpivTemporaryDisabled == null && virtualMachineConfigInfo.NpivTemporaryDisabled == null) || (this.NpivTemporaryDisabled != null && this.NpivTemporaryDisabled.Equals(virtualMachineConfigInfo.NpivTemporaryDisabled))) && ((this.NpivOnNonRdmDisks == null && virtualMachineConfigInfo.NpivOnNonRdmDisks == null) || (this.NpivOnNonRdmDisks != null && this.NpivOnNonRdmDisks.Equals(virtualMachineConfigInfo.NpivOnNonRdmDisks))) && this.LocationId == virtualMachineConfigInfo.LocationId && this.Template == virtualMachineConfigInfo.Template && this.GuestId == virtualMachineConfigInfo.GuestId && this.AlternateGuestName == virtualMachineConfigInfo.AlternateGuestName && this.Annotation == virtualMachineConfigInfo.Annotation && ((this.Files == null && virtualMachineConfigInfo.Files == null) || (this.Files != null && this.Files.Equals(virtualMachineConfigInfo.Files))) && ((this.Tools == null && virtualMachineConfigInfo.Tools == null) || (this.Tools != null && this.Tools.Equals(virtualMachineConfigInfo.Tools))) && ((this.Flags == null && virtualMachineConfigInfo.Flags == null) || (this.Flags != null && this.Flags.Equals(virtualMachineConfigInfo.Flags))) && ((this.ConsolePreferences == null && virtualMachineConfigInfo.ConsolePreferences == null) || (this.ConsolePreferences != null && this.ConsolePreferences.Equals(virtualMachineConfigInfo.ConsolePreferences))) && ((this.DefaultPowerOps == null && virtualMachineConfigInfo.DefaultPowerOps == null) || (this.DefaultPowerOps != null && this.DefaultPowerOps.Equals(virtualMachineConfigInfo.DefaultPowerOps))) && ((this.Hardware == null && virtualMachineConfigInfo.Hardware == null) || (this.Hardware != null && this.Hardware.Equals(virtualMachineConfigInfo.Hardware))) && ((this.CpuAllocation == null && virtualMachineConfigInfo.CpuAllocation == null) || (this.CpuAllocation != null && this.CpuAllocation.Equals(virtualMachineConfigInfo.CpuAllocation))) && ((this.MemoryAllocation == null && virtualMachineConfigInfo.MemoryAllocation == null) || (this.MemoryAllocation != null && this.MemoryAllocation.Equals(virtualMachineConfigInfo.MemoryAllocation))) && ((this.LatencySensitivity == null && virtualMachineConfigInfo.LatencySensitivity == null) || (this.LatencySensitivity != null && this.LatencySensitivity.Equals(virtualMachineConfigInfo.LatencySensitivity))) && ((this.MemoryHotAddEnabled == null && virtualMachineConfigInfo.MemoryHotAddEnabled == null) || (this.MemoryHotAddEnabled != null && this.MemoryHotAddEnabled.Equals(virtualMachineConfigInfo.MemoryHotAddEnabled))) && ((this.CpuHotAddEnabled == null && virtualMachineConfigInfo.CpuHotAddEnabled == null) || (this.CpuHotAddEnabled != null && this.CpuHotAddEnabled.Equals(virtualMachineConfigInfo.CpuHotAddEnabled))) && ((this.CpuHotRemoveEnabled == null && virtualMachineConfigInfo.CpuHotRemoveEnabled == null) || (this.CpuHotRemoveEnabled != null && this.CpuHotRemoveEnabled.Equals(virtualMachineConfigInfo.CpuHotRemoveEnabled))) && ((this.HotPlugMemoryLimit == null && virtualMachineConfigInfo.HotPlugMemoryLimit == null) || (this.HotPlugMemoryLimit != null && this.HotPlugMemoryLimit.Equals(virtualMachineConfigInfo.HotPlugMemoryLimit))) && ((this.HotPlugMemoryIncrementSize == null && virtualMachineConfigInfo.HotPlugMemoryIncrementSize == null) || (this.HotPlugMemoryIncrementSize != null && this.HotPlugMemoryIncrementSize.Equals(virtualMachineConfigInfo.HotPlugMemoryIncrementSize))) && ((this.CpuAffinity == null && virtualMachineConfigInfo.CpuAffinity == null) || (this.CpuAffinity != null && this.CpuAffinity.Equals(virtualMachineConfigInfo.CpuAffinity))) && ((this.MemoryAffinity == null && virtualMachineConfigInfo.MemoryAffinity == null) || (this.MemoryAffinity != null && this.MemoryAffinity.Equals(virtualMachineConfigInfo.MemoryAffinity))) && ((this.NetworkShaper == null && virtualMachineConfigInfo.NetworkShaper == null) || (this.NetworkShaper != null && this.NetworkShaper.Equals(virtualMachineConfigInfo.NetworkShaper))) && ((this.ExtraConfig == null && virtualMachineConfigInfo.ExtraConfig == null) || (this.ExtraConfig != null && virtualMachineConfigInfo.ExtraConfig != null && Enumerable.SequenceEqual(this.ExtraConfig, virtualMachineConfigInfo.ExtraConfig))) && ((this.CpuFeatureMask == null && virtualMachineConfigInfo.CpuFeatureMask == null) || (this.CpuFeatureMask != null && virtualMachineConfigInfo.CpuFeatureMask != null && Enumerable.SequenceEqual(this.CpuFeatureMask, virtualMachineConfigInfo.CpuFeatureMask))) && ((this.DatastoreUrl == null && virtualMachineConfigInfo.DatastoreUrl == null) || (this.DatastoreUrl != null && virtualMachineConfigInfo.DatastoreUrl != null && Enumerable.SequenceEqual(this.DatastoreUrl, virtualMachineConfigInfo.DatastoreUrl))) && this.SwapPlacement == virtualMachineConfigInfo.SwapPlacement && ((this.BootOptions == null && virtualMachineConfigInfo.BootOptions == null) || (this.BootOptions != null && this.BootOptions.Equals(virtualMachineConfigInfo.BootOptions))) && ((this.FtInfo == null && virtualMachineConfigInfo.FtInfo == null) || (this.FtInfo != null && this.FtInfo.Equals(virtualMachineConfigInfo.FtInfo))) && ((this.RepConfig == null && virtualMachineConfigInfo.RepConfig == null) || (this.RepConfig != null && this.RepConfig.Equals(virtualMachineConfigInfo.RepConfig))) && ((this.VAppConfig == null && virtualMachineConfigInfo.VAppConfig == null) || (this.VAppConfig != null && this.VAppConfig.Equals(virtualMachineConfigInfo.VAppConfig))) && ((this.VAssertsEnabled == null && virtualMachineConfigInfo.VAssertsEnabled == null) || (this.VAssertsEnabled != null && this.VAssertsEnabled.Equals(virtualMachineConfigInfo.VAssertsEnabled))) && ((this.ChangeTrackingEnabled == null && virtualMachineConfigInfo.ChangeTrackingEnabled == null) || (this.ChangeTrackingEnabled != null && this.ChangeTrackingEnabled.Equals(virtualMachineConfigInfo.ChangeTrackingEnabled))) && this.Firmware == virtualMachineConfigInfo.Firmware && ((this.MaxMksConnections == null && virtualMachineConfigInfo.MaxMksConnections == null) || (this.MaxMksConnections != null && this.MaxMksConnections.Equals(virtualMachineConfigInfo.MaxMksConnections))) && ((this.GuestAutoLockEnabled == null && virtualMachineConfigInfo.GuestAutoLockEnabled == null) || (this.GuestAutoLockEnabled != null && this.GuestAutoLockEnabled.Equals(virtualMachineConfigInfo.GuestAutoLockEnabled))) && ((this.ManagedBy == null && virtualMachineConfigInfo.ManagedBy == null) || (this.ManagedBy != null && this.ManagedBy.Equals(virtualMachineConfigInfo.ManagedBy))) && ((this.MemoryReservationLockedToMax == null && virtualMachineConfigInfo.MemoryReservationLockedToMax == null) || (this.MemoryReservationLockedToMax != null && this.MemoryReservationLockedToMax.Equals(virtualMachineConfigInfo.MemoryReservationLockedToMax))) && ((this.InitialOverhead == null && virtualMachineConfigInfo.InitialOverhead == null) || (this.InitialOverhead != null && this.InitialOverhead.Equals(virtualMachineConfigInfo.InitialOverhead))) && ((this.NestedHVEnabled == null && virtualMachineConfigInfo.NestedHVEnabled == null) || (this.NestedHVEnabled != null && this.NestedHVEnabled.Equals(virtualMachineConfigInfo.NestedHVEnabled))) && ((this.VPMCEnabled == null && virtualMachineConfigInfo.VPMCEnabled == null) || (this.VPMCEnabled != null && this.VPMCEnabled.Equals(virtualMachineConfigInfo.VPMCEnabled))) && ((this.ScheduledHardwareUpgradeInfo == null && virtualMachineConfigInfo.ScheduledHardwareUpgradeInfo == null) || (this.ScheduledHardwareUpgradeInfo != null && this.ScheduledHardwareUpgradeInfo.Equals(virtualMachineConfigInfo.ScheduledHardwareUpgradeInfo))) && ((this.ForkConfigInfo == null && virtualMachineConfigInfo.ForkConfigInfo == null) || (this.ForkConfigInfo != null && this.ForkConfigInfo.Equals(virtualMachineConfigInfo.ForkConfigInfo))) && ((this.VFlashCacheReservation == null && virtualMachineConfigInfo.VFlashCacheReservation == null) || (this.VFlashCacheReservation != null && this.VFlashCacheReservation.Equals(virtualMachineConfigInfo.VFlashCacheReservation))) && ((this.VmxConfigChecksum == null && virtualMachineConfigInfo.VmxConfigChecksum == null) || (this.VmxConfigChecksum != null && virtualMachineConfigInfo.VmxConfigChecksum != null && Enumerable.SequenceEqual(this.VmxConfigChecksum, virtualMachineConfigInfo.VmxConfigChecksum))) && ((this.MessageBusTunnelEnabled == null && virtualMachineConfigInfo.MessageBusTunnelEnabled == null) || (this.MessageBusTunnelEnabled != null && this.MessageBusTunnelEnabled.Equals(virtualMachineConfigInfo.MessageBusTunnelEnabled))) && this.VmStorageObjectId == virtualMachineConfigInfo.VmStorageObjectId && this.SwapStorageObjectId == virtualMachineConfigInfo.SwapStorageObjectId && ((this.KeyId == null && virtualMachineConfigInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(virtualMachineConfigInfo.KeyId))) && ((this.GuestIntegrityInfo == null && virtualMachineConfigInfo.GuestIntegrityInfo == null) || (this.GuestIntegrityInfo != null && this.GuestIntegrityInfo.Equals(virtualMachineConfigInfo.GuestIntegrityInfo))) && this.MigrateEncryption == virtualMachineConfigInfo.MigrateEncryption);
        }

        public override bool Equals(object virtualMachineConfigInfo)
        {
            return Equals(virtualMachineConfigInfo as VirtualMachineConfigInfo);
        }

        public override int GetHashCode()
        {
            return (ChangeVersion + "_" + Modified + "_" + Name + "_" + GuestFullName + "_" + Version + "_" + Uuid + "_" + CreateDate + "_" + InstanceUuid + "_" + NpivNodeWorldWideName + "_" + NpivPortWorldWideName + "_" + NpivWorldWideNameType + "_" + NpivDesiredNodeWwns + "_" + NpivDesiredPortWwns + "_" + NpivTemporaryDisabled + "_" + NpivOnNonRdmDisks + "_" + LocationId + "_" + Template + "_" + GuestId + "_" + AlternateGuestName + "_" + Annotation + "_" + Files + "_" + Tools + "_" + Flags + "_" + ConsolePreferences + "_" + DefaultPowerOps + "_" + Hardware + "_" + CpuAllocation + "_" + MemoryAllocation + "_" + LatencySensitivity + "_" + MemoryHotAddEnabled + "_" + CpuHotAddEnabled + "_" + CpuHotRemoveEnabled + "_" + HotPlugMemoryLimit + "_" + HotPlugMemoryIncrementSize + "_" + CpuAffinity + "_" + MemoryAffinity + "_" + NetworkShaper + "_" + ExtraConfig + "_" + CpuFeatureMask + "_" + DatastoreUrl + "_" + SwapPlacement + "_" + BootOptions + "_" + FtInfo + "_" + RepConfig + "_" + VAppConfig + "_" + VAssertsEnabled + "_" + ChangeTrackingEnabled + "_" + Firmware + "_" + MaxMksConnections + "_" + GuestAutoLockEnabled + "_" + ManagedBy + "_" + MemoryReservationLockedToMax + "_" + InitialOverhead + "_" + NestedHVEnabled + "_" + VPMCEnabled + "_" + ScheduledHardwareUpgradeInfo + "_" + ForkConfigInfo + "_" + VFlashCacheReservation + "_" + VmxConfigChecksum + "_" + MessageBusTunnelEnabled + "_" + VmStorageObjectId + "_" + SwapStorageObjectId + "_" + KeyId + "_" + GuestIntegrityInfo + "_" + MigrateEncryption).GetHashCode();
        }
    }

    public class VirtualMachineConfigInfoDatastoreUrlPair : DynamicData, IEquatable<VirtualMachineConfigInfoDatastoreUrlPair>
    {
        public string Name { get; set; }

        public string Url { get; set; }

        public bool Equals(VirtualMachineConfigInfoDatastoreUrlPair virtualMachineConfigInfoDatastoreUrlPair)
        {
            return (virtualMachineConfigInfoDatastoreUrlPair != null && this.Name == virtualMachineConfigInfoDatastoreUrlPair.Name && this.Url == virtualMachineConfigInfoDatastoreUrlPair.Url);
        }

        public override bool Equals(object virtualMachineConfigInfoDatastoreUrlPair)
        {
            return Equals(virtualMachineConfigInfoDatastoreUrlPair as VirtualMachineConfigInfoDatastoreUrlPair);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Url).GetHashCode();
        }
    }

    public class VirtualMachineConfigInfoOverheadInfo : DynamicData, IEquatable<VirtualMachineConfigInfoOverheadInfo>
    {
        public long? InitialMemoryReservation { get; set; }

        public long? InitialSwapReservation { get; set; }

        public bool Equals(VirtualMachineConfigInfoOverheadInfo virtualMachineConfigInfoOverheadInfo)
        {
            return (virtualMachineConfigInfoOverheadInfo != null && ((this.InitialMemoryReservation == null && virtualMachineConfigInfoOverheadInfo.InitialMemoryReservation == null) || (this.InitialMemoryReservation != null && this.InitialMemoryReservation.Equals(virtualMachineConfigInfoOverheadInfo.InitialMemoryReservation))) && ((this.InitialSwapReservation == null && virtualMachineConfigInfoOverheadInfo.InitialSwapReservation == null) || (this.InitialSwapReservation != null && this.InitialSwapReservation.Equals(virtualMachineConfigInfoOverheadInfo.InitialSwapReservation))));
        }

        public override bool Equals(object virtualMachineConfigInfoOverheadInfo)
        {
            return Equals(virtualMachineConfigInfoOverheadInfo as VirtualMachineConfigInfoOverheadInfo);
        }

        public override int GetHashCode()
        {
            return (InitialMemoryReservation + "_" + InitialSwapReservation).GetHashCode();
        }
    }

    public class VirtualMachineConfigOption : DynamicData, IEquatable<VirtualMachineConfigOption>
    {
        public string Version { get; set; }

        public string Description { get; set; }

        public GuestOsDescriptor[] GuestOSDescriptor { get; set; }

        public int GuestOSDefaultIndex { get; set; }

        public VirtualHardwareOption HardwareOptions { get; set; }

        public VirtualMachineCapability Capabilities { get; set; }

        public DatastoreOption Datastore { get; set; }

        public VirtualDevice[] DefaultDevice { get; set; }

        public string[] SupportedMonitorType { get; set; }

        public string[] SupportedOvfEnvironmentTransport { get; set; }

        public string[] SupportedOvfInstallTransport { get; set; }

        public VirtualMachinePropertyRelation[] PropertyRelations { get; set; }

        public bool Equals(VirtualMachineConfigOption virtualMachineConfigOption)
        {
            return (virtualMachineConfigOption != null && this.Version == virtualMachineConfigOption.Version && this.Description == virtualMachineConfigOption.Description && ((this.GuestOSDescriptor == null && virtualMachineConfigOption.GuestOSDescriptor == null) || (this.GuestOSDescriptor != null && virtualMachineConfigOption.GuestOSDescriptor != null && Enumerable.SequenceEqual(this.GuestOSDescriptor, virtualMachineConfigOption.GuestOSDescriptor))) && this.GuestOSDefaultIndex == virtualMachineConfigOption.GuestOSDefaultIndex && ((this.HardwareOptions == null && virtualMachineConfigOption.HardwareOptions == null) || (this.HardwareOptions != null && this.HardwareOptions.Equals(virtualMachineConfigOption.HardwareOptions))) && ((this.Capabilities == null && virtualMachineConfigOption.Capabilities == null) || (this.Capabilities != null && this.Capabilities.Equals(virtualMachineConfigOption.Capabilities))) && ((this.Datastore == null && virtualMachineConfigOption.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineConfigOption.Datastore))) && ((this.DefaultDevice == null && virtualMachineConfigOption.DefaultDevice == null) || (this.DefaultDevice != null && virtualMachineConfigOption.DefaultDevice != null && Enumerable.SequenceEqual(this.DefaultDevice, virtualMachineConfigOption.DefaultDevice))) && ((this.SupportedMonitorType == null && virtualMachineConfigOption.SupportedMonitorType == null) || (this.SupportedMonitorType != null && virtualMachineConfigOption.SupportedMonitorType != null && Enumerable.SequenceEqual(this.SupportedMonitorType, virtualMachineConfigOption.SupportedMonitorType))) && ((this.SupportedOvfEnvironmentTransport == null && virtualMachineConfigOption.SupportedOvfEnvironmentTransport == null) || (this.SupportedOvfEnvironmentTransport != null && virtualMachineConfigOption.SupportedOvfEnvironmentTransport != null && Enumerable.SequenceEqual(this.SupportedOvfEnvironmentTransport, virtualMachineConfigOption.SupportedOvfEnvironmentTransport))) && ((this.SupportedOvfInstallTransport == null && virtualMachineConfigOption.SupportedOvfInstallTransport == null) || (this.SupportedOvfInstallTransport != null && virtualMachineConfigOption.SupportedOvfInstallTransport != null && Enumerable.SequenceEqual(this.SupportedOvfInstallTransport, virtualMachineConfigOption.SupportedOvfInstallTransport))) && ((this.PropertyRelations == null && virtualMachineConfigOption.PropertyRelations == null) || (this.PropertyRelations != null && virtualMachineConfigOption.PropertyRelations != null && Enumerable.SequenceEqual(this.PropertyRelations, virtualMachineConfigOption.PropertyRelations))));
        }

        public override bool Equals(object virtualMachineConfigOption)
        {
            return Equals(virtualMachineConfigOption as VirtualMachineConfigOption);
        }

        public override int GetHashCode()
        {
            return (Version + "_" + Description + "_" + GuestOSDescriptor + "_" + GuestOSDefaultIndex + "_" + HardwareOptions + "_" + Capabilities + "_" + Datastore + "_" + DefaultDevice + "_" + SupportedMonitorType + "_" + SupportedOvfEnvironmentTransport + "_" + SupportedOvfInstallTransport + "_" + PropertyRelations).GetHashCode();
        }
    }

    public class VirtualMachineConfigOptionDescriptor : DynamicData, IEquatable<VirtualMachineConfigOptionDescriptor>
    {
        public string Key { get; set; }

        public string Description { get; set; }

        public ManagedObjectReference[] Host { get; set; }

        public bool CreateSupported { get; set; }

        public bool DefaultConfigOption { get; set; }

        public bool RunSupported { get; set; }

        public bool UpgradeSupported { get; set; }

        public VirtualMachineConfigOptionDescriptor_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineConfigOptionDescriptor virtualMachineConfigOptionDescriptor)
        {
            return (virtualMachineConfigOptionDescriptor != null && this.Key == virtualMachineConfigOptionDescriptor.Key && this.Description == virtualMachineConfigOptionDescriptor.Description && ((this.Host == null && virtualMachineConfigOptionDescriptor.Host == null) || (this.Host != null && virtualMachineConfigOptionDescriptor.Host != null && Enumerable.SequenceEqual(this.Host, virtualMachineConfigOptionDescriptor.Host))) && this.CreateSupported == virtualMachineConfigOptionDescriptor.CreateSupported && this.DefaultConfigOption == virtualMachineConfigOptionDescriptor.DefaultConfigOption && this.RunSupported == virtualMachineConfigOptionDescriptor.RunSupported && this.UpgradeSupported == virtualMachineConfigOptionDescriptor.UpgradeSupported && ((this.LinkedView == null && virtualMachineConfigOptionDescriptor.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineConfigOptionDescriptor.LinkedView))));
        }

        public override bool Equals(object virtualMachineConfigOptionDescriptor)
        {
            return Equals(virtualMachineConfigOptionDescriptor as VirtualMachineConfigOptionDescriptor);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Description + "_" + Host + "_" + CreateSupported + "_" + DefaultConfigOption + "_" + RunSupported + "_" + UpgradeSupported + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineConfigOptionDescriptor_LinkedView : IEquatable<VirtualMachineConfigOptionDescriptor_LinkedView>
    {
        public HostSystem[] Host { get; set; }

        public bool Equals(VirtualMachineConfigOptionDescriptor_LinkedView virtualMachineConfigOptionDescriptor_LinkedView)
        {
            return (virtualMachineConfigOptionDescriptor_LinkedView != null && ((this.Host == null && virtualMachineConfigOptionDescriptor_LinkedView.Host == null) || (this.Host != null && virtualMachineConfigOptionDescriptor_LinkedView.Host != null && Enumerable.SequenceEqual(this.Host, virtualMachineConfigOptionDescriptor_LinkedView.Host))));
        }

        public override bool Equals(object virtualMachineConfigOptionDescriptor_LinkedView)
        {
            return Equals(virtualMachineConfigOptionDescriptor_LinkedView as VirtualMachineConfigOptionDescriptor_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class VirtualMachineConfigSpec : DynamicData, IEquatable<VirtualMachineConfigSpec>
    {
        public string ChangeVersion { get; set; }

        public string Name { get; set; }

        public string Version { get; set; }

        public DateTime? CreateDate { get; set; }

        public string Uuid { get; set; }

        public string InstanceUuid { get; set; }

        public long[] NpivNodeWorldWideName { get; set; }

        public long[] NpivPortWorldWideName { get; set; }

        public string NpivWorldWideNameType { get; set; }

        public short? NpivDesiredNodeWwns { get; set; }

        public short? NpivDesiredPortWwns { get; set; }

        public bool? NpivTemporaryDisabled { get; set; }

        public bool? NpivOnNonRdmDisks { get; set; }

        public string NpivWorldWideNameOp { get; set; }

        public string LocationId { get; set; }

        public string GuestId { get; set; }

        public string AlternateGuestName { get; set; }

        public string Annotation { get; set; }

        public VirtualMachineFileInfo Files { get; set; }

        public ToolsConfigInfo Tools { get; set; }

        public VirtualMachineFlagInfo Flags { get; set; }

        public VirtualMachineConsolePreferences ConsolePreferences { get; set; }

        public VirtualMachineDefaultPowerOpInfo PowerOpInfo { get; set; }

        public int? NumCPUs { get; set; }

        public int? NumCoresPerSocket { get; set; }

        public long? MemoryMB { get; set; }

        public bool? MemoryHotAddEnabled { get; set; }

        public bool? CpuHotAddEnabled { get; set; }

        public bool? CpuHotRemoveEnabled { get; set; }

        public bool? VirtualICH7MPresent { get; set; }

        public bool? VirtualSMCPresent { get; set; }

        public VirtualDeviceConfigSpec[] DeviceChange { get; set; }

        public ResourceAllocationInfo CpuAllocation { get; set; }

        public ResourceAllocationInfo MemoryAllocation { get; set; }

        public LatencySensitivity LatencySensitivity { get; set; }

        public VirtualMachineAffinityInfo CpuAffinity { get; set; }

        public VirtualMachineAffinityInfo MemoryAffinity { get; set; }

        public VirtualMachineNetworkShaperInfo NetworkShaper { get; set; }

        public VirtualMachineCpuIdInfoSpec[] CpuFeatureMask { get; set; }

        public OptionValue[] ExtraConfig { get; set; }

        public string SwapPlacement { get; set; }

        public VirtualMachineBootOptions BootOptions { get; set; }

        public VmConfigSpec VAppConfig { get; set; }

        public FaultToleranceConfigInfo FtInfo { get; set; }

        public ReplicationConfigSpec RepConfig { get; set; }

        public bool? VAppConfigRemoved { get; set; }

        public bool? VAssertsEnabled { get; set; }

        public bool? ChangeTrackingEnabled { get; set; }

        public string Firmware { get; set; }

        public int? MaxMksConnections { get; set; }

        public bool? GuestAutoLockEnabled { get; set; }

        public ManagedByInfo ManagedBy { get; set; }

        public bool? MemoryReservationLockedToMax { get; set; }

        public bool? NestedHVEnabled { get; set; }

        public bool? VPMCEnabled { get; set; }

        public ScheduledHardwareUpgradeInfo ScheduledHardwareUpgradeInfo { get; set; }

        public VirtualMachineProfileSpec[] VmProfile { get; set; }

        public bool? MessageBusTunnelEnabled { get; set; }

        public CryptoSpec Crypto { get; set; }

        public string MigrateEncryption { get; set; }

        public bool Equals(VirtualMachineConfigSpec virtualMachineConfigSpec)
        {
            return (virtualMachineConfigSpec != null && this.ChangeVersion == virtualMachineConfigSpec.ChangeVersion && this.Name == virtualMachineConfigSpec.Name && this.Version == virtualMachineConfigSpec.Version && ((this.CreateDate == null && virtualMachineConfigSpec.CreateDate == null) || (this.CreateDate != null && this.CreateDate.Equals(virtualMachineConfigSpec.CreateDate))) && this.Uuid == virtualMachineConfigSpec.Uuid && this.InstanceUuid == virtualMachineConfigSpec.InstanceUuid && ((this.NpivNodeWorldWideName == null && virtualMachineConfigSpec.NpivNodeWorldWideName == null) || (this.NpivNodeWorldWideName != null && virtualMachineConfigSpec.NpivNodeWorldWideName != null && Enumerable.SequenceEqual(this.NpivNodeWorldWideName, virtualMachineConfigSpec.NpivNodeWorldWideName))) && ((this.NpivPortWorldWideName == null && virtualMachineConfigSpec.NpivPortWorldWideName == null) || (this.NpivPortWorldWideName != null && virtualMachineConfigSpec.NpivPortWorldWideName != null && Enumerable.SequenceEqual(this.NpivPortWorldWideName, virtualMachineConfigSpec.NpivPortWorldWideName))) && this.NpivWorldWideNameType == virtualMachineConfigSpec.NpivWorldWideNameType && ((this.NpivDesiredNodeWwns == null && virtualMachineConfigSpec.NpivDesiredNodeWwns == null) || (this.NpivDesiredNodeWwns != null && this.NpivDesiredNodeWwns.Equals(virtualMachineConfigSpec.NpivDesiredNodeWwns))) && ((this.NpivDesiredPortWwns == null && virtualMachineConfigSpec.NpivDesiredPortWwns == null) || (this.NpivDesiredPortWwns != null && this.NpivDesiredPortWwns.Equals(virtualMachineConfigSpec.NpivDesiredPortWwns))) && ((this.NpivTemporaryDisabled == null && virtualMachineConfigSpec.NpivTemporaryDisabled == null) || (this.NpivTemporaryDisabled != null && this.NpivTemporaryDisabled.Equals(virtualMachineConfigSpec.NpivTemporaryDisabled))) && ((this.NpivOnNonRdmDisks == null && virtualMachineConfigSpec.NpivOnNonRdmDisks == null) || (this.NpivOnNonRdmDisks != null && this.NpivOnNonRdmDisks.Equals(virtualMachineConfigSpec.NpivOnNonRdmDisks))) && this.NpivWorldWideNameOp == virtualMachineConfigSpec.NpivWorldWideNameOp && this.LocationId == virtualMachineConfigSpec.LocationId && this.GuestId == virtualMachineConfigSpec.GuestId && this.AlternateGuestName == virtualMachineConfigSpec.AlternateGuestName && this.Annotation == virtualMachineConfigSpec.Annotation && ((this.Files == null && virtualMachineConfigSpec.Files == null) || (this.Files != null && this.Files.Equals(virtualMachineConfigSpec.Files))) && ((this.Tools == null && virtualMachineConfigSpec.Tools == null) || (this.Tools != null && this.Tools.Equals(virtualMachineConfigSpec.Tools))) && ((this.Flags == null && virtualMachineConfigSpec.Flags == null) || (this.Flags != null && this.Flags.Equals(virtualMachineConfigSpec.Flags))) && ((this.ConsolePreferences == null && virtualMachineConfigSpec.ConsolePreferences == null) || (this.ConsolePreferences != null && this.ConsolePreferences.Equals(virtualMachineConfigSpec.ConsolePreferences))) && ((this.PowerOpInfo == null && virtualMachineConfigSpec.PowerOpInfo == null) || (this.PowerOpInfo != null && this.PowerOpInfo.Equals(virtualMachineConfigSpec.PowerOpInfo))) && ((this.NumCPUs == null && virtualMachineConfigSpec.NumCPUs == null) || (this.NumCPUs != null && this.NumCPUs.Equals(virtualMachineConfigSpec.NumCPUs))) && ((this.NumCoresPerSocket == null && virtualMachineConfigSpec.NumCoresPerSocket == null) || (this.NumCoresPerSocket != null && this.NumCoresPerSocket.Equals(virtualMachineConfigSpec.NumCoresPerSocket))) && ((this.MemoryMB == null && virtualMachineConfigSpec.MemoryMB == null) || (this.MemoryMB != null && this.MemoryMB.Equals(virtualMachineConfigSpec.MemoryMB))) && ((this.MemoryHotAddEnabled == null && virtualMachineConfigSpec.MemoryHotAddEnabled == null) || (this.MemoryHotAddEnabled != null && this.MemoryHotAddEnabled.Equals(virtualMachineConfigSpec.MemoryHotAddEnabled))) && ((this.CpuHotAddEnabled == null && virtualMachineConfigSpec.CpuHotAddEnabled == null) || (this.CpuHotAddEnabled != null && this.CpuHotAddEnabled.Equals(virtualMachineConfigSpec.CpuHotAddEnabled))) && ((this.CpuHotRemoveEnabled == null && virtualMachineConfigSpec.CpuHotRemoveEnabled == null) || (this.CpuHotRemoveEnabled != null && this.CpuHotRemoveEnabled.Equals(virtualMachineConfigSpec.CpuHotRemoveEnabled))) && ((this.VirtualICH7MPresent == null && virtualMachineConfigSpec.VirtualICH7MPresent == null) || (this.VirtualICH7MPresent != null && this.VirtualICH7MPresent.Equals(virtualMachineConfigSpec.VirtualICH7MPresent))) && ((this.VirtualSMCPresent == null && virtualMachineConfigSpec.VirtualSMCPresent == null) || (this.VirtualSMCPresent != null && this.VirtualSMCPresent.Equals(virtualMachineConfigSpec.VirtualSMCPresent))) && ((this.DeviceChange == null && virtualMachineConfigSpec.DeviceChange == null) || (this.DeviceChange != null && virtualMachineConfigSpec.DeviceChange != null && Enumerable.SequenceEqual(this.DeviceChange, virtualMachineConfigSpec.DeviceChange))) && ((this.CpuAllocation == null && virtualMachineConfigSpec.CpuAllocation == null) || (this.CpuAllocation != null && this.CpuAllocation.Equals(virtualMachineConfigSpec.CpuAllocation))) && ((this.MemoryAllocation == null && virtualMachineConfigSpec.MemoryAllocation == null) || (this.MemoryAllocation != null && this.MemoryAllocation.Equals(virtualMachineConfigSpec.MemoryAllocation))) && ((this.LatencySensitivity == null && virtualMachineConfigSpec.LatencySensitivity == null) || (this.LatencySensitivity != null && this.LatencySensitivity.Equals(virtualMachineConfigSpec.LatencySensitivity))) && ((this.CpuAffinity == null && virtualMachineConfigSpec.CpuAffinity == null) || (this.CpuAffinity != null && this.CpuAffinity.Equals(virtualMachineConfigSpec.CpuAffinity))) && ((this.MemoryAffinity == null && virtualMachineConfigSpec.MemoryAffinity == null) || (this.MemoryAffinity != null && this.MemoryAffinity.Equals(virtualMachineConfigSpec.MemoryAffinity))) && ((this.NetworkShaper == null && virtualMachineConfigSpec.NetworkShaper == null) || (this.NetworkShaper != null && this.NetworkShaper.Equals(virtualMachineConfigSpec.NetworkShaper))) && ((this.CpuFeatureMask == null && virtualMachineConfigSpec.CpuFeatureMask == null) || (this.CpuFeatureMask != null && virtualMachineConfigSpec.CpuFeatureMask != null && Enumerable.SequenceEqual(this.CpuFeatureMask, virtualMachineConfigSpec.CpuFeatureMask))) && ((this.ExtraConfig == null && virtualMachineConfigSpec.ExtraConfig == null) || (this.ExtraConfig != null && virtualMachineConfigSpec.ExtraConfig != null && Enumerable.SequenceEqual(this.ExtraConfig, virtualMachineConfigSpec.ExtraConfig))) && this.SwapPlacement == virtualMachineConfigSpec.SwapPlacement && ((this.BootOptions == null && virtualMachineConfigSpec.BootOptions == null) || (this.BootOptions != null && this.BootOptions.Equals(virtualMachineConfigSpec.BootOptions))) && ((this.VAppConfig == null && virtualMachineConfigSpec.VAppConfig == null) || (this.VAppConfig != null && this.VAppConfig.Equals(virtualMachineConfigSpec.VAppConfig))) && ((this.FtInfo == null && virtualMachineConfigSpec.FtInfo == null) || (this.FtInfo != null && this.FtInfo.Equals(virtualMachineConfigSpec.FtInfo))) && ((this.RepConfig == null && virtualMachineConfigSpec.RepConfig == null) || (this.RepConfig != null && this.RepConfig.Equals(virtualMachineConfigSpec.RepConfig))) && ((this.VAppConfigRemoved == null && virtualMachineConfigSpec.VAppConfigRemoved == null) || (this.VAppConfigRemoved != null && this.VAppConfigRemoved.Equals(virtualMachineConfigSpec.VAppConfigRemoved))) && ((this.VAssertsEnabled == null && virtualMachineConfigSpec.VAssertsEnabled == null) || (this.VAssertsEnabled != null && this.VAssertsEnabled.Equals(virtualMachineConfigSpec.VAssertsEnabled))) && ((this.ChangeTrackingEnabled == null && virtualMachineConfigSpec.ChangeTrackingEnabled == null) || (this.ChangeTrackingEnabled != null && this.ChangeTrackingEnabled.Equals(virtualMachineConfigSpec.ChangeTrackingEnabled))) && this.Firmware == virtualMachineConfigSpec.Firmware && ((this.MaxMksConnections == null && virtualMachineConfigSpec.MaxMksConnections == null) || (this.MaxMksConnections != null && this.MaxMksConnections.Equals(virtualMachineConfigSpec.MaxMksConnections))) && ((this.GuestAutoLockEnabled == null && virtualMachineConfigSpec.GuestAutoLockEnabled == null) || (this.GuestAutoLockEnabled != null && this.GuestAutoLockEnabled.Equals(virtualMachineConfigSpec.GuestAutoLockEnabled))) && ((this.ManagedBy == null && virtualMachineConfigSpec.ManagedBy == null) || (this.ManagedBy != null && this.ManagedBy.Equals(virtualMachineConfigSpec.ManagedBy))) && ((this.MemoryReservationLockedToMax == null && virtualMachineConfigSpec.MemoryReservationLockedToMax == null) || (this.MemoryReservationLockedToMax != null && this.MemoryReservationLockedToMax.Equals(virtualMachineConfigSpec.MemoryReservationLockedToMax))) && ((this.NestedHVEnabled == null && virtualMachineConfigSpec.NestedHVEnabled == null) || (this.NestedHVEnabled != null && this.NestedHVEnabled.Equals(virtualMachineConfigSpec.NestedHVEnabled))) && ((this.VPMCEnabled == null && virtualMachineConfigSpec.VPMCEnabled == null) || (this.VPMCEnabled != null && this.VPMCEnabled.Equals(virtualMachineConfigSpec.VPMCEnabled))) && ((this.ScheduledHardwareUpgradeInfo == null && virtualMachineConfigSpec.ScheduledHardwareUpgradeInfo == null) || (this.ScheduledHardwareUpgradeInfo != null && this.ScheduledHardwareUpgradeInfo.Equals(virtualMachineConfigSpec.ScheduledHardwareUpgradeInfo))) && ((this.VmProfile == null && virtualMachineConfigSpec.VmProfile == null) || (this.VmProfile != null && virtualMachineConfigSpec.VmProfile != null && Enumerable.SequenceEqual(this.VmProfile, virtualMachineConfigSpec.VmProfile))) && ((this.MessageBusTunnelEnabled == null && virtualMachineConfigSpec.MessageBusTunnelEnabled == null) || (this.MessageBusTunnelEnabled != null && this.MessageBusTunnelEnabled.Equals(virtualMachineConfigSpec.MessageBusTunnelEnabled))) && ((this.Crypto == null && virtualMachineConfigSpec.Crypto == null) || (this.Crypto != null && this.Crypto.Equals(virtualMachineConfigSpec.Crypto))) && this.MigrateEncryption == virtualMachineConfigSpec.MigrateEncryption);
        }

        public override bool Equals(object virtualMachineConfigSpec)
        {
            return Equals(virtualMachineConfigSpec as VirtualMachineConfigSpec);
        }

        public override int GetHashCode()
        {
            return (ChangeVersion + "_" + Name + "_" + Version + "_" + CreateDate + "_" + Uuid + "_" + InstanceUuid + "_" + NpivNodeWorldWideName + "_" + NpivPortWorldWideName + "_" + NpivWorldWideNameType + "_" + NpivDesiredNodeWwns + "_" + NpivDesiredPortWwns + "_" + NpivTemporaryDisabled + "_" + NpivOnNonRdmDisks + "_" + NpivWorldWideNameOp + "_" + LocationId + "_" + GuestId + "_" + AlternateGuestName + "_" + Annotation + "_" + Files + "_" + Tools + "_" + Flags + "_" + ConsolePreferences + "_" + PowerOpInfo + "_" + NumCPUs + "_" + NumCoresPerSocket + "_" + MemoryMB + "_" + MemoryHotAddEnabled + "_" + CpuHotAddEnabled + "_" + CpuHotRemoveEnabled + "_" + VirtualICH7MPresent + "_" + VirtualSMCPresent + "_" + DeviceChange + "_" + CpuAllocation + "_" + MemoryAllocation + "_" + LatencySensitivity + "_" + CpuAffinity + "_" + MemoryAffinity + "_" + NetworkShaper + "_" + CpuFeatureMask + "_" + ExtraConfig + "_" + SwapPlacement + "_" + BootOptions + "_" + VAppConfig + "_" + FtInfo + "_" + RepConfig + "_" + VAppConfigRemoved + "_" + VAssertsEnabled + "_" + ChangeTrackingEnabled + "_" + Firmware + "_" + MaxMksConnections + "_" + GuestAutoLockEnabled + "_" + ManagedBy + "_" + MemoryReservationLockedToMax + "_" + NestedHVEnabled + "_" + VPMCEnabled + "_" + ScheduledHardwareUpgradeInfo + "_" + VmProfile + "_" + MessageBusTunnelEnabled + "_" + Crypto + "_" + MigrateEncryption).GetHashCode();
        }
    }

    public class VirtualMachineConfigSummary : DynamicData, IEquatable<VirtualMachineConfigSummary>
    {
        public string Name { get; set; }

        public bool Template { get; set; }

        public string VmPathName { get; set; }

        public int? MemorySizeMB { get; set; }

        public int? CpuReservation { get; set; }

        public int? MemoryReservation { get; set; }

        public int? NumCpu { get; set; }

        public int? NumEthernetCards { get; set; }

        public int? NumVirtualDisks { get; set; }

        public string Uuid { get; set; }

        public string InstanceUuid { get; set; }

        public string GuestId { get; set; }

        public string GuestFullName { get; set; }

        public string Annotation { get; set; }

        public VAppProductInfo Product { get; set; }

        public bool? InstallBootRequired { get; set; }

        public FaultToleranceConfigInfo FtInfo { get; set; }

        public ManagedByInfo ManagedBy { get; set; }

        public bool? TpmPresent { get; set; }

        public int? NumVmiopBackings { get; set; }

        public bool Equals(VirtualMachineConfigSummary virtualMachineConfigSummary)
        {
            return (virtualMachineConfigSummary != null && this.Name == virtualMachineConfigSummary.Name && this.Template == virtualMachineConfigSummary.Template && this.VmPathName == virtualMachineConfigSummary.VmPathName && ((this.MemorySizeMB == null && virtualMachineConfigSummary.MemorySizeMB == null) || (this.MemorySizeMB != null && this.MemorySizeMB.Equals(virtualMachineConfigSummary.MemorySizeMB))) && ((this.CpuReservation == null && virtualMachineConfigSummary.CpuReservation == null) || (this.CpuReservation != null && this.CpuReservation.Equals(virtualMachineConfigSummary.CpuReservation))) && ((this.MemoryReservation == null && virtualMachineConfigSummary.MemoryReservation == null) || (this.MemoryReservation != null && this.MemoryReservation.Equals(virtualMachineConfigSummary.MemoryReservation))) && ((this.NumCpu == null && virtualMachineConfigSummary.NumCpu == null) || (this.NumCpu != null && this.NumCpu.Equals(virtualMachineConfigSummary.NumCpu))) && ((this.NumEthernetCards == null && virtualMachineConfigSummary.NumEthernetCards == null) || (this.NumEthernetCards != null && this.NumEthernetCards.Equals(virtualMachineConfigSummary.NumEthernetCards))) && ((this.NumVirtualDisks == null && virtualMachineConfigSummary.NumVirtualDisks == null) || (this.NumVirtualDisks != null && this.NumVirtualDisks.Equals(virtualMachineConfigSummary.NumVirtualDisks))) && this.Uuid == virtualMachineConfigSummary.Uuid && this.InstanceUuid == virtualMachineConfigSummary.InstanceUuid && this.GuestId == virtualMachineConfigSummary.GuestId && this.GuestFullName == virtualMachineConfigSummary.GuestFullName && this.Annotation == virtualMachineConfigSummary.Annotation && ((this.Product == null && virtualMachineConfigSummary.Product == null) || (this.Product != null && this.Product.Equals(virtualMachineConfigSummary.Product))) && ((this.InstallBootRequired == null && virtualMachineConfigSummary.InstallBootRequired == null) || (this.InstallBootRequired != null && this.InstallBootRequired.Equals(virtualMachineConfigSummary.InstallBootRequired))) && ((this.FtInfo == null && virtualMachineConfigSummary.FtInfo == null) || (this.FtInfo != null && this.FtInfo.Equals(virtualMachineConfigSummary.FtInfo))) && ((this.ManagedBy == null && virtualMachineConfigSummary.ManagedBy == null) || (this.ManagedBy != null && this.ManagedBy.Equals(virtualMachineConfigSummary.ManagedBy))) && ((this.TpmPresent == null && virtualMachineConfigSummary.TpmPresent == null) || (this.TpmPresent != null && this.TpmPresent.Equals(virtualMachineConfigSummary.TpmPresent))) && ((this.NumVmiopBackings == null && virtualMachineConfigSummary.NumVmiopBackings == null) || (this.NumVmiopBackings != null && this.NumVmiopBackings.Equals(virtualMachineConfigSummary.NumVmiopBackings))));
        }

        public override bool Equals(object virtualMachineConfigSummary)
        {
            return Equals(virtualMachineConfigSummary as VirtualMachineConfigSummary);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Template + "_" + VmPathName + "_" + MemorySizeMB + "_" + CpuReservation + "_" + MemoryReservation + "_" + NumCpu + "_" + NumEthernetCards + "_" + NumVirtualDisks + "_" + Uuid + "_" + InstanceUuid + "_" + GuestId + "_" + GuestFullName + "_" + Annotation + "_" + Product + "_" + InstallBootRequired + "_" + FtInfo + "_" + ManagedBy + "_" + TpmPresent + "_" + NumVmiopBackings).GetHashCode();
        }
    }

    public class VirtualMachineConsolePreferences : DynamicData, IEquatable<VirtualMachineConsolePreferences>
    {
        public bool? PowerOnWhenOpened { get; set; }

        public bool? EnterFullScreenOnPowerOn { get; set; }

        public bool? CloseOnPowerOffOrSuspend { get; set; }

        public bool Equals(VirtualMachineConsolePreferences virtualMachineConsolePreferences)
        {
            return (virtualMachineConsolePreferences != null && ((this.PowerOnWhenOpened == null && virtualMachineConsolePreferences.PowerOnWhenOpened == null) || (this.PowerOnWhenOpened != null && this.PowerOnWhenOpened.Equals(virtualMachineConsolePreferences.PowerOnWhenOpened))) && ((this.EnterFullScreenOnPowerOn == null && virtualMachineConsolePreferences.EnterFullScreenOnPowerOn == null) || (this.EnterFullScreenOnPowerOn != null && this.EnterFullScreenOnPowerOn.Equals(virtualMachineConsolePreferences.EnterFullScreenOnPowerOn))) && ((this.CloseOnPowerOffOrSuspend == null && virtualMachineConsolePreferences.CloseOnPowerOffOrSuspend == null) || (this.CloseOnPowerOffOrSuspend != null && this.CloseOnPowerOffOrSuspend.Equals(virtualMachineConsolePreferences.CloseOnPowerOffOrSuspend))));
        }

        public override bool Equals(object virtualMachineConsolePreferences)
        {
            return Equals(virtualMachineConsolePreferences as VirtualMachineConsolePreferences);
        }

        public override int GetHashCode()
        {
            return (PowerOnWhenOpened + "_" + EnterFullScreenOnPowerOn + "_" + CloseOnPowerOffOrSuspend).GetHashCode();
        }
    }

    public class VirtualMachineCpuIdInfoSpec : ArrayUpdateSpec, IEquatable<VirtualMachineCpuIdInfoSpec>
    {
        public HostCpuIdInfo Info { get; set; }

        public bool Equals(VirtualMachineCpuIdInfoSpec virtualMachineCpuIdInfoSpec)
        {
            return (virtualMachineCpuIdInfoSpec != null && ((this.Info == null && virtualMachineCpuIdInfoSpec.Info == null) || (this.Info != null && this.Info.Equals(virtualMachineCpuIdInfoSpec.Info))));
        }

        public override bool Equals(object virtualMachineCpuIdInfoSpec)
        {
            return Equals(virtualMachineCpuIdInfoSpec as VirtualMachineCpuIdInfoSpec);
        }

        public override int GetHashCode()
        {
            return (Info).GetHashCode();
        }
    }

    public class VirtualMachineDatastoreInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineDatastoreInfo>
    {
        public DatastoreSummary Datastore { get; set; }

        public DatastoreCapability Capability { get; set; }

        public long MaxFileSize { get; set; }

        public long? MaxVirtualDiskCapacity { get; set; }

        public long? MaxPhysicalRDMFileSize { get; set; }

        public long? MaxVirtualRDMFileSize { get; set; }

        public string Mode { get; set; }

        public string VStorageSupport { get; set; }

        public bool Equals(VirtualMachineDatastoreInfo virtualMachineDatastoreInfo)
        {
            return (virtualMachineDatastoreInfo != null && ((this.Datastore == null && virtualMachineDatastoreInfo.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineDatastoreInfo.Datastore))) && ((this.Capability == null && virtualMachineDatastoreInfo.Capability == null) || (this.Capability != null && this.Capability.Equals(virtualMachineDatastoreInfo.Capability))) && this.MaxFileSize == virtualMachineDatastoreInfo.MaxFileSize && ((this.MaxVirtualDiskCapacity == null && virtualMachineDatastoreInfo.MaxVirtualDiskCapacity == null) || (this.MaxVirtualDiskCapacity != null && this.MaxVirtualDiskCapacity.Equals(virtualMachineDatastoreInfo.MaxVirtualDiskCapacity))) && ((this.MaxPhysicalRDMFileSize == null && virtualMachineDatastoreInfo.MaxPhysicalRDMFileSize == null) || (this.MaxPhysicalRDMFileSize != null && this.MaxPhysicalRDMFileSize.Equals(virtualMachineDatastoreInfo.MaxPhysicalRDMFileSize))) && ((this.MaxVirtualRDMFileSize == null && virtualMachineDatastoreInfo.MaxVirtualRDMFileSize == null) || (this.MaxVirtualRDMFileSize != null && this.MaxVirtualRDMFileSize.Equals(virtualMachineDatastoreInfo.MaxVirtualRDMFileSize))) && this.Mode == virtualMachineDatastoreInfo.Mode && this.VStorageSupport == virtualMachineDatastoreInfo.VStorageSupport);
        }

        public override bool Equals(object virtualMachineDatastoreInfo)
        {
            return Equals(virtualMachineDatastoreInfo as VirtualMachineDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Capability + "_" + MaxFileSize + "_" + MaxVirtualDiskCapacity + "_" + MaxPhysicalRDMFileSize + "_" + MaxVirtualRDMFileSize + "_" + Mode + "_" + VStorageSupport).GetHashCode();
        }
    }

    public class VirtualMachineDatastoreVolumeOption : DynamicData, IEquatable<VirtualMachineDatastoreVolumeOption>
    {
        public string FileSystemType { get; set; }

        public int? MajorVersion { get; set; }

        public bool Equals(VirtualMachineDatastoreVolumeOption virtualMachineDatastoreVolumeOption)
        {
            return (virtualMachineDatastoreVolumeOption != null && this.FileSystemType == virtualMachineDatastoreVolumeOption.FileSystemType && ((this.MajorVersion == null && virtualMachineDatastoreVolumeOption.MajorVersion == null) || (this.MajorVersion != null && this.MajorVersion.Equals(virtualMachineDatastoreVolumeOption.MajorVersion))));
        }

        public override bool Equals(object virtualMachineDatastoreVolumeOption)
        {
            return Equals(virtualMachineDatastoreVolumeOption as VirtualMachineDatastoreVolumeOption);
        }

        public override int GetHashCode()
        {
            return (FileSystemType + "_" + MajorVersion).GetHashCode();
        }
    }

    public class VirtualMachineDefaultPowerOpInfo : DynamicData, IEquatable<VirtualMachineDefaultPowerOpInfo>
    {
        public string PowerOffType { get; set; }

        public string SuspendType { get; set; }

        public string ResetType { get; set; }

        public string DefaultPowerOffType { get; set; }

        public string DefaultSuspendType { get; set; }

        public string DefaultResetType { get; set; }

        public string StandbyAction { get; set; }

        public bool Equals(VirtualMachineDefaultPowerOpInfo virtualMachineDefaultPowerOpInfo)
        {
            return (virtualMachineDefaultPowerOpInfo != null && this.PowerOffType == virtualMachineDefaultPowerOpInfo.PowerOffType && this.SuspendType == virtualMachineDefaultPowerOpInfo.SuspendType && this.ResetType == virtualMachineDefaultPowerOpInfo.ResetType && this.DefaultPowerOffType == virtualMachineDefaultPowerOpInfo.DefaultPowerOffType && this.DefaultSuspendType == virtualMachineDefaultPowerOpInfo.DefaultSuspendType && this.DefaultResetType == virtualMachineDefaultPowerOpInfo.DefaultResetType && this.StandbyAction == virtualMachineDefaultPowerOpInfo.StandbyAction);
        }

        public override bool Equals(object virtualMachineDefaultPowerOpInfo)
        {
            return Equals(virtualMachineDefaultPowerOpInfo as VirtualMachineDefaultPowerOpInfo);
        }

        public override int GetHashCode()
        {
            return (PowerOffType + "_" + SuspendType + "_" + ResetType + "_" + DefaultPowerOffType + "_" + DefaultSuspendType + "_" + DefaultResetType + "_" + StandbyAction).GetHashCode();
        }
    }

    public class VirtualMachineDefaultProfileSpec : VirtualMachineProfileSpec, IEquatable<VirtualMachineDefaultProfileSpec>
    {
        public bool Equals(VirtualMachineDefaultProfileSpec virtualMachineDefaultProfileSpec)
        {
            return (virtualMachineDefaultProfileSpec != null && base.Equals(virtualMachineDefaultProfileSpec));
        }

        public override bool Equals(object virtualMachineDefaultProfileSpec)
        {
            return Equals(virtualMachineDefaultProfileSpec as VirtualMachineDefaultProfileSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineDefinedProfileSpec : VirtualMachineProfileSpec, IEquatable<VirtualMachineDefinedProfileSpec>
    {
        public string ProfileId { get; set; }

        public ReplicationSpec ReplicationSpec { get; set; }

        public VirtualMachineProfileRawData ProfileData { get; set; }

        public KeyValue[] ProfileParams { get; set; }

        public bool Equals(VirtualMachineDefinedProfileSpec virtualMachineDefinedProfileSpec)
        {
            return (virtualMachineDefinedProfileSpec != null && this.ProfileId == virtualMachineDefinedProfileSpec.ProfileId && ((this.ReplicationSpec == null && virtualMachineDefinedProfileSpec.ReplicationSpec == null) || (this.ReplicationSpec != null && this.ReplicationSpec.Equals(virtualMachineDefinedProfileSpec.ReplicationSpec))) && ((this.ProfileData == null && virtualMachineDefinedProfileSpec.ProfileData == null) || (this.ProfileData != null && this.ProfileData.Equals(virtualMachineDefinedProfileSpec.ProfileData))) && ((this.ProfileParams == null && virtualMachineDefinedProfileSpec.ProfileParams == null) || (this.ProfileParams != null && virtualMachineDefinedProfileSpec.ProfileParams != null && Enumerable.SequenceEqual(this.ProfileParams, virtualMachineDefinedProfileSpec.ProfileParams))));
        }

        public override bool Equals(object virtualMachineDefinedProfileSpec)
        {
            return Equals(virtualMachineDefinedProfileSpec as VirtualMachineDefinedProfileSpec);
        }

        public override int GetHashCode()
        {
            return (ProfileId + "_" + ReplicationSpec + "_" + ProfileData + "_" + ProfileParams).GetHashCode();
        }
    }

    public class VirtualMachineDeviceRuntimeInfo : DynamicData, IEquatable<VirtualMachineDeviceRuntimeInfo>
    {
        public VirtualMachineDeviceRuntimeInfoDeviceRuntimeState RuntimeState { get; set; }

        public int Key { get; set; }

        public bool Equals(VirtualMachineDeviceRuntimeInfo virtualMachineDeviceRuntimeInfo)
        {
            return (virtualMachineDeviceRuntimeInfo != null && ((this.RuntimeState == null && virtualMachineDeviceRuntimeInfo.RuntimeState == null) || (this.RuntimeState != null && this.RuntimeState.Equals(virtualMachineDeviceRuntimeInfo.RuntimeState))) && this.Key == virtualMachineDeviceRuntimeInfo.Key);
        }

        public override bool Equals(object virtualMachineDeviceRuntimeInfo)
        {
            return Equals(virtualMachineDeviceRuntimeInfo as VirtualMachineDeviceRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (RuntimeState + "_" + Key).GetHashCode();
        }
    }

    public class VirtualMachineDeviceRuntimeInfoDeviceRuntimeState : DynamicData, IEquatable<VirtualMachineDeviceRuntimeInfoDeviceRuntimeState>
    {
        public bool Equals(VirtualMachineDeviceRuntimeInfoDeviceRuntimeState virtualMachineDeviceRuntimeInfoDeviceRuntimeState)
        {
            return (virtualMachineDeviceRuntimeInfoDeviceRuntimeState != null && base.Equals(virtualMachineDeviceRuntimeInfoDeviceRuntimeState));
        }

        public override bool Equals(object virtualMachineDeviceRuntimeInfoDeviceRuntimeState)
        {
            return Equals(virtualMachineDeviceRuntimeInfoDeviceRuntimeState as VirtualMachineDeviceRuntimeInfoDeviceRuntimeState);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState : VirtualMachineDeviceRuntimeInfoDeviceRuntimeState, IEquatable<VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState>
    {
        public bool VmDirectPathGen2Active { get; set; }

        public string[] VmDirectPathGen2InactiveReasonVm { get; set; }

        public string[] VmDirectPathGen2InactiveReasonOther { get; set; }

        public string VmDirectPathGen2InactiveReasonExtended { get; set; }

        public string ReservationStatus { get; set; }

        public string AttachmentStatus { get; set; }

        public VirtualMachineFeatureRequirement[] FeatureRequirement { get; set; }

        public bool Equals(VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState)
        {
            return (virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState != null && this.VmDirectPathGen2Active == virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2Active && ((this.VmDirectPathGen2InactiveReasonVm == null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonVm == null) || (this.VmDirectPathGen2InactiveReasonVm != null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonVm != null && Enumerable.SequenceEqual(this.VmDirectPathGen2InactiveReasonVm, virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonVm))) && ((this.VmDirectPathGen2InactiveReasonOther == null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonOther == null) || (this.VmDirectPathGen2InactiveReasonOther != null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonOther != null && Enumerable.SequenceEqual(this.VmDirectPathGen2InactiveReasonOther, virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonOther))) && this.VmDirectPathGen2InactiveReasonExtended == virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonExtended && this.ReservationStatus == virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.ReservationStatus && this.AttachmentStatus == virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.AttachmentStatus && ((this.FeatureRequirement == null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.FeatureRequirement == null) || (this.FeatureRequirement != null && virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.FeatureRequirement != null && Enumerable.SequenceEqual(this.FeatureRequirement, virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState.FeatureRequirement))));
        }

        public override bool Equals(object virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState)
        {
            return Equals(virtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState as VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState);
        }

        public override int GetHashCode()
        {
            return (VmDirectPathGen2Active + "_" + VmDirectPathGen2InactiveReasonVm + "_" + VmDirectPathGen2InactiveReasonOther + "_" + VmDirectPathGen2InactiveReasonExtended + "_" + ReservationStatus + "_" + AttachmentStatus + "_" + FeatureRequirement).GetHashCode();
        }
    }

    public class VirtualMachineDiskDeviceInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineDiskDeviceInfo>
    {
        public long? Capacity { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public VirtualMachineDiskDeviceInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineDiskDeviceInfo virtualMachineDiskDeviceInfo)
        {
            return (virtualMachineDiskDeviceInfo != null && ((this.Capacity == null && virtualMachineDiskDeviceInfo.Capacity == null) || (this.Capacity != null && this.Capacity.Equals(virtualMachineDiskDeviceInfo.Capacity))) && ((this.Vm == null && virtualMachineDiskDeviceInfo.Vm == null) || (this.Vm != null && virtualMachineDiskDeviceInfo.Vm != null && Enumerable.SequenceEqual(this.Vm, virtualMachineDiskDeviceInfo.Vm))) && ((this.LinkedView == null && virtualMachineDiskDeviceInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineDiskDeviceInfo.LinkedView))));
        }

        public override bool Equals(object virtualMachineDiskDeviceInfo)
        {
            return Equals(virtualMachineDiskDeviceInfo as VirtualMachineDiskDeviceInfo);
        }

        public override int GetHashCode()
        {
            return (Capacity + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineDiskDeviceInfo_LinkedView : IEquatable<VirtualMachineDiskDeviceInfo_LinkedView>
    {
        public VirtualMachine[] Vm { get; set; }

        public bool Equals(VirtualMachineDiskDeviceInfo_LinkedView virtualMachineDiskDeviceInfo_LinkedView)
        {
            return (virtualMachineDiskDeviceInfo_LinkedView != null && ((this.Vm == null && virtualMachineDiskDeviceInfo_LinkedView.Vm == null) || (this.Vm != null && virtualMachineDiskDeviceInfo_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, virtualMachineDiskDeviceInfo_LinkedView.Vm))));
        }

        public override bool Equals(object virtualMachineDiskDeviceInfo_LinkedView)
        {
            return Equals(virtualMachineDiskDeviceInfo_LinkedView as VirtualMachineDiskDeviceInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class VirtualMachineDisplayTopology : DynamicData, IEquatable<VirtualMachineDisplayTopology>
    {
        public int X { get; set; }

        public int Y { get; set; }

        public int Width { get; set; }

        public int Height { get; set; }

        public bool Equals(VirtualMachineDisplayTopology virtualMachineDisplayTopology)
        {
            return (virtualMachineDisplayTopology != null && this.X == virtualMachineDisplayTopology.X && this.Y == virtualMachineDisplayTopology.Y && this.Width == virtualMachineDisplayTopology.Width && this.Height == virtualMachineDisplayTopology.Height);
        }

        public override bool Equals(object virtualMachineDisplayTopology)
        {
            return Equals(virtualMachineDisplayTopology as VirtualMachineDisplayTopology);
        }

        public override int GetHashCode()
        {
            return (X + "_" + Y + "_" + Width + "_" + Height).GetHashCode();
        }
    }

    public class VirtualMachineEmptyProfileSpec : VirtualMachineProfileSpec, IEquatable<VirtualMachineEmptyProfileSpec>
    {
        public bool Equals(VirtualMachineEmptyProfileSpec virtualMachineEmptyProfileSpec)
        {
            return (virtualMachineEmptyProfileSpec != null && base.Equals(virtualMachineEmptyProfileSpec));
        }

        public override bool Equals(object virtualMachineEmptyProfileSpec)
        {
            return Equals(virtualMachineEmptyProfileSpec as VirtualMachineEmptyProfileSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineFeatureRequirement : DynamicData, IEquatable<VirtualMachineFeatureRequirement>
    {
        public string Key { get; set; }

        public string FeatureName { get; set; }

        public string Value { get; set; }

        public bool Equals(VirtualMachineFeatureRequirement virtualMachineFeatureRequirement)
        {
            return (virtualMachineFeatureRequirement != null && this.Key == virtualMachineFeatureRequirement.Key && this.FeatureName == virtualMachineFeatureRequirement.FeatureName && this.Value == virtualMachineFeatureRequirement.Value);
        }

        public override bool Equals(object virtualMachineFeatureRequirement)
        {
            return Equals(virtualMachineFeatureRequirement as VirtualMachineFeatureRequirement);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + FeatureName + "_" + Value).GetHashCode();
        }
    }

    public class VirtualMachineFileInfo : DynamicData, IEquatable<VirtualMachineFileInfo>
    {
        public string VmPathName { get; set; }

        public string SnapshotDirectory { get; set; }

        public string SuspendDirectory { get; set; }

        public string LogDirectory { get; set; }

        public string FtMetadataDirectory { get; set; }

        public bool Equals(VirtualMachineFileInfo virtualMachineFileInfo)
        {
            return (virtualMachineFileInfo != null && this.VmPathName == virtualMachineFileInfo.VmPathName && this.SnapshotDirectory == virtualMachineFileInfo.SnapshotDirectory && this.SuspendDirectory == virtualMachineFileInfo.SuspendDirectory && this.LogDirectory == virtualMachineFileInfo.LogDirectory && this.FtMetadataDirectory == virtualMachineFileInfo.FtMetadataDirectory);
        }

        public override bool Equals(object virtualMachineFileInfo)
        {
            return Equals(virtualMachineFileInfo as VirtualMachineFileInfo);
        }

        public override int GetHashCode()
        {
            return (VmPathName + "_" + SnapshotDirectory + "_" + SuspendDirectory + "_" + LogDirectory + "_" + FtMetadataDirectory).GetHashCode();
        }
    }

    public class VirtualMachineFileLayout : DynamicData, IEquatable<VirtualMachineFileLayout>
    {
        public string[] ConfigFile { get; set; }

        public string[] LogFile { get; set; }

        public VirtualMachineFileLayoutDiskLayout[] Disk { get; set; }

        public VirtualMachineFileLayoutSnapshotLayout[] Snapshot { get; set; }

        public string SwapFile { get; set; }

        public bool Equals(VirtualMachineFileLayout virtualMachineFileLayout)
        {
            return (virtualMachineFileLayout != null && ((this.ConfigFile == null && virtualMachineFileLayout.ConfigFile == null) || (this.ConfigFile != null && virtualMachineFileLayout.ConfigFile != null && Enumerable.SequenceEqual(this.ConfigFile, virtualMachineFileLayout.ConfigFile))) && ((this.LogFile == null && virtualMachineFileLayout.LogFile == null) || (this.LogFile != null && virtualMachineFileLayout.LogFile != null && Enumerable.SequenceEqual(this.LogFile, virtualMachineFileLayout.LogFile))) && ((this.Disk == null && virtualMachineFileLayout.Disk == null) || (this.Disk != null && virtualMachineFileLayout.Disk != null && Enumerable.SequenceEqual(this.Disk, virtualMachineFileLayout.Disk))) && ((this.Snapshot == null && virtualMachineFileLayout.Snapshot == null) || (this.Snapshot != null && virtualMachineFileLayout.Snapshot != null && Enumerable.SequenceEqual(this.Snapshot, virtualMachineFileLayout.Snapshot))) && this.SwapFile == virtualMachineFileLayout.SwapFile);
        }

        public override bool Equals(object virtualMachineFileLayout)
        {
            return Equals(virtualMachineFileLayout as VirtualMachineFileLayout);
        }

        public override int GetHashCode()
        {
            return (ConfigFile + "_" + LogFile + "_" + Disk + "_" + Snapshot + "_" + SwapFile).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutDiskLayout : DynamicData, IEquatable<VirtualMachineFileLayoutDiskLayout>
    {
        public int Key { get; set; }

        public string[] DiskFile { get; set; }

        public bool Equals(VirtualMachineFileLayoutDiskLayout virtualMachineFileLayoutDiskLayout)
        {
            return (virtualMachineFileLayoutDiskLayout != null && this.Key == virtualMachineFileLayoutDiskLayout.Key && ((this.DiskFile == null && virtualMachineFileLayoutDiskLayout.DiskFile == null) || (this.DiskFile != null && virtualMachineFileLayoutDiskLayout.DiskFile != null && Enumerable.SequenceEqual(this.DiskFile, virtualMachineFileLayoutDiskLayout.DiskFile))));
        }

        public override bool Equals(object virtualMachineFileLayoutDiskLayout)
        {
            return Equals(virtualMachineFileLayoutDiskLayout as VirtualMachineFileLayoutDiskLayout);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DiskFile).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutEx : DynamicData, IEquatable<VirtualMachineFileLayoutEx>
    {
        public VirtualMachineFileLayoutExFileInfo[] File { get; set; }

        public VirtualMachineFileLayoutExDiskLayout[] Disk { get; set; }

        public VirtualMachineFileLayoutExSnapshotLayout[] Snapshot { get; set; }

        public DateTime Timestamp { get; set; }

        public bool Equals(VirtualMachineFileLayoutEx virtualMachineFileLayoutEx)
        {
            return (virtualMachineFileLayoutEx != null && ((this.File == null && virtualMachineFileLayoutEx.File == null) || (this.File != null && virtualMachineFileLayoutEx.File != null && Enumerable.SequenceEqual(this.File, virtualMachineFileLayoutEx.File))) && ((this.Disk == null && virtualMachineFileLayoutEx.Disk == null) || (this.Disk != null && virtualMachineFileLayoutEx.Disk != null && Enumerable.SequenceEqual(this.Disk, virtualMachineFileLayoutEx.Disk))) && ((this.Snapshot == null && virtualMachineFileLayoutEx.Snapshot == null) || (this.Snapshot != null && virtualMachineFileLayoutEx.Snapshot != null && Enumerable.SequenceEqual(this.Snapshot, virtualMachineFileLayoutEx.Snapshot))) && this.Timestamp == virtualMachineFileLayoutEx.Timestamp);
        }

        public override bool Equals(object virtualMachineFileLayoutEx)
        {
            return Equals(virtualMachineFileLayoutEx as VirtualMachineFileLayoutEx);
        }

        public override int GetHashCode()
        {
            return (File + "_" + Disk + "_" + Snapshot + "_" + Timestamp).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutExDiskLayout : DynamicData, IEquatable<VirtualMachineFileLayoutExDiskLayout>
    {
        public int Key { get; set; }

        public VirtualMachineFileLayoutExDiskUnit[] Chain { get; set; }

        public bool Equals(VirtualMachineFileLayoutExDiskLayout virtualMachineFileLayoutExDiskLayout)
        {
            return (virtualMachineFileLayoutExDiskLayout != null && this.Key == virtualMachineFileLayoutExDiskLayout.Key && ((this.Chain == null && virtualMachineFileLayoutExDiskLayout.Chain == null) || (this.Chain != null && virtualMachineFileLayoutExDiskLayout.Chain != null && Enumerable.SequenceEqual(this.Chain, virtualMachineFileLayoutExDiskLayout.Chain))));
        }

        public override bool Equals(object virtualMachineFileLayoutExDiskLayout)
        {
            return Equals(virtualMachineFileLayoutExDiskLayout as VirtualMachineFileLayoutExDiskLayout);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Chain).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutExDiskUnit : DynamicData, IEquatable<VirtualMachineFileLayoutExDiskUnit>
    {
        public int[] FileKey { get; set; }

        public bool Equals(VirtualMachineFileLayoutExDiskUnit virtualMachineFileLayoutExDiskUnit)
        {
            return (virtualMachineFileLayoutExDiskUnit != null && ((this.FileKey == null && virtualMachineFileLayoutExDiskUnit.FileKey == null) || (this.FileKey != null && virtualMachineFileLayoutExDiskUnit.FileKey != null && Enumerable.SequenceEqual(this.FileKey, virtualMachineFileLayoutExDiskUnit.FileKey))));
        }

        public override bool Equals(object virtualMachineFileLayoutExDiskUnit)
        {
            return Equals(virtualMachineFileLayoutExDiskUnit as VirtualMachineFileLayoutExDiskUnit);
        }

        public override int GetHashCode()
        {
            return (FileKey).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutExFileInfo : DynamicData, IEquatable<VirtualMachineFileLayoutExFileInfo>
    {
        public int Key { get; set; }

        public string Name { get; set; }

        public string Type { get; set; }

        public long Size { get; set; }

        public long? UniqueSize { get; set; }

        public string BackingObjectId { get; set; }

        public bool? Accessible { get; set; }

        public bool Equals(VirtualMachineFileLayoutExFileInfo virtualMachineFileLayoutExFileInfo)
        {
            return (virtualMachineFileLayoutExFileInfo != null && this.Key == virtualMachineFileLayoutExFileInfo.Key && this.Name == virtualMachineFileLayoutExFileInfo.Name && this.Type == virtualMachineFileLayoutExFileInfo.Type && this.Size == virtualMachineFileLayoutExFileInfo.Size && ((this.UniqueSize == null && virtualMachineFileLayoutExFileInfo.UniqueSize == null) || (this.UniqueSize != null && this.UniqueSize.Equals(virtualMachineFileLayoutExFileInfo.UniqueSize))) && this.BackingObjectId == virtualMachineFileLayoutExFileInfo.BackingObjectId && ((this.Accessible == null && virtualMachineFileLayoutExFileInfo.Accessible == null) || (this.Accessible != null && this.Accessible.Equals(virtualMachineFileLayoutExFileInfo.Accessible))));
        }

        public override bool Equals(object virtualMachineFileLayoutExFileInfo)
        {
            return Equals(virtualMachineFileLayoutExFileInfo as VirtualMachineFileLayoutExFileInfo);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Type + "_" + Size + "_" + UniqueSize + "_" + BackingObjectId + "_" + Accessible).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutExSnapshotLayout : DynamicData, IEquatable<VirtualMachineFileLayoutExSnapshotLayout>
    {
        public ManagedObjectReference Key { get; set; }

        public int DataKey { get; set; }

        public int MemoryKey { get; set; }

        public VirtualMachineFileLayoutExDiskLayout[] Disk { get; set; }

        public VirtualMachineFileLayoutExSnapshotLayout_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineFileLayoutExSnapshotLayout virtualMachineFileLayoutExSnapshotLayout)
        {
            return (virtualMachineFileLayoutExSnapshotLayout != null && ((this.Key == null && virtualMachineFileLayoutExSnapshotLayout.Key == null) || (this.Key != null && this.Key.Equals(virtualMachineFileLayoutExSnapshotLayout.Key))) && this.DataKey == virtualMachineFileLayoutExSnapshotLayout.DataKey && this.MemoryKey == virtualMachineFileLayoutExSnapshotLayout.MemoryKey && ((this.Disk == null && virtualMachineFileLayoutExSnapshotLayout.Disk == null) || (this.Disk != null && virtualMachineFileLayoutExSnapshotLayout.Disk != null && Enumerable.SequenceEqual(this.Disk, virtualMachineFileLayoutExSnapshotLayout.Disk))) && ((this.LinkedView == null && virtualMachineFileLayoutExSnapshotLayout.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineFileLayoutExSnapshotLayout.LinkedView))));
        }

        public override bool Equals(object virtualMachineFileLayoutExSnapshotLayout)
        {
            return Equals(virtualMachineFileLayoutExSnapshotLayout as VirtualMachineFileLayoutExSnapshotLayout);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + DataKey + "_" + MemoryKey + "_" + Disk + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutExSnapshotLayout_LinkedView : IEquatable<VirtualMachineFileLayoutExSnapshotLayout_LinkedView>
    {
        public VirtualMachineSnapshot Key { get; set; }

        public bool Equals(VirtualMachineFileLayoutExSnapshotLayout_LinkedView virtualMachineFileLayoutExSnapshotLayout_LinkedView)
        {
            return (virtualMachineFileLayoutExSnapshotLayout_LinkedView != null && ((this.Key == null && virtualMachineFileLayoutExSnapshotLayout_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(virtualMachineFileLayoutExSnapshotLayout_LinkedView.Key))));
        }

        public override bool Equals(object virtualMachineFileLayoutExSnapshotLayout_LinkedView)
        {
            return Equals(virtualMachineFileLayoutExSnapshotLayout_LinkedView as VirtualMachineFileLayoutExSnapshotLayout_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutSnapshotLayout : DynamicData, IEquatable<VirtualMachineFileLayoutSnapshotLayout>
    {
        public ManagedObjectReference Key { get; set; }

        public string[] SnapshotFile { get; set; }

        public VirtualMachineFileLayoutSnapshotLayout_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineFileLayoutSnapshotLayout virtualMachineFileLayoutSnapshotLayout)
        {
            return (virtualMachineFileLayoutSnapshotLayout != null && ((this.Key == null && virtualMachineFileLayoutSnapshotLayout.Key == null) || (this.Key != null && this.Key.Equals(virtualMachineFileLayoutSnapshotLayout.Key))) && ((this.SnapshotFile == null && virtualMachineFileLayoutSnapshotLayout.SnapshotFile == null) || (this.SnapshotFile != null && virtualMachineFileLayoutSnapshotLayout.SnapshotFile != null && Enumerable.SequenceEqual(this.SnapshotFile, virtualMachineFileLayoutSnapshotLayout.SnapshotFile))) && ((this.LinkedView == null && virtualMachineFileLayoutSnapshotLayout.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineFileLayoutSnapshotLayout.LinkedView))));
        }

        public override bool Equals(object virtualMachineFileLayoutSnapshotLayout)
        {
            return Equals(virtualMachineFileLayoutSnapshotLayout as VirtualMachineFileLayoutSnapshotLayout);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + SnapshotFile + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineFileLayoutSnapshotLayout_LinkedView : IEquatable<VirtualMachineFileLayoutSnapshotLayout_LinkedView>
    {
        public VirtualMachineSnapshot Key { get; set; }

        public bool Equals(VirtualMachineFileLayoutSnapshotLayout_LinkedView virtualMachineFileLayoutSnapshotLayout_LinkedView)
        {
            return (virtualMachineFileLayoutSnapshotLayout_LinkedView != null && ((this.Key == null && virtualMachineFileLayoutSnapshotLayout_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(virtualMachineFileLayoutSnapshotLayout_LinkedView.Key))));
        }

        public override bool Equals(object virtualMachineFileLayoutSnapshotLayout_LinkedView)
        {
            return Equals(virtualMachineFileLayoutSnapshotLayout_LinkedView as VirtualMachineFileLayoutSnapshotLayout_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VirtualMachineFlagInfo : DynamicData, IEquatable<VirtualMachineFlagInfo>
    {
        public bool? DisableAcceleration { get; set; }

        public bool? EnableLogging { get; set; }

        public bool? UseToe { get; set; }

        public bool? RunWithDebugInfo { get; set; }

        public string MonitorType { get; set; }

        public string HtSharing { get; set; }

        public bool? SnapshotDisabled { get; set; }

        public bool? SnapshotLocked { get; set; }

        public bool? DiskUuidEnabled { get; set; }

        public string VirtualMmuUsage { get; set; }

        public string VirtualExecUsage { get; set; }

        public string SnapshotPowerOffBehavior { get; set; }

        public bool? RecordReplayEnabled { get; set; }

        public string FaultToleranceType { get; set; }

        public bool? CbrcCacheEnabled { get; set; }

        public bool? VvtdEnabled { get; set; }

        public bool? VbsEnabled { get; set; }

        public bool Equals(VirtualMachineFlagInfo virtualMachineFlagInfo)
        {
            return (virtualMachineFlagInfo != null && ((this.DisableAcceleration == null && virtualMachineFlagInfo.DisableAcceleration == null) || (this.DisableAcceleration != null && this.DisableAcceleration.Equals(virtualMachineFlagInfo.DisableAcceleration))) && ((this.EnableLogging == null && virtualMachineFlagInfo.EnableLogging == null) || (this.EnableLogging != null && this.EnableLogging.Equals(virtualMachineFlagInfo.EnableLogging))) && ((this.UseToe == null && virtualMachineFlagInfo.UseToe == null) || (this.UseToe != null && this.UseToe.Equals(virtualMachineFlagInfo.UseToe))) && ((this.RunWithDebugInfo == null && virtualMachineFlagInfo.RunWithDebugInfo == null) || (this.RunWithDebugInfo != null && this.RunWithDebugInfo.Equals(virtualMachineFlagInfo.RunWithDebugInfo))) && this.MonitorType == virtualMachineFlagInfo.MonitorType && this.HtSharing == virtualMachineFlagInfo.HtSharing && ((this.SnapshotDisabled == null && virtualMachineFlagInfo.SnapshotDisabled == null) || (this.SnapshotDisabled != null && this.SnapshotDisabled.Equals(virtualMachineFlagInfo.SnapshotDisabled))) && ((this.SnapshotLocked == null && virtualMachineFlagInfo.SnapshotLocked == null) || (this.SnapshotLocked != null && this.SnapshotLocked.Equals(virtualMachineFlagInfo.SnapshotLocked))) && ((this.DiskUuidEnabled == null && virtualMachineFlagInfo.DiskUuidEnabled == null) || (this.DiskUuidEnabled != null && this.DiskUuidEnabled.Equals(virtualMachineFlagInfo.DiskUuidEnabled))) && this.VirtualMmuUsage == virtualMachineFlagInfo.VirtualMmuUsage && this.VirtualExecUsage == virtualMachineFlagInfo.VirtualExecUsage && this.SnapshotPowerOffBehavior == virtualMachineFlagInfo.SnapshotPowerOffBehavior && ((this.RecordReplayEnabled == null && virtualMachineFlagInfo.RecordReplayEnabled == null) || (this.RecordReplayEnabled != null && this.RecordReplayEnabled.Equals(virtualMachineFlagInfo.RecordReplayEnabled))) && this.FaultToleranceType == virtualMachineFlagInfo.FaultToleranceType && ((this.CbrcCacheEnabled == null && virtualMachineFlagInfo.CbrcCacheEnabled == null) || (this.CbrcCacheEnabled != null && this.CbrcCacheEnabled.Equals(virtualMachineFlagInfo.CbrcCacheEnabled))) && ((this.VvtdEnabled == null && virtualMachineFlagInfo.VvtdEnabled == null) || (this.VvtdEnabled != null && this.VvtdEnabled.Equals(virtualMachineFlagInfo.VvtdEnabled))) && ((this.VbsEnabled == null && virtualMachineFlagInfo.VbsEnabled == null) || (this.VbsEnabled != null && this.VbsEnabled.Equals(virtualMachineFlagInfo.VbsEnabled))));
        }

        public override bool Equals(object virtualMachineFlagInfo)
        {
            return Equals(virtualMachineFlagInfo as VirtualMachineFlagInfo);
        }

        public override int GetHashCode()
        {
            return (DisableAcceleration + "_" + EnableLogging + "_" + UseToe + "_" + RunWithDebugInfo + "_" + MonitorType + "_" + HtSharing + "_" + SnapshotDisabled + "_" + SnapshotLocked + "_" + DiskUuidEnabled + "_" + VirtualMmuUsage + "_" + VirtualExecUsage + "_" + SnapshotPowerOffBehavior + "_" + RecordReplayEnabled + "_" + FaultToleranceType + "_" + CbrcCacheEnabled + "_" + VvtdEnabled + "_" + VbsEnabled).GetHashCode();
        }
    }

    public class VirtualMachineFloppyInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineFloppyInfo>
    {
        public bool Equals(VirtualMachineFloppyInfo virtualMachineFloppyInfo)
        {
            return (virtualMachineFloppyInfo != null && base.Equals(virtualMachineFloppyInfo));
        }

        public override bool Equals(object virtualMachineFloppyInfo)
        {
            return Equals(virtualMachineFloppyInfo as VirtualMachineFloppyInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineForkConfigInfo : DynamicData, IEquatable<VirtualMachineForkConfigInfo>
    {
        public bool? ParentEnabled { get; set; }

        public string ChildForkGroupId { get; set; }

        public string ParentForkGroupId { get; set; }

        public string ChildType { get; set; }

        public bool Equals(VirtualMachineForkConfigInfo virtualMachineForkConfigInfo)
        {
            return (virtualMachineForkConfigInfo != null && ((this.ParentEnabled == null && virtualMachineForkConfigInfo.ParentEnabled == null) || (this.ParentEnabled != null && this.ParentEnabled.Equals(virtualMachineForkConfigInfo.ParentEnabled))) && this.ChildForkGroupId == virtualMachineForkConfigInfo.ChildForkGroupId && this.ParentForkGroupId == virtualMachineForkConfigInfo.ParentForkGroupId && this.ChildType == virtualMachineForkConfigInfo.ChildType);
        }

        public override bool Equals(object virtualMachineForkConfigInfo)
        {
            return Equals(virtualMachineForkConfigInfo as VirtualMachineForkConfigInfo);
        }

        public override int GetHashCode()
        {
            return (ParentEnabled + "_" + ChildForkGroupId + "_" + ParentForkGroupId + "_" + ChildType).GetHashCode();
        }
    }

    public class VirtualMachineGuestIntegrityInfo : DynamicData, IEquatable<VirtualMachineGuestIntegrityInfo>
    {
        public bool? Enabled { get; set; }

        public bool Equals(VirtualMachineGuestIntegrityInfo virtualMachineGuestIntegrityInfo)
        {
            return (virtualMachineGuestIntegrityInfo != null && ((this.Enabled == null && virtualMachineGuestIntegrityInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(virtualMachineGuestIntegrityInfo.Enabled))));
        }

        public override bool Equals(object virtualMachineGuestIntegrityInfo)
        {
            return Equals(virtualMachineGuestIntegrityInfo as VirtualMachineGuestIntegrityInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled).GetHashCode();
        }
    }

    public class VirtualMachineGuestQuiesceSpec : DynamicData, IEquatable<VirtualMachineGuestQuiesceSpec>
    {
        public int? Timeout { get; set; }

        public bool Equals(VirtualMachineGuestQuiesceSpec virtualMachineGuestQuiesceSpec)
        {
            return (virtualMachineGuestQuiesceSpec != null && ((this.Timeout == null && virtualMachineGuestQuiesceSpec.Timeout == null) || (this.Timeout != null && this.Timeout.Equals(virtualMachineGuestQuiesceSpec.Timeout))));
        }

        public override bool Equals(object virtualMachineGuestQuiesceSpec)
        {
            return Equals(virtualMachineGuestQuiesceSpec as VirtualMachineGuestQuiesceSpec);
        }

        public override int GetHashCode()
        {
            return (Timeout).GetHashCode();
        }
    }

    public class VirtualMachineGuestSummary : DynamicData, IEquatable<VirtualMachineGuestSummary>
    {
        public string GuestId { get; set; }

        public string GuestFullName { get; set; }

        public VirtualMachineToolsStatus? ToolsStatus { get; set; }

        public string ToolsVersionStatus { get; set; }

        public string ToolsVersionStatus2 { get; set; }

        public string ToolsRunningStatus { get; set; }

        public string HostName { get; set; }

        public string IpAddress { get; set; }

        public bool Equals(VirtualMachineGuestSummary virtualMachineGuestSummary)
        {
            return (virtualMachineGuestSummary != null && this.GuestId == virtualMachineGuestSummary.GuestId && this.GuestFullName == virtualMachineGuestSummary.GuestFullName && ((this.ToolsStatus == null && virtualMachineGuestSummary.ToolsStatus == null) || (this.ToolsStatus != null && this.ToolsStatus.Equals(virtualMachineGuestSummary.ToolsStatus))) && this.ToolsVersionStatus == virtualMachineGuestSummary.ToolsVersionStatus && this.ToolsVersionStatus2 == virtualMachineGuestSummary.ToolsVersionStatus2 && this.ToolsRunningStatus == virtualMachineGuestSummary.ToolsRunningStatus && this.HostName == virtualMachineGuestSummary.HostName && this.IpAddress == virtualMachineGuestSummary.IpAddress);
        }

        public override bool Equals(object virtualMachineGuestSummary)
        {
            return Equals(virtualMachineGuestSummary as VirtualMachineGuestSummary);
        }

        public override int GetHashCode()
        {
            return (GuestId + "_" + GuestFullName + "_" + ToolsStatus + "_" + ToolsVersionStatus + "_" + ToolsVersionStatus2 + "_" + ToolsRunningStatus + "_" + HostName + "_" + IpAddress).GetHashCode();
        }
    }

    public class VirtualMachineIdeDiskDeviceInfo : VirtualMachineDiskDeviceInfo, IEquatable<VirtualMachineIdeDiskDeviceInfo>
    {
        public VirtualMachineIdeDiskDevicePartitionInfo[] PartitionTable { get; set; }

        public new VirtualMachineIdeDiskDeviceInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineIdeDiskDeviceInfo virtualMachineIdeDiskDeviceInfo)
        {
            return (virtualMachineIdeDiskDeviceInfo != null && ((this.PartitionTable == null && virtualMachineIdeDiskDeviceInfo.PartitionTable == null) || (this.PartitionTable != null && virtualMachineIdeDiskDeviceInfo.PartitionTable != null && Enumerable.SequenceEqual(this.PartitionTable, virtualMachineIdeDiskDeviceInfo.PartitionTable))) && ((this.LinkedView == null && virtualMachineIdeDiskDeviceInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineIdeDiskDeviceInfo.LinkedView))));
        }

        public override bool Equals(object virtualMachineIdeDiskDeviceInfo)
        {
            return Equals(virtualMachineIdeDiskDeviceInfo as VirtualMachineIdeDiskDeviceInfo);
        }

        public override int GetHashCode()
        {
            return (PartitionTable + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineIdeDiskDeviceInfo_LinkedView : VirtualMachineDiskDeviceInfo_LinkedView, IEquatable<VirtualMachineIdeDiskDeviceInfo_LinkedView>
    {
        public bool Equals(VirtualMachineIdeDiskDeviceInfo_LinkedView virtualMachineIdeDiskDeviceInfo_LinkedView)
        {
            return (virtualMachineIdeDiskDeviceInfo_LinkedView != null && base.Equals(virtualMachineIdeDiskDeviceInfo_LinkedView));
        }

        public override bool Equals(object virtualMachineIdeDiskDeviceInfo_LinkedView)
        {
            return Equals(virtualMachineIdeDiskDeviceInfo_LinkedView as VirtualMachineIdeDiskDeviceInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineIdeDiskDevicePartitionInfo : DynamicData, IEquatable<VirtualMachineIdeDiskDevicePartitionInfo>
    {
        public int Id { get; set; }

        public int Capacity { get; set; }

        public bool Equals(VirtualMachineIdeDiskDevicePartitionInfo virtualMachineIdeDiskDevicePartitionInfo)
        {
            return (virtualMachineIdeDiskDevicePartitionInfo != null && this.Id == virtualMachineIdeDiskDevicePartitionInfo.Id && this.Capacity == virtualMachineIdeDiskDevicePartitionInfo.Capacity);
        }

        public override bool Equals(object virtualMachineIdeDiskDevicePartitionInfo)
        {
            return Equals(virtualMachineIdeDiskDevicePartitionInfo as VirtualMachineIdeDiskDevicePartitionInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Capacity).GetHashCode();
        }
    }

    public class VirtualMachineImportSpec : ImportSpec, IEquatable<VirtualMachineImportSpec>
    {
        public VirtualMachineConfigSpec ConfigSpec { get; set; }

        public ManagedObjectReference ResPoolEntity { get; set; }

        public VirtualMachineImportSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineImportSpec virtualMachineImportSpec)
        {
            return (virtualMachineImportSpec != null && ((this.ConfigSpec == null && virtualMachineImportSpec.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(virtualMachineImportSpec.ConfigSpec))) && ((this.ResPoolEntity == null && virtualMachineImportSpec.ResPoolEntity == null) || (this.ResPoolEntity != null && this.ResPoolEntity.Equals(virtualMachineImportSpec.ResPoolEntity))) && ((this.LinkedView == null && virtualMachineImportSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineImportSpec.LinkedView))));
        }

        public override bool Equals(object virtualMachineImportSpec)
        {
            return Equals(virtualMachineImportSpec as VirtualMachineImportSpec);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + ResPoolEntity + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineImportSpec_LinkedView : IEquatable<VirtualMachineImportSpec_LinkedView>
    {
        public ResourcePool ResPoolEntity { get; set; }

        public bool Equals(VirtualMachineImportSpec_LinkedView virtualMachineImportSpec_LinkedView)
        {
            return (virtualMachineImportSpec_LinkedView != null && ((this.ResPoolEntity == null && virtualMachineImportSpec_LinkedView.ResPoolEntity == null) || (this.ResPoolEntity != null && this.ResPoolEntity.Equals(virtualMachineImportSpec_LinkedView.ResPoolEntity))));
        }

        public override bool Equals(object virtualMachineImportSpec_LinkedView)
        {
            return Equals(virtualMachineImportSpec_LinkedView as VirtualMachineImportSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ResPoolEntity).GetHashCode();
        }
    }

    public class VirtualMachineInstantCloneSpec : DynamicData, IEquatable<VirtualMachineInstantCloneSpec>
    {
        public string Name { get; set; }

        public VirtualMachineRelocateSpec Location { get; set; }

        public OptionValue[] Config { get; set; }

        public string BiosUuid { get; set; }

        public bool Equals(VirtualMachineInstantCloneSpec virtualMachineInstantCloneSpec)
        {
            return (virtualMachineInstantCloneSpec != null && this.Name == virtualMachineInstantCloneSpec.Name && ((this.Location == null && virtualMachineInstantCloneSpec.Location == null) || (this.Location != null && this.Location.Equals(virtualMachineInstantCloneSpec.Location))) && ((this.Config == null && virtualMachineInstantCloneSpec.Config == null) || (this.Config != null && virtualMachineInstantCloneSpec.Config != null && Enumerable.SequenceEqual(this.Config, virtualMachineInstantCloneSpec.Config))) && this.BiosUuid == virtualMachineInstantCloneSpec.BiosUuid);
        }

        public override bool Equals(object virtualMachineInstantCloneSpec)
        {
            return Equals(virtualMachineInstantCloneSpec as VirtualMachineInstantCloneSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Location + "_" + Config + "_" + BiosUuid).GetHashCode();
        }
    }

    public class VirtualMachineLegacyNetworkSwitchInfo : DynamicData, IEquatable<VirtualMachineLegacyNetworkSwitchInfo>
    {
        public string Name { get; set; }

        public bool Equals(VirtualMachineLegacyNetworkSwitchInfo virtualMachineLegacyNetworkSwitchInfo)
        {
            return (virtualMachineLegacyNetworkSwitchInfo != null && this.Name == virtualMachineLegacyNetworkSwitchInfo.Name);
        }

        public override bool Equals(object virtualMachineLegacyNetworkSwitchInfo)
        {
            return Equals(virtualMachineLegacyNetworkSwitchInfo as VirtualMachineLegacyNetworkSwitchInfo);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class VirtualMachineMemoryReservationInfo : DynamicData, IEquatable<VirtualMachineMemoryReservationInfo>
    {
        public long VirtualMachineMin { get; set; }

        public long VirtualMachineMax { get; set; }

        public long VirtualMachineReserved { get; set; }

        public string AllocationPolicy { get; set; }

        public bool Equals(VirtualMachineMemoryReservationInfo virtualMachineMemoryReservationInfo)
        {
            return (virtualMachineMemoryReservationInfo != null && this.VirtualMachineMin == virtualMachineMemoryReservationInfo.VirtualMachineMin && this.VirtualMachineMax == virtualMachineMemoryReservationInfo.VirtualMachineMax && this.VirtualMachineReserved == virtualMachineMemoryReservationInfo.VirtualMachineReserved && this.AllocationPolicy == virtualMachineMemoryReservationInfo.AllocationPolicy);
        }

        public override bool Equals(object virtualMachineMemoryReservationInfo)
        {
            return Equals(virtualMachineMemoryReservationInfo as VirtualMachineMemoryReservationInfo);
        }

        public override int GetHashCode()
        {
            return (VirtualMachineMin + "_" + VirtualMachineMax + "_" + VirtualMachineReserved + "_" + AllocationPolicy).GetHashCode();
        }
    }

    public class VirtualMachineMemoryReservationSpec : DynamicData, IEquatable<VirtualMachineMemoryReservationSpec>
    {
        public long? VirtualMachineReserved { get; set; }

        public string AllocationPolicy { get; set; }

        public bool Equals(VirtualMachineMemoryReservationSpec virtualMachineMemoryReservationSpec)
        {
            return (virtualMachineMemoryReservationSpec != null && ((this.VirtualMachineReserved == null && virtualMachineMemoryReservationSpec.VirtualMachineReserved == null) || (this.VirtualMachineReserved != null && this.VirtualMachineReserved.Equals(virtualMachineMemoryReservationSpec.VirtualMachineReserved))) && this.AllocationPolicy == virtualMachineMemoryReservationSpec.AllocationPolicy);
        }

        public override bool Equals(object virtualMachineMemoryReservationSpec)
        {
            return Equals(virtualMachineMemoryReservationSpec as VirtualMachineMemoryReservationSpec);
        }

        public override int GetHashCode()
        {
            return (VirtualMachineReserved + "_" + AllocationPolicy).GetHashCode();
        }
    }

    public class VirtualMachineMessage : DynamicData, IEquatable<VirtualMachineMessage>
    {
        public string Id { get; set; }

        public object[] Argument { get; set; }

        public string Text { get; set; }

        public bool Equals(VirtualMachineMessage virtualMachineMessage)
        {
            return (virtualMachineMessage != null && this.Id == virtualMachineMessage.Id && ((this.Argument == null && virtualMachineMessage.Argument == null) || (this.Argument != null && virtualMachineMessage.Argument != null && Enumerable.SequenceEqual(this.Argument, virtualMachineMessage.Argument))) && this.Text == virtualMachineMessage.Text);
        }

        public override bool Equals(object virtualMachineMessage)
        {
            return Equals(virtualMachineMessage as VirtualMachineMessage);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Argument + "_" + Text).GetHashCode();
        }
    }

    public class VirtualMachineMetadataManagerVmMetadata : DynamicData, IEquatable<VirtualMachineMetadataManagerVmMetadata>
    {
        public string VmId { get; set; }

        public string Metadata { get; set; }

        public bool Equals(VirtualMachineMetadataManagerVmMetadata virtualMachineMetadataManagerVmMetadata)
        {
            return (virtualMachineMetadataManagerVmMetadata != null && this.VmId == virtualMachineMetadataManagerVmMetadata.VmId && this.Metadata == virtualMachineMetadataManagerVmMetadata.Metadata);
        }

        public override bool Equals(object virtualMachineMetadataManagerVmMetadata)
        {
            return Equals(virtualMachineMetadataManagerVmMetadata as VirtualMachineMetadataManagerVmMetadata);
        }

        public override int GetHashCode()
        {
            return (VmId + "_" + Metadata).GetHashCode();
        }
    }

    public class VirtualMachineMetadataManagerVmMetadataInput : DynamicData, IEquatable<VirtualMachineMetadataManagerVmMetadataInput>
    {
        public string Operation { get; set; }

        public VirtualMachineMetadataManagerVmMetadata VmMetadata { get; set; }

        public bool Equals(VirtualMachineMetadataManagerVmMetadataInput virtualMachineMetadataManagerVmMetadataInput)
        {
            return (virtualMachineMetadataManagerVmMetadataInput != null && this.Operation == virtualMachineMetadataManagerVmMetadataInput.Operation && ((this.VmMetadata == null && virtualMachineMetadataManagerVmMetadataInput.VmMetadata == null) || (this.VmMetadata != null && this.VmMetadata.Equals(virtualMachineMetadataManagerVmMetadataInput.VmMetadata))));
        }

        public override bool Equals(object virtualMachineMetadataManagerVmMetadataInput)
        {
            return Equals(virtualMachineMetadataManagerVmMetadataInput as VirtualMachineMetadataManagerVmMetadataInput);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + VmMetadata).GetHashCode();
        }
    }

    public class VirtualMachineMetadataManagerVmMetadataOwner : DynamicData, IEquatable<VirtualMachineMetadataManagerVmMetadataOwner>
    {
        public string Name { get; set; }

        public bool Equals(VirtualMachineMetadataManagerVmMetadataOwner virtualMachineMetadataManagerVmMetadataOwner)
        {
            return (virtualMachineMetadataManagerVmMetadataOwner != null && this.Name == virtualMachineMetadataManagerVmMetadataOwner.Name);
        }

        public override bool Equals(object virtualMachineMetadataManagerVmMetadataOwner)
        {
            return Equals(virtualMachineMetadataManagerVmMetadataOwner as VirtualMachineMetadataManagerVmMetadataOwner);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class VirtualMachineMetadataManagerVmMetadataResult : DynamicData, IEquatable<VirtualMachineMetadataManagerVmMetadataResult>
    {
        public VirtualMachineMetadataManagerVmMetadata VmMetadata { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public bool Equals(VirtualMachineMetadataManagerVmMetadataResult virtualMachineMetadataManagerVmMetadataResult)
        {
            return (virtualMachineMetadataManagerVmMetadataResult != null && ((this.VmMetadata == null && virtualMachineMetadataManagerVmMetadataResult.VmMetadata == null) || (this.VmMetadata != null && this.VmMetadata.Equals(virtualMachineMetadataManagerVmMetadataResult.VmMetadata))) && ((this.Error == null && virtualMachineMetadataManagerVmMetadataResult.Error == null) || (this.Error != null && this.Error.Equals(virtualMachineMetadataManagerVmMetadataResult.Error))));
        }

        public override bool Equals(object virtualMachineMetadataManagerVmMetadataResult)
        {
            return Equals(virtualMachineMetadataManagerVmMetadataResult as VirtualMachineMetadataManagerVmMetadataResult);
        }

        public override int GetHashCode()
        {
            return (VmMetadata + "_" + Error).GetHashCode();
        }
    }

    public class VirtualMachineMksTicket : DynamicData, IEquatable<VirtualMachineMksTicket>
    {
        public string Ticket { get; set; }

        public string CfgFile { get; set; }

        public string Host { get; set; }

        public int? Port { get; set; }

        public string SslThumbprint { get; set; }

        public bool Equals(VirtualMachineMksTicket virtualMachineMksTicket)
        {
            return (virtualMachineMksTicket != null && this.Ticket == virtualMachineMksTicket.Ticket && this.CfgFile == virtualMachineMksTicket.CfgFile && this.Host == virtualMachineMksTicket.Host && ((this.Port == null && virtualMachineMksTicket.Port == null) || (this.Port != null && this.Port.Equals(virtualMachineMksTicket.Port))) && this.SslThumbprint == virtualMachineMksTicket.SslThumbprint);
        }

        public override bool Equals(object virtualMachineMksTicket)
        {
            return Equals(virtualMachineMksTicket as VirtualMachineMksTicket);
        }

        public override int GetHashCode()
        {
            return (Ticket + "_" + CfgFile + "_" + Host + "_" + Port + "_" + SslThumbprint).GetHashCode();
        }
    }

    public class VirtualMachineNetworkInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineNetworkInfo>
    {
        public NetworkSummary Network { get; set; }

        public string Vswitch { get; set; }

        public bool Equals(VirtualMachineNetworkInfo virtualMachineNetworkInfo)
        {
            return (virtualMachineNetworkInfo != null && ((this.Network == null && virtualMachineNetworkInfo.Network == null) || (this.Network != null && this.Network.Equals(virtualMachineNetworkInfo.Network))) && this.Vswitch == virtualMachineNetworkInfo.Vswitch);
        }

        public override bool Equals(object virtualMachineNetworkInfo)
        {
            return Equals(virtualMachineNetworkInfo as VirtualMachineNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + Vswitch).GetHashCode();
        }
    }

    public class VirtualMachineNetworkShaperInfo : DynamicData, IEquatable<VirtualMachineNetworkShaperInfo>
    {
        public bool? Enabled { get; set; }

        public long? PeakBps { get; set; }

        public long? AverageBps { get; set; }

        public long? BurstSize { get; set; }

        public bool Equals(VirtualMachineNetworkShaperInfo virtualMachineNetworkShaperInfo)
        {
            return (virtualMachineNetworkShaperInfo != null && ((this.Enabled == null && virtualMachineNetworkShaperInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(virtualMachineNetworkShaperInfo.Enabled))) && ((this.PeakBps == null && virtualMachineNetworkShaperInfo.PeakBps == null) || (this.PeakBps != null && this.PeakBps.Equals(virtualMachineNetworkShaperInfo.PeakBps))) && ((this.AverageBps == null && virtualMachineNetworkShaperInfo.AverageBps == null) || (this.AverageBps != null && this.AverageBps.Equals(virtualMachineNetworkShaperInfo.AverageBps))) && ((this.BurstSize == null && virtualMachineNetworkShaperInfo.BurstSize == null) || (this.BurstSize != null && this.BurstSize.Equals(virtualMachineNetworkShaperInfo.BurstSize))));
        }

        public override bool Equals(object virtualMachineNetworkShaperInfo)
        {
            return Equals(virtualMachineNetworkShaperInfo as VirtualMachineNetworkShaperInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + PeakBps + "_" + AverageBps + "_" + BurstSize).GetHashCode();
        }
    }

    public class VirtualMachineParallelInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineParallelInfo>
    {
        public bool Equals(VirtualMachineParallelInfo virtualMachineParallelInfo)
        {
            return (virtualMachineParallelInfo != null && base.Equals(virtualMachineParallelInfo));
        }

        public override bool Equals(object virtualMachineParallelInfo)
        {
            return Equals(virtualMachineParallelInfo as VirtualMachineParallelInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachinePciPassthroughInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachinePciPassthroughInfo>
    {
        public HostPciDevice PciDevice { get; set; }

        public string SystemId { get; set; }

        public bool Equals(VirtualMachinePciPassthroughInfo virtualMachinePciPassthroughInfo)
        {
            return (virtualMachinePciPassthroughInfo != null && ((this.PciDevice == null && virtualMachinePciPassthroughInfo.PciDevice == null) || (this.PciDevice != null && this.PciDevice.Equals(virtualMachinePciPassthroughInfo.PciDevice))) && this.SystemId == virtualMachinePciPassthroughInfo.SystemId);
        }

        public override bool Equals(object virtualMachinePciPassthroughInfo)
        {
            return Equals(virtualMachinePciPassthroughInfo as VirtualMachinePciPassthroughInfo);
        }

        public override int GetHashCode()
        {
            return (PciDevice + "_" + SystemId).GetHashCode();
        }
    }

    public class VirtualMachinePciSharedGpuPassthroughInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachinePciSharedGpuPassthroughInfo>
    {
        public string Vgpu { get; set; }

        public bool Equals(VirtualMachinePciSharedGpuPassthroughInfo virtualMachinePciSharedGpuPassthroughInfo)
        {
            return (virtualMachinePciSharedGpuPassthroughInfo != null && this.Vgpu == virtualMachinePciSharedGpuPassthroughInfo.Vgpu);
        }

        public override bool Equals(object virtualMachinePciSharedGpuPassthroughInfo)
        {
            return Equals(virtualMachinePciSharedGpuPassthroughInfo as VirtualMachinePciSharedGpuPassthroughInfo);
        }

        public override int GetHashCode()
        {
            return (Vgpu).GetHashCode();
        }
    }

    public class VirtualMachineProfileDetails : DynamicData, IEquatable<VirtualMachineProfileDetails>
    {
        public VirtualMachineProfileSpec[] Profile { get; set; }

        public VirtualMachineProfileDetailsDiskProfileDetails[] DiskProfileDetails { get; set; }

        public bool Equals(VirtualMachineProfileDetails virtualMachineProfileDetails)
        {
            return (virtualMachineProfileDetails != null && ((this.Profile == null && virtualMachineProfileDetails.Profile == null) || (this.Profile != null && virtualMachineProfileDetails.Profile != null && Enumerable.SequenceEqual(this.Profile, virtualMachineProfileDetails.Profile))) && ((this.DiskProfileDetails == null && virtualMachineProfileDetails.DiskProfileDetails == null) || (this.DiskProfileDetails != null && virtualMachineProfileDetails.DiskProfileDetails != null && Enumerable.SequenceEqual(this.DiskProfileDetails, virtualMachineProfileDetails.DiskProfileDetails))));
        }

        public override bool Equals(object virtualMachineProfileDetails)
        {
            return Equals(virtualMachineProfileDetails as VirtualMachineProfileDetails);
        }

        public override int GetHashCode()
        {
            return (Profile + "_" + DiskProfileDetails).GetHashCode();
        }
    }

    public class VirtualMachineProfileDetailsDiskProfileDetails : DynamicData, IEquatable<VirtualMachineProfileDetailsDiskProfileDetails>
    {
        public int DiskId { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public bool Equals(VirtualMachineProfileDetailsDiskProfileDetails virtualMachineProfileDetailsDiskProfileDetails)
        {
            return (virtualMachineProfileDetailsDiskProfileDetails != null && this.DiskId == virtualMachineProfileDetailsDiskProfileDetails.DiskId && ((this.Profile == null && virtualMachineProfileDetailsDiskProfileDetails.Profile == null) || (this.Profile != null && virtualMachineProfileDetailsDiskProfileDetails.Profile != null && Enumerable.SequenceEqual(this.Profile, virtualMachineProfileDetailsDiskProfileDetails.Profile))));
        }

        public override bool Equals(object virtualMachineProfileDetailsDiskProfileDetails)
        {
            return Equals(virtualMachineProfileDetailsDiskProfileDetails as VirtualMachineProfileDetailsDiskProfileDetails);
        }

        public override int GetHashCode()
        {
            return (DiskId + "_" + Profile).GetHashCode();
        }
    }

    public class VirtualMachineProfileRawData : DynamicData, IEquatable<VirtualMachineProfileRawData>
    {
        public string ExtensionKey { get; set; }

        public string ObjectData { get; set; }

        public bool Equals(VirtualMachineProfileRawData virtualMachineProfileRawData)
        {
            return (virtualMachineProfileRawData != null && this.ExtensionKey == virtualMachineProfileRawData.ExtensionKey && this.ObjectData == virtualMachineProfileRawData.ObjectData);
        }

        public override bool Equals(object virtualMachineProfileRawData)
        {
            return Equals(virtualMachineProfileRawData as VirtualMachineProfileRawData);
        }

        public override int GetHashCode()
        {
            return (ExtensionKey + "_" + ObjectData).GetHashCode();
        }
    }

    public class VirtualMachineProfileSpec : DynamicData, IEquatable<VirtualMachineProfileSpec>
    {
        public bool Equals(VirtualMachineProfileSpec virtualMachineProfileSpec)
        {
            return (virtualMachineProfileSpec != null && base.Equals(virtualMachineProfileSpec));
        }

        public override bool Equals(object virtualMachineProfileSpec)
        {
            return Equals(virtualMachineProfileSpec as VirtualMachineProfileSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachinePropertyRelation : DynamicData, IEquatable<VirtualMachinePropertyRelation>
    {
        public DynamicProperty Key { get; set; }

        public DynamicProperty[] Relations { get; set; }

        public bool Equals(VirtualMachinePropertyRelation virtualMachinePropertyRelation)
        {
            return (virtualMachinePropertyRelation != null && ((this.Key == null && virtualMachinePropertyRelation.Key == null) || (this.Key != null && this.Key.Equals(virtualMachinePropertyRelation.Key))) && ((this.Relations == null && virtualMachinePropertyRelation.Relations == null) || (this.Relations != null && virtualMachinePropertyRelation.Relations != null && Enumerable.SequenceEqual(this.Relations, virtualMachinePropertyRelation.Relations))));
        }

        public override bool Equals(object virtualMachinePropertyRelation)
        {
            return Equals(virtualMachinePropertyRelation as VirtualMachinePropertyRelation);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Relations).GetHashCode();
        }
    }

    public class VirtualMachineProvisioningChecker : ViewBase, IEquatable<VirtualMachineProvisioningChecker>
    {
        public ManagedObjectReference QueryVMotionCompatibilityEx_Task(ManagedObjectReference[] vm, ManagedObjectReference[] host)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] QueryVMotionCompatibilityEx(ManagedObjectReference[] vm, ManagedObjectReference[] host)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckMigrate_Task(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, VirtualMachinePowerState? state, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckMigrate(ManagedObjectReference vm, ManagedObjectReference host, ManagedObjectReference pool, VirtualMachinePowerState? state, string[] testType)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckRelocate_Task(ManagedObjectReference vm, VirtualMachineRelocateSpec spec, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckRelocate(ManagedObjectReference vm, VirtualMachineRelocateSpec spec, string[] testType)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckClone_Task(ManagedObjectReference vm, ManagedObjectReference folder, string name, VirtualMachineCloneSpec spec, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckClone(ManagedObjectReference vm, ManagedObjectReference folder, string name, VirtualMachineCloneSpec spec, string[] testType)
        {
            return default(CheckResult[]);
        }

        public ManagedObjectReference CheckInstantClone_Task(ManagedObjectReference vm, VirtualMachineInstantCloneSpec spec, string[] testType)
        {
            return default(ManagedObjectReference);
        }

        public CheckResult[] CheckInstantClone(ManagedObjectReference vm, VirtualMachineInstantCloneSpec spec, string[] testType)
        {
            return default(CheckResult[]);
        }

        public bool Equals(VirtualMachineProvisioningChecker virtualMachineProvisioningChecker)
        {
            return (virtualMachineProvisioningChecker != null && base.Equals(virtualMachineProvisioningChecker));
        }

        public override bool Equals(object virtualMachineProvisioningChecker)
        {
            return Equals(virtualMachineProvisioningChecker as VirtualMachineProvisioningChecker);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineQuestionInfo : DynamicData, IEquatable<VirtualMachineQuestionInfo>
    {
        public string Id { get; set; }

        public string Text { get; set; }

        public ChoiceOption Choice { get; set; }

        public VirtualMachineMessage[] Message { get; set; }

        public bool Equals(VirtualMachineQuestionInfo virtualMachineQuestionInfo)
        {
            return (virtualMachineQuestionInfo != null && this.Id == virtualMachineQuestionInfo.Id && this.Text == virtualMachineQuestionInfo.Text && ((this.Choice == null && virtualMachineQuestionInfo.Choice == null) || (this.Choice != null && this.Choice.Equals(virtualMachineQuestionInfo.Choice))) && ((this.Message == null && virtualMachineQuestionInfo.Message == null) || (this.Message != null && virtualMachineQuestionInfo.Message != null && Enumerable.SequenceEqual(this.Message, virtualMachineQuestionInfo.Message))));
        }

        public override bool Equals(object virtualMachineQuestionInfo)
        {
            return Equals(virtualMachineQuestionInfo as VirtualMachineQuestionInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Text + "_" + Choice + "_" + Message).GetHashCode();
        }
    }

    public class VirtualMachineQuickStats : DynamicData, IEquatable<VirtualMachineQuickStats>
    {
        public int? OverallCpuUsage { get; set; }

        public int? OverallCpuDemand { get; set; }

        public int? GuestMemoryUsage { get; set; }

        public int? HostMemoryUsage { get; set; }

        public ManagedEntityStatus GuestHeartbeatStatus { get; set; }

        public int? DistributedCpuEntitlement { get; set; }

        public int? DistributedMemoryEntitlement { get; set; }

        public int? StaticCpuEntitlement { get; set; }

        public int? StaticMemoryEntitlement { get; set; }

        public int? PrivateMemory { get; set; }

        public int? SharedMemory { get; set; }

        public int? SwappedMemory { get; set; }

        public int? BalloonedMemory { get; set; }

        public int? ConsumedOverheadMemory { get; set; }

        public int? FtLogBandwidth { get; set; }

        public int? FtSecondaryLatency { get; set; }

        public ManagedEntityStatus? FtLatencyStatus { get; set; }

        public long? CompressedMemory { get; set; }

        public int? UptimeSeconds { get; set; }

        public long? SsdSwappedMemory { get; set; }

        public bool Equals(VirtualMachineQuickStats virtualMachineQuickStats)
        {
            return (virtualMachineQuickStats != null && ((this.OverallCpuUsage == null && virtualMachineQuickStats.OverallCpuUsage == null) || (this.OverallCpuUsage != null && this.OverallCpuUsage.Equals(virtualMachineQuickStats.OverallCpuUsage))) && ((this.OverallCpuDemand == null && virtualMachineQuickStats.OverallCpuDemand == null) || (this.OverallCpuDemand != null && this.OverallCpuDemand.Equals(virtualMachineQuickStats.OverallCpuDemand))) && ((this.GuestMemoryUsage == null && virtualMachineQuickStats.GuestMemoryUsage == null) || (this.GuestMemoryUsage != null && this.GuestMemoryUsage.Equals(virtualMachineQuickStats.GuestMemoryUsage))) && ((this.HostMemoryUsage == null && virtualMachineQuickStats.HostMemoryUsage == null) || (this.HostMemoryUsage != null && this.HostMemoryUsage.Equals(virtualMachineQuickStats.HostMemoryUsage))) && this.GuestHeartbeatStatus == virtualMachineQuickStats.GuestHeartbeatStatus && ((this.DistributedCpuEntitlement == null && virtualMachineQuickStats.DistributedCpuEntitlement == null) || (this.DistributedCpuEntitlement != null && this.DistributedCpuEntitlement.Equals(virtualMachineQuickStats.DistributedCpuEntitlement))) && ((this.DistributedMemoryEntitlement == null && virtualMachineQuickStats.DistributedMemoryEntitlement == null) || (this.DistributedMemoryEntitlement != null && this.DistributedMemoryEntitlement.Equals(virtualMachineQuickStats.DistributedMemoryEntitlement))) && ((this.StaticCpuEntitlement == null && virtualMachineQuickStats.StaticCpuEntitlement == null) || (this.StaticCpuEntitlement != null && this.StaticCpuEntitlement.Equals(virtualMachineQuickStats.StaticCpuEntitlement))) && ((this.StaticMemoryEntitlement == null && virtualMachineQuickStats.StaticMemoryEntitlement == null) || (this.StaticMemoryEntitlement != null && this.StaticMemoryEntitlement.Equals(virtualMachineQuickStats.StaticMemoryEntitlement))) && ((this.PrivateMemory == null && virtualMachineQuickStats.PrivateMemory == null) || (this.PrivateMemory != null && this.PrivateMemory.Equals(virtualMachineQuickStats.PrivateMemory))) && ((this.SharedMemory == null && virtualMachineQuickStats.SharedMemory == null) || (this.SharedMemory != null && this.SharedMemory.Equals(virtualMachineQuickStats.SharedMemory))) && ((this.SwappedMemory == null && virtualMachineQuickStats.SwappedMemory == null) || (this.SwappedMemory != null && this.SwappedMemory.Equals(virtualMachineQuickStats.SwappedMemory))) && ((this.BalloonedMemory == null && virtualMachineQuickStats.BalloonedMemory == null) || (this.BalloonedMemory != null && this.BalloonedMemory.Equals(virtualMachineQuickStats.BalloonedMemory))) && ((this.ConsumedOverheadMemory == null && virtualMachineQuickStats.ConsumedOverheadMemory == null) || (this.ConsumedOverheadMemory != null && this.ConsumedOverheadMemory.Equals(virtualMachineQuickStats.ConsumedOverheadMemory))) && ((this.FtLogBandwidth == null && virtualMachineQuickStats.FtLogBandwidth == null) || (this.FtLogBandwidth != null && this.FtLogBandwidth.Equals(virtualMachineQuickStats.FtLogBandwidth))) && ((this.FtSecondaryLatency == null && virtualMachineQuickStats.FtSecondaryLatency == null) || (this.FtSecondaryLatency != null && this.FtSecondaryLatency.Equals(virtualMachineQuickStats.FtSecondaryLatency))) && ((this.FtLatencyStatus == null && virtualMachineQuickStats.FtLatencyStatus == null) || (this.FtLatencyStatus != null && this.FtLatencyStatus.Equals(virtualMachineQuickStats.FtLatencyStatus))) && ((this.CompressedMemory == null && virtualMachineQuickStats.CompressedMemory == null) || (this.CompressedMemory != null && this.CompressedMemory.Equals(virtualMachineQuickStats.CompressedMemory))) && ((this.UptimeSeconds == null && virtualMachineQuickStats.UptimeSeconds == null) || (this.UptimeSeconds != null && this.UptimeSeconds.Equals(virtualMachineQuickStats.UptimeSeconds))) && ((this.SsdSwappedMemory == null && virtualMachineQuickStats.SsdSwappedMemory == null) || (this.SsdSwappedMemory != null && this.SsdSwappedMemory.Equals(virtualMachineQuickStats.SsdSwappedMemory))));
        }

        public override bool Equals(object virtualMachineQuickStats)
        {
            return Equals(virtualMachineQuickStats as VirtualMachineQuickStats);
        }

        public override int GetHashCode()
        {
            return (OverallCpuUsage + "_" + OverallCpuDemand + "_" + GuestMemoryUsage + "_" + HostMemoryUsage + "_" + GuestHeartbeatStatus + "_" + DistributedCpuEntitlement + "_" + DistributedMemoryEntitlement + "_" + StaticCpuEntitlement + "_" + StaticMemoryEntitlement + "_" + PrivateMemory + "_" + SharedMemory + "_" + SwappedMemory + "_" + BalloonedMemory + "_" + ConsumedOverheadMemory + "_" + FtLogBandwidth + "_" + FtSecondaryLatency + "_" + FtLatencyStatus + "_" + CompressedMemory + "_" + UptimeSeconds + "_" + SsdSwappedMemory).GetHashCode();
        }
    }

    public class VirtualMachineRelocateSpec : DynamicData, IEquatable<VirtualMachineRelocateSpec>
    {
        public ServiceLocator Service { get; set; }

        public ManagedObjectReference Folder { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public string DiskMoveType { get; set; }

        public ManagedObjectReference Pool { get; set; }

        public ManagedObjectReference Host { get; set; }

        public VirtualMachineRelocateSpecDiskLocator[] Disk { get; set; }

        public VirtualMachineRelocateTransformation? Transform { get; set; }

        public VirtualDeviceConfigSpec[] DeviceChange { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public VirtualMachineRelocateSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineRelocateSpec virtualMachineRelocateSpec)
        {
            return (virtualMachineRelocateSpec != null && ((this.Service == null && virtualMachineRelocateSpec.Service == null) || (this.Service != null && this.Service.Equals(virtualMachineRelocateSpec.Service))) && ((this.Folder == null && virtualMachineRelocateSpec.Folder == null) || (this.Folder != null && this.Folder.Equals(virtualMachineRelocateSpec.Folder))) && ((this.Datastore == null && virtualMachineRelocateSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineRelocateSpec.Datastore))) && this.DiskMoveType == virtualMachineRelocateSpec.DiskMoveType && ((this.Pool == null && virtualMachineRelocateSpec.Pool == null) || (this.Pool != null && this.Pool.Equals(virtualMachineRelocateSpec.Pool))) && ((this.Host == null && virtualMachineRelocateSpec.Host == null) || (this.Host != null && this.Host.Equals(virtualMachineRelocateSpec.Host))) && ((this.Disk == null && virtualMachineRelocateSpec.Disk == null) || (this.Disk != null && virtualMachineRelocateSpec.Disk != null && Enumerable.SequenceEqual(this.Disk, virtualMachineRelocateSpec.Disk))) && ((this.Transform == null && virtualMachineRelocateSpec.Transform == null) || (this.Transform != null && this.Transform.Equals(virtualMachineRelocateSpec.Transform))) && ((this.DeviceChange == null && virtualMachineRelocateSpec.DeviceChange == null) || (this.DeviceChange != null && virtualMachineRelocateSpec.DeviceChange != null && Enumerable.SequenceEqual(this.DeviceChange, virtualMachineRelocateSpec.DeviceChange))) && ((this.Profile == null && virtualMachineRelocateSpec.Profile == null) || (this.Profile != null && virtualMachineRelocateSpec.Profile != null && Enumerable.SequenceEqual(this.Profile, virtualMachineRelocateSpec.Profile))) && ((this.LinkedView == null && virtualMachineRelocateSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineRelocateSpec.LinkedView))));
        }

        public override bool Equals(object virtualMachineRelocateSpec)
        {
            return Equals(virtualMachineRelocateSpec as VirtualMachineRelocateSpec);
        }

        public override int GetHashCode()
        {
            return (Service + "_" + Folder + "_" + Datastore + "_" + DiskMoveType + "_" + Pool + "_" + Host + "_" + Disk + "_" + Transform + "_" + DeviceChange + "_" + Profile + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineRelocateSpec_LinkedView : IEquatable<VirtualMachineRelocateSpec_LinkedView>
    {
        public Folder Folder { get; set; }

        public Datastore Datastore { get; set; }

        public ResourcePool Pool { get; set; }

        public HostSystem Host { get; set; }

        public bool Equals(VirtualMachineRelocateSpec_LinkedView virtualMachineRelocateSpec_LinkedView)
        {
            return (virtualMachineRelocateSpec_LinkedView != null && ((this.Folder == null && virtualMachineRelocateSpec_LinkedView.Folder == null) || (this.Folder != null && this.Folder.Equals(virtualMachineRelocateSpec_LinkedView.Folder))) && ((this.Datastore == null && virtualMachineRelocateSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineRelocateSpec_LinkedView.Datastore))) && ((this.Pool == null && virtualMachineRelocateSpec_LinkedView.Pool == null) || (this.Pool != null && this.Pool.Equals(virtualMachineRelocateSpec_LinkedView.Pool))) && ((this.Host == null && virtualMachineRelocateSpec_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(virtualMachineRelocateSpec_LinkedView.Host))));
        }

        public override bool Equals(object virtualMachineRelocateSpec_LinkedView)
        {
            return Equals(virtualMachineRelocateSpec_LinkedView as VirtualMachineRelocateSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Folder + "_" + Datastore + "_" + Pool + "_" + Host).GetHashCode();
        }
    }

    public class VirtualMachineRelocateSpecDiskLocator : DynamicData, IEquatable<VirtualMachineRelocateSpecDiskLocator>
    {
        public int DiskId { get; set; }

        public ManagedObjectReference Datastore { get; set; }

        public string DiskMoveType { get; set; }

        public VirtualDeviceBackingInfo DiskBackingInfo { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public VirtualMachineRelocateSpecDiskLocator_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineRelocateSpecDiskLocator virtualMachineRelocateSpecDiskLocator)
        {
            return (virtualMachineRelocateSpecDiskLocator != null && this.DiskId == virtualMachineRelocateSpecDiskLocator.DiskId && ((this.Datastore == null && virtualMachineRelocateSpecDiskLocator.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineRelocateSpecDiskLocator.Datastore))) && this.DiskMoveType == virtualMachineRelocateSpecDiskLocator.DiskMoveType && ((this.DiskBackingInfo == null && virtualMachineRelocateSpecDiskLocator.DiskBackingInfo == null) || (this.DiskBackingInfo != null && this.DiskBackingInfo.Equals(virtualMachineRelocateSpecDiskLocator.DiskBackingInfo))) && ((this.Profile == null && virtualMachineRelocateSpecDiskLocator.Profile == null) || (this.Profile != null && virtualMachineRelocateSpecDiskLocator.Profile != null && Enumerable.SequenceEqual(this.Profile, virtualMachineRelocateSpecDiskLocator.Profile))) && ((this.LinkedView == null && virtualMachineRelocateSpecDiskLocator.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineRelocateSpecDiskLocator.LinkedView))));
        }

        public override bool Equals(object virtualMachineRelocateSpecDiskLocator)
        {
            return Equals(virtualMachineRelocateSpecDiskLocator as VirtualMachineRelocateSpecDiskLocator);
        }

        public override int GetHashCode()
        {
            return (DiskId + "_" + Datastore + "_" + DiskMoveType + "_" + DiskBackingInfo + "_" + Profile + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineRelocateSpecDiskLocator_LinkedView : IEquatable<VirtualMachineRelocateSpecDiskLocator_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(VirtualMachineRelocateSpecDiskLocator_LinkedView virtualMachineRelocateSpecDiskLocator_LinkedView)
        {
            return (virtualMachineRelocateSpecDiskLocator_LinkedView != null && ((this.Datastore == null && virtualMachineRelocateSpecDiskLocator_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineRelocateSpecDiskLocator_LinkedView.Datastore))));
        }

        public override bool Equals(object virtualMachineRelocateSpecDiskLocator_LinkedView)
        {
            return Equals(virtualMachineRelocateSpecDiskLocator_LinkedView as VirtualMachineRelocateSpecDiskLocator_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VirtualMachineRuntimeInfo : DynamicData, IEquatable<VirtualMachineRuntimeInfo>
    {
        public VirtualMachineDeviceRuntimeInfo[] Device { get; set; }

        public ManagedObjectReference Host { get; set; }

        public VirtualMachineConnectionState ConnectionState { get; set; }

        public VirtualMachinePowerState PowerState { get; set; }

        public VirtualMachineFaultToleranceState FaultToleranceState { get; set; }

        public VirtualMachineRuntimeInfoDasProtectionState DasVmProtection { get; set; }

        public bool ToolsInstallerMounted { get; set; }

        public DateTime? SuspendTime { get; set; }

        public DateTime? BootTime { get; set; }

        public long? SuspendInterval { get; set; }

        public VirtualMachineQuestionInfo Question { get; set; }

        public long? MemoryOverhead { get; set; }

        public int? MaxCpuUsage { get; set; }

        public int? MaxMemoryUsage { get; set; }

        public int NumMksConnections { get; set; }

        public VirtualMachineRecordReplayState RecordReplayState { get; set; }

        public bool? CleanPowerOff { get; set; }

        public string NeedSecondaryReason { get; set; }

        public bool OnlineStandby { get; set; }

        public string MinRequiredEVCModeKey { get; set; }

        public bool ConsolidationNeeded { get; set; }

        public VirtualMachineFeatureRequirement[] OfflineFeatureRequirement { get; set; }

        public VirtualMachineFeatureRequirement[] FeatureRequirement { get; set; }

        public HostFeatureMask[] FeatureMask { get; set; }

        public long? VFlashCacheAllocation { get; set; }

        public bool? Paused { get; set; }

        public bool? SnapshotInBackground { get; set; }

        public bool? QuiescedForkParent { get; set; }

        public bool? InstantCloneFrozen { get; set; }

        public string CryptoState { get; set; }

        public VirtualMachineRuntimeInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineRuntimeInfo virtualMachineRuntimeInfo)
        {
            return (virtualMachineRuntimeInfo != null && ((this.Device == null && virtualMachineRuntimeInfo.Device == null) || (this.Device != null && virtualMachineRuntimeInfo.Device != null && Enumerable.SequenceEqual(this.Device, virtualMachineRuntimeInfo.Device))) && ((this.Host == null && virtualMachineRuntimeInfo.Host == null) || (this.Host != null && this.Host.Equals(virtualMachineRuntimeInfo.Host))) && this.ConnectionState == virtualMachineRuntimeInfo.ConnectionState && this.PowerState == virtualMachineRuntimeInfo.PowerState && this.FaultToleranceState == virtualMachineRuntimeInfo.FaultToleranceState && ((this.DasVmProtection == null && virtualMachineRuntimeInfo.DasVmProtection == null) || (this.DasVmProtection != null && this.DasVmProtection.Equals(virtualMachineRuntimeInfo.DasVmProtection))) && this.ToolsInstallerMounted == virtualMachineRuntimeInfo.ToolsInstallerMounted && ((this.SuspendTime == null && virtualMachineRuntimeInfo.SuspendTime == null) || (this.SuspendTime != null && this.SuspendTime.Equals(virtualMachineRuntimeInfo.SuspendTime))) && ((this.BootTime == null && virtualMachineRuntimeInfo.BootTime == null) || (this.BootTime != null && this.BootTime.Equals(virtualMachineRuntimeInfo.BootTime))) && ((this.SuspendInterval == null && virtualMachineRuntimeInfo.SuspendInterval == null) || (this.SuspendInterval != null && this.SuspendInterval.Equals(virtualMachineRuntimeInfo.SuspendInterval))) && ((this.Question == null && virtualMachineRuntimeInfo.Question == null) || (this.Question != null && this.Question.Equals(virtualMachineRuntimeInfo.Question))) && ((this.MemoryOverhead == null && virtualMachineRuntimeInfo.MemoryOverhead == null) || (this.MemoryOverhead != null && this.MemoryOverhead.Equals(virtualMachineRuntimeInfo.MemoryOverhead))) && ((this.MaxCpuUsage == null && virtualMachineRuntimeInfo.MaxCpuUsage == null) || (this.MaxCpuUsage != null && this.MaxCpuUsage.Equals(virtualMachineRuntimeInfo.MaxCpuUsage))) && ((this.MaxMemoryUsage == null && virtualMachineRuntimeInfo.MaxMemoryUsage == null) || (this.MaxMemoryUsage != null && this.MaxMemoryUsage.Equals(virtualMachineRuntimeInfo.MaxMemoryUsage))) && this.NumMksConnections == virtualMachineRuntimeInfo.NumMksConnections && this.RecordReplayState == virtualMachineRuntimeInfo.RecordReplayState && ((this.CleanPowerOff == null && virtualMachineRuntimeInfo.CleanPowerOff == null) || (this.CleanPowerOff != null && this.CleanPowerOff.Equals(virtualMachineRuntimeInfo.CleanPowerOff))) && this.NeedSecondaryReason == virtualMachineRuntimeInfo.NeedSecondaryReason && this.OnlineStandby == virtualMachineRuntimeInfo.OnlineStandby && this.MinRequiredEVCModeKey == virtualMachineRuntimeInfo.MinRequiredEVCModeKey && this.ConsolidationNeeded == virtualMachineRuntimeInfo.ConsolidationNeeded && ((this.OfflineFeatureRequirement == null && virtualMachineRuntimeInfo.OfflineFeatureRequirement == null) || (this.OfflineFeatureRequirement != null && virtualMachineRuntimeInfo.OfflineFeatureRequirement != null && Enumerable.SequenceEqual(this.OfflineFeatureRequirement, virtualMachineRuntimeInfo.OfflineFeatureRequirement))) && ((this.FeatureRequirement == null && virtualMachineRuntimeInfo.FeatureRequirement == null) || (this.FeatureRequirement != null && virtualMachineRuntimeInfo.FeatureRequirement != null && Enumerable.SequenceEqual(this.FeatureRequirement, virtualMachineRuntimeInfo.FeatureRequirement))) && ((this.FeatureMask == null && virtualMachineRuntimeInfo.FeatureMask == null) || (this.FeatureMask != null && virtualMachineRuntimeInfo.FeatureMask != null && Enumerable.SequenceEqual(this.FeatureMask, virtualMachineRuntimeInfo.FeatureMask))) && ((this.VFlashCacheAllocation == null && virtualMachineRuntimeInfo.VFlashCacheAllocation == null) || (this.VFlashCacheAllocation != null && this.VFlashCacheAllocation.Equals(virtualMachineRuntimeInfo.VFlashCacheAllocation))) && ((this.Paused == null && virtualMachineRuntimeInfo.Paused == null) || (this.Paused != null && this.Paused.Equals(virtualMachineRuntimeInfo.Paused))) && ((this.SnapshotInBackground == null && virtualMachineRuntimeInfo.SnapshotInBackground == null) || (this.SnapshotInBackground != null && this.SnapshotInBackground.Equals(virtualMachineRuntimeInfo.SnapshotInBackground))) && ((this.QuiescedForkParent == null && virtualMachineRuntimeInfo.QuiescedForkParent == null) || (this.QuiescedForkParent != null && this.QuiescedForkParent.Equals(virtualMachineRuntimeInfo.QuiescedForkParent))) && ((this.InstantCloneFrozen == null && virtualMachineRuntimeInfo.InstantCloneFrozen == null) || (this.InstantCloneFrozen != null && this.InstantCloneFrozen.Equals(virtualMachineRuntimeInfo.InstantCloneFrozen))) && this.CryptoState == virtualMachineRuntimeInfo.CryptoState && ((this.LinkedView == null && virtualMachineRuntimeInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineRuntimeInfo.LinkedView))));
        }

        public override bool Equals(object virtualMachineRuntimeInfo)
        {
            return Equals(virtualMachineRuntimeInfo as VirtualMachineRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Host + "_" + ConnectionState + "_" + PowerState + "_" + FaultToleranceState + "_" + DasVmProtection + "_" + ToolsInstallerMounted + "_" + SuspendTime + "_" + BootTime + "_" + SuspendInterval + "_" + Question + "_" + MemoryOverhead + "_" + MaxCpuUsage + "_" + MaxMemoryUsage + "_" + NumMksConnections + "_" + RecordReplayState + "_" + CleanPowerOff + "_" + NeedSecondaryReason + "_" + OnlineStandby + "_" + MinRequiredEVCModeKey + "_" + ConsolidationNeeded + "_" + OfflineFeatureRequirement + "_" + FeatureRequirement + "_" + FeatureMask + "_" + VFlashCacheAllocation + "_" + Paused + "_" + SnapshotInBackground + "_" + QuiescedForkParent + "_" + InstantCloneFrozen + "_" + CryptoState + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineRuntimeInfo_LinkedView : IEquatable<VirtualMachineRuntimeInfo_LinkedView>
    {
        public HostSystem Host { get; set; }

        public bool Equals(VirtualMachineRuntimeInfo_LinkedView virtualMachineRuntimeInfo_LinkedView)
        {
            return (virtualMachineRuntimeInfo_LinkedView != null && ((this.Host == null && virtualMachineRuntimeInfo_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(virtualMachineRuntimeInfo_LinkedView.Host))));
        }

        public override bool Equals(object virtualMachineRuntimeInfo_LinkedView)
        {
            return Equals(virtualMachineRuntimeInfo_LinkedView as VirtualMachineRuntimeInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host).GetHashCode();
        }
    }

    public class VirtualMachineRuntimeInfoDasProtectionState : DynamicData, IEquatable<VirtualMachineRuntimeInfoDasProtectionState>
    {
        public bool DasProtected { get; set; }

        public bool Equals(VirtualMachineRuntimeInfoDasProtectionState virtualMachineRuntimeInfoDasProtectionState)
        {
            return (virtualMachineRuntimeInfoDasProtectionState != null && this.DasProtected == virtualMachineRuntimeInfoDasProtectionState.DasProtected);
        }

        public override bool Equals(object virtualMachineRuntimeInfoDasProtectionState)
        {
            return Equals(virtualMachineRuntimeInfoDasProtectionState as VirtualMachineRuntimeInfoDasProtectionState);
        }

        public override int GetHashCode()
        {
            return (DasProtected).GetHashCode();
        }
    }

    public class VirtualMachineScsiDiskDeviceInfo : VirtualMachineDiskDeviceInfo, IEquatable<VirtualMachineScsiDiskDeviceInfo>
    {
        public HostScsiDisk Disk { get; set; }

        public string TransportHint { get; set; }

        public int? LunNumber { get; set; }

        public new VirtualMachineScsiDiskDeviceInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineScsiDiskDeviceInfo virtualMachineScsiDiskDeviceInfo)
        {
            return (virtualMachineScsiDiskDeviceInfo != null && ((this.Disk == null && virtualMachineScsiDiskDeviceInfo.Disk == null) || (this.Disk != null && this.Disk.Equals(virtualMachineScsiDiskDeviceInfo.Disk))) && this.TransportHint == virtualMachineScsiDiskDeviceInfo.TransportHint && ((this.LunNumber == null && virtualMachineScsiDiskDeviceInfo.LunNumber == null) || (this.LunNumber != null && this.LunNumber.Equals(virtualMachineScsiDiskDeviceInfo.LunNumber))) && ((this.LinkedView == null && virtualMachineScsiDiskDeviceInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineScsiDiskDeviceInfo.LinkedView))));
        }

        public override bool Equals(object virtualMachineScsiDiskDeviceInfo)
        {
            return Equals(virtualMachineScsiDiskDeviceInfo as VirtualMachineScsiDiskDeviceInfo);
        }

        public override int GetHashCode()
        {
            return (Disk + "_" + TransportHint + "_" + LunNumber + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineScsiDiskDeviceInfo_LinkedView : VirtualMachineDiskDeviceInfo_LinkedView, IEquatable<VirtualMachineScsiDiskDeviceInfo_LinkedView>
    {
        public bool Equals(VirtualMachineScsiDiskDeviceInfo_LinkedView virtualMachineScsiDiskDeviceInfo_LinkedView)
        {
            return (virtualMachineScsiDiskDeviceInfo_LinkedView != null && base.Equals(virtualMachineScsiDiskDeviceInfo_LinkedView));
        }

        public override bool Equals(object virtualMachineScsiDiskDeviceInfo_LinkedView)
        {
            return Equals(virtualMachineScsiDiskDeviceInfo_LinkedView as VirtualMachineScsiDiskDeviceInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineScsiPassthroughInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineScsiPassthroughInfo>
    {
        public string ScsiClass { get; set; }

        public string Vendor { get; set; }

        public int PhysicalUnitNumber { get; set; }

        public bool Equals(VirtualMachineScsiPassthroughInfo virtualMachineScsiPassthroughInfo)
        {
            return (virtualMachineScsiPassthroughInfo != null && this.ScsiClass == virtualMachineScsiPassthroughInfo.ScsiClass && this.Vendor == virtualMachineScsiPassthroughInfo.Vendor && this.PhysicalUnitNumber == virtualMachineScsiPassthroughInfo.PhysicalUnitNumber);
        }

        public override bool Equals(object virtualMachineScsiPassthroughInfo)
        {
            return Equals(virtualMachineScsiPassthroughInfo as VirtualMachineScsiPassthroughInfo);
        }

        public override int GetHashCode()
        {
            return (ScsiClass + "_" + Vendor + "_" + PhysicalUnitNumber).GetHashCode();
        }
    }

    public class VirtualMachineSerialInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineSerialInfo>
    {
        public bool Equals(VirtualMachineSerialInfo virtualMachineSerialInfo)
        {
            return (virtualMachineSerialInfo != null && base.Equals(virtualMachineSerialInfo));
        }

        public override bool Equals(object virtualMachineSerialInfo)
        {
            return Equals(virtualMachineSerialInfo as VirtualMachineSerialInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineSnapshot : ExtensibleManagedObject, IEquatable<VirtualMachineSnapshot>
    {
        public VirtualMachineConfigInfo Config { get; set; }

        public ManagedObjectReference[] ChildSnapshot { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public VirtualMachineSnapshot_LinkedView LinkedView { get; set; }

        public ManagedObjectReference RevertToSnapshot_Task(ManagedObjectReference host, bool? suppressPowerOn)
        {
            return default(ManagedObjectReference);
        }

        public void RevertToSnapshot(ManagedObjectReference host, bool? suppressPowerOn)
        {
        }

        public ManagedObjectReference RemoveSnapshot_Task(bool removeChildren, bool? consolidate)
        {
            return default(ManagedObjectReference);
        }

        public void RemoveSnapshot(bool removeChildren, bool? consolidate)
        {
        }

        public void RenameSnapshot(string name, string description)
        {
        }

        public ManagedObjectReference ExportSnapshot()
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(VirtualMachineSnapshot virtualMachineSnapshot)
        {
            return (virtualMachineSnapshot != null && ((this.Config == null && virtualMachineSnapshot.Config == null) || (this.Config != null && this.Config.Equals(virtualMachineSnapshot.Config))) && ((this.ChildSnapshot == null && virtualMachineSnapshot.ChildSnapshot == null) || (this.ChildSnapshot != null && virtualMachineSnapshot.ChildSnapshot != null && Enumerable.SequenceEqual(this.ChildSnapshot, virtualMachineSnapshot.ChildSnapshot))) && ((this.Vm == null && virtualMachineSnapshot.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSnapshot.Vm))) && ((this.LinkedView == null && virtualMachineSnapshot.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineSnapshot.LinkedView))));
        }

        public override bool Equals(object virtualMachineSnapshot)
        {
            return Equals(virtualMachineSnapshot as VirtualMachineSnapshot);
        }

        public override int GetHashCode()
        {
            return (Config + "_" + ChildSnapshot + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineSnapshot_LinkedView : IEquatable<VirtualMachineSnapshot_LinkedView>
    {
        public VirtualMachineSnapshot[] ChildSnapshot { get; set; }

        public VirtualMachine Vm { get; set; }

        public bool Equals(VirtualMachineSnapshot_LinkedView virtualMachineSnapshot_LinkedView)
        {
            return (virtualMachineSnapshot_LinkedView != null && ((this.ChildSnapshot == null && virtualMachineSnapshot_LinkedView.ChildSnapshot == null) || (this.ChildSnapshot != null && virtualMachineSnapshot_LinkedView.ChildSnapshot != null && Enumerable.SequenceEqual(this.ChildSnapshot, virtualMachineSnapshot_LinkedView.ChildSnapshot))) && ((this.Vm == null && virtualMachineSnapshot_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSnapshot_LinkedView.Vm))));
        }

        public override bool Equals(object virtualMachineSnapshot_LinkedView)
        {
            return Equals(virtualMachineSnapshot_LinkedView as VirtualMachineSnapshot_LinkedView);
        }

        public override int GetHashCode()
        {
            return (ChildSnapshot + "_" + Vm).GetHashCode();
        }
    }

    public class VirtualMachineSnapshotInfo : DynamicData, IEquatable<VirtualMachineSnapshotInfo>
    {
        public ManagedObjectReference CurrentSnapshot { get; set; }

        public VirtualMachineSnapshotTree[] RootSnapshotList { get; set; }

        public VirtualMachineSnapshotInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineSnapshotInfo virtualMachineSnapshotInfo)
        {
            return (virtualMachineSnapshotInfo != null && ((this.CurrentSnapshot == null && virtualMachineSnapshotInfo.CurrentSnapshot == null) || (this.CurrentSnapshot != null && this.CurrentSnapshot.Equals(virtualMachineSnapshotInfo.CurrentSnapshot))) && ((this.RootSnapshotList == null && virtualMachineSnapshotInfo.RootSnapshotList == null) || (this.RootSnapshotList != null && virtualMachineSnapshotInfo.RootSnapshotList != null && Enumerable.SequenceEqual(this.RootSnapshotList, virtualMachineSnapshotInfo.RootSnapshotList))) && ((this.LinkedView == null && virtualMachineSnapshotInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineSnapshotInfo.LinkedView))));
        }

        public override bool Equals(object virtualMachineSnapshotInfo)
        {
            return Equals(virtualMachineSnapshotInfo as VirtualMachineSnapshotInfo);
        }

        public override int GetHashCode()
        {
            return (CurrentSnapshot + "_" + RootSnapshotList + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineSnapshotInfo_LinkedView : IEquatable<VirtualMachineSnapshotInfo_LinkedView>
    {
        public VirtualMachineSnapshot CurrentSnapshot { get; set; }

        public bool Equals(VirtualMachineSnapshotInfo_LinkedView virtualMachineSnapshotInfo_LinkedView)
        {
            return (virtualMachineSnapshotInfo_LinkedView != null && ((this.CurrentSnapshot == null && virtualMachineSnapshotInfo_LinkedView.CurrentSnapshot == null) || (this.CurrentSnapshot != null && this.CurrentSnapshot.Equals(virtualMachineSnapshotInfo_LinkedView.CurrentSnapshot))));
        }

        public override bool Equals(object virtualMachineSnapshotInfo_LinkedView)
        {
            return Equals(virtualMachineSnapshotInfo_LinkedView as VirtualMachineSnapshotInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (CurrentSnapshot).GetHashCode();
        }
    }

    public class VirtualMachineSnapshotTree : DynamicData, IEquatable<VirtualMachineSnapshotTree>
    {
        public ManagedObjectReference Snapshot { get; set; }

        public ManagedObjectReference Vm { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public int Id { get; set; }

        public DateTime CreateTime { get; set; }

        public VirtualMachinePowerState State { get; set; }

        public bool Quiesced { get; set; }

        public string BackupManifest { get; set; }

        public VirtualMachineSnapshotTree[] ChildSnapshotList { get; set; }

        public bool? ReplaySupported { get; set; }

        public VirtualMachineSnapshotTree_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineSnapshotTree virtualMachineSnapshotTree)
        {
            return (virtualMachineSnapshotTree != null && ((this.Snapshot == null && virtualMachineSnapshotTree.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(virtualMachineSnapshotTree.Snapshot))) && ((this.Vm == null && virtualMachineSnapshotTree.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSnapshotTree.Vm))) && this.Name == virtualMachineSnapshotTree.Name && this.Description == virtualMachineSnapshotTree.Description && this.Id == virtualMachineSnapshotTree.Id && this.CreateTime == virtualMachineSnapshotTree.CreateTime && this.State == virtualMachineSnapshotTree.State && this.Quiesced == virtualMachineSnapshotTree.Quiesced && this.BackupManifest == virtualMachineSnapshotTree.BackupManifest && ((this.ChildSnapshotList == null && virtualMachineSnapshotTree.ChildSnapshotList == null) || (this.ChildSnapshotList != null && virtualMachineSnapshotTree.ChildSnapshotList != null && Enumerable.SequenceEqual(this.ChildSnapshotList, virtualMachineSnapshotTree.ChildSnapshotList))) && ((this.ReplaySupported == null && virtualMachineSnapshotTree.ReplaySupported == null) || (this.ReplaySupported != null && this.ReplaySupported.Equals(virtualMachineSnapshotTree.ReplaySupported))) && ((this.LinkedView == null && virtualMachineSnapshotTree.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineSnapshotTree.LinkedView))));
        }

        public override bool Equals(object virtualMachineSnapshotTree)
        {
            return Equals(virtualMachineSnapshotTree as VirtualMachineSnapshotTree);
        }

        public override int GetHashCode()
        {
            return (Snapshot + "_" + Vm + "_" + Name + "_" + Description + "_" + Id + "_" + CreateTime + "_" + State + "_" + Quiesced + "_" + BackupManifest + "_" + ChildSnapshotList + "_" + ReplaySupported + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineSnapshotTree_LinkedView : IEquatable<VirtualMachineSnapshotTree_LinkedView>
    {
        public VirtualMachineSnapshot Snapshot { get; set; }

        public VirtualMachine Vm { get; set; }

        public bool Equals(VirtualMachineSnapshotTree_LinkedView virtualMachineSnapshotTree_LinkedView)
        {
            return (virtualMachineSnapshotTree_LinkedView != null && ((this.Snapshot == null && virtualMachineSnapshotTree_LinkedView.Snapshot == null) || (this.Snapshot != null && this.Snapshot.Equals(virtualMachineSnapshotTree_LinkedView.Snapshot))) && ((this.Vm == null && virtualMachineSnapshotTree_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSnapshotTree_LinkedView.Vm))));
        }

        public override bool Equals(object virtualMachineSnapshotTree_LinkedView)
        {
            return Equals(virtualMachineSnapshotTree_LinkedView as VirtualMachineSnapshotTree_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Snapshot + "_" + Vm).GetHashCode();
        }
    }

    public class VirtualMachineSoundInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineSoundInfo>
    {
        public bool Equals(VirtualMachineSoundInfo virtualMachineSoundInfo)
        {
            return (virtualMachineSoundInfo != null && base.Equals(virtualMachineSoundInfo));
        }

        public override bool Equals(object virtualMachineSoundInfo)
        {
            return Equals(virtualMachineSoundInfo as VirtualMachineSoundInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineSriovDevicePoolInfo : DynamicData, IEquatable<VirtualMachineSriovDevicePoolInfo>
    {
        public string Key { get; set; }

        public bool Equals(VirtualMachineSriovDevicePoolInfo virtualMachineSriovDevicePoolInfo)
        {
            return (virtualMachineSriovDevicePoolInfo != null && this.Key == virtualMachineSriovDevicePoolInfo.Key);
        }

        public override bool Equals(object virtualMachineSriovDevicePoolInfo)
        {
            return Equals(virtualMachineSriovDevicePoolInfo as VirtualMachineSriovDevicePoolInfo);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VirtualMachineSriovInfo : VirtualMachinePciPassthroughInfo, IEquatable<VirtualMachineSriovInfo>
    {
        public bool VirtualFunction { get; set; }

        public string Pnic { get; set; }

        public VirtualMachineSriovDevicePoolInfo DevicePool { get; set; }

        public bool Equals(VirtualMachineSriovInfo virtualMachineSriovInfo)
        {
            return (virtualMachineSriovInfo != null && this.VirtualFunction == virtualMachineSriovInfo.VirtualFunction && this.Pnic == virtualMachineSriovInfo.Pnic && ((this.DevicePool == null && virtualMachineSriovInfo.DevicePool == null) || (this.DevicePool != null && this.DevicePool.Equals(virtualMachineSriovInfo.DevicePool))));
        }

        public override bool Equals(object virtualMachineSriovInfo)
        {
            return Equals(virtualMachineSriovInfo as VirtualMachineSriovInfo);
        }

        public override int GetHashCode()
        {
            return (VirtualFunction + "_" + Pnic + "_" + DevicePool).GetHashCode();
        }
    }

    public class VirtualMachineSriovNetworkDevicePoolInfo : VirtualMachineSriovDevicePoolInfo, IEquatable<VirtualMachineSriovNetworkDevicePoolInfo>
    {
        public string SwitchKey { get; set; }

        public string SwitchUuid { get; set; }

        public bool Equals(VirtualMachineSriovNetworkDevicePoolInfo virtualMachineSriovNetworkDevicePoolInfo)
        {
            return (virtualMachineSriovNetworkDevicePoolInfo != null && this.SwitchKey == virtualMachineSriovNetworkDevicePoolInfo.SwitchKey && this.SwitchUuid == virtualMachineSriovNetworkDevicePoolInfo.SwitchUuid);
        }

        public override bool Equals(object virtualMachineSriovNetworkDevicePoolInfo)
        {
            return Equals(virtualMachineSriovNetworkDevicePoolInfo as VirtualMachineSriovNetworkDevicePoolInfo);
        }

        public override int GetHashCode()
        {
            return (SwitchKey + "_" + SwitchUuid).GetHashCode();
        }
    }

    public class VirtualMachineStorageInfo : DynamicData, IEquatable<VirtualMachineStorageInfo>
    {
        public VirtualMachineUsageOnDatastore[] PerDatastoreUsage { get; set; }

        public DateTime Timestamp { get; set; }

        public bool Equals(VirtualMachineStorageInfo virtualMachineStorageInfo)
        {
            return (virtualMachineStorageInfo != null && ((this.PerDatastoreUsage == null && virtualMachineStorageInfo.PerDatastoreUsage == null) || (this.PerDatastoreUsage != null && virtualMachineStorageInfo.PerDatastoreUsage != null && Enumerable.SequenceEqual(this.PerDatastoreUsage, virtualMachineStorageInfo.PerDatastoreUsage))) && this.Timestamp == virtualMachineStorageInfo.Timestamp);
        }

        public override bool Equals(object virtualMachineStorageInfo)
        {
            return Equals(virtualMachineStorageInfo as VirtualMachineStorageInfo);
        }

        public override int GetHashCode()
        {
            return (PerDatastoreUsage + "_" + Timestamp).GetHashCode();
        }
    }

    public class VirtualMachineStorageSummary : DynamicData, IEquatable<VirtualMachineStorageSummary>
    {
        public long Committed { get; set; }

        public long Uncommitted { get; set; }

        public long Unshared { get; set; }

        public DateTime Timestamp { get; set; }

        public bool Equals(VirtualMachineStorageSummary virtualMachineStorageSummary)
        {
            return (virtualMachineStorageSummary != null && this.Committed == virtualMachineStorageSummary.Committed && this.Uncommitted == virtualMachineStorageSummary.Uncommitted && this.Unshared == virtualMachineStorageSummary.Unshared && this.Timestamp == virtualMachineStorageSummary.Timestamp);
        }

        public override bool Equals(object virtualMachineStorageSummary)
        {
            return Equals(virtualMachineStorageSummary as VirtualMachineStorageSummary);
        }

        public override int GetHashCode()
        {
            return (Committed + "_" + Uncommitted + "_" + Unshared + "_" + Timestamp).GetHashCode();
        }
    }

    public class VirtualMachineSummary : DynamicData, IEquatable<VirtualMachineSummary>
    {
        public ManagedObjectReference Vm { get; set; }

        public VirtualMachineRuntimeInfo Runtime { get; set; }

        public VirtualMachineGuestSummary Guest { get; set; }

        public VirtualMachineConfigSummary Config { get; set; }

        public VirtualMachineStorageSummary Storage { get; set; }

        public VirtualMachineQuickStats QuickStats { get; set; }

        public ManagedEntityStatus OverallStatus { get; set; }

        public CustomFieldValue[] CustomValue { get; set; }

        public VirtualMachineSummary_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineSummary virtualMachineSummary)
        {
            return (virtualMachineSummary != null && ((this.Vm == null && virtualMachineSummary.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSummary.Vm))) && ((this.Runtime == null && virtualMachineSummary.Runtime == null) || (this.Runtime != null && this.Runtime.Equals(virtualMachineSummary.Runtime))) && ((this.Guest == null && virtualMachineSummary.Guest == null) || (this.Guest != null && this.Guest.Equals(virtualMachineSummary.Guest))) && ((this.Config == null && virtualMachineSummary.Config == null) || (this.Config != null && this.Config.Equals(virtualMachineSummary.Config))) && ((this.Storage == null && virtualMachineSummary.Storage == null) || (this.Storage != null && this.Storage.Equals(virtualMachineSummary.Storage))) && ((this.QuickStats == null && virtualMachineSummary.QuickStats == null) || (this.QuickStats != null && this.QuickStats.Equals(virtualMachineSummary.QuickStats))) && this.OverallStatus == virtualMachineSummary.OverallStatus && ((this.CustomValue == null && virtualMachineSummary.CustomValue == null) || (this.CustomValue != null && virtualMachineSummary.CustomValue != null && Enumerable.SequenceEqual(this.CustomValue, virtualMachineSummary.CustomValue))) && ((this.LinkedView == null && virtualMachineSummary.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineSummary.LinkedView))));
        }

        public override bool Equals(object virtualMachineSummary)
        {
            return Equals(virtualMachineSummary as VirtualMachineSummary);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Runtime + "_" + Guest + "_" + Config + "_" + Storage + "_" + QuickStats + "_" + OverallStatus + "_" + CustomValue + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineSummary_LinkedView : IEquatable<VirtualMachineSummary_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(VirtualMachineSummary_LinkedView virtualMachineSummary_LinkedView)
        {
            return (virtualMachineSummary_LinkedView != null && ((this.Vm == null && virtualMachineSummary_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(virtualMachineSummary_LinkedView.Vm))));
        }

        public override bool Equals(object virtualMachineSummary_LinkedView)
        {
            return Equals(virtualMachineSummary_LinkedView as VirtualMachineSummary_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class VirtualMachineTargetInfo : DynamicData, IEquatable<VirtualMachineTargetInfo>
    {
        public string Name { get; set; }

        public string[] ConfigurationTag { get; set; }

        public bool Equals(VirtualMachineTargetInfo virtualMachineTargetInfo)
        {
            return (virtualMachineTargetInfo != null && this.Name == virtualMachineTargetInfo.Name && ((this.ConfigurationTag == null && virtualMachineTargetInfo.ConfigurationTag == null) || (this.ConfigurationTag != null && virtualMachineTargetInfo.ConfigurationTag != null && Enumerable.SequenceEqual(this.ConfigurationTag, virtualMachineTargetInfo.ConfigurationTag))));
        }

        public override bool Equals(object virtualMachineTargetInfo)
        {
            return Equals(virtualMachineTargetInfo as VirtualMachineTargetInfo);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + ConfigurationTag).GetHashCode();
        }
    }

    public class VirtualMachineTicket : DynamicData, IEquatable<VirtualMachineTicket>
    {
        public string Ticket { get; set; }

        public string CfgFile { get; set; }

        public string Host { get; set; }

        public int? Port { get; set; }

        public string SslThumbprint { get; set; }

        public bool Equals(VirtualMachineTicket virtualMachineTicket)
        {
            return (virtualMachineTicket != null && this.Ticket == virtualMachineTicket.Ticket && this.CfgFile == virtualMachineTicket.CfgFile && this.Host == virtualMachineTicket.Host && ((this.Port == null && virtualMachineTicket.Port == null) || (this.Port != null && this.Port.Equals(virtualMachineTicket.Port))) && this.SslThumbprint == virtualMachineTicket.SslThumbprint);
        }

        public override bool Equals(object virtualMachineTicket)
        {
            return Equals(virtualMachineTicket as VirtualMachineTicket);
        }

        public override int GetHashCode()
        {
            return (Ticket + "_" + CfgFile + "_" + Host + "_" + Port + "_" + SslThumbprint).GetHashCode();
        }
    }

    public class VirtualMachineUsageOnDatastore : DynamicData, IEquatable<VirtualMachineUsageOnDatastore>
    {
        public ManagedObjectReference Datastore { get; set; }

        public long Committed { get; set; }

        public long Uncommitted { get; set; }

        public long Unshared { get; set; }

        public VirtualMachineUsageOnDatastore_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualMachineUsageOnDatastore virtualMachineUsageOnDatastore)
        {
            return (virtualMachineUsageOnDatastore != null && ((this.Datastore == null && virtualMachineUsageOnDatastore.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineUsageOnDatastore.Datastore))) && this.Committed == virtualMachineUsageOnDatastore.Committed && this.Uncommitted == virtualMachineUsageOnDatastore.Uncommitted && this.Unshared == virtualMachineUsageOnDatastore.Unshared && ((this.LinkedView == null && virtualMachineUsageOnDatastore.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualMachineUsageOnDatastore.LinkedView))));
        }

        public override bool Equals(object virtualMachineUsageOnDatastore)
        {
            return Equals(virtualMachineUsageOnDatastore as VirtualMachineUsageOnDatastore);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Committed + "_" + Uncommitted + "_" + Unshared + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualMachineUsageOnDatastore_LinkedView : IEquatable<VirtualMachineUsageOnDatastore_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(VirtualMachineUsageOnDatastore_LinkedView virtualMachineUsageOnDatastore_LinkedView)
        {
            return (virtualMachineUsageOnDatastore_LinkedView != null && ((this.Datastore == null && virtualMachineUsageOnDatastore_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(virtualMachineUsageOnDatastore_LinkedView.Datastore))));
        }

        public override bool Equals(object virtualMachineUsageOnDatastore_LinkedView)
        {
            return Equals(virtualMachineUsageOnDatastore_LinkedView as VirtualMachineUsageOnDatastore_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VirtualMachineUsbInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineUsbInfo>
    {
        public string Description { get; set; }

        public int Vendor { get; set; }

        public int Product { get; set; }

        public string PhysicalPath { get; set; }

        public string[] Family { get; set; }

        public string[] Speed { get; set; }

        public VirtualMachineSummary Summary { get; set; }

        public bool Equals(VirtualMachineUsbInfo virtualMachineUsbInfo)
        {
            return (virtualMachineUsbInfo != null && this.Description == virtualMachineUsbInfo.Description && this.Vendor == virtualMachineUsbInfo.Vendor && this.Product == virtualMachineUsbInfo.Product && this.PhysicalPath == virtualMachineUsbInfo.PhysicalPath && ((this.Family == null && virtualMachineUsbInfo.Family == null) || (this.Family != null && virtualMachineUsbInfo.Family != null && Enumerable.SequenceEqual(this.Family, virtualMachineUsbInfo.Family))) && ((this.Speed == null && virtualMachineUsbInfo.Speed == null) || (this.Speed != null && virtualMachineUsbInfo.Speed != null && Enumerable.SequenceEqual(this.Speed, virtualMachineUsbInfo.Speed))) && ((this.Summary == null && virtualMachineUsbInfo.Summary == null) || (this.Summary != null && this.Summary.Equals(virtualMachineUsbInfo.Summary))));
        }

        public override bool Equals(object virtualMachineUsbInfo)
        {
            return Equals(virtualMachineUsbInfo as VirtualMachineUsbInfo);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + Vendor + "_" + Product + "_" + PhysicalPath + "_" + Family + "_" + Speed + "_" + Summary).GetHashCode();
        }
    }

    public class VirtualMachineVFlashModuleInfo : VirtualMachineTargetInfo, IEquatable<VirtualMachineVFlashModuleInfo>
    {
        public HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption VFlashModule { get; set; }

        public bool Equals(VirtualMachineVFlashModuleInfo virtualMachineVFlashModuleInfo)
        {
            return (virtualMachineVFlashModuleInfo != null && ((this.VFlashModule == null && virtualMachineVFlashModuleInfo.VFlashModule == null) || (this.VFlashModule != null && this.VFlashModule.Equals(virtualMachineVFlashModuleInfo.VFlashModule))));
        }

        public override bool Equals(object virtualMachineVFlashModuleInfo)
        {
            return Equals(virtualMachineVFlashModuleInfo as VirtualMachineVFlashModuleInfo);
        }

        public override int GetHashCode()
        {
            return (VFlashModule).GetHashCode();
        }
    }

    public class VirtualMachineVideoCard : VirtualDevice, IEquatable<VirtualMachineVideoCard>
    {
        public long? VideoRamSizeInKB { get; set; }

        public int? NumDisplays { get; set; }

        public bool? UseAutoDetect { get; set; }

        public bool? Enable3DSupport { get; set; }

        public string Use3dRenderer { get; set; }

        public long? GraphicsMemorySizeInKB { get; set; }

        public bool Equals(VirtualMachineVideoCard virtualMachineVideoCard)
        {
            return (virtualMachineVideoCard != null && ((this.VideoRamSizeInKB == null && virtualMachineVideoCard.VideoRamSizeInKB == null) || (this.VideoRamSizeInKB != null && this.VideoRamSizeInKB.Equals(virtualMachineVideoCard.VideoRamSizeInKB))) && ((this.NumDisplays == null && virtualMachineVideoCard.NumDisplays == null) || (this.NumDisplays != null && this.NumDisplays.Equals(virtualMachineVideoCard.NumDisplays))) && ((this.UseAutoDetect == null && virtualMachineVideoCard.UseAutoDetect == null) || (this.UseAutoDetect != null && this.UseAutoDetect.Equals(virtualMachineVideoCard.UseAutoDetect))) && ((this.Enable3DSupport == null && virtualMachineVideoCard.Enable3DSupport == null) || (this.Enable3DSupport != null && this.Enable3DSupport.Equals(virtualMachineVideoCard.Enable3DSupport))) && this.Use3dRenderer == virtualMachineVideoCard.Use3dRenderer && ((this.GraphicsMemorySizeInKB == null && virtualMachineVideoCard.GraphicsMemorySizeInKB == null) || (this.GraphicsMemorySizeInKB != null && this.GraphicsMemorySizeInKB.Equals(virtualMachineVideoCard.GraphicsMemorySizeInKB))));
        }

        public override bool Equals(object virtualMachineVideoCard)
        {
            return Equals(virtualMachineVideoCard as VirtualMachineVideoCard);
        }

        public override int GetHashCode()
        {
            return (VideoRamSizeInKB + "_" + NumDisplays + "_" + UseAutoDetect + "_" + Enable3DSupport + "_" + Use3dRenderer + "_" + GraphicsMemorySizeInKB).GetHashCode();
        }
    }

    public class VirtualMachineVMCIDevice : VirtualDevice, IEquatable<VirtualMachineVMCIDevice>
    {
        public long? Id { get; set; }

        public bool? AllowUnrestrictedCommunication { get; set; }

        public bool? FilterEnable { get; set; }

        public VirtualMachineVMCIDeviceFilterInfo FilterInfo { get; set; }

        public bool Equals(VirtualMachineVMCIDevice virtualMachineVMCIDevice)
        {
            return (virtualMachineVMCIDevice != null && ((this.Id == null && virtualMachineVMCIDevice.Id == null) || (this.Id != null && this.Id.Equals(virtualMachineVMCIDevice.Id))) && ((this.AllowUnrestrictedCommunication == null && virtualMachineVMCIDevice.AllowUnrestrictedCommunication == null) || (this.AllowUnrestrictedCommunication != null && this.AllowUnrestrictedCommunication.Equals(virtualMachineVMCIDevice.AllowUnrestrictedCommunication))) && ((this.FilterEnable == null && virtualMachineVMCIDevice.FilterEnable == null) || (this.FilterEnable != null && this.FilterEnable.Equals(virtualMachineVMCIDevice.FilterEnable))) && ((this.FilterInfo == null && virtualMachineVMCIDevice.FilterInfo == null) || (this.FilterInfo != null && this.FilterInfo.Equals(virtualMachineVMCIDevice.FilterInfo))));
        }

        public override bool Equals(object virtualMachineVMCIDevice)
        {
            return Equals(virtualMachineVMCIDevice as VirtualMachineVMCIDevice);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + AllowUnrestrictedCommunication + "_" + FilterEnable + "_" + FilterInfo).GetHashCode();
        }
    }

    public class VirtualMachineVMCIDeviceFilterInfo : DynamicData, IEquatable<VirtualMachineVMCIDeviceFilterInfo>
    {
        public VirtualMachineVMCIDeviceFilterSpec[] Filters { get; set; }

        public bool Equals(VirtualMachineVMCIDeviceFilterInfo virtualMachineVMCIDeviceFilterInfo)
        {
            return (virtualMachineVMCIDeviceFilterInfo != null && ((this.Filters == null && virtualMachineVMCIDeviceFilterInfo.Filters == null) || (this.Filters != null && virtualMachineVMCIDeviceFilterInfo.Filters != null && Enumerable.SequenceEqual(this.Filters, virtualMachineVMCIDeviceFilterInfo.Filters))));
        }

        public override bool Equals(object virtualMachineVMCIDeviceFilterInfo)
        {
            return Equals(virtualMachineVMCIDeviceFilterInfo as VirtualMachineVMCIDeviceFilterInfo);
        }

        public override int GetHashCode()
        {
            return (Filters).GetHashCode();
        }
    }

    public class VirtualMachineVMCIDeviceFilterSpec : DynamicData, IEquatable<VirtualMachineVMCIDeviceFilterSpec>
    {
        public long Rank { get; set; }

        public string Action { get; set; }

        public string Protocol { get; set; }

        public string Direction { get; set; }

        public long? LowerDstPortBoundary { get; set; }

        public long? UpperDstPortBoundary { get; set; }

        public bool Equals(VirtualMachineVMCIDeviceFilterSpec virtualMachineVMCIDeviceFilterSpec)
        {
            return (virtualMachineVMCIDeviceFilterSpec != null && this.Rank == virtualMachineVMCIDeviceFilterSpec.Rank && this.Action == virtualMachineVMCIDeviceFilterSpec.Action && this.Protocol == virtualMachineVMCIDeviceFilterSpec.Protocol && this.Direction == virtualMachineVMCIDeviceFilterSpec.Direction && ((this.LowerDstPortBoundary == null && virtualMachineVMCIDeviceFilterSpec.LowerDstPortBoundary == null) || (this.LowerDstPortBoundary != null && this.LowerDstPortBoundary.Equals(virtualMachineVMCIDeviceFilterSpec.LowerDstPortBoundary))) && ((this.UpperDstPortBoundary == null && virtualMachineVMCIDeviceFilterSpec.UpperDstPortBoundary == null) || (this.UpperDstPortBoundary != null && this.UpperDstPortBoundary.Equals(virtualMachineVMCIDeviceFilterSpec.UpperDstPortBoundary))));
        }

        public override bool Equals(object virtualMachineVMCIDeviceFilterSpec)
        {
            return Equals(virtualMachineVMCIDeviceFilterSpec as VirtualMachineVMCIDeviceFilterSpec);
        }

        public override int GetHashCode()
        {
            return (Rank + "_" + Action + "_" + Protocol + "_" + Direction + "_" + LowerDstPortBoundary + "_" + UpperDstPortBoundary).GetHashCode();
        }
    }

    public class VirtualMachineVMCIDeviceOption : VirtualDeviceOption, IEquatable<VirtualMachineVMCIDeviceOption>
    {
        public BoolOption AllowUnrestrictedCommunication { get; set; }

        public VirtualMachineVMCIDeviceOptionFilterSpecOption FilterSpecOption { get; set; }

        public BoolOption FilterSupported { get; set; }

        public bool Equals(VirtualMachineVMCIDeviceOption virtualMachineVMCIDeviceOption)
        {
            return (virtualMachineVMCIDeviceOption != null && ((this.AllowUnrestrictedCommunication == null && virtualMachineVMCIDeviceOption.AllowUnrestrictedCommunication == null) || (this.AllowUnrestrictedCommunication != null && this.AllowUnrestrictedCommunication.Equals(virtualMachineVMCIDeviceOption.AllowUnrestrictedCommunication))) && ((this.FilterSpecOption == null && virtualMachineVMCIDeviceOption.FilterSpecOption == null) || (this.FilterSpecOption != null && this.FilterSpecOption.Equals(virtualMachineVMCIDeviceOption.FilterSpecOption))) && ((this.FilterSupported == null && virtualMachineVMCIDeviceOption.FilterSupported == null) || (this.FilterSupported != null && this.FilterSupported.Equals(virtualMachineVMCIDeviceOption.FilterSupported))));
        }

        public override bool Equals(object virtualMachineVMCIDeviceOption)
        {
            return Equals(virtualMachineVMCIDeviceOption as VirtualMachineVMCIDeviceOption);
        }

        public override int GetHashCode()
        {
            return (AllowUnrestrictedCommunication + "_" + FilterSpecOption + "_" + FilterSupported).GetHashCode();
        }
    }

    public class VirtualMachineVMCIDeviceOptionFilterSpecOption : DynamicData, IEquatable<VirtualMachineVMCIDeviceOptionFilterSpecOption>
    {
        public ChoiceOption Action { get; set; }

        public ChoiceOption Protocol { get; set; }

        public ChoiceOption Direction { get; set; }

        public LongOption LowerDstPortBoundary { get; set; }

        public LongOption UpperDstPortBoundary { get; set; }

        public bool Equals(VirtualMachineVMCIDeviceOptionFilterSpecOption virtualMachineVMCIDeviceOptionFilterSpecOption)
        {
            return (virtualMachineVMCIDeviceOptionFilterSpecOption != null && ((this.Action == null && virtualMachineVMCIDeviceOptionFilterSpecOption.Action == null) || (this.Action != null && this.Action.Equals(virtualMachineVMCIDeviceOptionFilterSpecOption.Action))) && ((this.Protocol == null && virtualMachineVMCIDeviceOptionFilterSpecOption.Protocol == null) || (this.Protocol != null && this.Protocol.Equals(virtualMachineVMCIDeviceOptionFilterSpecOption.Protocol))) && ((this.Direction == null && virtualMachineVMCIDeviceOptionFilterSpecOption.Direction == null) || (this.Direction != null && this.Direction.Equals(virtualMachineVMCIDeviceOptionFilterSpecOption.Direction))) && ((this.LowerDstPortBoundary == null && virtualMachineVMCIDeviceOptionFilterSpecOption.LowerDstPortBoundary == null) || (this.LowerDstPortBoundary != null && this.LowerDstPortBoundary.Equals(virtualMachineVMCIDeviceOptionFilterSpecOption.LowerDstPortBoundary))) && ((this.UpperDstPortBoundary == null && virtualMachineVMCIDeviceOptionFilterSpecOption.UpperDstPortBoundary == null) || (this.UpperDstPortBoundary != null && this.UpperDstPortBoundary.Equals(virtualMachineVMCIDeviceOptionFilterSpecOption.UpperDstPortBoundary))));
        }

        public override bool Equals(object virtualMachineVMCIDeviceOptionFilterSpecOption)
        {
            return Equals(virtualMachineVMCIDeviceOptionFilterSpecOption as VirtualMachineVMCIDeviceOptionFilterSpecOption);
        }

        public override int GetHashCode()
        {
            return (Action + "_" + Protocol + "_" + Direction + "_" + LowerDstPortBoundary + "_" + UpperDstPortBoundary).GetHashCode();
        }
    }

    public class VirtualMachineVMIROM : VirtualDevice, IEquatable<VirtualMachineVMIROM>
    {
        public bool Equals(VirtualMachineVMIROM virtualMachineVMIROM)
        {
            return (virtualMachineVMIROM != null && base.Equals(virtualMachineVMIROM));
        }

        public override bool Equals(object virtualMachineVMIROM)
        {
            return Equals(virtualMachineVMIROM as VirtualMachineVMIROM);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualMachineWindowsQuiesceSpec : VirtualMachineGuestQuiesceSpec, IEquatable<VirtualMachineWindowsQuiesceSpec>
    {
        public int? VssBackupType { get; set; }

        public bool? VssBootableSystemState { get; set; }

        public bool? VssPartialFileSupport { get; set; }

        public string VssBackupContext { get; set; }

        public bool Equals(VirtualMachineWindowsQuiesceSpec virtualMachineWindowsQuiesceSpec)
        {
            return (virtualMachineWindowsQuiesceSpec != null && ((this.VssBackupType == null && virtualMachineWindowsQuiesceSpec.VssBackupType == null) || (this.VssBackupType != null && this.VssBackupType.Equals(virtualMachineWindowsQuiesceSpec.VssBackupType))) && ((this.VssBootableSystemState == null && virtualMachineWindowsQuiesceSpec.VssBootableSystemState == null) || (this.VssBootableSystemState != null && this.VssBootableSystemState.Equals(virtualMachineWindowsQuiesceSpec.VssBootableSystemState))) && ((this.VssPartialFileSupport == null && virtualMachineWindowsQuiesceSpec.VssPartialFileSupport == null) || (this.VssPartialFileSupport != null && this.VssPartialFileSupport.Equals(virtualMachineWindowsQuiesceSpec.VssPartialFileSupport))) && this.VssBackupContext == virtualMachineWindowsQuiesceSpec.VssBackupContext);
        }

        public override bool Equals(object virtualMachineWindowsQuiesceSpec)
        {
            return Equals(virtualMachineWindowsQuiesceSpec as VirtualMachineWindowsQuiesceSpec);
        }

        public override int GetHashCode()
        {
            return (VssBackupType + "_" + VssBootableSystemState + "_" + VssPartialFileSupport + "_" + VssBackupContext).GetHashCode();
        }
    }

    public class VirtualMachineWipeResult : DynamicData, IEquatable<VirtualMachineWipeResult>
    {
        public int DiskId { get; set; }

        public long ShrinkableDiskSpace { get; set; }

        public bool Equals(VirtualMachineWipeResult virtualMachineWipeResult)
        {
            return (virtualMachineWipeResult != null && this.DiskId == virtualMachineWipeResult.DiskId && this.ShrinkableDiskSpace == virtualMachineWipeResult.ShrinkableDiskSpace);
        }

        public override bool Equals(object virtualMachineWipeResult)
        {
            return Equals(virtualMachineWipeResult as VirtualMachineWipeResult);
        }

        public override int GetHashCode()
        {
            return (DiskId + "_" + ShrinkableDiskSpace).GetHashCode();
        }
    }

    public class VirtualNicManagerNetConfig : DynamicData, IEquatable<VirtualNicManagerNetConfig>
    {
        public string NicType { get; set; }

        public bool MultiSelectAllowed { get; set; }

        public HostVirtualNic[] CandidateVnic { get; set; }

        public string[] SelectedVnic { get; set; }

        public bool Equals(VirtualNicManagerNetConfig virtualNicManagerNetConfig)
        {
            return (virtualNicManagerNetConfig != null && this.NicType == virtualNicManagerNetConfig.NicType && this.MultiSelectAllowed == virtualNicManagerNetConfig.MultiSelectAllowed && ((this.CandidateVnic == null && virtualNicManagerNetConfig.CandidateVnic == null) || (this.CandidateVnic != null && virtualNicManagerNetConfig.CandidateVnic != null && Enumerable.SequenceEqual(this.CandidateVnic, virtualNicManagerNetConfig.CandidateVnic))) && ((this.SelectedVnic == null && virtualNicManagerNetConfig.SelectedVnic == null) || (this.SelectedVnic != null && virtualNicManagerNetConfig.SelectedVnic != null && Enumerable.SequenceEqual(this.SelectedVnic, virtualNicManagerNetConfig.SelectedVnic))));
        }

        public override bool Equals(object virtualNicManagerNetConfig)
        {
            return Equals(virtualNicManagerNetConfig as VirtualNicManagerNetConfig);
        }

        public override int GetHashCode()
        {
            return (NicType + "_" + MultiSelectAllowed + "_" + CandidateVnic + "_" + SelectedVnic).GetHashCode();
        }
    }

    public class VirtualNVDIMM : VirtualDevice, IEquatable<VirtualNVDIMM>
    {
        public long CapacityInMB { get; set; }

        public bool Equals(VirtualNVDIMM virtualNVDIMM)
        {
            return (virtualNVDIMM != null && this.CapacityInMB == virtualNVDIMM.CapacityInMB);
        }

        public override bool Equals(object virtualNVDIMM)
        {
            return Equals(virtualNVDIMM as VirtualNVDIMM);
        }

        public override int GetHashCode()
        {
            return (CapacityInMB).GetHashCode();
        }
    }

    public class VirtualNVDIMMBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualNVDIMMBackingInfo>
    {
        public VirtualNVDIMMBackingInfo Parent { get; set; }

        public string ChangeId { get; set; }

        public new VirtualNVDIMMBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualNVDIMMBackingInfo virtualNVDIMMBackingInfo)
        {
            return (virtualNVDIMMBackingInfo != null && ((this.Parent == null && virtualNVDIMMBackingInfo.Parent == null) || (this.Parent != null && this.Parent.Equals(virtualNVDIMMBackingInfo.Parent))) && this.ChangeId == virtualNVDIMMBackingInfo.ChangeId && ((this.LinkedView == null && virtualNVDIMMBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualNVDIMMBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualNVDIMMBackingInfo)
        {
            return Equals(virtualNVDIMMBackingInfo as VirtualNVDIMMBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Parent + "_" + ChangeId + "_" + LinkedView).GetHashCode();
        }
    }

    public class VirtualNVDIMMBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualNVDIMMBackingInfo_LinkedView>
    {
        public bool Equals(VirtualNVDIMMBackingInfo_LinkedView virtualNVDIMMBackingInfo_LinkedView)
        {
            return (virtualNVDIMMBackingInfo_LinkedView != null && base.Equals(virtualNVDIMMBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualNVDIMMBackingInfo_LinkedView)
        {
            return Equals(virtualNVDIMMBackingInfo_LinkedView as VirtualNVDIMMBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualNVDIMMController : VirtualController, IEquatable<VirtualNVDIMMController>
    {
        public bool Equals(VirtualNVDIMMController virtualNVDIMMController)
        {
            return (virtualNVDIMMController != null && base.Equals(virtualNVDIMMController));
        }

        public override bool Equals(object virtualNVDIMMController)
        {
            return Equals(virtualNVDIMMController as VirtualNVDIMMController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualNVDIMMControllerOption : VirtualControllerOption, IEquatable<VirtualNVDIMMControllerOption>
    {
        public IntOption NumNVDIMMControllers { get; set; }

        public bool Equals(VirtualNVDIMMControllerOption virtualNVDIMMControllerOption)
        {
            return (virtualNVDIMMControllerOption != null && ((this.NumNVDIMMControllers == null && virtualNVDIMMControllerOption.NumNVDIMMControllers == null) || (this.NumNVDIMMControllers != null && this.NumNVDIMMControllers.Equals(virtualNVDIMMControllerOption.NumNVDIMMControllers))));
        }

        public override bool Equals(object virtualNVDIMMControllerOption)
        {
            return Equals(virtualNVDIMMControllerOption as VirtualNVDIMMControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumNVDIMMControllers).GetHashCode();
        }
    }

    public class VirtualNVDIMMOption : VirtualDeviceOption, IEquatable<VirtualNVDIMMOption>
    {
        public LongOption CapacityInMB { get; set; }

        public bool Growable { get; set; }

        public bool HotGrowable { get; set; }

        public long GranularityInMB { get; set; }

        public bool Equals(VirtualNVDIMMOption virtualNVDIMMOption)
        {
            return (virtualNVDIMMOption != null && ((this.CapacityInMB == null && virtualNVDIMMOption.CapacityInMB == null) || (this.CapacityInMB != null && this.CapacityInMB.Equals(virtualNVDIMMOption.CapacityInMB))) && this.Growable == virtualNVDIMMOption.Growable && this.HotGrowable == virtualNVDIMMOption.HotGrowable && this.GranularityInMB == virtualNVDIMMOption.GranularityInMB);
        }

        public override bool Equals(object virtualNVDIMMOption)
        {
            return Equals(virtualNVDIMMOption as VirtualNVDIMMOption);
        }

        public override int GetHashCode()
        {
            return (CapacityInMB + "_" + Growable + "_" + HotGrowable + "_" + GranularityInMB).GetHashCode();
        }
    }

    public class VirtualNVMEController : VirtualController, IEquatable<VirtualNVMEController>
    {
        public bool Equals(VirtualNVMEController virtualNVMEController)
        {
            return (virtualNVMEController != null && base.Equals(virtualNVMEController));
        }

        public override bool Equals(object virtualNVMEController)
        {
            return Equals(virtualNVMEController as VirtualNVMEController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualNVMEControllerOption : VirtualControllerOption, IEquatable<VirtualNVMEControllerOption>
    {
        public IntOption NumNVMEDisks { get; set; }

        public bool Equals(VirtualNVMEControllerOption virtualNVMEControllerOption)
        {
            return (virtualNVMEControllerOption != null && ((this.NumNVMEDisks == null && virtualNVMEControllerOption.NumNVMEDisks == null) || (this.NumNVMEDisks != null && this.NumNVMEDisks.Equals(virtualNVMEControllerOption.NumNVMEDisks))));
        }

        public override bool Equals(object virtualNVMEControllerOption)
        {
            return Equals(virtualNVMEControllerOption as VirtualNVMEControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumNVMEDisks).GetHashCode();
        }
    }

    public class VirtualParallelPort : VirtualDevice, IEquatable<VirtualParallelPort>
    {
        public bool Equals(VirtualParallelPort virtualParallelPort)
        {
            return (virtualParallelPort != null && base.Equals(virtualParallelPort));
        }

        public override bool Equals(object virtualParallelPort)
        {
            return Equals(virtualParallelPort as VirtualParallelPort);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualParallelPortDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualParallelPortDeviceBackingInfo>
    {
        public bool Equals(VirtualParallelPortDeviceBackingInfo virtualParallelPortDeviceBackingInfo)
        {
            return (virtualParallelPortDeviceBackingInfo != null && base.Equals(virtualParallelPortDeviceBackingInfo));
        }

        public override bool Equals(object virtualParallelPortDeviceBackingInfo)
        {
            return Equals(virtualParallelPortDeviceBackingInfo as VirtualParallelPortDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualParallelPortDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualParallelPortDeviceBackingOption>
    {
        public bool Equals(VirtualParallelPortDeviceBackingOption virtualParallelPortDeviceBackingOption)
        {
            return (virtualParallelPortDeviceBackingOption != null && base.Equals(virtualParallelPortDeviceBackingOption));
        }

        public override bool Equals(object virtualParallelPortDeviceBackingOption)
        {
            return Equals(virtualParallelPortDeviceBackingOption as VirtualParallelPortDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualParallelPortFileBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualParallelPortFileBackingInfo>
    {
        public new VirtualParallelPortFileBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualParallelPortFileBackingInfo virtualParallelPortFileBackingInfo)
        {
            return (virtualParallelPortFileBackingInfo != null && ((this.LinkedView == null && virtualParallelPortFileBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualParallelPortFileBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualParallelPortFileBackingInfo)
        {
            return Equals(virtualParallelPortFileBackingInfo as VirtualParallelPortFileBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VirtualParallelPortFileBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualParallelPortFileBackingInfo_LinkedView>
    {
        public bool Equals(VirtualParallelPortFileBackingInfo_LinkedView virtualParallelPortFileBackingInfo_LinkedView)
        {
            return (virtualParallelPortFileBackingInfo_LinkedView != null && base.Equals(virtualParallelPortFileBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualParallelPortFileBackingInfo_LinkedView)
        {
            return Equals(virtualParallelPortFileBackingInfo_LinkedView as VirtualParallelPortFileBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualParallelPortFileBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualParallelPortFileBackingOption>
    {
        public bool Equals(VirtualParallelPortFileBackingOption virtualParallelPortFileBackingOption)
        {
            return (virtualParallelPortFileBackingOption != null && base.Equals(virtualParallelPortFileBackingOption));
        }

        public override bool Equals(object virtualParallelPortFileBackingOption)
        {
            return Equals(virtualParallelPortFileBackingOption as VirtualParallelPortFileBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualParallelPortOption : VirtualDeviceOption, IEquatable<VirtualParallelPortOption>
    {
        public bool Equals(VirtualParallelPortOption virtualParallelPortOption)
        {
            return (virtualParallelPortOption != null && base.Equals(virtualParallelPortOption));
        }

        public override bool Equals(object virtualParallelPortOption)
        {
            return Equals(virtualParallelPortOption as VirtualParallelPortOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIController : VirtualController, IEquatable<VirtualPCIController>
    {
        public bool Equals(VirtualPCIController virtualPCIController)
        {
            return (virtualPCIController != null && base.Equals(virtualPCIController));
        }

        public override bool Equals(object virtualPCIController)
        {
            return Equals(virtualPCIController as VirtualPCIController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIControllerOption : VirtualControllerOption, IEquatable<VirtualPCIControllerOption>
    {
        public IntOption NumSCSIControllers { get; set; }

        public IntOption NumEthernetCards { get; set; }

        public IntOption NumVideoCards { get; set; }

        public IntOption NumSoundCards { get; set; }

        public IntOption NumVmiRoms { get; set; }

        public IntOption NumVmciDevices { get; set; }

        public IntOption NumPCIPassthroughDevices { get; set; }

        public IntOption NumSasSCSIControllers { get; set; }

        public IntOption NumVmxnet3EthernetCards { get; set; }

        public IntOption NumParaVirtualSCSIControllers { get; set; }

        public IntOption NumSATAControllers { get; set; }

        public IntOption NumNVMEControllers { get; set; }

        public IntOption NumVmxnet3VrdmaEthernetCards { get; set; }

        public bool Equals(VirtualPCIControllerOption virtualPCIControllerOption)
        {
            return (virtualPCIControllerOption != null && ((this.NumSCSIControllers == null && virtualPCIControllerOption.NumSCSIControllers == null) || (this.NumSCSIControllers != null && this.NumSCSIControllers.Equals(virtualPCIControllerOption.NumSCSIControllers))) && ((this.NumEthernetCards == null && virtualPCIControllerOption.NumEthernetCards == null) || (this.NumEthernetCards != null && this.NumEthernetCards.Equals(virtualPCIControllerOption.NumEthernetCards))) && ((this.NumVideoCards == null && virtualPCIControllerOption.NumVideoCards == null) || (this.NumVideoCards != null && this.NumVideoCards.Equals(virtualPCIControllerOption.NumVideoCards))) && ((this.NumSoundCards == null && virtualPCIControllerOption.NumSoundCards == null) || (this.NumSoundCards != null && this.NumSoundCards.Equals(virtualPCIControllerOption.NumSoundCards))) && ((this.NumVmiRoms == null && virtualPCIControllerOption.NumVmiRoms == null) || (this.NumVmiRoms != null && this.NumVmiRoms.Equals(virtualPCIControllerOption.NumVmiRoms))) && ((this.NumVmciDevices == null && virtualPCIControllerOption.NumVmciDevices == null) || (this.NumVmciDevices != null && this.NumVmciDevices.Equals(virtualPCIControllerOption.NumVmciDevices))) && ((this.NumPCIPassthroughDevices == null && virtualPCIControllerOption.NumPCIPassthroughDevices == null) || (this.NumPCIPassthroughDevices != null && this.NumPCIPassthroughDevices.Equals(virtualPCIControllerOption.NumPCIPassthroughDevices))) && ((this.NumSasSCSIControllers == null && virtualPCIControllerOption.NumSasSCSIControllers == null) || (this.NumSasSCSIControllers != null && this.NumSasSCSIControllers.Equals(virtualPCIControllerOption.NumSasSCSIControllers))) && ((this.NumVmxnet3EthernetCards == null && virtualPCIControllerOption.NumVmxnet3EthernetCards == null) || (this.NumVmxnet3EthernetCards != null && this.NumVmxnet3EthernetCards.Equals(virtualPCIControllerOption.NumVmxnet3EthernetCards))) && ((this.NumParaVirtualSCSIControllers == null && virtualPCIControllerOption.NumParaVirtualSCSIControllers == null) || (this.NumParaVirtualSCSIControllers != null && this.NumParaVirtualSCSIControllers.Equals(virtualPCIControllerOption.NumParaVirtualSCSIControllers))) && ((this.NumSATAControllers == null && virtualPCIControllerOption.NumSATAControllers == null) || (this.NumSATAControllers != null && this.NumSATAControllers.Equals(virtualPCIControllerOption.NumSATAControllers))) && ((this.NumNVMEControllers == null && virtualPCIControllerOption.NumNVMEControllers == null) || (this.NumNVMEControllers != null && this.NumNVMEControllers.Equals(virtualPCIControllerOption.NumNVMEControllers))) && ((this.NumVmxnet3VrdmaEthernetCards == null && virtualPCIControllerOption.NumVmxnet3VrdmaEthernetCards == null) || (this.NumVmxnet3VrdmaEthernetCards != null && this.NumVmxnet3VrdmaEthernetCards.Equals(virtualPCIControllerOption.NumVmxnet3VrdmaEthernetCards))));
        }

        public override bool Equals(object virtualPCIControllerOption)
        {
            return Equals(virtualPCIControllerOption as VirtualPCIControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumSCSIControllers + "_" + NumEthernetCards + "_" + NumVideoCards + "_" + NumSoundCards + "_" + NumVmiRoms + "_" + NumVmciDevices + "_" + NumPCIPassthroughDevices + "_" + NumSasSCSIControllers + "_" + NumVmxnet3EthernetCards + "_" + NumParaVirtualSCSIControllers + "_" + NumSATAControllers + "_" + NumNVMEControllers + "_" + NumVmxnet3VrdmaEthernetCards).GetHashCode();
        }
    }

    public class VirtualPCIPassthrough : VirtualDevice, IEquatable<VirtualPCIPassthrough>
    {
        public bool Equals(VirtualPCIPassthrough virtualPCIPassthrough)
        {
            return (virtualPCIPassthrough != null && base.Equals(virtualPCIPassthrough));
        }

        public override bool Equals(object virtualPCIPassthrough)
        {
            return Equals(virtualPCIPassthrough as VirtualPCIPassthrough);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIPassthroughDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualPCIPassthroughDeviceBackingInfo>
    {
        public string Id { get; set; }

        public string DeviceId { get; set; }

        public string SystemId { get; set; }

        public short VendorId { get; set; }

        public bool Equals(VirtualPCIPassthroughDeviceBackingInfo virtualPCIPassthroughDeviceBackingInfo)
        {
            return (virtualPCIPassthroughDeviceBackingInfo != null && this.Id == virtualPCIPassthroughDeviceBackingInfo.Id && this.DeviceId == virtualPCIPassthroughDeviceBackingInfo.DeviceId && this.SystemId == virtualPCIPassthroughDeviceBackingInfo.SystemId && this.VendorId == virtualPCIPassthroughDeviceBackingInfo.VendorId);
        }

        public override bool Equals(object virtualPCIPassthroughDeviceBackingInfo)
        {
            return Equals(virtualPCIPassthroughDeviceBackingInfo as VirtualPCIPassthroughDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + DeviceId + "_" + SystemId + "_" + VendorId).GetHashCode();
        }
    }

    public class VirtualPCIPassthroughDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualPCIPassthroughDeviceBackingOption>
    {
        public bool Equals(VirtualPCIPassthroughDeviceBackingOption virtualPCIPassthroughDeviceBackingOption)
        {
            return (virtualPCIPassthroughDeviceBackingOption != null && base.Equals(virtualPCIPassthroughDeviceBackingOption));
        }

        public override bool Equals(object virtualPCIPassthroughDeviceBackingOption)
        {
            return Equals(virtualPCIPassthroughDeviceBackingOption as VirtualPCIPassthroughDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIPassthroughOption : VirtualDeviceOption, IEquatable<VirtualPCIPassthroughOption>
    {
        public bool Equals(VirtualPCIPassthroughOption virtualPCIPassthroughOption)
        {
            return (virtualPCIPassthroughOption != null && base.Equals(virtualPCIPassthroughOption));
        }

        public override bool Equals(object virtualPCIPassthroughOption)
        {
            return Equals(virtualPCIPassthroughOption as VirtualPCIPassthroughOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIPassthroughPluginBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualPCIPassthroughPluginBackingInfo>
    {
        public bool Equals(VirtualPCIPassthroughPluginBackingInfo virtualPCIPassthroughPluginBackingInfo)
        {
            return (virtualPCIPassthroughPluginBackingInfo != null && base.Equals(virtualPCIPassthroughPluginBackingInfo));
        }

        public override bool Equals(object virtualPCIPassthroughPluginBackingInfo)
        {
            return Equals(virtualPCIPassthroughPluginBackingInfo as VirtualPCIPassthroughPluginBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIPassthroughPluginBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualPCIPassthroughPluginBackingOption>
    {
        public bool Equals(VirtualPCIPassthroughPluginBackingOption virtualPCIPassthroughPluginBackingOption)
        {
            return (virtualPCIPassthroughPluginBackingOption != null && base.Equals(virtualPCIPassthroughPluginBackingOption));
        }

        public override bool Equals(object virtualPCIPassthroughPluginBackingOption)
        {
            return Equals(virtualPCIPassthroughPluginBackingOption as VirtualPCIPassthroughPluginBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCIPassthroughVmiopBackingInfo : VirtualPCIPassthroughPluginBackingInfo, IEquatable<VirtualPCIPassthroughVmiopBackingInfo>
    {
        public string Vgpu { get; set; }

        public bool Equals(VirtualPCIPassthroughVmiopBackingInfo virtualPCIPassthroughVmiopBackingInfo)
        {
            return (virtualPCIPassthroughVmiopBackingInfo != null && this.Vgpu == virtualPCIPassthroughVmiopBackingInfo.Vgpu);
        }

        public override bool Equals(object virtualPCIPassthroughVmiopBackingInfo)
        {
            return Equals(virtualPCIPassthroughVmiopBackingInfo as VirtualPCIPassthroughVmiopBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Vgpu).GetHashCode();
        }
    }

    public class VirtualPCIPassthroughVmiopBackingOption : VirtualPCIPassthroughPluginBackingOption, IEquatable<VirtualPCIPassthroughVmiopBackingOption>
    {
        public StringOption Vgpu { get; set; }

        public int MaxInstances { get; set; }

        public bool Equals(VirtualPCIPassthroughVmiopBackingOption virtualPCIPassthroughVmiopBackingOption)
        {
            return (virtualPCIPassthroughVmiopBackingOption != null && ((this.Vgpu == null && virtualPCIPassthroughVmiopBackingOption.Vgpu == null) || (this.Vgpu != null && this.Vgpu.Equals(virtualPCIPassthroughVmiopBackingOption.Vgpu))) && this.MaxInstances == virtualPCIPassthroughVmiopBackingOption.MaxInstances);
        }

        public override bool Equals(object virtualPCIPassthroughVmiopBackingOption)
        {
            return Equals(virtualPCIPassthroughVmiopBackingOption as VirtualPCIPassthroughVmiopBackingOption);
        }

        public override int GetHashCode()
        {
            return (Vgpu + "_" + MaxInstances).GetHashCode();
        }
    }

    public class VirtualPCNet32 : VirtualEthernetCard, IEquatable<VirtualPCNet32>
    {
        public bool Equals(VirtualPCNet32 virtualPCNet32)
        {
            return (virtualPCNet32 != null && base.Equals(virtualPCNet32));
        }

        public override bool Equals(object virtualPCNet32)
        {
            return Equals(virtualPCNet32 as VirtualPCNet32);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPCNet32Option : VirtualEthernetCardOption, IEquatable<VirtualPCNet32Option>
    {
        public bool SupportsMorphing { get; set; }

        public bool Equals(VirtualPCNet32Option virtualPCNet32Option)
        {
            return (virtualPCNet32Option != null && this.SupportsMorphing == virtualPCNet32Option.SupportsMorphing);
        }

        public override bool Equals(object virtualPCNet32Option)
        {
            return Equals(virtualPCNet32Option as VirtualPCNet32Option);
        }

        public override int GetHashCode()
        {
            return (SupportsMorphing).GetHashCode();
        }
    }

    public class VirtualPointingDevice : VirtualDevice, IEquatable<VirtualPointingDevice>
    {
        public bool Equals(VirtualPointingDevice virtualPointingDevice)
        {
            return (virtualPointingDevice != null && base.Equals(virtualPointingDevice));
        }

        public override bool Equals(object virtualPointingDevice)
        {
            return Equals(virtualPointingDevice as VirtualPointingDevice);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPointingDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualPointingDeviceBackingOption>
    {
        public ChoiceOption HostPointingDevice { get; set; }

        public bool Equals(VirtualPointingDeviceBackingOption virtualPointingDeviceBackingOption)
        {
            return (virtualPointingDeviceBackingOption != null && ((this.HostPointingDevice == null && virtualPointingDeviceBackingOption.HostPointingDevice == null) || (this.HostPointingDevice != null && this.HostPointingDevice.Equals(virtualPointingDeviceBackingOption.HostPointingDevice))));
        }

        public override bool Equals(object virtualPointingDeviceBackingOption)
        {
            return Equals(virtualPointingDeviceBackingOption as VirtualPointingDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return (HostPointingDevice).GetHashCode();
        }
    }

    public class VirtualPointingDeviceDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualPointingDeviceDeviceBackingInfo>
    {
        public string HostPointingDevice { get; set; }

        public bool Equals(VirtualPointingDeviceDeviceBackingInfo virtualPointingDeviceDeviceBackingInfo)
        {
            return (virtualPointingDeviceDeviceBackingInfo != null && this.HostPointingDevice == virtualPointingDeviceDeviceBackingInfo.HostPointingDevice);
        }

        public override bool Equals(object virtualPointingDeviceDeviceBackingInfo)
        {
            return Equals(virtualPointingDeviceDeviceBackingInfo as VirtualPointingDeviceDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return (HostPointingDevice).GetHashCode();
        }
    }

    public class VirtualPointingDeviceOption : VirtualDeviceOption, IEquatable<VirtualPointingDeviceOption>
    {
        public bool Equals(VirtualPointingDeviceOption virtualPointingDeviceOption)
        {
            return (virtualPointingDeviceOption != null && base.Equals(virtualPointingDeviceOption));
        }

        public override bool Equals(object virtualPointingDeviceOption)
        {
            return Equals(virtualPointingDeviceOption as VirtualPointingDeviceOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPS2Controller : VirtualController, IEquatable<VirtualPS2Controller>
    {
        public bool Equals(VirtualPS2Controller virtualPS2Controller)
        {
            return (virtualPS2Controller != null && base.Equals(virtualPS2Controller));
        }

        public override bool Equals(object virtualPS2Controller)
        {
            return Equals(virtualPS2Controller as VirtualPS2Controller);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualPS2ControllerOption : VirtualControllerOption, IEquatable<VirtualPS2ControllerOption>
    {
        public IntOption NumKeyboards { get; set; }

        public IntOption NumPointingDevices { get; set; }

        public bool Equals(VirtualPS2ControllerOption virtualPS2ControllerOption)
        {
            return (virtualPS2ControllerOption != null && ((this.NumKeyboards == null && virtualPS2ControllerOption.NumKeyboards == null) || (this.NumKeyboards != null && this.NumKeyboards.Equals(virtualPS2ControllerOption.NumKeyboards))) && ((this.NumPointingDevices == null && virtualPS2ControllerOption.NumPointingDevices == null) || (this.NumPointingDevices != null && this.NumPointingDevices.Equals(virtualPS2ControllerOption.NumPointingDevices))));
        }

        public override bool Equals(object virtualPS2ControllerOption)
        {
            return Equals(virtualPS2ControllerOption as VirtualPS2ControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumKeyboards + "_" + NumPointingDevices).GetHashCode();
        }
    }

    public class VirtualSATAController : VirtualController, IEquatable<VirtualSATAController>
    {
        public bool Equals(VirtualSATAController virtualSATAController)
        {
            return (virtualSATAController != null && base.Equals(virtualSATAController));
        }

        public override bool Equals(object virtualSATAController)
        {
            return Equals(virtualSATAController as VirtualSATAController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSATAControllerOption : VirtualControllerOption, IEquatable<VirtualSATAControllerOption>
    {
        public IntOption NumSATADisks { get; set; }

        public IntOption NumSATACdroms { get; set; }

        public bool Equals(VirtualSATAControllerOption virtualSATAControllerOption)
        {
            return (virtualSATAControllerOption != null && ((this.NumSATADisks == null && virtualSATAControllerOption.NumSATADisks == null) || (this.NumSATADisks != null && this.NumSATADisks.Equals(virtualSATAControllerOption.NumSATADisks))) && ((this.NumSATACdroms == null && virtualSATAControllerOption.NumSATACdroms == null) || (this.NumSATACdroms != null && this.NumSATACdroms.Equals(virtualSATAControllerOption.NumSATACdroms))));
        }

        public override bool Equals(object virtualSATAControllerOption)
        {
            return Equals(virtualSATAControllerOption as VirtualSATAControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumSATADisks + "_" + NumSATACdroms).GetHashCode();
        }
    }

    public class VirtualSCSIController : VirtualController, IEquatable<VirtualSCSIController>
    {
        public bool? HotAddRemove { get; set; }

        public VirtualSCSISharing SharedBus { get; set; }

        public int? ScsiCtlrUnitNumber { get; set; }

        public bool Equals(VirtualSCSIController virtualSCSIController)
        {
            return (virtualSCSIController != null && ((this.HotAddRemove == null && virtualSCSIController.HotAddRemove == null) || (this.HotAddRemove != null && this.HotAddRemove.Equals(virtualSCSIController.HotAddRemove))) && this.SharedBus == virtualSCSIController.SharedBus && ((this.ScsiCtlrUnitNumber == null && virtualSCSIController.ScsiCtlrUnitNumber == null) || (this.ScsiCtlrUnitNumber != null && this.ScsiCtlrUnitNumber.Equals(virtualSCSIController.ScsiCtlrUnitNumber))));
        }

        public override bool Equals(object virtualSCSIController)
        {
            return Equals(virtualSCSIController as VirtualSCSIController);
        }

        public override int GetHashCode()
        {
            return (HotAddRemove + "_" + SharedBus + "_" + ScsiCtlrUnitNumber).GetHashCode();
        }
    }

    public class VirtualSCSIControllerOption : VirtualControllerOption, IEquatable<VirtualSCSIControllerOption>
    {
        public IntOption NumSCSIDisks { get; set; }

        public IntOption NumSCSICdroms { get; set; }

        public IntOption NumSCSIPassthrough { get; set; }

        public VirtualSCSISharing[] Sharing { get; set; }

        public int DefaultSharedIndex { get; set; }

        public BoolOption HotAddRemove { get; set; }

        public int ScsiCtlrUnitNumber { get; set; }

        public bool Equals(VirtualSCSIControllerOption virtualSCSIControllerOption)
        {
            return (virtualSCSIControllerOption != null && ((this.NumSCSIDisks == null && virtualSCSIControllerOption.NumSCSIDisks == null) || (this.NumSCSIDisks != null && this.NumSCSIDisks.Equals(virtualSCSIControllerOption.NumSCSIDisks))) && ((this.NumSCSICdroms == null && virtualSCSIControllerOption.NumSCSICdroms == null) || (this.NumSCSICdroms != null && this.NumSCSICdroms.Equals(virtualSCSIControllerOption.NumSCSICdroms))) && ((this.NumSCSIPassthrough == null && virtualSCSIControllerOption.NumSCSIPassthrough == null) || (this.NumSCSIPassthrough != null && this.NumSCSIPassthrough.Equals(virtualSCSIControllerOption.NumSCSIPassthrough))) && ((this.Sharing == null && virtualSCSIControllerOption.Sharing == null) || (this.Sharing != null && virtualSCSIControllerOption.Sharing != null && Enumerable.SequenceEqual(this.Sharing, virtualSCSIControllerOption.Sharing))) && this.DefaultSharedIndex == virtualSCSIControllerOption.DefaultSharedIndex && ((this.HotAddRemove == null && virtualSCSIControllerOption.HotAddRemove == null) || (this.HotAddRemove != null && this.HotAddRemove.Equals(virtualSCSIControllerOption.HotAddRemove))) && this.ScsiCtlrUnitNumber == virtualSCSIControllerOption.ScsiCtlrUnitNumber);
        }

        public override bool Equals(object virtualSCSIControllerOption)
        {
            return Equals(virtualSCSIControllerOption as VirtualSCSIControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumSCSIDisks + "_" + NumSCSICdroms + "_" + NumSCSIPassthrough + "_" + Sharing + "_" + DefaultSharedIndex + "_" + HotAddRemove + "_" + ScsiCtlrUnitNumber).GetHashCode();
        }
    }

    public class VirtualSCSIPassthrough : VirtualDevice, IEquatable<VirtualSCSIPassthrough>
    {
        public bool Equals(VirtualSCSIPassthrough virtualSCSIPassthrough)
        {
            return (virtualSCSIPassthrough != null && base.Equals(virtualSCSIPassthrough));
        }

        public override bool Equals(object virtualSCSIPassthrough)
        {
            return Equals(virtualSCSIPassthrough as VirtualSCSIPassthrough);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSCSIPassthroughDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualSCSIPassthroughDeviceBackingInfo>
    {
        public bool Equals(VirtualSCSIPassthroughDeviceBackingInfo virtualSCSIPassthroughDeviceBackingInfo)
        {
            return (virtualSCSIPassthroughDeviceBackingInfo != null && base.Equals(virtualSCSIPassthroughDeviceBackingInfo));
        }

        public override bool Equals(object virtualSCSIPassthroughDeviceBackingInfo)
        {
            return Equals(virtualSCSIPassthroughDeviceBackingInfo as VirtualSCSIPassthroughDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSCSIPassthroughDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualSCSIPassthroughDeviceBackingOption>
    {
        public bool Equals(VirtualSCSIPassthroughDeviceBackingOption virtualSCSIPassthroughDeviceBackingOption)
        {
            return (virtualSCSIPassthroughDeviceBackingOption != null && base.Equals(virtualSCSIPassthroughDeviceBackingOption));
        }

        public override bool Equals(object virtualSCSIPassthroughDeviceBackingOption)
        {
            return Equals(virtualSCSIPassthroughDeviceBackingOption as VirtualSCSIPassthroughDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSCSIPassthroughOption : VirtualDeviceOption, IEquatable<VirtualSCSIPassthroughOption>
    {
        public bool Equals(VirtualSCSIPassthroughOption virtualSCSIPassthroughOption)
        {
            return (virtualSCSIPassthroughOption != null && base.Equals(virtualSCSIPassthroughOption));
        }

        public override bool Equals(object virtualSCSIPassthroughOption)
        {
            return Equals(virtualSCSIPassthroughOption as VirtualSCSIPassthroughOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPort : VirtualDevice, IEquatable<VirtualSerialPort>
    {
        public bool YieldOnPoll { get; set; }

        public bool Equals(VirtualSerialPort virtualSerialPort)
        {
            return (virtualSerialPort != null && this.YieldOnPoll == virtualSerialPort.YieldOnPoll);
        }

        public override bool Equals(object virtualSerialPort)
        {
            return Equals(virtualSerialPort as VirtualSerialPort);
        }

        public override int GetHashCode()
        {
            return (YieldOnPoll).GetHashCode();
        }
    }

    public class VirtualSerialPortDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualSerialPortDeviceBackingInfo>
    {
        public bool Equals(VirtualSerialPortDeviceBackingInfo virtualSerialPortDeviceBackingInfo)
        {
            return (virtualSerialPortDeviceBackingInfo != null && base.Equals(virtualSerialPortDeviceBackingInfo));
        }

        public override bool Equals(object virtualSerialPortDeviceBackingInfo)
        {
            return Equals(virtualSerialPortDeviceBackingInfo as VirtualSerialPortDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualSerialPortDeviceBackingOption>
    {
        public bool Equals(VirtualSerialPortDeviceBackingOption virtualSerialPortDeviceBackingOption)
        {
            return (virtualSerialPortDeviceBackingOption != null && base.Equals(virtualSerialPortDeviceBackingOption));
        }

        public override bool Equals(object virtualSerialPortDeviceBackingOption)
        {
            return Equals(virtualSerialPortDeviceBackingOption as VirtualSerialPortDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortFileBackingInfo : VirtualDeviceFileBackingInfo, IEquatable<VirtualSerialPortFileBackingInfo>
    {
        public new VirtualSerialPortFileBackingInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VirtualSerialPortFileBackingInfo virtualSerialPortFileBackingInfo)
        {
            return (virtualSerialPortFileBackingInfo != null && ((this.LinkedView == null && virtualSerialPortFileBackingInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(virtualSerialPortFileBackingInfo.LinkedView))));
        }

        public override bool Equals(object virtualSerialPortFileBackingInfo)
        {
            return Equals(virtualSerialPortFileBackingInfo as VirtualSerialPortFileBackingInfo);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VirtualSerialPortFileBackingInfo_LinkedView : VirtualDeviceFileBackingInfo_LinkedView, IEquatable<VirtualSerialPortFileBackingInfo_LinkedView>
    {
        public bool Equals(VirtualSerialPortFileBackingInfo_LinkedView virtualSerialPortFileBackingInfo_LinkedView)
        {
            return (virtualSerialPortFileBackingInfo_LinkedView != null && base.Equals(virtualSerialPortFileBackingInfo_LinkedView));
        }

        public override bool Equals(object virtualSerialPortFileBackingInfo_LinkedView)
        {
            return Equals(virtualSerialPortFileBackingInfo_LinkedView as VirtualSerialPortFileBackingInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortFileBackingOption : VirtualDeviceFileBackingOption, IEquatable<VirtualSerialPortFileBackingOption>
    {
        public bool Equals(VirtualSerialPortFileBackingOption virtualSerialPortFileBackingOption)
        {
            return (virtualSerialPortFileBackingOption != null && base.Equals(virtualSerialPortFileBackingOption));
        }

        public override bool Equals(object virtualSerialPortFileBackingOption)
        {
            return Equals(virtualSerialPortFileBackingOption as VirtualSerialPortFileBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortOption : VirtualDeviceOption, IEquatable<VirtualSerialPortOption>
    {
        public BoolOption YieldOnPoll { get; set; }

        public bool Equals(VirtualSerialPortOption virtualSerialPortOption)
        {
            return (virtualSerialPortOption != null && ((this.YieldOnPoll == null && virtualSerialPortOption.YieldOnPoll == null) || (this.YieldOnPoll != null && this.YieldOnPoll.Equals(virtualSerialPortOption.YieldOnPoll))));
        }

        public override bool Equals(object virtualSerialPortOption)
        {
            return Equals(virtualSerialPortOption as VirtualSerialPortOption);
        }

        public override int GetHashCode()
        {
            return (YieldOnPoll).GetHashCode();
        }
    }

    public class VirtualSerialPortPipeBackingInfo : VirtualDevicePipeBackingInfo, IEquatable<VirtualSerialPortPipeBackingInfo>
    {
        public string Endpoint { get; set; }

        public bool? NoRxLoss { get; set; }

        public bool Equals(VirtualSerialPortPipeBackingInfo virtualSerialPortPipeBackingInfo)
        {
            return (virtualSerialPortPipeBackingInfo != null && this.Endpoint == virtualSerialPortPipeBackingInfo.Endpoint && ((this.NoRxLoss == null && virtualSerialPortPipeBackingInfo.NoRxLoss == null) || (this.NoRxLoss != null && this.NoRxLoss.Equals(virtualSerialPortPipeBackingInfo.NoRxLoss))));
        }

        public override bool Equals(object virtualSerialPortPipeBackingInfo)
        {
            return Equals(virtualSerialPortPipeBackingInfo as VirtualSerialPortPipeBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Endpoint + "_" + NoRxLoss).GetHashCode();
        }
    }

    public class VirtualSerialPortPipeBackingOption : VirtualDevicePipeBackingOption, IEquatable<VirtualSerialPortPipeBackingOption>
    {
        public ChoiceOption Endpoint { get; set; }

        public BoolOption NoRxLoss { get; set; }

        public bool Equals(VirtualSerialPortPipeBackingOption virtualSerialPortPipeBackingOption)
        {
            return (virtualSerialPortPipeBackingOption != null && ((this.Endpoint == null && virtualSerialPortPipeBackingOption.Endpoint == null) || (this.Endpoint != null && this.Endpoint.Equals(virtualSerialPortPipeBackingOption.Endpoint))) && ((this.NoRxLoss == null && virtualSerialPortPipeBackingOption.NoRxLoss == null) || (this.NoRxLoss != null && this.NoRxLoss.Equals(virtualSerialPortPipeBackingOption.NoRxLoss))));
        }

        public override bool Equals(object virtualSerialPortPipeBackingOption)
        {
            return Equals(virtualSerialPortPipeBackingOption as VirtualSerialPortPipeBackingOption);
        }

        public override int GetHashCode()
        {
            return (Endpoint + "_" + NoRxLoss).GetHashCode();
        }
    }

    public class VirtualSerialPortThinPrintBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualSerialPortThinPrintBackingInfo>
    {
        public bool Equals(VirtualSerialPortThinPrintBackingInfo virtualSerialPortThinPrintBackingInfo)
        {
            return (virtualSerialPortThinPrintBackingInfo != null && base.Equals(virtualSerialPortThinPrintBackingInfo));
        }

        public override bool Equals(object virtualSerialPortThinPrintBackingInfo)
        {
            return Equals(virtualSerialPortThinPrintBackingInfo as VirtualSerialPortThinPrintBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortThinPrintBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualSerialPortThinPrintBackingOption>
    {
        public bool Equals(VirtualSerialPortThinPrintBackingOption virtualSerialPortThinPrintBackingOption)
        {
            return (virtualSerialPortThinPrintBackingOption != null && base.Equals(virtualSerialPortThinPrintBackingOption));
        }

        public override bool Equals(object virtualSerialPortThinPrintBackingOption)
        {
            return Equals(virtualSerialPortThinPrintBackingOption as VirtualSerialPortThinPrintBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortURIBackingInfo : VirtualDeviceURIBackingInfo, IEquatable<VirtualSerialPortURIBackingInfo>
    {
        public bool Equals(VirtualSerialPortURIBackingInfo virtualSerialPortURIBackingInfo)
        {
            return (virtualSerialPortURIBackingInfo != null && base.Equals(virtualSerialPortURIBackingInfo));
        }

        public override bool Equals(object virtualSerialPortURIBackingInfo)
        {
            return Equals(virtualSerialPortURIBackingInfo as VirtualSerialPortURIBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSerialPortURIBackingOption : VirtualDeviceURIBackingOption, IEquatable<VirtualSerialPortURIBackingOption>
    {
        public bool Equals(VirtualSerialPortURIBackingOption virtualSerialPortURIBackingOption)
        {
            return (virtualSerialPortURIBackingOption != null && base.Equals(virtualSerialPortURIBackingOption));
        }

        public override bool Equals(object virtualSerialPortURIBackingOption)
        {
            return Equals(virtualSerialPortURIBackingOption as VirtualSerialPortURIBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSIOController : VirtualController, IEquatable<VirtualSIOController>
    {
        public bool Equals(VirtualSIOController virtualSIOController)
        {
            return (virtualSIOController != null && base.Equals(virtualSIOController));
        }

        public override bool Equals(object virtualSIOController)
        {
            return Equals(virtualSIOController as VirtualSIOController);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSIOControllerOption : VirtualControllerOption, IEquatable<VirtualSIOControllerOption>
    {
        public IntOption NumFloppyDrives { get; set; }

        public IntOption NumSerialPorts { get; set; }

        public IntOption NumParallelPorts { get; set; }

        public bool Equals(VirtualSIOControllerOption virtualSIOControllerOption)
        {
            return (virtualSIOControllerOption != null && ((this.NumFloppyDrives == null && virtualSIOControllerOption.NumFloppyDrives == null) || (this.NumFloppyDrives != null && this.NumFloppyDrives.Equals(virtualSIOControllerOption.NumFloppyDrives))) && ((this.NumSerialPorts == null && virtualSIOControllerOption.NumSerialPorts == null) || (this.NumSerialPorts != null && this.NumSerialPorts.Equals(virtualSIOControllerOption.NumSerialPorts))) && ((this.NumParallelPorts == null && virtualSIOControllerOption.NumParallelPorts == null) || (this.NumParallelPorts != null && this.NumParallelPorts.Equals(virtualSIOControllerOption.NumParallelPorts))));
        }

        public override bool Equals(object virtualSIOControllerOption)
        {
            return Equals(virtualSIOControllerOption as VirtualSIOControllerOption);
        }

        public override int GetHashCode()
        {
            return (NumFloppyDrives + "_" + NumSerialPorts + "_" + NumParallelPorts).GetHashCode();
        }
    }

    public class VirtualSoundBlaster16 : VirtualSoundCard, IEquatable<VirtualSoundBlaster16>
    {
        public bool Equals(VirtualSoundBlaster16 virtualSoundBlaster16)
        {
            return (virtualSoundBlaster16 != null && base.Equals(virtualSoundBlaster16));
        }

        public override bool Equals(object virtualSoundBlaster16)
        {
            return Equals(virtualSoundBlaster16 as VirtualSoundBlaster16);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSoundBlaster16Option : VirtualSoundCardOption, IEquatable<VirtualSoundBlaster16Option>
    {
        public bool Equals(VirtualSoundBlaster16Option virtualSoundBlaster16Option)
        {
            return (virtualSoundBlaster16Option != null && base.Equals(virtualSoundBlaster16Option));
        }

        public override bool Equals(object virtualSoundBlaster16Option)
        {
            return Equals(virtualSoundBlaster16Option as VirtualSoundBlaster16Option);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSoundCard : VirtualDevice, IEquatable<VirtualSoundCard>
    {
        public bool Equals(VirtualSoundCard virtualSoundCard)
        {
            return (virtualSoundCard != null && base.Equals(virtualSoundCard));
        }

        public override bool Equals(object virtualSoundCard)
        {
            return Equals(virtualSoundCard as VirtualSoundCard);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSoundCardDeviceBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualSoundCardDeviceBackingInfo>
    {
        public bool Equals(VirtualSoundCardDeviceBackingInfo virtualSoundCardDeviceBackingInfo)
        {
            return (virtualSoundCardDeviceBackingInfo != null && base.Equals(virtualSoundCardDeviceBackingInfo));
        }

        public override bool Equals(object virtualSoundCardDeviceBackingInfo)
        {
            return Equals(virtualSoundCardDeviceBackingInfo as VirtualSoundCardDeviceBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSoundCardDeviceBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualSoundCardDeviceBackingOption>
    {
        public bool Equals(VirtualSoundCardDeviceBackingOption virtualSoundCardDeviceBackingOption)
        {
            return (virtualSoundCardDeviceBackingOption != null && base.Equals(virtualSoundCardDeviceBackingOption));
        }

        public override bool Equals(object virtualSoundCardDeviceBackingOption)
        {
            return Equals(virtualSoundCardDeviceBackingOption as VirtualSoundCardDeviceBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSoundCardOption : VirtualDeviceOption, IEquatable<VirtualSoundCardOption>
    {
        public bool Equals(VirtualSoundCardOption virtualSoundCardOption)
        {
            return (virtualSoundCardOption != null && base.Equals(virtualSoundCardOption));
        }

        public override bool Equals(object virtualSoundCardOption)
        {
            return Equals(virtualSoundCardOption as VirtualSoundCardOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSriovEthernetCard : VirtualEthernetCard, IEquatable<VirtualSriovEthernetCard>
    {
        public bool? AllowGuestOSMtuChange { get; set; }

        public VirtualSriovEthernetCardSriovBackingInfo SriovBacking { get; set; }

        public bool Equals(VirtualSriovEthernetCard virtualSriovEthernetCard)
        {
            return (virtualSriovEthernetCard != null && ((this.AllowGuestOSMtuChange == null && virtualSriovEthernetCard.AllowGuestOSMtuChange == null) || (this.AllowGuestOSMtuChange != null && this.AllowGuestOSMtuChange.Equals(virtualSriovEthernetCard.AllowGuestOSMtuChange))) && ((this.SriovBacking == null && virtualSriovEthernetCard.SriovBacking == null) || (this.SriovBacking != null && this.SriovBacking.Equals(virtualSriovEthernetCard.SriovBacking))));
        }

        public override bool Equals(object virtualSriovEthernetCard)
        {
            return Equals(virtualSriovEthernetCard as VirtualSriovEthernetCard);
        }

        public override int GetHashCode()
        {
            return (AllowGuestOSMtuChange + "_" + SriovBacking).GetHashCode();
        }
    }

    public class VirtualSriovEthernetCardOption : VirtualEthernetCardOption, IEquatable<VirtualSriovEthernetCardOption>
    {
        public bool Equals(VirtualSriovEthernetCardOption virtualSriovEthernetCardOption)
        {
            return (virtualSriovEthernetCardOption != null && base.Equals(virtualSriovEthernetCardOption));
        }

        public override bool Equals(object virtualSriovEthernetCardOption)
        {
            return Equals(virtualSriovEthernetCardOption as VirtualSriovEthernetCardOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSriovEthernetCardSriovBackingInfo : VirtualDeviceBackingInfo, IEquatable<VirtualSriovEthernetCardSriovBackingInfo>
    {
        public VirtualPCIPassthroughDeviceBackingInfo PhysicalFunctionBacking { get; set; }

        public VirtualPCIPassthroughDeviceBackingInfo VirtualFunctionBacking { get; set; }

        public int? VirtualFunctionIndex { get; set; }

        public bool Equals(VirtualSriovEthernetCardSriovBackingInfo virtualSriovEthernetCardSriovBackingInfo)
        {
            return (virtualSriovEthernetCardSriovBackingInfo != null && ((this.PhysicalFunctionBacking == null && virtualSriovEthernetCardSriovBackingInfo.PhysicalFunctionBacking == null) || (this.PhysicalFunctionBacking != null && this.PhysicalFunctionBacking.Equals(virtualSriovEthernetCardSriovBackingInfo.PhysicalFunctionBacking))) && ((this.VirtualFunctionBacking == null && virtualSriovEthernetCardSriovBackingInfo.VirtualFunctionBacking == null) || (this.VirtualFunctionBacking != null && this.VirtualFunctionBacking.Equals(virtualSriovEthernetCardSriovBackingInfo.VirtualFunctionBacking))) && ((this.VirtualFunctionIndex == null && virtualSriovEthernetCardSriovBackingInfo.VirtualFunctionIndex == null) || (this.VirtualFunctionIndex != null && this.VirtualFunctionIndex.Equals(virtualSriovEthernetCardSriovBackingInfo.VirtualFunctionIndex))));
        }

        public override bool Equals(object virtualSriovEthernetCardSriovBackingInfo)
        {
            return Equals(virtualSriovEthernetCardSriovBackingInfo as VirtualSriovEthernetCardSriovBackingInfo);
        }

        public override int GetHashCode()
        {
            return (PhysicalFunctionBacking + "_" + VirtualFunctionBacking + "_" + VirtualFunctionIndex).GetHashCode();
        }
    }

    public class VirtualSriovEthernetCardSriovBackingOption : VirtualDeviceBackingOption, IEquatable<VirtualSriovEthernetCardSriovBackingOption>
    {
        public bool Equals(VirtualSriovEthernetCardSriovBackingOption virtualSriovEthernetCardSriovBackingOption)
        {
            return (virtualSriovEthernetCardSriovBackingOption != null && base.Equals(virtualSriovEthernetCardSriovBackingOption));
        }

        public override bool Equals(object virtualSriovEthernetCardSriovBackingOption)
        {
            return Equals(virtualSriovEthernetCardSriovBackingOption as VirtualSriovEthernetCardSriovBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualSwitchProfile : ApplyProfile, IEquatable<VirtualSwitchProfile>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public LinkProfile Link { get; set; }

        public NumPortsProfile NumPorts { get; set; }

        public NetworkPolicyProfile NetworkPolicy { get; set; }

        public bool Equals(VirtualSwitchProfile virtualSwitchProfile)
        {
            return (virtualSwitchProfile != null && this.Key == virtualSwitchProfile.Key && this.Name == virtualSwitchProfile.Name && ((this.Link == null && virtualSwitchProfile.Link == null) || (this.Link != null && this.Link.Equals(virtualSwitchProfile.Link))) && ((this.NumPorts == null && virtualSwitchProfile.NumPorts == null) || (this.NumPorts != null && this.NumPorts.Equals(virtualSwitchProfile.NumPorts))) && ((this.NetworkPolicy == null && virtualSwitchProfile.NetworkPolicy == null) || (this.NetworkPolicy != null && this.NetworkPolicy.Equals(virtualSwitchProfile.NetworkPolicy))));
        }

        public override bool Equals(object virtualSwitchProfile)
        {
            return Equals(virtualSwitchProfile as VirtualSwitchProfile);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Link + "_" + NumPorts + "_" + NetworkPolicy).GetHashCode();
        }
    }

    public class VirtualSwitchSelectionProfile : ApplyProfile, IEquatable<VirtualSwitchSelectionProfile>
    {
        public bool Equals(VirtualSwitchSelectionProfile virtualSwitchSelectionProfile)
        {
            return (virtualSwitchSelectionProfile != null && base.Equals(virtualSwitchSelectionProfile));
        }

        public override bool Equals(object virtualSwitchSelectionProfile)
        {
            return Equals(virtualSwitchSelectionProfile as VirtualSwitchSelectionProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualTPM : VirtualDevice, IEquatable<VirtualTPM>
    {
        public byte[][] EndorsementKeyCertificateSigningRequest { get; set; }

        public byte[][] EndorsementKeyCertificate { get; set; }

        public bool Equals(VirtualTPM virtualTPM)
        {
            return (virtualTPM != null && ((this.EndorsementKeyCertificateSigningRequest == null && virtualTPM.EndorsementKeyCertificateSigningRequest == null) || (this.EndorsementKeyCertificateSigningRequest != null && virtualTPM.EndorsementKeyCertificateSigningRequest != null && Enumerable.SequenceEqual(this.EndorsementKeyCertificateSigningRequest, virtualTPM.EndorsementKeyCertificateSigningRequest))) && ((this.EndorsementKeyCertificate == null && virtualTPM.EndorsementKeyCertificate == null) || (this.EndorsementKeyCertificate != null && virtualTPM.EndorsementKeyCertificate != null && Enumerable.SequenceEqual(this.EndorsementKeyCertificate, virtualTPM.EndorsementKeyCertificate))));
        }

        public override bool Equals(object virtualTPM)
        {
            return Equals(virtualTPM as VirtualTPM);
        }

        public override int GetHashCode()
        {
            return (EndorsementKeyCertificateSigningRequest + "_" + EndorsementKeyCertificate).GetHashCode();
        }
    }

    public class VirtualTPMOption : VirtualDeviceOption, IEquatable<VirtualTPMOption>
    {
        public string[] SupportedFirmware { get; set; }

        public bool Equals(VirtualTPMOption virtualTPMOption)
        {
            return (virtualTPMOption != null && ((this.SupportedFirmware == null && virtualTPMOption.SupportedFirmware == null) || (this.SupportedFirmware != null && virtualTPMOption.SupportedFirmware != null && Enumerable.SequenceEqual(this.SupportedFirmware, virtualTPMOption.SupportedFirmware))));
        }

        public override bool Equals(object virtualTPMOption)
        {
            return Equals(virtualTPMOption as VirtualTPMOption);
        }

        public override int GetHashCode()
        {
            return (SupportedFirmware).GetHashCode();
        }
    }

    public class VirtualUSB : VirtualDevice, IEquatable<VirtualUSB>
    {
        public bool Connected { get; set; }

        public int? Vendor { get; set; }

        public int? Product { get; set; }

        public string[] Family { get; set; }

        public string[] Speed { get; set; }

        public bool Equals(VirtualUSB virtualUSB)
        {
            return (virtualUSB != null && this.Connected == virtualUSB.Connected && ((this.Vendor == null && virtualUSB.Vendor == null) || (this.Vendor != null && this.Vendor.Equals(virtualUSB.Vendor))) && ((this.Product == null && virtualUSB.Product == null) || (this.Product != null && this.Product.Equals(virtualUSB.Product))) && ((this.Family == null && virtualUSB.Family == null) || (this.Family != null && virtualUSB.Family != null && Enumerable.SequenceEqual(this.Family, virtualUSB.Family))) && ((this.Speed == null && virtualUSB.Speed == null) || (this.Speed != null && virtualUSB.Speed != null && Enumerable.SequenceEqual(this.Speed, virtualUSB.Speed))));
        }

        public override bool Equals(object virtualUSB)
        {
            return Equals(virtualUSB as VirtualUSB);
        }

        public override int GetHashCode()
        {
            return (Connected + "_" + Vendor + "_" + Product + "_" + Family + "_" + Speed).GetHashCode();
        }
    }

    public class VirtualUSBController : VirtualController, IEquatable<VirtualUSBController>
    {
        public bool? AutoConnectDevices { get; set; }

        public bool? EhciEnabled { get; set; }

        public bool Equals(VirtualUSBController virtualUSBController)
        {
            return (virtualUSBController != null && ((this.AutoConnectDevices == null && virtualUSBController.AutoConnectDevices == null) || (this.AutoConnectDevices != null && this.AutoConnectDevices.Equals(virtualUSBController.AutoConnectDevices))) && ((this.EhciEnabled == null && virtualUSBController.EhciEnabled == null) || (this.EhciEnabled != null && this.EhciEnabled.Equals(virtualUSBController.EhciEnabled))));
        }

        public override bool Equals(object virtualUSBController)
        {
            return Equals(virtualUSBController as VirtualUSBController);
        }

        public override int GetHashCode()
        {
            return (AutoConnectDevices + "_" + EhciEnabled).GetHashCode();
        }
    }

    public class VirtualUSBControllerOption : VirtualControllerOption, IEquatable<VirtualUSBControllerOption>
    {
        public BoolOption AutoConnectDevices { get; set; }

        public BoolOption EhciSupported { get; set; }

        public string[] SupportedSpeeds { get; set; }

        public bool Equals(VirtualUSBControllerOption virtualUSBControllerOption)
        {
            return (virtualUSBControllerOption != null && ((this.AutoConnectDevices == null && virtualUSBControllerOption.AutoConnectDevices == null) || (this.AutoConnectDevices != null && this.AutoConnectDevices.Equals(virtualUSBControllerOption.AutoConnectDevices))) && ((this.EhciSupported == null && virtualUSBControllerOption.EhciSupported == null) || (this.EhciSupported != null && this.EhciSupported.Equals(virtualUSBControllerOption.EhciSupported))) && ((this.SupportedSpeeds == null && virtualUSBControllerOption.SupportedSpeeds == null) || (this.SupportedSpeeds != null && virtualUSBControllerOption.SupportedSpeeds != null && Enumerable.SequenceEqual(this.SupportedSpeeds, virtualUSBControllerOption.SupportedSpeeds))));
        }

        public override bool Equals(object virtualUSBControllerOption)
        {
            return Equals(virtualUSBControllerOption as VirtualUSBControllerOption);
        }

        public override int GetHashCode()
        {
            return (AutoConnectDevices + "_" + EhciSupported + "_" + SupportedSpeeds).GetHashCode();
        }
    }

    public class VirtualUSBControllerPciBusSlotInfo : VirtualDevicePciBusSlotInfo, IEquatable<VirtualUSBControllerPciBusSlotInfo>
    {
        public int? EhciPciSlotNumber { get; set; }

        public bool Equals(VirtualUSBControllerPciBusSlotInfo virtualUSBControllerPciBusSlotInfo)
        {
            return (virtualUSBControllerPciBusSlotInfo != null && ((this.EhciPciSlotNumber == null && virtualUSBControllerPciBusSlotInfo.EhciPciSlotNumber == null) || (this.EhciPciSlotNumber != null && this.EhciPciSlotNumber.Equals(virtualUSBControllerPciBusSlotInfo.EhciPciSlotNumber))));
        }

        public override bool Equals(object virtualUSBControllerPciBusSlotInfo)
        {
            return Equals(virtualUSBControllerPciBusSlotInfo as VirtualUSBControllerPciBusSlotInfo);
        }

        public override int GetHashCode()
        {
            return (EhciPciSlotNumber).GetHashCode();
        }
    }

    public class VirtualUSBOption : VirtualDeviceOption, IEquatable<VirtualUSBOption>
    {
        public bool Equals(VirtualUSBOption virtualUSBOption)
        {
            return (virtualUSBOption != null && base.Equals(virtualUSBOption));
        }

        public override bool Equals(object virtualUSBOption)
        {
            return Equals(virtualUSBOption as VirtualUSBOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualUSBRemoteClientBackingInfo : VirtualDeviceRemoteDeviceBackingInfo, IEquatable<VirtualUSBRemoteClientBackingInfo>
    {
        public string Hostname { get; set; }

        public bool Equals(VirtualUSBRemoteClientBackingInfo virtualUSBRemoteClientBackingInfo)
        {
            return (virtualUSBRemoteClientBackingInfo != null && this.Hostname == virtualUSBRemoteClientBackingInfo.Hostname);
        }

        public override bool Equals(object virtualUSBRemoteClientBackingInfo)
        {
            return Equals(virtualUSBRemoteClientBackingInfo as VirtualUSBRemoteClientBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Hostname).GetHashCode();
        }
    }

    public class VirtualUSBRemoteClientBackingOption : VirtualDeviceRemoteDeviceBackingOption, IEquatable<VirtualUSBRemoteClientBackingOption>
    {
        public bool Equals(VirtualUSBRemoteClientBackingOption virtualUSBRemoteClientBackingOption)
        {
            return (virtualUSBRemoteClientBackingOption != null && base.Equals(virtualUSBRemoteClientBackingOption));
        }

        public override bool Equals(object virtualUSBRemoteClientBackingOption)
        {
            return Equals(virtualUSBRemoteClientBackingOption as VirtualUSBRemoteClientBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualUSBRemoteHostBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualUSBRemoteHostBackingInfo>
    {
        public string Hostname { get; set; }

        public bool Equals(VirtualUSBRemoteHostBackingInfo virtualUSBRemoteHostBackingInfo)
        {
            return (virtualUSBRemoteHostBackingInfo != null && this.Hostname == virtualUSBRemoteHostBackingInfo.Hostname);
        }

        public override bool Equals(object virtualUSBRemoteHostBackingInfo)
        {
            return Equals(virtualUSBRemoteHostBackingInfo as VirtualUSBRemoteHostBackingInfo);
        }

        public override int GetHashCode()
        {
            return (Hostname).GetHashCode();
        }
    }

    public class VirtualUSBRemoteHostBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualUSBRemoteHostBackingOption>
    {
        public bool Equals(VirtualUSBRemoteHostBackingOption virtualUSBRemoteHostBackingOption)
        {
            return (virtualUSBRemoteHostBackingOption != null && base.Equals(virtualUSBRemoteHostBackingOption));
        }

        public override bool Equals(object virtualUSBRemoteHostBackingOption)
        {
            return Equals(virtualUSBRemoteHostBackingOption as VirtualUSBRemoteHostBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualUSBUSBBackingInfo : VirtualDeviceDeviceBackingInfo, IEquatable<VirtualUSBUSBBackingInfo>
    {
        public bool Equals(VirtualUSBUSBBackingInfo virtualUSBUSBBackingInfo)
        {
            return (virtualUSBUSBBackingInfo != null && base.Equals(virtualUSBUSBBackingInfo));
        }

        public override bool Equals(object virtualUSBUSBBackingInfo)
        {
            return Equals(virtualUSBUSBBackingInfo as VirtualUSBUSBBackingInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualUSBUSBBackingOption : VirtualDeviceDeviceBackingOption, IEquatable<VirtualUSBUSBBackingOption>
    {
        public bool Equals(VirtualUSBUSBBackingOption virtualUSBUSBBackingOption)
        {
            return (virtualUSBUSBBackingOption != null && base.Equals(virtualUSBUSBBackingOption));
        }

        public override bool Equals(object virtualUSBUSBBackingOption)
        {
            return Equals(virtualUSBUSBBackingOption as VirtualUSBUSBBackingOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualUSBXHCIController : VirtualController, IEquatable<VirtualUSBXHCIController>
    {
        public bool? AutoConnectDevices { get; set; }

        public bool Equals(VirtualUSBXHCIController virtualUSBXHCIController)
        {
            return (virtualUSBXHCIController != null && ((this.AutoConnectDevices == null && virtualUSBXHCIController.AutoConnectDevices == null) || (this.AutoConnectDevices != null && this.AutoConnectDevices.Equals(virtualUSBXHCIController.AutoConnectDevices))));
        }

        public override bool Equals(object virtualUSBXHCIController)
        {
            return Equals(virtualUSBXHCIController as VirtualUSBXHCIController);
        }

        public override int GetHashCode()
        {
            return (AutoConnectDevices).GetHashCode();
        }
    }

    public class VirtualUSBXHCIControllerOption : VirtualControllerOption, IEquatable<VirtualUSBXHCIControllerOption>
    {
        public BoolOption AutoConnectDevices { get; set; }

        public string[] SupportedSpeeds { get; set; }

        public bool Equals(VirtualUSBXHCIControllerOption virtualUSBXHCIControllerOption)
        {
            return (virtualUSBXHCIControllerOption != null && ((this.AutoConnectDevices == null && virtualUSBXHCIControllerOption.AutoConnectDevices == null) || (this.AutoConnectDevices != null && this.AutoConnectDevices.Equals(virtualUSBXHCIControllerOption.AutoConnectDevices))) && ((this.SupportedSpeeds == null && virtualUSBXHCIControllerOption.SupportedSpeeds == null) || (this.SupportedSpeeds != null && virtualUSBXHCIControllerOption.SupportedSpeeds != null && Enumerable.SequenceEqual(this.SupportedSpeeds, virtualUSBXHCIControllerOption.SupportedSpeeds))));
        }

        public override bool Equals(object virtualUSBXHCIControllerOption)
        {
            return Equals(virtualUSBXHCIControllerOption as VirtualUSBXHCIControllerOption);
        }

        public override int GetHashCode()
        {
            return (AutoConnectDevices + "_" + SupportedSpeeds).GetHashCode();
        }
    }

    public class VirtualVideoCardOption : VirtualDeviceOption, IEquatable<VirtualVideoCardOption>
    {
        public LongOption VideoRamSizeInKB { get; set; }

        public IntOption NumDisplays { get; set; }

        public BoolOption UseAutoDetect { get; set; }

        public BoolOption Support3D { get; set; }

        public BoolOption Use3dRendererSupported { get; set; }

        public LongOption GraphicsMemorySizeInKB { get; set; }

        public BoolOption GraphicsMemorySizeSupported { get; set; }

        public bool Equals(VirtualVideoCardOption virtualVideoCardOption)
        {
            return (virtualVideoCardOption != null && ((this.VideoRamSizeInKB == null && virtualVideoCardOption.VideoRamSizeInKB == null) || (this.VideoRamSizeInKB != null && this.VideoRamSizeInKB.Equals(virtualVideoCardOption.VideoRamSizeInKB))) && ((this.NumDisplays == null && virtualVideoCardOption.NumDisplays == null) || (this.NumDisplays != null && this.NumDisplays.Equals(virtualVideoCardOption.NumDisplays))) && ((this.UseAutoDetect == null && virtualVideoCardOption.UseAutoDetect == null) || (this.UseAutoDetect != null && this.UseAutoDetect.Equals(virtualVideoCardOption.UseAutoDetect))) && ((this.Support3D == null && virtualVideoCardOption.Support3D == null) || (this.Support3D != null && this.Support3D.Equals(virtualVideoCardOption.Support3D))) && ((this.Use3dRendererSupported == null && virtualVideoCardOption.Use3dRendererSupported == null) || (this.Use3dRendererSupported != null && this.Use3dRendererSupported.Equals(virtualVideoCardOption.Use3dRendererSupported))) && ((this.GraphicsMemorySizeInKB == null && virtualVideoCardOption.GraphicsMemorySizeInKB == null) || (this.GraphicsMemorySizeInKB != null && this.GraphicsMemorySizeInKB.Equals(virtualVideoCardOption.GraphicsMemorySizeInKB))) && ((this.GraphicsMemorySizeSupported == null && virtualVideoCardOption.GraphicsMemorySizeSupported == null) || (this.GraphicsMemorySizeSupported != null && this.GraphicsMemorySizeSupported.Equals(virtualVideoCardOption.GraphicsMemorySizeSupported))));
        }

        public override bool Equals(object virtualVideoCardOption)
        {
            return Equals(virtualVideoCardOption as VirtualVideoCardOption);
        }

        public override int GetHashCode()
        {
            return (VideoRamSizeInKB + "_" + NumDisplays + "_" + UseAutoDetect + "_" + Support3D + "_" + Use3dRendererSupported + "_" + GraphicsMemorySizeInKB + "_" + GraphicsMemorySizeSupported).GetHashCode();
        }
    }

    public class VirtualVMIROMOption : VirtualDeviceOption, IEquatable<VirtualVMIROMOption>
    {
        public bool Equals(VirtualVMIROMOption virtualVMIROMOption)
        {
            return (virtualVMIROMOption != null && base.Equals(virtualVMIROMOption));
        }

        public override bool Equals(object virtualVMIROMOption)
        {
            return Equals(virtualVMIROMOption as VirtualVMIROMOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet : VirtualEthernetCard, IEquatable<VirtualVmxnet>
    {
        public bool Equals(VirtualVmxnet virtualVmxnet)
        {
            return (virtualVmxnet != null && base.Equals(virtualVmxnet));
        }

        public override bool Equals(object virtualVmxnet)
        {
            return Equals(virtualVmxnet as VirtualVmxnet);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet2 : VirtualVmxnet, IEquatable<VirtualVmxnet2>
    {
        public bool Equals(VirtualVmxnet2 virtualVmxnet2)
        {
            return (virtualVmxnet2 != null && base.Equals(virtualVmxnet2));
        }

        public override bool Equals(object virtualVmxnet2)
        {
            return Equals(virtualVmxnet2 as VirtualVmxnet2);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet2Option : VirtualVmxnetOption, IEquatable<VirtualVmxnet2Option>
    {
        public bool Equals(VirtualVmxnet2Option virtualVmxnet2Option)
        {
            return (virtualVmxnet2Option != null && base.Equals(virtualVmxnet2Option));
        }

        public override bool Equals(object virtualVmxnet2Option)
        {
            return Equals(virtualVmxnet2Option as VirtualVmxnet2Option);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet3 : VirtualVmxnet, IEquatable<VirtualVmxnet3>
    {
        public bool Equals(VirtualVmxnet3 virtualVmxnet3)
        {
            return (virtualVmxnet3 != null && base.Equals(virtualVmxnet3));
        }

        public override bool Equals(object virtualVmxnet3)
        {
            return Equals(virtualVmxnet3 as VirtualVmxnet3);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet3Option : VirtualVmxnetOption, IEquatable<VirtualVmxnet3Option>
    {
        public bool Equals(VirtualVmxnet3Option virtualVmxnet3Option)
        {
            return (virtualVmxnet3Option != null && base.Equals(virtualVmxnet3Option));
        }

        public override bool Equals(object virtualVmxnet3Option)
        {
            return Equals(virtualVmxnet3Option as VirtualVmxnet3Option);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VirtualVmxnet3Vrdma : VirtualVmxnet3, IEquatable<VirtualVmxnet3Vrdma>
    {
        public string DeviceProtocol { get; set; }

        public bool Equals(VirtualVmxnet3Vrdma virtualVmxnet3Vrdma)
        {
            return (virtualVmxnet3Vrdma != null && this.DeviceProtocol == virtualVmxnet3Vrdma.DeviceProtocol);
        }

        public override bool Equals(object virtualVmxnet3Vrdma)
        {
            return Equals(virtualVmxnet3Vrdma as VirtualVmxnet3Vrdma);
        }

        public override int GetHashCode()
        {
            return (DeviceProtocol).GetHashCode();
        }
    }

    public class VirtualVmxnet3VrdmaOption : VirtualVmxnet3Option, IEquatable<VirtualVmxnet3VrdmaOption>
    {
        public ChoiceOption DeviceProtocol { get; set; }

        public bool Equals(VirtualVmxnet3VrdmaOption virtualVmxnet3VrdmaOption)
        {
            return (virtualVmxnet3VrdmaOption != null && ((this.DeviceProtocol == null && virtualVmxnet3VrdmaOption.DeviceProtocol == null) || (this.DeviceProtocol != null && this.DeviceProtocol.Equals(virtualVmxnet3VrdmaOption.DeviceProtocol))));
        }

        public override bool Equals(object virtualVmxnet3VrdmaOption)
        {
            return Equals(virtualVmxnet3VrdmaOption as VirtualVmxnet3VrdmaOption);
        }

        public override int GetHashCode()
        {
            return (DeviceProtocol).GetHashCode();
        }
    }

    public class VirtualVmxnetOption : VirtualEthernetCardOption, IEquatable<VirtualVmxnetOption>
    {
        public bool Equals(VirtualVmxnetOption virtualVmxnetOption)
        {
            return (virtualVmxnetOption != null && base.Equals(virtualVmxnetOption));
        }

        public override bool Equals(object virtualVmxnetOption)
        {
            return Equals(virtualVmxnetOption as VirtualVmxnetOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VlanProfile : ApplyProfile, IEquatable<VlanProfile>
    {
        public bool Equals(VlanProfile vlanProfile)
        {
            return (vlanProfile != null && base.Equals(vlanProfile));
        }

        public override bool Equals(object vlanProfile)
        {
            return Equals(vlanProfile as VlanProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmAcquiredMksTicketEvent : VmEvent, IEquatable<VmAcquiredMksTicketEvent>
    {
        public bool Equals(VmAcquiredMksTicketEvent vmAcquiredMksTicketEvent)
        {
            return (vmAcquiredMksTicketEvent != null && base.Equals(vmAcquiredMksTicketEvent));
        }

        public override bool Equals(object vmAcquiredMksTicketEvent)
        {
            return Equals(vmAcquiredMksTicketEvent as VmAcquiredMksTicketEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmAcquiredTicketEvent : VmEvent, IEquatable<VmAcquiredTicketEvent>
    {
        public string TicketType { get; set; }

        public bool Equals(VmAcquiredTicketEvent vmAcquiredTicketEvent)
        {
            return (vmAcquiredTicketEvent != null && this.TicketType == vmAcquiredTicketEvent.TicketType);
        }

        public override bool Equals(object vmAcquiredTicketEvent)
        {
            return Equals(vmAcquiredTicketEvent as VmAcquiredTicketEvent);
        }

        public override int GetHashCode()
        {
            return (TicketType).GetHashCode();
        }
    }

    public class VmAlreadyExistsInDatacenter : InvalidFolder, IEquatable<VmAlreadyExistsInDatacenter>
    {
        public ManagedObjectReference Host { get; set; }

        public string Hostname { get; set; }

        public ManagedObjectReference[] Vm { get; set; }

        public new VmAlreadyExistsInDatacenter_LinkedView LinkedView { get; set; }

        public bool Equals(VmAlreadyExistsInDatacenter vmAlreadyExistsInDatacenter)
        {
            return (vmAlreadyExistsInDatacenter != null && ((this.Host == null && vmAlreadyExistsInDatacenter.Host == null) || (this.Host != null && this.Host.Equals(vmAlreadyExistsInDatacenter.Host))) && this.Hostname == vmAlreadyExistsInDatacenter.Hostname && ((this.Vm == null && vmAlreadyExistsInDatacenter.Vm == null) || (this.Vm != null && vmAlreadyExistsInDatacenter.Vm != null && Enumerable.SequenceEqual(this.Vm, vmAlreadyExistsInDatacenter.Vm))) && ((this.LinkedView == null && vmAlreadyExistsInDatacenter.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmAlreadyExistsInDatacenter.LinkedView))));
        }

        public override bool Equals(object vmAlreadyExistsInDatacenter)
        {
            return Equals(vmAlreadyExistsInDatacenter as VmAlreadyExistsInDatacenter);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Hostname + "_" + Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmAlreadyExistsInDatacenter_LinkedView : InvalidFolder_LinkedView, IEquatable<VmAlreadyExistsInDatacenter_LinkedView>
    {
        public HostSystem Host { get; set; }

        public VirtualMachine[] Vm { get; set; }

        public bool Equals(VmAlreadyExistsInDatacenter_LinkedView vmAlreadyExistsInDatacenter_LinkedView)
        {
            return (vmAlreadyExistsInDatacenter_LinkedView != null && ((this.Host == null && vmAlreadyExistsInDatacenter_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(vmAlreadyExistsInDatacenter_LinkedView.Host))) && ((this.Vm == null && vmAlreadyExistsInDatacenter_LinkedView.Vm == null) || (this.Vm != null && vmAlreadyExistsInDatacenter_LinkedView.Vm != null && Enumerable.SequenceEqual(this.Vm, vmAlreadyExistsInDatacenter_LinkedView.Vm))));
        }

        public override bool Equals(object vmAlreadyExistsInDatacenter_LinkedView)
        {
            return Equals(vmAlreadyExistsInDatacenter_LinkedView as VmAlreadyExistsInDatacenter_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Vm).GetHashCode();
        }
    }

    public class VmAutoRenameEvent : VmEvent, IEquatable<VmAutoRenameEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(VmAutoRenameEvent vmAutoRenameEvent)
        {
            return (vmAutoRenameEvent != null && this.OldName == vmAutoRenameEvent.OldName && this.NewName == vmAutoRenameEvent.NewName);
        }

        public override bool Equals(object vmAutoRenameEvent)
        {
            return Equals(vmAutoRenameEvent as VmAutoRenameEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class VmBeingClonedEvent : VmCloneEvent, IEquatable<VmBeingClonedEvent>
    {
        public FolderEventArgument DestFolder { get; set; }

        public string DestName { get; set; }

        public HostEventArgument DestHost { get; set; }

        public bool Equals(VmBeingClonedEvent vmBeingClonedEvent)
        {
            return (vmBeingClonedEvent != null && ((this.DestFolder == null && vmBeingClonedEvent.DestFolder == null) || (this.DestFolder != null && this.DestFolder.Equals(vmBeingClonedEvent.DestFolder))) && this.DestName == vmBeingClonedEvent.DestName && ((this.DestHost == null && vmBeingClonedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmBeingClonedEvent.DestHost))));
        }

        public override bool Equals(object vmBeingClonedEvent)
        {
            return Equals(vmBeingClonedEvent as VmBeingClonedEvent);
        }

        public override int GetHashCode()
        {
            return (DestFolder + "_" + DestName + "_" + DestHost).GetHashCode();
        }
    }

    public class VmBeingClonedNoFolderEvent : VmCloneEvent, IEquatable<VmBeingClonedNoFolderEvent>
    {
        public string DestName { get; set; }

        public HostEventArgument DestHost { get; set; }

        public bool Equals(VmBeingClonedNoFolderEvent vmBeingClonedNoFolderEvent)
        {
            return (vmBeingClonedNoFolderEvent != null && this.DestName == vmBeingClonedNoFolderEvent.DestName && ((this.DestHost == null && vmBeingClonedNoFolderEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmBeingClonedNoFolderEvent.DestHost))));
        }

        public override bool Equals(object vmBeingClonedNoFolderEvent)
        {
            return Equals(vmBeingClonedNoFolderEvent as VmBeingClonedNoFolderEvent);
        }

        public override int GetHashCode()
        {
            return (DestName + "_" + DestHost).GetHashCode();
        }
    }

    public class VmBeingCreatedEvent : VmEvent, IEquatable<VmBeingCreatedEvent>
    {
        public VirtualMachineConfigSpec ConfigSpec { get; set; }

        public bool Equals(VmBeingCreatedEvent vmBeingCreatedEvent)
        {
            return (vmBeingCreatedEvent != null && ((this.ConfigSpec == null && vmBeingCreatedEvent.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(vmBeingCreatedEvent.ConfigSpec))));
        }

        public override bool Equals(object vmBeingCreatedEvent)
        {
            return Equals(vmBeingCreatedEvent as VmBeingCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec).GetHashCode();
        }
    }

    public class VmBeingDeployedEvent : VmEvent, IEquatable<VmBeingDeployedEvent>
    {
        public VmEventArgument SrcTemplate { get; set; }

        public bool Equals(VmBeingDeployedEvent vmBeingDeployedEvent)
        {
            return (vmBeingDeployedEvent != null && ((this.SrcTemplate == null && vmBeingDeployedEvent.SrcTemplate == null) || (this.SrcTemplate != null && this.SrcTemplate.Equals(vmBeingDeployedEvent.SrcTemplate))));
        }

        public override bool Equals(object vmBeingDeployedEvent)
        {
            return Equals(vmBeingDeployedEvent as VmBeingDeployedEvent);
        }

        public override int GetHashCode()
        {
            return (SrcTemplate).GetHashCode();
        }
    }

    public class VmBeingHotMigratedEvent : VmEvent, IEquatable<VmBeingHotMigratedEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public DatacenterEventArgument DestDatacenter { get; set; }

        public DatastoreEventArgument DestDatastore { get; set; }

        public bool Equals(VmBeingHotMigratedEvent vmBeingHotMigratedEvent)
        {
            return (vmBeingHotMigratedEvent != null && ((this.DestHost == null && vmBeingHotMigratedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmBeingHotMigratedEvent.DestHost))) && ((this.DestDatacenter == null && vmBeingHotMigratedEvent.DestDatacenter == null) || (this.DestDatacenter != null && this.DestDatacenter.Equals(vmBeingHotMigratedEvent.DestDatacenter))) && ((this.DestDatastore == null && vmBeingHotMigratedEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmBeingHotMigratedEvent.DestDatastore))));
        }

        public override bool Equals(object vmBeingHotMigratedEvent)
        {
            return Equals(vmBeingHotMigratedEvent as VmBeingHotMigratedEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost + "_" + DestDatacenter + "_" + DestDatastore).GetHashCode();
        }
    }

    public class VmBeingMigratedEvent : VmEvent, IEquatable<VmBeingMigratedEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public DatacenterEventArgument DestDatacenter { get; set; }

        public DatastoreEventArgument DestDatastore { get; set; }

        public bool Equals(VmBeingMigratedEvent vmBeingMigratedEvent)
        {
            return (vmBeingMigratedEvent != null && ((this.DestHost == null && vmBeingMigratedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmBeingMigratedEvent.DestHost))) && ((this.DestDatacenter == null && vmBeingMigratedEvent.DestDatacenter == null) || (this.DestDatacenter != null && this.DestDatacenter.Equals(vmBeingMigratedEvent.DestDatacenter))) && ((this.DestDatastore == null && vmBeingMigratedEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmBeingMigratedEvent.DestDatastore))));
        }

        public override bool Equals(object vmBeingMigratedEvent)
        {
            return Equals(vmBeingMigratedEvent as VmBeingMigratedEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost + "_" + DestDatacenter + "_" + DestDatastore).GetHashCode();
        }
    }

    public class VmBeingRelocatedEvent : VmRelocateSpecEvent, IEquatable<VmBeingRelocatedEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public DatacenterEventArgument DestDatacenter { get; set; }

        public DatastoreEventArgument DestDatastore { get; set; }

        public bool Equals(VmBeingRelocatedEvent vmBeingRelocatedEvent)
        {
            return (vmBeingRelocatedEvent != null && ((this.DestHost == null && vmBeingRelocatedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmBeingRelocatedEvent.DestHost))) && ((this.DestDatacenter == null && vmBeingRelocatedEvent.DestDatacenter == null) || (this.DestDatacenter != null && this.DestDatacenter.Equals(vmBeingRelocatedEvent.DestDatacenter))) && ((this.DestDatastore == null && vmBeingRelocatedEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmBeingRelocatedEvent.DestDatastore))));
        }

        public override bool Equals(object vmBeingRelocatedEvent)
        {
            return Equals(vmBeingRelocatedEvent as VmBeingRelocatedEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost + "_" + DestDatacenter + "_" + DestDatastore).GetHashCode();
        }
    }

    public class VmClonedEvent : VmCloneEvent, IEquatable<VmClonedEvent>
    {
        public VmEventArgument SourceVm { get; set; }

        public bool Equals(VmClonedEvent vmClonedEvent)
        {
            return (vmClonedEvent != null && ((this.SourceVm == null && vmClonedEvent.SourceVm == null) || (this.SourceVm != null && this.SourceVm.Equals(vmClonedEvent.SourceVm))));
        }

        public override bool Equals(object vmClonedEvent)
        {
            return Equals(vmClonedEvent as VmClonedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceVm).GetHashCode();
        }
    }

    public class VmCloneEvent : VmEvent, IEquatable<VmCloneEvent>
    {
        public bool Equals(VmCloneEvent vmCloneEvent)
        {
            return (vmCloneEvent != null && base.Equals(vmCloneEvent));
        }

        public override bool Equals(object vmCloneEvent)
        {
            return Equals(vmCloneEvent as VmCloneEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmCloneFailedEvent : VmCloneEvent, IEquatable<VmCloneFailedEvent>
    {
        public FolderEventArgument DestFolder { get; set; }

        public string DestName { get; set; }

        public HostEventArgument DestHost { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmCloneFailedEvent vmCloneFailedEvent)
        {
            return (vmCloneFailedEvent != null && ((this.DestFolder == null && vmCloneFailedEvent.DestFolder == null) || (this.DestFolder != null && this.DestFolder.Equals(vmCloneFailedEvent.DestFolder))) && this.DestName == vmCloneFailedEvent.DestName && ((this.DestHost == null && vmCloneFailedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmCloneFailedEvent.DestHost))) && ((this.Reason == null && vmCloneFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmCloneFailedEvent.Reason))));
        }

        public override bool Equals(object vmCloneFailedEvent)
        {
            return Equals(vmCloneFailedEvent as VmCloneFailedEvent);
        }

        public override int GetHashCode()
        {
            return (DestFolder + "_" + DestName + "_" + DestHost + "_" + Reason).GetHashCode();
        }
    }

    public class VmConfigFault : VimFault, IEquatable<VmConfigFault>
    {
        public bool Equals(VmConfigFault vmConfigFault)
        {
            return (vmConfigFault != null && base.Equals(vmConfigFault));
        }

        public override bool Equals(object vmConfigFault)
        {
            return Equals(vmConfigFault as VmConfigFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmConfigFileEncryptionInfo : DynamicData, IEquatable<VmConfigFileEncryptionInfo>
    {
        public CryptoKeyId KeyId { get; set; }

        public bool Equals(VmConfigFileEncryptionInfo vmConfigFileEncryptionInfo)
        {
            return (vmConfigFileEncryptionInfo != null && ((this.KeyId == null && vmConfigFileEncryptionInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(vmConfigFileEncryptionInfo.KeyId))));
        }

        public override bool Equals(object vmConfigFileEncryptionInfo)
        {
            return Equals(vmConfigFileEncryptionInfo as VmConfigFileEncryptionInfo);
        }

        public override int GetHashCode()
        {
            return (KeyId).GetHashCode();
        }
    }

    public class VmConfigFileInfo : FileInfo, IEquatable<VmConfigFileInfo>
    {
        public int? ConfigVersion { get; set; }

        public VmConfigFileEncryptionInfo Encryption { get; set; }

        public bool Equals(VmConfigFileInfo vmConfigFileInfo)
        {
            return (vmConfigFileInfo != null && ((this.ConfigVersion == null && vmConfigFileInfo.ConfigVersion == null) || (this.ConfigVersion != null && this.ConfigVersion.Equals(vmConfigFileInfo.ConfigVersion))) && ((this.Encryption == null && vmConfigFileInfo.Encryption == null) || (this.Encryption != null && this.Encryption.Equals(vmConfigFileInfo.Encryption))));
        }

        public override bool Equals(object vmConfigFileInfo)
        {
            return Equals(vmConfigFileInfo as VmConfigFileInfo);
        }

        public override int GetHashCode()
        {
            return (ConfigVersion + "_" + Encryption).GetHashCode();
        }
    }

    public class VmConfigFileQuery : FileQuery, IEquatable<VmConfigFileQuery>
    {
        public VmConfigFileQueryFilter Filter { get; set; }

        public VmConfigFileQueryFlags Details { get; set; }

        public bool Equals(VmConfigFileQuery vmConfigFileQuery)
        {
            return (vmConfigFileQuery != null && ((this.Filter == null && vmConfigFileQuery.Filter == null) || (this.Filter != null && this.Filter.Equals(vmConfigFileQuery.Filter))) && ((this.Details == null && vmConfigFileQuery.Details == null) || (this.Details != null && this.Details.Equals(vmConfigFileQuery.Details))));
        }

        public override bool Equals(object vmConfigFileQuery)
        {
            return Equals(vmConfigFileQuery as VmConfigFileQuery);
        }

        public override int GetHashCode()
        {
            return (Filter + "_" + Details).GetHashCode();
        }
    }

    public class VmConfigFileQueryFilter : DynamicData, IEquatable<VmConfigFileQueryFilter>
    {
        public int[] MatchConfigVersion { get; set; }

        public bool? Encrypted { get; set; }

        public bool Equals(VmConfigFileQueryFilter vmConfigFileQueryFilter)
        {
            return (vmConfigFileQueryFilter != null && ((this.MatchConfigVersion == null && vmConfigFileQueryFilter.MatchConfigVersion == null) || (this.MatchConfigVersion != null && vmConfigFileQueryFilter.MatchConfigVersion != null && Enumerable.SequenceEqual(this.MatchConfigVersion, vmConfigFileQueryFilter.MatchConfigVersion))) && ((this.Encrypted == null && vmConfigFileQueryFilter.Encrypted == null) || (this.Encrypted != null && this.Encrypted.Equals(vmConfigFileQueryFilter.Encrypted))));
        }

        public override bool Equals(object vmConfigFileQueryFilter)
        {
            return Equals(vmConfigFileQueryFilter as VmConfigFileQueryFilter);
        }

        public override int GetHashCode()
        {
            return (MatchConfigVersion + "_" + Encrypted).GetHashCode();
        }
    }

    public class VmConfigFileQueryFlags : DynamicData, IEquatable<VmConfigFileQueryFlags>
    {
        public bool ConfigVersion { get; set; }

        public bool? Encryption { get; set; }

        public bool Equals(VmConfigFileQueryFlags vmConfigFileQueryFlags)
        {
            return (vmConfigFileQueryFlags != null && this.ConfigVersion == vmConfigFileQueryFlags.ConfigVersion && ((this.Encryption == null && vmConfigFileQueryFlags.Encryption == null) || (this.Encryption != null && this.Encryption.Equals(vmConfigFileQueryFlags.Encryption))));
        }

        public override bool Equals(object vmConfigFileQueryFlags)
        {
            return Equals(vmConfigFileQueryFlags as VmConfigFileQueryFlags);
        }

        public override int GetHashCode()
        {
            return (ConfigVersion + "_" + Encryption).GetHashCode();
        }
    }

    public class VmConfigIncompatibleForFaultTolerance : VmConfigFault, IEquatable<VmConfigIncompatibleForFaultTolerance>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(VmConfigIncompatibleForFaultTolerance vmConfigIncompatibleForFaultTolerance)
        {
            return (vmConfigIncompatibleForFaultTolerance != null && ((this.Fault == null && vmConfigIncompatibleForFaultTolerance.Fault == null) || (this.Fault != null && this.Fault.Equals(vmConfigIncompatibleForFaultTolerance.Fault))));
        }

        public override bool Equals(object vmConfigIncompatibleForFaultTolerance)
        {
            return Equals(vmConfigIncompatibleForFaultTolerance as VmConfigIncompatibleForFaultTolerance);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class VmConfigIncompatibleForRecordReplay : VmConfigFault, IEquatable<VmConfigIncompatibleForRecordReplay>
    {
        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(VmConfigIncompatibleForRecordReplay vmConfigIncompatibleForRecordReplay)
        {
            return (vmConfigIncompatibleForRecordReplay != null && ((this.Fault == null && vmConfigIncompatibleForRecordReplay.Fault == null) || (this.Fault != null && this.Fault.Equals(vmConfigIncompatibleForRecordReplay.Fault))));
        }

        public override bool Equals(object vmConfigIncompatibleForRecordReplay)
        {
            return Equals(vmConfigIncompatibleForRecordReplay as VmConfigIncompatibleForRecordReplay);
        }

        public override int GetHashCode()
        {
            return (Fault).GetHashCode();
        }
    }

    public class VmConfigInfo : DynamicData, IEquatable<VmConfigInfo>
    {
        public VAppProductInfo[] Product { get; set; }

        public VAppPropertyInfo[] Property { get; set; }

        public VAppIPAssignmentInfo IpAssignment { get; set; }

        public string[] Eula { get; set; }

        public VAppOvfSectionInfo[] OvfSection { get; set; }

        public string[] OvfEnvironmentTransport { get; set; }

        public bool InstallBootRequired { get; set; }

        public int InstallBootStopDelay { get; set; }

        public bool Equals(VmConfigInfo vmConfigInfo)
        {
            return (vmConfigInfo != null && ((this.Product == null && vmConfigInfo.Product == null) || (this.Product != null && vmConfigInfo.Product != null && Enumerable.SequenceEqual(this.Product, vmConfigInfo.Product))) && ((this.Property == null && vmConfigInfo.Property == null) || (this.Property != null && vmConfigInfo.Property != null && Enumerable.SequenceEqual(this.Property, vmConfigInfo.Property))) && ((this.IpAssignment == null && vmConfigInfo.IpAssignment == null) || (this.IpAssignment != null && this.IpAssignment.Equals(vmConfigInfo.IpAssignment))) && ((this.Eula == null && vmConfigInfo.Eula == null) || (this.Eula != null && vmConfigInfo.Eula != null && Enumerable.SequenceEqual(this.Eula, vmConfigInfo.Eula))) && ((this.OvfSection == null && vmConfigInfo.OvfSection == null) || (this.OvfSection != null && vmConfigInfo.OvfSection != null && Enumerable.SequenceEqual(this.OvfSection, vmConfigInfo.OvfSection))) && ((this.OvfEnvironmentTransport == null && vmConfigInfo.OvfEnvironmentTransport == null) || (this.OvfEnvironmentTransport != null && vmConfigInfo.OvfEnvironmentTransport != null && Enumerable.SequenceEqual(this.OvfEnvironmentTransport, vmConfigInfo.OvfEnvironmentTransport))) && this.InstallBootRequired == vmConfigInfo.InstallBootRequired && this.InstallBootStopDelay == vmConfigInfo.InstallBootStopDelay);
        }

        public override bool Equals(object vmConfigInfo)
        {
            return Equals(vmConfigInfo as VmConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Product + "_" + Property + "_" + IpAssignment + "_" + Eula + "_" + OvfSection + "_" + OvfEnvironmentTransport + "_" + InstallBootRequired + "_" + InstallBootStopDelay).GetHashCode();
        }
    }

    public class VmConfigMissingEvent : VmEvent, IEquatable<VmConfigMissingEvent>
    {
        public bool Equals(VmConfigMissingEvent vmConfigMissingEvent)
        {
            return (vmConfigMissingEvent != null && base.Equals(vmConfigMissingEvent));
        }

        public override bool Equals(object vmConfigMissingEvent)
        {
            return Equals(vmConfigMissingEvent as VmConfigMissingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmConfigSpec : DynamicData, IEquatable<VmConfigSpec>
    {
        public VAppProductSpec[] Product { get; set; }

        public VAppPropertySpec[] Property { get; set; }

        public VAppIPAssignmentInfo IpAssignment { get; set; }

        public string[] Eula { get; set; }

        public VAppOvfSectionSpec[] OvfSection { get; set; }

        public string[] OvfEnvironmentTransport { get; set; }

        public bool? InstallBootRequired { get; set; }

        public int? InstallBootStopDelay { get; set; }

        public bool Equals(VmConfigSpec vmConfigSpec)
        {
            return (vmConfigSpec != null && ((this.Product == null && vmConfigSpec.Product == null) || (this.Product != null && vmConfigSpec.Product != null && Enumerable.SequenceEqual(this.Product, vmConfigSpec.Product))) && ((this.Property == null && vmConfigSpec.Property == null) || (this.Property != null && vmConfigSpec.Property != null && Enumerable.SequenceEqual(this.Property, vmConfigSpec.Property))) && ((this.IpAssignment == null && vmConfigSpec.IpAssignment == null) || (this.IpAssignment != null && this.IpAssignment.Equals(vmConfigSpec.IpAssignment))) && ((this.Eula == null && vmConfigSpec.Eula == null) || (this.Eula != null && vmConfigSpec.Eula != null && Enumerable.SequenceEqual(this.Eula, vmConfigSpec.Eula))) && ((this.OvfSection == null && vmConfigSpec.OvfSection == null) || (this.OvfSection != null && vmConfigSpec.OvfSection != null && Enumerable.SequenceEqual(this.OvfSection, vmConfigSpec.OvfSection))) && ((this.OvfEnvironmentTransport == null && vmConfigSpec.OvfEnvironmentTransport == null) || (this.OvfEnvironmentTransport != null && vmConfigSpec.OvfEnvironmentTransport != null && Enumerable.SequenceEqual(this.OvfEnvironmentTransport, vmConfigSpec.OvfEnvironmentTransport))) && ((this.InstallBootRequired == null && vmConfigSpec.InstallBootRequired == null) || (this.InstallBootRequired != null && this.InstallBootRequired.Equals(vmConfigSpec.InstallBootRequired))) && ((this.InstallBootStopDelay == null && vmConfigSpec.InstallBootStopDelay == null) || (this.InstallBootStopDelay != null && this.InstallBootStopDelay.Equals(vmConfigSpec.InstallBootStopDelay))));
        }

        public override bool Equals(object vmConfigSpec)
        {
            return Equals(vmConfigSpec as VmConfigSpec);
        }

        public override int GetHashCode()
        {
            return (Product + "_" + Property + "_" + IpAssignment + "_" + Eula + "_" + OvfSection + "_" + OvfEnvironmentTransport + "_" + InstallBootRequired + "_" + InstallBootStopDelay).GetHashCode();
        }
    }

    public class VmConnectedEvent : VmEvent, IEquatable<VmConnectedEvent>
    {
        public bool Equals(VmConnectedEvent vmConnectedEvent)
        {
            return (vmConnectedEvent != null && base.Equals(vmConnectedEvent));
        }

        public override bool Equals(object vmConnectedEvent)
        {
            return Equals(vmConnectedEvent as VmConnectedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmCreatedEvent : VmEvent, IEquatable<VmCreatedEvent>
    {
        public bool Equals(VmCreatedEvent vmCreatedEvent)
        {
            return (vmCreatedEvent != null && base.Equals(vmCreatedEvent));
        }

        public override bool Equals(object vmCreatedEvent)
        {
            return Equals(vmCreatedEvent as VmCreatedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDasBeingResetEvent : VmEvent, IEquatable<VmDasBeingResetEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VmDasBeingResetEvent vmDasBeingResetEvent)
        {
            return (vmDasBeingResetEvent != null && this.Reason == vmDasBeingResetEvent.Reason);
        }

        public override bool Equals(object vmDasBeingResetEvent)
        {
            return Equals(vmDasBeingResetEvent as VmDasBeingResetEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmDasBeingResetWithScreenshotEvent : VmDasBeingResetEvent, IEquatable<VmDasBeingResetWithScreenshotEvent>
    {
        public string ScreenshotFilePath { get; set; }

        public bool Equals(VmDasBeingResetWithScreenshotEvent vmDasBeingResetWithScreenshotEvent)
        {
            return (vmDasBeingResetWithScreenshotEvent != null && this.ScreenshotFilePath == vmDasBeingResetWithScreenshotEvent.ScreenshotFilePath);
        }

        public override bool Equals(object vmDasBeingResetWithScreenshotEvent)
        {
            return Equals(vmDasBeingResetWithScreenshotEvent as VmDasBeingResetWithScreenshotEvent);
        }

        public override int GetHashCode()
        {
            return (ScreenshotFilePath).GetHashCode();
        }
    }

    public class VmDasResetFailedEvent : VmEvent, IEquatable<VmDasResetFailedEvent>
    {
        public bool Equals(VmDasResetFailedEvent vmDasResetFailedEvent)
        {
            return (vmDasResetFailedEvent != null && base.Equals(vmDasResetFailedEvent));
        }

        public override bool Equals(object vmDasResetFailedEvent)
        {
            return Equals(vmDasResetFailedEvent as VmDasResetFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDasUpdateErrorEvent : VmEvent, IEquatable<VmDasUpdateErrorEvent>
    {
        public bool Equals(VmDasUpdateErrorEvent vmDasUpdateErrorEvent)
        {
            return (vmDasUpdateErrorEvent != null && base.Equals(vmDasUpdateErrorEvent));
        }

        public override bool Equals(object vmDasUpdateErrorEvent)
        {
            return Equals(vmDasUpdateErrorEvent as VmDasUpdateErrorEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDasUpdateOkEvent : VmEvent, IEquatable<VmDasUpdateOkEvent>
    {
        public bool Equals(VmDasUpdateOkEvent vmDasUpdateOkEvent)
        {
            return (vmDasUpdateOkEvent != null && base.Equals(vmDasUpdateOkEvent));
        }

        public override bool Equals(object vmDasUpdateOkEvent)
        {
            return Equals(vmDasUpdateOkEvent as VmDasUpdateOkEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDateRolledBackEvent : VmEvent, IEquatable<VmDateRolledBackEvent>
    {
        public bool Equals(VmDateRolledBackEvent vmDateRolledBackEvent)
        {
            return (vmDateRolledBackEvent != null && base.Equals(vmDateRolledBackEvent));
        }

        public override bool Equals(object vmDateRolledBackEvent)
        {
            return Equals(vmDateRolledBackEvent as VmDateRolledBackEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDeployedEvent : VmEvent, IEquatable<VmDeployedEvent>
    {
        public VmEventArgument SrcTemplate { get; set; }

        public bool Equals(VmDeployedEvent vmDeployedEvent)
        {
            return (vmDeployedEvent != null && ((this.SrcTemplate == null && vmDeployedEvent.SrcTemplate == null) || (this.SrcTemplate != null && this.SrcTemplate.Equals(vmDeployedEvent.SrcTemplate))));
        }

        public override bool Equals(object vmDeployedEvent)
        {
            return Equals(vmDeployedEvent as VmDeployedEvent);
        }

        public override int GetHashCode()
        {
            return (SrcTemplate).GetHashCode();
        }
    }

    public class VmDeployFailedEvent : VmEvent, IEquatable<VmDeployFailedEvent>
    {
        public EntityEventArgument DestDatastore { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmDeployFailedEvent vmDeployFailedEvent)
        {
            return (vmDeployFailedEvent != null && ((this.DestDatastore == null && vmDeployFailedEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmDeployFailedEvent.DestDatastore))) && ((this.Reason == null && vmDeployFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmDeployFailedEvent.Reason))));
        }

        public override bool Equals(object vmDeployFailedEvent)
        {
            return Equals(vmDeployFailedEvent as VmDeployFailedEvent);
        }

        public override int GetHashCode()
        {
            return (DestDatastore + "_" + Reason).GetHashCode();
        }
    }

    public class VmDisconnectedEvent : VmEvent, IEquatable<VmDisconnectedEvent>
    {
        public bool Equals(VmDisconnectedEvent vmDisconnectedEvent)
        {
            return (vmDisconnectedEvent != null && base.Equals(vmDisconnectedEvent));
        }

        public override bool Equals(object vmDisconnectedEvent)
        {
            return Equals(vmDisconnectedEvent as VmDisconnectedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDiscoveredEvent : VmEvent, IEquatable<VmDiscoveredEvent>
    {
        public bool Equals(VmDiscoveredEvent vmDiscoveredEvent)
        {
            return (vmDiscoveredEvent != null && base.Equals(vmDiscoveredEvent));
        }

        public override bool Equals(object vmDiscoveredEvent)
        {
            return Equals(vmDiscoveredEvent as VmDiscoveredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmDiskFailedEvent : VmEvent, IEquatable<VmDiskFailedEvent>
    {
        public string Disk { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmDiskFailedEvent vmDiskFailedEvent)
        {
            return (vmDiskFailedEvent != null && this.Disk == vmDiskFailedEvent.Disk && ((this.Reason == null && vmDiskFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmDiskFailedEvent.Reason))));
        }

        public override bool Equals(object vmDiskFailedEvent)
        {
            return Equals(vmDiskFailedEvent as VmDiskFailedEvent);
        }

        public override int GetHashCode()
        {
            return (Disk + "_" + Reason).GetHashCode();
        }
    }

    public class VmDiskFileEncryptionInfo : DynamicData, IEquatable<VmDiskFileEncryptionInfo>
    {
        public CryptoKeyId KeyId { get; set; }

        public bool Equals(VmDiskFileEncryptionInfo vmDiskFileEncryptionInfo)
        {
            return (vmDiskFileEncryptionInfo != null && ((this.KeyId == null && vmDiskFileEncryptionInfo.KeyId == null) || (this.KeyId != null && this.KeyId.Equals(vmDiskFileEncryptionInfo.KeyId))));
        }

        public override bool Equals(object vmDiskFileEncryptionInfo)
        {
            return Equals(vmDiskFileEncryptionInfo as VmDiskFileEncryptionInfo);
        }

        public override int GetHashCode()
        {
            return (KeyId).GetHashCode();
        }
    }

    public class VmDiskFileInfo : FileInfo, IEquatable<VmDiskFileInfo>
    {
        public string DiskType { get; set; }

        public long? CapacityKb { get; set; }

        public int? HardwareVersion { get; set; }

        public string ControllerType { get; set; }

        public string[] DiskExtents { get; set; }

        public bool? Thin { get; set; }

        public VmDiskFileEncryptionInfo Encryption { get; set; }

        public bool Equals(VmDiskFileInfo vmDiskFileInfo)
        {
            return (vmDiskFileInfo != null && this.DiskType == vmDiskFileInfo.DiskType && ((this.CapacityKb == null && vmDiskFileInfo.CapacityKb == null) || (this.CapacityKb != null && this.CapacityKb.Equals(vmDiskFileInfo.CapacityKb))) && ((this.HardwareVersion == null && vmDiskFileInfo.HardwareVersion == null) || (this.HardwareVersion != null && this.HardwareVersion.Equals(vmDiskFileInfo.HardwareVersion))) && this.ControllerType == vmDiskFileInfo.ControllerType && ((this.DiskExtents == null && vmDiskFileInfo.DiskExtents == null) || (this.DiskExtents != null && vmDiskFileInfo.DiskExtents != null && Enumerable.SequenceEqual(this.DiskExtents, vmDiskFileInfo.DiskExtents))) && ((this.Thin == null && vmDiskFileInfo.Thin == null) || (this.Thin != null && this.Thin.Equals(vmDiskFileInfo.Thin))) && ((this.Encryption == null && vmDiskFileInfo.Encryption == null) || (this.Encryption != null && this.Encryption.Equals(vmDiskFileInfo.Encryption))));
        }

        public override bool Equals(object vmDiskFileInfo)
        {
            return Equals(vmDiskFileInfo as VmDiskFileInfo);
        }

        public override int GetHashCode()
        {
            return (DiskType + "_" + CapacityKb + "_" + HardwareVersion + "_" + ControllerType + "_" + DiskExtents + "_" + Thin + "_" + Encryption).GetHashCode();
        }
    }

    public class VmDiskFileQuery : FileQuery, IEquatable<VmDiskFileQuery>
    {
        public VmDiskFileQueryFilter Filter { get; set; }

        public VmDiskFileQueryFlags Details { get; set; }

        public bool Equals(VmDiskFileQuery vmDiskFileQuery)
        {
            return (vmDiskFileQuery != null && ((this.Filter == null && vmDiskFileQuery.Filter == null) || (this.Filter != null && this.Filter.Equals(vmDiskFileQuery.Filter))) && ((this.Details == null && vmDiskFileQuery.Details == null) || (this.Details != null && this.Details.Equals(vmDiskFileQuery.Details))));
        }

        public override bool Equals(object vmDiskFileQuery)
        {
            return Equals(vmDiskFileQuery as VmDiskFileQuery);
        }

        public override int GetHashCode()
        {
            return (Filter + "_" + Details).GetHashCode();
        }
    }

    public class VmDiskFileQueryFilter : DynamicData, IEquatable<VmDiskFileQueryFilter>
    {
        public string[] DiskType { get; set; }

        public int[] MatchHardwareVersion { get; set; }

        public string[] ControllerType { get; set; }

        public bool? Thin { get; set; }

        public bool? Encrypted { get; set; }

        public bool Equals(VmDiskFileQueryFilter vmDiskFileQueryFilter)
        {
            return (vmDiskFileQueryFilter != null && ((this.DiskType == null && vmDiskFileQueryFilter.DiskType == null) || (this.DiskType != null && vmDiskFileQueryFilter.DiskType != null && Enumerable.SequenceEqual(this.DiskType, vmDiskFileQueryFilter.DiskType))) && ((this.MatchHardwareVersion == null && vmDiskFileQueryFilter.MatchHardwareVersion == null) || (this.MatchHardwareVersion != null && vmDiskFileQueryFilter.MatchHardwareVersion != null && Enumerable.SequenceEqual(this.MatchHardwareVersion, vmDiskFileQueryFilter.MatchHardwareVersion))) && ((this.ControllerType == null && vmDiskFileQueryFilter.ControllerType == null) || (this.ControllerType != null && vmDiskFileQueryFilter.ControllerType != null && Enumerable.SequenceEqual(this.ControllerType, vmDiskFileQueryFilter.ControllerType))) && ((this.Thin == null && vmDiskFileQueryFilter.Thin == null) || (this.Thin != null && this.Thin.Equals(vmDiskFileQueryFilter.Thin))) && ((this.Encrypted == null && vmDiskFileQueryFilter.Encrypted == null) || (this.Encrypted != null && this.Encrypted.Equals(vmDiskFileQueryFilter.Encrypted))));
        }

        public override bool Equals(object vmDiskFileQueryFilter)
        {
            return Equals(vmDiskFileQueryFilter as VmDiskFileQueryFilter);
        }

        public override int GetHashCode()
        {
            return (DiskType + "_" + MatchHardwareVersion + "_" + ControllerType + "_" + Thin + "_" + Encrypted).GetHashCode();
        }
    }

    public class VmDiskFileQueryFlags : DynamicData, IEquatable<VmDiskFileQueryFlags>
    {
        public bool DiskType { get; set; }

        public bool CapacityKb { get; set; }

        public bool HardwareVersion { get; set; }

        public bool? ControllerType { get; set; }

        public bool? DiskExtents { get; set; }

        public bool? Thin { get; set; }

        public bool? Encryption { get; set; }

        public bool Equals(VmDiskFileQueryFlags vmDiskFileQueryFlags)
        {
            return (vmDiskFileQueryFlags != null && this.DiskType == vmDiskFileQueryFlags.DiskType && this.CapacityKb == vmDiskFileQueryFlags.CapacityKb && this.HardwareVersion == vmDiskFileQueryFlags.HardwareVersion && ((this.ControllerType == null && vmDiskFileQueryFlags.ControllerType == null) || (this.ControllerType != null && this.ControllerType.Equals(vmDiskFileQueryFlags.ControllerType))) && ((this.DiskExtents == null && vmDiskFileQueryFlags.DiskExtents == null) || (this.DiskExtents != null && this.DiskExtents.Equals(vmDiskFileQueryFlags.DiskExtents))) && ((this.Thin == null && vmDiskFileQueryFlags.Thin == null) || (this.Thin != null && this.Thin.Equals(vmDiskFileQueryFlags.Thin))) && ((this.Encryption == null && vmDiskFileQueryFlags.Encryption == null) || (this.Encryption != null && this.Encryption.Equals(vmDiskFileQueryFlags.Encryption))));
        }

        public override bool Equals(object vmDiskFileQueryFlags)
        {
            return Equals(vmDiskFileQueryFlags as VmDiskFileQueryFlags);
        }

        public override int GetHashCode()
        {
            return (DiskType + "_" + CapacityKb + "_" + HardwareVersion + "_" + ControllerType + "_" + DiskExtents + "_" + Thin + "_" + Encryption).GetHashCode();
        }
    }

    public class VmEmigratingEvent : VmEvent, IEquatable<VmEmigratingEvent>
    {
        public bool Equals(VmEmigratingEvent vmEmigratingEvent)
        {
            return (vmEmigratingEvent != null && base.Equals(vmEmigratingEvent));
        }

        public override bool Equals(object vmEmigratingEvent)
        {
            return Equals(vmEmigratingEvent as VmEmigratingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmEndRecordingEvent : VmEvent, IEquatable<VmEndRecordingEvent>
    {
        public bool Equals(VmEndRecordingEvent vmEndRecordingEvent)
        {
            return (vmEndRecordingEvent != null && base.Equals(vmEndRecordingEvent));
        }

        public override bool Equals(object vmEndRecordingEvent)
        {
            return Equals(vmEndRecordingEvent as VmEndRecordingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmEndReplayingEvent : VmEvent, IEquatable<VmEndReplayingEvent>
    {
        public bool Equals(VmEndReplayingEvent vmEndReplayingEvent)
        {
            return (vmEndReplayingEvent != null && base.Equals(vmEndReplayingEvent));
        }

        public override bool Equals(object vmEndReplayingEvent)
        {
            return Equals(vmEndReplayingEvent as VmEndReplayingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmEvent : Event, IEquatable<VmEvent>
    {
        public bool Template { get; set; }

        public bool Equals(VmEvent vmEvent)
        {
            return (vmEvent != null && this.Template == vmEvent.Template);
        }

        public override bool Equals(object vmEvent)
        {
            return Equals(vmEvent as VmEvent);
        }

        public override int GetHashCode()
        {
            return (Template).GetHashCode();
        }
    }

    public class VmEventArgument : EntityEventArgument, IEquatable<VmEventArgument>
    {
        public ManagedObjectReference Vm { get; set; }

        public VmEventArgument_LinkedView LinkedView { get; set; }

        public bool Equals(VmEventArgument vmEventArgument)
        {
            return (vmEventArgument != null && ((this.Vm == null && vmEventArgument.Vm == null) || (this.Vm != null && this.Vm.Equals(vmEventArgument.Vm))) && ((this.LinkedView == null && vmEventArgument.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmEventArgument.LinkedView))));
        }

        public override bool Equals(object vmEventArgument)
        {
            return Equals(vmEventArgument as VmEventArgument);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmEventArgument_LinkedView : IEquatable<VmEventArgument_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public bool Equals(VmEventArgument_LinkedView vmEventArgument_LinkedView)
        {
            return (vmEventArgument_LinkedView != null && ((this.Vm == null && vmEventArgument_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(vmEventArgument_LinkedView.Vm))));
        }

        public override bool Equals(object vmEventArgument_LinkedView)
        {
            return Equals(vmEventArgument_LinkedView as VmEventArgument_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm).GetHashCode();
        }
    }

    public class VmFailedMigrateEvent : VmEvent, IEquatable<VmFailedMigrateEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public DatacenterEventArgument DestDatacenter { get; set; }

        public DatastoreEventArgument DestDatastore { get; set; }

        public bool Equals(VmFailedMigrateEvent vmFailedMigrateEvent)
        {
            return (vmFailedMigrateEvent != null && ((this.DestHost == null && vmFailedMigrateEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmFailedMigrateEvent.DestHost))) && ((this.Reason == null && vmFailedMigrateEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedMigrateEvent.Reason))) && ((this.DestDatacenter == null && vmFailedMigrateEvent.DestDatacenter == null) || (this.DestDatacenter != null && this.DestDatacenter.Equals(vmFailedMigrateEvent.DestDatacenter))) && ((this.DestDatastore == null && vmFailedMigrateEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmFailedMigrateEvent.DestDatastore))));
        }

        public override bool Equals(object vmFailedMigrateEvent)
        {
            return Equals(vmFailedMigrateEvent as VmFailedMigrateEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost + "_" + Reason + "_" + DestDatacenter + "_" + DestDatastore).GetHashCode();
        }
    }

    public class VmFailedRelayoutEvent : VmEvent, IEquatable<VmFailedRelayoutEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedRelayoutEvent vmFailedRelayoutEvent)
        {
            return (vmFailedRelayoutEvent != null && ((this.Reason == null && vmFailedRelayoutEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedRelayoutEvent.Reason))));
        }

        public override bool Equals(object vmFailedRelayoutEvent)
        {
            return Equals(vmFailedRelayoutEvent as VmFailedRelayoutEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedRelayoutOnVmfs2DatastoreEvent : VmEvent, IEquatable<VmFailedRelayoutOnVmfs2DatastoreEvent>
    {
        public bool Equals(VmFailedRelayoutOnVmfs2DatastoreEvent vmFailedRelayoutOnVmfs2DatastoreEvent)
        {
            return (vmFailedRelayoutOnVmfs2DatastoreEvent != null && base.Equals(vmFailedRelayoutOnVmfs2DatastoreEvent));
        }

        public override bool Equals(object vmFailedRelayoutOnVmfs2DatastoreEvent)
        {
            return Equals(vmFailedRelayoutOnVmfs2DatastoreEvent as VmFailedRelayoutOnVmfs2DatastoreEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmFailedStartingSecondaryEvent : VmEvent, IEquatable<VmFailedStartingSecondaryEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VmFailedStartingSecondaryEvent vmFailedStartingSecondaryEvent)
        {
            return (vmFailedStartingSecondaryEvent != null && this.Reason == vmFailedStartingSecondaryEvent.Reason);
        }

        public override bool Equals(object vmFailedStartingSecondaryEvent)
        {
            return Equals(vmFailedStartingSecondaryEvent as VmFailedStartingSecondaryEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToPowerOffEvent : VmEvent, IEquatable<VmFailedToPowerOffEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToPowerOffEvent vmFailedToPowerOffEvent)
        {
            return (vmFailedToPowerOffEvent != null && ((this.Reason == null && vmFailedToPowerOffEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToPowerOffEvent.Reason))));
        }

        public override bool Equals(object vmFailedToPowerOffEvent)
        {
            return Equals(vmFailedToPowerOffEvent as VmFailedToPowerOffEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToPowerOnEvent : VmEvent, IEquatable<VmFailedToPowerOnEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToPowerOnEvent vmFailedToPowerOnEvent)
        {
            return (vmFailedToPowerOnEvent != null && ((this.Reason == null && vmFailedToPowerOnEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToPowerOnEvent.Reason))));
        }

        public override bool Equals(object vmFailedToPowerOnEvent)
        {
            return Equals(vmFailedToPowerOnEvent as VmFailedToPowerOnEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToRebootGuestEvent : VmEvent, IEquatable<VmFailedToRebootGuestEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToRebootGuestEvent vmFailedToRebootGuestEvent)
        {
            return (vmFailedToRebootGuestEvent != null && ((this.Reason == null && vmFailedToRebootGuestEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToRebootGuestEvent.Reason))));
        }

        public override bool Equals(object vmFailedToRebootGuestEvent)
        {
            return Equals(vmFailedToRebootGuestEvent as VmFailedToRebootGuestEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToResetEvent : VmEvent, IEquatable<VmFailedToResetEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToResetEvent vmFailedToResetEvent)
        {
            return (vmFailedToResetEvent != null && ((this.Reason == null && vmFailedToResetEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToResetEvent.Reason))));
        }

        public override bool Equals(object vmFailedToResetEvent)
        {
            return Equals(vmFailedToResetEvent as VmFailedToResetEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToShutdownGuestEvent : VmEvent, IEquatable<VmFailedToShutdownGuestEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToShutdownGuestEvent vmFailedToShutdownGuestEvent)
        {
            return (vmFailedToShutdownGuestEvent != null && ((this.Reason == null && vmFailedToShutdownGuestEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToShutdownGuestEvent.Reason))));
        }

        public override bool Equals(object vmFailedToShutdownGuestEvent)
        {
            return Equals(vmFailedToShutdownGuestEvent as VmFailedToShutdownGuestEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToStandbyGuestEvent : VmEvent, IEquatable<VmFailedToStandbyGuestEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToStandbyGuestEvent vmFailedToStandbyGuestEvent)
        {
            return (vmFailedToStandbyGuestEvent != null && ((this.Reason == null && vmFailedToStandbyGuestEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToStandbyGuestEvent.Reason))));
        }

        public override bool Equals(object vmFailedToStandbyGuestEvent)
        {
            return Equals(vmFailedToStandbyGuestEvent as VmFailedToStandbyGuestEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedToSuspendEvent : VmEvent, IEquatable<VmFailedToSuspendEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailedToSuspendEvent vmFailedToSuspendEvent)
        {
            return (vmFailedToSuspendEvent != null && ((this.Reason == null && vmFailedToSuspendEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailedToSuspendEvent.Reason))));
        }

        public override bool Equals(object vmFailedToSuspendEvent)
        {
            return Equals(vmFailedToSuspendEvent as VmFailedToSuspendEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFailedUpdatingSecondaryConfig : VmEvent, IEquatable<VmFailedUpdatingSecondaryConfig>
    {
        public bool Equals(VmFailedUpdatingSecondaryConfig vmFailedUpdatingSecondaryConfig)
        {
            return (vmFailedUpdatingSecondaryConfig != null && base.Equals(vmFailedUpdatingSecondaryConfig));
        }

        public override bool Equals(object vmFailedUpdatingSecondaryConfig)
        {
            return Equals(vmFailedUpdatingSecondaryConfig as VmFailedUpdatingSecondaryConfig);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmFailoverFailed : VmEvent, IEquatable<VmFailoverFailed>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmFailoverFailed vmFailoverFailed)
        {
            return (vmFailoverFailed != null && ((this.Reason == null && vmFailoverFailed.Reason == null) || (this.Reason != null && this.Reason.Equals(vmFailoverFailed.Reason))));
        }

        public override bool Equals(object vmFailoverFailed)
        {
            return Equals(vmFailoverFailed as VmFailoverFailed);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmFaultToleranceConfigIssue : VmFaultToleranceIssue, IEquatable<VmFaultToleranceConfigIssue>
    {
        public string Reason { get; set; }

        public string EntityName { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public VmFaultToleranceConfigIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VmFaultToleranceConfigIssue vmFaultToleranceConfigIssue)
        {
            return (vmFaultToleranceConfigIssue != null && this.Reason == vmFaultToleranceConfigIssue.Reason && this.EntityName == vmFaultToleranceConfigIssue.EntityName && ((this.Entity == null && vmFaultToleranceConfigIssue.Entity == null) || (this.Entity != null && this.Entity.Equals(vmFaultToleranceConfigIssue.Entity))) && ((this.LinkedView == null && vmFaultToleranceConfigIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmFaultToleranceConfigIssue.LinkedView))));
        }

        public override bool Equals(object vmFaultToleranceConfigIssue)
        {
            return Equals(vmFaultToleranceConfigIssue as VmFaultToleranceConfigIssue);
        }

        public override int GetHashCode()
        {
            return (Reason + "_" + EntityName + "_" + Entity + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmFaultToleranceConfigIssue_LinkedView : IEquatable<VmFaultToleranceConfigIssue_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(VmFaultToleranceConfigIssue_LinkedView vmFaultToleranceConfigIssue_LinkedView)
        {
            return (vmFaultToleranceConfigIssue_LinkedView != null && ((this.Entity == null && vmFaultToleranceConfigIssue_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(vmFaultToleranceConfigIssue_LinkedView.Entity))));
        }

        public override bool Equals(object vmFaultToleranceConfigIssue_LinkedView)
        {
            return Equals(vmFaultToleranceConfigIssue_LinkedView as VmFaultToleranceConfigIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class VmFaultToleranceConfigIssueWrapper : VmFaultToleranceIssue, IEquatable<VmFaultToleranceConfigIssueWrapper>
    {
        public string EntityName { get; set; }

        public ManagedObjectReference Entity { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public VmFaultToleranceConfigIssueWrapper_LinkedView LinkedView { get; set; }

        public bool Equals(VmFaultToleranceConfigIssueWrapper vmFaultToleranceConfigIssueWrapper)
        {
            return (vmFaultToleranceConfigIssueWrapper != null && this.EntityName == vmFaultToleranceConfigIssueWrapper.EntityName && ((this.Entity == null && vmFaultToleranceConfigIssueWrapper.Entity == null) || (this.Entity != null && this.Entity.Equals(vmFaultToleranceConfigIssueWrapper.Entity))) && ((this.Error == null && vmFaultToleranceConfigIssueWrapper.Error == null) || (this.Error != null && this.Error.Equals(vmFaultToleranceConfigIssueWrapper.Error))) && ((this.LinkedView == null && vmFaultToleranceConfigIssueWrapper.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmFaultToleranceConfigIssueWrapper.LinkedView))));
        }

        public override bool Equals(object vmFaultToleranceConfigIssueWrapper)
        {
            return Equals(vmFaultToleranceConfigIssueWrapper as VmFaultToleranceConfigIssueWrapper);
        }

        public override int GetHashCode()
        {
            return (EntityName + "_" + Entity + "_" + Error + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmFaultToleranceConfigIssueWrapper_LinkedView : IEquatable<VmFaultToleranceConfigIssueWrapper_LinkedView>
    {
        public ManagedEntity Entity { get; set; }

        public bool Equals(VmFaultToleranceConfigIssueWrapper_LinkedView vmFaultToleranceConfigIssueWrapper_LinkedView)
        {
            return (vmFaultToleranceConfigIssueWrapper_LinkedView != null && ((this.Entity == null && vmFaultToleranceConfigIssueWrapper_LinkedView.Entity == null) || (this.Entity != null && this.Entity.Equals(vmFaultToleranceConfigIssueWrapper_LinkedView.Entity))));
        }

        public override bool Equals(object vmFaultToleranceConfigIssueWrapper_LinkedView)
        {
            return Equals(vmFaultToleranceConfigIssueWrapper_LinkedView as VmFaultToleranceConfigIssueWrapper_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Entity).GetHashCode();
        }
    }

    public class VmFaultToleranceInvalidFileBacking : VmFaultToleranceIssue, IEquatable<VmFaultToleranceInvalidFileBacking>
    {
        public string BackingType { get; set; }

        public string BackingFilename { get; set; }

        public bool Equals(VmFaultToleranceInvalidFileBacking vmFaultToleranceInvalidFileBacking)
        {
            return (vmFaultToleranceInvalidFileBacking != null && this.BackingType == vmFaultToleranceInvalidFileBacking.BackingType && this.BackingFilename == vmFaultToleranceInvalidFileBacking.BackingFilename);
        }

        public override bool Equals(object vmFaultToleranceInvalidFileBacking)
        {
            return Equals(vmFaultToleranceInvalidFileBacking as VmFaultToleranceInvalidFileBacking);
        }

        public override int GetHashCode()
        {
            return (BackingType + "_" + BackingFilename).GetHashCode();
        }
    }

    public class VmFaultToleranceIssue : VimFault, IEquatable<VmFaultToleranceIssue>
    {
        public bool Equals(VmFaultToleranceIssue vmFaultToleranceIssue)
        {
            return (vmFaultToleranceIssue != null && base.Equals(vmFaultToleranceIssue));
        }

        public override bool Equals(object vmFaultToleranceIssue)
        {
            return Equals(vmFaultToleranceIssue as VmFaultToleranceIssue);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmFaultToleranceOpIssuesList : VmFaultToleranceIssue, IEquatable<VmFaultToleranceOpIssuesList>
    {
        public LocalizedMethodFault[] Errors { get; set; }

        public LocalizedMethodFault[] Warnings { get; set; }

        public bool Equals(VmFaultToleranceOpIssuesList vmFaultToleranceOpIssuesList)
        {
            return (vmFaultToleranceOpIssuesList != null && ((this.Errors == null && vmFaultToleranceOpIssuesList.Errors == null) || (this.Errors != null && vmFaultToleranceOpIssuesList.Errors != null && Enumerable.SequenceEqual(this.Errors, vmFaultToleranceOpIssuesList.Errors))) && ((this.Warnings == null && vmFaultToleranceOpIssuesList.Warnings == null) || (this.Warnings != null && vmFaultToleranceOpIssuesList.Warnings != null && Enumerable.SequenceEqual(this.Warnings, vmFaultToleranceOpIssuesList.Warnings))));
        }

        public override bool Equals(object vmFaultToleranceOpIssuesList)
        {
            return Equals(vmFaultToleranceOpIssuesList as VmFaultToleranceOpIssuesList);
        }

        public override int GetHashCode()
        {
            return (Errors + "_" + Warnings).GetHashCode();
        }
    }

    public class VmFaultToleranceStateChangedEvent : VmEvent, IEquatable<VmFaultToleranceStateChangedEvent>
    {
        public VirtualMachineFaultToleranceState OldState { get; set; }

        public VirtualMachineFaultToleranceState NewState { get; set; }

        public bool Equals(VmFaultToleranceStateChangedEvent vmFaultToleranceStateChangedEvent)
        {
            return (vmFaultToleranceStateChangedEvent != null && this.OldState == vmFaultToleranceStateChangedEvent.OldState && this.NewState == vmFaultToleranceStateChangedEvent.NewState);
        }

        public override bool Equals(object vmFaultToleranceStateChangedEvent)
        {
            return Equals(vmFaultToleranceStateChangedEvent as VmFaultToleranceStateChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldState + "_" + NewState).GetHashCode();
        }
    }

    public class VmFaultToleranceTooManyFtVcpusOnHost : InsufficientResourcesFault, IEquatable<VmFaultToleranceTooManyFtVcpusOnHost>
    {
        public string HostName { get; set; }

        public int MaxNumFtVcpus { get; set; }

        public bool Equals(VmFaultToleranceTooManyFtVcpusOnHost vmFaultToleranceTooManyFtVcpusOnHost)
        {
            return (vmFaultToleranceTooManyFtVcpusOnHost != null && this.HostName == vmFaultToleranceTooManyFtVcpusOnHost.HostName && this.MaxNumFtVcpus == vmFaultToleranceTooManyFtVcpusOnHost.MaxNumFtVcpus);
        }

        public override bool Equals(object vmFaultToleranceTooManyFtVcpusOnHost)
        {
            return Equals(vmFaultToleranceTooManyFtVcpusOnHost as VmFaultToleranceTooManyFtVcpusOnHost);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + MaxNumFtVcpus).GetHashCode();
        }
    }

    public class VmFaultToleranceTooManyVMsOnHost : InsufficientResourcesFault, IEquatable<VmFaultToleranceTooManyVMsOnHost>
    {
        public string HostName { get; set; }

        public int MaxNumFtVms { get; set; }

        public bool Equals(VmFaultToleranceTooManyVMsOnHost vmFaultToleranceTooManyVMsOnHost)
        {
            return (vmFaultToleranceTooManyVMsOnHost != null && this.HostName == vmFaultToleranceTooManyVMsOnHost.HostName && this.MaxNumFtVms == vmFaultToleranceTooManyVMsOnHost.MaxNumFtVms);
        }

        public override bool Equals(object vmFaultToleranceTooManyVMsOnHost)
        {
            return Equals(vmFaultToleranceTooManyVMsOnHost as VmFaultToleranceTooManyVMsOnHost);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + MaxNumFtVms).GetHashCode();
        }
    }

    public class VmFaultToleranceTurnedOffEvent : VmEvent, IEquatable<VmFaultToleranceTurnedOffEvent>
    {
        public bool Equals(VmFaultToleranceTurnedOffEvent vmFaultToleranceTurnedOffEvent)
        {
            return (vmFaultToleranceTurnedOffEvent != null && base.Equals(vmFaultToleranceTurnedOffEvent));
        }

        public override bool Equals(object vmFaultToleranceTurnedOffEvent)
        {
            return Equals(vmFaultToleranceTurnedOffEvent as VmFaultToleranceTurnedOffEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmFaultToleranceVmTerminatedEvent : VmEvent, IEquatable<VmFaultToleranceVmTerminatedEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VmFaultToleranceVmTerminatedEvent vmFaultToleranceVmTerminatedEvent)
        {
            return (vmFaultToleranceVmTerminatedEvent != null && this.Reason == vmFaultToleranceVmTerminatedEvent.Reason);
        }

        public override bool Equals(object vmFaultToleranceVmTerminatedEvent)
        {
            return Equals(vmFaultToleranceVmTerminatedEvent as VmFaultToleranceVmTerminatedEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmfsAlreadyMounted : VmfsMountFault, IEquatable<VmfsAlreadyMounted>
    {
        public bool Equals(VmfsAlreadyMounted vmfsAlreadyMounted)
        {
            return (vmfsAlreadyMounted != null && base.Equals(vmfsAlreadyMounted));
        }

        public override bool Equals(object vmfsAlreadyMounted)
        {
            return Equals(vmfsAlreadyMounted as VmfsAlreadyMounted);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmfsAmbiguousMount : VmfsMountFault, IEquatable<VmfsAmbiguousMount>
    {
        public bool Equals(VmfsAmbiguousMount vmfsAmbiguousMount)
        {
            return (vmfsAmbiguousMount != null && base.Equals(vmfsAmbiguousMount));
        }

        public override bool Equals(object vmfsAmbiguousMount)
        {
            return Equals(vmfsAmbiguousMount as VmfsAmbiguousMount);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmfsConfigOption : DynamicData, IEquatable<VmfsConfigOption>
    {
        public int BlockSizeOption { get; set; }

        public int[] UnmapGranularityOption { get; set; }

        public LongOption UnmapBandwidthFixedValue { get; set; }

        public LongOption UnmapBandwidthDynamicMin { get; set; }

        public LongOption UnmapBandwidthDynamicMax { get; set; }

        public long? UnmapBandwidthIncrement { get; set; }

        public bool Equals(VmfsConfigOption vmfsConfigOption)
        {
            return (vmfsConfigOption != null && this.BlockSizeOption == vmfsConfigOption.BlockSizeOption && ((this.UnmapGranularityOption == null && vmfsConfigOption.UnmapGranularityOption == null) || (this.UnmapGranularityOption != null && vmfsConfigOption.UnmapGranularityOption != null && Enumerable.SequenceEqual(this.UnmapGranularityOption, vmfsConfigOption.UnmapGranularityOption))) && ((this.UnmapBandwidthFixedValue == null && vmfsConfigOption.UnmapBandwidthFixedValue == null) || (this.UnmapBandwidthFixedValue != null && this.UnmapBandwidthFixedValue.Equals(vmfsConfigOption.UnmapBandwidthFixedValue))) && ((this.UnmapBandwidthDynamicMin == null && vmfsConfigOption.UnmapBandwidthDynamicMin == null) || (this.UnmapBandwidthDynamicMin != null && this.UnmapBandwidthDynamicMin.Equals(vmfsConfigOption.UnmapBandwidthDynamicMin))) && ((this.UnmapBandwidthDynamicMax == null && vmfsConfigOption.UnmapBandwidthDynamicMax == null) || (this.UnmapBandwidthDynamicMax != null && this.UnmapBandwidthDynamicMax.Equals(vmfsConfigOption.UnmapBandwidthDynamicMax))) && ((this.UnmapBandwidthIncrement == null && vmfsConfigOption.UnmapBandwidthIncrement == null) || (this.UnmapBandwidthIncrement != null && this.UnmapBandwidthIncrement.Equals(vmfsConfigOption.UnmapBandwidthIncrement))));
        }

        public override bool Equals(object vmfsConfigOption)
        {
            return Equals(vmfsConfigOption as VmfsConfigOption);
        }

        public override int GetHashCode()
        {
            return (BlockSizeOption + "_" + UnmapGranularityOption + "_" + UnmapBandwidthFixedValue + "_" + UnmapBandwidthDynamicMin + "_" + UnmapBandwidthDynamicMax + "_" + UnmapBandwidthIncrement).GetHashCode();
        }
    }

    public class VmfsDatastoreAllExtentOption : VmfsDatastoreSingleExtentOption, IEquatable<VmfsDatastoreAllExtentOption>
    {
        public bool Equals(VmfsDatastoreAllExtentOption vmfsDatastoreAllExtentOption)
        {
            return (vmfsDatastoreAllExtentOption != null && base.Equals(vmfsDatastoreAllExtentOption));
        }

        public override bool Equals(object vmfsDatastoreAllExtentOption)
        {
            return Equals(vmfsDatastoreAllExtentOption as VmfsDatastoreAllExtentOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmfsDatastoreBaseOption : DynamicData, IEquatable<VmfsDatastoreBaseOption>
    {
        public HostDiskPartitionLayout Layout { get; set; }

        public bool? PartitionFormatChange { get; set; }

        public bool Equals(VmfsDatastoreBaseOption vmfsDatastoreBaseOption)
        {
            return (vmfsDatastoreBaseOption != null && ((this.Layout == null && vmfsDatastoreBaseOption.Layout == null) || (this.Layout != null && this.Layout.Equals(vmfsDatastoreBaseOption.Layout))) && ((this.PartitionFormatChange == null && vmfsDatastoreBaseOption.PartitionFormatChange == null) || (this.PartitionFormatChange != null && this.PartitionFormatChange.Equals(vmfsDatastoreBaseOption.PartitionFormatChange))));
        }

        public override bool Equals(object vmfsDatastoreBaseOption)
        {
            return Equals(vmfsDatastoreBaseOption as VmfsDatastoreBaseOption);
        }

        public override int GetHashCode()
        {
            return (Layout + "_" + PartitionFormatChange).GetHashCode();
        }
    }

    public class VMFSDatastoreCreatedEvent : HostEvent, IEquatable<VMFSDatastoreCreatedEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public string DatastoreUrl { get; set; }

        public bool Equals(VMFSDatastoreCreatedEvent vMFSDatastoreCreatedEvent)
        {
            return (vMFSDatastoreCreatedEvent != null && ((this.Datastore == null && vMFSDatastoreCreatedEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vMFSDatastoreCreatedEvent.Datastore))) && this.DatastoreUrl == vMFSDatastoreCreatedEvent.DatastoreUrl);
        }

        public override bool Equals(object vMFSDatastoreCreatedEvent)
        {
            return Equals(vMFSDatastoreCreatedEvent as VMFSDatastoreCreatedEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + DatastoreUrl).GetHashCode();
        }
    }

    public class VmfsDatastoreCreateSpec : VmfsDatastoreSpec, IEquatable<VmfsDatastoreCreateSpec>
    {
        public HostDiskPartitionSpec Partition { get; set; }

        public HostVmfsSpec Vmfs { get; set; }

        public HostScsiDiskPartition[] Extent { get; set; }

        public bool Equals(VmfsDatastoreCreateSpec vmfsDatastoreCreateSpec)
        {
            return (vmfsDatastoreCreateSpec != null && ((this.Partition == null && vmfsDatastoreCreateSpec.Partition == null) || (this.Partition != null && this.Partition.Equals(vmfsDatastoreCreateSpec.Partition))) && ((this.Vmfs == null && vmfsDatastoreCreateSpec.Vmfs == null) || (this.Vmfs != null && this.Vmfs.Equals(vmfsDatastoreCreateSpec.Vmfs))) && ((this.Extent == null && vmfsDatastoreCreateSpec.Extent == null) || (this.Extent != null && vmfsDatastoreCreateSpec.Extent != null && Enumerable.SequenceEqual(this.Extent, vmfsDatastoreCreateSpec.Extent))));
        }

        public override bool Equals(object vmfsDatastoreCreateSpec)
        {
            return Equals(vmfsDatastoreCreateSpec as VmfsDatastoreCreateSpec);
        }

        public override int GetHashCode()
        {
            return (Partition + "_" + Vmfs + "_" + Extent).GetHashCode();
        }
    }

    public class VMFSDatastoreExpandedEvent : HostEvent, IEquatable<VMFSDatastoreExpandedEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(VMFSDatastoreExpandedEvent vMFSDatastoreExpandedEvent)
        {
            return (vMFSDatastoreExpandedEvent != null && ((this.Datastore == null && vMFSDatastoreExpandedEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vMFSDatastoreExpandedEvent.Datastore))));
        }

        public override bool Equals(object vMFSDatastoreExpandedEvent)
        {
            return Equals(vMFSDatastoreExpandedEvent as VMFSDatastoreExpandedEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VmfsDatastoreExpandSpec : VmfsDatastoreSpec, IEquatable<VmfsDatastoreExpandSpec>
    {
        public HostDiskPartitionSpec Partition { get; set; }

        public HostScsiDiskPartition Extent { get; set; }

        public bool Equals(VmfsDatastoreExpandSpec vmfsDatastoreExpandSpec)
        {
            return (vmfsDatastoreExpandSpec != null && ((this.Partition == null && vmfsDatastoreExpandSpec.Partition == null) || (this.Partition != null && this.Partition.Equals(vmfsDatastoreExpandSpec.Partition))) && ((this.Extent == null && vmfsDatastoreExpandSpec.Extent == null) || (this.Extent != null && this.Extent.Equals(vmfsDatastoreExpandSpec.Extent))));
        }

        public override bool Equals(object vmfsDatastoreExpandSpec)
        {
            return Equals(vmfsDatastoreExpandSpec as VmfsDatastoreExpandSpec);
        }

        public override int GetHashCode()
        {
            return (Partition + "_" + Extent).GetHashCode();
        }
    }

    public class VMFSDatastoreExtendedEvent : HostEvent, IEquatable<VMFSDatastoreExtendedEvent>
    {
        public DatastoreEventArgument Datastore { get; set; }

        public bool Equals(VMFSDatastoreExtendedEvent vMFSDatastoreExtendedEvent)
        {
            return (vMFSDatastoreExtendedEvent != null && ((this.Datastore == null && vMFSDatastoreExtendedEvent.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vMFSDatastoreExtendedEvent.Datastore))));
        }

        public override bool Equals(object vMFSDatastoreExtendedEvent)
        {
            return Equals(vMFSDatastoreExtendedEvent as VMFSDatastoreExtendedEvent);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VmfsDatastoreExtendSpec : VmfsDatastoreSpec, IEquatable<VmfsDatastoreExtendSpec>
    {
        public HostDiskPartitionSpec Partition { get; set; }

        public HostScsiDiskPartition[] Extent { get; set; }

        public bool Equals(VmfsDatastoreExtendSpec vmfsDatastoreExtendSpec)
        {
            return (vmfsDatastoreExtendSpec != null && ((this.Partition == null && vmfsDatastoreExtendSpec.Partition == null) || (this.Partition != null && this.Partition.Equals(vmfsDatastoreExtendSpec.Partition))) && ((this.Extent == null && vmfsDatastoreExtendSpec.Extent == null) || (this.Extent != null && vmfsDatastoreExtendSpec.Extent != null && Enumerable.SequenceEqual(this.Extent, vmfsDatastoreExtendSpec.Extent))));
        }

        public override bool Equals(object vmfsDatastoreExtendSpec)
        {
            return Equals(vmfsDatastoreExtendSpec as VmfsDatastoreExtendSpec);
        }

        public override int GetHashCode()
        {
            return (Partition + "_" + Extent).GetHashCode();
        }
    }

    public class VmfsDatastoreInfo : DatastoreInfo, IEquatable<VmfsDatastoreInfo>
    {
        public long MaxPhysicalRDMFileSize { get; set; }

        public long MaxVirtualRDMFileSize { get; set; }

        public HostVmfsVolume Vmfs { get; set; }

        public bool Equals(VmfsDatastoreInfo vmfsDatastoreInfo)
        {
            return (vmfsDatastoreInfo != null && this.MaxPhysicalRDMFileSize == vmfsDatastoreInfo.MaxPhysicalRDMFileSize && this.MaxVirtualRDMFileSize == vmfsDatastoreInfo.MaxVirtualRDMFileSize && ((this.Vmfs == null && vmfsDatastoreInfo.Vmfs == null) || (this.Vmfs != null && this.Vmfs.Equals(vmfsDatastoreInfo.Vmfs))));
        }

        public override bool Equals(object vmfsDatastoreInfo)
        {
            return Equals(vmfsDatastoreInfo as VmfsDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (MaxPhysicalRDMFileSize + "_" + MaxVirtualRDMFileSize + "_" + Vmfs).GetHashCode();
        }
    }

    public class VmfsDatastoreMultipleExtentOption : VmfsDatastoreBaseOption, IEquatable<VmfsDatastoreMultipleExtentOption>
    {
        public HostDiskPartitionBlockRange[] VmfsExtent { get; set; }

        public bool Equals(VmfsDatastoreMultipleExtentOption vmfsDatastoreMultipleExtentOption)
        {
            return (vmfsDatastoreMultipleExtentOption != null && ((this.VmfsExtent == null && vmfsDatastoreMultipleExtentOption.VmfsExtent == null) || (this.VmfsExtent != null && vmfsDatastoreMultipleExtentOption.VmfsExtent != null && Enumerable.SequenceEqual(this.VmfsExtent, vmfsDatastoreMultipleExtentOption.VmfsExtent))));
        }

        public override bool Equals(object vmfsDatastoreMultipleExtentOption)
        {
            return Equals(vmfsDatastoreMultipleExtentOption as VmfsDatastoreMultipleExtentOption);
        }

        public override int GetHashCode()
        {
            return (VmfsExtent).GetHashCode();
        }
    }

    public class VmfsDatastoreOption : DynamicData, IEquatable<VmfsDatastoreOption>
    {
        public VmfsDatastoreBaseOption Info { get; set; }

        public VmfsDatastoreSpec Spec { get; set; }

        public bool Equals(VmfsDatastoreOption vmfsDatastoreOption)
        {
            return (vmfsDatastoreOption != null && ((this.Info == null && vmfsDatastoreOption.Info == null) || (this.Info != null && this.Info.Equals(vmfsDatastoreOption.Info))) && ((this.Spec == null && vmfsDatastoreOption.Spec == null) || (this.Spec != null && this.Spec.Equals(vmfsDatastoreOption.Spec))));
        }

        public override bool Equals(object vmfsDatastoreOption)
        {
            return Equals(vmfsDatastoreOption as VmfsDatastoreOption);
        }

        public override int GetHashCode()
        {
            return (Info + "_" + Spec).GetHashCode();
        }
    }

    public class VmfsDatastoreSingleExtentOption : VmfsDatastoreBaseOption, IEquatable<VmfsDatastoreSingleExtentOption>
    {
        public HostDiskPartitionBlockRange VmfsExtent { get; set; }

        public bool Equals(VmfsDatastoreSingleExtentOption vmfsDatastoreSingleExtentOption)
        {
            return (vmfsDatastoreSingleExtentOption != null && ((this.VmfsExtent == null && vmfsDatastoreSingleExtentOption.VmfsExtent == null) || (this.VmfsExtent != null && this.VmfsExtent.Equals(vmfsDatastoreSingleExtentOption.VmfsExtent))));
        }

        public override bool Equals(object vmfsDatastoreSingleExtentOption)
        {
            return Equals(vmfsDatastoreSingleExtentOption as VmfsDatastoreSingleExtentOption);
        }

        public override int GetHashCode()
        {
            return (VmfsExtent).GetHashCode();
        }
    }

    public class VmfsDatastoreSpec : DynamicData, IEquatable<VmfsDatastoreSpec>
    {
        public string DiskUuid { get; set; }

        public bool Equals(VmfsDatastoreSpec vmfsDatastoreSpec)
        {
            return (vmfsDatastoreSpec != null && this.DiskUuid == vmfsDatastoreSpec.DiskUuid);
        }

        public override bool Equals(object vmfsDatastoreSpec)
        {
            return Equals(vmfsDatastoreSpec as VmfsDatastoreSpec);
        }

        public override int GetHashCode()
        {
            return (DiskUuid).GetHashCode();
        }
    }

    public class VmfsMountFault : HostConfigFault, IEquatable<VmfsMountFault>
    {
        public string Uuid { get; set; }

        public bool Equals(VmfsMountFault vmfsMountFault)
        {
            return (vmfsMountFault != null && this.Uuid == vmfsMountFault.Uuid);
        }

        public override bool Equals(object vmfsMountFault)
        {
            return Equals(vmfsMountFault as VmfsMountFault);
        }

        public override int GetHashCode()
        {
            return (Uuid).GetHashCode();
        }
    }

    public class VmfsUnmapBandwidthSpec : DynamicData, IEquatable<VmfsUnmapBandwidthSpec>
    {
        public string Policy { get; set; }

        public long FixedValue { get; set; }

        public long DynamicMin { get; set; }

        public long DynamicMax { get; set; }

        public bool Equals(VmfsUnmapBandwidthSpec vmfsUnmapBandwidthSpec)
        {
            return (vmfsUnmapBandwidthSpec != null && this.Policy == vmfsUnmapBandwidthSpec.Policy && this.FixedValue == vmfsUnmapBandwidthSpec.FixedValue && this.DynamicMin == vmfsUnmapBandwidthSpec.DynamicMin && this.DynamicMax == vmfsUnmapBandwidthSpec.DynamicMax);
        }

        public override bool Equals(object vmfsUnmapBandwidthSpec)
        {
            return Equals(vmfsUnmapBandwidthSpec as VmfsUnmapBandwidthSpec);
        }

        public override int GetHashCode()
        {
            return (Policy + "_" + FixedValue + "_" + DynamicMin + "_" + DynamicMax).GetHashCode();
        }
    }

    public class VmGuestOSCrashedEvent : VmEvent, IEquatable<VmGuestOSCrashedEvent>
    {
        public bool Equals(VmGuestOSCrashedEvent vmGuestOSCrashedEvent)
        {
            return (vmGuestOSCrashedEvent != null && base.Equals(vmGuestOSCrashedEvent));
        }

        public override bool Equals(object vmGuestOSCrashedEvent)
        {
            return Equals(vmGuestOSCrashedEvent as VmGuestOSCrashedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmGuestRebootEvent : VmEvent, IEquatable<VmGuestRebootEvent>
    {
        public bool Equals(VmGuestRebootEvent vmGuestRebootEvent)
        {
            return (vmGuestRebootEvent != null && base.Equals(vmGuestRebootEvent));
        }

        public override bool Equals(object vmGuestRebootEvent)
        {
            return Equals(vmGuestRebootEvent as VmGuestRebootEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmGuestShutdownEvent : VmEvent, IEquatable<VmGuestShutdownEvent>
    {
        public bool Equals(VmGuestShutdownEvent vmGuestShutdownEvent)
        {
            return (vmGuestShutdownEvent != null && base.Equals(vmGuestShutdownEvent));
        }

        public override bool Equals(object vmGuestShutdownEvent)
        {
            return Equals(vmGuestShutdownEvent as VmGuestShutdownEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmGuestStandbyEvent : VmEvent, IEquatable<VmGuestStandbyEvent>
    {
        public bool Equals(VmGuestStandbyEvent vmGuestStandbyEvent)
        {
            return (vmGuestStandbyEvent != null && base.Equals(vmGuestStandbyEvent));
        }

        public override bool Equals(object vmGuestStandbyEvent)
        {
            return Equals(vmGuestStandbyEvent as VmGuestStandbyEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmHealthMonitoringStateChangedEvent : ClusterEvent, IEquatable<VmHealthMonitoringStateChangedEvent>
    {
        public string State { get; set; }

        public string PrevState { get; set; }

        public bool Equals(VmHealthMonitoringStateChangedEvent vmHealthMonitoringStateChangedEvent)
        {
            return (vmHealthMonitoringStateChangedEvent != null && this.State == vmHealthMonitoringStateChangedEvent.State && this.PrevState == vmHealthMonitoringStateChangedEvent.PrevState);
        }

        public override bool Equals(object vmHealthMonitoringStateChangedEvent)
        {
            return Equals(vmHealthMonitoringStateChangedEvent as VmHealthMonitoringStateChangedEvent);
        }

        public override int GetHashCode()
        {
            return (State + "_" + PrevState).GetHashCode();
        }
    }

    public class VmHostAffinityRuleViolation : VmConfigFault, IEquatable<VmHostAffinityRuleViolation>
    {
        public string VmName { get; set; }

        public string HostName { get; set; }

        public bool Equals(VmHostAffinityRuleViolation vmHostAffinityRuleViolation)
        {
            return (vmHostAffinityRuleViolation != null && this.VmName == vmHostAffinityRuleViolation.VmName && this.HostName == vmHostAffinityRuleViolation.HostName);
        }

        public override bool Equals(object vmHostAffinityRuleViolation)
        {
            return Equals(vmHostAffinityRuleViolation as VmHostAffinityRuleViolation);
        }

        public override int GetHashCode()
        {
            return (VmName + "_" + HostName).GetHashCode();
        }
    }

    public class VMINotSupported : DeviceNotSupported, IEquatable<VMINotSupported>
    {
        public bool Equals(VMINotSupported vMINotSupported)
        {
            return (vMINotSupported != null && base.Equals(vMINotSupported));
        }

        public override bool Equals(object vMINotSupported)
        {
            return Equals(vMINotSupported as VMINotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmInstanceUuidAssignedEvent : VmEvent, IEquatable<VmInstanceUuidAssignedEvent>
    {
        public string InstanceUuid { get; set; }

        public bool Equals(VmInstanceUuidAssignedEvent vmInstanceUuidAssignedEvent)
        {
            return (vmInstanceUuidAssignedEvent != null && this.InstanceUuid == vmInstanceUuidAssignedEvent.InstanceUuid);
        }

        public override bool Equals(object vmInstanceUuidAssignedEvent)
        {
            return Equals(vmInstanceUuidAssignedEvent as VmInstanceUuidAssignedEvent);
        }

        public override int GetHashCode()
        {
            return (InstanceUuid).GetHashCode();
        }
    }

    public class VmInstanceUuidChangedEvent : VmEvent, IEquatable<VmInstanceUuidChangedEvent>
    {
        public string OldInstanceUuid { get; set; }

        public string NewInstanceUuid { get; set; }

        public bool Equals(VmInstanceUuidChangedEvent vmInstanceUuidChangedEvent)
        {
            return (vmInstanceUuidChangedEvent != null && this.OldInstanceUuid == vmInstanceUuidChangedEvent.OldInstanceUuid && this.NewInstanceUuid == vmInstanceUuidChangedEvent.NewInstanceUuid);
        }

        public override bool Equals(object vmInstanceUuidChangedEvent)
        {
            return Equals(vmInstanceUuidChangedEvent as VmInstanceUuidChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldInstanceUuid + "_" + NewInstanceUuid).GetHashCode();
        }
    }

    public class VmInstanceUuidConflictEvent : VmEvent, IEquatable<VmInstanceUuidConflictEvent>
    {
        public VmEventArgument ConflictedVm { get; set; }

        public string InstanceUuid { get; set; }

        public bool Equals(VmInstanceUuidConflictEvent vmInstanceUuidConflictEvent)
        {
            return (vmInstanceUuidConflictEvent != null && ((this.ConflictedVm == null && vmInstanceUuidConflictEvent.ConflictedVm == null) || (this.ConflictedVm != null && this.ConflictedVm.Equals(vmInstanceUuidConflictEvent.ConflictedVm))) && this.InstanceUuid == vmInstanceUuidConflictEvent.InstanceUuid);
        }

        public override bool Equals(object vmInstanceUuidConflictEvent)
        {
            return Equals(vmInstanceUuidConflictEvent as VmInstanceUuidConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVm + "_" + InstanceUuid).GetHashCode();
        }
    }

    public class VmLimitLicense : NotEnoughLicenses, IEquatable<VmLimitLicense>
    {
        public int Limit { get; set; }

        public bool Equals(VmLimitLicense vmLimitLicense)
        {
            return (vmLimitLicense != null && this.Limit == vmLimitLicense.Limit);
        }

        public override bool Equals(object vmLimitLicense)
        {
            return Equals(vmLimitLicense as VmLimitLicense);
        }

        public override int GetHashCode()
        {
            return (Limit).GetHashCode();
        }
    }

    public class VmLogFileInfo : FileInfo, IEquatable<VmLogFileInfo>
    {
        public bool Equals(VmLogFileInfo vmLogFileInfo)
        {
            return (vmLogFileInfo != null && base.Equals(vmLogFileInfo));
        }

        public override bool Equals(object vmLogFileInfo)
        {
            return Equals(vmLogFileInfo as VmLogFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmLogFileQuery : FileQuery, IEquatable<VmLogFileQuery>
    {
        public bool Equals(VmLogFileQuery vmLogFileQuery)
        {
            return (vmLogFileQuery != null && base.Equals(vmLogFileQuery));
        }

        public override bool Equals(object vmLogFileQuery)
        {
            return Equals(vmLogFileQuery as VmLogFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmMacAssignedEvent : VmEvent, IEquatable<VmMacAssignedEvent>
    {
        public string Adapter { get; set; }

        public string Mac { get; set; }

        public bool Equals(VmMacAssignedEvent vmMacAssignedEvent)
        {
            return (vmMacAssignedEvent != null && this.Adapter == vmMacAssignedEvent.Adapter && this.Mac == vmMacAssignedEvent.Mac);
        }

        public override bool Equals(object vmMacAssignedEvent)
        {
            return Equals(vmMacAssignedEvent as VmMacAssignedEvent);
        }

        public override int GetHashCode()
        {
            return (Adapter + "_" + Mac).GetHashCode();
        }
    }

    public class VmMacChangedEvent : VmEvent, IEquatable<VmMacChangedEvent>
    {
        public string Adapter { get; set; }

        public string OldMac { get; set; }

        public string NewMac { get; set; }

        public bool Equals(VmMacChangedEvent vmMacChangedEvent)
        {
            return (vmMacChangedEvent != null && this.Adapter == vmMacChangedEvent.Adapter && this.OldMac == vmMacChangedEvent.OldMac && this.NewMac == vmMacChangedEvent.NewMac);
        }

        public override bool Equals(object vmMacChangedEvent)
        {
            return Equals(vmMacChangedEvent as VmMacChangedEvent);
        }

        public override int GetHashCode()
        {
            return (Adapter + "_" + OldMac + "_" + NewMac).GetHashCode();
        }
    }

    public class VmMacConflictEvent : VmEvent, IEquatable<VmMacConflictEvent>
    {
        public VmEventArgument ConflictedVm { get; set; }

        public string Mac { get; set; }

        public bool Equals(VmMacConflictEvent vmMacConflictEvent)
        {
            return (vmMacConflictEvent != null && ((this.ConflictedVm == null && vmMacConflictEvent.ConflictedVm == null) || (this.ConflictedVm != null && this.ConflictedVm.Equals(vmMacConflictEvent.ConflictedVm))) && this.Mac == vmMacConflictEvent.Mac);
        }

        public override bool Equals(object vmMacConflictEvent)
        {
            return Equals(vmMacConflictEvent as VmMacConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVm + "_" + Mac).GetHashCode();
        }
    }

    public class VmMaxFTRestartCountReached : VmEvent, IEquatable<VmMaxFTRestartCountReached>
    {
        public bool Equals(VmMaxFTRestartCountReached vmMaxFTRestartCountReached)
        {
            return (vmMaxFTRestartCountReached != null && base.Equals(vmMaxFTRestartCountReached));
        }

        public override bool Equals(object vmMaxFTRestartCountReached)
        {
            return Equals(vmMaxFTRestartCountReached as VmMaxFTRestartCountReached);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmMaxRestartCountReached : VmEvent, IEquatable<VmMaxRestartCountReached>
    {
        public bool Equals(VmMaxRestartCountReached vmMaxRestartCountReached)
        {
            return (vmMaxRestartCountReached != null && base.Equals(vmMaxRestartCountReached));
        }

        public override bool Equals(object vmMaxRestartCountReached)
        {
            return Equals(vmMaxRestartCountReached as VmMaxRestartCountReached);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmMessageErrorEvent : VmEvent, IEquatable<VmMessageErrorEvent>
    {
        public string Message { get; set; }

        public VirtualMachineMessage[] MessageInfo { get; set; }

        public bool Equals(VmMessageErrorEvent vmMessageErrorEvent)
        {
            return (vmMessageErrorEvent != null && this.Message == vmMessageErrorEvent.Message && ((this.MessageInfo == null && vmMessageErrorEvent.MessageInfo == null) || (this.MessageInfo != null && vmMessageErrorEvent.MessageInfo != null && Enumerable.SequenceEqual(this.MessageInfo, vmMessageErrorEvent.MessageInfo))));
        }

        public override bool Equals(object vmMessageErrorEvent)
        {
            return Equals(vmMessageErrorEvent as VmMessageErrorEvent);
        }

        public override int GetHashCode()
        {
            return (Message + "_" + MessageInfo).GetHashCode();
        }
    }

    public class VmMessageEvent : VmEvent, IEquatable<VmMessageEvent>
    {
        public string Message { get; set; }

        public VirtualMachineMessage[] MessageInfo { get; set; }

        public bool Equals(VmMessageEvent vmMessageEvent)
        {
            return (vmMessageEvent != null && this.Message == vmMessageEvent.Message && ((this.MessageInfo == null && vmMessageEvent.MessageInfo == null) || (this.MessageInfo != null && vmMessageEvent.MessageInfo != null && Enumerable.SequenceEqual(this.MessageInfo, vmMessageEvent.MessageInfo))));
        }

        public override bool Equals(object vmMessageEvent)
        {
            return Equals(vmMessageEvent as VmMessageEvent);
        }

        public override int GetHashCode()
        {
            return (Message + "_" + MessageInfo).GetHashCode();
        }
    }

    public class VmMessageWarningEvent : VmEvent, IEquatable<VmMessageWarningEvent>
    {
        public string Message { get; set; }

        public VirtualMachineMessage[] MessageInfo { get; set; }

        public bool Equals(VmMessageWarningEvent vmMessageWarningEvent)
        {
            return (vmMessageWarningEvent != null && this.Message == vmMessageWarningEvent.Message && ((this.MessageInfo == null && vmMessageWarningEvent.MessageInfo == null) || (this.MessageInfo != null && vmMessageWarningEvent.MessageInfo != null && Enumerable.SequenceEqual(this.MessageInfo, vmMessageWarningEvent.MessageInfo))));
        }

        public override bool Equals(object vmMessageWarningEvent)
        {
            return Equals(vmMessageWarningEvent as VmMessageWarningEvent);
        }

        public override int GetHashCode()
        {
            return (Message + "_" + MessageInfo).GetHashCode();
        }
    }

    public class VmMetadataManagerFault : VimFault, IEquatable<VmMetadataManagerFault>
    {
        public bool Equals(VmMetadataManagerFault vmMetadataManagerFault)
        {
            return (vmMetadataManagerFault != null && base.Equals(vmMetadataManagerFault));
        }

        public override bool Equals(object vmMetadataManagerFault)
        {
            return Equals(vmMetadataManagerFault as VmMetadataManagerFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmMigratedEvent : VmEvent, IEquatable<VmMigratedEvent>
    {
        public HostEventArgument SourceHost { get; set; }

        public DatacenterEventArgument SourceDatacenter { get; set; }

        public DatastoreEventArgument SourceDatastore { get; set; }

        public bool Equals(VmMigratedEvent vmMigratedEvent)
        {
            return (vmMigratedEvent != null && ((this.SourceHost == null && vmMigratedEvent.SourceHost == null) || (this.SourceHost != null && this.SourceHost.Equals(vmMigratedEvent.SourceHost))) && ((this.SourceDatacenter == null && vmMigratedEvent.SourceDatacenter == null) || (this.SourceDatacenter != null && this.SourceDatacenter.Equals(vmMigratedEvent.SourceDatacenter))) && ((this.SourceDatastore == null && vmMigratedEvent.SourceDatastore == null) || (this.SourceDatastore != null && this.SourceDatastore.Equals(vmMigratedEvent.SourceDatastore))));
        }

        public override bool Equals(object vmMigratedEvent)
        {
            return Equals(vmMigratedEvent as VmMigratedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceHost + "_" + SourceDatacenter + "_" + SourceDatastore).GetHashCode();
        }
    }

    public class VmMonitorIncompatibleForFaultTolerance : VimFault, IEquatable<VmMonitorIncompatibleForFaultTolerance>
    {
        public bool Equals(VmMonitorIncompatibleForFaultTolerance vmMonitorIncompatibleForFaultTolerance)
        {
            return (vmMonitorIncompatibleForFaultTolerance != null && base.Equals(vmMonitorIncompatibleForFaultTolerance));
        }

        public override bool Equals(object vmMonitorIncompatibleForFaultTolerance)
        {
            return Equals(vmMonitorIncompatibleForFaultTolerance as VmMonitorIncompatibleForFaultTolerance);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmNoCompatibleHostForSecondaryEvent : VmEvent, IEquatable<VmNoCompatibleHostForSecondaryEvent>
    {
        public bool Equals(VmNoCompatibleHostForSecondaryEvent vmNoCompatibleHostForSecondaryEvent)
        {
            return (vmNoCompatibleHostForSecondaryEvent != null && base.Equals(vmNoCompatibleHostForSecondaryEvent));
        }

        public override bool Equals(object vmNoCompatibleHostForSecondaryEvent)
        {
            return Equals(vmNoCompatibleHostForSecondaryEvent as VmNoCompatibleHostForSecondaryEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmNoNetworkAccessEvent : VmEvent, IEquatable<VmNoNetworkAccessEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public bool Equals(VmNoNetworkAccessEvent vmNoNetworkAccessEvent)
        {
            return (vmNoNetworkAccessEvent != null && ((this.DestHost == null && vmNoNetworkAccessEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmNoNetworkAccessEvent.DestHost))));
        }

        public override bool Equals(object vmNoNetworkAccessEvent)
        {
            return Equals(vmNoNetworkAccessEvent as VmNoNetworkAccessEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost).GetHashCode();
        }
    }

    public class VmNvramFileInfo : FileInfo, IEquatable<VmNvramFileInfo>
    {
        public bool Equals(VmNvramFileInfo vmNvramFileInfo)
        {
            return (vmNvramFileInfo != null && base.Equals(vmNvramFileInfo));
        }

        public override bool Equals(object vmNvramFileInfo)
        {
            return Equals(vmNvramFileInfo as VmNvramFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmNvramFileQuery : FileQuery, IEquatable<VmNvramFileQuery>
    {
        public bool Equals(VmNvramFileQuery vmNvramFileQuery)
        {
            return (vmNvramFileQuery != null && base.Equals(vmNvramFileQuery));
        }

        public override bool Equals(object vmNvramFileQuery)
        {
            return Equals(vmNvramFileQuery as VmNvramFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMOnConflictDVPort : CannotAccessNetwork, IEquatable<VMOnConflictDVPort>
    {
        public new VMOnConflictDVPort_LinkedView LinkedView { get; set; }

        public bool Equals(VMOnConflictDVPort vMOnConflictDVPort)
        {
            return (vMOnConflictDVPort != null && ((this.LinkedView == null && vMOnConflictDVPort.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMOnConflictDVPort.LinkedView))));
        }

        public override bool Equals(object vMOnConflictDVPort)
        {
            return Equals(vMOnConflictDVPort as VMOnConflictDVPort);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMOnConflictDVPort_LinkedView : CannotAccessNetwork_LinkedView, IEquatable<VMOnConflictDVPort_LinkedView>
    {
        public bool Equals(VMOnConflictDVPort_LinkedView vMOnConflictDVPort_LinkedView)
        {
            return (vMOnConflictDVPort_LinkedView != null && base.Equals(vMOnConflictDVPort_LinkedView));
        }

        public override bool Equals(object vMOnConflictDVPort_LinkedView)
        {
            return Equals(vMOnConflictDVPort_LinkedView as VMOnConflictDVPort_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMOnVirtualIntranet : CannotAccessNetwork, IEquatable<VMOnVirtualIntranet>
    {
        public new VMOnVirtualIntranet_LinkedView LinkedView { get; set; }

        public bool Equals(VMOnVirtualIntranet vMOnVirtualIntranet)
        {
            return (vMOnVirtualIntranet != null && ((this.LinkedView == null && vMOnVirtualIntranet.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMOnVirtualIntranet.LinkedView))));
        }

        public override bool Equals(object vMOnVirtualIntranet)
        {
            return Equals(vMOnVirtualIntranet as VMOnVirtualIntranet);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMOnVirtualIntranet_LinkedView : CannotAccessNetwork_LinkedView, IEquatable<VMOnVirtualIntranet_LinkedView>
    {
        public bool Equals(VMOnVirtualIntranet_LinkedView vMOnVirtualIntranet_LinkedView)
        {
            return (vMOnVirtualIntranet_LinkedView != null && base.Equals(vMOnVirtualIntranet_LinkedView));
        }

        public override bool Equals(object vMOnVirtualIntranet_LinkedView)
        {
            return Equals(vMOnVirtualIntranet_LinkedView as VMOnVirtualIntranet_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmOrphanedEvent : VmEvent, IEquatable<VmOrphanedEvent>
    {
        public bool Equals(VmOrphanedEvent vmOrphanedEvent)
        {
            return (vmOrphanedEvent != null && base.Equals(vmOrphanedEvent));
        }

        public override bool Equals(object vmOrphanedEvent)
        {
            return Equals(vmOrphanedEvent as VmOrphanedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionAcrossNetworkNotSupported : MigrationFeatureNotSupported, IEquatable<VMotionAcrossNetworkNotSupported>
    {
        public new VMotionAcrossNetworkNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionAcrossNetworkNotSupported vMotionAcrossNetworkNotSupported)
        {
            return (vMotionAcrossNetworkNotSupported != null && ((this.LinkedView == null && vMotionAcrossNetworkNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionAcrossNetworkNotSupported.LinkedView))));
        }

        public override bool Equals(object vMotionAcrossNetworkNotSupported)
        {
            return Equals(vMotionAcrossNetworkNotSupported as VMotionAcrossNetworkNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMotionAcrossNetworkNotSupported_LinkedView : MigrationFeatureNotSupported_LinkedView, IEquatable<VMotionAcrossNetworkNotSupported_LinkedView>
    {
        public bool Equals(VMotionAcrossNetworkNotSupported_LinkedView vMotionAcrossNetworkNotSupported_LinkedView)
        {
            return (vMotionAcrossNetworkNotSupported_LinkedView != null && base.Equals(vMotionAcrossNetworkNotSupported_LinkedView));
        }

        public override bool Equals(object vMotionAcrossNetworkNotSupported_LinkedView)
        {
            return Equals(vMotionAcrossNetworkNotSupported_LinkedView as VMotionAcrossNetworkNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionInterfaceIssue : MigrationFault, IEquatable<VMotionInterfaceIssue>
    {
        public bool AtSourceHost { get; set; }

        public string FailedHost { get; set; }

        public ManagedObjectReference FailedHostEntity { get; set; }

        public VMotionInterfaceIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionInterfaceIssue vMotionInterfaceIssue)
        {
            return (vMotionInterfaceIssue != null && this.AtSourceHost == vMotionInterfaceIssue.AtSourceHost && this.FailedHost == vMotionInterfaceIssue.FailedHost && ((this.FailedHostEntity == null && vMotionInterfaceIssue.FailedHostEntity == null) || (this.FailedHostEntity != null && this.FailedHostEntity.Equals(vMotionInterfaceIssue.FailedHostEntity))) && ((this.LinkedView == null && vMotionInterfaceIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionInterfaceIssue.LinkedView))));
        }

        public override bool Equals(object vMotionInterfaceIssue)
        {
            return Equals(vMotionInterfaceIssue as VMotionInterfaceIssue);
        }

        public override int GetHashCode()
        {
            return (AtSourceHost + "_" + FailedHost + "_" + FailedHostEntity + "_" + LinkedView).GetHashCode();
        }
    }

    public class VMotionInterfaceIssue_LinkedView : IEquatable<VMotionInterfaceIssue_LinkedView>
    {
        public HostSystem FailedHostEntity { get; set; }

        public bool Equals(VMotionInterfaceIssue_LinkedView vMotionInterfaceIssue_LinkedView)
        {
            return (vMotionInterfaceIssue_LinkedView != null && ((this.FailedHostEntity == null && vMotionInterfaceIssue_LinkedView.FailedHostEntity == null) || (this.FailedHostEntity != null && this.FailedHostEntity.Equals(vMotionInterfaceIssue_LinkedView.FailedHostEntity))));
        }

        public override bool Equals(object vMotionInterfaceIssue_LinkedView)
        {
            return Equals(vMotionInterfaceIssue_LinkedView as VMotionInterfaceIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (FailedHostEntity).GetHashCode();
        }
    }

    public class VmotionInterfaceNotEnabled : HostPowerOpFailed, IEquatable<VmotionInterfaceNotEnabled>
    {
        public bool Equals(VmotionInterfaceNotEnabled vmotionInterfaceNotEnabled)
        {
            return (vmotionInterfaceNotEnabled != null && base.Equals(vmotionInterfaceNotEnabled));
        }

        public override bool Equals(object vmotionInterfaceNotEnabled)
        {
            return Equals(vmotionInterfaceNotEnabled as VmotionInterfaceNotEnabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionLicenseExpiredEvent : LicenseEvent, IEquatable<VMotionLicenseExpiredEvent>
    {
        public bool Equals(VMotionLicenseExpiredEvent vMotionLicenseExpiredEvent)
        {
            return (vMotionLicenseExpiredEvent != null && base.Equals(vMotionLicenseExpiredEvent));
        }

        public override bool Equals(object vMotionLicenseExpiredEvent)
        {
            return Equals(vMotionLicenseExpiredEvent as VMotionLicenseExpiredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionLinkCapacityLow : VMotionInterfaceIssue, IEquatable<VMotionLinkCapacityLow>
    {
        public string Network { get; set; }

        public new VMotionLinkCapacityLow_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionLinkCapacityLow vMotionLinkCapacityLow)
        {
            return (vMotionLinkCapacityLow != null && this.Network == vMotionLinkCapacityLow.Network && ((this.LinkedView == null && vMotionLinkCapacityLow.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionLinkCapacityLow.LinkedView))));
        }

        public override bool Equals(object vMotionLinkCapacityLow)
        {
            return Equals(vMotionLinkCapacityLow as VMotionLinkCapacityLow);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class VMotionLinkCapacityLow_LinkedView : VMotionInterfaceIssue_LinkedView, IEquatable<VMotionLinkCapacityLow_LinkedView>
    {
        public bool Equals(VMotionLinkCapacityLow_LinkedView vMotionLinkCapacityLow_LinkedView)
        {
            return (vMotionLinkCapacityLow_LinkedView != null && base.Equals(vMotionLinkCapacityLow_LinkedView));
        }

        public override bool Equals(object vMotionLinkCapacityLow_LinkedView)
        {
            return Equals(vMotionLinkCapacityLow_LinkedView as VMotionLinkCapacityLow_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionLinkDown : VMotionInterfaceIssue, IEquatable<VMotionLinkDown>
    {
        public string Network { get; set; }

        public new VMotionLinkDown_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionLinkDown vMotionLinkDown)
        {
            return (vMotionLinkDown != null && this.Network == vMotionLinkDown.Network && ((this.LinkedView == null && vMotionLinkDown.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionLinkDown.LinkedView))));
        }

        public override bool Equals(object vMotionLinkDown)
        {
            return Equals(vMotionLinkDown as VMotionLinkDown);
        }

        public override int GetHashCode()
        {
            return (Network + "_" + LinkedView).GetHashCode();
        }
    }

    public class VMotionLinkDown_LinkedView : VMotionInterfaceIssue_LinkedView, IEquatable<VMotionLinkDown_LinkedView>
    {
        public bool Equals(VMotionLinkDown_LinkedView vMotionLinkDown_LinkedView)
        {
            return (vMotionLinkDown_LinkedView != null && base.Equals(vMotionLinkDown_LinkedView));
        }

        public override bool Equals(object vMotionLinkDown_LinkedView)
        {
            return Equals(vMotionLinkDown_LinkedView as VMotionLinkDown_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionNotConfigured : VMotionInterfaceIssue, IEquatable<VMotionNotConfigured>
    {
        public new VMotionNotConfigured_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionNotConfigured vMotionNotConfigured)
        {
            return (vMotionNotConfigured != null && ((this.LinkedView == null && vMotionNotConfigured.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionNotConfigured.LinkedView))));
        }

        public override bool Equals(object vMotionNotConfigured)
        {
            return Equals(vMotionNotConfigured as VMotionNotConfigured);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMotionNotConfigured_LinkedView : VMotionInterfaceIssue_LinkedView, IEquatable<VMotionNotConfigured_LinkedView>
    {
        public bool Equals(VMotionNotConfigured_LinkedView vMotionNotConfigured_LinkedView)
        {
            return (vMotionNotConfigured_LinkedView != null && base.Equals(vMotionNotConfigured_LinkedView));
        }

        public override bool Equals(object vMotionNotConfigured_LinkedView)
        {
            return Equals(vMotionNotConfigured_LinkedView as VMotionNotConfigured_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionNotLicensed : VMotionInterfaceIssue, IEquatable<VMotionNotLicensed>
    {
        public new VMotionNotLicensed_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionNotLicensed vMotionNotLicensed)
        {
            return (vMotionNotLicensed != null && ((this.LinkedView == null && vMotionNotLicensed.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionNotLicensed.LinkedView))));
        }

        public override bool Equals(object vMotionNotLicensed)
        {
            return Equals(vMotionNotLicensed as VMotionNotLicensed);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMotionNotLicensed_LinkedView : VMotionInterfaceIssue_LinkedView, IEquatable<VMotionNotLicensed_LinkedView>
    {
        public bool Equals(VMotionNotLicensed_LinkedView vMotionNotLicensed_LinkedView)
        {
            return (vMotionNotLicensed_LinkedView != null && base.Equals(vMotionNotLicensed_LinkedView));
        }

        public override bool Equals(object vMotionNotLicensed_LinkedView)
        {
            return Equals(vMotionNotLicensed_LinkedView as VMotionNotLicensed_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionNotSupported : VMotionInterfaceIssue, IEquatable<VMotionNotSupported>
    {
        public new VMotionNotSupported_LinkedView LinkedView { get; set; }

        public bool Equals(VMotionNotSupported vMotionNotSupported)
        {
            return (vMotionNotSupported != null && ((this.LinkedView == null && vMotionNotSupported.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMotionNotSupported.LinkedView))));
        }

        public override bool Equals(object vMotionNotSupported)
        {
            return Equals(vMotionNotSupported as VMotionNotSupported);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VMotionNotSupported_LinkedView : VMotionInterfaceIssue_LinkedView, IEquatable<VMotionNotSupported_LinkedView>
    {
        public bool Equals(VMotionNotSupported_LinkedView vMotionNotSupported_LinkedView)
        {
            return (vMotionNotSupported_LinkedView != null && base.Equals(vMotionNotSupported_LinkedView));
        }

        public override bool Equals(object vMotionNotSupported_LinkedView)
        {
            return Equals(vMotionNotSupported_LinkedView as VMotionNotSupported_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMotionProtocolIncompatible : MigrationFault, IEquatable<VMotionProtocolIncompatible>
    {
        public bool Equals(VMotionProtocolIncompatible vMotionProtocolIncompatible)
        {
            return (vMotionProtocolIncompatible != null && base.Equals(vMotionProtocolIncompatible));
        }

        public override bool Equals(object vMotionProtocolIncompatible)
        {
            return Equals(vMotionProtocolIncompatible as VMotionProtocolIncompatible);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmPodConfigForPlacement : DynamicData, IEquatable<VmPodConfigForPlacement>
    {
        public ManagedObjectReference StoragePod { get; set; }

        public PodDiskLocator[] Disk { get; set; }

        public StorageDrsVmConfigInfo VmConfig { get; set; }

        public ClusterRuleInfo[] InterVmRule { get; set; }

        public VmPodConfigForPlacement_LinkedView LinkedView { get; set; }

        public bool Equals(VmPodConfigForPlacement vmPodConfigForPlacement)
        {
            return (vmPodConfigForPlacement != null && ((this.StoragePod == null && vmPodConfigForPlacement.StoragePod == null) || (this.StoragePod != null && this.StoragePod.Equals(vmPodConfigForPlacement.StoragePod))) && ((this.Disk == null && vmPodConfigForPlacement.Disk == null) || (this.Disk != null && vmPodConfigForPlacement.Disk != null && Enumerable.SequenceEqual(this.Disk, vmPodConfigForPlacement.Disk))) && ((this.VmConfig == null && vmPodConfigForPlacement.VmConfig == null) || (this.VmConfig != null && this.VmConfig.Equals(vmPodConfigForPlacement.VmConfig))) && ((this.InterVmRule == null && vmPodConfigForPlacement.InterVmRule == null) || (this.InterVmRule != null && vmPodConfigForPlacement.InterVmRule != null && Enumerable.SequenceEqual(this.InterVmRule, vmPodConfigForPlacement.InterVmRule))) && ((this.LinkedView == null && vmPodConfigForPlacement.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmPodConfigForPlacement.LinkedView))));
        }

        public override bool Equals(object vmPodConfigForPlacement)
        {
            return Equals(vmPodConfigForPlacement as VmPodConfigForPlacement);
        }

        public override int GetHashCode()
        {
            return (StoragePod + "_" + Disk + "_" + VmConfig + "_" + InterVmRule + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmPodConfigForPlacement_LinkedView : IEquatable<VmPodConfigForPlacement_LinkedView>
    {
        public StoragePod StoragePod { get; set; }

        public bool Equals(VmPodConfigForPlacement_LinkedView vmPodConfigForPlacement_LinkedView)
        {
            return (vmPodConfigForPlacement_LinkedView != null && ((this.StoragePod == null && vmPodConfigForPlacement_LinkedView.StoragePod == null) || (this.StoragePod != null && this.StoragePod.Equals(vmPodConfigForPlacement_LinkedView.StoragePod))));
        }

        public override bool Equals(object vmPodConfigForPlacement_LinkedView)
        {
            return Equals(vmPodConfigForPlacement_LinkedView as VmPodConfigForPlacement_LinkedView);
        }

        public override int GetHashCode()
        {
            return (StoragePod).GetHashCode();
        }
    }

    public class VmPortGroupProfile : PortGroupProfile, IEquatable<VmPortGroupProfile>
    {
        public bool Equals(VmPortGroupProfile vmPortGroupProfile)
        {
            return (vmPortGroupProfile != null && base.Equals(vmPortGroupProfile));
        }

        public override bool Equals(object vmPortGroupProfile)
        {
            return Equals(vmPortGroupProfile as VmPortGroupProfile);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmPoweredOffEvent : VmEvent, IEquatable<VmPoweredOffEvent>
    {
        public bool Equals(VmPoweredOffEvent vmPoweredOffEvent)
        {
            return (vmPoweredOffEvent != null && base.Equals(vmPoweredOffEvent));
        }

        public override bool Equals(object vmPoweredOffEvent)
        {
            return Equals(vmPoweredOffEvent as VmPoweredOffEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmPoweredOnEvent : VmEvent, IEquatable<VmPoweredOnEvent>
    {
        public bool Equals(VmPoweredOnEvent vmPoweredOnEvent)
        {
            return (vmPoweredOnEvent != null && base.Equals(vmPoweredOnEvent));
        }

        public override bool Equals(object vmPoweredOnEvent)
        {
            return Equals(vmPoweredOnEvent as VmPoweredOnEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmPoweringOnWithCustomizedDVPortEvent : VmEvent, IEquatable<VmPoweringOnWithCustomizedDVPortEvent>
    {
        public VnicPortArgument[] Vnic { get; set; }

        public bool Equals(VmPoweringOnWithCustomizedDVPortEvent vmPoweringOnWithCustomizedDVPortEvent)
        {
            return (vmPoweringOnWithCustomizedDVPortEvent != null && ((this.Vnic == null && vmPoweringOnWithCustomizedDVPortEvent.Vnic == null) || (this.Vnic != null && vmPoweringOnWithCustomizedDVPortEvent.Vnic != null && Enumerable.SequenceEqual(this.Vnic, vmPoweringOnWithCustomizedDVPortEvent.Vnic))));
        }

        public override bool Equals(object vmPoweringOnWithCustomizedDVPortEvent)
        {
            return Equals(vmPoweringOnWithCustomizedDVPortEvent as VmPoweringOnWithCustomizedDVPortEvent);
        }

        public override int GetHashCode()
        {
            return (Vnic).GetHashCode();
        }
    }

    public class VmPowerOffOnIsolationEvent : VmPoweredOffEvent, IEquatable<VmPowerOffOnIsolationEvent>
    {
        public HostEventArgument IsolatedHost { get; set; }

        public bool Equals(VmPowerOffOnIsolationEvent vmPowerOffOnIsolationEvent)
        {
            return (vmPowerOffOnIsolationEvent != null && ((this.IsolatedHost == null && vmPowerOffOnIsolationEvent.IsolatedHost == null) || (this.IsolatedHost != null && this.IsolatedHost.Equals(vmPowerOffOnIsolationEvent.IsolatedHost))));
        }

        public override bool Equals(object vmPowerOffOnIsolationEvent)
        {
            return Equals(vmPowerOffOnIsolationEvent as VmPowerOffOnIsolationEvent);
        }

        public override int GetHashCode()
        {
            return (IsolatedHost).GetHashCode();
        }
    }

    public class VmPowerOnDisabled : InvalidState, IEquatable<VmPowerOnDisabled>
    {
        public bool Equals(VmPowerOnDisabled vmPowerOnDisabled)
        {
            return (vmPowerOnDisabled != null && base.Equals(vmPowerOnDisabled));
        }

        public override bool Equals(object vmPowerOnDisabled)
        {
            return Equals(vmPowerOnDisabled as VmPowerOnDisabled);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmPrimaryFailoverEvent : VmEvent, IEquatable<VmPrimaryFailoverEvent>
    {
        public string Reason { get; set; }

        public bool Equals(VmPrimaryFailoverEvent vmPrimaryFailoverEvent)
        {
            return (vmPrimaryFailoverEvent != null && this.Reason == vmPrimaryFailoverEvent.Reason);
        }

        public override bool Equals(object vmPrimaryFailoverEvent)
        {
            return Equals(vmPrimaryFailoverEvent as VmPrimaryFailoverEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmReconfiguredEvent : VmEvent, IEquatable<VmReconfiguredEvent>
    {
        public VirtualMachineConfigSpec ConfigSpec { get; set; }

        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(VmReconfiguredEvent vmReconfiguredEvent)
        {
            return (vmReconfiguredEvent != null && ((this.ConfigSpec == null && vmReconfiguredEvent.ConfigSpec == null) || (this.ConfigSpec != null && this.ConfigSpec.Equals(vmReconfiguredEvent.ConfigSpec))) && ((this.ConfigChanges == null && vmReconfiguredEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(vmReconfiguredEvent.ConfigChanges))));
        }

        public override bool Equals(object vmReconfiguredEvent)
        {
            return Equals(vmReconfiguredEvent as VmReconfiguredEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigSpec + "_" + ConfigChanges).GetHashCode();
        }
    }

    public class VmRegisteredEvent : VmEvent, IEquatable<VmRegisteredEvent>
    {
        public bool Equals(VmRegisteredEvent vmRegisteredEvent)
        {
            return (vmRegisteredEvent != null && base.Equals(vmRegisteredEvent));
        }

        public override bool Equals(object vmRegisteredEvent)
        {
            return Equals(vmRegisteredEvent as VmRegisteredEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRelayoutSuccessfulEvent : VmEvent, IEquatable<VmRelayoutSuccessfulEvent>
    {
        public bool Equals(VmRelayoutSuccessfulEvent vmRelayoutSuccessfulEvent)
        {
            return (vmRelayoutSuccessfulEvent != null && base.Equals(vmRelayoutSuccessfulEvent));
        }

        public override bool Equals(object vmRelayoutSuccessfulEvent)
        {
            return Equals(vmRelayoutSuccessfulEvent as VmRelayoutSuccessfulEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRelayoutUpToDateEvent : VmEvent, IEquatable<VmRelayoutUpToDateEvent>
    {
        public bool Equals(VmRelayoutUpToDateEvent vmRelayoutUpToDateEvent)
        {
            return (vmRelayoutUpToDateEvent != null && base.Equals(vmRelayoutUpToDateEvent));
        }

        public override bool Equals(object vmRelayoutUpToDateEvent)
        {
            return Equals(vmRelayoutUpToDateEvent as VmRelayoutUpToDateEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmReloadFromPathEvent : VmEvent, IEquatable<VmReloadFromPathEvent>
    {
        public string ConfigPath { get; set; }

        public bool Equals(VmReloadFromPathEvent vmReloadFromPathEvent)
        {
            return (vmReloadFromPathEvent != null && this.ConfigPath == vmReloadFromPathEvent.ConfigPath);
        }

        public override bool Equals(object vmReloadFromPathEvent)
        {
            return Equals(vmReloadFromPathEvent as VmReloadFromPathEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigPath).GetHashCode();
        }
    }

    public class VmReloadFromPathFailedEvent : VmEvent, IEquatable<VmReloadFromPathFailedEvent>
    {
        public string ConfigPath { get; set; }

        public bool Equals(VmReloadFromPathFailedEvent vmReloadFromPathFailedEvent)
        {
            return (vmReloadFromPathFailedEvent != null && this.ConfigPath == vmReloadFromPathFailedEvent.ConfigPath);
        }

        public override bool Equals(object vmReloadFromPathFailedEvent)
        {
            return Equals(vmReloadFromPathFailedEvent as VmReloadFromPathFailedEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigPath).GetHashCode();
        }
    }

    public class VmRelocatedEvent : VmRelocateSpecEvent, IEquatable<VmRelocatedEvent>
    {
        public HostEventArgument SourceHost { get; set; }

        public DatacenterEventArgument SourceDatacenter { get; set; }

        public DatastoreEventArgument SourceDatastore { get; set; }

        public bool Equals(VmRelocatedEvent vmRelocatedEvent)
        {
            return (vmRelocatedEvent != null && ((this.SourceHost == null && vmRelocatedEvent.SourceHost == null) || (this.SourceHost != null && this.SourceHost.Equals(vmRelocatedEvent.SourceHost))) && ((this.SourceDatacenter == null && vmRelocatedEvent.SourceDatacenter == null) || (this.SourceDatacenter != null && this.SourceDatacenter.Equals(vmRelocatedEvent.SourceDatacenter))) && ((this.SourceDatastore == null && vmRelocatedEvent.SourceDatastore == null) || (this.SourceDatastore != null && this.SourceDatastore.Equals(vmRelocatedEvent.SourceDatastore))));
        }

        public override bool Equals(object vmRelocatedEvent)
        {
            return Equals(vmRelocatedEvent as VmRelocatedEvent);
        }

        public override int GetHashCode()
        {
            return (SourceHost + "_" + SourceDatacenter + "_" + SourceDatastore).GetHashCode();
        }
    }

    public class VmRelocateFailedEvent : VmRelocateSpecEvent, IEquatable<VmRelocateFailedEvent>
    {
        public HostEventArgument DestHost { get; set; }

        public LocalizedMethodFault Reason { get; set; }

        public DatacenterEventArgument DestDatacenter { get; set; }

        public DatastoreEventArgument DestDatastore { get; set; }

        public bool Equals(VmRelocateFailedEvent vmRelocateFailedEvent)
        {
            return (vmRelocateFailedEvent != null && ((this.DestHost == null && vmRelocateFailedEvent.DestHost == null) || (this.DestHost != null && this.DestHost.Equals(vmRelocateFailedEvent.DestHost))) && ((this.Reason == null && vmRelocateFailedEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmRelocateFailedEvent.Reason))) && ((this.DestDatacenter == null && vmRelocateFailedEvent.DestDatacenter == null) || (this.DestDatacenter != null && this.DestDatacenter.Equals(vmRelocateFailedEvent.DestDatacenter))) && ((this.DestDatastore == null && vmRelocateFailedEvent.DestDatastore == null) || (this.DestDatastore != null && this.DestDatastore.Equals(vmRelocateFailedEvent.DestDatastore))));
        }

        public override bool Equals(object vmRelocateFailedEvent)
        {
            return Equals(vmRelocateFailedEvent as VmRelocateFailedEvent);
        }

        public override int GetHashCode()
        {
            return (DestHost + "_" + Reason + "_" + DestDatacenter + "_" + DestDatastore).GetHashCode();
        }
    }

    public class VmRelocateSpecEvent : VmEvent, IEquatable<VmRelocateSpecEvent>
    {
        public bool Equals(VmRelocateSpecEvent vmRelocateSpecEvent)
        {
            return (vmRelocateSpecEvent != null && base.Equals(vmRelocateSpecEvent));
        }

        public override bool Equals(object vmRelocateSpecEvent)
        {
            return Equals(vmRelocateSpecEvent as VmRelocateSpecEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRemoteConsoleConnectedEvent : VmEvent, IEquatable<VmRemoteConsoleConnectedEvent>
    {
        public bool Equals(VmRemoteConsoleConnectedEvent vmRemoteConsoleConnectedEvent)
        {
            return (vmRemoteConsoleConnectedEvent != null && base.Equals(vmRemoteConsoleConnectedEvent));
        }

        public override bool Equals(object vmRemoteConsoleConnectedEvent)
        {
            return Equals(vmRemoteConsoleConnectedEvent as VmRemoteConsoleConnectedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRemoteConsoleDisconnectedEvent : VmEvent, IEquatable<VmRemoteConsoleDisconnectedEvent>
    {
        public bool Equals(VmRemoteConsoleDisconnectedEvent vmRemoteConsoleDisconnectedEvent)
        {
            return (vmRemoteConsoleDisconnectedEvent != null && base.Equals(vmRemoteConsoleDisconnectedEvent));
        }

        public override bool Equals(object vmRemoteConsoleDisconnectedEvent)
        {
            return Equals(vmRemoteConsoleDisconnectedEvent as VmRemoteConsoleDisconnectedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRemovedEvent : VmEvent, IEquatable<VmRemovedEvent>
    {
        public bool Equals(VmRemovedEvent vmRemovedEvent)
        {
            return (vmRemovedEvent != null && base.Equals(vmRemovedEvent));
        }

        public override bool Equals(object vmRemovedEvent)
        {
            return Equals(vmRemovedEvent as VmRemovedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmRenamedEvent : VmEvent, IEquatable<VmRenamedEvent>
    {
        public string OldName { get; set; }

        public string NewName { get; set; }

        public bool Equals(VmRenamedEvent vmRenamedEvent)
        {
            return (vmRenamedEvent != null && this.OldName == vmRenamedEvent.OldName && this.NewName == vmRenamedEvent.NewName);
        }

        public override bool Equals(object vmRenamedEvent)
        {
            return Equals(vmRenamedEvent as VmRenamedEvent);
        }

        public override int GetHashCode()
        {
            return (OldName + "_" + NewName).GetHashCode();
        }
    }

    public class VmRequirementsExceedCurrentEVCModeEvent : VmEvent, IEquatable<VmRequirementsExceedCurrentEVCModeEvent>
    {
        public bool Equals(VmRequirementsExceedCurrentEVCModeEvent vmRequirementsExceedCurrentEVCModeEvent)
        {
            return (vmRequirementsExceedCurrentEVCModeEvent != null && base.Equals(vmRequirementsExceedCurrentEVCModeEvent));
        }

        public override bool Equals(object vmRequirementsExceedCurrentEVCModeEvent)
        {
            return Equals(vmRequirementsExceedCurrentEVCModeEvent as VmRequirementsExceedCurrentEVCModeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmResettingEvent : VmEvent, IEquatable<VmResettingEvent>
    {
        public bool Equals(VmResettingEvent vmResettingEvent)
        {
            return (vmResettingEvent != null && base.Equals(vmResettingEvent));
        }

        public override bool Equals(object vmResettingEvent)
        {
            return Equals(vmResettingEvent as VmResettingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmResourcePoolMovedEvent : VmEvent, IEquatable<VmResourcePoolMovedEvent>
    {
        public ResourcePoolEventArgument OldParent { get; set; }

        public ResourcePoolEventArgument NewParent { get; set; }

        public bool Equals(VmResourcePoolMovedEvent vmResourcePoolMovedEvent)
        {
            return (vmResourcePoolMovedEvent != null && ((this.OldParent == null && vmResourcePoolMovedEvent.OldParent == null) || (this.OldParent != null && this.OldParent.Equals(vmResourcePoolMovedEvent.OldParent))) && ((this.NewParent == null && vmResourcePoolMovedEvent.NewParent == null) || (this.NewParent != null && this.NewParent.Equals(vmResourcePoolMovedEvent.NewParent))));
        }

        public override bool Equals(object vmResourcePoolMovedEvent)
        {
            return Equals(vmResourcePoolMovedEvent as VmResourcePoolMovedEvent);
        }

        public override int GetHashCode()
        {
            return (OldParent + "_" + NewParent).GetHashCode();
        }
    }

    public class VmResourceReallocatedEvent : VmEvent, IEquatable<VmResourceReallocatedEvent>
    {
        public ChangesInfoEventArgument ConfigChanges { get; set; }

        public bool Equals(VmResourceReallocatedEvent vmResourceReallocatedEvent)
        {
            return (vmResourceReallocatedEvent != null && ((this.ConfigChanges == null && vmResourceReallocatedEvent.ConfigChanges == null) || (this.ConfigChanges != null && this.ConfigChanges.Equals(vmResourceReallocatedEvent.ConfigChanges))));
        }

        public override bool Equals(object vmResourceReallocatedEvent)
        {
            return Equals(vmResourceReallocatedEvent as VmResourceReallocatedEvent);
        }

        public override int GetHashCode()
        {
            return (ConfigChanges).GetHashCode();
        }
    }

    public class VmRestartedOnAlternateHostEvent : VmPoweredOnEvent, IEquatable<VmRestartedOnAlternateHostEvent>
    {
        public HostEventArgument SourceHost { get; set; }

        public bool Equals(VmRestartedOnAlternateHostEvent vmRestartedOnAlternateHostEvent)
        {
            return (vmRestartedOnAlternateHostEvent != null && ((this.SourceHost == null && vmRestartedOnAlternateHostEvent.SourceHost == null) || (this.SourceHost != null && this.SourceHost.Equals(vmRestartedOnAlternateHostEvent.SourceHost))));
        }

        public override bool Equals(object vmRestartedOnAlternateHostEvent)
        {
            return Equals(vmRestartedOnAlternateHostEvent as VmRestartedOnAlternateHostEvent);
        }

        public override int GetHashCode()
        {
            return (SourceHost).GetHashCode();
        }
    }

    public class VmResumingEvent : VmEvent, IEquatable<VmResumingEvent>
    {
        public bool Equals(VmResumingEvent vmResumingEvent)
        {
            return (vmResumingEvent != null && base.Equals(vmResumingEvent));
        }

        public override bool Equals(object vmResumingEvent)
        {
            return Equals(vmResumingEvent as VmResumingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSecondaryAddedEvent : VmEvent, IEquatable<VmSecondaryAddedEvent>
    {
        public bool Equals(VmSecondaryAddedEvent vmSecondaryAddedEvent)
        {
            return (vmSecondaryAddedEvent != null && base.Equals(vmSecondaryAddedEvent));
        }

        public override bool Equals(object vmSecondaryAddedEvent)
        {
            return Equals(vmSecondaryAddedEvent as VmSecondaryAddedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSecondaryDisabledBySystemEvent : VmEvent, IEquatable<VmSecondaryDisabledBySystemEvent>
    {
        public LocalizedMethodFault Reason { get; set; }

        public bool Equals(VmSecondaryDisabledBySystemEvent vmSecondaryDisabledBySystemEvent)
        {
            return (vmSecondaryDisabledBySystemEvent != null && ((this.Reason == null && vmSecondaryDisabledBySystemEvent.Reason == null) || (this.Reason != null && this.Reason.Equals(vmSecondaryDisabledBySystemEvent.Reason))));
        }

        public override bool Equals(object vmSecondaryDisabledBySystemEvent)
        {
            return Equals(vmSecondaryDisabledBySystemEvent as VmSecondaryDisabledBySystemEvent);
        }

        public override int GetHashCode()
        {
            return (Reason).GetHashCode();
        }
    }

    public class VmSecondaryDisabledEvent : VmEvent, IEquatable<VmSecondaryDisabledEvent>
    {
        public bool Equals(VmSecondaryDisabledEvent vmSecondaryDisabledEvent)
        {
            return (vmSecondaryDisabledEvent != null && base.Equals(vmSecondaryDisabledEvent));
        }

        public override bool Equals(object vmSecondaryDisabledEvent)
        {
            return Equals(vmSecondaryDisabledEvent as VmSecondaryDisabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSecondaryEnabledEvent : VmEvent, IEquatable<VmSecondaryEnabledEvent>
    {
        public bool Equals(VmSecondaryEnabledEvent vmSecondaryEnabledEvent)
        {
            return (vmSecondaryEnabledEvent != null && base.Equals(vmSecondaryEnabledEvent));
        }

        public override bool Equals(object vmSecondaryEnabledEvent)
        {
            return Equals(vmSecondaryEnabledEvent as VmSecondaryEnabledEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSecondaryStartedEvent : VmEvent, IEquatable<VmSecondaryStartedEvent>
    {
        public bool Equals(VmSecondaryStartedEvent vmSecondaryStartedEvent)
        {
            return (vmSecondaryStartedEvent != null && base.Equals(vmSecondaryStartedEvent));
        }

        public override bool Equals(object vmSecondaryStartedEvent)
        {
            return Equals(vmSecondaryStartedEvent as VmSecondaryStartedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmShutdownOnIsolationEvent : VmPoweredOffEvent, IEquatable<VmShutdownOnIsolationEvent>
    {
        public HostEventArgument IsolatedHost { get; set; }

        public string ShutdownResult { get; set; }

        public bool Equals(VmShutdownOnIsolationEvent vmShutdownOnIsolationEvent)
        {
            return (vmShutdownOnIsolationEvent != null && ((this.IsolatedHost == null && vmShutdownOnIsolationEvent.IsolatedHost == null) || (this.IsolatedHost != null && this.IsolatedHost.Equals(vmShutdownOnIsolationEvent.IsolatedHost))) && this.ShutdownResult == vmShutdownOnIsolationEvent.ShutdownResult);
        }

        public override bool Equals(object vmShutdownOnIsolationEvent)
        {
            return Equals(vmShutdownOnIsolationEvent as VmShutdownOnIsolationEvent);
        }

        public override int GetHashCode()
        {
            return (IsolatedHost + "_" + ShutdownResult).GetHashCode();
        }
    }

    public class VmSmpFaultToleranceTooManyVMsOnHost : InsufficientResourcesFault, IEquatable<VmSmpFaultToleranceTooManyVMsOnHost>
    {
        public string HostName { get; set; }

        public int MaxNumSmpFtVms { get; set; }

        public bool Equals(VmSmpFaultToleranceTooManyVMsOnHost vmSmpFaultToleranceTooManyVMsOnHost)
        {
            return (vmSmpFaultToleranceTooManyVMsOnHost != null && this.HostName == vmSmpFaultToleranceTooManyVMsOnHost.HostName && this.MaxNumSmpFtVms == vmSmpFaultToleranceTooManyVMsOnHost.MaxNumSmpFtVms);
        }

        public override bool Equals(object vmSmpFaultToleranceTooManyVMsOnHost)
        {
            return Equals(vmSmpFaultToleranceTooManyVMsOnHost as VmSmpFaultToleranceTooManyVMsOnHost);
        }

        public override int GetHashCode()
        {
            return (HostName + "_" + MaxNumSmpFtVms).GetHashCode();
        }
    }

    public class VmSnapshotFileInfo : FileInfo, IEquatable<VmSnapshotFileInfo>
    {
        public bool Equals(VmSnapshotFileInfo vmSnapshotFileInfo)
        {
            return (vmSnapshotFileInfo != null && base.Equals(vmSnapshotFileInfo));
        }

        public override bool Equals(object vmSnapshotFileInfo)
        {
            return Equals(vmSnapshotFileInfo as VmSnapshotFileInfo);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSnapshotFileQuery : FileQuery, IEquatable<VmSnapshotFileQuery>
    {
        public bool Equals(VmSnapshotFileQuery vmSnapshotFileQuery)
        {
            return (vmSnapshotFileQuery != null && base.Equals(vmSnapshotFileQuery));
        }

        public override bool Equals(object vmSnapshotFileQuery)
        {
            return Equals(vmSnapshotFileQuery as VmSnapshotFileQuery);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmStartingEvent : VmEvent, IEquatable<VmStartingEvent>
    {
        public bool Equals(VmStartingEvent vmStartingEvent)
        {
            return (vmStartingEvent != null && base.Equals(vmStartingEvent));
        }

        public override bool Equals(object vmStartingEvent)
        {
            return Equals(vmStartingEvent as VmStartingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmStartingSecondaryEvent : VmEvent, IEquatable<VmStartingSecondaryEvent>
    {
        public bool Equals(VmStartingSecondaryEvent vmStartingSecondaryEvent)
        {
            return (vmStartingSecondaryEvent != null && base.Equals(vmStartingSecondaryEvent));
        }

        public override bool Equals(object vmStartingSecondaryEvent)
        {
            return Equals(vmStartingSecondaryEvent as VmStartingSecondaryEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmStartRecordingEvent : VmEvent, IEquatable<VmStartRecordingEvent>
    {
        public bool Equals(VmStartRecordingEvent vmStartRecordingEvent)
        {
            return (vmStartRecordingEvent != null && base.Equals(vmStartRecordingEvent));
        }

        public override bool Equals(object vmStartRecordingEvent)
        {
            return Equals(vmStartRecordingEvent as VmStartRecordingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmStartReplayingEvent : VmEvent, IEquatable<VmStartReplayingEvent>
    {
        public bool Equals(VmStartReplayingEvent vmStartReplayingEvent)
        {
            return (vmStartReplayingEvent != null && base.Equals(vmStartReplayingEvent));
        }

        public override bool Equals(object vmStartReplayingEvent)
        {
            return Equals(vmStartReplayingEvent as VmStartReplayingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmStaticMacConflictEvent : VmEvent, IEquatable<VmStaticMacConflictEvent>
    {
        public VmEventArgument ConflictedVm { get; set; }

        public string Mac { get; set; }

        public bool Equals(VmStaticMacConflictEvent vmStaticMacConflictEvent)
        {
            return (vmStaticMacConflictEvent != null && ((this.ConflictedVm == null && vmStaticMacConflictEvent.ConflictedVm == null) || (this.ConflictedVm != null && this.ConflictedVm.Equals(vmStaticMacConflictEvent.ConflictedVm))) && this.Mac == vmStaticMacConflictEvent.Mac);
        }

        public override bool Equals(object vmStaticMacConflictEvent)
        {
            return Equals(vmStaticMacConflictEvent as VmStaticMacConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVm + "_" + Mac).GetHashCode();
        }
    }

    public class VmStoppingEvent : VmEvent, IEquatable<VmStoppingEvent>
    {
        public bool Equals(VmStoppingEvent vmStoppingEvent)
        {
            return (vmStoppingEvent != null && base.Equals(vmStoppingEvent));
        }

        public override bool Equals(object vmStoppingEvent)
        {
            return Equals(vmStoppingEvent as VmStoppingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSuspendedEvent : VmEvent, IEquatable<VmSuspendedEvent>
    {
        public bool Equals(VmSuspendedEvent vmSuspendedEvent)
        {
            return (vmSuspendedEvent != null && base.Equals(vmSuspendedEvent));
        }

        public override bool Equals(object vmSuspendedEvent)
        {
            return Equals(vmSuspendedEvent as VmSuspendedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmSuspendingEvent : VmEvent, IEquatable<VmSuspendingEvent>
    {
        public bool Equals(VmSuspendingEvent vmSuspendingEvent)
        {
            return (vmSuspendingEvent != null && base.Equals(vmSuspendingEvent));
        }

        public override bool Equals(object vmSuspendingEvent)
        {
            return Equals(vmSuspendingEvent as VmSuspendingEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmTimedoutStartingSecondaryEvent : VmEvent, IEquatable<VmTimedoutStartingSecondaryEvent>
    {
        public long? Timeout { get; set; }

        public bool Equals(VmTimedoutStartingSecondaryEvent vmTimedoutStartingSecondaryEvent)
        {
            return (vmTimedoutStartingSecondaryEvent != null && ((this.Timeout == null && vmTimedoutStartingSecondaryEvent.Timeout == null) || (this.Timeout != null && this.Timeout.Equals(vmTimedoutStartingSecondaryEvent.Timeout))));
        }

        public override bool Equals(object vmTimedoutStartingSecondaryEvent)
        {
            return Equals(vmTimedoutStartingSecondaryEvent as VmTimedoutStartingSecondaryEvent);
        }

        public override int GetHashCode()
        {
            return (Timeout).GetHashCode();
        }
    }

    public class VmToolsUpgradeFault : VimFault, IEquatable<VmToolsUpgradeFault>
    {
        public bool Equals(VmToolsUpgradeFault vmToolsUpgradeFault)
        {
            return (vmToolsUpgradeFault != null && base.Equals(vmToolsUpgradeFault));
        }

        public override bool Equals(object vmToolsUpgradeFault)
        {
            return Equals(vmToolsUpgradeFault as VmToolsUpgradeFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmUnsupportedStartingEvent : VmStartingEvent, IEquatable<VmUnsupportedStartingEvent>
    {
        public string GuestId { get; set; }

        public bool Equals(VmUnsupportedStartingEvent vmUnsupportedStartingEvent)
        {
            return (vmUnsupportedStartingEvent != null && this.GuestId == vmUnsupportedStartingEvent.GuestId);
        }

        public override bool Equals(object vmUnsupportedStartingEvent)
        {
            return Equals(vmUnsupportedStartingEvent as VmUnsupportedStartingEvent);
        }

        public override int GetHashCode()
        {
            return (GuestId).GetHashCode();
        }
    }

    public class VmUpgradeCompleteEvent : VmEvent, IEquatable<VmUpgradeCompleteEvent>
    {
        public string Version { get; set; }

        public bool Equals(VmUpgradeCompleteEvent vmUpgradeCompleteEvent)
        {
            return (vmUpgradeCompleteEvent != null && this.Version == vmUpgradeCompleteEvent.Version);
        }

        public override bool Equals(object vmUpgradeCompleteEvent)
        {
            return Equals(vmUpgradeCompleteEvent as VmUpgradeCompleteEvent);
        }

        public override int GetHashCode()
        {
            return (Version).GetHashCode();
        }
    }

    public class VmUpgradeFailedEvent : VmEvent, IEquatable<VmUpgradeFailedEvent>
    {
        public bool Equals(VmUpgradeFailedEvent vmUpgradeFailedEvent)
        {
            return (vmUpgradeFailedEvent != null && base.Equals(vmUpgradeFailedEvent));
        }

        public override bool Equals(object vmUpgradeFailedEvent)
        {
            return Equals(vmUpgradeFailedEvent as VmUpgradeFailedEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmUpgradingEvent : VmEvent, IEquatable<VmUpgradingEvent>
    {
        public string Version { get; set; }

        public bool Equals(VmUpgradingEvent vmUpgradingEvent)
        {
            return (vmUpgradingEvent != null && this.Version == vmUpgradingEvent.Version);
        }

        public override bool Equals(object vmUpgradingEvent)
        {
            return Equals(vmUpgradingEvent as VmUpgradingEvent);
        }

        public override int GetHashCode()
        {
            return (Version).GetHashCode();
        }
    }

    public class VmUuidAssignedEvent : VmEvent, IEquatable<VmUuidAssignedEvent>
    {
        public string Uuid { get; set; }

        public bool Equals(VmUuidAssignedEvent vmUuidAssignedEvent)
        {
            return (vmUuidAssignedEvent != null && this.Uuid == vmUuidAssignedEvent.Uuid);
        }

        public override bool Equals(object vmUuidAssignedEvent)
        {
            return Equals(vmUuidAssignedEvent as VmUuidAssignedEvent);
        }

        public override int GetHashCode()
        {
            return (Uuid).GetHashCode();
        }
    }

    public class VmUuidChangedEvent : VmEvent, IEquatable<VmUuidChangedEvent>
    {
        public string OldUuid { get; set; }

        public string NewUuid { get; set; }

        public bool Equals(VmUuidChangedEvent vmUuidChangedEvent)
        {
            return (vmUuidChangedEvent != null && this.OldUuid == vmUuidChangedEvent.OldUuid && this.NewUuid == vmUuidChangedEvent.NewUuid);
        }

        public override bool Equals(object vmUuidChangedEvent)
        {
            return Equals(vmUuidChangedEvent as VmUuidChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldUuid + "_" + NewUuid).GetHashCode();
        }
    }

    public class VmUuidConflictEvent : VmEvent, IEquatable<VmUuidConflictEvent>
    {
        public VmEventArgument ConflictedVm { get; set; }

        public string Uuid { get; set; }

        public bool Equals(VmUuidConflictEvent vmUuidConflictEvent)
        {
            return (vmUuidConflictEvent != null && ((this.ConflictedVm == null && vmUuidConflictEvent.ConflictedVm == null) || (this.ConflictedVm != null && this.ConflictedVm.Equals(vmUuidConflictEvent.ConflictedVm))) && this.Uuid == vmUuidConflictEvent.Uuid);
        }

        public override bool Equals(object vmUuidConflictEvent)
        {
            return Equals(vmUuidConflictEvent as VmUuidConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVm + "_" + Uuid).GetHashCode();
        }
    }

    public class VmValidateMaxDevice : VimFault, IEquatable<VmValidateMaxDevice>
    {
        public string Device { get; set; }

        public int Max { get; set; }

        public int Count { get; set; }

        public bool Equals(VmValidateMaxDevice vmValidateMaxDevice)
        {
            return (vmValidateMaxDevice != null && this.Device == vmValidateMaxDevice.Device && this.Max == vmValidateMaxDevice.Max && this.Count == vmValidateMaxDevice.Count);
        }

        public override bool Equals(object vmValidateMaxDevice)
        {
            return Equals(vmValidateMaxDevice as VmValidateMaxDevice);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Max + "_" + Count).GetHashCode();
        }
    }

    public class VmVnicPoolReservationViolationClearEvent : DvsEvent, IEquatable<VmVnicPoolReservationViolationClearEvent>
    {
        public string VmVnicResourcePoolKey { get; set; }

        public string VmVnicResourcePoolName { get; set; }

        public bool Equals(VmVnicPoolReservationViolationClearEvent vmVnicPoolReservationViolationClearEvent)
        {
            return (vmVnicPoolReservationViolationClearEvent != null && this.VmVnicResourcePoolKey == vmVnicPoolReservationViolationClearEvent.VmVnicResourcePoolKey && this.VmVnicResourcePoolName == vmVnicPoolReservationViolationClearEvent.VmVnicResourcePoolName);
        }

        public override bool Equals(object vmVnicPoolReservationViolationClearEvent)
        {
            return Equals(vmVnicPoolReservationViolationClearEvent as VmVnicPoolReservationViolationClearEvent);
        }

        public override int GetHashCode()
        {
            return (VmVnicResourcePoolKey + "_" + VmVnicResourcePoolName).GetHashCode();
        }
    }

    public class VmVnicPoolReservationViolationRaiseEvent : DvsEvent, IEquatable<VmVnicPoolReservationViolationRaiseEvent>
    {
        public string VmVnicResourcePoolKey { get; set; }

        public string VmVnicResourcePoolName { get; set; }

        public bool Equals(VmVnicPoolReservationViolationRaiseEvent vmVnicPoolReservationViolationRaiseEvent)
        {
            return (vmVnicPoolReservationViolationRaiseEvent != null && this.VmVnicResourcePoolKey == vmVnicPoolReservationViolationRaiseEvent.VmVnicResourcePoolKey && this.VmVnicResourcePoolName == vmVnicPoolReservationViolationRaiseEvent.VmVnicResourcePoolName);
        }

        public override bool Equals(object vmVnicPoolReservationViolationRaiseEvent)
        {
            return Equals(vmVnicPoolReservationViolationRaiseEvent as VmVnicPoolReservationViolationRaiseEvent);
        }

        public override int GetHashCode()
        {
            return (VmVnicResourcePoolKey + "_" + VmVnicResourcePoolName).GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitch : DistributedVirtualSwitch, IEquatable<VmwareDistributedVirtualSwitch>
    {
        public new VmwareDistributedVirtualSwitch_LinkedView LinkedView { get; set; }

        public ManagedObjectReference UpdateDVSLacpGroupConfig_Task(VMwareDvsLacpGroupSpec[] lacpGroupSpec)
        {
            return default(ManagedObjectReference);
        }

        public void UpdateDVSLacpGroupConfig(VMwareDvsLacpGroupSpec[] lacpGroupSpec)
        {
        }

        public bool Equals(VmwareDistributedVirtualSwitch vmwareDistributedVirtualSwitch)
        {
            return (vmwareDistributedVirtualSwitch != null && ((this.LinkedView == null && vmwareDistributedVirtualSwitch.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmwareDistributedVirtualSwitch.LinkedView))));
        }

        public override bool Equals(object vmwareDistributedVirtualSwitch)
        {
            return Equals(vmwareDistributedVirtualSwitch as VmwareDistributedVirtualSwitch);
        }

        public override int GetHashCode()
        {
            return (LinkedView).GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitch_LinkedView : DistributedVirtualSwitch_LinkedView, IEquatable<VmwareDistributedVirtualSwitch_LinkedView>
    {
        public bool Equals(VmwareDistributedVirtualSwitch_LinkedView vmwareDistributedVirtualSwitch_LinkedView)
        {
            return (vmwareDistributedVirtualSwitch_LinkedView != null && base.Equals(vmwareDistributedVirtualSwitch_LinkedView));
        }

        public override bool Equals(object vmwareDistributedVirtualSwitch_LinkedView)
        {
            return Equals(vmwareDistributedVirtualSwitch_LinkedView as VmwareDistributedVirtualSwitch_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitchPvlanSpec : VmwareDistributedVirtualSwitchVlanSpec, IEquatable<VmwareDistributedVirtualSwitchPvlanSpec>
    {
        public int PvlanId { get; set; }

        public bool Equals(VmwareDistributedVirtualSwitchPvlanSpec vmwareDistributedVirtualSwitchPvlanSpec)
        {
            return (vmwareDistributedVirtualSwitchPvlanSpec != null && this.PvlanId == vmwareDistributedVirtualSwitchPvlanSpec.PvlanId);
        }

        public override bool Equals(object vmwareDistributedVirtualSwitchPvlanSpec)
        {
            return Equals(vmwareDistributedVirtualSwitchPvlanSpec as VmwareDistributedVirtualSwitchPvlanSpec);
        }

        public override int GetHashCode()
        {
            return (PvlanId).GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitchTrunkVlanSpec : VmwareDistributedVirtualSwitchVlanSpec, IEquatable<VmwareDistributedVirtualSwitchTrunkVlanSpec>
    {
        public NumericRange[] VlanId { get; set; }

        public bool Equals(VmwareDistributedVirtualSwitchTrunkVlanSpec vmwareDistributedVirtualSwitchTrunkVlanSpec)
        {
            return (vmwareDistributedVirtualSwitchTrunkVlanSpec != null && ((this.VlanId == null && vmwareDistributedVirtualSwitchTrunkVlanSpec.VlanId == null) || (this.VlanId != null && vmwareDistributedVirtualSwitchTrunkVlanSpec.VlanId != null && Enumerable.SequenceEqual(this.VlanId, vmwareDistributedVirtualSwitchTrunkVlanSpec.VlanId))));
        }

        public override bool Equals(object vmwareDistributedVirtualSwitchTrunkVlanSpec)
        {
            return Equals(vmwareDistributedVirtualSwitchTrunkVlanSpec as VmwareDistributedVirtualSwitchTrunkVlanSpec);
        }

        public override int GetHashCode()
        {
            return (VlanId).GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitchVlanIdSpec : VmwareDistributedVirtualSwitchVlanSpec, IEquatable<VmwareDistributedVirtualSwitchVlanIdSpec>
    {
        public int VlanId { get; set; }

        public bool Equals(VmwareDistributedVirtualSwitchVlanIdSpec vmwareDistributedVirtualSwitchVlanIdSpec)
        {
            return (vmwareDistributedVirtualSwitchVlanIdSpec != null && this.VlanId == vmwareDistributedVirtualSwitchVlanIdSpec.VlanId);
        }

        public override bool Equals(object vmwareDistributedVirtualSwitchVlanIdSpec)
        {
            return Equals(vmwareDistributedVirtualSwitchVlanIdSpec as VmwareDistributedVirtualSwitchVlanIdSpec);
        }

        public override int GetHashCode()
        {
            return (VlanId).GetHashCode();
        }
    }

    public class VmwareDistributedVirtualSwitchVlanSpec : InheritablePolicy, IEquatable<VmwareDistributedVirtualSwitchVlanSpec>
    {
        public bool Equals(VmwareDistributedVirtualSwitchVlanSpec vmwareDistributedVirtualSwitchVlanSpec)
        {
            return (vmwareDistributedVirtualSwitchVlanSpec != null && base.Equals(vmwareDistributedVirtualSwitchVlanSpec));
        }

        public override bool Equals(object vmwareDistributedVirtualSwitchVlanSpec)
        {
            return Equals(vmwareDistributedVirtualSwitchVlanSpec as VmwareDistributedVirtualSwitchVlanSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDVSConfigInfo : DVSConfigInfo, IEquatable<VMwareDVSConfigInfo>
    {
        public VMwareVspanSession[] VspanSession { get; set; }

        public VMwareDVSPvlanMapEntry[] PvlanConfig { get; set; }

        public int MaxMtu { get; set; }

        public LinkDiscoveryProtocolConfig LinkDiscoveryProtocolConfig { get; set; }

        public VMwareIpfixConfig IpfixConfig { get; set; }

        public VMwareDvsLacpGroupConfig[] LacpGroupConfig { get; set; }

        public string LacpApiVersion { get; set; }

        public string MulticastFilteringMode { get; set; }

        public new VMwareDVSConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VMwareDVSConfigInfo vMwareDVSConfigInfo)
        {
            return (vMwareDVSConfigInfo != null && ((this.VspanSession == null && vMwareDVSConfigInfo.VspanSession == null) || (this.VspanSession != null && vMwareDVSConfigInfo.VspanSession != null && Enumerable.SequenceEqual(this.VspanSession, vMwareDVSConfigInfo.VspanSession))) && ((this.PvlanConfig == null && vMwareDVSConfigInfo.PvlanConfig == null) || (this.PvlanConfig != null && vMwareDVSConfigInfo.PvlanConfig != null && Enumerable.SequenceEqual(this.PvlanConfig, vMwareDVSConfigInfo.PvlanConfig))) && this.MaxMtu == vMwareDVSConfigInfo.MaxMtu && ((this.LinkDiscoveryProtocolConfig == null && vMwareDVSConfigInfo.LinkDiscoveryProtocolConfig == null) || (this.LinkDiscoveryProtocolConfig != null && this.LinkDiscoveryProtocolConfig.Equals(vMwareDVSConfigInfo.LinkDiscoveryProtocolConfig))) && ((this.IpfixConfig == null && vMwareDVSConfigInfo.IpfixConfig == null) || (this.IpfixConfig != null && this.IpfixConfig.Equals(vMwareDVSConfigInfo.IpfixConfig))) && ((this.LacpGroupConfig == null && vMwareDVSConfigInfo.LacpGroupConfig == null) || (this.LacpGroupConfig != null && vMwareDVSConfigInfo.LacpGroupConfig != null && Enumerable.SequenceEqual(this.LacpGroupConfig, vMwareDVSConfigInfo.LacpGroupConfig))) && this.LacpApiVersion == vMwareDVSConfigInfo.LacpApiVersion && this.MulticastFilteringMode == vMwareDVSConfigInfo.MulticastFilteringMode && ((this.LinkedView == null && vMwareDVSConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMwareDVSConfigInfo.LinkedView))));
        }

        public override bool Equals(object vMwareDVSConfigInfo)
        {
            return Equals(vMwareDVSConfigInfo as VMwareDVSConfigInfo);
        }

        public override int GetHashCode()
        {
            return (VspanSession + "_" + PvlanConfig + "_" + MaxMtu + "_" + LinkDiscoveryProtocolConfig + "_" + IpfixConfig + "_" + LacpGroupConfig + "_" + LacpApiVersion + "_" + MulticastFilteringMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class VMwareDVSConfigInfo_LinkedView : DVSConfigInfo_LinkedView, IEquatable<VMwareDVSConfigInfo_LinkedView>
    {
        public bool Equals(VMwareDVSConfigInfo_LinkedView vMwareDVSConfigInfo_LinkedView)
        {
            return (vMwareDVSConfigInfo_LinkedView != null && base.Equals(vMwareDVSConfigInfo_LinkedView));
        }

        public override bool Equals(object vMwareDVSConfigInfo_LinkedView)
        {
            return Equals(vMwareDVSConfigInfo_LinkedView as VMwareDVSConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDVSConfigSpec : DVSConfigSpec, IEquatable<VMwareDVSConfigSpec>
    {
        public VMwareDVSPvlanConfigSpec[] PvlanConfigSpec { get; set; }

        public VMwareDVSVspanConfigSpec[] VspanConfigSpec { get; set; }

        public int? MaxMtu { get; set; }

        public LinkDiscoveryProtocolConfig LinkDiscoveryProtocolConfig { get; set; }

        public VMwareIpfixConfig IpfixConfig { get; set; }

        public string LacpApiVersion { get; set; }

        public string MulticastFilteringMode { get; set; }

        public new VMwareDVSConfigSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VMwareDVSConfigSpec vMwareDVSConfigSpec)
        {
            return (vMwareDVSConfigSpec != null && ((this.PvlanConfigSpec == null && vMwareDVSConfigSpec.PvlanConfigSpec == null) || (this.PvlanConfigSpec != null && vMwareDVSConfigSpec.PvlanConfigSpec != null && Enumerable.SequenceEqual(this.PvlanConfigSpec, vMwareDVSConfigSpec.PvlanConfigSpec))) && ((this.VspanConfigSpec == null && vMwareDVSConfigSpec.VspanConfigSpec == null) || (this.VspanConfigSpec != null && vMwareDVSConfigSpec.VspanConfigSpec != null && Enumerable.SequenceEqual(this.VspanConfigSpec, vMwareDVSConfigSpec.VspanConfigSpec))) && ((this.MaxMtu == null && vMwareDVSConfigSpec.MaxMtu == null) || (this.MaxMtu != null && this.MaxMtu.Equals(vMwareDVSConfigSpec.MaxMtu))) && ((this.LinkDiscoveryProtocolConfig == null && vMwareDVSConfigSpec.LinkDiscoveryProtocolConfig == null) || (this.LinkDiscoveryProtocolConfig != null && this.LinkDiscoveryProtocolConfig.Equals(vMwareDVSConfigSpec.LinkDiscoveryProtocolConfig))) && ((this.IpfixConfig == null && vMwareDVSConfigSpec.IpfixConfig == null) || (this.IpfixConfig != null && this.IpfixConfig.Equals(vMwareDVSConfigSpec.IpfixConfig))) && this.LacpApiVersion == vMwareDVSConfigSpec.LacpApiVersion && this.MulticastFilteringMode == vMwareDVSConfigSpec.MulticastFilteringMode && ((this.LinkedView == null && vMwareDVSConfigSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vMwareDVSConfigSpec.LinkedView))));
        }

        public override bool Equals(object vMwareDVSConfigSpec)
        {
            return Equals(vMwareDVSConfigSpec as VMwareDVSConfigSpec);
        }

        public override int GetHashCode()
        {
            return (PvlanConfigSpec + "_" + VspanConfigSpec + "_" + MaxMtu + "_" + LinkDiscoveryProtocolConfig + "_" + IpfixConfig + "_" + LacpApiVersion + "_" + MulticastFilteringMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class VMwareDVSConfigSpec_LinkedView : DVSConfigSpec_LinkedView, IEquatable<VMwareDVSConfigSpec_LinkedView>
    {
        public bool Equals(VMwareDVSConfigSpec_LinkedView vMwareDVSConfigSpec_LinkedView)
        {
            return (vMwareDVSConfigSpec_LinkedView != null && base.Equals(vMwareDVSConfigSpec_LinkedView));
        }

        public override bool Equals(object vMwareDVSConfigSpec_LinkedView)
        {
            return Equals(vMwareDVSConfigSpec_LinkedView as VMwareDVSConfigSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDVSFeatureCapability : DVSFeatureCapability, IEquatable<VMwareDVSFeatureCapability>
    {
        public bool? VspanSupported { get; set; }

        public bool? LldpSupported { get; set; }

        public bool? IpfixSupported { get; set; }

        public VMwareDvsIpfixCapability IpfixCapability { get; set; }

        public bool? MulticastSnoopingSupported { get; set; }

        public VMwareDVSVspanCapability VspanCapability { get; set; }

        public VMwareDvsLacpCapability LacpCapability { get; set; }

        public bool Equals(VMwareDVSFeatureCapability vMwareDVSFeatureCapability)
        {
            return (vMwareDVSFeatureCapability != null && ((this.VspanSupported == null && vMwareDVSFeatureCapability.VspanSupported == null) || (this.VspanSupported != null && this.VspanSupported.Equals(vMwareDVSFeatureCapability.VspanSupported))) && ((this.LldpSupported == null && vMwareDVSFeatureCapability.LldpSupported == null) || (this.LldpSupported != null && this.LldpSupported.Equals(vMwareDVSFeatureCapability.LldpSupported))) && ((this.IpfixSupported == null && vMwareDVSFeatureCapability.IpfixSupported == null) || (this.IpfixSupported != null && this.IpfixSupported.Equals(vMwareDVSFeatureCapability.IpfixSupported))) && ((this.IpfixCapability == null && vMwareDVSFeatureCapability.IpfixCapability == null) || (this.IpfixCapability != null && this.IpfixCapability.Equals(vMwareDVSFeatureCapability.IpfixCapability))) && ((this.MulticastSnoopingSupported == null && vMwareDVSFeatureCapability.MulticastSnoopingSupported == null) || (this.MulticastSnoopingSupported != null && this.MulticastSnoopingSupported.Equals(vMwareDVSFeatureCapability.MulticastSnoopingSupported))) && ((this.VspanCapability == null && vMwareDVSFeatureCapability.VspanCapability == null) || (this.VspanCapability != null && this.VspanCapability.Equals(vMwareDVSFeatureCapability.VspanCapability))) && ((this.LacpCapability == null && vMwareDVSFeatureCapability.LacpCapability == null) || (this.LacpCapability != null && this.LacpCapability.Equals(vMwareDVSFeatureCapability.LacpCapability))));
        }

        public override bool Equals(object vMwareDVSFeatureCapability)
        {
            return Equals(vMwareDVSFeatureCapability as VMwareDVSFeatureCapability);
        }

        public override int GetHashCode()
        {
            return (VspanSupported + "_" + LldpSupported + "_" + IpfixSupported + "_" + IpfixCapability + "_" + MulticastSnoopingSupported + "_" + VspanCapability + "_" + LacpCapability).GetHashCode();
        }
    }

    public class VMwareDVSHealthCheckCapability : DVSHealthCheckCapability, IEquatable<VMwareDVSHealthCheckCapability>
    {
        public bool VlanMtuSupported { get; set; }

        public bool TeamingSupported { get; set; }

        public bool Equals(VMwareDVSHealthCheckCapability vMwareDVSHealthCheckCapability)
        {
            return (vMwareDVSHealthCheckCapability != null && this.VlanMtuSupported == vMwareDVSHealthCheckCapability.VlanMtuSupported && this.TeamingSupported == vMwareDVSHealthCheckCapability.TeamingSupported);
        }

        public override bool Equals(object vMwareDVSHealthCheckCapability)
        {
            return Equals(vMwareDVSHealthCheckCapability as VMwareDVSHealthCheckCapability);
        }

        public override int GetHashCode()
        {
            return (VlanMtuSupported + "_" + TeamingSupported).GetHashCode();
        }
    }

    public class VMwareDVSHealthCheckConfig : DVSHealthCheckConfig, IEquatable<VMwareDVSHealthCheckConfig>
    {
        public bool Equals(VMwareDVSHealthCheckConfig vMwareDVSHealthCheckConfig)
        {
            return (vMwareDVSHealthCheckConfig != null && base.Equals(vMwareDVSHealthCheckConfig));
        }

        public override bool Equals(object vMwareDVSHealthCheckConfig)
        {
            return Equals(vMwareDVSHealthCheckConfig as VMwareDVSHealthCheckConfig);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDvsIpfixCapability : DynamicData, IEquatable<VMwareDvsIpfixCapability>
    {
        public bool? IpfixSupported { get; set; }

        public bool? Ipv6ForIpfixSupported { get; set; }

        public bool? ObservationDomainIdSupported { get; set; }

        public bool Equals(VMwareDvsIpfixCapability vMwareDvsIpfixCapability)
        {
            return (vMwareDvsIpfixCapability != null && ((this.IpfixSupported == null && vMwareDvsIpfixCapability.IpfixSupported == null) || (this.IpfixSupported != null && this.IpfixSupported.Equals(vMwareDvsIpfixCapability.IpfixSupported))) && ((this.Ipv6ForIpfixSupported == null && vMwareDvsIpfixCapability.Ipv6ForIpfixSupported == null) || (this.Ipv6ForIpfixSupported != null && this.Ipv6ForIpfixSupported.Equals(vMwareDvsIpfixCapability.Ipv6ForIpfixSupported))) && ((this.ObservationDomainIdSupported == null && vMwareDvsIpfixCapability.ObservationDomainIdSupported == null) || (this.ObservationDomainIdSupported != null && this.ObservationDomainIdSupported.Equals(vMwareDvsIpfixCapability.ObservationDomainIdSupported))));
        }

        public override bool Equals(object vMwareDvsIpfixCapability)
        {
            return Equals(vMwareDvsIpfixCapability as VMwareDvsIpfixCapability);
        }

        public override int GetHashCode()
        {
            return (IpfixSupported + "_" + Ipv6ForIpfixSupported + "_" + ObservationDomainIdSupported).GetHashCode();
        }
    }

    public class VMwareDvsLacpCapability : DynamicData, IEquatable<VMwareDvsLacpCapability>
    {
        public bool? LacpSupported { get; set; }

        public bool? MultiLacpGroupSupported { get; set; }

        public bool Equals(VMwareDvsLacpCapability vMwareDvsLacpCapability)
        {
            return (vMwareDvsLacpCapability != null && ((this.LacpSupported == null && vMwareDvsLacpCapability.LacpSupported == null) || (this.LacpSupported != null && this.LacpSupported.Equals(vMwareDvsLacpCapability.LacpSupported))) && ((this.MultiLacpGroupSupported == null && vMwareDvsLacpCapability.MultiLacpGroupSupported == null) || (this.MultiLacpGroupSupported != null && this.MultiLacpGroupSupported.Equals(vMwareDvsLacpCapability.MultiLacpGroupSupported))));
        }

        public override bool Equals(object vMwareDvsLacpCapability)
        {
            return Equals(vMwareDvsLacpCapability as VMwareDvsLacpCapability);
        }

        public override int GetHashCode()
        {
            return (LacpSupported + "_" + MultiLacpGroupSupported).GetHashCode();
        }
    }

    public class VMwareDvsLacpGroupConfig : DynamicData, IEquatable<VMwareDvsLacpGroupConfig>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string Mode { get; set; }

        public int? UplinkNum { get; set; }

        public string LoadbalanceAlgorithm { get; set; }

        public VMwareDvsLagVlanConfig Vlan { get; set; }

        public VMwareDvsLagIpfixConfig Ipfix { get; set; }

        public string[] UplinkName { get; set; }

        public string[] UplinkPortKey { get; set; }

        public bool Equals(VMwareDvsLacpGroupConfig vMwareDvsLacpGroupConfig)
        {
            return (vMwareDvsLacpGroupConfig != null && this.Key == vMwareDvsLacpGroupConfig.Key && this.Name == vMwareDvsLacpGroupConfig.Name && this.Mode == vMwareDvsLacpGroupConfig.Mode && ((this.UplinkNum == null && vMwareDvsLacpGroupConfig.UplinkNum == null) || (this.UplinkNum != null && this.UplinkNum.Equals(vMwareDvsLacpGroupConfig.UplinkNum))) && this.LoadbalanceAlgorithm == vMwareDvsLacpGroupConfig.LoadbalanceAlgorithm && ((this.Vlan == null && vMwareDvsLacpGroupConfig.Vlan == null) || (this.Vlan != null && this.Vlan.Equals(vMwareDvsLacpGroupConfig.Vlan))) && ((this.Ipfix == null && vMwareDvsLacpGroupConfig.Ipfix == null) || (this.Ipfix != null && this.Ipfix.Equals(vMwareDvsLacpGroupConfig.Ipfix))) && ((this.UplinkName == null && vMwareDvsLacpGroupConfig.UplinkName == null) || (this.UplinkName != null && vMwareDvsLacpGroupConfig.UplinkName != null && Enumerable.SequenceEqual(this.UplinkName, vMwareDvsLacpGroupConfig.UplinkName))) && ((this.UplinkPortKey == null && vMwareDvsLacpGroupConfig.UplinkPortKey == null) || (this.UplinkPortKey != null && vMwareDvsLacpGroupConfig.UplinkPortKey != null && Enumerable.SequenceEqual(this.UplinkPortKey, vMwareDvsLacpGroupConfig.UplinkPortKey))));
        }

        public override bool Equals(object vMwareDvsLacpGroupConfig)
        {
            return Equals(vMwareDvsLacpGroupConfig as VMwareDvsLacpGroupConfig);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Mode + "_" + UplinkNum + "_" + LoadbalanceAlgorithm + "_" + Vlan + "_" + Ipfix + "_" + UplinkName + "_" + UplinkPortKey).GetHashCode();
        }
    }

    public class VMwareDvsLacpGroupSpec : DynamicData, IEquatable<VMwareDvsLacpGroupSpec>
    {
        public VMwareDvsLacpGroupConfig LacpGroupConfig { get; set; }

        public string Operation { get; set; }

        public bool Equals(VMwareDvsLacpGroupSpec vMwareDvsLacpGroupSpec)
        {
            return (vMwareDvsLacpGroupSpec != null && ((this.LacpGroupConfig == null && vMwareDvsLacpGroupSpec.LacpGroupConfig == null) || (this.LacpGroupConfig != null && this.LacpGroupConfig.Equals(vMwareDvsLacpGroupSpec.LacpGroupConfig))) && this.Operation == vMwareDvsLacpGroupSpec.Operation);
        }

        public override bool Equals(object vMwareDvsLacpGroupSpec)
        {
            return Equals(vMwareDvsLacpGroupSpec as VMwareDvsLacpGroupSpec);
        }

        public override int GetHashCode()
        {
            return (LacpGroupConfig + "_" + Operation).GetHashCode();
        }
    }

    public class VMwareDvsLagIpfixConfig : DynamicData, IEquatable<VMwareDvsLagIpfixConfig>
    {
        public bool? IpfixEnabled { get; set; }

        public bool Equals(VMwareDvsLagIpfixConfig vMwareDvsLagIpfixConfig)
        {
            return (vMwareDvsLagIpfixConfig != null && ((this.IpfixEnabled == null && vMwareDvsLagIpfixConfig.IpfixEnabled == null) || (this.IpfixEnabled != null && this.IpfixEnabled.Equals(vMwareDvsLagIpfixConfig.IpfixEnabled))));
        }

        public override bool Equals(object vMwareDvsLagIpfixConfig)
        {
            return Equals(vMwareDvsLagIpfixConfig as VMwareDvsLagIpfixConfig);
        }

        public override int GetHashCode()
        {
            return (IpfixEnabled).GetHashCode();
        }
    }

    public class VMwareDvsLagVlanConfig : DynamicData, IEquatable<VMwareDvsLagVlanConfig>
    {
        public NumericRange[] VlanId { get; set; }

        public bool Equals(VMwareDvsLagVlanConfig vMwareDvsLagVlanConfig)
        {
            return (vMwareDvsLagVlanConfig != null && ((this.VlanId == null && vMwareDvsLagVlanConfig.VlanId == null) || (this.VlanId != null && vMwareDvsLagVlanConfig.VlanId != null && Enumerable.SequenceEqual(this.VlanId, vMwareDvsLagVlanConfig.VlanId))));
        }

        public override bool Equals(object vMwareDvsLagVlanConfig)
        {
            return Equals(vMwareDvsLagVlanConfig as VMwareDvsLagVlanConfig);
        }

        public override int GetHashCode()
        {
            return (VlanId).GetHashCode();
        }
    }

    public class VMwareDVSMtuHealthCheckResult : HostMemberUplinkHealthCheckResult, IEquatable<VMwareDVSMtuHealthCheckResult>
    {
        public bool MtuMismatch { get; set; }

        public NumericRange[] VlanSupportSwitchMtu { get; set; }

        public NumericRange[] VlanNotSupportSwitchMtu { get; set; }

        public bool Equals(VMwareDVSMtuHealthCheckResult vMwareDVSMtuHealthCheckResult)
        {
            return (vMwareDVSMtuHealthCheckResult != null && this.MtuMismatch == vMwareDVSMtuHealthCheckResult.MtuMismatch && ((this.VlanSupportSwitchMtu == null && vMwareDVSMtuHealthCheckResult.VlanSupportSwitchMtu == null) || (this.VlanSupportSwitchMtu != null && vMwareDVSMtuHealthCheckResult.VlanSupportSwitchMtu != null && Enumerable.SequenceEqual(this.VlanSupportSwitchMtu, vMwareDVSMtuHealthCheckResult.VlanSupportSwitchMtu))) && ((this.VlanNotSupportSwitchMtu == null && vMwareDVSMtuHealthCheckResult.VlanNotSupportSwitchMtu == null) || (this.VlanNotSupportSwitchMtu != null && vMwareDVSMtuHealthCheckResult.VlanNotSupportSwitchMtu != null && Enumerable.SequenceEqual(this.VlanNotSupportSwitchMtu, vMwareDVSMtuHealthCheckResult.VlanNotSupportSwitchMtu))));
        }

        public override bool Equals(object vMwareDVSMtuHealthCheckResult)
        {
            return Equals(vMwareDVSMtuHealthCheckResult as VMwareDVSMtuHealthCheckResult);
        }

        public override int GetHashCode()
        {
            return (MtuMismatch + "_" + VlanSupportSwitchMtu + "_" + VlanNotSupportSwitchMtu).GetHashCode();
        }
    }

    public class VMwareDVSPortgroupPolicy : DVPortgroupPolicy, IEquatable<VMwareDVSPortgroupPolicy>
    {
        public bool VlanOverrideAllowed { get; set; }

        public bool UplinkTeamingOverrideAllowed { get; set; }

        public bool SecurityPolicyOverrideAllowed { get; set; }

        public bool? IpfixOverrideAllowed { get; set; }

        public bool? MacManagementOverrideAllowed { get; set; }

        public bool Equals(VMwareDVSPortgroupPolicy vMwareDVSPortgroupPolicy)
        {
            return (vMwareDVSPortgroupPolicy != null && this.VlanOverrideAllowed == vMwareDVSPortgroupPolicy.VlanOverrideAllowed && this.UplinkTeamingOverrideAllowed == vMwareDVSPortgroupPolicy.UplinkTeamingOverrideAllowed && this.SecurityPolicyOverrideAllowed == vMwareDVSPortgroupPolicy.SecurityPolicyOverrideAllowed && ((this.IpfixOverrideAllowed == null && vMwareDVSPortgroupPolicy.IpfixOverrideAllowed == null) || (this.IpfixOverrideAllowed != null && this.IpfixOverrideAllowed.Equals(vMwareDVSPortgroupPolicy.IpfixOverrideAllowed))) && ((this.MacManagementOverrideAllowed == null && vMwareDVSPortgroupPolicy.MacManagementOverrideAllowed == null) || (this.MacManagementOverrideAllowed != null && this.MacManagementOverrideAllowed.Equals(vMwareDVSPortgroupPolicy.MacManagementOverrideAllowed))));
        }

        public override bool Equals(object vMwareDVSPortgroupPolicy)
        {
            return Equals(vMwareDVSPortgroupPolicy as VMwareDVSPortgroupPolicy);
        }

        public override int GetHashCode()
        {
            return (VlanOverrideAllowed + "_" + UplinkTeamingOverrideAllowed + "_" + SecurityPolicyOverrideAllowed + "_" + IpfixOverrideAllowed + "_" + MacManagementOverrideAllowed).GetHashCode();
        }
    }

    public class VMwareDVSPortSetting : DVPortSetting, IEquatable<VMwareDVSPortSetting>
    {
        public VmwareDistributedVirtualSwitchVlanSpec Vlan { get; set; }

        public IntPolicy QosTag { get; set; }

        public VmwareUplinkPortTeamingPolicy UplinkTeamingPolicy { get; set; }

        public DVSSecurityPolicy SecurityPolicy { get; set; }

        public BoolPolicy IpfixEnabled { get; set; }

        public BoolPolicy TxUplink { get; set; }

        public VMwareUplinkLacpPolicy LacpPolicy { get; set; }

        public DVSMacManagementPolicy MacManagementPolicy { get; set; }

        public bool Equals(VMwareDVSPortSetting vMwareDVSPortSetting)
        {
            return (vMwareDVSPortSetting != null && ((this.Vlan == null && vMwareDVSPortSetting.Vlan == null) || (this.Vlan != null && this.Vlan.Equals(vMwareDVSPortSetting.Vlan))) && ((this.QosTag == null && vMwareDVSPortSetting.QosTag == null) || (this.QosTag != null && this.QosTag.Equals(vMwareDVSPortSetting.QosTag))) && ((this.UplinkTeamingPolicy == null && vMwareDVSPortSetting.UplinkTeamingPolicy == null) || (this.UplinkTeamingPolicy != null && this.UplinkTeamingPolicy.Equals(vMwareDVSPortSetting.UplinkTeamingPolicy))) && ((this.SecurityPolicy == null && vMwareDVSPortSetting.SecurityPolicy == null) || (this.SecurityPolicy != null && this.SecurityPolicy.Equals(vMwareDVSPortSetting.SecurityPolicy))) && ((this.IpfixEnabled == null && vMwareDVSPortSetting.IpfixEnabled == null) || (this.IpfixEnabled != null && this.IpfixEnabled.Equals(vMwareDVSPortSetting.IpfixEnabled))) && ((this.TxUplink == null && vMwareDVSPortSetting.TxUplink == null) || (this.TxUplink != null && this.TxUplink.Equals(vMwareDVSPortSetting.TxUplink))) && ((this.LacpPolicy == null && vMwareDVSPortSetting.LacpPolicy == null) || (this.LacpPolicy != null && this.LacpPolicy.Equals(vMwareDVSPortSetting.LacpPolicy))) && ((this.MacManagementPolicy == null && vMwareDVSPortSetting.MacManagementPolicy == null) || (this.MacManagementPolicy != null && this.MacManagementPolicy.Equals(vMwareDVSPortSetting.MacManagementPolicy))));
        }

        public override bool Equals(object vMwareDVSPortSetting)
        {
            return Equals(vMwareDVSPortSetting as VMwareDVSPortSetting);
        }

        public override int GetHashCode()
        {
            return (Vlan + "_" + QosTag + "_" + UplinkTeamingPolicy + "_" + SecurityPolicy + "_" + IpfixEnabled + "_" + TxUplink + "_" + LacpPolicy + "_" + MacManagementPolicy).GetHashCode();
        }
    }

    public class VMwareDVSPvlanConfigSpec : DynamicData, IEquatable<VMwareDVSPvlanConfigSpec>
    {
        public VMwareDVSPvlanMapEntry PvlanEntry { get; set; }

        public string Operation { get; set; }

        public bool Equals(VMwareDVSPvlanConfigSpec vMwareDVSPvlanConfigSpec)
        {
            return (vMwareDVSPvlanConfigSpec != null && ((this.PvlanEntry == null && vMwareDVSPvlanConfigSpec.PvlanEntry == null) || (this.PvlanEntry != null && this.PvlanEntry.Equals(vMwareDVSPvlanConfigSpec.PvlanEntry))) && this.Operation == vMwareDVSPvlanConfigSpec.Operation);
        }

        public override bool Equals(object vMwareDVSPvlanConfigSpec)
        {
            return Equals(vMwareDVSPvlanConfigSpec as VMwareDVSPvlanConfigSpec);
        }

        public override int GetHashCode()
        {
            return (PvlanEntry + "_" + Operation).GetHashCode();
        }
    }

    public class VMwareDVSPvlanMapEntry : DynamicData, IEquatable<VMwareDVSPvlanMapEntry>
    {
        public int PrimaryVlanId { get; set; }

        public int SecondaryVlanId { get; set; }

        public string PvlanType { get; set; }

        public bool Equals(VMwareDVSPvlanMapEntry vMwareDVSPvlanMapEntry)
        {
            return (vMwareDVSPvlanMapEntry != null && this.PrimaryVlanId == vMwareDVSPvlanMapEntry.PrimaryVlanId && this.SecondaryVlanId == vMwareDVSPvlanMapEntry.SecondaryVlanId && this.PvlanType == vMwareDVSPvlanMapEntry.PvlanType);
        }

        public override bool Equals(object vMwareDVSPvlanMapEntry)
        {
            return Equals(vMwareDVSPvlanMapEntry as VMwareDVSPvlanMapEntry);
        }

        public override int GetHashCode()
        {
            return (PrimaryVlanId + "_" + SecondaryVlanId + "_" + PvlanType).GetHashCode();
        }
    }

    public class VMwareDVSTeamingHealthCheckConfig : VMwareDVSHealthCheckConfig, IEquatable<VMwareDVSTeamingHealthCheckConfig>
    {
        public bool Equals(VMwareDVSTeamingHealthCheckConfig vMwareDVSTeamingHealthCheckConfig)
        {
            return (vMwareDVSTeamingHealthCheckConfig != null && base.Equals(vMwareDVSTeamingHealthCheckConfig));
        }

        public override bool Equals(object vMwareDVSTeamingHealthCheckConfig)
        {
            return Equals(vMwareDVSTeamingHealthCheckConfig as VMwareDVSTeamingHealthCheckConfig);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDVSTeamingHealthCheckResult : HostMemberHealthCheckResult, IEquatable<VMwareDVSTeamingHealthCheckResult>
    {
        public string TeamingStatus { get; set; }

        public bool Equals(VMwareDVSTeamingHealthCheckResult vMwareDVSTeamingHealthCheckResult)
        {
            return (vMwareDVSTeamingHealthCheckResult != null && this.TeamingStatus == vMwareDVSTeamingHealthCheckResult.TeamingStatus);
        }

        public override bool Equals(object vMwareDVSTeamingHealthCheckResult)
        {
            return Equals(vMwareDVSTeamingHealthCheckResult as VMwareDVSTeamingHealthCheckResult);
        }

        public override int GetHashCode()
        {
            return (TeamingStatus).GetHashCode();
        }
    }

    public class VMwareDVSVlanHealthCheckResult : HostMemberUplinkHealthCheckResult, IEquatable<VMwareDVSVlanHealthCheckResult>
    {
        public NumericRange[] TrunkedVlan { get; set; }

        public NumericRange[] UntrunkedVlan { get; set; }

        public bool Equals(VMwareDVSVlanHealthCheckResult vMwareDVSVlanHealthCheckResult)
        {
            return (vMwareDVSVlanHealthCheckResult != null && ((this.TrunkedVlan == null && vMwareDVSVlanHealthCheckResult.TrunkedVlan == null) || (this.TrunkedVlan != null && vMwareDVSVlanHealthCheckResult.TrunkedVlan != null && Enumerable.SequenceEqual(this.TrunkedVlan, vMwareDVSVlanHealthCheckResult.TrunkedVlan))) && ((this.UntrunkedVlan == null && vMwareDVSVlanHealthCheckResult.UntrunkedVlan == null) || (this.UntrunkedVlan != null && vMwareDVSVlanHealthCheckResult.UntrunkedVlan != null && Enumerable.SequenceEqual(this.UntrunkedVlan, vMwareDVSVlanHealthCheckResult.UntrunkedVlan))));
        }

        public override bool Equals(object vMwareDVSVlanHealthCheckResult)
        {
            return Equals(vMwareDVSVlanHealthCheckResult as VMwareDVSVlanHealthCheckResult);
        }

        public override int GetHashCode()
        {
            return (TrunkedVlan + "_" + UntrunkedVlan).GetHashCode();
        }
    }

    public class VMwareDVSVlanMtuHealthCheckConfig : VMwareDVSHealthCheckConfig, IEquatable<VMwareDVSVlanMtuHealthCheckConfig>
    {
        public bool Equals(VMwareDVSVlanMtuHealthCheckConfig vMwareDVSVlanMtuHealthCheckConfig)
        {
            return (vMwareDVSVlanMtuHealthCheckConfig != null && base.Equals(vMwareDVSVlanMtuHealthCheckConfig));
        }

        public override bool Equals(object vMwareDVSVlanMtuHealthCheckConfig)
        {
            return Equals(vMwareDVSVlanMtuHealthCheckConfig as VMwareDVSVlanMtuHealthCheckConfig);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VMwareDVSVspanCapability : DynamicData, IEquatable<VMwareDVSVspanCapability>
    {
        public bool MixedDestSupported { get; set; }

        public bool DvportSupported { get; set; }

        public bool RemoteSourceSupported { get; set; }

        public bool RemoteDestSupported { get; set; }

        public bool EncapRemoteSourceSupported { get; set; }

        public bool? ErspanProtocolSupported { get; set; }

        public bool? MirrorNetstackSupported { get; set; }

        public bool Equals(VMwareDVSVspanCapability vMwareDVSVspanCapability)
        {
            return (vMwareDVSVspanCapability != null && this.MixedDestSupported == vMwareDVSVspanCapability.MixedDestSupported && this.DvportSupported == vMwareDVSVspanCapability.DvportSupported && this.RemoteSourceSupported == vMwareDVSVspanCapability.RemoteSourceSupported && this.RemoteDestSupported == vMwareDVSVspanCapability.RemoteDestSupported && this.EncapRemoteSourceSupported == vMwareDVSVspanCapability.EncapRemoteSourceSupported && ((this.ErspanProtocolSupported == null && vMwareDVSVspanCapability.ErspanProtocolSupported == null) || (this.ErspanProtocolSupported != null && this.ErspanProtocolSupported.Equals(vMwareDVSVspanCapability.ErspanProtocolSupported))) && ((this.MirrorNetstackSupported == null && vMwareDVSVspanCapability.MirrorNetstackSupported == null) || (this.MirrorNetstackSupported != null && this.MirrorNetstackSupported.Equals(vMwareDVSVspanCapability.MirrorNetstackSupported))));
        }

        public override bool Equals(object vMwareDVSVspanCapability)
        {
            return Equals(vMwareDVSVspanCapability as VMwareDVSVspanCapability);
        }

        public override int GetHashCode()
        {
            return (MixedDestSupported + "_" + DvportSupported + "_" + RemoteSourceSupported + "_" + RemoteDestSupported + "_" + EncapRemoteSourceSupported + "_" + ErspanProtocolSupported + "_" + MirrorNetstackSupported).GetHashCode();
        }
    }

    public class VMwareDVSVspanConfigSpec : DynamicData, IEquatable<VMwareDVSVspanConfigSpec>
    {
        public VMwareVspanSession VspanSession { get; set; }

        public string Operation { get; set; }

        public bool Equals(VMwareDVSVspanConfigSpec vMwareDVSVspanConfigSpec)
        {
            return (vMwareDVSVspanConfigSpec != null && ((this.VspanSession == null && vMwareDVSVspanConfigSpec.VspanSession == null) || (this.VspanSession != null && this.VspanSession.Equals(vMwareDVSVspanConfigSpec.VspanSession))) && this.Operation == vMwareDVSVspanConfigSpec.Operation);
        }

        public override bool Equals(object vMwareDVSVspanConfigSpec)
        {
            return Equals(vMwareDVSVspanConfigSpec as VMwareDVSVspanConfigSpec);
        }

        public override int GetHashCode()
        {
            return (VspanSession + "_" + Operation).GetHashCode();
        }
    }

    public class VMwareIpfixConfig : DynamicData, IEquatable<VMwareIpfixConfig>
    {
        public string CollectorIpAddress { get; set; }

        public int? CollectorPort { get; set; }

        public long? ObservationDomainId { get; set; }

        public int ActiveFlowTimeout { get; set; }

        public int IdleFlowTimeout { get; set; }

        public int SamplingRate { get; set; }

        public bool InternalFlowsOnly { get; set; }

        public bool Equals(VMwareIpfixConfig vMwareIpfixConfig)
        {
            return (vMwareIpfixConfig != null && this.CollectorIpAddress == vMwareIpfixConfig.CollectorIpAddress && ((this.CollectorPort == null && vMwareIpfixConfig.CollectorPort == null) || (this.CollectorPort != null && this.CollectorPort.Equals(vMwareIpfixConfig.CollectorPort))) && ((this.ObservationDomainId == null && vMwareIpfixConfig.ObservationDomainId == null) || (this.ObservationDomainId != null && this.ObservationDomainId.Equals(vMwareIpfixConfig.ObservationDomainId))) && this.ActiveFlowTimeout == vMwareIpfixConfig.ActiveFlowTimeout && this.IdleFlowTimeout == vMwareIpfixConfig.IdleFlowTimeout && this.SamplingRate == vMwareIpfixConfig.SamplingRate && this.InternalFlowsOnly == vMwareIpfixConfig.InternalFlowsOnly);
        }

        public override bool Equals(object vMwareIpfixConfig)
        {
            return Equals(vMwareIpfixConfig as VMwareIpfixConfig);
        }

        public override int GetHashCode()
        {
            return (CollectorIpAddress + "_" + CollectorPort + "_" + ObservationDomainId + "_" + ActiveFlowTimeout + "_" + IdleFlowTimeout + "_" + SamplingRate + "_" + InternalFlowsOnly).GetHashCode();
        }
    }

    public class VMwareUplinkLacpPolicy : InheritablePolicy, IEquatable<VMwareUplinkLacpPolicy>
    {
        public BoolPolicy Enable { get; set; }

        public StringPolicy Mode { get; set; }

        public bool Equals(VMwareUplinkLacpPolicy vMwareUplinkLacpPolicy)
        {
            return (vMwareUplinkLacpPolicy != null && ((this.Enable == null && vMwareUplinkLacpPolicy.Enable == null) || (this.Enable != null && this.Enable.Equals(vMwareUplinkLacpPolicy.Enable))) && ((this.Mode == null && vMwareUplinkLacpPolicy.Mode == null) || (this.Mode != null && this.Mode.Equals(vMwareUplinkLacpPolicy.Mode))));
        }

        public override bool Equals(object vMwareUplinkLacpPolicy)
        {
            return Equals(vMwareUplinkLacpPolicy as VMwareUplinkLacpPolicy);
        }

        public override int GetHashCode()
        {
            return (Enable + "_" + Mode).GetHashCode();
        }
    }

    public class VMwareUplinkPortOrderPolicy : InheritablePolicy, IEquatable<VMwareUplinkPortOrderPolicy>
    {
        public string[] ActiveUplinkPort { get; set; }

        public string[] StandbyUplinkPort { get; set; }

        public bool Equals(VMwareUplinkPortOrderPolicy vMwareUplinkPortOrderPolicy)
        {
            return (vMwareUplinkPortOrderPolicy != null && ((this.ActiveUplinkPort == null && vMwareUplinkPortOrderPolicy.ActiveUplinkPort == null) || (this.ActiveUplinkPort != null && vMwareUplinkPortOrderPolicy.ActiveUplinkPort != null && Enumerable.SequenceEqual(this.ActiveUplinkPort, vMwareUplinkPortOrderPolicy.ActiveUplinkPort))) && ((this.StandbyUplinkPort == null && vMwareUplinkPortOrderPolicy.StandbyUplinkPort == null) || (this.StandbyUplinkPort != null && vMwareUplinkPortOrderPolicy.StandbyUplinkPort != null && Enumerable.SequenceEqual(this.StandbyUplinkPort, vMwareUplinkPortOrderPolicy.StandbyUplinkPort))));
        }

        public override bool Equals(object vMwareUplinkPortOrderPolicy)
        {
            return Equals(vMwareUplinkPortOrderPolicy as VMwareUplinkPortOrderPolicy);
        }

        public override int GetHashCode()
        {
            return (ActiveUplinkPort + "_" + StandbyUplinkPort).GetHashCode();
        }
    }

    public class VmwareUplinkPortTeamingPolicy : InheritablePolicy, IEquatable<VmwareUplinkPortTeamingPolicy>
    {
        public StringPolicy Policy { get; set; }

        public BoolPolicy ReversePolicy { get; set; }

        public BoolPolicy NotifySwitches { get; set; }

        public BoolPolicy RollingOrder { get; set; }

        public DVSFailureCriteria FailureCriteria { get; set; }

        public VMwareUplinkPortOrderPolicy UplinkPortOrder { get; set; }

        public bool Equals(VmwareUplinkPortTeamingPolicy vmwareUplinkPortTeamingPolicy)
        {
            return (vmwareUplinkPortTeamingPolicy != null && ((this.Policy == null && vmwareUplinkPortTeamingPolicy.Policy == null) || (this.Policy != null && this.Policy.Equals(vmwareUplinkPortTeamingPolicy.Policy))) && ((this.ReversePolicy == null && vmwareUplinkPortTeamingPolicy.ReversePolicy == null) || (this.ReversePolicy != null && this.ReversePolicy.Equals(vmwareUplinkPortTeamingPolicy.ReversePolicy))) && ((this.NotifySwitches == null && vmwareUplinkPortTeamingPolicy.NotifySwitches == null) || (this.NotifySwitches != null && this.NotifySwitches.Equals(vmwareUplinkPortTeamingPolicy.NotifySwitches))) && ((this.RollingOrder == null && vmwareUplinkPortTeamingPolicy.RollingOrder == null) || (this.RollingOrder != null && this.RollingOrder.Equals(vmwareUplinkPortTeamingPolicy.RollingOrder))) && ((this.FailureCriteria == null && vmwareUplinkPortTeamingPolicy.FailureCriteria == null) || (this.FailureCriteria != null && this.FailureCriteria.Equals(vmwareUplinkPortTeamingPolicy.FailureCriteria))) && ((this.UplinkPortOrder == null && vmwareUplinkPortTeamingPolicy.UplinkPortOrder == null) || (this.UplinkPortOrder != null && this.UplinkPortOrder.Equals(vmwareUplinkPortTeamingPolicy.UplinkPortOrder))));
        }

        public override bool Equals(object vmwareUplinkPortTeamingPolicy)
        {
            return Equals(vmwareUplinkPortTeamingPolicy as VmwareUplinkPortTeamingPolicy);
        }

        public override int GetHashCode()
        {
            return (Policy + "_" + ReversePolicy + "_" + NotifySwitches + "_" + RollingOrder + "_" + FailureCriteria + "_" + UplinkPortOrder).GetHashCode();
        }
    }

    public class VMwareVspanPort : DynamicData, IEquatable<VMwareVspanPort>
    {
        public string[] PortKey { get; set; }

        public string[] UplinkPortName { get; set; }

        public string[] WildcardPortConnecteeType { get; set; }

        public int[] Vlans { get; set; }

        public string[] IpAddress { get; set; }

        public bool Equals(VMwareVspanPort vMwareVspanPort)
        {
            return (vMwareVspanPort != null && ((this.PortKey == null && vMwareVspanPort.PortKey == null) || (this.PortKey != null && vMwareVspanPort.PortKey != null && Enumerable.SequenceEqual(this.PortKey, vMwareVspanPort.PortKey))) && ((this.UplinkPortName == null && vMwareVspanPort.UplinkPortName == null) || (this.UplinkPortName != null && vMwareVspanPort.UplinkPortName != null && Enumerable.SequenceEqual(this.UplinkPortName, vMwareVspanPort.UplinkPortName))) && ((this.WildcardPortConnecteeType == null && vMwareVspanPort.WildcardPortConnecteeType == null) || (this.WildcardPortConnecteeType != null && vMwareVspanPort.WildcardPortConnecteeType != null && Enumerable.SequenceEqual(this.WildcardPortConnecteeType, vMwareVspanPort.WildcardPortConnecteeType))) && ((this.Vlans == null && vMwareVspanPort.Vlans == null) || (this.Vlans != null && vMwareVspanPort.Vlans != null && Enumerable.SequenceEqual(this.Vlans, vMwareVspanPort.Vlans))) && ((this.IpAddress == null && vMwareVspanPort.IpAddress == null) || (this.IpAddress != null && vMwareVspanPort.IpAddress != null && Enumerable.SequenceEqual(this.IpAddress, vMwareVspanPort.IpAddress))));
        }

        public override bool Equals(object vMwareVspanPort)
        {
            return Equals(vMwareVspanPort as VMwareVspanPort);
        }

        public override int GetHashCode()
        {
            return (PortKey + "_" + UplinkPortName + "_" + WildcardPortConnecteeType + "_" + Vlans + "_" + IpAddress).GetHashCode();
        }
    }

    public class VMwareVspanSession : DynamicData, IEquatable<VMwareVspanSession>
    {
        public string Key { get; set; }

        public string Name { get; set; }

        public string Description { get; set; }

        public bool Enabled { get; set; }

        public VMwareVspanPort SourcePortTransmitted { get; set; }

        public VMwareVspanPort SourcePortReceived { get; set; }

        public VMwareVspanPort DestinationPort { get; set; }

        public int? EncapsulationVlanId { get; set; }

        public bool StripOriginalVlan { get; set; }

        public int? MirroredPacketLength { get; set; }

        public bool NormalTrafficAllowed { get; set; }

        public string SessionType { get; set; }

        public int? SamplingRate { get; set; }

        public string EncapType { get; set; }

        public int? ErspanId { get; set; }

        public int? ErspanCOS { get; set; }

        public bool? ErspanGraNanosec { get; set; }

        public string Netstack { get; set; }

        public bool Equals(VMwareVspanSession vMwareVspanSession)
        {
            return (vMwareVspanSession != null && this.Key == vMwareVspanSession.Key && this.Name == vMwareVspanSession.Name && this.Description == vMwareVspanSession.Description && this.Enabled == vMwareVspanSession.Enabled && ((this.SourcePortTransmitted == null && vMwareVspanSession.SourcePortTransmitted == null) || (this.SourcePortTransmitted != null && this.SourcePortTransmitted.Equals(vMwareVspanSession.SourcePortTransmitted))) && ((this.SourcePortReceived == null && vMwareVspanSession.SourcePortReceived == null) || (this.SourcePortReceived != null && this.SourcePortReceived.Equals(vMwareVspanSession.SourcePortReceived))) && ((this.DestinationPort == null && vMwareVspanSession.DestinationPort == null) || (this.DestinationPort != null && this.DestinationPort.Equals(vMwareVspanSession.DestinationPort))) && ((this.EncapsulationVlanId == null && vMwareVspanSession.EncapsulationVlanId == null) || (this.EncapsulationVlanId != null && this.EncapsulationVlanId.Equals(vMwareVspanSession.EncapsulationVlanId))) && this.StripOriginalVlan == vMwareVspanSession.StripOriginalVlan && ((this.MirroredPacketLength == null && vMwareVspanSession.MirroredPacketLength == null) || (this.MirroredPacketLength != null && this.MirroredPacketLength.Equals(vMwareVspanSession.MirroredPacketLength))) && this.NormalTrafficAllowed == vMwareVspanSession.NormalTrafficAllowed && this.SessionType == vMwareVspanSession.SessionType && ((this.SamplingRate == null && vMwareVspanSession.SamplingRate == null) || (this.SamplingRate != null && this.SamplingRate.Equals(vMwareVspanSession.SamplingRate))) && this.EncapType == vMwareVspanSession.EncapType && ((this.ErspanId == null && vMwareVspanSession.ErspanId == null) || (this.ErspanId != null && this.ErspanId.Equals(vMwareVspanSession.ErspanId))) && ((this.ErspanCOS == null && vMwareVspanSession.ErspanCOS == null) || (this.ErspanCOS != null && this.ErspanCOS.Equals(vMwareVspanSession.ErspanCOS))) && ((this.ErspanGraNanosec == null && vMwareVspanSession.ErspanGraNanosec == null) || (this.ErspanGraNanosec != null && this.ErspanGraNanosec.Equals(vMwareVspanSession.ErspanGraNanosec))) && this.Netstack == vMwareVspanSession.Netstack);
        }

        public override bool Equals(object vMwareVspanSession)
        {
            return Equals(vMwareVspanSession as VMwareVspanSession);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Name + "_" + Description + "_" + Enabled + "_" + SourcePortTransmitted + "_" + SourcePortReceived + "_" + DestinationPort + "_" + EncapsulationVlanId + "_" + StripOriginalVlan + "_" + MirroredPacketLength + "_" + NormalTrafficAllowed + "_" + SessionType + "_" + SamplingRate + "_" + EncapType + "_" + ErspanId + "_" + ErspanCOS + "_" + ErspanGraNanosec + "_" + Netstack).GetHashCode();
        }
    }

    public class VmWwnAssignedEvent : VmEvent, IEquatable<VmWwnAssignedEvent>
    {
        public long[] NodeWwns { get; set; }

        public long[] PortWwns { get; set; }

        public bool Equals(VmWwnAssignedEvent vmWwnAssignedEvent)
        {
            return (vmWwnAssignedEvent != null && ((this.NodeWwns == null && vmWwnAssignedEvent.NodeWwns == null) || (this.NodeWwns != null && vmWwnAssignedEvent.NodeWwns != null && Enumerable.SequenceEqual(this.NodeWwns, vmWwnAssignedEvent.NodeWwns))) && ((this.PortWwns == null && vmWwnAssignedEvent.PortWwns == null) || (this.PortWwns != null && vmWwnAssignedEvent.PortWwns != null && Enumerable.SequenceEqual(this.PortWwns, vmWwnAssignedEvent.PortWwns))));
        }

        public override bool Equals(object vmWwnAssignedEvent)
        {
            return Equals(vmWwnAssignedEvent as VmWwnAssignedEvent);
        }

        public override int GetHashCode()
        {
            return (NodeWwns + "_" + PortWwns).GetHashCode();
        }
    }

    public class VmWwnChangedEvent : VmEvent, IEquatable<VmWwnChangedEvent>
    {
        public long[] OldNodeWwns { get; set; }

        public long[] OldPortWwns { get; set; }

        public long[] NewNodeWwns { get; set; }

        public long[] NewPortWwns { get; set; }

        public bool Equals(VmWwnChangedEvent vmWwnChangedEvent)
        {
            return (vmWwnChangedEvent != null && ((this.OldNodeWwns == null && vmWwnChangedEvent.OldNodeWwns == null) || (this.OldNodeWwns != null && vmWwnChangedEvent.OldNodeWwns != null && Enumerable.SequenceEqual(this.OldNodeWwns, vmWwnChangedEvent.OldNodeWwns))) && ((this.OldPortWwns == null && vmWwnChangedEvent.OldPortWwns == null) || (this.OldPortWwns != null && vmWwnChangedEvent.OldPortWwns != null && Enumerable.SequenceEqual(this.OldPortWwns, vmWwnChangedEvent.OldPortWwns))) && ((this.NewNodeWwns == null && vmWwnChangedEvent.NewNodeWwns == null) || (this.NewNodeWwns != null && vmWwnChangedEvent.NewNodeWwns != null && Enumerable.SequenceEqual(this.NewNodeWwns, vmWwnChangedEvent.NewNodeWwns))) && ((this.NewPortWwns == null && vmWwnChangedEvent.NewPortWwns == null) || (this.NewPortWwns != null && vmWwnChangedEvent.NewPortWwns != null && Enumerable.SequenceEqual(this.NewPortWwns, vmWwnChangedEvent.NewPortWwns))));
        }

        public override bool Equals(object vmWwnChangedEvent)
        {
            return Equals(vmWwnChangedEvent as VmWwnChangedEvent);
        }

        public override int GetHashCode()
        {
            return (OldNodeWwns + "_" + OldPortWwns + "_" + NewNodeWwns + "_" + NewPortWwns).GetHashCode();
        }
    }

    public class VmWwnConflict : InvalidVmConfig, IEquatable<VmWwnConflict>
    {
        public ManagedObjectReference Vm { get; set; }

        public ManagedObjectReference Host { get; set; }

        public string Name { get; set; }

        public long? Wwn { get; set; }

        public VmWwnConflict_LinkedView LinkedView { get; set; }

        public bool Equals(VmWwnConflict vmWwnConflict)
        {
            return (vmWwnConflict != null && ((this.Vm == null && vmWwnConflict.Vm == null) || (this.Vm != null && this.Vm.Equals(vmWwnConflict.Vm))) && ((this.Host == null && vmWwnConflict.Host == null) || (this.Host != null && this.Host.Equals(vmWwnConflict.Host))) && this.Name == vmWwnConflict.Name && ((this.Wwn == null && vmWwnConflict.Wwn == null) || (this.Wwn != null && this.Wwn.Equals(vmWwnConflict.Wwn))) && ((this.LinkedView == null && vmWwnConflict.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vmWwnConflict.LinkedView))));
        }

        public override bool Equals(object vmWwnConflict)
        {
            return Equals(vmWwnConflict as VmWwnConflict);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Host + "_" + Name + "_" + Wwn + "_" + LinkedView).GetHashCode();
        }
    }

    public class VmWwnConflict_LinkedView : IEquatable<VmWwnConflict_LinkedView>
    {
        public VirtualMachine Vm { get; set; }

        public HostSystem Host { get; set; }

        public bool Equals(VmWwnConflict_LinkedView vmWwnConflict_LinkedView)
        {
            return (vmWwnConflict_LinkedView != null && ((this.Vm == null && vmWwnConflict_LinkedView.Vm == null) || (this.Vm != null && this.Vm.Equals(vmWwnConflict_LinkedView.Vm))) && ((this.Host == null && vmWwnConflict_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(vmWwnConflict_LinkedView.Host))));
        }

        public override bool Equals(object vmWwnConflict_LinkedView)
        {
            return Equals(vmWwnConflict_LinkedView as VmWwnConflict_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Vm + "_" + Host).GetHashCode();
        }
    }

    public class VmWwnConflictEvent : VmEvent, IEquatable<VmWwnConflictEvent>
    {
        public VmEventArgument[] ConflictedVms { get; set; }

        public HostEventArgument[] ConflictedHosts { get; set; }

        public long Wwn { get; set; }

        public bool Equals(VmWwnConflictEvent vmWwnConflictEvent)
        {
            return (vmWwnConflictEvent != null && ((this.ConflictedVms == null && vmWwnConflictEvent.ConflictedVms == null) || (this.ConflictedVms != null && vmWwnConflictEvent.ConflictedVms != null && Enumerable.SequenceEqual(this.ConflictedVms, vmWwnConflictEvent.ConflictedVms))) && ((this.ConflictedHosts == null && vmWwnConflictEvent.ConflictedHosts == null) || (this.ConflictedHosts != null && vmWwnConflictEvent.ConflictedHosts != null && Enumerable.SequenceEqual(this.ConflictedHosts, vmWwnConflictEvent.ConflictedHosts))) && this.Wwn == vmWwnConflictEvent.Wwn);
        }

        public override bool Equals(object vmWwnConflictEvent)
        {
            return Equals(vmWwnConflictEvent as VmWwnConflictEvent);
        }

        public override int GetHashCode()
        {
            return (ConflictedVms + "_" + ConflictedHosts + "_" + Wwn).GetHashCode();
        }
    }

    public class VnicPortArgument : DynamicData, IEquatable<VnicPortArgument>
    {
        public string Vnic { get; set; }

        public DistributedVirtualSwitchPortConnection Port { get; set; }

        public bool Equals(VnicPortArgument vnicPortArgument)
        {
            return (vnicPortArgument != null && this.Vnic == vnicPortArgument.Vnic && ((this.Port == null && vnicPortArgument.Port == null) || (this.Port != null && this.Port.Equals(vnicPortArgument.Port))));
        }

        public override bool Equals(object vnicPortArgument)
        {
            return Equals(vnicPortArgument as VnicPortArgument);
        }

        public override int GetHashCode()
        {
            return (Vnic + "_" + Port).GetHashCode();
        }
    }

    public class VolumeEditorError : CustomizationFault, IEquatable<VolumeEditorError>
    {
        public bool Equals(VolumeEditorError volumeEditorError)
        {
            return (volumeEditorError != null && base.Equals(volumeEditorError));
        }

        public override bool Equals(object volumeEditorError)
        {
            return Equals(volumeEditorError as VolumeEditorError);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VramLimitLicense : NotEnoughLicenses, IEquatable<VramLimitLicense>
    {
        public int Limit { get; set; }

        public bool Equals(VramLimitLicense vramLimitLicense)
        {
            return (vramLimitLicense != null && this.Limit == vramLimitLicense.Limit);
        }

        public override bool Equals(object vramLimitLicense)
        {
            return Equals(vramLimitLicense as VramLimitLicense);
        }

        public override int GetHashCode()
        {
            return (Limit).GetHashCode();
        }
    }

    public class VsanClusterConfigInfo : DynamicData, IEquatable<VsanClusterConfigInfo>
    {
        public bool? Enabled { get; set; }

        public VsanClusterConfigInfoHostDefaultInfo DefaultConfig { get; set; }

        public bool Equals(VsanClusterConfigInfo vsanClusterConfigInfo)
        {
            return (vsanClusterConfigInfo != null && ((this.Enabled == null && vsanClusterConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(vsanClusterConfigInfo.Enabled))) && ((this.DefaultConfig == null && vsanClusterConfigInfo.DefaultConfig == null) || (this.DefaultConfig != null && this.DefaultConfig.Equals(vsanClusterConfigInfo.DefaultConfig))));
        }

        public override bool Equals(object vsanClusterConfigInfo)
        {
            return Equals(vsanClusterConfigInfo as VsanClusterConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + DefaultConfig).GetHashCode();
        }
    }

    public class VsanClusterConfigInfoHostDefaultInfo : DynamicData, IEquatable<VsanClusterConfigInfoHostDefaultInfo>
    {
        public string Uuid { get; set; }

        public bool? AutoClaimStorage { get; set; }

        public bool? ChecksumEnabled { get; set; }

        public bool Equals(VsanClusterConfigInfoHostDefaultInfo vsanClusterConfigInfoHostDefaultInfo)
        {
            return (vsanClusterConfigInfoHostDefaultInfo != null && this.Uuid == vsanClusterConfigInfoHostDefaultInfo.Uuid && ((this.AutoClaimStorage == null && vsanClusterConfigInfoHostDefaultInfo.AutoClaimStorage == null) || (this.AutoClaimStorage != null && this.AutoClaimStorage.Equals(vsanClusterConfigInfoHostDefaultInfo.AutoClaimStorage))) && ((this.ChecksumEnabled == null && vsanClusterConfigInfoHostDefaultInfo.ChecksumEnabled == null) || (this.ChecksumEnabled != null && this.ChecksumEnabled.Equals(vsanClusterConfigInfoHostDefaultInfo.ChecksumEnabled))));
        }

        public override bool Equals(object vsanClusterConfigInfoHostDefaultInfo)
        {
            return Equals(vsanClusterConfigInfoHostDefaultInfo as VsanClusterConfigInfoHostDefaultInfo);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + AutoClaimStorage + "_" + ChecksumEnabled).GetHashCode();
        }
    }

    public class VsanClusterUuidMismatch : CannotMoveVsanEnabledHost, IEquatable<VsanClusterUuidMismatch>
    {
        public string HostClusterUuid { get; set; }

        public string DestinationClusterUuid { get; set; }

        public bool Equals(VsanClusterUuidMismatch vsanClusterUuidMismatch)
        {
            return (vsanClusterUuidMismatch != null && this.HostClusterUuid == vsanClusterUuidMismatch.HostClusterUuid && this.DestinationClusterUuid == vsanClusterUuidMismatch.DestinationClusterUuid);
        }

        public override bool Equals(object vsanClusterUuidMismatch)
        {
            return Equals(vsanClusterUuidMismatch as VsanClusterUuidMismatch);
        }

        public override int GetHashCode()
        {
            return (HostClusterUuid + "_" + DestinationClusterUuid).GetHashCode();
        }
    }

    public class VsanDiskFault : VsanFault, IEquatable<VsanDiskFault>
    {
        public string Device { get; set; }

        public bool Equals(VsanDiskFault vsanDiskFault)
        {
            return (vsanDiskFault != null && this.Device == vsanDiskFault.Device);
        }

        public override bool Equals(object vsanDiskFault)
        {
            return Equals(vsanDiskFault as VsanDiskFault);
        }

        public override int GetHashCode()
        {
            return (Device).GetHashCode();
        }
    }

    public class VsanFault : VimFault, IEquatable<VsanFault>
    {
        public bool Equals(VsanFault vsanFault)
        {
            return (vsanFault != null && base.Equals(vsanFault));
        }

        public override bool Equals(object vsanFault)
        {
            return Equals(vsanFault as VsanFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VsanHostClusterStatus : DynamicData, IEquatable<VsanHostClusterStatus>
    {
        public string Uuid { get; set; }

        public string NodeUuid { get; set; }

        public string Health { get; set; }

        public VsanHostClusterStatusState NodeState { get; set; }

        public string[] MemberUuid { get; set; }

        public bool Equals(VsanHostClusterStatus vsanHostClusterStatus)
        {
            return (vsanHostClusterStatus != null && this.Uuid == vsanHostClusterStatus.Uuid && this.NodeUuid == vsanHostClusterStatus.NodeUuid && this.Health == vsanHostClusterStatus.Health && ((this.NodeState == null && vsanHostClusterStatus.NodeState == null) || (this.NodeState != null && this.NodeState.Equals(vsanHostClusterStatus.NodeState))) && ((this.MemberUuid == null && vsanHostClusterStatus.MemberUuid == null) || (this.MemberUuid != null && vsanHostClusterStatus.MemberUuid != null && Enumerable.SequenceEqual(this.MemberUuid, vsanHostClusterStatus.MemberUuid))));
        }

        public override bool Equals(object vsanHostClusterStatus)
        {
            return Equals(vsanHostClusterStatus as VsanHostClusterStatus);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + NodeUuid + "_" + Health + "_" + NodeState + "_" + MemberUuid).GetHashCode();
        }
    }

    public class VsanHostClusterStatusState : DynamicData, IEquatable<VsanHostClusterStatusState>
    {
        public string State { get; set; }

        public VsanHostClusterStatusStateCompletionEstimate Completion { get; set; }

        public bool Equals(VsanHostClusterStatusState vsanHostClusterStatusState)
        {
            return (vsanHostClusterStatusState != null && this.State == vsanHostClusterStatusState.State && ((this.Completion == null && vsanHostClusterStatusState.Completion == null) || (this.Completion != null && this.Completion.Equals(vsanHostClusterStatusState.Completion))));
        }

        public override bool Equals(object vsanHostClusterStatusState)
        {
            return Equals(vsanHostClusterStatusState as VsanHostClusterStatusState);
        }

        public override int GetHashCode()
        {
            return (State + "_" + Completion).GetHashCode();
        }
    }

    public class VsanHostClusterStatusStateCompletionEstimate : DynamicData, IEquatable<VsanHostClusterStatusStateCompletionEstimate>
    {
        public DateTime? CompleteTime { get; set; }

        public int? PercentComplete { get; set; }

        public bool Equals(VsanHostClusterStatusStateCompletionEstimate vsanHostClusterStatusStateCompletionEstimate)
        {
            return (vsanHostClusterStatusStateCompletionEstimate != null && ((this.CompleteTime == null && vsanHostClusterStatusStateCompletionEstimate.CompleteTime == null) || (this.CompleteTime != null && this.CompleteTime.Equals(vsanHostClusterStatusStateCompletionEstimate.CompleteTime))) && ((this.PercentComplete == null && vsanHostClusterStatusStateCompletionEstimate.PercentComplete == null) || (this.PercentComplete != null && this.PercentComplete.Equals(vsanHostClusterStatusStateCompletionEstimate.PercentComplete))));
        }

        public override bool Equals(object vsanHostClusterStatusStateCompletionEstimate)
        {
            return Equals(vsanHostClusterStatusStateCompletionEstimate as VsanHostClusterStatusStateCompletionEstimate);
        }

        public override int GetHashCode()
        {
            return (CompleteTime + "_" + PercentComplete).GetHashCode();
        }
    }

    public class VsanHostConfigInfo : DynamicData, IEquatable<VsanHostConfigInfo>
    {
        public bool? Enabled { get; set; }

        public ManagedObjectReference HostSystem { get; set; }

        public VsanHostConfigInfoClusterInfo ClusterInfo { get; set; }

        public VsanHostConfigInfoStorageInfo StorageInfo { get; set; }

        public VsanHostConfigInfoNetworkInfo NetworkInfo { get; set; }

        public VsanHostFaultDomainInfo FaultDomainInfo { get; set; }

        public VsanHostConfigInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VsanHostConfigInfo vsanHostConfigInfo)
        {
            return (vsanHostConfigInfo != null && ((this.Enabled == null && vsanHostConfigInfo.Enabled == null) || (this.Enabled != null && this.Enabled.Equals(vsanHostConfigInfo.Enabled))) && ((this.HostSystem == null && vsanHostConfigInfo.HostSystem == null) || (this.HostSystem != null && this.HostSystem.Equals(vsanHostConfigInfo.HostSystem))) && ((this.ClusterInfo == null && vsanHostConfigInfo.ClusterInfo == null) || (this.ClusterInfo != null && this.ClusterInfo.Equals(vsanHostConfigInfo.ClusterInfo))) && ((this.StorageInfo == null && vsanHostConfigInfo.StorageInfo == null) || (this.StorageInfo != null && this.StorageInfo.Equals(vsanHostConfigInfo.StorageInfo))) && ((this.NetworkInfo == null && vsanHostConfigInfo.NetworkInfo == null) || (this.NetworkInfo != null && this.NetworkInfo.Equals(vsanHostConfigInfo.NetworkInfo))) && ((this.FaultDomainInfo == null && vsanHostConfigInfo.FaultDomainInfo == null) || (this.FaultDomainInfo != null && this.FaultDomainInfo.Equals(vsanHostConfigInfo.FaultDomainInfo))) && ((this.LinkedView == null && vsanHostConfigInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanHostConfigInfo.LinkedView))));
        }

        public override bool Equals(object vsanHostConfigInfo)
        {
            return Equals(vsanHostConfigInfo as VsanHostConfigInfo);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + HostSystem + "_" + ClusterInfo + "_" + StorageInfo + "_" + NetworkInfo + "_" + FaultDomainInfo + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanHostConfigInfo_LinkedView : IEquatable<VsanHostConfigInfo_LinkedView>
    {
        public HostSystem HostSystem { get; set; }

        public bool Equals(VsanHostConfigInfo_LinkedView vsanHostConfigInfo_LinkedView)
        {
            return (vsanHostConfigInfo_LinkedView != null && ((this.HostSystem == null && vsanHostConfigInfo_LinkedView.HostSystem == null) || (this.HostSystem != null && this.HostSystem.Equals(vsanHostConfigInfo_LinkedView.HostSystem))));
        }

        public override bool Equals(object vsanHostConfigInfo_LinkedView)
        {
            return Equals(vsanHostConfigInfo_LinkedView as VsanHostConfigInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (HostSystem).GetHashCode();
        }
    }

    public class VsanHostConfigInfoClusterInfo : DynamicData, IEquatable<VsanHostConfigInfoClusterInfo>
    {
        public string Uuid { get; set; }

        public string NodeUuid { get; set; }

        public bool Equals(VsanHostConfigInfoClusterInfo vsanHostConfigInfoClusterInfo)
        {
            return (vsanHostConfigInfoClusterInfo != null && this.Uuid == vsanHostConfigInfoClusterInfo.Uuid && this.NodeUuid == vsanHostConfigInfoClusterInfo.NodeUuid);
        }

        public override bool Equals(object vsanHostConfigInfoClusterInfo)
        {
            return Equals(vsanHostConfigInfoClusterInfo as VsanHostConfigInfoClusterInfo);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + NodeUuid).GetHashCode();
        }
    }

    public class VsanHostConfigInfoNetworkInfo : DynamicData, IEquatable<VsanHostConfigInfoNetworkInfo>
    {
        public VsanHostConfigInfoNetworkInfoPortConfig[] Port { get; set; }

        public bool Equals(VsanHostConfigInfoNetworkInfo vsanHostConfigInfoNetworkInfo)
        {
            return (vsanHostConfigInfoNetworkInfo != null && ((this.Port == null && vsanHostConfigInfoNetworkInfo.Port == null) || (this.Port != null && vsanHostConfigInfoNetworkInfo.Port != null && Enumerable.SequenceEqual(this.Port, vsanHostConfigInfoNetworkInfo.Port))));
        }

        public override bool Equals(object vsanHostConfigInfoNetworkInfo)
        {
            return Equals(vsanHostConfigInfoNetworkInfo as VsanHostConfigInfoNetworkInfo);
        }

        public override int GetHashCode()
        {
            return (Port).GetHashCode();
        }
    }

    public class VsanHostConfigInfoNetworkInfoPortConfig : DynamicData, IEquatable<VsanHostConfigInfoNetworkInfoPortConfig>
    {
        public VsanHostIpConfig IpConfig { get; set; }

        public string Device { get; set; }

        public bool Equals(VsanHostConfigInfoNetworkInfoPortConfig vsanHostConfigInfoNetworkInfoPortConfig)
        {
            return (vsanHostConfigInfoNetworkInfoPortConfig != null && ((this.IpConfig == null && vsanHostConfigInfoNetworkInfoPortConfig.IpConfig == null) || (this.IpConfig != null && this.IpConfig.Equals(vsanHostConfigInfoNetworkInfoPortConfig.IpConfig))) && this.Device == vsanHostConfigInfoNetworkInfoPortConfig.Device);
        }

        public override bool Equals(object vsanHostConfigInfoNetworkInfoPortConfig)
        {
            return Equals(vsanHostConfigInfoNetworkInfoPortConfig as VsanHostConfigInfoNetworkInfoPortConfig);
        }

        public override int GetHashCode()
        {
            return (IpConfig + "_" + Device).GetHashCode();
        }
    }

    public class VsanHostConfigInfoStorageInfo : DynamicData, IEquatable<VsanHostConfigInfoStorageInfo>
    {
        public bool? AutoClaimStorage { get; set; }

        public VsanHostDiskMapping[] DiskMapping { get; set; }

        public VsanHostDiskMapInfo[] DiskMapInfo { get; set; }

        public bool? ChecksumEnabled { get; set; }

        public bool Equals(VsanHostConfigInfoStorageInfo vsanHostConfigInfoStorageInfo)
        {
            return (vsanHostConfigInfoStorageInfo != null && ((this.AutoClaimStorage == null && vsanHostConfigInfoStorageInfo.AutoClaimStorage == null) || (this.AutoClaimStorage != null && this.AutoClaimStorage.Equals(vsanHostConfigInfoStorageInfo.AutoClaimStorage))) && ((this.DiskMapping == null && vsanHostConfigInfoStorageInfo.DiskMapping == null) || (this.DiskMapping != null && vsanHostConfigInfoStorageInfo.DiskMapping != null && Enumerable.SequenceEqual(this.DiskMapping, vsanHostConfigInfoStorageInfo.DiskMapping))) && ((this.DiskMapInfo == null && vsanHostConfigInfoStorageInfo.DiskMapInfo == null) || (this.DiskMapInfo != null && vsanHostConfigInfoStorageInfo.DiskMapInfo != null && Enumerable.SequenceEqual(this.DiskMapInfo, vsanHostConfigInfoStorageInfo.DiskMapInfo))) && ((this.ChecksumEnabled == null && vsanHostConfigInfoStorageInfo.ChecksumEnabled == null) || (this.ChecksumEnabled != null && this.ChecksumEnabled.Equals(vsanHostConfigInfoStorageInfo.ChecksumEnabled))));
        }

        public override bool Equals(object vsanHostConfigInfoStorageInfo)
        {
            return Equals(vsanHostConfigInfoStorageInfo as VsanHostConfigInfoStorageInfo);
        }

        public override int GetHashCode()
        {
            return (AutoClaimStorage + "_" + DiskMapping + "_" + DiskMapInfo + "_" + ChecksumEnabled).GetHashCode();
        }
    }

    public class VsanHostDecommissionMode : DynamicData, IEquatable<VsanHostDecommissionMode>
    {
        public string ObjectAction { get; set; }

        public bool Equals(VsanHostDecommissionMode vsanHostDecommissionMode)
        {
            return (vsanHostDecommissionMode != null && this.ObjectAction == vsanHostDecommissionMode.ObjectAction);
        }

        public override bool Equals(object vsanHostDecommissionMode)
        {
            return Equals(vsanHostDecommissionMode as VsanHostDecommissionMode);
        }

        public override int GetHashCode()
        {
            return (ObjectAction).GetHashCode();
        }
    }

    public class VsanHostDiskMapInfo : DynamicData, IEquatable<VsanHostDiskMapInfo>
    {
        public VsanHostDiskMapping Mapping { get; set; }

        public bool Mounted { get; set; }

        public bool Equals(VsanHostDiskMapInfo vsanHostDiskMapInfo)
        {
            return (vsanHostDiskMapInfo != null && ((this.Mapping == null && vsanHostDiskMapInfo.Mapping == null) || (this.Mapping != null && this.Mapping.Equals(vsanHostDiskMapInfo.Mapping))) && this.Mounted == vsanHostDiskMapInfo.Mounted);
        }

        public override bool Equals(object vsanHostDiskMapInfo)
        {
            return Equals(vsanHostDiskMapInfo as VsanHostDiskMapInfo);
        }

        public override int GetHashCode()
        {
            return (Mapping + "_" + Mounted).GetHashCode();
        }
    }

    public class VsanHostDiskMapping : DynamicData, IEquatable<VsanHostDiskMapping>
    {
        public HostScsiDisk Ssd { get; set; }

        public HostScsiDisk[] NonSsd { get; set; }

        public bool Equals(VsanHostDiskMapping vsanHostDiskMapping)
        {
            return (vsanHostDiskMapping != null && ((this.Ssd == null && vsanHostDiskMapping.Ssd == null) || (this.Ssd != null && this.Ssd.Equals(vsanHostDiskMapping.Ssd))) && ((this.NonSsd == null && vsanHostDiskMapping.NonSsd == null) || (this.NonSsd != null && vsanHostDiskMapping.NonSsd != null && Enumerable.SequenceEqual(this.NonSsd, vsanHostDiskMapping.NonSsd))));
        }

        public override bool Equals(object vsanHostDiskMapping)
        {
            return Equals(vsanHostDiskMapping as VsanHostDiskMapping);
        }

        public override int GetHashCode()
        {
            return (Ssd + "_" + NonSsd).GetHashCode();
        }
    }

    public class VsanHostDiskMapResult : DynamicData, IEquatable<VsanHostDiskMapResult>
    {
        public VsanHostDiskMapping Mapping { get; set; }

        public VsanHostDiskResult[] DiskResult { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public bool Equals(VsanHostDiskMapResult vsanHostDiskMapResult)
        {
            return (vsanHostDiskMapResult != null && ((this.Mapping == null && vsanHostDiskMapResult.Mapping == null) || (this.Mapping != null && this.Mapping.Equals(vsanHostDiskMapResult.Mapping))) && ((this.DiskResult == null && vsanHostDiskMapResult.DiskResult == null) || (this.DiskResult != null && vsanHostDiskMapResult.DiskResult != null && Enumerable.SequenceEqual(this.DiskResult, vsanHostDiskMapResult.DiskResult))) && ((this.Error == null && vsanHostDiskMapResult.Error == null) || (this.Error != null && this.Error.Equals(vsanHostDiskMapResult.Error))));
        }

        public override bool Equals(object vsanHostDiskMapResult)
        {
            return Equals(vsanHostDiskMapResult as VsanHostDiskMapResult);
        }

        public override int GetHashCode()
        {
            return (Mapping + "_" + DiskResult + "_" + Error).GetHashCode();
        }
    }

    public class VsanHostDiskResult : DynamicData, IEquatable<VsanHostDiskResult>
    {
        public HostScsiDisk Disk { get; set; }

        public string State { get; set; }

        public string VsanUuid { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public bool? Degraded { get; set; }

        public bool Equals(VsanHostDiskResult vsanHostDiskResult)
        {
            return (vsanHostDiskResult != null && ((this.Disk == null && vsanHostDiskResult.Disk == null) || (this.Disk != null && this.Disk.Equals(vsanHostDiskResult.Disk))) && this.State == vsanHostDiskResult.State && this.VsanUuid == vsanHostDiskResult.VsanUuid && ((this.Error == null && vsanHostDiskResult.Error == null) || (this.Error != null && this.Error.Equals(vsanHostDiskResult.Error))) && ((this.Degraded == null && vsanHostDiskResult.Degraded == null) || (this.Degraded != null && this.Degraded.Equals(vsanHostDiskResult.Degraded))));
        }

        public override bool Equals(object vsanHostDiskResult)
        {
            return Equals(vsanHostDiskResult as VsanHostDiskResult);
        }

        public override int GetHashCode()
        {
            return (Disk + "_" + State + "_" + VsanUuid + "_" + Error + "_" + Degraded).GetHashCode();
        }
    }

    public class VsanHostFaultDomainInfo : DynamicData, IEquatable<VsanHostFaultDomainInfo>
    {
        public string Name { get; set; }

        public bool Equals(VsanHostFaultDomainInfo vsanHostFaultDomainInfo)
        {
            return (vsanHostFaultDomainInfo != null && this.Name == vsanHostFaultDomainInfo.Name);
        }

        public override bool Equals(object vsanHostFaultDomainInfo)
        {
            return Equals(vsanHostFaultDomainInfo as VsanHostFaultDomainInfo);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class VsanHostIpConfig : DynamicData, IEquatable<VsanHostIpConfig>
    {
        public string UpstreamIpAddress { get; set; }

        public string DownstreamIpAddress { get; set; }

        public bool Equals(VsanHostIpConfig vsanHostIpConfig)
        {
            return (vsanHostIpConfig != null && this.UpstreamIpAddress == vsanHostIpConfig.UpstreamIpAddress && this.DownstreamIpAddress == vsanHostIpConfig.DownstreamIpAddress);
        }

        public override bool Equals(object vsanHostIpConfig)
        {
            return Equals(vsanHostIpConfig as VsanHostIpConfig);
        }

        public override int GetHashCode()
        {
            return (UpstreamIpAddress + "_" + DownstreamIpAddress).GetHashCode();
        }
    }

    public class VsanHostMembershipInfo : DynamicData, IEquatable<VsanHostMembershipInfo>
    {
        public string NodeUuid { get; set; }

        public string Hostname { get; set; }

        public bool Equals(VsanHostMembershipInfo vsanHostMembershipInfo)
        {
            return (vsanHostMembershipInfo != null && this.NodeUuid == vsanHostMembershipInfo.NodeUuid && this.Hostname == vsanHostMembershipInfo.Hostname);
        }

        public override bool Equals(object vsanHostMembershipInfo)
        {
            return Equals(vsanHostMembershipInfo as VsanHostMembershipInfo);
        }

        public override int GetHashCode()
        {
            return (NodeUuid + "_" + Hostname).GetHashCode();
        }
    }

    public class VsanHostRuntimeInfo : DynamicData, IEquatable<VsanHostRuntimeInfo>
    {
        public VsanHostMembershipInfo[] MembershipList { get; set; }

        public VsanHostRuntimeInfoDiskIssue[] DiskIssues { get; set; }

        public int? AccessGenNo { get; set; }

        public bool Equals(VsanHostRuntimeInfo vsanHostRuntimeInfo)
        {
            return (vsanHostRuntimeInfo != null && ((this.MembershipList == null && vsanHostRuntimeInfo.MembershipList == null) || (this.MembershipList != null && vsanHostRuntimeInfo.MembershipList != null && Enumerable.SequenceEqual(this.MembershipList, vsanHostRuntimeInfo.MembershipList))) && ((this.DiskIssues == null && vsanHostRuntimeInfo.DiskIssues == null) || (this.DiskIssues != null && vsanHostRuntimeInfo.DiskIssues != null && Enumerable.SequenceEqual(this.DiskIssues, vsanHostRuntimeInfo.DiskIssues))) && ((this.AccessGenNo == null && vsanHostRuntimeInfo.AccessGenNo == null) || (this.AccessGenNo != null && this.AccessGenNo.Equals(vsanHostRuntimeInfo.AccessGenNo))));
        }

        public override bool Equals(object vsanHostRuntimeInfo)
        {
            return Equals(vsanHostRuntimeInfo as VsanHostRuntimeInfo);
        }

        public override int GetHashCode()
        {
            return (MembershipList + "_" + DiskIssues + "_" + AccessGenNo).GetHashCode();
        }
    }

    public class VsanHostRuntimeInfoDiskIssue : DynamicData, IEquatable<VsanHostRuntimeInfoDiskIssue>
    {
        public string DiskId { get; set; }

        public string Issue { get; set; }

        public bool Equals(VsanHostRuntimeInfoDiskIssue vsanHostRuntimeInfoDiskIssue)
        {
            return (vsanHostRuntimeInfoDiskIssue != null && this.DiskId == vsanHostRuntimeInfoDiskIssue.DiskId && this.Issue == vsanHostRuntimeInfoDiskIssue.Issue);
        }

        public override bool Equals(object vsanHostRuntimeInfoDiskIssue)
        {
            return Equals(vsanHostRuntimeInfoDiskIssue as VsanHostRuntimeInfoDiskIssue);
        }

        public override int GetHashCode()
        {
            return (DiskId + "_" + Issue).GetHashCode();
        }
    }

    public class VsanHostVsanDiskInfo : DynamicData, IEquatable<VsanHostVsanDiskInfo>
    {
        public string VsanUuid { get; set; }

        public int FormatVersion { get; set; }

        public bool Equals(VsanHostVsanDiskInfo vsanHostVsanDiskInfo)
        {
            return (vsanHostVsanDiskInfo != null && this.VsanUuid == vsanHostVsanDiskInfo.VsanUuid && this.FormatVersion == vsanHostVsanDiskInfo.FormatVersion);
        }

        public override bool Equals(object vsanHostVsanDiskInfo)
        {
            return Equals(vsanHostVsanDiskInfo as VsanHostVsanDiskInfo);
        }

        public override int GetHashCode()
        {
            return (VsanUuid + "_" + FormatVersion).GetHashCode();
        }
    }

    public class VsanIncompatibleDiskMapping : VsanDiskFault, IEquatable<VsanIncompatibleDiskMapping>
    {
        public bool Equals(VsanIncompatibleDiskMapping vsanIncompatibleDiskMapping)
        {
            return (vsanIncompatibleDiskMapping != null && base.Equals(vsanIncompatibleDiskMapping));
        }

        public override bool Equals(object vsanIncompatibleDiskMapping)
        {
            return Equals(vsanIncompatibleDiskMapping as VsanIncompatibleDiskMapping);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VsanNewPolicyBatch : DynamicData, IEquatable<VsanNewPolicyBatch>
    {
        public long[] Size { get; set; }

        public string Policy { get; set; }

        public bool Equals(VsanNewPolicyBatch vsanNewPolicyBatch)
        {
            return (vsanNewPolicyBatch != null && ((this.Size == null && vsanNewPolicyBatch.Size == null) || (this.Size != null && vsanNewPolicyBatch.Size != null && Enumerable.SequenceEqual(this.Size, vsanNewPolicyBatch.Size))) && this.Policy == vsanNewPolicyBatch.Policy);
        }

        public override bool Equals(object vsanNewPolicyBatch)
        {
            return Equals(vsanNewPolicyBatch as VsanNewPolicyBatch);
        }

        public override int GetHashCode()
        {
            return (Size + "_" + Policy).GetHashCode();
        }
    }

    public class VsanPolicyChangeBatch : DynamicData, IEquatable<VsanPolicyChangeBatch>
    {
        public string[] Uuid { get; set; }

        public string Policy { get; set; }

        public bool Equals(VsanPolicyChangeBatch vsanPolicyChangeBatch)
        {
            return (vsanPolicyChangeBatch != null && ((this.Uuid == null && vsanPolicyChangeBatch.Uuid == null) || (this.Uuid != null && vsanPolicyChangeBatch.Uuid != null && Enumerable.SequenceEqual(this.Uuid, vsanPolicyChangeBatch.Uuid))) && this.Policy == vsanPolicyChangeBatch.Policy);
        }

        public override bool Equals(object vsanPolicyChangeBatch)
        {
            return Equals(vsanPolicyChangeBatch as VsanPolicyChangeBatch);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + Policy).GetHashCode();
        }
    }

    public class VsanPolicyCost : DynamicData, IEquatable<VsanPolicyCost>
    {
        public long? ChangeDataSize { get; set; }

        public long? CurrentDataSize { get; set; }

        public long? TempDataSize { get; set; }

        public long? CopyDataSize { get; set; }

        public long? ChangeFlashReadCacheSize { get; set; }

        public long? CurrentFlashReadCacheSize { get; set; }

        public float? CurrentDiskSpaceToAddressSpaceRatio { get; set; }

        public float? DiskSpaceToAddressSpaceRatio { get; set; }

        public bool Equals(VsanPolicyCost vsanPolicyCost)
        {
            return (vsanPolicyCost != null && ((this.ChangeDataSize == null && vsanPolicyCost.ChangeDataSize == null) || (this.ChangeDataSize != null && this.ChangeDataSize.Equals(vsanPolicyCost.ChangeDataSize))) && ((this.CurrentDataSize == null && vsanPolicyCost.CurrentDataSize == null) || (this.CurrentDataSize != null && this.CurrentDataSize.Equals(vsanPolicyCost.CurrentDataSize))) && ((this.TempDataSize == null && vsanPolicyCost.TempDataSize == null) || (this.TempDataSize != null && this.TempDataSize.Equals(vsanPolicyCost.TempDataSize))) && ((this.CopyDataSize == null && vsanPolicyCost.CopyDataSize == null) || (this.CopyDataSize != null && this.CopyDataSize.Equals(vsanPolicyCost.CopyDataSize))) && ((this.ChangeFlashReadCacheSize == null && vsanPolicyCost.ChangeFlashReadCacheSize == null) || (this.ChangeFlashReadCacheSize != null && this.ChangeFlashReadCacheSize.Equals(vsanPolicyCost.ChangeFlashReadCacheSize))) && ((this.CurrentFlashReadCacheSize == null && vsanPolicyCost.CurrentFlashReadCacheSize == null) || (this.CurrentFlashReadCacheSize != null && this.CurrentFlashReadCacheSize.Equals(vsanPolicyCost.CurrentFlashReadCacheSize))) && ((this.CurrentDiskSpaceToAddressSpaceRatio == null && vsanPolicyCost.CurrentDiskSpaceToAddressSpaceRatio == null) || (this.CurrentDiskSpaceToAddressSpaceRatio != null && this.CurrentDiskSpaceToAddressSpaceRatio.Equals(vsanPolicyCost.CurrentDiskSpaceToAddressSpaceRatio))) && ((this.DiskSpaceToAddressSpaceRatio == null && vsanPolicyCost.DiskSpaceToAddressSpaceRatio == null) || (this.DiskSpaceToAddressSpaceRatio != null && this.DiskSpaceToAddressSpaceRatio.Equals(vsanPolicyCost.DiskSpaceToAddressSpaceRatio))));
        }

        public override bool Equals(object vsanPolicyCost)
        {
            return Equals(vsanPolicyCost as VsanPolicyCost);
        }

        public override int GetHashCode()
        {
            return (ChangeDataSize + "_" + CurrentDataSize + "_" + TempDataSize + "_" + CopyDataSize + "_" + ChangeFlashReadCacheSize + "_" + CurrentFlashReadCacheSize + "_" + CurrentDiskSpaceToAddressSpaceRatio + "_" + DiskSpaceToAddressSpaceRatio).GetHashCode();
        }
    }

    public class VsanPolicySatisfiability : DynamicData, IEquatable<VsanPolicySatisfiability>
    {
        public string Uuid { get; set; }

        public bool IsSatisfiable { get; set; }

        public LocalizableMessage Reason { get; set; }

        public VsanPolicyCost Cost { get; set; }

        public bool Equals(VsanPolicySatisfiability vsanPolicySatisfiability)
        {
            return (vsanPolicySatisfiability != null && this.Uuid == vsanPolicySatisfiability.Uuid && this.IsSatisfiable == vsanPolicySatisfiability.IsSatisfiable && ((this.Reason == null && vsanPolicySatisfiability.Reason == null) || (this.Reason != null && this.Reason.Equals(vsanPolicySatisfiability.Reason))) && ((this.Cost == null && vsanPolicySatisfiability.Cost == null) || (this.Cost != null && this.Cost.Equals(vsanPolicySatisfiability.Cost))));
        }

        public override bool Equals(object vsanPolicySatisfiability)
        {
            return Equals(vsanPolicySatisfiability as VsanPolicySatisfiability);
        }

        public override int GetHashCode()
        {
            return (Uuid + "_" + IsSatisfiable + "_" + Reason + "_" + Cost).GetHashCode();
        }
    }

    public class VsanUpgradeSystem : ViewBase, IEquatable<VsanUpgradeSystem>
    {
        public VsanUpgradeSystemPreflightCheckResult PerformVsanUpgradePreflightCheck(ManagedObjectReference cluster, bool? downgradeFormat)
        {
            return default(VsanUpgradeSystemPreflightCheckResult);
        }

        public VsanUpgradeSystemUpgradeStatus QueryVsanUpgradeStatus(ManagedObjectReference cluster)
        {
            return default(VsanUpgradeSystemUpgradeStatus);
        }

        public ManagedObjectReference PerformVsanUpgrade_Task(ManagedObjectReference cluster, bool? performObjectUpgrade, bool? downgradeFormat, bool? allowReducedRedundancy, ManagedObjectReference[] excludeHosts)
        {
            return default(ManagedObjectReference);
        }

        public VsanUpgradeSystemUpgradeStatus PerformVsanUpgrade(ManagedObjectReference cluster, bool? performObjectUpgrade, bool? downgradeFormat, bool? allowReducedRedundancy, ManagedObjectReference[] excludeHosts)
        {
            return default(VsanUpgradeSystemUpgradeStatus);
        }

        public bool Equals(VsanUpgradeSystem vsanUpgradeSystem)
        {
            return (vsanUpgradeSystem != null && base.Equals(vsanUpgradeSystem));
        }

        public override bool Equals(object vsanUpgradeSystem)
        {
            return Equals(vsanUpgradeSystem as VsanUpgradeSystem);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VsanUpgradeSystemAPIBrokenIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemAPIBrokenIssue>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemAPIBrokenIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemAPIBrokenIssue vsanUpgradeSystemAPIBrokenIssue)
        {
            return (vsanUpgradeSystemAPIBrokenIssue != null && ((this.Hosts == null && vsanUpgradeSystemAPIBrokenIssue.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemAPIBrokenIssue.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemAPIBrokenIssue.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemAPIBrokenIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemAPIBrokenIssue.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemAPIBrokenIssue)
        {
            return Equals(vsanUpgradeSystemAPIBrokenIssue as VsanUpgradeSystemAPIBrokenIssue);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemAPIBrokenIssue_LinkedView : IEquatable<VsanUpgradeSystemAPIBrokenIssue_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemAPIBrokenIssue_LinkedView vsanUpgradeSystemAPIBrokenIssue_LinkedView)
        {
            return (vsanUpgradeSystemAPIBrokenIssue_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemAPIBrokenIssue_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemAPIBrokenIssue_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemAPIBrokenIssue_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemAPIBrokenIssue_LinkedView)
        {
            return Equals(vsanUpgradeSystemAPIBrokenIssue_LinkedView as VsanUpgradeSystemAPIBrokenIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VsanUpgradeSystemAutoClaimEnabledOnHostsIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemAutoClaimEnabledOnHostsIssue>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemAutoClaimEnabledOnHostsIssue vsanUpgradeSystemAutoClaimEnabledOnHostsIssue)
        {
            return (vsanUpgradeSystemAutoClaimEnabledOnHostsIssue != null && ((this.Hosts == null && vsanUpgradeSystemAutoClaimEnabledOnHostsIssue.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemAutoClaimEnabledOnHostsIssue.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemAutoClaimEnabledOnHostsIssue.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemAutoClaimEnabledOnHostsIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemAutoClaimEnabledOnHostsIssue.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemAutoClaimEnabledOnHostsIssue)
        {
            return Equals(vsanUpgradeSystemAutoClaimEnabledOnHostsIssue as VsanUpgradeSystemAutoClaimEnabledOnHostsIssue);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView : IEquatable<VsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView)
        {
            return (vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView)
        {
            return Equals(vsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView as VsanUpgradeSystemAutoClaimEnabledOnHostsIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VsanUpgradeSystemHostsDisconnectedIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemHostsDisconnectedIssue>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemHostsDisconnectedIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemHostsDisconnectedIssue vsanUpgradeSystemHostsDisconnectedIssue)
        {
            return (vsanUpgradeSystemHostsDisconnectedIssue != null && ((this.Hosts == null && vsanUpgradeSystemHostsDisconnectedIssue.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemHostsDisconnectedIssue.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemHostsDisconnectedIssue.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemHostsDisconnectedIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemHostsDisconnectedIssue.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemHostsDisconnectedIssue)
        {
            return Equals(vsanUpgradeSystemHostsDisconnectedIssue as VsanUpgradeSystemHostsDisconnectedIssue);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemHostsDisconnectedIssue_LinkedView : IEquatable<VsanUpgradeSystemHostsDisconnectedIssue_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemHostsDisconnectedIssue_LinkedView vsanUpgradeSystemHostsDisconnectedIssue_LinkedView)
        {
            return (vsanUpgradeSystemHostsDisconnectedIssue_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemHostsDisconnectedIssue_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemHostsDisconnectedIssue_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemHostsDisconnectedIssue_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemHostsDisconnectedIssue_LinkedView)
        {
            return Equals(vsanUpgradeSystemHostsDisconnectedIssue_LinkedView as VsanUpgradeSystemHostsDisconnectedIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VsanUpgradeSystemMissingHostsInClusterIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemMissingHostsInClusterIssue>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemMissingHostsInClusterIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemMissingHostsInClusterIssue vsanUpgradeSystemMissingHostsInClusterIssue)
        {
            return (vsanUpgradeSystemMissingHostsInClusterIssue != null && ((this.Hosts == null && vsanUpgradeSystemMissingHostsInClusterIssue.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemMissingHostsInClusterIssue.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemMissingHostsInClusterIssue.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemMissingHostsInClusterIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemMissingHostsInClusterIssue.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemMissingHostsInClusterIssue)
        {
            return Equals(vsanUpgradeSystemMissingHostsInClusterIssue as VsanUpgradeSystemMissingHostsInClusterIssue);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemMissingHostsInClusterIssue_LinkedView : IEquatable<VsanUpgradeSystemMissingHostsInClusterIssue_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemMissingHostsInClusterIssue_LinkedView vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView)
        {
            return (vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView)
        {
            return Equals(vsanUpgradeSystemMissingHostsInClusterIssue_LinkedView as VsanUpgradeSystemMissingHostsInClusterIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VsanUpgradeSystemNetworkPartitionInfo : DynamicData, IEquatable<VsanUpgradeSystemNetworkPartitionInfo>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemNetworkPartitionInfo_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemNetworkPartitionInfo vsanUpgradeSystemNetworkPartitionInfo)
        {
            return (vsanUpgradeSystemNetworkPartitionInfo != null && ((this.Hosts == null && vsanUpgradeSystemNetworkPartitionInfo.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemNetworkPartitionInfo.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemNetworkPartitionInfo.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemNetworkPartitionInfo.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemNetworkPartitionInfo.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemNetworkPartitionInfo)
        {
            return Equals(vsanUpgradeSystemNetworkPartitionInfo as VsanUpgradeSystemNetworkPartitionInfo);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemNetworkPartitionInfo_LinkedView : IEquatable<VsanUpgradeSystemNetworkPartitionInfo_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemNetworkPartitionInfo_LinkedView vsanUpgradeSystemNetworkPartitionInfo_LinkedView)
        {
            return (vsanUpgradeSystemNetworkPartitionInfo_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemNetworkPartitionInfo_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemNetworkPartitionInfo_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemNetworkPartitionInfo_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemNetworkPartitionInfo_LinkedView)
        {
            return Equals(vsanUpgradeSystemNetworkPartitionInfo_LinkedView as VsanUpgradeSystemNetworkPartitionInfo_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VsanUpgradeSystemNetworkPartitionIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemNetworkPartitionIssue>
    {
        public VsanUpgradeSystemNetworkPartitionInfo[] Partitions { get; set; }

        public bool Equals(VsanUpgradeSystemNetworkPartitionIssue vsanUpgradeSystemNetworkPartitionIssue)
        {
            return (vsanUpgradeSystemNetworkPartitionIssue != null && ((this.Partitions == null && vsanUpgradeSystemNetworkPartitionIssue.Partitions == null) || (this.Partitions != null && vsanUpgradeSystemNetworkPartitionIssue.Partitions != null && Enumerable.SequenceEqual(this.Partitions, vsanUpgradeSystemNetworkPartitionIssue.Partitions))));
        }

        public override bool Equals(object vsanUpgradeSystemNetworkPartitionIssue)
        {
            return Equals(vsanUpgradeSystemNetworkPartitionIssue as VsanUpgradeSystemNetworkPartitionIssue);
        }

        public override int GetHashCode()
        {
            return (Partitions).GetHashCode();
        }
    }

    public class VsanUpgradeSystemNotEnoughFreeCapacityIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemNotEnoughFreeCapacityIssue>
    {
        public bool ReducedRedundancyUpgradePossible { get; set; }

        public bool Equals(VsanUpgradeSystemNotEnoughFreeCapacityIssue vsanUpgradeSystemNotEnoughFreeCapacityIssue)
        {
            return (vsanUpgradeSystemNotEnoughFreeCapacityIssue != null && this.ReducedRedundancyUpgradePossible == vsanUpgradeSystemNotEnoughFreeCapacityIssue.ReducedRedundancyUpgradePossible);
        }

        public override bool Equals(object vsanUpgradeSystemNotEnoughFreeCapacityIssue)
        {
            return Equals(vsanUpgradeSystemNotEnoughFreeCapacityIssue as VsanUpgradeSystemNotEnoughFreeCapacityIssue);
        }

        public override int GetHashCode()
        {
            return (ReducedRedundancyUpgradePossible).GetHashCode();
        }
    }

    public class VsanUpgradeSystemPreflightCheckIssue : DynamicData, IEquatable<VsanUpgradeSystemPreflightCheckIssue>
    {
        public string Msg { get; set; }

        public bool Equals(VsanUpgradeSystemPreflightCheckIssue vsanUpgradeSystemPreflightCheckIssue)
        {
            return (vsanUpgradeSystemPreflightCheckIssue != null && this.Msg == vsanUpgradeSystemPreflightCheckIssue.Msg);
        }

        public override bool Equals(object vsanUpgradeSystemPreflightCheckIssue)
        {
            return Equals(vsanUpgradeSystemPreflightCheckIssue as VsanUpgradeSystemPreflightCheckIssue);
        }

        public override int GetHashCode()
        {
            return (Msg).GetHashCode();
        }
    }

    public class VsanUpgradeSystemPreflightCheckResult : DynamicData, IEquatable<VsanUpgradeSystemPreflightCheckResult>
    {
        public VsanUpgradeSystemPreflightCheckIssue[] Issues { get; set; }

        public VsanHostDiskMapping DiskMappingToRestore { get; set; }

        public bool Equals(VsanUpgradeSystemPreflightCheckResult vsanUpgradeSystemPreflightCheckResult)
        {
            return (vsanUpgradeSystemPreflightCheckResult != null && ((this.Issues == null && vsanUpgradeSystemPreflightCheckResult.Issues == null) || (this.Issues != null && vsanUpgradeSystemPreflightCheckResult.Issues != null && Enumerable.SequenceEqual(this.Issues, vsanUpgradeSystemPreflightCheckResult.Issues))) && ((this.DiskMappingToRestore == null && vsanUpgradeSystemPreflightCheckResult.DiskMappingToRestore == null) || (this.DiskMappingToRestore != null && this.DiskMappingToRestore.Equals(vsanUpgradeSystemPreflightCheckResult.DiskMappingToRestore))));
        }

        public override bool Equals(object vsanUpgradeSystemPreflightCheckResult)
        {
            return Equals(vsanUpgradeSystemPreflightCheckResult as VsanUpgradeSystemPreflightCheckResult);
        }

        public override int GetHashCode()
        {
            return (Issues + "_" + DiskMappingToRestore).GetHashCode();
        }
    }

    public class VsanUpgradeSystemRogueHostsInClusterIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemRogueHostsInClusterIssue>
    {
        public string[] Uuids { get; set; }

        public bool Equals(VsanUpgradeSystemRogueHostsInClusterIssue vsanUpgradeSystemRogueHostsInClusterIssue)
        {
            return (vsanUpgradeSystemRogueHostsInClusterIssue != null && ((this.Uuids == null && vsanUpgradeSystemRogueHostsInClusterIssue.Uuids == null) || (this.Uuids != null && vsanUpgradeSystemRogueHostsInClusterIssue.Uuids != null && Enumerable.SequenceEqual(this.Uuids, vsanUpgradeSystemRogueHostsInClusterIssue.Uuids))));
        }

        public override bool Equals(object vsanUpgradeSystemRogueHostsInClusterIssue)
        {
            return Equals(vsanUpgradeSystemRogueHostsInClusterIssue as VsanUpgradeSystemRogueHostsInClusterIssue);
        }

        public override int GetHashCode()
        {
            return (Uuids).GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryDiskGroupOp : VsanUpgradeSystemUpgradeHistoryItem, IEquatable<VsanUpgradeSystemUpgradeHistoryDiskGroupOp>
    {
        public string Operation { get; set; }

        public VsanHostDiskMapping DiskMapping { get; set; }

        public new VsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemUpgradeHistoryDiskGroupOp vsanUpgradeSystemUpgradeHistoryDiskGroupOp)
        {
            return (vsanUpgradeSystemUpgradeHistoryDiskGroupOp != null && this.Operation == vsanUpgradeSystemUpgradeHistoryDiskGroupOp.Operation && ((this.DiskMapping == null && vsanUpgradeSystemUpgradeHistoryDiskGroupOp.DiskMapping == null) || (this.DiskMapping != null && this.DiskMapping.Equals(vsanUpgradeSystemUpgradeHistoryDiskGroupOp.DiskMapping))) && ((this.LinkedView == null && vsanUpgradeSystemUpgradeHistoryDiskGroupOp.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemUpgradeHistoryDiskGroupOp.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryDiskGroupOp)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryDiskGroupOp as VsanUpgradeSystemUpgradeHistoryDiskGroupOp);
        }

        public override int GetHashCode()
        {
            return (Operation + "_" + DiskMapping + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView : VsanUpgradeSystemUpgradeHistoryItem_LinkedView, IEquatable<VsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView>
    {
        public bool Equals(VsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView vsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView)
        {
            return (vsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView != null && base.Equals(vsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView as VsanUpgradeSystemUpgradeHistoryDiskGroupOp_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryItem : DynamicData, IEquatable<VsanUpgradeSystemUpgradeHistoryItem>
    {
        public VsanUpgradeSystemUpgradeHistoryItem_LinkedView LinkedView { get; set; }

        public DateTime Timestamp { get; set; }

        public ManagedObjectReference Host { get; set; }

        public string Message { get; set; }

        public ManagedObjectReference Task { get; set; }

        public bool Equals(VsanUpgradeSystemUpgradeHistoryItem vsanUpgradeSystemUpgradeHistoryItem)
        {
            return (vsanUpgradeSystemUpgradeHistoryItem != null && ((this.LinkedView == null && vsanUpgradeSystemUpgradeHistoryItem.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemUpgradeHistoryItem.LinkedView))) && this.Timestamp == vsanUpgradeSystemUpgradeHistoryItem.Timestamp && ((this.Host == null && vsanUpgradeSystemUpgradeHistoryItem.Host == null) || (this.Host != null && this.Host.Equals(vsanUpgradeSystemUpgradeHistoryItem.Host))) && this.Message == vsanUpgradeSystemUpgradeHistoryItem.Message && ((this.Task == null && vsanUpgradeSystemUpgradeHistoryItem.Task == null) || (this.Task != null && this.Task.Equals(vsanUpgradeSystemUpgradeHistoryItem.Task))));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryItem)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryItem as VsanUpgradeSystemUpgradeHistoryItem);
        }

        public override int GetHashCode()
        {
            return (LinkedView + "_" + Timestamp + "_" + Host + "_" + Message + "_" + Task).GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryItem_LinkedView : IEquatable<VsanUpgradeSystemUpgradeHistoryItem_LinkedView>
    {
        public HostSystem Host { get; set; }

        public Task Task { get; set; }

        public bool Equals(VsanUpgradeSystemUpgradeHistoryItem_LinkedView vsanUpgradeSystemUpgradeHistoryItem_LinkedView)
        {
            return (vsanUpgradeSystemUpgradeHistoryItem_LinkedView != null && ((this.Host == null && vsanUpgradeSystemUpgradeHistoryItem_LinkedView.Host == null) || (this.Host != null && this.Host.Equals(vsanUpgradeSystemUpgradeHistoryItem_LinkedView.Host))) && ((this.Task == null && vsanUpgradeSystemUpgradeHistoryItem_LinkedView.Task == null) || (this.Task != null && this.Task.Equals(vsanUpgradeSystemUpgradeHistoryItem_LinkedView.Task))));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryItem_LinkedView)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryItem_LinkedView as VsanUpgradeSystemUpgradeHistoryItem_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Task).GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryPreflightFail : VsanUpgradeSystemUpgradeHistoryItem, IEquatable<VsanUpgradeSystemUpgradeHistoryPreflightFail>
    {
        public VsanUpgradeSystemPreflightCheckResult PreflightResult { get; set; }

        public new VsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemUpgradeHistoryPreflightFail vsanUpgradeSystemUpgradeHistoryPreflightFail)
        {
            return (vsanUpgradeSystemUpgradeHistoryPreflightFail != null && ((this.PreflightResult == null && vsanUpgradeSystemUpgradeHistoryPreflightFail.PreflightResult == null) || (this.PreflightResult != null && this.PreflightResult.Equals(vsanUpgradeSystemUpgradeHistoryPreflightFail.PreflightResult))) && ((this.LinkedView == null && vsanUpgradeSystemUpgradeHistoryPreflightFail.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemUpgradeHistoryPreflightFail.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryPreflightFail)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryPreflightFail as VsanUpgradeSystemUpgradeHistoryPreflightFail);
        }

        public override int GetHashCode()
        {
            return (PreflightResult + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView : VsanUpgradeSystemUpgradeHistoryItem_LinkedView, IEquatable<VsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView>
    {
        public bool Equals(VsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView vsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView)
        {
            return (vsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView != null && base.Equals(vsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView)
        {
            return Equals(vsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView as VsanUpgradeSystemUpgradeHistoryPreflightFail_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VsanUpgradeSystemUpgradeStatus : DynamicData, IEquatable<VsanUpgradeSystemUpgradeStatus>
    {
        public bool InProgress { get; set; }

        public VsanUpgradeSystemUpgradeHistoryItem[] History { get; set; }

        public bool? Aborted { get; set; }

        public bool? Completed { get; set; }

        public int? Progress { get; set; }

        public bool Equals(VsanUpgradeSystemUpgradeStatus vsanUpgradeSystemUpgradeStatus)
        {
            return (vsanUpgradeSystemUpgradeStatus != null && this.InProgress == vsanUpgradeSystemUpgradeStatus.InProgress && ((this.History == null && vsanUpgradeSystemUpgradeStatus.History == null) || (this.History != null && vsanUpgradeSystemUpgradeStatus.History != null && Enumerable.SequenceEqual(this.History, vsanUpgradeSystemUpgradeStatus.History))) && ((this.Aborted == null && vsanUpgradeSystemUpgradeStatus.Aborted == null) || (this.Aborted != null && this.Aborted.Equals(vsanUpgradeSystemUpgradeStatus.Aborted))) && ((this.Completed == null && vsanUpgradeSystemUpgradeStatus.Completed == null) || (this.Completed != null && this.Completed.Equals(vsanUpgradeSystemUpgradeStatus.Completed))) && ((this.Progress == null && vsanUpgradeSystemUpgradeStatus.Progress == null) || (this.Progress != null && this.Progress.Equals(vsanUpgradeSystemUpgradeStatus.Progress))));
        }

        public override bool Equals(object vsanUpgradeSystemUpgradeStatus)
        {
            return Equals(vsanUpgradeSystemUpgradeStatus as VsanUpgradeSystemUpgradeStatus);
        }

        public override int GetHashCode()
        {
            return (InProgress + "_" + History + "_" + Aborted + "_" + Completed + "_" + Progress).GetHashCode();
        }
    }

    public class VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue>
    {
        public string[] Uuids { get; set; }

        public bool Equals(VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue)
        {
            return (vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue != null && ((this.Uuids == null && vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue.Uuids == null) || (this.Uuids != null && vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue.Uuids != null && Enumerable.SequenceEqual(this.Uuids, vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue.Uuids))));
        }

        public override bool Equals(object vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue)
        {
            return Equals(vsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue as VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue);
        }

        public override int GetHashCode()
        {
            return (Uuids).GetHashCode();
        }
    }

    public class VsanUpgradeSystemWrongEsxVersionIssue : VsanUpgradeSystemPreflightCheckIssue, IEquatable<VsanUpgradeSystemWrongEsxVersionIssue>
    {
        public ManagedObjectReference[] Hosts { get; set; }

        public VsanUpgradeSystemWrongEsxVersionIssue_LinkedView LinkedView { get; set; }

        public bool Equals(VsanUpgradeSystemWrongEsxVersionIssue vsanUpgradeSystemWrongEsxVersionIssue)
        {
            return (vsanUpgradeSystemWrongEsxVersionIssue != null && ((this.Hosts == null && vsanUpgradeSystemWrongEsxVersionIssue.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemWrongEsxVersionIssue.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemWrongEsxVersionIssue.Hosts))) && ((this.LinkedView == null && vsanUpgradeSystemWrongEsxVersionIssue.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vsanUpgradeSystemWrongEsxVersionIssue.LinkedView))));
        }

        public override bool Equals(object vsanUpgradeSystemWrongEsxVersionIssue)
        {
            return Equals(vsanUpgradeSystemWrongEsxVersionIssue as VsanUpgradeSystemWrongEsxVersionIssue);
        }

        public override int GetHashCode()
        {
            return (Hosts + "_" + LinkedView).GetHashCode();
        }
    }

    public class VsanUpgradeSystemWrongEsxVersionIssue_LinkedView : IEquatable<VsanUpgradeSystemWrongEsxVersionIssue_LinkedView>
    {
        public HostSystem[] Hosts { get; set; }

        public bool Equals(VsanUpgradeSystemWrongEsxVersionIssue_LinkedView vsanUpgradeSystemWrongEsxVersionIssue_LinkedView)
        {
            return (vsanUpgradeSystemWrongEsxVersionIssue_LinkedView != null && ((this.Hosts == null && vsanUpgradeSystemWrongEsxVersionIssue_LinkedView.Hosts == null) || (this.Hosts != null && vsanUpgradeSystemWrongEsxVersionIssue_LinkedView.Hosts != null && Enumerable.SequenceEqual(this.Hosts, vsanUpgradeSystemWrongEsxVersionIssue_LinkedView.Hosts))));
        }

        public override bool Equals(object vsanUpgradeSystemWrongEsxVersionIssue_LinkedView)
        {
            return Equals(vsanUpgradeSystemWrongEsxVersionIssue_LinkedView as VsanUpgradeSystemWrongEsxVersionIssue_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Hosts).GetHashCode();
        }
    }

    public class VslmCloneSpec : VslmMigrateSpec, IEquatable<VslmCloneSpec>
    {
        public string Name { get; set; }

        public bool? KeepAfterDeleteVm { get; set; }

        public bool Equals(VslmCloneSpec vslmCloneSpec)
        {
            return (vslmCloneSpec != null && this.Name == vslmCloneSpec.Name && ((this.KeepAfterDeleteVm == null && vslmCloneSpec.KeepAfterDeleteVm == null) || (this.KeepAfterDeleteVm != null && this.KeepAfterDeleteVm.Equals(vslmCloneSpec.KeepAfterDeleteVm))));
        }

        public override bool Equals(object vslmCloneSpec)
        {
            return Equals(vslmCloneSpec as VslmCloneSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + KeepAfterDeleteVm).GetHashCode();
        }
    }

    public class VslmCreateSpec : DynamicData, IEquatable<VslmCreateSpec>
    {
        public string Name { get; set; }

        public bool? KeepAfterDeleteVm { get; set; }

        public VslmCreateSpecBackingSpec BackingSpec { get; set; }

        public long CapacityInMB { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public bool Equals(VslmCreateSpec vslmCreateSpec)
        {
            return (vslmCreateSpec != null && this.Name == vslmCreateSpec.Name && ((this.KeepAfterDeleteVm == null && vslmCreateSpec.KeepAfterDeleteVm == null) || (this.KeepAfterDeleteVm != null && this.KeepAfterDeleteVm.Equals(vslmCreateSpec.KeepAfterDeleteVm))) && ((this.BackingSpec == null && vslmCreateSpec.BackingSpec == null) || (this.BackingSpec != null && this.BackingSpec.Equals(vslmCreateSpec.BackingSpec))) && this.CapacityInMB == vslmCreateSpec.CapacityInMB && ((this.Profile == null && vslmCreateSpec.Profile == null) || (this.Profile != null && vslmCreateSpec.Profile != null && Enumerable.SequenceEqual(this.Profile, vslmCreateSpec.Profile))));
        }

        public override bool Equals(object vslmCreateSpec)
        {
            return Equals(vslmCreateSpec as VslmCreateSpec);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + KeepAfterDeleteVm + "_" + BackingSpec + "_" + CapacityInMB + "_" + Profile).GetHashCode();
        }
    }

    public class VslmCreateSpecBackingSpec : DynamicData, IEquatable<VslmCreateSpecBackingSpec>
    {
        public ManagedObjectReference Datastore { get; set; }

        public string Path { get; set; }

        public VslmCreateSpecBackingSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VslmCreateSpecBackingSpec vslmCreateSpecBackingSpec)
        {
            return (vslmCreateSpecBackingSpec != null && ((this.Datastore == null && vslmCreateSpecBackingSpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vslmCreateSpecBackingSpec.Datastore))) && this.Path == vslmCreateSpecBackingSpec.Path && ((this.LinkedView == null && vslmCreateSpecBackingSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vslmCreateSpecBackingSpec.LinkedView))));
        }

        public override bool Equals(object vslmCreateSpecBackingSpec)
        {
            return Equals(vslmCreateSpecBackingSpec as VslmCreateSpecBackingSpec);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Path + "_" + LinkedView).GetHashCode();
        }
    }

    public class VslmCreateSpecBackingSpec_LinkedView : IEquatable<VslmCreateSpecBackingSpec_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(VslmCreateSpecBackingSpec_LinkedView vslmCreateSpecBackingSpec_LinkedView)
        {
            return (vslmCreateSpecBackingSpec_LinkedView != null && ((this.Datastore == null && vslmCreateSpecBackingSpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vslmCreateSpecBackingSpec_LinkedView.Datastore))));
        }

        public override bool Equals(object vslmCreateSpecBackingSpec_LinkedView)
        {
            return Equals(vslmCreateSpecBackingSpec_LinkedView as VslmCreateSpecBackingSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VslmCreateSpecDiskFileBackingSpec : VslmCreateSpecBackingSpec, IEquatable<VslmCreateSpecDiskFileBackingSpec>
    {
        public string ProvisioningType { get; set; }

        public new VslmCreateSpecDiskFileBackingSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VslmCreateSpecDiskFileBackingSpec vslmCreateSpecDiskFileBackingSpec)
        {
            return (vslmCreateSpecDiskFileBackingSpec != null && this.ProvisioningType == vslmCreateSpecDiskFileBackingSpec.ProvisioningType && ((this.LinkedView == null && vslmCreateSpecDiskFileBackingSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vslmCreateSpecDiskFileBackingSpec.LinkedView))));
        }

        public override bool Equals(object vslmCreateSpecDiskFileBackingSpec)
        {
            return Equals(vslmCreateSpecDiskFileBackingSpec as VslmCreateSpecDiskFileBackingSpec);
        }

        public override int GetHashCode()
        {
            return (ProvisioningType + "_" + LinkedView).GetHashCode();
        }
    }

    public class VslmCreateSpecDiskFileBackingSpec_LinkedView : VslmCreateSpecBackingSpec_LinkedView, IEquatable<VslmCreateSpecDiskFileBackingSpec_LinkedView>
    {
        public bool Equals(VslmCreateSpecDiskFileBackingSpec_LinkedView vslmCreateSpecDiskFileBackingSpec_LinkedView)
        {
            return (vslmCreateSpecDiskFileBackingSpec_LinkedView != null && base.Equals(vslmCreateSpecDiskFileBackingSpec_LinkedView));
        }

        public override bool Equals(object vslmCreateSpecDiskFileBackingSpec_LinkedView)
        {
            return Equals(vslmCreateSpecDiskFileBackingSpec_LinkedView as VslmCreateSpecDiskFileBackingSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VslmCreateSpecRawDiskMappingBackingSpec : VslmCreateSpecBackingSpec, IEquatable<VslmCreateSpecRawDiskMappingBackingSpec>
    {
        public string LunUuid { get; set; }

        public string CompatibilityMode { get; set; }

        public new VslmCreateSpecRawDiskMappingBackingSpec_LinkedView LinkedView { get; set; }

        public bool Equals(VslmCreateSpecRawDiskMappingBackingSpec vslmCreateSpecRawDiskMappingBackingSpec)
        {
            return (vslmCreateSpecRawDiskMappingBackingSpec != null && this.LunUuid == vslmCreateSpecRawDiskMappingBackingSpec.LunUuid && this.CompatibilityMode == vslmCreateSpecRawDiskMappingBackingSpec.CompatibilityMode && ((this.LinkedView == null && vslmCreateSpecRawDiskMappingBackingSpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vslmCreateSpecRawDiskMappingBackingSpec.LinkedView))));
        }

        public override bool Equals(object vslmCreateSpecRawDiskMappingBackingSpec)
        {
            return Equals(vslmCreateSpecRawDiskMappingBackingSpec as VslmCreateSpecRawDiskMappingBackingSpec);
        }

        public override int GetHashCode()
        {
            return (LunUuid + "_" + CompatibilityMode + "_" + LinkedView).GetHashCode();
        }
    }

    public class VslmCreateSpecRawDiskMappingBackingSpec_LinkedView : VslmCreateSpecBackingSpec_LinkedView, IEquatable<VslmCreateSpecRawDiskMappingBackingSpec_LinkedView>
    {
        public bool Equals(VslmCreateSpecRawDiskMappingBackingSpec_LinkedView vslmCreateSpecRawDiskMappingBackingSpec_LinkedView)
        {
            return (vslmCreateSpecRawDiskMappingBackingSpec_LinkedView != null && base.Equals(vslmCreateSpecRawDiskMappingBackingSpec_LinkedView));
        }

        public override bool Equals(object vslmCreateSpecRawDiskMappingBackingSpec_LinkedView)
        {
            return Equals(vslmCreateSpecRawDiskMappingBackingSpec_LinkedView as VslmCreateSpecRawDiskMappingBackingSpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class vslmInfrastructureObjectPolicy : DynamicData, IEquatable<vslmInfrastructureObjectPolicy>
    {
        public string Name { get; set; }

        public string BackingObjectId { get; set; }

        public string ProfileId { get; set; }

        public LocalizedMethodFault Error { get; set; }

        public bool Equals(vslmInfrastructureObjectPolicy vslmInfrastructureObjectPolicy)
        {
            return (vslmInfrastructureObjectPolicy != null && this.Name == vslmInfrastructureObjectPolicy.Name && this.BackingObjectId == vslmInfrastructureObjectPolicy.BackingObjectId && this.ProfileId == vslmInfrastructureObjectPolicy.ProfileId && ((this.Error == null && vslmInfrastructureObjectPolicy.Error == null) || (this.Error != null && this.Error.Equals(vslmInfrastructureObjectPolicy.Error))));
        }

        public override bool Equals(object vslmInfrastructureObjectPolicy)
        {
            return Equals(vslmInfrastructureObjectPolicy as vslmInfrastructureObjectPolicy);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + BackingObjectId + "_" + ProfileId + "_" + Error).GetHashCode();
        }
    }

    public class vslmInfrastructureObjectPolicySpec : DynamicData, IEquatable<vslmInfrastructureObjectPolicySpec>
    {
        public ManagedObjectReference Datastore { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public vslmInfrastructureObjectPolicySpec_LinkedView LinkedView { get; set; }

        public bool Equals(vslmInfrastructureObjectPolicySpec vslmInfrastructureObjectPolicySpec)
        {
            return (vslmInfrastructureObjectPolicySpec != null && ((this.Datastore == null && vslmInfrastructureObjectPolicySpec.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vslmInfrastructureObjectPolicySpec.Datastore))) && ((this.Profile == null && vslmInfrastructureObjectPolicySpec.Profile == null) || (this.Profile != null && vslmInfrastructureObjectPolicySpec.Profile != null && Enumerable.SequenceEqual(this.Profile, vslmInfrastructureObjectPolicySpec.Profile))) && ((this.LinkedView == null && vslmInfrastructureObjectPolicySpec.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vslmInfrastructureObjectPolicySpec.LinkedView))));
        }

        public override bool Equals(object vslmInfrastructureObjectPolicySpec)
        {
            return Equals(vslmInfrastructureObjectPolicySpec as vslmInfrastructureObjectPolicySpec);
        }

        public override int GetHashCode()
        {
            return (Datastore + "_" + Profile + "_" + LinkedView).GetHashCode();
        }
    }

    public class vslmInfrastructureObjectPolicySpec_LinkedView : IEquatable<vslmInfrastructureObjectPolicySpec_LinkedView>
    {
        public Datastore Datastore { get; set; }

        public bool Equals(vslmInfrastructureObjectPolicySpec_LinkedView vslmInfrastructureObjectPolicySpec_LinkedView)
        {
            return (vslmInfrastructureObjectPolicySpec_LinkedView != null && ((this.Datastore == null && vslmInfrastructureObjectPolicySpec_LinkedView.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(vslmInfrastructureObjectPolicySpec_LinkedView.Datastore))));
        }

        public override bool Equals(object vslmInfrastructureObjectPolicySpec_LinkedView)
        {
            return Equals(vslmInfrastructureObjectPolicySpec_LinkedView as vslmInfrastructureObjectPolicySpec_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Datastore).GetHashCode();
        }
    }

    public class VslmMigrateSpec : DynamicData, IEquatable<VslmMigrateSpec>
    {
        public VslmCreateSpecBackingSpec BackingSpec { get; set; }

        public VirtualMachineProfileSpec[] Profile { get; set; }

        public bool? Consolidate { get; set; }

        public bool Equals(VslmMigrateSpec vslmMigrateSpec)
        {
            return (vslmMigrateSpec != null && ((this.BackingSpec == null && vslmMigrateSpec.BackingSpec == null) || (this.BackingSpec != null && this.BackingSpec.Equals(vslmMigrateSpec.BackingSpec))) && ((this.Profile == null && vslmMigrateSpec.Profile == null) || (this.Profile != null && vslmMigrateSpec.Profile != null && Enumerable.SequenceEqual(this.Profile, vslmMigrateSpec.Profile))) && ((this.Consolidate == null && vslmMigrateSpec.Consolidate == null) || (this.Consolidate != null && this.Consolidate.Equals(vslmMigrateSpec.Consolidate))));
        }

        public override bool Equals(object vslmMigrateSpec)
        {
            return Equals(vslmMigrateSpec as VslmMigrateSpec);
        }

        public override int GetHashCode()
        {
            return (BackingSpec + "_" + Profile + "_" + Consolidate).GetHashCode();
        }
    }

    public class VslmRelocateSpec : VslmMigrateSpec, IEquatable<VslmRelocateSpec>
    {
        public bool Equals(VslmRelocateSpec vslmRelocateSpec)
        {
            return (vslmRelocateSpec != null && base.Equals(vslmRelocateSpec));
        }

        public override bool Equals(object vslmRelocateSpec)
        {
            return Equals(vslmRelocateSpec as VslmRelocateSpec);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VslmTagEntry : DynamicData, IEquatable<VslmTagEntry>
    {
        public string TagName { get; set; }

        public string ParentCategoryName { get; set; }

        public bool Equals(VslmTagEntry vslmTagEntry)
        {
            return (vslmTagEntry != null && this.TagName == vslmTagEntry.TagName && this.ParentCategoryName == vslmTagEntry.ParentCategoryName);
        }

        public override bool Equals(object vslmTagEntry)
        {
            return Equals(vslmTagEntry as VslmTagEntry);
        }

        public override int GetHashCode()
        {
            return (TagName + "_" + ParentCategoryName).GetHashCode();
        }
    }

    public class VspanDestPortConflict : DvsFault, IEquatable<VspanDestPortConflict>
    {
        public string VspanSessionKey1 { get; set; }

        public string VspanSessionKey2 { get; set; }

        public string PortKey { get; set; }

        public bool Equals(VspanDestPortConflict vspanDestPortConflict)
        {
            return (vspanDestPortConflict != null && this.VspanSessionKey1 == vspanDestPortConflict.VspanSessionKey1 && this.VspanSessionKey2 == vspanDestPortConflict.VspanSessionKey2 && this.PortKey == vspanDestPortConflict.PortKey);
        }

        public override bool Equals(object vspanDestPortConflict)
        {
            return Equals(vspanDestPortConflict as VspanDestPortConflict);
        }

        public override int GetHashCode()
        {
            return (VspanSessionKey1 + "_" + VspanSessionKey2 + "_" + PortKey).GetHashCode();
        }
    }

    public class VspanPortConflict : DvsFault, IEquatable<VspanPortConflict>
    {
        public string VspanSessionKey1 { get; set; }

        public string VspanSessionKey2 { get; set; }

        public string PortKey { get; set; }

        public bool Equals(VspanPortConflict vspanPortConflict)
        {
            return (vspanPortConflict != null && this.VspanSessionKey1 == vspanPortConflict.VspanSessionKey1 && this.VspanSessionKey2 == vspanPortConflict.VspanSessionKey2 && this.PortKey == vspanPortConflict.PortKey);
        }

        public override bool Equals(object vspanPortConflict)
        {
            return Equals(vspanPortConflict as VspanPortConflict);
        }

        public override int GetHashCode()
        {
            return (VspanSessionKey1 + "_" + VspanSessionKey2 + "_" + PortKey).GetHashCode();
        }
    }

    public class VspanPortgroupPromiscChangeFault : DvsFault, IEquatable<VspanPortgroupPromiscChangeFault>
    {
        public string PortgroupName { get; set; }

        public bool Equals(VspanPortgroupPromiscChangeFault vspanPortgroupPromiscChangeFault)
        {
            return (vspanPortgroupPromiscChangeFault != null && this.PortgroupName == vspanPortgroupPromiscChangeFault.PortgroupName);
        }

        public override bool Equals(object vspanPortgroupPromiscChangeFault)
        {
            return Equals(vspanPortgroupPromiscChangeFault as VspanPortgroupPromiscChangeFault);
        }

        public override int GetHashCode()
        {
            return (PortgroupName).GetHashCode();
        }
    }

    public class VspanPortgroupTypeChangeFault : DvsFault, IEquatable<VspanPortgroupTypeChangeFault>
    {
        public string PortgroupName { get; set; }

        public bool Equals(VspanPortgroupTypeChangeFault vspanPortgroupTypeChangeFault)
        {
            return (vspanPortgroupTypeChangeFault != null && this.PortgroupName == vspanPortgroupTypeChangeFault.PortgroupName);
        }

        public override bool Equals(object vspanPortgroupTypeChangeFault)
        {
            return Equals(vspanPortgroupTypeChangeFault as VspanPortgroupTypeChangeFault);
        }

        public override int GetHashCode()
        {
            return (PortgroupName).GetHashCode();
        }
    }

    public class VspanPortMoveFault : DvsFault, IEquatable<VspanPortMoveFault>
    {
        public string SrcPortgroupName { get; set; }

        public string DestPortgroupName { get; set; }

        public string PortKey { get; set; }

        public bool Equals(VspanPortMoveFault vspanPortMoveFault)
        {
            return (vspanPortMoveFault != null && this.SrcPortgroupName == vspanPortMoveFault.SrcPortgroupName && this.DestPortgroupName == vspanPortMoveFault.DestPortgroupName && this.PortKey == vspanPortMoveFault.PortKey);
        }

        public override bool Equals(object vspanPortMoveFault)
        {
            return Equals(vspanPortMoveFault as VspanPortMoveFault);
        }

        public override int GetHashCode()
        {
            return (SrcPortgroupName + "_" + DestPortgroupName + "_" + PortKey).GetHashCode();
        }
    }

    public class VspanPortPromiscChangeFault : DvsFault, IEquatable<VspanPortPromiscChangeFault>
    {
        public string PortKey { get; set; }

        public bool Equals(VspanPortPromiscChangeFault vspanPortPromiscChangeFault)
        {
            return (vspanPortPromiscChangeFault != null && this.PortKey == vspanPortPromiscChangeFault.PortKey);
        }

        public override bool Equals(object vspanPortPromiscChangeFault)
        {
            return Equals(vspanPortPromiscChangeFault as VspanPortPromiscChangeFault);
        }

        public override int GetHashCode()
        {
            return (PortKey).GetHashCode();
        }
    }

    public class VspanPromiscuousPortNotSupported : DvsFault, IEquatable<VspanPromiscuousPortNotSupported>
    {
        public string VspanSessionKey { get; set; }

        public string PortKey { get; set; }

        public bool Equals(VspanPromiscuousPortNotSupported vspanPromiscuousPortNotSupported)
        {
            return (vspanPromiscuousPortNotSupported != null && this.VspanSessionKey == vspanPromiscuousPortNotSupported.VspanSessionKey && this.PortKey == vspanPromiscuousPortNotSupported.PortKey);
        }

        public override bool Equals(object vspanPromiscuousPortNotSupported)
        {
            return Equals(vspanPromiscuousPortNotSupported as VspanPromiscuousPortNotSupported);
        }

        public override int GetHashCode()
        {
            return (VspanSessionKey + "_" + PortKey).GetHashCode();
        }
    }

    public class VspanSameSessionPortConflict : DvsFault, IEquatable<VspanSameSessionPortConflict>
    {
        public string VspanSessionKey { get; set; }

        public string PortKey { get; set; }

        public bool Equals(VspanSameSessionPortConflict vspanSameSessionPortConflict)
        {
            return (vspanSameSessionPortConflict != null && this.VspanSessionKey == vspanSameSessionPortConflict.VspanSessionKey && this.PortKey == vspanSameSessionPortConflict.PortKey);
        }

        public override bool Equals(object vspanSameSessionPortConflict)
        {
            return Equals(vspanSameSessionPortConflict as VspanSameSessionPortConflict);
        }

        public override int GetHashCode()
        {
            return (VspanSessionKey + "_" + PortKey).GetHashCode();
        }
    }

    public class VStorageObject : DynamicData, IEquatable<VStorageObject>
    {
        public VStorageObjectConfigInfo Config { get; set; }

        public bool Equals(VStorageObject vStorageObject)
        {
            return (vStorageObject != null && ((this.Config == null && vStorageObject.Config == null) || (this.Config != null && this.Config.Equals(vStorageObject.Config))));
        }

        public override bool Equals(object vStorageObject)
        {
            return Equals(vStorageObject as VStorageObject);
        }

        public override int GetHashCode()
        {
            return (Config).GetHashCode();
        }
    }

    public class VStorageObjectAssociations : DynamicData, IEquatable<VStorageObjectAssociations>
    {
        public ID Id { get; set; }

        public VStorageObjectAssociationsVmDiskAssociations[] VmDiskAssociations { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(VStorageObjectAssociations vStorageObjectAssociations)
        {
            return (vStorageObjectAssociations != null && ((this.Id == null && vStorageObjectAssociations.Id == null) || (this.Id != null && this.Id.Equals(vStorageObjectAssociations.Id))) && ((this.VmDiskAssociations == null && vStorageObjectAssociations.VmDiskAssociations == null) || (this.VmDiskAssociations != null && vStorageObjectAssociations.VmDiskAssociations != null && Enumerable.SequenceEqual(this.VmDiskAssociations, vStorageObjectAssociations.VmDiskAssociations))) && ((this.Fault == null && vStorageObjectAssociations.Fault == null) || (this.Fault != null && this.Fault.Equals(vStorageObjectAssociations.Fault))));
        }

        public override bool Equals(object vStorageObjectAssociations)
        {
            return Equals(vStorageObjectAssociations as VStorageObjectAssociations);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + VmDiskAssociations + "_" + Fault).GetHashCode();
        }
    }

    public class VStorageObjectAssociationsVmDiskAssociations : DynamicData, IEquatable<VStorageObjectAssociationsVmDiskAssociations>
    {
        public string VmId { get; set; }

        public int DiskKey { get; set; }

        public bool Equals(VStorageObjectAssociationsVmDiskAssociations vStorageObjectAssociationsVmDiskAssociations)
        {
            return (vStorageObjectAssociationsVmDiskAssociations != null && this.VmId == vStorageObjectAssociationsVmDiskAssociations.VmId && this.DiskKey == vStorageObjectAssociationsVmDiskAssociations.DiskKey);
        }

        public override bool Equals(object vStorageObjectAssociationsVmDiskAssociations)
        {
            return Equals(vStorageObjectAssociationsVmDiskAssociations as VStorageObjectAssociationsVmDiskAssociations);
        }

        public override int GetHashCode()
        {
            return (VmId + "_" + DiskKey).GetHashCode();
        }
    }

    public class VStorageObjectConfigInfo : BaseConfigInfo, IEquatable<VStorageObjectConfigInfo>
    {
        public long CapacityInMB { get; set; }

        public string[] ConsumptionType { get; set; }

        public ID[] ConsumerId { get; set; }

        public bool Equals(VStorageObjectConfigInfo vStorageObjectConfigInfo)
        {
            return (vStorageObjectConfigInfo != null && this.CapacityInMB == vStorageObjectConfigInfo.CapacityInMB && ((this.ConsumptionType == null && vStorageObjectConfigInfo.ConsumptionType == null) || (this.ConsumptionType != null && vStorageObjectConfigInfo.ConsumptionType != null && Enumerable.SequenceEqual(this.ConsumptionType, vStorageObjectConfigInfo.ConsumptionType))) && ((this.ConsumerId == null && vStorageObjectConfigInfo.ConsumerId == null) || (this.ConsumerId != null && vStorageObjectConfigInfo.ConsumerId != null && Enumerable.SequenceEqual(this.ConsumerId, vStorageObjectConfigInfo.ConsumerId))));
        }

        public override bool Equals(object vStorageObjectConfigInfo)
        {
            return Equals(vStorageObjectConfigInfo as VStorageObjectConfigInfo);
        }

        public override int GetHashCode()
        {
            return (CapacityInMB + "_" + ConsumptionType + "_" + ConsumerId).GetHashCode();
        }
    }

    public class VStorageObjectManagerBase : ViewBase, IEquatable<VStorageObjectManagerBase>
    {
        public bool Equals(VStorageObjectManagerBase vStorageObjectManagerBase)
        {
            return (vStorageObjectManagerBase != null && base.Equals(vStorageObjectManagerBase));
        }

        public override bool Equals(object vStorageObjectManagerBase)
        {
            return Equals(vStorageObjectManagerBase as VStorageObjectManagerBase);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class VStorageObjectSnapshotInfo : DynamicData, IEquatable<VStorageObjectSnapshotInfo>
    {
        public VStorageObjectSnapshotInfoVStorageObjectSnapshot[] Snapshots { get; set; }

        public bool Equals(VStorageObjectSnapshotInfo vStorageObjectSnapshotInfo)
        {
            return (vStorageObjectSnapshotInfo != null && ((this.Snapshots == null && vStorageObjectSnapshotInfo.Snapshots == null) || (this.Snapshots != null && vStorageObjectSnapshotInfo.Snapshots != null && Enumerable.SequenceEqual(this.Snapshots, vStorageObjectSnapshotInfo.Snapshots))));
        }

        public override bool Equals(object vStorageObjectSnapshotInfo)
        {
            return Equals(vStorageObjectSnapshotInfo as VStorageObjectSnapshotInfo);
        }

        public override int GetHashCode()
        {
            return (Snapshots).GetHashCode();
        }
    }

    public class VStorageObjectSnapshotInfoVStorageObjectSnapshot : DynamicData, IEquatable<VStorageObjectSnapshotInfoVStorageObjectSnapshot>
    {
        public ID Id { get; set; }

        public string BackingObjectId { get; set; }

        public DateTime CreateTime { get; set; }

        public string Description { get; set; }

        public bool Equals(VStorageObjectSnapshotInfoVStorageObjectSnapshot vStorageObjectSnapshotInfoVStorageObjectSnapshot)
        {
            return (vStorageObjectSnapshotInfoVStorageObjectSnapshot != null && ((this.Id == null && vStorageObjectSnapshotInfoVStorageObjectSnapshot.Id == null) || (this.Id != null && this.Id.Equals(vStorageObjectSnapshotInfoVStorageObjectSnapshot.Id))) && this.BackingObjectId == vStorageObjectSnapshotInfoVStorageObjectSnapshot.BackingObjectId && this.CreateTime == vStorageObjectSnapshotInfoVStorageObjectSnapshot.CreateTime && this.Description == vStorageObjectSnapshotInfoVStorageObjectSnapshot.Description);
        }

        public override bool Equals(object vStorageObjectSnapshotInfoVStorageObjectSnapshot)
        {
            return Equals(vStorageObjectSnapshotInfoVStorageObjectSnapshot as VStorageObjectSnapshotInfoVStorageObjectSnapshot);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + BackingObjectId + "_" + CreateTime + "_" + Description).GetHashCode();
        }
    }

    public class VStorageObjectStateInfo : DynamicData, IEquatable<VStorageObjectStateInfo>
    {
        public bool? Tentative { get; set; }

        public bool Equals(VStorageObjectStateInfo vStorageObjectStateInfo)
        {
            return (vStorageObjectStateInfo != null && ((this.Tentative == null && vStorageObjectStateInfo.Tentative == null) || (this.Tentative != null && this.Tentative.Equals(vStorageObjectStateInfo.Tentative))));
        }

        public override bool Equals(object vStorageObjectStateInfo)
        {
            return Equals(vStorageObjectStateInfo as VStorageObjectStateInfo);
        }

        public override int GetHashCode()
        {
            return (Tentative).GetHashCode();
        }
    }

    public class VvolDatastoreInfo : DatastoreInfo, IEquatable<VvolDatastoreInfo>
    {
        public HostVvolVolume VvolDS { get; set; }

        public bool Equals(VvolDatastoreInfo vvolDatastoreInfo)
        {
            return (vvolDatastoreInfo != null && ((this.VvolDS == null && vvolDatastoreInfo.VvolDS == null) || (this.VvolDS != null && this.VvolDS.Equals(vvolDatastoreInfo.VvolDS))));
        }

        public override bool Equals(object vvolDatastoreInfo)
        {
            return Equals(vvolDatastoreInfo as VvolDatastoreInfo);
        }

        public override int GetHashCode()
        {
            return (VvolDS).GetHashCode();
        }
    }

    public class VVolHostPE : DynamicData, IEquatable<VVolHostPE>
    {
        public ManagedObjectReference Key { get; set; }

        public HostProtocolEndpoint[] ProtocolEndpoint { get; set; }

        public VVolHostPE_LinkedView LinkedView { get; set; }

        public bool Equals(VVolHostPE vVolHostPE)
        {
            return (vVolHostPE != null && ((this.Key == null && vVolHostPE.Key == null) || (this.Key != null && this.Key.Equals(vVolHostPE.Key))) && ((this.ProtocolEndpoint == null && vVolHostPE.ProtocolEndpoint == null) || (this.ProtocolEndpoint != null && vVolHostPE.ProtocolEndpoint != null && Enumerable.SequenceEqual(this.ProtocolEndpoint, vVolHostPE.ProtocolEndpoint))) && ((this.LinkedView == null && vVolHostPE.LinkedView == null) || (this.LinkedView != null && this.LinkedView.Equals(vVolHostPE.LinkedView))));
        }

        public override bool Equals(object vVolHostPE)
        {
            return Equals(vVolHostPE as VVolHostPE);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + ProtocolEndpoint + "_" + LinkedView).GetHashCode();
        }
    }

    public class VVolHostPE_LinkedView : IEquatable<VVolHostPE_LinkedView>
    {
        public HostSystem Key { get; set; }

        public bool Equals(VVolHostPE_LinkedView vVolHostPE_LinkedView)
        {
            return (vVolHostPE_LinkedView != null && ((this.Key == null && vVolHostPE_LinkedView.Key == null) || (this.Key != null && this.Key.Equals(vVolHostPE_LinkedView.Key))));
        }

        public override bool Equals(object vVolHostPE_LinkedView)
        {
            return Equals(vVolHostPE_LinkedView as VVolHostPE_LinkedView);
        }

        public override int GetHashCode()
        {
            return (Key).GetHashCode();
        }
    }

    public class VVolVmConfigFileUpdateResult : DynamicData, IEquatable<VVolVmConfigFileUpdateResult>
    {
        public KeyValue[] SucceededVmConfigFile { get; set; }

        public VVolVmConfigFileUpdateResultFailedVmConfigFileInfo[] FailedVmConfigFile { get; set; }

        public bool Equals(VVolVmConfigFileUpdateResult vVolVmConfigFileUpdateResult)
        {
            return (vVolVmConfigFileUpdateResult != null && ((this.SucceededVmConfigFile == null && vVolVmConfigFileUpdateResult.SucceededVmConfigFile == null) || (this.SucceededVmConfigFile != null && vVolVmConfigFileUpdateResult.SucceededVmConfigFile != null && Enumerable.SequenceEqual(this.SucceededVmConfigFile, vVolVmConfigFileUpdateResult.SucceededVmConfigFile))) && ((this.FailedVmConfigFile == null && vVolVmConfigFileUpdateResult.FailedVmConfigFile == null) || (this.FailedVmConfigFile != null && vVolVmConfigFileUpdateResult.FailedVmConfigFile != null && Enumerable.SequenceEqual(this.FailedVmConfigFile, vVolVmConfigFileUpdateResult.FailedVmConfigFile))));
        }

        public override bool Equals(object vVolVmConfigFileUpdateResult)
        {
            return Equals(vVolVmConfigFileUpdateResult as VVolVmConfigFileUpdateResult);
        }

        public override int GetHashCode()
        {
            return (SucceededVmConfigFile + "_" + FailedVmConfigFile).GetHashCode();
        }
    }

    public class VVolVmConfigFileUpdateResultFailedVmConfigFileInfo : DynamicData, IEquatable<VVolVmConfigFileUpdateResultFailedVmConfigFileInfo>
    {
        public string TargetConfigVVolId { get; set; }

        public LocalizedMethodFault Fault { get; set; }

        public bool Equals(VVolVmConfigFileUpdateResultFailedVmConfigFileInfo vVolVmConfigFileUpdateResultFailedVmConfigFileInfo)
        {
            return (vVolVmConfigFileUpdateResultFailedVmConfigFileInfo != null && this.TargetConfigVVolId == vVolVmConfigFileUpdateResultFailedVmConfigFileInfo.TargetConfigVVolId && ((this.Fault == null && vVolVmConfigFileUpdateResultFailedVmConfigFileInfo.Fault == null) || (this.Fault != null && this.Fault.Equals(vVolVmConfigFileUpdateResultFailedVmConfigFileInfo.Fault))));
        }

        public override bool Equals(object vVolVmConfigFileUpdateResultFailedVmConfigFileInfo)
        {
            return Equals(vVolVmConfigFileUpdateResultFailedVmConfigFileInfo as VVolVmConfigFileUpdateResultFailedVmConfigFileInfo);
        }

        public override int GetHashCode()
        {
            return (TargetConfigVVolId + "_" + Fault).GetHashCode();
        }
    }

    public class WaitOptions : DynamicData, IEquatable<WaitOptions>
    {
        public int? MaxWaitSeconds { get; set; }

        public int? MaxObjectUpdates { get; set; }

        public bool Equals(WaitOptions waitOptions)
        {
            return (waitOptions != null && ((this.MaxWaitSeconds == null && waitOptions.MaxWaitSeconds == null) || (this.MaxWaitSeconds != null && this.MaxWaitSeconds.Equals(waitOptions.MaxWaitSeconds))) && ((this.MaxObjectUpdates == null && waitOptions.MaxObjectUpdates == null) || (this.MaxObjectUpdates != null && this.MaxObjectUpdates.Equals(waitOptions.MaxObjectUpdates))));
        }

        public override bool Equals(object waitOptions)
        {
            return Equals(waitOptions as WaitOptions);
        }

        public override int GetHashCode()
        {
            return (MaxWaitSeconds + "_" + MaxObjectUpdates).GetHashCode();
        }
    }

    public class WakeOnLanNotSupported : VirtualHardwareCompatibilityIssue, IEquatable<WakeOnLanNotSupported>
    {
        public bool Equals(WakeOnLanNotSupported wakeOnLanNotSupported)
        {
            return (wakeOnLanNotSupported != null && base.Equals(wakeOnLanNotSupported));
        }

        public override bool Equals(object wakeOnLanNotSupported)
        {
            return Equals(wakeOnLanNotSupported as WakeOnLanNotSupported);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WakeOnLanNotSupportedByVmotionNIC : HostPowerOpFailed, IEquatable<WakeOnLanNotSupportedByVmotionNIC>
    {
        public bool Equals(WakeOnLanNotSupportedByVmotionNIC wakeOnLanNotSupportedByVmotionNIC)
        {
            return (wakeOnLanNotSupportedByVmotionNIC != null && base.Equals(wakeOnLanNotSupportedByVmotionNIC));
        }

        public override bool Equals(object wakeOnLanNotSupportedByVmotionNIC)
        {
            return Equals(wakeOnLanNotSupportedByVmotionNIC as WakeOnLanNotSupportedByVmotionNIC);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WarningUpgradeEvent : UpgradeEvent, IEquatable<WarningUpgradeEvent>
    {
        public bool Equals(WarningUpgradeEvent warningUpgradeEvent)
        {
            return (warningUpgradeEvent != null && base.Equals(warningUpgradeEvent));
        }

        public override bool Equals(object warningUpgradeEvent)
        {
            return Equals(warningUpgradeEvent as WarningUpgradeEvent);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WeeklyTaskScheduler : DailyTaskScheduler, IEquatable<WeeklyTaskScheduler>
    {
        public bool Sunday { get; set; }

        public bool Monday { get; set; }

        public bool Tuesday { get; set; }

        public bool Wednesday { get; set; }

        public bool Thursday { get; set; }

        public bool Friday { get; set; }

        public bool Saturday { get; set; }

        public bool Equals(WeeklyTaskScheduler weeklyTaskScheduler)
        {
            return (weeklyTaskScheduler != null && this.Sunday == weeklyTaskScheduler.Sunday && this.Monday == weeklyTaskScheduler.Monday && this.Tuesday == weeklyTaskScheduler.Tuesday && this.Wednesday == weeklyTaskScheduler.Wednesday && this.Thursday == weeklyTaskScheduler.Thursday && this.Friday == weeklyTaskScheduler.Friday && this.Saturday == weeklyTaskScheduler.Saturday);
        }

        public override bool Equals(object weeklyTaskScheduler)
        {
            return Equals(weeklyTaskScheduler as WeeklyTaskScheduler);
        }

        public override int GetHashCode()
        {
            return (Sunday + "_" + Monday + "_" + Tuesday + "_" + Wednesday + "_" + Thursday + "_" + Friday + "_" + Saturday).GetHashCode();
        }
    }

    public class WillLoseHAProtection : MigrationFault, IEquatable<WillLoseHAProtection>
    {
        public string Resolution { get; set; }

        public bool Equals(WillLoseHAProtection willLoseHAProtection)
        {
            return (willLoseHAProtection != null && this.Resolution == willLoseHAProtection.Resolution);
        }

        public override bool Equals(object willLoseHAProtection)
        {
            return Equals(willLoseHAProtection as WillLoseHAProtection);
        }

        public override int GetHashCode()
        {
            return (Resolution).GetHashCode();
        }
    }

    public class WillModifyConfigCpuRequirements : MigrationFault, IEquatable<WillModifyConfigCpuRequirements>
    {
        public bool Equals(WillModifyConfigCpuRequirements willModifyConfigCpuRequirements)
        {
            return (willModifyConfigCpuRequirements != null && base.Equals(willModifyConfigCpuRequirements));
        }

        public override bool Equals(object willModifyConfigCpuRequirements)
        {
            return Equals(willModifyConfigCpuRequirements as WillModifyConfigCpuRequirements);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WillResetSnapshotDirectory : MigrationFault, IEquatable<WillResetSnapshotDirectory>
    {
        public bool Equals(WillResetSnapshotDirectory willResetSnapshotDirectory)
        {
            return (willResetSnapshotDirectory != null && base.Equals(willResetSnapshotDirectory));
        }

        public override bool Equals(object willResetSnapshotDirectory)
        {
            return Equals(willResetSnapshotDirectory as WillResetSnapshotDirectory);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WinNetBIOSConfigInfo : NetBIOSConfigInfo, IEquatable<WinNetBIOSConfigInfo>
    {
        public string PrimaryWINS { get; set; }

        public string SecondaryWINS { get; set; }

        public bool Equals(WinNetBIOSConfigInfo winNetBIOSConfigInfo)
        {
            return (winNetBIOSConfigInfo != null && this.PrimaryWINS == winNetBIOSConfigInfo.PrimaryWINS && this.SecondaryWINS == winNetBIOSConfigInfo.SecondaryWINS);
        }

        public override bool Equals(object winNetBIOSConfigInfo)
        {
            return Equals(winNetBIOSConfigInfo as WinNetBIOSConfigInfo);
        }

        public override int GetHashCode()
        {
            return (PrimaryWINS + "_" + SecondaryWINS).GetHashCode();
        }
    }

    public class WipeDiskFault : VimFault, IEquatable<WipeDiskFault>
    {
        public bool Equals(WipeDiskFault wipeDiskFault)
        {
            return (wipeDiskFault != null && base.Equals(wipeDiskFault));
        }

        public override bool Equals(object wipeDiskFault)
        {
            return Equals(wipeDiskFault as WipeDiskFault);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class WitnessNodeInfo : DynamicData, IEquatable<WitnessNodeInfo>
    {
        public CustomizationIPSettings IpSettings { get; set; }

        public string BiosUuid { get; set; }

        public bool Equals(WitnessNodeInfo witnessNodeInfo)
        {
            return (witnessNodeInfo != null && ((this.IpSettings == null && witnessNodeInfo.IpSettings == null) || (this.IpSettings != null && this.IpSettings.Equals(witnessNodeInfo.IpSettings))) && this.BiosUuid == witnessNodeInfo.BiosUuid);
        }

        public override bool Equals(object witnessNodeInfo)
        {
            return Equals(witnessNodeInfo as WitnessNodeInfo);
        }

        public override int GetHashCode()
        {
            return (IpSettings + "_" + BiosUuid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.Sdk.Types.V1
{
    using System;

    public interface NamedObject
    {
        string Name { get; }
    }

    public interface SnapinVersion
    {
        string Name { get; set; }

        int Major { get; set; }

        int Minor { get; set; }

        int Build { get; set; }

        int Revision { get; set; }

        string UserFriendlyVersion { get; set; }

        string Description { get; set; }
    }

    public interface Task : VIObject
    {
        TaskState State { get; set; }

        bool IsCancelable { get; set; }

        float PercentComplete { get; set; }

        DateTime StartTime { get; set; }

        DateTime? FinishTime { get; set; }

        string ObjectId { get; set; }

        object Result { get; set; }

        string Description { get; set; }
    }

    public interface VIConnection : VIObject
    {
        Uri ServiceUri { get; }

        string SessionSecret { get; }

        string User { get; }

        bool IsConnected { get; }
    }

    public interface VIObject : VIObjectCore, NamedObject
    {
        string Id { get; }

        new string Name { get; }
    }

    public interface VIObjectCore
    {
        string Uid { get; }
    }

    public enum TaskState
    {
        Queued,
        Running,
        Success,
        Error,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1
{
    using System;
    using System.IO;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Alarm;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface Action : VIObjectCore
    {
        ActionType ActionType { get; set; }
    }

    public interface AdvancedOption
    {
    }

    public interface AdvancedSetting : VIObject
    {
        object Value { get; set; }

        VIObject Entity { get; set; }

        string Description { get; set; }

        AdvancedSettingType? Type { get; set; }
    }

    public interface Description
    {
        string Label { get; set; }

        string Summary { get; set; }
    }

    public interface DiagnosticBundle
    {
        string Url { get; set; }

        VMHost Host { get; set; }

        FileInfo Data { get; set; }
    }

    public interface ExtensionData
    {
        object ExtensionData { get; set; }
    }

    public interface IPv6Address
    {
        string Address { get; set; }

        int PrefixLength { get; set; }
    }

    public interface Log
    {
        string Key { get; set; }

        string SourceEntityId { get; set; }

        VIObject SourceEntity { get; set; }

        int StartLineNum { get; set; }

        int LastLineNum { get; set; }

        string[] Entries { get; set; }

        VIServer Server { get; set; }

        VMHost Host { get; set; }
    }

    public interface LogDescriptor : ExtensionData, VIObjectCore
    {
        string SourceEntityId { get; set; }

        string Creator { get; set; }

        string Filename { get; set; }

        string Format { get; set; }

        Description Info { get; set; }

        string Key { get; set; }

        string MimeType { get; set; }
    }

    public interface PowerCLIConfiguration
    {
        ProxyPolicy? ProxyPolicy { get; set; }

        DefaultVIServerMode? DefaultVIServerMode { get; set; }

        BadCertificateAction? InvalidCertificateAction { get; set; }

        bool? ParticipateInCEIP { get; set; }

        ProxyPolicy? CEIPDataTransferProxyPolicy { get; set; }

        bool? DisplayDeprecationWarnings { get; set; }

        int? WebOperationTimeoutSeconds { get; set; }

        string VMConsoleWindowBrowser { get; set; }

        ConfigurationScope Scope { get; set; }
    }

    public interface PowerCLIVersion
    {
        int Major { get; set; }

        int Minor { get; set; }

        int Build { get; set; }

        int Revision { get; set; }

        string Copyright { get; set; }

        string Company { get; set; }

        string UserFriendlyVersion { get; set; }

        SnapinVersion[] SnapinVersions { get; set; }
    }

    public interface Task : VMware.VimAutomation.Sdk.Types.V1.Task, ExtensionData
    {
    }

    public interface Versionable
    {
        string Id { get; set; }

        ulong Version { get; set; }
    }

    public interface VICredentialStoreItem
    {
        string Host { get; set; }

        string User { get; set; }

        string Password { get; set; }

        string File { get; set; }
    }

    public interface ViewBaseMirroredObject
    {
        object GetVIView(string[] properties);
    }

    public interface VIProperty
    {
        string Name { get; set; }

        string RetrievingType { get; set; }

        string DeclaringType { get; set; }

        string Value { get; set; }
    }

    public interface VIServer : VIConnection, ExtensionData
    {
        int Port { get; set; }

        string SessionId { get; set; }

        string Version { get; set; }

        string Build { get; set; }

        string ProductLine { get; set; }

        string InstanceUuid { get; set; }

        int RefCount { get; set; }
    }

    public enum AdvancedSettingType
    {
        ClusterHA,
        VM,
        ClusterDRS,
        VMHost,
        DatastoreClusterSDRS,
        VIServer
    }

    public enum AggregationFunction
    {
        SUM,
        AVG,
        AVERAGE,
        MIN,
        MAX,
        UNIQUE,
        COUNT
    }

    public enum BadCertificateAction
    {
        Fail,
        Prompt,
        Warn,
        Ignore,
        Unset
    }

    public enum Cardinality
    {
        Single,
        Multiple
    }

    public enum ConfigurationScope
    {
        Session,
        User,
        AllUsers
    }

    public enum DefaultVIServerMode
    {
        Single,
        Multiple
    }

    public enum EventCategory
    {
        Error,
        Info,
        Warning
    }

    public enum IPVersion
    {
        IPv4,
        IPv6
    }

    public enum ProxyPolicy
    {
        NoProxy,
        UseSystemProxy
    }

    public enum ScriptType
    {
        Powershell,
        Bat,
        Bash
    }

    public enum SharesLevel
    {
        Custom,
        High,
        Low,
        Normal
    }

    public enum VAppStorageFormat
    {
        Ovf,
        Ova
    }

    public enum VMotionPriority
    {
        Standard,
        High
    }

    public enum VMSwapfilePolicy
    {
        WithVM,
        Inherit,
        InHostDatastore
    }

    public class NamedIPEndPoint : IEquatable<NamedIPEndPoint>
    {
        public string Host { get; set; }

        public int? Port { get; set; }

        public bool Equals(NamedIPEndPoint namedIPEndPoint)
        {
            return (namedIPEndPoint != null && this.Host == namedIPEndPoint.Host && ((this.Port == null && namedIPEndPoint.Port == null) || (this.Port != null && this.Port.Equals(namedIPEndPoint.Port))));
        }

        public override bool Equals(object namedIPEndPoint)
        {
            return Equals(namedIPEndPoint as NamedIPEndPoint);
        }

        public override int GetHashCode()
        {
            return (Host + "_" + Port).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Alarm
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface AlarmAction : VMware.VimAutomation.ViCore.Types.V1.Action
    {
        AlarmDefinition AlarmDefinition { get; set; }

        AlarmActionTrigger[] Trigger { get; set; }
    }

    public interface AlarmActionTrigger : VIObjectCore
    {
        InventoryItemStatus StartStatus { get; set; }

        InventoryItemStatus EndStatus { get; set; }

        bool Repeat { get; set; }

        AlarmAction AlarmAction { get; set; }
    }

    public interface AlarmDefinition : VIObject, ExtensionData
    {
        VIObject Entity { get; set; }

        string Description { get; set; }

        bool Enabled { get; set; }

        int ActionRepeatMinutes { get; set; }
    }

    public interface EmailAction : AlarmAction
    {
        string Body { get; set; }

        string[] Cc { get; set; }

        string[] To { get; set; }

        string Subject { get; set; }
    }

    public interface ScriptAction : AlarmAction
    {
        string ScriptFilePath { get; set; }
    }

    public interface SnmpAction : AlarmAction
    {
    }

    public enum ActionType
    {
        SendEmail,
        ExecuteScript,
        SendSNMP
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.AnnotationManagement
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface Annotation : VIObjectCore
    {
        string AnnotatedEntityId { get; set; }

        InventoryItem AnnotatedEntity { get; set; }

        string Name { get; set; }

        string Value { get; set; }
    }

    public interface CustomAttribute : NamedObject, VIObjectCore
    {
        string ServerId { get; set; }

        VIServer Server { get; set; }

        CustomAttributeTargetType? TargetType { get; set; }
    }

    public enum CustomAttributeTargetType
    {
        VirtualMachine,
        ResourcePool,
        Folder,
        VMHost,
        Cluster,
        Datacenter
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Cluster
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface DrsClusterGroup : NamedObject, VIObjectCore, ExtensionData
    {
        VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster Cluster { get; set; }
    }

    public interface DrsClusterVMGroup : DrsClusterGroup
    {
        VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine[] Member { get; set; }

        DrsClusterGroupType GroupType { get; set; }
    }

    public interface DrsClusterVMHostGroup : DrsClusterGroup
    {
        VMware.VimAutomation.ViCore.Types.V1.Inventory.VMHost[] Member { get; set; }

        DrsClusterGroupType GroupType { get; set; }
    }

    public interface DrsRecommendation : VIObjectCore, ExtensionData
    {
        int Priority { get; set; }

        string Recommendation { get; set; }

        string Reason { get; set; }

        string ClusterId { get; set; }

        VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster Cluster { get; set; }

        string TargetId { get; set; }

        VIObject Target { get; set; }
    }

    public interface DrsRule : ResourceSchedulingRule
    {
        string ClusterId { get; set; }

        string ClusterUid { get; set; }

        int Key { get; set; }

        VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster Cluster { get; set; }

        string Uid { get; set; }
    }

    public interface DrsVMAffinityRule : DrsRule
    {
        bool KeepTogether { get; set; }

        string[] VMIds { get; set; }
    }

    public interface DrsVMAntiAffinityRule : DrsRule
    {
        bool KeepTogether { get; set; }

        string[] VMIds { get; set; }
    }

    public interface DrsVMHostAffinityRule : DrsRule
    {
        string[] VMIds { get; set; }

        string[] AffineHostIds { get; set; }

        string[] AntiAffineHostIds { get; set; }
    }

    public interface DrsVMHostRule : VIObjectCore, ExtensionData, NamedObject
    {
        bool Enabled { get; set; }

        VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster Cluster { get; set; }

        DrsVMHostRuleType Type { get; set; }

        DrsClusterVMGroup VMGroup { get; set; }

        DrsClusterVMHostGroup VMHostGroup { get; set; }
    }

    public interface ResourceSchedulingRule : ExtensionData, NamedObject
    {
        bool Enabled { get; set; }

        bool Mandatory { get; set; }

        ResourceSchedulingRuleType Type { get; set; }
    }

    public enum DrsAutomationLevel
    {
        Disabled,
        FullyAutomated,
        Manual,
        PartiallyAutomated,
        AsSpecifiedByCluster
    }

    public enum DrsClusterGroupType
    {
        All,
        VMGroup,
        VMHostGroup
    }

    public enum DrsMode
    {
        FullyAutomated,
        Manual,
        PartiallyAutomated
    }

    public enum DrsVMHostRuleType
    {
        MustRunOn,
        ShouldRunOn,
        MustNotRunOn,
        ShouldNotRunOn
    }

    public enum HAIsolationResponse
    {
        AsSpecifiedByCluster,
        PowerOff,
        DoNothing,
        Shutdown
    }

    public enum HARestartPriority
    {
        Disabled,
        Low,
        Medium,
        High,
        ClusterRestartPriority,
        Lowest,
        Highest
    }

    public enum ResourceSchedulingRuleType
    {
        VMAntiAffinity,
        VMAffinity,
        VMHostAffinity
    }

    public enum SetDrsClusterGroupOperationType
    {
        AddItems,
        RemoveItems
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.ContentLibrary
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;

    public interface ContentLibrary : NamedObject
    {
    }

    public interface ContentLibraryItem : VIObject
    {
        decimal SizeGB { get; set; }

        string Description { get; set; }

        DateTime CreationTime { get; set; }

        DateTime LastWriteTime { get; set; }

        string ItemType { get; set; }

        ContentLibrary ContentLibrary { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public interface Datastore : StorageResource, ExtensionData
    {
        string DatacenterId { get; set; }

        Datacenter Datacenter { get; set; }

        string ParentFolderId { get; set; }

        Folder ParentFolder { get; set; }

        string DatastoreBrowserPath { get; set; }

        decimal FreeSpaceMB { get; set; }

        decimal CapacityMB { get; set; }

        bool Accessible { get; set; }

        string Type { get; set; }

        bool StorageIOControlEnabled { get; set; }

        int? CongestionThresholdMillisecond { get; set; }

        DatastoreState State { get; set; }
    }

    public interface DatastoreCluster : StorageResource, ExtensionData, DatastoreRelatedObjectBase
    {
        DrsAutomationLevel SdrsAutomationLevel { get; set; }

        bool IOLoadBalanceEnabled { get; set; }

        int? IOLatencyThresholdMillisecond { get; set; }

        int? SpaceUtilizationThresholdPercent { get; set; }
    }

    public interface DatastoreFile : DatastoreItem
    {
        long? Length { get; set; }
    }

    public interface DatastoreFolder : DatastoreItem
    {
    }

    public interface DatastoreItem : VIObjectCore
    {
        string DatastoreId { get; set; }

        Datastore Datastore { get; set; }

        string Name { get; set; }

        string FolderPath { get; set; }

        string DatastoreFullPath { get; set; }

        string FullName { get; set; }

        DatastoreItemType ItemType { get; set; }

        DateTime? LastWriteTime { get; set; }

        void SetFullName(string value);
    }

    public interface DatastoreUser
    {
        string[] DatastoreIdList { get; set; }
    }

    public interface DatastoreVMDiskFile : DatastoreFile
    {
        long? CapacityKb { get; set; }

        string ControllerType { get; set; }

        DiskType DiskType { get; set; }

        string[] DiskExtents { get; set; }
    }

    public interface NasDatastore : Datastore
    {
        string[] RemoteHost { get; set; }

        string RemotePath { get; set; }

        string UserName { get; set; }

        AuthenticationMethod AuthenticationMethod { get; set; }

        string FileSystemVersion { get; set; }
    }

    public interface StorageResource : VIObject
    {
        decimal CapacityGB { get; set; }

        decimal FreeSpaceGB { get; set; }
    }

    public interface VmfsDatastore : Datastore
    {
        string FileSystemVersion { get; set; }
    }

    public enum AuthenticationMethod
    {
        NotSpecified,
        AUTH_SYS,
        Kerberos
    }

    public enum DatastoreItemType
    {
        File,
        Folder,
        FloppyImageFile,
        IsoImageFile,
        VmConfigFile,
        VmDiskFile,
        VmLogFile,
        VmNvramFile,
        VmSnapshotFile,
        HiddenFile
    }

    public enum DatastoreState
    {
        Available,
        Maintenance,
        EnteringMaintenance,
        Unavailable
    }

    public class SdrsVMAntiAffinityRule : AdvancedOption, IEquatable<SdrsVMAntiAffinityRule>
    {
        public VirtualMachine[] VM { get; set; }

        public bool Equals(SdrsVMAntiAffinityRule sdrsVMAntiAffinityRule)
        {
            return (sdrsVMAntiAffinityRule != null && ((this.VM == null && sdrsVMAntiAffinityRule.VM == null) || (this.VM != null && sdrsVMAntiAffinityRule.VM != null && Enumerable.SequenceEqual(this.VM, sdrsVMAntiAffinityRule.VM))));
        }

        public override bool Equals(object sdrsVMAntiAffinityRule)
        {
            return Equals(sdrsVMAntiAffinityRule as SdrsVMAntiAffinityRule);
        }

        public override int GetHashCode()
        {
            return (VM).GetHashCode();
        }
    }

    public class SdrsVMDiskAntiAffinityRule : AdvancedOption, IEquatable<SdrsVMDiskAntiAffinityRule>
    {
        public HardDisk[] Disks { get; set; }

        public string[] DiskIdentifier { get; set; }

        public bool Equals(SdrsVMDiskAntiAffinityRule sdrsVMDiskAntiAffinityRule)
        {
            return (sdrsVMDiskAntiAffinityRule != null && ((this.Disks == null && sdrsVMDiskAntiAffinityRule.Disks == null) || (this.Disks != null && sdrsVMDiskAntiAffinityRule.Disks != null && Enumerable.SequenceEqual(this.Disks, sdrsVMDiskAntiAffinityRule.Disks))) && ((this.DiskIdentifier == null && sdrsVMDiskAntiAffinityRule.DiskIdentifier == null) || (this.DiskIdentifier != null && sdrsVMDiskAntiAffinityRule.DiskIdentifier != null && Enumerable.SequenceEqual(this.DiskIdentifier, sdrsVMDiskAntiAffinityRule.DiskIdentifier))));
        }

        public override bool Equals(object sdrsVMDiskAntiAffinityRule)
        {
            return Equals(sdrsVMDiskAntiAffinityRule as SdrsVMDiskAntiAffinityRule);
        }

        public override int GetHashCode()
        {
            return (Disks + "_" + DiskIdentifier).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.EsxCli
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface DynamicManagedObject
    {
        string Id { get; set; }

        object InvokeOperation(string name, IDictionary parameters);
    }

    public interface DynamicTypeManager : DynamicManagedObject
    {
        MoInstanceDescriptor[] QueryMoInstances(string id);
        IDictionary<string, object> QueryTypeInfo(string typeSubstring);
        DynamicManagedObject CreateDynamicManagedObject(string id);
    }

    public interface EsxCli : VIObjectCore
    {
        VMHost VMHost { get; set; }

        DynamicTypeManager TypeManager { get; set; }
    }

    public interface EsxCliElement : VIObjectCore
    {
        string Id { get; set; }

        string Name { get; set; }

        string FullName { get; set; }

        EsxCliHelp help();
        EsxCliMethodHelp help(string methodName);
    }

    public interface EsxCliHelp
    {
        string DisplayName { get; set; }

        string FullDisplayName { get; set; }

        string Name { get; set; }

        string Help { get; set; }

        List<EsxCliHelp> ChildElement { get; set; }

        List<EsxCliMethodHelp> Method { get; set; }
    }

    public interface EsxCliMethodHelp
    {
        string DisplayName { get; set; }

        string FullDisplayName { get; set; }

        string Name { get; set; }

        string Help { get; set; }

        EsxCliParameterHelp Ret { get; set; }

        EsxCliParameterHelp[] Param { get; set; }

        IDictionary Hints { get; set; }
    }

    public interface EsxCliObject
    {
    }

    public interface EsxCliParameterHelp
    {
        string DisplayName { get; set; }

        string MethodFullDisplayName { get; set; }

        string Name { get; set; }

        string Help { get; set; }

        string[] Constraint { get; set; }

        string Default { get; set; }

        string[] Aliases { get; set; }
    }

    public interface MoInstanceDescriptor
    {
        string Id { get; set; }

        string Type { get; set; }
    }

    public class EsxCliNamedArgumentCollection : Dictionary<string, object>, IEquatable<EsxCliNamedArgumentCollection>
    {
        public bool Equals(EsxCliNamedArgumentCollection esxCliNamedArgumentCollection)
        {
            return (esxCliNamedArgumentCollection != null && base.Equals(esxCliNamedArgumentCollection));
        }

        public override bool Equals(object esxCliNamedArgumentCollection)
        {
            return Equals(esxCliNamedArgumentCollection as EsxCliNamedArgumentCollection);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.EsxTop
{
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface Counter
    {
        VIServer Server { get; set; }

        string Name { get; set; }

        string Uid { get; set; }

        CounterInfoField[] Fields { get; set; }
    }

    public interface CounterInfoField
    {
        string Name { get; set; }

        string Type { get; set; }
    }

    public interface CounterValue
    {
        VIServer Server { get; set; }

        string Counter { get; set; }
    }

    public interface DynamicData
    {
    }

    public interface TopologyInfo
    {
        VIServer Server { get; set; }

        string Topology { get; set; }

        string Uid { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host
{
    using System;
    using System.IO;
    using System.Net;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface HostFirmware : ExtensionData
    {
        string UploadUrl { get; set; }

        VMHost Host { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string Uid { get; set; }
    }

    public interface HostFirmwareBundle
    {
        string Url { get; set; }

        FileInfo Data { get; set; }

        VMHost Host { get; set; }
    }

    public interface HostService : VIObjectCore, ExtensionData
    {
        string Key { get; set; }

        string Label { get; set; }

        string Policy { get; set; }

        bool Required { get; set; }

        bool Running { get; set; }

        bool Uninstallable { get; set; }

        string[] Ruleset { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }
    }

    public interface TrapTarget : VIObjectCore
    {
        string Community { get; set; }

        string HostName { get; set; }

        int Port { get; set; }
    }

    public interface VMHostAuthentication
    {
        VMHost VMHost { get; set; }

        string Domain { get; set; }

        string[] TrustedDomains { get; set; }

        DomainMembershipStatus? DomainMembershipStatus { get; set; }
    }

    public interface VMHostDiagnosticPartition : VIObjectCore, ExtensionData
    {
        string HostId { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string CanonicalName { get; set; }

        string DiagnosticType { get; set; }

        int SlotCount { get; set; }

        string StorageType { get; set; }

        bool Active { get; set; }
    }

    public interface VMHostFirewallDefaultPolicy : VIObjectCore, ExtensionData
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        bool IncomingEnabled { get; set; }

        bool OutgoingEnabled { get; set; }
    }

    public interface VMHostFirewallException : VIObjectCore, ExtensionData
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string Name { get; set; }

        bool Enabled { get; set; }

        string IncomingPorts { get; set; }

        string OutgoingPorts { get; set; }

        string Protocols { get; set; }

        bool? ServiceRunning { get; set; }
    }

    public interface VMHostHardware : VIObjectCore
    {
        VMHost VMHost { get; set; }

        string Manufacturer { get; set; }

        string Model { get; set; }

        string SerialNumber { get; set; }

        string AssetTag { get; set; }

        string BiosVersion { get; set; }

        string CpuModel { get; set; }

        int CpuCount { get; set; }

        int CpuCoreCountTotal { get; set; }

        int MhzPerCpu { get; set; }

        int MemorySlotCount { get; set; }

        VMHostMemoryModule[] MemoryModules { get; set; }

        VMHostPowerSupply[] PowerSupplies { get; set; }

        int NicCount { get; set; }
    }

    public interface VMHostMemoryModule
    {
        string Name { get; set; }

        decimal CapacityGB { get; set; }

        string Manufacturer { get; set; }

        string Model { get; set; }

        string SerialNumber { get; set; }
    }

    public interface VmHostModule : VIObjectCore
    {
        VMHost VMHost { get; set; }

        string ServerId { get; set; }

        VIServer Server { get; set; }

        string Name { get; set; }

        string Options { get; set; }
    }

    public interface VMHostPatch : VIObjectCore
    {
        string Id { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        DateTime? InstallDate { get; set; }

        string Description { get; set; }
    }

    public interface VMHostPatchResult : VIObjectCore
    {
        string Id { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        bool IsApplicable { get; set; }

        bool IsInstalled { get; set; }

        bool NeedsReconnect { get; set; }

        bool NeedsRestart { get; set; }
    }

    public interface VMHostPciDevice : VIObject
    {
        VMHost VMHost { get; set; }

        string DeviceName { get; set; }

        string VendorName { get; set; }

        PciDeviceClass DeviceClass { get; set; }

        short DeviceId { get; set; }

        short SubDeviceId { get; set; }

        short ClassId { get; set; }

        short VendorId { get; set; }

        short SubVendorId { get; set; }
    }

    public interface VMHostPowerSupply
    {
        string Name { get; set; }

        int HealthState { get; set; }

        string HealthStateText { get; set; }

        int OperationalStatus { get; set; }

        string OperationalStatusText { get; set; }
    }

    public interface VMHostRoute : VIObjectCore, ExtensionData
    {
        IPAddress Destination { get; set; }

        IPAddress Gateway { get; set; }

        int PrefixLength { get; set; }

        IPVersion IPVersion { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }
    }

    public interface VmHostSnmp : VIObjectCore, ExtensionData
    {
        bool Enabled { get; set; }

        int Port { get; set; }

        string[] ReadOnlyCommunities { get; set; }

        string VmHostId { get; set; }

        VMHost VMHost { get; set; }

        TrapTarget[] TrapTargets { get; set; }
    }

    public interface VMHostTimeZone : VIObjectCore, NamedObject
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string Description { get; set; }

        int GmtOffset { get; set; }

        string Key { get; set; }
    }

    public enum DomainMembershipStatus
    {
        ClientTrustBroken,
        InconsistentTrust,
        NoServers,
        Ok,
        OtherProblem,
        ServerTrustBroken,
        Unknown
    }

    public enum HostServicePolicy
    {
        Automatic,
        On,
        Off
    }

    public enum PciDeviceClass
    {
        NotSpecified,
        UnclassifiedDevice,
        MassStorageController,
        NetworkController,
        DisplayController,
        MultimediaController,
        MemoryController,
        Bridge,
        CommunicationController,
        GenericSystemPeripheral,
        InputDeviceController,
        DockingStation,
        Processor,
        SerialBusController,
        WirelessController,
        IntelligentController,
        SatelliteCommunicationsController,
        EncryptionController,
        SignalProcessingController,
        ProcessingAccelerators,
        NonEssentialInstrumentation,
        Unknown
    }

    public enum VMHostPowerState
    {
        PoweredOff,
        PoweredOn,
        StandBy,
        Unknown
    }

    public enum VMHostState
    {
        Connected,
        Disconnected,
        NotResponding,
        Maintenance
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Account
{
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.PermissionManagement;

    public interface HostAccount : VIAccount, ExtensionData
    {
        string ServerId { get; set; }
    }

    public interface HostGroupAccount : VIUserAccount, HostAccount
    {
        string[] Users { get; set; }
    }

    public interface HostUserAccount : VIUserAccount, HostAccount
    {
        string[] Groups { get; set; }

        new string Description { get; set; }

        bool ShellAccessEnabled { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Networking
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking.Nic;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;

    public interface DistributedPortGroup : VirtualPortGroupBase, VIObject
    {
        string Notes { get; set; }

        Datacenter Datacenter { get; set; }

        DistributedPortGroupPortBinding PortBinding { get; set; }

        int NumPorts { get; set; }
    }

    public interface DistributedSwitch : VirtualSwitchBase, VIObject
    {
        string Notes { get; set; }

        Datacenter Datacenter { get; set; }
    }

    public interface NicTeamingPolicy : VIObjectCore, ExtensionData
    {
        LoadBalancingPolicy LoadBalancingPolicy { get; set; }

        NetworkFailoverDetectionPolicy NetworkFailoverDetectionPolicy { get; set; }

        bool NotifySwitches { get; set; }

        bool FailbackEnabled { get; set; }

        string[] ActiveNic { get; set; }

        string[] StandbyNic { get; set; }

        string[] UnusedNic { get; set; }

        bool CheckBeacon { get; set; }

        string VmHostId { get; set; }
    }

    public interface NicTeamingVirtualPortGroupPolicy : NicTeamingPolicy
    {
        string VirtualPortGroupId { get; set; }

        VirtualPortGroup VirtualPortGroup { get; set; }

        bool IsLoadBalancingInherited { get; set; }

        bool IsNetworkFailoverDetectionInherited { get; set; }

        bool IsNotifySwitchesInherited { get; set; }

        bool IsFailbackInherited { get; set; }

        bool IsFailoverOrderInherited { get; set; }

        bool IsCheckBeaconInherited { get; set; }
    }

    public interface NicTeamingVirtualSwitchPolicy : NicTeamingPolicy
    {
        string VirtualSwitchId { get; set; }

        VirtualSwitch VirtualSwitch { get; set; }

        int? BeaconInterval { get; set; }
    }

    public interface PortGroupPort
    {
        string Key { get; set; }

        string[] Mac { get; set; }

        string Type { get; set; }
    }

    public interface SecurityPolicy : VIObjectCore, ExtensionData
    {
        bool AllowPromiscuous { get; set; }

        bool ForgedTransmits { get; set; }

        bool MacChanges { get; set; }
    }

    public interface VirtualPortGroup : VirtualPortGroupBase, VirtualSwitchRelatedObject
    {
        PortGroupPort[] Port { get; set; }

        int VLanId { get; set; }

        string VirtualSwitchName { get; set; }

        string VMHostId { get; set; }

        string VirtualSwitchId { get; set; }
    }

    public interface VirtualPortGroupBase : VIObjectCore, NamedObject, ExtensionData
    {
        string Key { get; set; }

        VirtualSwitchBase VirtualSwitch { get; set; }
    }

    public interface VirtualPortgroupSecurityPolicy : SecurityPolicy
    {
        VirtualPortGroup VirtualPortGroup { get; set; }

        bool AllowPromiscuousInherited { get; set; }

        bool ForgedTransmitsInherited { get; set; }

        bool MacChangesInherited { get; set; }
    }

    public interface VirtualSwitch : VirtualSwitchBase
    {
        int NumPortsAvailable { get; set; }

        string[] Nic { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }
    }

    public interface VirtualSwitchBase : VIObjectCore, NamedObject, ExtensionData
    {
        int NumPorts { get; set; }

        string Key { get; set; }

        int? Mtu { get; set; }
    }

    public interface VirtualSwitchSecurityPolicy : SecurityPolicy
    {
        VirtualSwitch VirtualSwitch { get; set; }
    }

    public interface VMHostNetworkInfo : VIObject, ExtensionData
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string VMKernelGateway { get; set; }

        string VMKernelGatewayDevice { get; set; }

        string ConsoleGateway { get; set; }

        string ConsoleGatewayDevice { get; set; }

        string[] DnsAddress { get; set; }

        bool DnsFromDhcp { get; set; }

        string DomainName { get; set; }

        string HostName { get; set; }

        string[] SearchDomain { get; set; }

        VirtualSwitch[] VirtualSwitch { get; set; }

        PhysicalNic[] PhysicalNic { get; set; }

        HostVirtualNic[] ConsoleNic { get; set; }

        HostVirtualNic[] VirtualNic { get; set; }

        string DnsDhcpDevice { get; set; }

        bool? IPv6Enabled { get; set; }

        string ConsoleV6Gateway { get; set; }

        string ConsoleV6GatewayDevice { get; set; }

        string VMKernelV6Gateway { get; set; }

        string VMKernelV6GatewayDevice { get; set; }

        object ExtensionData2 { get; set; }
    }

    public enum DistributedPortGroupPortBinding
    {
        Static,
        Dynamic,
        Ephemeral,
        Unknown
    }

    public enum LoadBalancingPolicy
    {
        LoadBalanceIP,
        LoadBalanceLoadBased,
        LoadBalanceSrcMac,
        LoadBalanceSrcId,
        ExplicitFailover,
        Unknown
    }

    public enum NetworkFailoverDetectionPolicy
    {
        LinkStatus,
        BeaconProbing,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Networking.Nic
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface HostConsoleVirtualNic : HostVirtualNic
    {
        IPv6Address[] IPv6 { get; set; }

        bool? AutomaticIPv6 { get; set; }

        bool? IPv6ThroughDhcp { get; set; }

        bool? IPv6Enabled { get; set; }
    }

    public interface HostNic : VIObjectCore, NamedObject, ExtensionData
    {
        string Id { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string DeviceName { get; set; }

        string Mac { get; set; }

        bool DhcpEnabled { get; set; }

        string IP { get; set; }

        string SubnetMask { get; set; }
    }

    public interface HostVirtualNic : HostNic
    {
        string PortGroupName { get; set; }
    }

    public interface HostVMKernelVirtualNic : HostVirtualNic
    {
        bool VMotionEnabled { get; set; }

        bool? FaultToleranceLoggingEnabled { get; set; }

        IPv6Address[] IPv6 { get; set; }

        bool? AutomaticIPv6 { get; set; }

        bool? IPv6ThroughDhcp { get; set; }

        bool? IPv6Enabled { get; set; }

        int? Mtu { get; set; }

        bool? ManagementTrafficEnabled { get; set; }

        bool? VsanTrafficEnabled { get; set; }
    }

    public interface PhysicalNic : HostNic
    {
        long BitRatePerSec { get; set; }

        bool FullDuplex { get; set; }

        bool? WakeOnLanSupported { get; set; }
    }

    public enum HostVirtualNicType
    {
        ConsoleNic,
        VirtualNic
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Profile
{
    using System.Security;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface VMHostProfile : VIObject, ExtensionData
    {
        string ServerId { get; set; }

        VIServer Server { get; set; }

        string Description { get; set; }

        string ReferenceHostId { get; set; }

        VMHost ReferenceHost { get; set; }
    }

    public interface VMHostProfileImageCacheConfiguration : VIObjectCore
    {
        VMHostProfileInstallationDevice InstallationDevice { get; set; }

        VMHostProfileInstallationType InstallationType { get; set; }

        string DiskArguments { get; set; }

        bool? IgnoreSsd { get; set; }

        bool? OverwriteVmfs { get; set; }

        VMHostProfile HostProfile { get; set; }
    }

    public interface VMHostProfileIncompliance : VIObjectCore, ExtensionData
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string VMHostProfileId { get; set; }

        VMHostProfile VMHostProfile { get; set; }

        VMHostProfileIncomplianceElement[] IncomplianceElementList { get; set; }
    }

    public interface VMHostProfileIncomplianceElement : VIObjectCore
    {
        string PropertyName { get; set; }

        string Description { get; set; }
    }

    public interface VMHostProfileInput
    {
        string Key { get; set; }

        VMHostProfileInputType Type { get; set; }
    }

    public interface VMHostProfileStorageDeviceConfiguration : VIObjectCore
    {
        string DeviceName { get; set; }

        bool IsSharedClusterwide { get; set; }

        bool IsPerenniallyReserved { get; set; }

        bool DeviceStateOn { get; set; }

        int QueueFullThreshold { get; set; }

        int QueueFullSampleSize { get; set; }

        int NumReqOutstanding { get; set; }

        string PspName { get; set; }

        string ConfigInfo { get; set; }

        VMHostProfile HostProfile { get; set; }
    }

    public interface VMHostProfileUserConfiguration : VIObjectCore
    {
        string UserName { get; set; }

        string Role { get; set; }

        string Description { get; set; }

        VMHostProfilePasswordPolicy PasswordPolicy { get; set; }

        SecureString Password { get; set; }

        VMHostProfile HostProfile { get; set; }
    }

    public interface VMHostProfileVmPortGroupConfiguration : VIObjectCore
    {
        string PortGroupName { get; set; }

        string VSwitchName { get; set; }

        int VLanId { get; set; }

        VMHostProfile HostProfile { get; set; }
    }

    public enum VMHostProfileComplianceStatus
    {
        Compliant,
        NonCompliant,
        Unknown
    }

    public enum VMHostProfileInputType
    {
        Required,
        Inapplicable
    }

    public enum VMHostProfileInstallationDevice
    {
        None,
        Disk,
        Usb
    }

    public enum VMHostProfileInstallationType
    {
        StatelessCaching,
        StatefulInstall,
        Default
    }

    public enum VMHostProfilePasswordPolicy
    {
        Default,
        UserInput,
        Fixed
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Storage
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface FibreChannelHba : Hba
    {
        long NodeWorldWideName { get; set; }

        FibreChannelPortType PortType { get; set; }

        long PortWorldWideName { get; set; }

        long Speed { get; set; }
    }

    public interface Hba : VIObjectCore, NamedObject, ExtensionData
    {
        string Device { get; set; }

        string Key { get; set; }

        string Model { get; set; }

        string Pci { get; set; }

        string Driver { get; set; }

        int Bus { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        string Status { get; set; }

        HbaType Type { get; set; }

        string[] ScsiLunUids { get; set; }
    }

    public interface HostFileSystemVolumeInfo : VIObjectCore
    {
        string AccessMode { get; set; }

        string Path { get; set; }

        long Capacity { get; set; }

        decimal CapacityGB { get; set; }

        string Name { get; set; }

        string Type { get; set; }
    }

    public interface IScsiHba : Hba
    {
        IScsiHbaAuthenticationCapability AuthenticationCapability { get; set; }

        IScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        int? CurrentSpeedMb { get; set; }

        string IScsiAlias { get; set; }

        string IScsiName { get; set; }

        bool IsSoftwareBased { get; set; }

        int? MaxSpeedMb { get; set; }
    }

    public interface IScsiHbaAuthenticationCapability : VIObjectCore
    {
        bool Chap { get; set; }

        bool Krb5 { get; set; }

        bool? MutualChap { get; set; }

        bool Spkm { get; set; }

        bool Srp { get; set; }

        bool? TargetChap { get; set; }

        bool? TargetMutualChap { get; set; }
    }

    public interface IScsiHbaAuthenticationProperties : VIObjectCore
    {
        ChapType? ChapType { get; set; }

        bool? ChapInherited { get; set; }

        string ChapName { get; set; }

        bool? MutualChapEnabled { get; set; }

        bool? MutualChapInherited { get; set; }

        string MutualChapName { get; set; }
    }

    public interface IScsiHbaSendTarget : IScsiHbaTarget
    {
    }

    public interface IScsiHbaStaticTarget : IScsiHbaTarget
    {
        string IScsiName { get; set; }
    }

    public interface IScsiHbaTarget : VIObjectCore, NamedObject, ExtensionData
    {
        string Address { get; set; }

        int? Port { get; set; }

        string IScsiHbaKey { get; set; }

        IScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        IScsiHbaTargetType Type { get; set; }

        string IScsiHbaName { get; set; }
    }

    public interface VMHostDisk : VIObjectCore, ExtensionData
    {
        string Id { get; set; }

        string DeviceName { get; set; }

        long Cylinders { get; set; }

        int Heads { get; set; }

        int Sectors { get; set; }

        long TotalSectors { get; set; }

        VMHost VMHost { get; set; }

        ScsiLun ScsiLun { get; set; }
    }

    public interface VMHostDiskPartition : VIObjectCore, ExtensionData
    {
        string Id { get; set; }

        int PartitionNumber { get; set; }

        sbyte Attributes { get; set; }

        bool Logical { get; set; }

        long StartSector { get; set; }

        long EndSector { get; set; }

        VMHostDiskPartitionType Type { get; set; }

        VMHostDisk VMHostDisk { get; set; }
    }

    public interface VMHostStorageInfo : VIObject, ExtensionData
    {
        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        HostFileSystemVolumeInfo[] FileSystemVolumeInfo { get; set; }

        bool SoftwareIScsiEnabled { get; set; }

        ScsiLun[] ScsiLun { get; set; }
    }

    public enum ChapType
    {
        Prohibited,
        Discouraged,
        Preferred,
        Required
    }

    public enum FibreChannelPortType
    {
        Fabric,
        Loop,
        PointToPoint,
        Unknown
    }

    public enum HbaType
    {
        Block,
        FibreChannel,
        IScsi,
        ParallelScsi
    }

    public enum IScsiHbaTargetType
    {
        Static,
        Send
    }

    public enum VMHostDiskPartitionType
    {
        None,
        Extended,
        LinuxNative,
        LinuxSwap,
        Ntfs,
        Vmfs,
        VmkDiagnostic,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface ScsiLun : VIObjectCore, ExtensionData
    {
        string Id { get; set; }

        string CanonicalName { get; set; }

        string RuntimeName { get; set; }

        string Key { get; set; }

        string LunType { get; set; }

        string Model { get; set; }

        string SerialNumber { get; set; }

        string Vendor { get; set; }

        string ConsoleDeviceName { get; set; }

        long? CapacityMB { get; set; }

        decimal? CapacityGB { get; set; }

        ScsiLunMultipathPolicy MultipathPolicy { get; set; }

        int? CommandsToSwitchPath { get; set; }

        int? BlocksToSwitchPath { get; set; }

        string HostId { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        bool IsLocal { get; set; }

        bool? IsSsd { get; set; }

        ScsiDiskVsanStatus VsanStatus { get; set; }
    }

    public interface ScsiLunPath : VIObjectCore, ExtensionData, NamedObject
    {
        string ScsiLunId { get; set; }

        ScsiLun ScsiLun { get; set; }

        new string Name { get; set; }

        string LunPath { get; set; }

        string SanId { get; set; }

        ScsiLunPathState State { get; set; }

        bool Preferred { get; set; }

        string ScsiCanonicalName { get; set; }
    }

    public enum ScsiDiskVsanStatus
    {
        Unknown,
        Eligible,
        Ineligible,
        InUse
    }

    public enum ScsiLunMultipathPolicy
    {
        Fixed,
        MostRecentlyUsed,
        RoundRobin,
        Unknown
    }

    public enum ScsiLunPathState
    {
        Active,
        Dead,
        Disabled,
        Standby,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Host.VMStartPolicy
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface StartPolicy : ExtensionData
    {
        int StartDelay { get; set; }

        VmStopAction StopAction { get; set; }

        int StopDelay { get; set; }

        bool WaitForHeartbeat { get; set; }
    }

    public interface VMHostStartPolicy : StartPolicy, VIObjectCore
    {
        bool Enabled { get; set; }
    }

    public interface VMStartPolicy : StartPolicy, VIObjectCore
    {
        string VirtualMachineId { get; set; }

        string VMId { get; set; }

        VirtualMachine VM { get; set; }

        VmStartAction StartAction { get; set; }

        int? StartOrder { get; set; }
    }

    public enum VmStartAction
    {
        None,
        PowerOn
    }

    public enum VmStopAction
    {
        None,
        Suspend,
        PowerOff,
        GuestShutdown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Inventory
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement;
    using VMware.VimAutomation.ViCore.Types.V1.Host;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VM;
    using VMware.VimAutomation.ViCore.Types.V1.VM.Guest;
    using VMware.VimAutomation.ViCore.Types.V1.Vsan;

    public interface Cluster : VIContainer, DatastoreRelatedObjectBase
    {
        string ParentId { get; set; }

        Folder ParentFolder { get; set; }

        bool HAEnabled { get; set; }

        bool HAAdmissionControlEnabled { get; set; }

        int HAFailoverLevel { get; set; }

        HARestartPriority? HARestartPriority { get; set; }

        HAIsolationResponse? HAIsolationResponse { get; set; }

        VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        bool DrsEnabled { get; set; }

        DrsMode DrsMode { get; set; }

        DrsAutomationLevel DrsAutomationLevel { get; set; }

        int? HATotalSlots { get; set; }

        int? HAUsedSlots { get; set; }

        int? HAAvailableSlots { get; set; }

        int? HASlotCpuMHz { get; set; }

        int? HASlotMemoryMb { get; set; }

        decimal? HASlotMemoryGB { get; set; }

        int? HASlotNumVCpus { get; set; }

        bool? VsanEnabled { get; set; }

        VsanDiskClaimMode? VsanDiskClaimMode { get; set; }

        string EVCMode { get; set; }
    }

    public interface Datacenter : FolderContainer, DatastoreRelatedObjectBase
    {
        string ParentFolderId { get; set; }

        Folder ParentFolder { get; set; }
    }

    public interface Folder : FolderContainer, DatastoreRelatedObjectBase
    {
        string ParentId { get; set; }

        InventoryItem Parent { get; set; }

        bool IsChildTypeVm { get; set; }

        bool IsChildTypeComputeResource { get; set; }

        bool IsChildTypeDatacenter { get; set; }

        bool IsChildTypeDatastore { get; set; }

        FolderType Type { get; set; }
    }

    public interface FolderContainer : VIContainer
    {
    }

    public interface InventoryItem : VIObject, ExtensionData
    {
    }

    public interface ResourcePool : VIContainer
    {
        string ParentId { get; set; }

        InventoryItem Parent { get; set; }

        SharesLevel CpuSharesLevel { get; set; }

        int NumCpuShares { get; set; }

        long CpuReservationMHz { get; set; }

        bool CpuExpandableReservation { get; set; }

        long CpuLimitMHz { get; set; }

        SharesLevel MemSharesLevel { get; set; }

        int NumMemShares { get; set; }

        decimal MemReservationMB { get; set; }

        decimal MemReservationGB { get; set; }

        bool MemExpandableReservation { get; set; }

        decimal MemLimitMB { get; set; }

        decimal MemLimitGB { get; set; }
    }

    public interface Template : InventoryItem, DatastoreUser
    {
    }

    public interface VApp : VIContainer
    {
        string ParentId { get; set; }

        InventoryItem Parent { get; set; }

        VAppStatus Status { get; set; }

        int NumCpuShares { get; set; }

        long CpuReservationMhz { get; set; }

        bool CpuExpandableReservation { get; set; }

        long CpuLimitMhz { get; set; }

        SharesLevel CpuSharesLevel { get; set; }

        int NumMemShares { get; set; }

        long MemReservationMB { get; set; }

        decimal MemReservationGB { get; set; }

        bool MemExpandableReservation { get; set; }

        long MemLimitMB { get; set; }

        decimal MemLimitGB { get; set; }

        SharesLevel MemSharesLevel { get; set; }
    }

    public interface VIContainer : InventoryItem
    {
    }

    public interface VirtualMachine : InventoryItem, DatastoreUser, DatastoreRelatedObjectBase
    {
        PowerState PowerState { get; set; }

        string Notes { get; set; }

        VMGuest Guest { get; set; }

        int NumCpu { get; set; }

        int CoresPerSocket { get; set; }

        decimal MemoryMB { get; set; }

        decimal MemoryGB { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }

        VApp VApp { get; set; }

        string FolderId { get; set; }

        Folder Folder { get; set; }

        string ResourcePoolId { get; set; }

        ResourcePool ResourcePool { get; set; }

        HARestartPriority? HARestartPriority { get; set; }

        HAIsolationResponse? HAIsolationResponse { get; set; }

        DrsAutomationLevel? DrsAutomationLevel { get; set; }

        VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        VMResourceConfiguration VMResourceConfiguration { get; set; }

        VMVersion Version { get; set; }

        string HardwareVersion { get; set; }

        string PersistentId { get; set; }

        string GuestId { get; set; }

        decimal UsedSpaceGB { get; set; }

        decimal ProvisionedSpaceGB { get; set; }
    }

    public interface VMHost : VIContainer, DatastoreUser, DatastoreRelatedObjectBase
    {
        string ParentId { get; set; }

        VMHostState State { get; set; }

        VMHostPowerState PowerState { get; set; }

        string VMSwapfileDatastoreId { get; set; }

        VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        VMHostTimeZone TimeZone { get; set; }

        string Version { get; set; }

        string Build { get; set; }

        InventoryItem Parent { get; set; }

        Datastore VMSwapfileDatastore { get; set; }

        VMHostStorageInfo StorageInfo { get; set; }

        VMHostNetworkInfo NetworkInfo { get; set; }

        VMHostDiagnosticPartition DiagnosticPartition { get; set; }

        VMHostFirewallDefaultPolicy FirewallDefaultPolicy { get; set; }

        bool IsStandalone { get; set; }

        VMHostState ConnectionState { get; set; }

        string Manufacturer { get; set; }

        string Model { get; set; }

        int NumCpu { get; set; }

        int CpuTotalMhz { get; set; }

        int CpuUsageMhz { get; set; }

        string LicenseKey { get; set; }

        decimal MemoryTotalMB { get; set; }

        decimal MemoryTotalGB { get; set; }

        decimal MemoryUsageMB { get; set; }

        decimal MemoryUsageGB { get; set; }

        string ProcessorType { get; set; }

        bool HyperthreadingActive { get; set; }

        string MaxEVCMode { get; set; }
    }

    public enum FolderType
    {
        VM,
        HostAndCluster,
        Datastore,
        Network,
        Datacenter
    }

    public enum InventoryItemStatus
    {
        Green,
        Yellow,
        Red
    }

    public enum PowerState
    {
        PoweredOff,
        PoweredOn,
        Suspended
    }

    public enum VAppStatus
    {
        Started,
        Starting,
        Stopped,
        Stopping
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.OSCustomization
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface OSCustomizationNicMapping : VIObjectCore, ExtensionData
    {
        string SpecId { get; set; }

        OSCustomizationSpec Spec { get; set; }

        string NetworkAdapterMac { get; set; }

        int Position { get; set; }

        OSCustomizationIPMode IPMode { get; set; }

        string IPAddress { get; set; }

        string SubnetMask { get; set; }

        string DefaultGateway { get; set; }

        string AlternateGateway { get; set; }
    }

    public interface OSCustomizationSpec : VIObject, ExtensionData
    {
        string ServerId { get; set; }

        VIServer Server { get; set; }

        string AdminPassword { get; set; }

        int? AutoLogonCount { get; set; }

        bool? ChangeSid { get; set; }

        bool? DeleteAccounts { get; set; }

        string Description { get; set; }

        string[] DnsServer { get; set; }

        string[] DnsSuffix { get; set; }

        string Domain { get; set; }

        string DomainAdminPassword { get; set; }

        string DomainAdminUsername { get; set; }

        string DomainPassword { get; set; }

        string DomainUsername { get; set; }

        string FullName { get; set; }

        string[] GuiRunOnce { get; set; }

        DateTime? LastUpdate { get; set; }

        string NamingPrefix { get; set; }

        NamingScheme? NamingScheme { get; set; }

        string OrgName { get; set; }

        OSType? OSType { get; set; }

        string ProductKey { get; set; }

        string TimeZone { get; set; }

        string Workgroup { get; set; }

        LicenseMode? LicenseMode { get; set; }

        int? LicenseMaxConnections { get; set; }

        OSCustomizationSpecType Type { get; set; }

        sbyte[] EncryptionKey { get; set; }
    }

    public enum LicenseMode
    {
        PerSeat,
        PerServer,
        NotSpecified
    }

    public enum NamingScheme
    {
        Custom,
        Fixed,
        Prefix,
        Vm
    }

    public enum OSCustomizationIPMode
    {
        UseDhcp,
        PromptUser,
        UseVCApplication,
        UseStaticIP
    }

    public enum OSCustomizationSpecType
    {
        NonPersistent,
        Persistent
    }

    public enum OSType
    {
        Windows,
        Linux
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Ovf
{
    using System.Collections;

    public interface OvfConfiguration
    {
        string Source { get; set; }

        Hashtable ToHashTable();
    }

    public interface OvfProperty
    {
        string Key { get; set; }

        object Value { get; set; }

        object DefaultValue { get; set; }

        string OvfTypeDescription { get; set; }

        string Description { get; set; }

        string GetPropertyPath();
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.PermissionManagement
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface Permission : VIObjectCore, ExtensionData
    {
        string EntityId { get; set; }

        VIObject Entity { get; set; }

        string Role { get; set; }

        string Principal { get; set; }

        bool Propagate { get; set; }

        bool IsGroup { get; set; }
    }

    public interface Privilege : VIObjectCore, NamedObject, ExtensionData
    {
        string Description { get; set; }

        string ServerId { get; set; }

        VIServer Server { get; set; }

        string Id { get; set; }
    }

    public interface PrivilegeGroup : Privilege
    {
        string[] PrivilegeList { get; set; }
    }

    public interface PrivilegeItem : Privilege
    {
        bool AppliedOnParent { get; set; }

        string ParentGroupId { get; set; }

        PrivilegeGroup ParentGroup { get; set; }
    }

    public interface Role : VIObjectCore, NamedObject, ExtensionData
    {
        int Id { get; set; }

        string Description { get; set; }

        bool IsSystem { get; set; }

        string[] PrivilegeList { get; set; }

        string ServerId { get; set; }

        VIServer Server { get; set; }
    }

    public interface VIAccount : VIObjectCore, NamedObject, ExtensionData
    {
        string Id { get; set; }

        VIServer Server { get; set; }

        string Domain { get; set; }

        string Description { get; set; }
    }

    public interface VIGroupAccount : VIAccount
    {
    }

    public interface VIUserAccount : VIAccount
    {
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.RelatedObject
{
    using System.Collections.Generic;

    public interface ClusterRelatedObject : ClusterRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.Cluster> ToCuster();
    }

    public interface ClusterRelatedObjectBase
    {
    }

    public interface DatacenterRelatedObject : DatacenterRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.Datacenter> ToDatacenter();
    }

    public interface DatacenterRelatedObjectBase
    {
    }

    public interface DatastoreClusterRelatedObject : DatastoreClusterRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement.DatastoreCluster> ToDatastoreCluster();
    }

    public interface DatastoreClusterRelatedObjectBase
    {
    }

    public interface DatastoreRelatedObject : DatastoreRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement.Datastore> ToDatastore();
    }

    public interface DatastoreRelatedObjectBase
    {
    }

    public interface FolderRelatedObject : FolderRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder> ToFolder();
    }

    public interface FolderRelatedObjectBase
    {
    }

    public interface HardDiskRelatedObject : HardDiskRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.VirtualDevice.HardDisk> ToHardDisk();
    }

    public interface HardDiskRelatedObjectBase
    {
    }

    public interface NetworkAdapterRelatedObjectBase
    {
    }

    public interface ResourcePoolRelatedObject : ResourcePoolRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.ResourcePool> ToResourcePool();
    }

    public interface ResourcePoolRelatedObjectBase
    {
    }

    public interface VirtualPortGroupRelatedObject : VirtualPortGroupRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Host.Networking.VirtualPortGroupBase> ToVirtualPortGroup();
    }

    public interface VirtualPortGroupRelatedObjectBase
    {
    }

    public interface VirtualSwitchRelatedObject : VirtualSwitchRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Host.Networking.VirtualSwitchBase> ToVirtualSwitch();
    }

    public interface VirtualSwitchRelatedObjectBase
    {
    }

    public interface VMHostRelatedObject : VMHostRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.VMHost> ToVMHost();
    }

    public interface VMHostRelatedObjectBase
    {
    }

    public interface VmRelatedObject : VmRelatedObjectBase
    {
        IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine> ToVirtualMachine();
    }

    public interface VmRelatedObjectBase
    {
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Security
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;

    public interface KmipCertificateInfo
    {
        string Subject { get; set; }

        string Issuer { get; set; }

        string SerialNumber { get; set; }

        DateTime StartDate { get; set; }

        DateTime ExpiryDate { get; set; }

        string Fingerprint { get; set; }

        DateTime CheckTime { get; set; }
    }

    public interface KmsCluster : VIObject
    {
        bool UseAsDefaultKeyProvider { get; set; }

        string ClientCertificate { get; set; }

        DateTime? ClientCertificateExpiryDate { get; set; }

        KmipCertificateInfo ClientCertificateInfo { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Stat
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface FloatSample
    {
        float Value { get; set; }
    }

    public interface LongSample
    {
        long Value { get; set; }
    }

    public interface Sample : VIObjectCore
    {
        DateTime Timestamp { get; set; }

        string MetricId { get; set; }

        string Description { get; set; }

        string Unit { get; set; }

        VIObject Entity { get; set; }

        string EntityId { get; set; }

        int IntervalSecs { get; set; }

        string Instance { get; set; }
    }

    public interface StatInterval : VIObjectCore, NamedObject, ExtensionData
    {
        string ServerId { get; set; }

        VIServer Server { get; set; }

        int SamplingPeriodSecs { get; set; }

        int StorageTimeSecs { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Storage
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface ReplicationGroup : VIObject, AdvancedOption
    {
    }

    public interface StoragePolicy : VIObject, AdvancedOption
    {
    }

    public enum StoragePolicyTargetType
    {
        VmHomeAndHardDisks,
        VmHome
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Storage.VDisk
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public interface FlatVDisk : VDisk
    {
        VDiskStorageFormat StorageFormat { get; set; }
    }

    public interface RawVDisk : VDisk
    {
        string DeviceName { get; set; }
    }

    public interface VDisk : VIObject, ExtensionData
    {
        string Filename { get; set; }

        DiskType DiskType { get; set; }

        Datastore Datastore { get; set; }

        decimal CapacityGB { get; set; }
    }

    public enum VDiskStorageFormat
    {
        Thick,
        Thin,
        EagerZeroedThick,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Tagging
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public interface Tag : VIObject
    {
        TagCategory Category { get; set; }

        string Description { get; set; }
    }

    public interface TagAssignment : VIObjectCore
    {
        Tag Tag { get; set; }

        VIObjectCore Entity { get; set; }
    }

    public interface TagCategory : VIObject
    {
        string Description { get; set; }

        Cardinality Cardinality { get; set; }

        string[] EntityType { get; set; }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.VirtualDevice
{
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;

    public interface CDDrive : VirtualDevice
    {
        string IsoPath { get; set; }

        string HostDevice { get; set; }

        string RemoteDevice { get; set; }
    }

    public interface ConnectInfo
    {
        bool? AllowGuestControl { get; set; }

        bool? Connected { get; set; }

        bool? StartConnected { get; set; }
    }

    public interface FlatHardDisk : HardDisk
    {
        VirtualDiskStorageFormat StorageFormat { get; set; }
    }

    public interface FloppyDrive : VirtualDevice
    {
        string FloppyImagePath { get; set; }

        string HostDevice { get; set; }

        string RemoteDevice { get; set; }
    }

    public interface HardDisk : VirtualDevice, DatastoreRelatedObjectBase
    {
        PersistencePolicy Persistence { get; set; }

        DiskType DiskType { get; set; }

        string Filename { get; set; }

        long CapacityKB { get; set; }

        decimal CapacityGB { get; set; }
    }

    public interface NetworkAdapter : VirtualDevice
    {
        string MacAddress { get; set; }

        bool WakeOnLanEnabled { get; set; }

        string NetworkName { get; set; }

        VirtualNetworkAdapterType Type { get; set; }
    }

    public interface PassThroughDevice : VIObjectCore, ExtensionData, NamedObject
    {
        int? Key { get; set; }

        new string Name { get; set; }

        string VendorName { get; set; }

        string VMId { get; set; }

        VirtualMachine VM { get; set; }

        string VMHostId { get; set; }

        VMHost VMHost { get; set; }
    }

    public interface PciPassthroughDevice : PassThroughDevice
    {
        int DeviceId { get; set; }

        int VendorId { get; set; }

        int ClassId { get; set; }

        int Bus { get; set; }

        int Slot { get; set; }

        int Function { get; set; }

        PciPassthroughDeviceState State { get; set; }
    }

    public interface RawHardDisk : HardDisk
    {
        string DeviceName { get; set; }

        string ScsiCanonicalName { get; set; }
    }

    public interface ScsiController : VirtualDevice
    {
        ScsiBusSharingMode BusSharingMode { get; set; }

        ScsiControllerType Type { get; set; }

        int UnitNumber { get; set; }
    }

    public interface ScsiPassthroughDevice : PassThroughDevice
    {
        int ControllerKey { get; set; }

        int UnitNumber { get; set; }

        string Class { get; set; }
    }

    public interface UsbDevice : VirtualDevice
    {
    }

    public interface VirtualDevice : VIObject, ExtensionData
    {
        string ParentId { get; set; }

        VIObject Parent { get; set; }

        ConnectInfo ConnectionState { get; set; }
    }

    public enum DiskType
    {
        RawVirtual,
        RawPhysical,
        Flat,
        Unknown
    }

    public enum PassthroughDeviceType
    {
        Pci,
        Scsi
    }

    public enum PciPassthroughDeviceState
    {
        Enabled,
        Active,
        NeedsHostReboot
    }

    public enum PersistencePolicy
    {
        Persistent,
        NonPersistent,
        Undoable,
        IndependentPersistent,
        IndependentNonPersistent,
        Unknown
    }

    public enum ScsiBusSharingMode
    {
        NoSharing,
        Physical,
        Virtual
    }

    public enum ScsiControllerType
    {
        Default,
        ParaVirtual,
        VirtualBusLogic,
        VirtualLsiLogic,
        VirtualLsiLogicSAS
    }

    public enum VirtualDiskStorageFormat
    {
        Thin2GB,
        Thick,
        Thick2GB,
        Thin,
        EagerZeroedThick
    }

    public enum VirtualNetworkAdapterType
    {
        Unknown,
        E1000,
        E1000e,
        Flexible,
        Vmxnet,
        EnhancedVmxnet,
        Vmxnet3
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.VM
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public interface RemoteConsoleVM : VIObject
    {
    }

    public interface Snapshot : VIObject, ExtensionData
    {
        string Description { get; set; }

        DateTime Created { get; set; }

        bool Quiesced { get; set; }

        PowerState PowerState { get; set; }

        VirtualMachine VM { get; set; }

        string VMId { get; set; }

        Snapshot Parent { get; set; }

        string ParentSnapshotId { get; set; }

        Snapshot ParentSnapshot { get; set; }

        Snapshot[] Children { get; set; }

        decimal SizeMB { get; set; }

        decimal? SizeGB { get; set; }

        bool IsCurrent { get; set; }

        bool IsReplaySupported { get; set; }
    }

    public interface VMDiskResourceConfiguration
    {
        int Key { get; set; }

        int NumDiskShares { get; set; }

        SharesLevel DiskSharesLevel { get; set; }

        long? DiskLimitIOPerSecond { get; set; }
    }

    public interface VMQuestion : VIObjectCore, ExtensionData
    {
        string VMId { get; set; }

        VirtualMachine VM { get; set; }

        string QuestionId { get; set; }

        string Text { get; set; }

        VMQuestionOption[] Options { get; set; }

        VMQuestionOption DefaultOption { get; set; }
    }

    public interface VMQuestionOption
    {
        string QuestionId { get; set; }

        VMQuestion Question { get; set; }

        string OptionId { get; set; }

        string Label { get; set; }

        string Summary { get; set; }
    }

    public interface VMResourceConfiguration : VIObjectCore
    {
        string VirtualMachineId { get; set; }

        VirtualMachine VM { get; set; }

        string VMId { get; set; }

        int NumCpuShares { get; set; }

        long CpuReservationMhz { get; set; }

        long? CpuLimitMhz { get; set; }

        SharesLevel CpuSharesLevel { get; set; }

        int NumMemShares { get; set; }

        long MemReservationMB { get; set; }

        decimal MemReservationGB { get; set; }

        long? MemLimitMB { get; set; }

        decimal? MemLimitGB { get; set; }

        SharesLevel MemSharesLevel { get; set; }

        VMDiskResourceConfiguration[] DiskResourceConfiguration { get; set; }

        HTCoreSharing HTCoreSharing { get; set; }

        CpuAffinity CpuAffinity { get; set; }

        int[] CpuAffinityList { get; set; }
    }

    public enum CpuAffinity
    {
        NoAffinity,
        Cpu0,
        Cpu1,
        Cpu2,
        Cpu3,
        Cpu4,
        Cpu5,
        Cpu6,
        Cpu7,
        Cpu8,
        Cpu9,
        Cpu10,
        Cpu11,
        Cpu12,
        Cpu13,
        Cpu14,
        Cpu15,
        Cpu16,
        Cpu17,
        Cpu18,
        Cpu19,
        Cpu20,
        Cpu21,
        Cpu22,
        Cpu23,
        Cpu24,
        Cpu25,
        Cpu26,
        Cpu27,
        Cpu28,
        Cpu29,
        Cpu30,
        Cpu31,
        Cpu32,
        Cpu33,
        Cpu34,
        Cpu35,
        Cpu36,
        Cpu37,
        Cpu38,
        Cpu39,
        Cpu40,
        Cpu41,
        Cpu42,
        Cpu43,
        Cpu44,
        Cpu45,
        Cpu46,
        Cpu47,
        Cpu48,
        Cpu49,
        Cpu50,
        Cpu51,
        Cpu52,
        Cpu53,
        Cpu54,
        Cpu55,
        Cpu56,
        Cpu57,
        Cpu58,
        Cpu59,
        Cpu60,
        Cpu61,
        Cpu62,
        Cpu63
    }

    public enum HTCoreSharing
    {
        Any,
        None,
        Internal
    }

    public enum VMVersion
    {
        Unknown,
        V4,
        V7,
        V8,
        V9,
        V10,
        V11,
        V12,
        V13,
        V14
    }

    public class VFlashCacheMigrationOption : AdvancedOption, IEquatable<VFlashCacheMigrationOption>
    {
        public bool Equals(VFlashCacheMigrationOption vFlashCacheMigrationOption)
        {
            return (vFlashCacheMigrationOption != null);
        }

        public override bool Equals(object vFlashCacheMigrationOption)
        {
            return Equals(vFlashCacheMigrationOption as VFlashCacheMigrationOption);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.VM.Guest
{
    using System;
    using System.Globalization;
    using System.Text;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public interface DiskInfo
    {
        string Path { get; set; }

        long Capacity { get; set; }

        long FreeSpace { get; set; }

        decimal CapacityGB { get; set; }

        decimal FreeSpaceGB { get; set; }
    }

    public interface NicInfo
    {
        bool Connected { get; set; }

        NetworkAdapter Device { get; set; }

        string[] IPAddress { get; set; }

        string MacAddress { get; set; }

        string NetworkName { get; set; }
    }

    public interface VMGuest : VIObjectCore, ExtensionData
    {
        string OSFullName { get; set; }

        string[] IPAddress { get; set; }

        GuestState State { get; set; }

        DiskInfo[] Disks { get; set; }

        string HostName { get; set; }

        NicInfo[] Nics { get; set; }

        string VmId { get; set; }

        VirtualMachine VM { get; set; }

        string VmUid { get; set; }

        string VmName { get; set; }

        string GuestFamily { get; set; }

        string GuestId { get; set; }

        string ConfiguredGuestId { get; set; }

        string RuntimeGuestId { get; set; }

        string ToolsVersion { get; set; }
    }

    public interface VMScriptResult : VIObjectCore
    {
        VirtualMachine VM { get; set; }

        int ExitCode { get; set; }

        string ScriptOutput { get; set; }

        int Length { get; set; }

        char Item { get; set; }

        bool Contains(string value);
        void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        bool EndsWith(string value);
        bool EndsWith(string value, StringComparison comparisonType);
        bool EndsWith(string value, bool ignoreCase, CultureInfo culture);
        bool Equals(object obj);
        bool Equals(string value, StringComparison comparisonType);
        int GetHashCode();
        int IndexOf(char value, int startIndex, int count);
        int IndexOf(char value);
        int IndexOf(string value);
        int IndexOf(char value, int startIndex);
        int IndexOf(string value, int startIndex);
        int IndexOf(string value, StringComparison comparisonType);
        int IndexOf(string value, int startIndex, int count);
        int IndexOf(string value, int startIndex, StringComparison comparisonType);
        int IndexOf(string value, int startIndex, int count, StringComparison comparisonType);
        int IndexOfAny(char[] anyOf);
        int IndexOfAny(char[] anyOf, int startIndex);
        int IndexOfAny(char[] anyOf, int startIndex, int count);
        string Insert(int startIndex, string value);
        bool IsNormalized();
        bool IsNormalized(NormalizationForm normalizationForm);
        int LastIndexOf(char value);
        int LastIndexOf(string value);
        int LastIndexOf(char value, int startIndex);
        int LastIndexOf(string value, int startIndex);
        int LastIndexOf(string value, StringComparison comparisonType);
        int LastIndexOf(string value, int startIndex, int count);
        int LastIndexOf(string value, int startIndex, StringComparison comparisonType);
        int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType);
        int LastIndexOf(char value, int startIndex, int count);
        int LastIndexOfAny(char[] anyOf);
        int LastIndexOfAny(char[] anyOf, int startIndex);
        int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        string Normalize();
        string Normalize(NormalizationForm normalizationForm);
        string PadLeft(int totalWidth);
        string PadLeft(int totalWidth, char paddingChar);
        string PadRight(int totalWidth);
        string PadRight(int totalWidth, char paddingChar);
        string Remove(int startIndex);
        string Remove(int startIndex, int count);
        string Replace(char oldChar, char newChar);
        string Replace(string oldValue, string newValue);
        string[] Split(char[] separator);
        string[] Split(char[] separator, int count);
        string[] Split(char[] separator, StringSplitOptions options);
        string[] Split(string[] separator, StringSplitOptions options);
        string[] Split(char[] separator, int count, StringSplitOptions options);
        string[] Split(string[] separator, int count, StringSplitOptions options);
        bool StartsWith(string value);
        bool StartsWith(string value, StringComparison comparisonType);
        bool StartsWith(string value, bool ignoreCase, CultureInfo culture);
        string Substring(int startIndex);
        string Substring(int startIndex, int length);
        char[] ToCharArray();
        char[] ToCharArray(int startIndex, int length);
        string ToLower();
        string ToLower(CultureInfo culture);
        string ToLowerInvariant();
        string ToString();
        string ToUpper();
        string ToUpper(CultureInfo culture);
        string ToUpperInvariant();
        string Trim();
        string Trim(char[] trimChars);
        string TrimEnd(char[] trimChars);
        string TrimStart(char[] trimChars);
    }

    public enum GuestState
    {
        NotRunning,
        Resetting,
        Running,
        ShuttingDown,
        Standby,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Types.V1.Vsan
{
    public enum VsanDataMigrationMode
    {
        Full,
        EnsureAccessibility,
        NoDataMigration
    }

    public enum VsanDiskClaimMode
    {
        Manual,
        Automatic,
        Unknown
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Security;
    using VMware.Vim;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public class AdvancedSettingImpl : AdvancedSetting, IEquatable<AdvancedSettingImpl>
    {
        public string Uid { get; set; }

        public object Value { get; set; }

        public string Description { get; set; }

        public AdvancedSettingType? Type { get; set; }

        public VIObject Entity { get; set; }

        public string Id { get; set; }

        public string Name { get; set; }

        public bool Equals(AdvancedSettingImpl advancedSettingImpl)
        {
            return (advancedSettingImpl != null && this.Uid == advancedSettingImpl.Uid && ((this.Value == null && advancedSettingImpl.Value == null) || (this.Value != null && this.Value.Equals(advancedSettingImpl.Value))) && this.Description == advancedSettingImpl.Description && this.Type == advancedSettingImpl.Type && ((this.Entity == null && advancedSettingImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(advancedSettingImpl.Entity))) && this.Id == advancedSettingImpl.Id && this.Name == advancedSettingImpl.Name);
        }

        public override bool Equals(object advancedSettingImpl)
        {
            return this.Equals(advancedSettingImpl as AdvancedSettingImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + Value + "_" + Description + "_" + Type + "_" + Entity + "_" + Id + "_" + Name).GetHashCode();
        }
    }

    public class ConnectInfoImpl : ConnectInfo, IEquatable<ConnectInfoImpl>
    {
        public bool? AllowGuestControl { get; set; }

        public bool? Connected { get; set; }

        public bool? StartConnected { get; set; }

        public bool Equals(ConnectInfoImpl connectInfoImpl)
        {
            return (connectInfoImpl != null && ((this.AllowGuestControl == null && connectInfoImpl.AllowGuestControl == null) || (this.AllowGuestControl != null && this.AllowGuestControl.Equals(connectInfoImpl.AllowGuestControl))) && ((this.Connected == null && connectInfoImpl.Connected == null) || (this.Connected != null && this.Connected.Equals(connectInfoImpl.Connected))) && ((this.StartConnected == null && connectInfoImpl.StartConnected == null) || (this.StartConnected != null && this.StartConnected.Equals(connectInfoImpl.StartConnected))));
        }

        public override bool Equals(object connectInfoImpl)
        {
            return Equals(connectInfoImpl as ConnectInfoImpl);
        }

        public override int GetHashCode()
        {
            return (AllowGuestControl + "_" + Connected + "_" + StartConnected).GetHashCode();
        }
    }

    public class DescriptionImpl : VMware.VimAutomation.ViCore.Types.V1.Description, IEquatable<DescriptionImpl>
    {
        public string Label { get; set; }

        public string Summary { get; set; }

        public bool Equals(DescriptionImpl descriptionImpl)
        {
            return (descriptionImpl != null && this.Label == descriptionImpl.Label && this.Summary == descriptionImpl.Summary);
        }

        public override bool Equals(object descriptionImpl)
        {
            return Equals(descriptionImpl as DescriptionImpl);
        }

        public override int GetHashCode()
        {
            return (Label + "_" + Summary).GetHashCode();
        }
    }

    public class ElementInfoImpl : IEquatable<ElementInfoImpl>
    {
        public string Type { get; set; }

        public string Name { get; set; }

        public bool Optional { get; set; }

        public bool Equals(ElementInfoImpl elementInfoImpl)
        {
            return (elementInfoImpl != null && this.Type == elementInfoImpl.Type && this.Name == elementInfoImpl.Name && this.Optional == elementInfoImpl.Optional);
        }

        public override bool Equals(object elementInfoImpl)
        {
            return Equals(elementInfoImpl as ElementInfoImpl);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Name + "_" + Optional).GetHashCode();
        }
    }

    public class IPv6AddressImpl : IPv6Address, IEquatable<IPv6AddressImpl>
    {
        public string Address { get; set; }

        public int PrefixLength { get; set; }

        public bool Equals(IPv6AddressImpl iPv6AddressImpl)
        {
            return (iPv6AddressImpl != null && this.Address == iPv6AddressImpl.Address && this.PrefixLength == iPv6AddressImpl.PrefixLength);
        }

        public override bool Equals(object iPv6AddressImpl)
        {
            return Equals(iPv6AddressImpl as IPv6AddressImpl);
        }

        public override int GetHashCode()
        {
            return (Address + "_" + PrefixLength).GetHashCode();
        }
    }

    public class LogDescriptorImpl : LogDescriptor, IEquatable<LogDescriptorImpl>
    {
        public string SourceEntityId { get; set; }

        public string Creator { get; set; }

        public string Filename { get; set; }

        public string Format { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Description Info { get; set; }

        public string Key { get; set; }

        public string MimeType { get; set; }

        public object ExtensionData { get; set; }

        public string Uid { get; set; }

        public bool Equals(LogDescriptorImpl logDescriptorImpl)
        {
            return (logDescriptorImpl != null && this.SourceEntityId == logDescriptorImpl.SourceEntityId && this.Creator == logDescriptorImpl.Creator && this.Filename == logDescriptorImpl.Filename && this.Format == logDescriptorImpl.Format && ((this.Info == null && logDescriptorImpl.Info == null) || (this.Info != null && this.Info.Equals(logDescriptorImpl.Info))) && this.Key == logDescriptorImpl.Key && this.MimeType == logDescriptorImpl.MimeType && ((this.ExtensionData == null && logDescriptorImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(logDescriptorImpl.ExtensionData))) && this.Uid == logDescriptorImpl.Uid);
        }

        public override bool Equals(object logDescriptorImpl)
        {
            return Equals(logDescriptorImpl as LogDescriptorImpl);
        }

        public override int GetHashCode()
        {
            return (SourceEntityId + "_" + Creator + "_" + Filename + "_" + Format + "_" + Info + "_" + Key + "_" + MimeType + "_" + ExtensionData + "_" + Uid).GetHashCode();
        }
    }

    public class PartialObjectImpl : VIObjectImpl, IEquatable<PartialObjectImpl>
    {
        public Type Type { get; set; }

        public bool Equals(PartialObjectImpl partialObjectImpl)
        {
            return (partialObjectImpl != null && ((this.Type == null && partialObjectImpl.Type == null) || (this.Type != null && this.Type.Equals(partialObjectImpl.Type))) && this.Id == partialObjectImpl.Id && this.Name == partialObjectImpl.Name && this.Uid == partialObjectImpl.Uid);
        }

        public override bool Equals(object partialObjectImpl)
        {
            return Equals(partialObjectImpl as PartialObjectImpl);
        }

        public override int GetHashCode()
        {
            return (Type + "_" + Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }

    public class PowerCLIConfigurationImpl : PowerCLIConfiguration, IEquatable<PowerCLIConfigurationImpl>
    {
        public DefaultVIServerMode? DefaultVIServerMode { get; set; }

        public ProxyPolicy? ProxyPolicy { get; set; }

        public bool? ParticipateInCEIP { get; set; }

        public ProxyPolicy? CEIPDataTransferProxyPolicy { get; set; }

        public bool? DisplayDeprecationWarnings { get; set; }

        public BadCertificateAction? InvalidCertificateAction { get; set; }

        public int? WebOperationTimeoutSeconds { get; set; }

        public string VMConsoleWindowBrowser { get; set; }

        public ConfigurationScope Scope { get; set; }

        public bool Equals(PowerCLIConfigurationImpl powerCLIConfigurationImpl)
        {
            return (powerCLIConfigurationImpl != null && ((this.DefaultVIServerMode == null && powerCLIConfigurationImpl.DefaultVIServerMode == null) || (this.DefaultVIServerMode != null && this.DefaultVIServerMode.Equals(powerCLIConfigurationImpl.DefaultVIServerMode))) && ((this.ProxyPolicy == null && powerCLIConfigurationImpl.ProxyPolicy == null) || (this.ProxyPolicy != null && this.ProxyPolicy.Equals(powerCLIConfigurationImpl.ProxyPolicy))) && ((this.ParticipateInCEIP == null && powerCLIConfigurationImpl.ParticipateInCEIP == null) || (this.ParticipateInCEIP != null && this.ParticipateInCEIP.Equals(powerCLIConfigurationImpl.ParticipateInCEIP))) && ((this.CEIPDataTransferProxyPolicy == null && powerCLIConfigurationImpl.CEIPDataTransferProxyPolicy == null) || (this.CEIPDataTransferProxyPolicy != null && this.CEIPDataTransferProxyPolicy.Equals(powerCLIConfigurationImpl.CEIPDataTransferProxyPolicy))) && ((this.DisplayDeprecationWarnings == null && powerCLIConfigurationImpl.DisplayDeprecationWarnings == null) || (this.DisplayDeprecationWarnings != null && this.DisplayDeprecationWarnings.Equals(powerCLIConfigurationImpl.DisplayDeprecationWarnings))) && ((this.InvalidCertificateAction == null && powerCLIConfigurationImpl.InvalidCertificateAction == null) || (this.InvalidCertificateAction != null && this.InvalidCertificateAction.Equals(powerCLIConfigurationImpl.InvalidCertificateAction))) && ((this.WebOperationTimeoutSeconds == null && powerCLIConfigurationImpl.WebOperationTimeoutSeconds == null) || (this.WebOperationTimeoutSeconds != null && this.WebOperationTimeoutSeconds.Equals(powerCLIConfigurationImpl.WebOperationTimeoutSeconds))) && this.VMConsoleWindowBrowser == powerCLIConfigurationImpl.VMConsoleWindowBrowser && this.Scope == powerCLIConfigurationImpl.Scope);
        }

        public override bool Equals(object powerCLIConfigurationImpl)
        {
            return Equals(powerCLIConfigurationImpl as PowerCLIConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (DefaultVIServerMode + "_" + ProxyPolicy + "_" + ParticipateInCEIP + "_" + CEIPDataTransferProxyPolicy + "_" + DisplayDeprecationWarnings + "_" + InvalidCertificateAction + "_" + WebOperationTimeoutSeconds + "_" + VMConsoleWindowBrowser + "_" + Scope).GetHashCode();
        }
    }

    public class PowerCLIVersionImpl : PowerCLIVersion, IEquatable<PowerCLIVersionImpl>
    {
        public int Major { get; set; }

        public int Minor { get; set; }

        public int Build { get; set; }

        public int Revision { get; set; }

        public string Copyright { get; set; }

        public string Company { get; set; }

        public string UserFriendlyVersion { get; set; }

        public SnapinVersion[] SnapinVersions { get; set; }

        public bool Equals(PowerCLIVersionImpl powerCLIVersionImpl)
        {
            return (powerCLIVersionImpl != null && this.Major == powerCLIVersionImpl.Major && this.Minor == powerCLIVersionImpl.Minor && this.Build == powerCLIVersionImpl.Build && this.Revision == powerCLIVersionImpl.Revision && this.Copyright == powerCLIVersionImpl.Copyright && this.Company == powerCLIVersionImpl.Company && this.UserFriendlyVersion == powerCLIVersionImpl.UserFriendlyVersion && ((this.SnapinVersions == null && powerCLIVersionImpl.SnapinVersions == null) || (this.SnapinVersions != null && powerCLIVersionImpl.SnapinVersions != null && Enumerable.SequenceEqual(this.SnapinVersions, powerCLIVersionImpl.SnapinVersions))));
        }

        public override bool Equals(object powerCLIVersionImpl)
        {
            return Equals(powerCLIVersionImpl as PowerCLIVersionImpl);
        }

        public override int GetHashCode()
        {
            return (Major + "_" + Minor + "_" + Build + "_" + Revision + "_" + Copyright + "_" + Company + "_" + UserFriendlyVersion + "_" + SnapinVersions).GetHashCode();
        }
    }

    public class VimExtensionServerInfoImpl : IEquatable<VimExtensionServerInfoImpl>
    {
        public string[] AdminEmail { get; set; }

        public string Company { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Description Description { get; set; }

        public string Type { get; set; }

        public string Url { get; set; }

        public bool Equals(VimExtensionServerInfoImpl vimExtensionServerInfoImpl)
        {
            return (vimExtensionServerInfoImpl != null && ((this.AdminEmail == null && vimExtensionServerInfoImpl.AdminEmail == null) || (this.AdminEmail != null && vimExtensionServerInfoImpl.AdminEmail != null && Enumerable.SequenceEqual(this.AdminEmail, vimExtensionServerInfoImpl.AdminEmail))) && this.Company == vimExtensionServerInfoImpl.Company && ((this.Description == null && vimExtensionServerInfoImpl.Description == null) || (this.Description != null && this.Description.Equals(vimExtensionServerInfoImpl.Description))) && this.Type == vimExtensionServerInfoImpl.Type && this.Url == vimExtensionServerInfoImpl.Url);
        }

        public override bool Equals(object vimExtensionServerInfoImpl)
        {
            return Equals(vimExtensionServerInfoImpl as VimExtensionServerInfoImpl);
        }

        public override int GetHashCode()
        {
            return (AdminEmail + "_" + Company + "_" + Description + "_" + Type + "_" + Url).GetHashCode();
        }
    }

    public class VIObjectImpl : VIObject, IEquatable<VIObjectImpl>
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public bool Equals(VIObjectImpl vIObjectImpl)
        {
            return (vIObjectImpl != null && this.Id == vIObjectImpl.Id && this.Name == vIObjectImpl.Name && this.Uid == vIObjectImpl.Uid);
        }

        public override bool Equals(object vIObjectImpl)
        {
            return Equals(vIObjectImpl as VIObjectImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }

    public class VIServerImpl : VIServer, IEquatable<VIServerImpl>
    {
        public bool IsConnected { get; set; }

        public string Id { get; set; }

        public Uri ServiceUri { get; set; }

        public string SessionSecret { get; set; }

        public string Name { get; set; }

        public int Port { get; set; }

        public string SessionId { get; set; }

        public string User { get; set; }

        public string Uid { get; set; }

        public string Version { get; set; }

        public string Build { get; set; }

        public string ProductLine { get; set; }

        public string InstanceUuid { get; set; }

        public int RefCount { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VIServerImpl vIServerImpl)
        {
            return (vIServerImpl != null && this.IsConnected == vIServerImpl.IsConnected && this.Id == vIServerImpl.Id && ((this.ServiceUri == null && vIServerImpl.ServiceUri == null) || (this.ServiceUri != null && this.ServiceUri.Equals(vIServerImpl.ServiceUri))) && this.SessionSecret == vIServerImpl.SessionSecret && this.Name == vIServerImpl.Name && this.Port == vIServerImpl.Port && this.SessionId == vIServerImpl.SessionId && this.User == vIServerImpl.User && this.Uid == vIServerImpl.Uid && this.Version == vIServerImpl.Version && this.Build == vIServerImpl.Build && this.ProductLine == vIServerImpl.ProductLine && this.InstanceUuid == vIServerImpl.InstanceUuid && this.RefCount == vIServerImpl.RefCount && ((this.ExtensionData == null && vIServerImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vIServerImpl.ExtensionData))));
        }

        public override bool Equals(object vIServerImpl)
        {
            return Equals(vIServerImpl as VIServerImpl);
        }

        public override int GetHashCode()
        {
            return (IsConnected + "_" + Id + "_" + ServiceUri + "_" + SessionSecret + "_" + Name + "_" + Port + "_" + SessionId + "_" + User + "_" + Uid + "_" + Version + "_" + Build + "_" + ProductLine + "_" + InstanceUuid + "_" + RefCount + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Alarm
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Alarm;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public abstract class AlarmActionImpl : AlarmAction, IEquatable<AlarmActionImpl>
    {
        public ActionType ActionType { get; set; }

        public AlarmDefinition AlarmDefinition { get; set; }

        public AlarmActionTrigger[] Trigger { get; set; }

        public string Uid { get; set; }

        public ulong AlarmVersion { get; set; }

        public bool Equals(AlarmActionImpl alarmActionImpl)
        {
            return (alarmActionImpl != null && this.ActionType == alarmActionImpl.ActionType && ((this.AlarmDefinition == null && alarmActionImpl.AlarmDefinition == null) || (this.AlarmDefinition != null && this.AlarmDefinition.Equals(alarmActionImpl.AlarmDefinition))) && ((this.Trigger == null && alarmActionImpl.Trigger == null) || (this.Trigger != null && alarmActionImpl.Trigger != null && Enumerable.SequenceEqual(this.Trigger, alarmActionImpl.Trigger))) && this.Uid == alarmActionImpl.Uid && this.AlarmVersion == alarmActionImpl.AlarmVersion);
        }

        public override bool Equals(object alarmActionImpl)
        {
            return Equals(alarmActionImpl as AlarmActionImpl);
        }

        public override int GetHashCode()
        {
            return (ActionType + "_" + AlarmDefinition + "_" + Trigger + "_" + Uid + "_" + AlarmVersion).GetHashCode();
        }
    }

    public class AlarmActionTriggerImpl : AlarmActionTrigger, IEquatable<AlarmActionTriggerImpl>
    {
        public string Uid { get; set; }

        public InventoryItemStatus StartStatus { get; set; }

        public InventoryItemStatus EndStatus { get; set; }

        public bool Repeat { get; set; }

        public AlarmAction AlarmAction { get; set; }

        public ulong AlarmVersion { get; set; }

        public bool Equals(AlarmActionTriggerImpl alarmActionTriggerImpl)
        {
            return (alarmActionTriggerImpl != null && this.Uid == alarmActionTriggerImpl.Uid && this.StartStatus == alarmActionTriggerImpl.StartStatus && this.EndStatus == alarmActionTriggerImpl.EndStatus && this.Repeat == alarmActionTriggerImpl.Repeat && ((this.AlarmAction == null && alarmActionTriggerImpl.AlarmAction == null) || (this.AlarmAction != null && this.AlarmAction.Equals(alarmActionTriggerImpl.AlarmAction))) && this.AlarmVersion == alarmActionTriggerImpl.AlarmVersion);
        }

        public override bool Equals(object alarmActionTriggerImpl)
        {
            return Equals(alarmActionTriggerImpl as AlarmActionTriggerImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + StartStatus + "_" + EndStatus + "_" + Repeat + "_" + AlarmAction + "_" + AlarmVersion).GetHashCode();
        }
    }

    public class AlarmDefinitionImpl : AlarmDefinition, IEquatable<AlarmDefinitionImpl>
    {
        public VIObject Entity { get; set; }

        public string Description { get; set; }

        public bool Enabled { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public int ActionRepeatMinutes { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public bool Equals(AlarmDefinitionImpl alarmDefinitionImpl)
        {
            return (alarmDefinitionImpl != null && ((this.Entity == null && alarmDefinitionImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(alarmDefinitionImpl.Entity))) && this.Description == alarmDefinitionImpl.Description && this.Enabled == alarmDefinitionImpl.Enabled && this.Name == alarmDefinitionImpl.Name && ((this.ExtensionData == null && alarmDefinitionImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(alarmDefinitionImpl.ExtensionData))) && this.ActionRepeatMinutes == alarmDefinitionImpl.ActionRepeatMinutes && this.Id == alarmDefinitionImpl.Id && this.Uid == alarmDefinitionImpl.Uid);
        }

        public override bool Equals(object alarmDefinitionImpl)
        {
            return Equals(alarmDefinitionImpl as AlarmDefinitionImpl);
        }

        public override int GetHashCode()
        {
            return (Entity + "_" + Description + "_" + Enabled + "_" + Name + "_" + ExtensionData + "_" + ActionRepeatMinutes + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class EmailActionImpl : AlarmActionImpl, EmailAction, IEquatable<EmailActionImpl>
    {
        public string Body { get; set; }

        public string[] Cc { get; set; }

        public string[] To { get; set; }

        public string Subject { get; set; }

        public bool Equals(EmailActionImpl emailActionImpl)
        {
            return (emailActionImpl != null && this.Body == emailActionImpl.Body && ((this.Cc == null && emailActionImpl.Cc == null) || (this.Cc != null && emailActionImpl.Cc != null && Enumerable.SequenceEqual(this.Cc, emailActionImpl.Cc))) && ((this.To == null && emailActionImpl.To == null) || (this.To != null && emailActionImpl.To != null && Enumerable.SequenceEqual(this.To, emailActionImpl.To))) && this.Subject == emailActionImpl.Subject && this.AlarmVersion == emailActionImpl.AlarmVersion && this.Uid == emailActionImpl.Uid && ((this.AlarmDefinition == null && emailActionImpl.AlarmDefinition == null) || (this.AlarmDefinition != null && this.AlarmDefinition.Equals(emailActionImpl.AlarmDefinition))) && ((this.Trigger == null && emailActionImpl.Trigger == null) || (this.Trigger != null && emailActionImpl.Trigger != null && Enumerable.SequenceEqual(this.Trigger, emailActionImpl.Trigger))) && this.ActionType == emailActionImpl.ActionType);
        }

        public override bool Equals(object emailActionImpl)
        {
            return Equals(emailActionImpl as EmailActionImpl);
        }

        public override int GetHashCode()
        {
            return (Body + "_" + Cc + "_" + To + "_" + Subject + "_" + AlarmVersion + "_" + Uid + "_" + AlarmDefinition + "_" + Trigger + "_" + ActionType).GetHashCode();
        }
    }

    public class ScriptActionImpl : AlarmActionImpl, ScriptAction, IEquatable<ScriptActionImpl>
    {
        public string ScriptFilePath { get; set; }

        public bool Equals(ScriptActionImpl scriptActionImpl)
        {
            return (scriptActionImpl != null && this.ScriptFilePath == scriptActionImpl.ScriptFilePath && this.AlarmVersion == scriptActionImpl.AlarmVersion && this.Uid == scriptActionImpl.Uid && ((this.AlarmDefinition == null && scriptActionImpl.AlarmDefinition == null) || (this.AlarmDefinition != null && this.AlarmDefinition.Equals(scriptActionImpl.AlarmDefinition))) && ((this.Trigger == null && scriptActionImpl.Trigger == null) || (this.Trigger != null && scriptActionImpl.Trigger != null && Enumerable.SequenceEqual(this.Trigger, scriptActionImpl.Trigger))) && this.ActionType == scriptActionImpl.ActionType);
        }

        public override bool Equals(object scriptActionImpl)
        {
            return Equals(scriptActionImpl as ScriptActionImpl);
        }

        public override int GetHashCode()
        {
            return (ScriptFilePath + "_" + AlarmVersion + "_" + Uid + "_" + AlarmDefinition + "_" + Trigger + "_" + ActionType).GetHashCode();
        }
    }

    public class SnmpActionImpl : AlarmActionImpl, SnmpAction, IEquatable<SnmpActionImpl>
    {
        public bool Equals(SnmpActionImpl snmpActionImpl)
        {
            return (snmpActionImpl != null && this.AlarmVersion == snmpActionImpl.AlarmVersion && this.Uid == snmpActionImpl.Uid && ((this.AlarmDefinition == null && snmpActionImpl.AlarmDefinition == null) || (this.AlarmDefinition != null && this.AlarmDefinition.Equals(snmpActionImpl.AlarmDefinition))) && ((this.Trigger == null && snmpActionImpl.Trigger == null) || (this.Trigger != null && snmpActionImpl.Trigger != null && Enumerable.SequenceEqual(this.Trigger, snmpActionImpl.Trigger))) && this.ActionType == snmpActionImpl.ActionType);
        }

        public override bool Equals(object snmpActionImpl)
        {
            return Equals(snmpActionImpl as SnmpActionImpl);
        }

        public override int GetHashCode()
        {
            return (AlarmVersion + "_" + Uid + "_" + AlarmDefinition + "_" + Trigger + "_" + ActionType).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.AnnotationManagement
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.AnnotationManagement;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class AnnotationImpl : Annotation, IEquatable<AnnotationImpl>
    {
        public string AnnotatedEntityId { get; set; }

        public InventoryItem AnnotatedEntity { get; set; }

        public string Name { get; set; }

        public string Value { get; set; }

        public string Uid { get; set; }

        public bool Equals(AnnotationImpl annotationImpl)
        {
            return (annotationImpl != null && this.AnnotatedEntityId == annotationImpl.AnnotatedEntityId && ((this.AnnotatedEntity == null && annotationImpl.AnnotatedEntity == null) || (this.AnnotatedEntity != null && this.AnnotatedEntity.Equals(annotationImpl.AnnotatedEntity))) && this.Name == annotationImpl.Name && this.Value == annotationImpl.Value && this.Uid == annotationImpl.Uid);
        }

        public override bool Equals(object annotationImpl)
        {
            return Equals(annotationImpl as AnnotationImpl);
        }

        public override int GetHashCode()
        {
            return (AnnotatedEntityId + "_" + AnnotatedEntity + "_" + Name + "_" + Value + "_" + Uid).GetHashCode();
        }
    }

    public class CustomAttributeImpl : CustomAttribute, IEquatable<CustomAttributeImpl>
    {
        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public int Key { get; set; }

        public string Name { get; set; }

        public CustomAttributeTargetType? TargetType { get; set; }

        public string Uid { get; set; }

        public bool Equals(CustomAttributeImpl customAttributeImpl)
        {
            return (customAttributeImpl != null && this.ServerId == customAttributeImpl.ServerId && ((this.Server == null && customAttributeImpl.Server == null) || (this.Server != null && this.Server.Equals(customAttributeImpl.Server))) && this.Key == customAttributeImpl.Key && this.Name == customAttributeImpl.Name && this.TargetType == customAttributeImpl.TargetType && this.Uid == customAttributeImpl.Uid);
        }

        public override bool Equals(object customAttributeImpl)
        {
            return Equals(customAttributeImpl as CustomAttributeImpl);
        }

        public override int GetHashCode()
        {
            return (ServerId + "_" + Server + "_" + Key + "_" + Name + "_" + TargetType + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Cluster
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public abstract class DrsClusterGroupImpl : DrsClusterGroup, IEquatable<DrsClusterGroupImpl>
    {
        public string Name { get; set; }

        public DrsClusterGroupType GroupType { get; set; }

        public object ExtensionData { get; set; }

        public string Uid { get; set; }

        public Cluster Cluster { get; set; }

        public bool Equals(DrsClusterGroupImpl drsClusterGroupImpl)
        {
            return (drsClusterGroupImpl != null && this.Name == drsClusterGroupImpl.Name && this.GroupType == drsClusterGroupImpl.GroupType && ((this.ExtensionData == null && drsClusterGroupImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsClusterGroupImpl.ExtensionData))) && this.Uid == drsClusterGroupImpl.Uid && ((this.Cluster == null && drsClusterGroupImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsClusterGroupImpl.Cluster))));
        }

        public override bool Equals(object drsClusterGroupImpl)
        {
            return Equals(drsClusterGroupImpl as DrsClusterGroupImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + GroupType + "_" + ExtensionData + "_" + Uid + "_" + Cluster).GetHashCode();
        }
    }

    public class DrsClusterVMGroupImpl : DrsClusterGroupImpl, DrsClusterVMGroup, IEquatable<DrsClusterVMGroupImpl>
    {
        public VirtualMachine[] Member { get; set; }

        public bool Equals(DrsClusterVMGroupImpl drsClusterVMGroupImpl)
        {
            return (drsClusterVMGroupImpl != null && ((this.Member == null && drsClusterVMGroupImpl.Member == null) || (this.Member != null && drsClusterVMGroupImpl.Member != null && Enumerable.SequenceEqual(this.Member, drsClusterVMGroupImpl.Member))) && this.Uid == drsClusterVMGroupImpl.Uid && this.Name == drsClusterVMGroupImpl.Name && ((this.Cluster == null && drsClusterVMGroupImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsClusterVMGroupImpl.Cluster))) && ((this.ExtensionData == null && drsClusterVMGroupImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsClusterVMGroupImpl.ExtensionData))) && this.GroupType == drsClusterVMGroupImpl.GroupType);
        }

        public override bool Equals(object drsClusterVMGroupImpl)
        {
            return Equals(drsClusterVMGroupImpl as DrsClusterVMGroupImpl);
        }

        public override int GetHashCode()
        {
            return (Member + "_" + Uid + "_" + Name + "_" + Cluster + "_" + ExtensionData + "_" + GroupType).GetHashCode();
        }
    }

    public class DrsClusterVMHostGroupImpl : DrsClusterGroupImpl, DrsClusterVMHostGroup, IEquatable<DrsClusterVMHostGroupImpl>
    {
        public VMHost[] Member { get; set; }

        public bool Equals(DrsClusterVMHostGroupImpl drsClusterVMHostGroupImpl)
        {
            return (drsClusterVMHostGroupImpl != null && ((this.Member == null && drsClusterVMHostGroupImpl.Member == null) || (this.Member != null && drsClusterVMHostGroupImpl.Member != null && Enumerable.SequenceEqual(this.Member, drsClusterVMHostGroupImpl.Member))) && this.Uid == drsClusterVMHostGroupImpl.Uid && this.Name == drsClusterVMHostGroupImpl.Name && ((this.Cluster == null && drsClusterVMHostGroupImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsClusterVMHostGroupImpl.Cluster))) && ((this.ExtensionData == null && drsClusterVMHostGroupImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsClusterVMHostGroupImpl.ExtensionData))) && this.GroupType == drsClusterVMHostGroupImpl.GroupType);
        }

        public override bool Equals(object drsClusterVMHostGroupImpl)
        {
            return Equals(drsClusterVMHostGroupImpl as DrsClusterVMHostGroupImpl);
        }

        public override int GetHashCode()
        {
            return (Member + "_" + Uid + "_" + Name + "_" + Cluster + "_" + ExtensionData + "_" + GroupType).GetHashCode();
        }
    }

    public class DrsRecommendationImpl : DrsRecommendation, IEquatable<DrsRecommendationImpl>
    {
        public string Key { get; set; }

        public int Priority { get; set; }

        public string Recommendation { get; set; }

        public string Reason { get; set; }

        public string ClusterId { get; set; }

        public Cluster Cluster { get; set; }

        public string TargetId { get; set; }

        public VIObject Target { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(DrsRecommendationImpl drsRecommendationImpl)
        {
            return (drsRecommendationImpl != null && this.Key == drsRecommendationImpl.Key && this.Priority == drsRecommendationImpl.Priority && this.Recommendation == drsRecommendationImpl.Recommendation && this.Reason == drsRecommendationImpl.Reason && this.ClusterId == drsRecommendationImpl.ClusterId && ((this.Cluster == null && drsRecommendationImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsRecommendationImpl.Cluster))) && this.TargetId == drsRecommendationImpl.TargetId && ((this.Target == null && drsRecommendationImpl.Target == null) || (this.Target != null && this.Target.Equals(drsRecommendationImpl.Target))) && this.Uid == drsRecommendationImpl.Uid && ((this.ExtensionData == null && drsRecommendationImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsRecommendationImpl.ExtensionData))));
        }

        public override bool Equals(object drsRecommendationImpl)
        {
            return Equals(drsRecommendationImpl as DrsRecommendationImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Priority + "_" + Recommendation + "_" + Reason + "_" + ClusterId + "_" + Cluster + "_" + TargetId + "_" + Target + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public abstract class DrsRuleImpl : ResourceSchedulingRuleImpl, DrsRule, IEquatable<DrsRuleImpl>
    {
        public int Key { get; set; }

        public string Uid { get; set; }

        public Cluster Cluster { get; set; }

        public string ClusterId { get; set; }

        public string ClusterUid { get; set; }

        public bool Equals(DrsRuleImpl drsRuleImpl)
        {
            return (drsRuleImpl != null && this.Key == drsRuleImpl.Key && this.Uid == drsRuleImpl.Uid && ((this.Cluster == null && drsRuleImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsRuleImpl.Cluster))) && this.ClusterId == drsRuleImpl.ClusterId && this.ClusterUid == drsRuleImpl.ClusterUid && this.Enabled == drsRuleImpl.Enabled && this.Mandatory == drsRuleImpl.Mandatory && this.Type == drsRuleImpl.Type && ((this.ExtensionData == null && drsRuleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsRuleImpl.ExtensionData))) && this.Name == drsRuleImpl.Name);
        }

        public override bool Equals(object drsRuleImpl)
        {
            return Equals(drsRuleImpl as DrsRuleImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Uid + "_" + Cluster + "_" + ClusterId + "_" + ClusterUid + "_" + Enabled + "_" + Mandatory + "_" + Type + "_" + ExtensionData + "_" + Name).GetHashCode();
        }
    }

    public class DrsVMAffinityRuleImpl : DrsRuleImpl, DrsVMAffinityRule, IEquatable<DrsVMAffinityRuleImpl>
    {
        public bool KeepTogether { get; set; }

        public string[] VMIds { get; set; }

        public bool Equals(DrsVMAffinityRuleImpl drsVMAffinityRuleImpl)
        {
            return (drsVMAffinityRuleImpl != null && this.KeepTogether == drsVMAffinityRuleImpl.KeepTogether && ((this.VMIds == null && drsVMAffinityRuleImpl.VMIds == null) || (this.VMIds != null && drsVMAffinityRuleImpl.VMIds != null && Enumerable.SequenceEqual(this.VMIds, drsVMAffinityRuleImpl.VMIds))) && this.Enabled == drsVMAffinityRuleImpl.Enabled && this.Mandatory == drsVMAffinityRuleImpl.Mandatory && this.Type == drsVMAffinityRuleImpl.Type && ((this.ExtensionData == null && drsVMAffinityRuleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsVMAffinityRuleImpl.ExtensionData))) && this.Name == drsVMAffinityRuleImpl.Name && this.Uid == drsVMAffinityRuleImpl.Uid && this.ClusterId == drsVMAffinityRuleImpl.ClusterId && this.ClusterUid == drsVMAffinityRuleImpl.ClusterUid && this.Key == drsVMAffinityRuleImpl.Key && ((this.Cluster == null && drsVMAffinityRuleImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsVMAffinityRuleImpl.Cluster))));
        }

        public override bool Equals(object drsVMAffinityRuleImpl)
        {
            return Equals(drsVMAffinityRuleImpl as DrsVMAffinityRuleImpl);
        }

        public override int GetHashCode()
        {
            return (KeepTogether + "_" + VMIds + "_" + Enabled + "_" + Mandatory + "_" + Type + "_" + ExtensionData + "_" + Name + "_" + Uid + "_" + ClusterId + "_" + ClusterUid + "_" + Key + "_" + Cluster).GetHashCode();
        }
    }

    public class DrsVMAntiAffinityRuleImpl : DrsRuleImpl, DrsVMAntiAffinityRule, IEquatable<DrsVMAntiAffinityRuleImpl>
    {
        public string[] VMIds { get; set; }

        public bool KeepTogether { get; set; }

        public bool Equals(DrsVMAntiAffinityRuleImpl drsVMAntiAffinityRuleImpl)
        {
            return (drsVMAntiAffinityRuleImpl != null && ((this.VMIds == null && drsVMAntiAffinityRuleImpl.VMIds == null) || (this.VMIds != null && drsVMAntiAffinityRuleImpl.VMIds != null && Enumerable.SequenceEqual(this.VMIds, drsVMAntiAffinityRuleImpl.VMIds))) && this.KeepTogether == drsVMAntiAffinityRuleImpl.KeepTogether && this.Enabled == drsVMAntiAffinityRuleImpl.Enabled && this.Mandatory == drsVMAntiAffinityRuleImpl.Mandatory && this.Type == drsVMAntiAffinityRuleImpl.Type && ((this.ExtensionData == null && drsVMAntiAffinityRuleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsVMAntiAffinityRuleImpl.ExtensionData))) && this.Name == drsVMAntiAffinityRuleImpl.Name && this.Uid == drsVMAntiAffinityRuleImpl.Uid && this.ClusterId == drsVMAntiAffinityRuleImpl.ClusterId && this.ClusterUid == drsVMAntiAffinityRuleImpl.ClusterUid && this.Key == drsVMAntiAffinityRuleImpl.Key && ((this.Cluster == null && drsVMAntiAffinityRuleImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsVMAntiAffinityRuleImpl.Cluster))));
        }

        public override bool Equals(object drsVMAntiAffinityRuleImpl)
        {
            return Equals(drsVMAntiAffinityRuleImpl as DrsVMAntiAffinityRuleImpl);
        }

        public override int GetHashCode()
        {
            return (VMIds + "_" + KeepTogether + "_" + Enabled + "_" + Mandatory + "_" + Type + "_" + ExtensionData + "_" + Name + "_" + Uid + "_" + ClusterId + "_" + ClusterUid + "_" + Key + "_" + Cluster).GetHashCode();
        }
    }

    public class DrsVMHostAffinityRuleImpl : DrsRuleImpl, DrsVMHostAffinityRule, IEquatable<DrsVMHostAffinityRuleImpl>
    {
        public string[] VMIds { get; set; }

        public string[] AffineHostIds { get; set; }

        public string[] AntiAffineHostIds { get; set; }

        public bool Equals(DrsVMHostAffinityRuleImpl drsVMHostAffinityRuleImpl)
        {
            return (drsVMHostAffinityRuleImpl != null && ((this.VMIds == null && drsVMHostAffinityRuleImpl.VMIds == null) || (this.VMIds != null && drsVMHostAffinityRuleImpl.VMIds != null && Enumerable.SequenceEqual(this.VMIds, drsVMHostAffinityRuleImpl.VMIds))) && ((this.AffineHostIds == null && drsVMHostAffinityRuleImpl.AffineHostIds == null) || (this.AffineHostIds != null && drsVMHostAffinityRuleImpl.AffineHostIds != null && Enumerable.SequenceEqual(this.AffineHostIds, drsVMHostAffinityRuleImpl.AffineHostIds))) && ((this.AntiAffineHostIds == null && drsVMHostAffinityRuleImpl.AntiAffineHostIds == null) || (this.AntiAffineHostIds != null && drsVMHostAffinityRuleImpl.AntiAffineHostIds != null && Enumerable.SequenceEqual(this.AntiAffineHostIds, drsVMHostAffinityRuleImpl.AntiAffineHostIds))) && this.Enabled == drsVMHostAffinityRuleImpl.Enabled && this.Mandatory == drsVMHostAffinityRuleImpl.Mandatory && this.Type == drsVMHostAffinityRuleImpl.Type && ((this.ExtensionData == null && drsVMHostAffinityRuleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(drsVMHostAffinityRuleImpl.ExtensionData))) && this.Name == drsVMHostAffinityRuleImpl.Name && this.Uid == drsVMHostAffinityRuleImpl.Uid && this.ClusterId == drsVMHostAffinityRuleImpl.ClusterId && this.ClusterUid == drsVMHostAffinityRuleImpl.ClusterUid && this.Key == drsVMHostAffinityRuleImpl.Key && ((this.Cluster == null && drsVMHostAffinityRuleImpl.Cluster == null) || (this.Cluster != null && this.Cluster.Equals(drsVMHostAffinityRuleImpl.Cluster))));
        }

        public override bool Equals(object drsVMHostAffinityRuleImpl)
        {
            return Equals(drsVMHostAffinityRuleImpl as DrsVMHostAffinityRuleImpl);
        }

        public override int GetHashCode()
        {
            return (VMIds + "_" + AffineHostIds + "_" + AntiAffineHostIds + "_" + Enabled + "_" + Mandatory + "_" + Type + "_" + ExtensionData + "_" + Name + "_" + Uid + "_" + ClusterId + "_" + ClusterUid + "_" + Key + "_" + Cluster).GetHashCode();
        }
    }

    public abstract class ResourceSchedulingRuleImpl : ResourceSchedulingRule, IEquatable<ResourceSchedulingRuleImpl>
    {
        public string Name { get; set; }

        public bool Enabled { get; set; }

        public bool Mandatory { get; set; }

        public ResourceSchedulingRuleType Type { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(ResourceSchedulingRuleImpl resourceSchedulingRuleImpl)
        {
            return (resourceSchedulingRuleImpl != null && this.Name == resourceSchedulingRuleImpl.Name && this.Enabled == resourceSchedulingRuleImpl.Enabled && this.Mandatory == resourceSchedulingRuleImpl.Mandatory && this.Type == resourceSchedulingRuleImpl.Type && ((this.ExtensionData == null && resourceSchedulingRuleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(resourceSchedulingRuleImpl.ExtensionData))));
        }

        public override bool Equals(object resourceSchedulingRuleImpl)
        {
            return Equals(resourceSchedulingRuleImpl as ResourceSchedulingRuleImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Enabled + "_" + Mandatory + "_" + Type + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.ContentLibrary
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1.ContentLibrary;

    public class ContentLibraryImpl : ContentLibrary, IEquatable<ContentLibraryImpl>
    {
        public string Name { get; set; }

        public bool Equals(ContentLibraryImpl contentLibraryImpl)
        {
            return (contentLibraryImpl != null && this.Name == contentLibraryImpl.Name);
        }

        public override bool Equals(object contentLibraryImpl)
        {
            return Equals(contentLibraryImpl as ContentLibraryImpl);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class ContentLibraryItemImpl : ContentLibraryItem, IEquatable<ContentLibraryItemImpl>
    {
        public decimal SizeGB { get; set; }

        public string Description { get; set; }

        public DateTime CreationTime { get; set; }

        public DateTime LastWriteTime { get; set; }

        public string ItemType { get; set; }

        public ContentLibrary ContentLibrary { get; set; }

        public string Id { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public bool Equals(ContentLibraryItemImpl contentLibraryItemImpl)
        {
            return (contentLibraryItemImpl != null && this.SizeGB == contentLibraryItemImpl.SizeGB && this.Description == contentLibraryItemImpl.Description && this.CreationTime == contentLibraryItemImpl.CreationTime && this.LastWriteTime == contentLibraryItemImpl.LastWriteTime && this.ItemType == contentLibraryItemImpl.ItemType && ((this.ContentLibrary == null && contentLibraryItemImpl.ContentLibrary == null) || (this.ContentLibrary != null && this.ContentLibrary.Equals(contentLibraryItemImpl.ContentLibrary))) && this.Id == contentLibraryItemImpl.Id && this.Name == contentLibraryItemImpl.Name && this.Uid == contentLibraryItemImpl.Uid);
        }

        public override bool Equals(object contentLibraryItemImpl)
        {
            return Equals(contentLibraryItemImpl as ContentLibraryItemImpl);
        }

        public override int GetHashCode()
        {
            return (SizeGB + "_" + Description + "_" + CreationTime + "_" + LastWriteTime + "_" + ItemType + "_" + ContentLibrary + "_" + Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.DatastoreManagement
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public class DatastoreFileImpl : DatastoreItemImpl, DatastoreFile, IEquatable<DatastoreFileImpl>
    {
        public long? Length { get; set; }

        public bool Equals(DatastoreFileImpl datastoreFileImpl)
        {
            return (datastoreFileImpl != null && ((this.Length == null && datastoreFileImpl.Length == null) || (this.Length != null && this.Length.Equals(datastoreFileImpl.Length))) && this.DatastoreId == datastoreFileImpl.DatastoreId && ((this.Datastore == null && datastoreFileImpl.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreFileImpl.Datastore))) && this.Name == datastoreFileImpl.Name && this.FolderPath == datastoreFileImpl.FolderPath && this.DatastoreFullPath == datastoreFileImpl.DatastoreFullPath && this.FullName == datastoreFileImpl.FullName && this.ItemType == datastoreFileImpl.ItemType && ((this.LastWriteTime == null && datastoreFileImpl.LastWriteTime == null) || (this.LastWriteTime != null && this.LastWriteTime.Equals(datastoreFileImpl.LastWriteTime))) && this.Uid == datastoreFileImpl.Uid);
        }

        public override bool Equals(object datastoreFileImpl)
        {
            return Equals(datastoreFileImpl as DatastoreFileImpl);
        }

        public override int GetHashCode()
        {
            return (Length + "_" + DatastoreId + "_" + Datastore + "_" + Name + "_" + FolderPath + "_" + DatastoreFullPath + "_" + FullName + "_" + ItemType + "_" + LastWriteTime + "_" + Uid).GetHashCode();
        }
    }

    public class DatastoreFolderImpl : DatastoreItemImpl, DatastoreFolder, IEquatable<DatastoreFolderImpl>
    {
        public bool Equals(DatastoreFolderImpl datastoreFolderImpl)
        {
            return (datastoreFolderImpl != null && this.DatastoreId == datastoreFolderImpl.DatastoreId && ((this.Datastore == null && datastoreFolderImpl.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreFolderImpl.Datastore))) && this.Name == datastoreFolderImpl.Name && this.FolderPath == datastoreFolderImpl.FolderPath && this.DatastoreFullPath == datastoreFolderImpl.DatastoreFullPath && this.FullName == datastoreFolderImpl.FullName && this.ItemType == datastoreFolderImpl.ItemType && ((this.LastWriteTime == null && datastoreFolderImpl.LastWriteTime == null) || (this.LastWriteTime != null && this.LastWriteTime.Equals(datastoreFolderImpl.LastWriteTime))) && this.Uid == datastoreFolderImpl.Uid);
        }

        public override bool Equals(object datastoreFolderImpl)
        {
            return Equals(datastoreFolderImpl as DatastoreFolderImpl);
        }

        public override int GetHashCode()
        {
            return (DatastoreId + "_" + Datastore + "_" + Name + "_" + FolderPath + "_" + DatastoreFullPath + "_" + FullName + "_" + ItemType + "_" + LastWriteTime + "_" + Uid).GetHashCode();
        }
    }

    public class DatastoreImpl : StorageResourceImpl, Datastore, IEquatable<DatastoreImpl>
    {
        public string DatacenterId { get; set; }

        public Datacenter Datacenter { get; set; }

        public string ParentFolderId { get; set; }

        public Folder ParentFolder { get; set; }

        public string DatastoreBrowserPath { get; set; }

        public decimal FreeSpaceMB { get; set; }

        public decimal CapacityMB { get; set; }

        public bool Accessible { get; set; }

        public string Type { get; set; }

        public bool StorageIOControlEnabled { get; set; }

        public int? CongestionThresholdMillisecond { get; set; }

        public DatastoreState State { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(DatastoreImpl datastoreImpl)
        {
            return (datastoreImpl != null && this.DatacenterId == datastoreImpl.DatacenterId && ((this.Datacenter == null && datastoreImpl.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(datastoreImpl.Datacenter))) && this.ParentFolderId == datastoreImpl.ParentFolderId && ((this.ParentFolder == null && datastoreImpl.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(datastoreImpl.ParentFolder))) && this.DatastoreBrowserPath == datastoreImpl.DatastoreBrowserPath && this.FreeSpaceMB == datastoreImpl.FreeSpaceMB && this.CapacityMB == datastoreImpl.CapacityMB && this.Accessible == datastoreImpl.Accessible && this.Type == datastoreImpl.Type && this.StorageIOControlEnabled == datastoreImpl.StorageIOControlEnabled && ((this.CongestionThresholdMillisecond == null && datastoreImpl.CongestionThresholdMillisecond == null) || (this.CongestionThresholdMillisecond != null && this.CongestionThresholdMillisecond.Equals(datastoreImpl.CongestionThresholdMillisecond))) && this.State == datastoreImpl.State && ((this.ExtensionData == null && datastoreImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(datastoreImpl.ExtensionData))) && this.Id == datastoreImpl.Id && this.Name == datastoreImpl.Name && this.Uid == datastoreImpl.Uid && this.CapacityGB == datastoreImpl.CapacityGB && this.FreeSpaceGB == datastoreImpl.FreeSpaceGB);
        }

        public override bool Equals(object datastoreImpl)
        {
            return Equals(datastoreImpl as DatastoreImpl);
        }

        public override int GetHashCode()
        {
            return (DatacenterId + "_" + Datacenter + "_" + ParentFolderId + "_" + ParentFolder + "_" + DatastoreBrowserPath + "_" + FreeSpaceMB + "_" + CapacityMB + "_" + Accessible + "_" + Type + "_" + StorageIOControlEnabled + "_" + CongestionThresholdMillisecond + "_" + State + "_" + ExtensionData + "_" + Id + "_" + Name + "_" + Uid + "_" + CapacityGB + "_" + FreeSpaceGB).GetHashCode();
        }
    }

    public class DatastoreItemImpl : DatastoreItem, IEquatable<DatastoreItemImpl>
    {
        public string DatastoreId { get; set; }

        public Datastore Datastore { get; set; }

        public string Name { get; set; }

        public string FolderPath { get; set; }

        public string DatastoreFullPath { get; set; }

        public string FullName { get; set; }

        public DatastoreItemType ItemType { get; set; }

        public DateTime? LastWriteTime { get; set; }

        public string Uid { get; set; }

        public void SetFullName(string value)
        {
        }

        public bool Equals(DatastoreItemImpl datastoreItemImpl)
        {
            return (datastoreItemImpl != null && this.DatastoreId == datastoreItemImpl.DatastoreId && ((this.Datastore == null && datastoreItemImpl.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreItemImpl.Datastore))) && this.Name == datastoreItemImpl.Name && this.FolderPath == datastoreItemImpl.FolderPath && this.DatastoreFullPath == datastoreItemImpl.DatastoreFullPath && this.FullName == datastoreItemImpl.FullName && this.ItemType == datastoreItemImpl.ItemType && ((this.LastWriteTime == null && datastoreItemImpl.LastWriteTime == null) || (this.LastWriteTime != null && this.LastWriteTime.Equals(datastoreItemImpl.LastWriteTime))) && this.Uid == datastoreItemImpl.Uid);
        }

        public override bool Equals(object datastoreItemImpl)
        {
            return Equals(datastoreItemImpl as DatastoreItemImpl);
        }

        public override int GetHashCode()
        {
            return (DatastoreId + "_" + Datastore + "_" + Name + "_" + FolderPath + "_" + DatastoreFullPath + "_" + FullName + "_" + ItemType + "_" + LastWriteTime + "_" + Uid).GetHashCode();
        }
    }

    public class DatastoreRootFolderImpl : DatastoreFolderImpl, DatastoreFolder, IEquatable<DatastoreRootFolderImpl>
    {
        public bool Equals(DatastoreRootFolderImpl datastoreRootFolderImpl)
        {
            return (datastoreRootFolderImpl != null && this.DatastoreId == datastoreRootFolderImpl.DatastoreId && ((this.Datastore == null && datastoreRootFolderImpl.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreRootFolderImpl.Datastore))) && this.Name == datastoreRootFolderImpl.Name && this.FolderPath == datastoreRootFolderImpl.FolderPath && this.DatastoreFullPath == datastoreRootFolderImpl.DatastoreFullPath && this.FullName == datastoreRootFolderImpl.FullName && this.ItemType == datastoreRootFolderImpl.ItemType && ((this.LastWriteTime == null && datastoreRootFolderImpl.LastWriteTime == null) || (this.LastWriteTime != null && this.LastWriteTime.Equals(datastoreRootFolderImpl.LastWriteTime))) && this.Uid == datastoreRootFolderImpl.Uid);
        }

        public override bool Equals(object datastoreRootFolderImpl)
        {
            return Equals(datastoreRootFolderImpl as DatastoreRootFolderImpl);
        }

        public override int GetHashCode()
        {
            return (DatastoreId + "_" + Datastore + "_" + Name + "_" + FolderPath + "_" + DatastoreFullPath + "_" + FullName + "_" + ItemType + "_" + LastWriteTime + "_" + Uid).GetHashCode();
        }
    }

    public class DatastoreVMDiskFileImpl : DatastoreFileImpl, DatastoreVMDiskFile, IEquatable<DatastoreVMDiskFileImpl>
    {
        public long? CapacityKb { get; set; }

        public string ControllerType { get; set; }

        public DiskType DiskType { get; set; }

        public string[] DiskExtents { get; set; }

        public bool Equals(DatastoreVMDiskFileImpl datastoreVMDiskFileImpl)
        {
            return (datastoreVMDiskFileImpl != null && ((this.CapacityKb == null && datastoreVMDiskFileImpl.CapacityKb == null) || (this.CapacityKb != null && this.CapacityKb.Equals(datastoreVMDiskFileImpl.CapacityKb))) && this.ControllerType == datastoreVMDiskFileImpl.ControllerType && this.DiskType == datastoreVMDiskFileImpl.DiskType && ((this.DiskExtents == null && datastoreVMDiskFileImpl.DiskExtents == null) || (this.DiskExtents != null && datastoreVMDiskFileImpl.DiskExtents != null && Enumerable.SequenceEqual(this.DiskExtents, datastoreVMDiskFileImpl.DiskExtents))) && this.DatastoreId == datastoreVMDiskFileImpl.DatastoreId && ((this.Datastore == null && datastoreVMDiskFileImpl.Datastore == null) || (this.Datastore != null && this.Datastore.Equals(datastoreVMDiskFileImpl.Datastore))) && this.Name == datastoreVMDiskFileImpl.Name && this.FolderPath == datastoreVMDiskFileImpl.FolderPath && this.DatastoreFullPath == datastoreVMDiskFileImpl.DatastoreFullPath && this.FullName == datastoreVMDiskFileImpl.FullName && this.ItemType == datastoreVMDiskFileImpl.ItemType && ((this.LastWriteTime == null && datastoreVMDiskFileImpl.LastWriteTime == null) || (this.LastWriteTime != null && this.LastWriteTime.Equals(datastoreVMDiskFileImpl.LastWriteTime))) && this.Uid == datastoreVMDiskFileImpl.Uid && ((this.Length == null && datastoreVMDiskFileImpl.Length == null) || (this.Length != null && this.Length.Equals(datastoreVMDiskFileImpl.Length))));
        }

        public override bool Equals(object datastoreVMDiskFileImpl)
        {
            return Equals(datastoreVMDiskFileImpl as DatastoreVMDiskFileImpl);
        }

        public override int GetHashCode()
        {
            return (CapacityKb + "_" + ControllerType + "_" + DiskType + "_" + DiskExtents + "_" + DatastoreId + "_" + Datastore + "_" + Name + "_" + FolderPath + "_" + DatastoreFullPath + "_" + FullName + "_" + ItemType + "_" + LastWriteTime + "_" + Uid + "_" + Length).GetHashCode();
        }
    }

    public class NasDatastoreImpl : DatastoreImpl, NasDatastore, IEquatable<NasDatastoreImpl>
    {
        public string[] RemoteHost { get; set; }

        public string RemotePath { get; set; }

        public string UserName { get; set; }

        public AuthenticationMethod AuthenticationMethod { get; set; }

        public string FileSystemVersion { get; set; }

        public bool Equals(NasDatastoreImpl nasDatastoreImpl)
        {
            return (nasDatastoreImpl != null && ((this.RemoteHost == null && nasDatastoreImpl.RemoteHost == null) || (this.RemoteHost != null && nasDatastoreImpl.RemoteHost != null && Enumerable.SequenceEqual(this.RemoteHost, nasDatastoreImpl.RemoteHost))) && this.RemotePath == nasDatastoreImpl.RemotePath && this.UserName == nasDatastoreImpl.UserName && this.AuthenticationMethod == nasDatastoreImpl.AuthenticationMethod && this.FileSystemVersion == nasDatastoreImpl.FileSystemVersion && this.Id == nasDatastoreImpl.Id && this.Name == nasDatastoreImpl.Name && this.Uid == nasDatastoreImpl.Uid && this.CapacityGB == nasDatastoreImpl.CapacityGB && this.FreeSpaceGB == nasDatastoreImpl.FreeSpaceGB && this.DatacenterId == nasDatastoreImpl.DatacenterId && ((this.Datacenter == null && nasDatastoreImpl.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(nasDatastoreImpl.Datacenter))) && this.ParentFolderId == nasDatastoreImpl.ParentFolderId && ((this.ParentFolder == null && nasDatastoreImpl.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(nasDatastoreImpl.ParentFolder))) && this.DatastoreBrowserPath == nasDatastoreImpl.DatastoreBrowserPath && this.FreeSpaceMB == nasDatastoreImpl.FreeSpaceMB && this.CapacityMB == nasDatastoreImpl.CapacityMB && this.Accessible == nasDatastoreImpl.Accessible && this.Type == nasDatastoreImpl.Type && this.StorageIOControlEnabled == nasDatastoreImpl.StorageIOControlEnabled && ((this.CongestionThresholdMillisecond == null && nasDatastoreImpl.CongestionThresholdMillisecond == null) || (this.CongestionThresholdMillisecond != null && this.CongestionThresholdMillisecond.Equals(nasDatastoreImpl.CongestionThresholdMillisecond))) && this.State == nasDatastoreImpl.State && ((this.ExtensionData == null && nasDatastoreImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(nasDatastoreImpl.ExtensionData))));
        }

        public override bool Equals(object nasDatastoreImpl)
        {
            return Equals(nasDatastoreImpl as NasDatastoreImpl);
        }

        public override int GetHashCode()
        {
            return (RemoteHost + "_" + RemotePath + "_" + UserName + "_" + AuthenticationMethod + "_" + FileSystemVersion + "_" + Id + "_" + Name + "_" + Uid + "_" + CapacityGB + "_" + FreeSpaceGB + "_" + DatacenterId + "_" + Datacenter + "_" + ParentFolderId + "_" + ParentFolder + "_" + DatastoreBrowserPath + "_" + FreeSpaceMB + "_" + CapacityMB + "_" + Accessible + "_" + Type + "_" + StorageIOControlEnabled + "_" + CongestionThresholdMillisecond + "_" + State + "_" + ExtensionData).GetHashCode();
        }
    }

    public class StorageResourceImpl : StorageResource, IEquatable<StorageResourceImpl>
    {
        public string Name { get; set; }

        public decimal CapacityGB { get; set; }

        public decimal FreeSpaceGB { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public bool Equals(StorageResourceImpl storageResourceImpl)
        {
            return (storageResourceImpl != null && this.CapacityGB == storageResourceImpl.CapacityGB && this.FreeSpaceGB == storageResourceImpl.FreeSpaceGB && this.Name == storageResourceImpl.Name && this.Id == storageResourceImpl.Id && this.Uid == storageResourceImpl.Uid);
        }

        public override bool Equals(object storageResourceImpl)
        {
            return Equals(storageResourceImpl as StorageResourceImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + CapacityGB + "_" + FreeSpaceGB + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class VmfsDatastoreImpl : DatastoreImpl, VmfsDatastore, IEquatable<VmfsDatastoreImpl>
    {
        public string FileSystemVersion { get; set; }

        public bool Equals(VmfsDatastoreImpl vmfsDatastoreImpl)
        {
            return (vmfsDatastoreImpl != null && this.FileSystemVersion == vmfsDatastoreImpl.FileSystemVersion && this.Id == vmfsDatastoreImpl.Id && this.Name == vmfsDatastoreImpl.Name && this.Uid == vmfsDatastoreImpl.Uid && this.CapacityGB == vmfsDatastoreImpl.CapacityGB && this.FreeSpaceGB == vmfsDatastoreImpl.FreeSpaceGB && this.DatacenterId == vmfsDatastoreImpl.DatacenterId && ((this.Datacenter == null && vmfsDatastoreImpl.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(vmfsDatastoreImpl.Datacenter))) && this.ParentFolderId == vmfsDatastoreImpl.ParentFolderId && ((this.ParentFolder == null && vmfsDatastoreImpl.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(vmfsDatastoreImpl.ParentFolder))) && this.DatastoreBrowserPath == vmfsDatastoreImpl.DatastoreBrowserPath && this.FreeSpaceMB == vmfsDatastoreImpl.FreeSpaceMB && this.CapacityMB == vmfsDatastoreImpl.CapacityMB && this.Accessible == vmfsDatastoreImpl.Accessible && this.Type == vmfsDatastoreImpl.Type && this.StorageIOControlEnabled == vmfsDatastoreImpl.StorageIOControlEnabled && ((this.CongestionThresholdMillisecond == null && vmfsDatastoreImpl.CongestionThresholdMillisecond == null) || (this.CongestionThresholdMillisecond != null && this.CongestionThresholdMillisecond.Equals(vmfsDatastoreImpl.CongestionThresholdMillisecond))) && this.State == vmfsDatastoreImpl.State && ((this.ExtensionData == null && vmfsDatastoreImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vmfsDatastoreImpl.ExtensionData))));
        }

        public override bool Equals(object vmfsDatastoreImpl)
        {
            return Equals(vmfsDatastoreImpl as VmfsDatastoreImpl);
        }

        public override int GetHashCode()
        {
            return (FileSystemVersion + "_" + Id + "_" + Name + "_" + Uid + "_" + CapacityGB + "_" + FreeSpaceGB + "_" + DatacenterId + "_" + Datacenter + "_" + ParentFolderId + "_" + ParentFolder + "_" + DatastoreBrowserPath + "_" + FreeSpaceMB + "_" + CapacityMB + "_" + Accessible + "_" + Type + "_" + StorageIOControlEnabled + "_" + CongestionThresholdMillisecond + "_" + State + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.EsxCli
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.EsxCli;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class DynamicManagedObjectImpl : DynamicManagedObject, IEquatable<DynamicManagedObjectImpl>
    {
        public string Id { get; set; }

        public string Uid { get; set; }

        public object InvokeOperation(string name, IDictionary parameters)
        {
            return default(object);
        }

        public bool Equals(DynamicManagedObjectImpl dynamicManagedObjectImpl)
        {
            return (dynamicManagedObjectImpl != null && this.Id == dynamicManagedObjectImpl.Id && this.Uid == dynamicManagedObjectImpl.Uid);
        }

        public override bool Equals(object dynamicManagedObjectImpl)
        {
            return Equals(dynamicManagedObjectImpl as DynamicManagedObjectImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Uid).GetHashCode();
        }
    }

    public class DynamicTypeManagerImpl : DynamicManagedObjectImpl, DynamicTypeManager, IEquatable<DynamicTypeManagerImpl>
    {
        public MoInstanceDescriptor[] QueryMoInstances(string id)
        {
            return default(MoInstanceDescriptor[]);
        }

        public IDictionary<string, object> QueryTypeInfo(string typeSubstring)
        {
            return default(IDictionary<string, object>);
        }

        public DynamicManagedObject CreateDynamicManagedObject(string id)
        {
            return default(DynamicManagedObject);
        }

        public bool Equals(DynamicTypeManagerImpl dynamicTypeManagerImpl)
        {
            return (dynamicTypeManagerImpl != null && this.Id == dynamicTypeManagerImpl.Id);
        }

        public override bool Equals(object dynamicTypeManagerImpl)
        {
            return Equals(dynamicTypeManagerImpl as DynamicTypeManagerImpl);
        }

        public override int GetHashCode()
        {
            return (Id).GetHashCode();
        }
    }

    public class EsxCliElementImpl : EsxCliElement, IEquatable<EsxCliElementImpl>
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string FullName { get; set; }

        public string Uid { get; set; }

        public bool IsManagedObjectInstance { get; set; }

        public List<EsxCliElement> ChildElements { get; set; }

        public EsxCliHelp help()
        {
            return default(EsxCliHelp);
        }

        public EsxCliMethodHelp help(string methodName)
        {
            return default(EsxCliMethodHelp);
        }

        public bool Equals(EsxCliElementImpl esxCliElementImpl)
        {
            return (esxCliElementImpl != null && this.Id == esxCliElementImpl.Id && this.Name == esxCliElementImpl.Name && this.FullName == esxCliElementImpl.FullName && this.Uid == esxCliElementImpl.Uid && this.IsManagedObjectInstance == esxCliElementImpl.IsManagedObjectInstance && ((this.ChildElements == null && esxCliElementImpl.ChildElements == null) || (this.ChildElements != null && esxCliElementImpl.ChildElements != null && Enumerable.SequenceEqual(this.ChildElements, esxCliElementImpl.ChildElements))));
        }

        public override bool Equals(object esxCliElementImpl)
        {
            return Equals(esxCliElementImpl as EsxCliElementImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + FullName + "_" + Uid + "_" + IsManagedObjectInstance + "_" + ChildElements).GetHashCode();
        }
    }

    public class EsxCliHelpImpl : EsxCliHelp, IEquatable<EsxCliHelpImpl>
    {
        public string DisplayName { get; set; }

        public string FullDisplayName { get; set; }

        public string Name { get; set; }

        public string Help { get; set; }

        public List<EsxCliHelp> ChildElement { get; set; }

        public List<EsxCliMethodHelp> Method { get; set; }

        public bool Equals(EsxCliHelpImpl esxCliHelpImpl)
        {
            return (esxCliHelpImpl != null && this.DisplayName == esxCliHelpImpl.DisplayName && this.FullDisplayName == esxCliHelpImpl.FullDisplayName && this.Name == esxCliHelpImpl.Name && this.Help == esxCliHelpImpl.Help && ((this.ChildElement == null && esxCliHelpImpl.ChildElement == null) || (this.ChildElement != null && esxCliHelpImpl.ChildElement != null && Enumerable.SequenceEqual(this.ChildElement, esxCliHelpImpl.ChildElement))) && ((this.Method == null && esxCliHelpImpl.Method == null) || (this.Method != null && esxCliHelpImpl.Method != null && Enumerable.SequenceEqual(this.Method, esxCliHelpImpl.Method))));
        }

        public override bool Equals(object esxCliHelpImpl)
        {
            return Equals(esxCliHelpImpl as EsxCliHelpImpl);
        }

        public override int GetHashCode()
        {
            return (DisplayName + "_" + FullDisplayName + "_" + Name + "_" + Help + "_" + ChildElement + "_" + Method).GetHashCode();
        }
    }

    public class EsxCliImpl : EsxCli, IEquatable<EsxCliImpl>
    {
        public string Uid { get; set; }

        public VMHost VMHost { get; set; }

        public DynamicTypeManager TypeManager { get; set; }

        public bool Equals(EsxCliImpl esxCliImpl)
        {
            return (esxCliImpl != null && this.Uid == esxCliImpl.Uid && ((this.VMHost == null && esxCliImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(esxCliImpl.VMHost))) && ((this.TypeManager == null && esxCliImpl.TypeManager == null) || (this.TypeManager != null && this.TypeManager.Equals(esxCliImpl.TypeManager))));
        }

        public override bool Equals(object esxCliImpl)
        {
            return Equals(esxCliImpl as EsxCliImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + VMHost + "_" + TypeManager).GetHashCode();
        }
    }

    public class EsxCliMethodHelpImpl : EsxCliMethodHelp, IEquatable<EsxCliMethodHelpImpl>
    {
        public string DisplayName { get; set; }

        public string FullDisplayName { get; set; }

        public string Name { get; set; }

        public string Help { get; set; }

        public EsxCliParameterHelp Ret { get; set; }

        public EsxCliParameterHelp[] Param { get; set; }

        public IDictionary Hints { get; set; }

        public bool Equals(EsxCliMethodHelpImpl esxCliMethodHelpImpl)
        {
            return (esxCliMethodHelpImpl != null && this.DisplayName == esxCliMethodHelpImpl.DisplayName && this.FullDisplayName == esxCliMethodHelpImpl.FullDisplayName && this.Name == esxCliMethodHelpImpl.Name && this.Help == esxCliMethodHelpImpl.Help && ((this.Ret == null && esxCliMethodHelpImpl.Ret == null) || (this.Ret != null && this.Ret.Equals(esxCliMethodHelpImpl.Ret))) && ((this.Param == null && esxCliMethodHelpImpl.Param == null) || (this.Param != null && esxCliMethodHelpImpl.Param != null && Enumerable.SequenceEqual(this.Param, esxCliMethodHelpImpl.Param))) && ((this.Hints == null && esxCliMethodHelpImpl.Hints == null) || (this.Hints != null && esxCliMethodHelpImpl.Hints != null && this.Hints.Equals(esxCliMethodHelpImpl.Hints))));
        }

        public override bool Equals(object esxCliMethodHelpImpl)
        {
            return Equals(esxCliMethodHelpImpl as EsxCliMethodHelpImpl);
        }

        public override int GetHashCode()
        {
            return (DisplayName + "_" + FullDisplayName + "_" + Name + "_" + Help + "_" + Ret + "_" + Param + "_" + Hints).GetHashCode();
        }
    }

    public class EsxCliMethodInfoImpl : IEquatable<EsxCliMethodInfoImpl>
    {
        public string Name { get; set; }

        public object InvokeWithNamedArguments(object targetObject, Dictionary<string, object> arguments)
        {
            return default(object);
        }

        public object Invoke(object obj, object[] arguments)
        {
            return default(object);
        }

        public bool Equals(EsxCliMethodInfoImpl esxCliMethodInfoImpl)
        {
            return (esxCliMethodInfoImpl != null && this.Name == esxCliMethodInfoImpl.Name);
        }

        public override bool Equals(object esxCliMethodInfoImpl)
        {
            return Equals(esxCliMethodInfoImpl as EsxCliMethodInfoImpl);
        }

        public override int GetHashCode()
        {
            return (Name).GetHashCode();
        }
    }

    public class EsxCliObjectImpl : EsxCliObject, IEquatable<EsxCliObjectImpl>
    {
        public bool Equals(EsxCliObjectImpl esxCliObjectImpl)
        {
            return (esxCliObjectImpl != null);
        }

        public override bool Equals(object esxCliObjectImpl)
        {
            return Equals(esxCliObjectImpl as EsxCliObjectImpl);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EsxCliParameterHelpImpl : EsxCliParameterHelp, IEquatable<EsxCliParameterHelpImpl>
    {
        public string DisplayName { get; set; }

        public string MethodFullDisplayName { get; set; }

        public string Name { get; set; }

        public string Help { get; set; }

        public string[] Constraint { get; set; }

        public string Default { get; set; }

        public string[] Aliases { get; set; }

        public bool Equals(EsxCliParameterHelpImpl esxCliParameterHelpImpl)
        {
            return (esxCliParameterHelpImpl != null && this.DisplayName == esxCliParameterHelpImpl.DisplayName && this.MethodFullDisplayName == esxCliParameterHelpImpl.MethodFullDisplayName && this.Name == esxCliParameterHelpImpl.Name && this.Help == esxCliParameterHelpImpl.Help && ((this.Constraint == null && esxCliParameterHelpImpl.Constraint == null) || (this.Constraint != null && esxCliParameterHelpImpl.Constraint != null && Enumerable.SequenceEqual(this.Constraint, esxCliParameterHelpImpl.Constraint))) && this.Default == esxCliParameterHelpImpl.Default && ((this.Aliases == null && esxCliParameterHelpImpl.Aliases == null) || (this.Aliases != null && esxCliParameterHelpImpl.Aliases != null && Enumerable.SequenceEqual(this.Aliases, esxCliParameterHelpImpl.Aliases))));
        }

        public override bool Equals(object esxCliParameterHelpImpl)
        {
            return Equals(esxCliParameterHelpImpl as EsxCliParameterHelpImpl);
        }

        public override int GetHashCode()
        {
            return (DisplayName + "_" + MethodFullDisplayName + "_" + Name + "_" + Help + "_" + Constraint + "_" + Default + "_" + Aliases).GetHashCode();
        }
    }

    public class MoInstanceDescriptorImpl : MoInstanceDescriptor, IEquatable<MoInstanceDescriptorImpl>
    {
        public string Id { get; set; }

        public string Type { get; set; }

        public bool Equals(MoInstanceDescriptorImpl moInstanceDescriptorImpl)
        {
            return (moInstanceDescriptorImpl != null && this.Id == moInstanceDescriptorImpl.Id && this.Type == moInstanceDescriptorImpl.Type);
        }

        public override bool Equals(object moInstanceDescriptorImpl)
        {
            return Equals(moInstanceDescriptorImpl as MoInstanceDescriptorImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Type).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.EsxTop
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.EsxTop;

    public class CounterImpl : Counter, IEquatable<CounterImpl>
    {
        public VIServer Server { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public CounterInfoField[] Fields { get; set; }

        public bool Equals(CounterImpl counterImpl)
        {
            return (counterImpl != null && ((this.Server == null && counterImpl.Server == null) || (this.Server != null && this.Server.Equals(counterImpl.Server))) && this.Name == counterImpl.Name && this.Uid == counterImpl.Uid && ((this.Fields == null && counterImpl.Fields == null) || (this.Fields != null && counterImpl.Fields != null && Enumerable.SequenceEqual(this.Fields, counterImpl.Fields))));
        }

        public override bool Equals(object counterImpl)
        {
            return Equals(counterImpl as CounterImpl);
        }

        public override int GetHashCode()
        {
            return (Server + "_" + Name + "_" + Uid + "_" + Fields).GetHashCode();
        }
    }

    public class CounterInfoFieldImpl : CounterInfoField, IEquatable<CounterInfoFieldImpl>
    {
        public string Name { get; set; }

        public string Type { get; set; }

        public bool Equals(CounterInfoFieldImpl counterInfoFieldImpl)
        {
            return (counterInfoFieldImpl != null && this.Name == counterInfoFieldImpl.Name && this.Type == counterInfoFieldImpl.Type);
        }

        public override bool Equals(object counterInfoFieldImpl)
        {
            return Equals(counterInfoFieldImpl as CounterInfoFieldImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Type).GetHashCode();
        }
    }

    public class CounterValueImpl : CounterValue, IEquatable<CounterValueImpl>
    {
        public VIServer Server { get; set; }

        public string Counter { get; set; }

        public bool Equals(CounterValueImpl counterValueImpl)
        {
            return (counterValueImpl != null && ((this.Server == null && counterValueImpl.Server == null) || (this.Server != null && this.Server.Equals(counterValueImpl.Server))) && this.Counter == counterValueImpl.Counter);
        }

        public override bool Equals(object counterValueImpl)
        {
            return Equals(counterValueImpl as CounterValueImpl);
        }

        public override int GetHashCode()
        {
            return (Server + "_" + Counter).GetHashCode();
        }
    }

    public class DynamicDataImpl : DynamicData, IEquatable<DynamicDataImpl>
    {
        public bool Equals(DynamicDataImpl dynamicDataImpl)
        {
            return (dynamicDataImpl != null);
        }

        public override bool Equals(object dynamicDataImpl)
        {
            return Equals(dynamicDataImpl as DynamicDataImpl);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class EsxTopImpl : IEquatable<EsxTopImpl>
    {
        public Counter[] GetCounterInfo(string[] counterList)
        {
            return default(Counter[]);
        }

        public Dictionary<TKey, TValue> GetTopologyInfo<TKey, TValue>(string[] topologyList)
        {
            return default(Dictionary<TKey, TValue>);
        }

        public Dictionary<TKey, TValue> GetCounterValues<TKey, TValue>(string[] counterList)
        {
            return default(Dictionary<TKey, TValue>);
        }

        public void FreeStats()
        {
        }

        public bool Equals(EsxTopImpl esxTopImpl)
        {
            return (esxTopImpl != null);
        }

        public override bool Equals(object esxTopImpl)
        {
            return Equals(esxTopImpl as EsxTopImpl);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    public class TopologyInfoImpl : TopologyInfo, IEquatable<TopologyInfoImpl>
    {
        public VIServer Server { get; set; }

        public string Topology { get; set; }

        public string Uid { get; set; }

        public bool Equals(TopologyInfoImpl topologyInfoImpl)
        {
            return (topologyInfoImpl != null && ((this.Server == null && topologyInfoImpl.Server == null) || (this.Server != null && this.Server.Equals(topologyInfoImpl.Server))) && this.Topology == topologyInfoImpl.Topology && this.Uid == topologyInfoImpl.Uid);
        }

        public override bool Equals(object topologyInfoImpl)
        {
            return Equals(topologyInfoImpl as TopologyInfoImpl);
        }

        public override int GetHashCode()
        {
            return (Server + "_" + Topology + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class HostFirmwareBundleImpl : HostFirmwareBundle, IEquatable<HostFirmwareBundleImpl>
    {
        public string Url { get; set; }

        public FileInfo Data { get; set; }

        public VMHost Host { get; set; }

        public bool Equals(HostFirmwareBundleImpl hostFirmwareBundleImpl)
        {
            return (hostFirmwareBundleImpl != null && this.Url == hostFirmwareBundleImpl.Url && this.Data == hostFirmwareBundleImpl.Data && ((this.Host == null && hostFirmwareBundleImpl.Host == null) || (this.Host != null && this.Host.Equals(hostFirmwareBundleImpl.Host))));
        }

        public override bool Equals(object hostFirmwareBundleImpl)
        {
            return Equals(hostFirmwareBundleImpl as HostFirmwareBundleImpl);
        }

        public override int GetHashCode()
        {
            return (Url + "_" + Data + "_" + Host).GetHashCode();
        }
    }

    public class HostFirmwareImpl : HostFirmware, IEquatable<HostFirmwareImpl>
    {
        public string UploadUrl { get; set; }

        public VMHost Host { get; set; }

        public VMHost VMHost { get; set; }

        public string VMHostId { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HostFirmwareImpl hostFirmwareImpl)
        {
            return (hostFirmwareImpl != null && this.UploadUrl == hostFirmwareImpl.UploadUrl && ((this.Host == null && hostFirmwareImpl.Host == null) || (this.Host != null && this.Host.Equals(hostFirmwareImpl.Host))) && ((this.VMHost == null && hostFirmwareImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostFirmwareImpl.VMHost))) && this.VMHostId == hostFirmwareImpl.VMHostId && this.Uid == hostFirmwareImpl.Uid && ((this.ExtensionData == null && hostFirmwareImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostFirmwareImpl.ExtensionData))));
        }

        public override bool Equals(object hostFirmwareImpl)
        {
            return Equals(hostFirmwareImpl as HostFirmwareImpl);
        }

        public override int GetHashCode()
        {
            return (UploadUrl + "_" + Host + "_" + VMHost + "_" + VMHostId + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HostServiceImpl : HostService, IEquatable<HostServiceImpl>
    {
        public string Key { get; set; }

        public string Label { get; set; }

        public string Policy { get; set; }

        public bool Required { get; set; }

        public string[] Ruleset { get; set; }

        public bool Running { get; set; }

        public bool Uninstallable { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VMHostUid { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HostServiceImpl hostServiceImpl)
        {
            return (hostServiceImpl != null && this.Key == hostServiceImpl.Key && this.Label == hostServiceImpl.Label && this.Policy == hostServiceImpl.Policy && this.Required == hostServiceImpl.Required && ((this.Ruleset == null && hostServiceImpl.Ruleset == null) || (this.Ruleset != null && hostServiceImpl.Ruleset != null && Enumerable.SequenceEqual(this.Ruleset, hostServiceImpl.Ruleset))) && this.Running == hostServiceImpl.Running && this.Uninstallable == hostServiceImpl.Uninstallable && this.VMHostId == hostServiceImpl.VMHostId && ((this.VMHost == null && hostServiceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostServiceImpl.VMHost))) && this.VMHostUid == hostServiceImpl.VMHostUid && this.Uid == hostServiceImpl.Uid && ((this.ExtensionData == null && hostServiceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostServiceImpl.ExtensionData))));
        }

        public override bool Equals(object hostServiceImpl)
        {
            return Equals(hostServiceImpl as HostServiceImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Label + "_" + Policy + "_" + Required + "_" + Ruleset + "_" + Running + "_" + Uninstallable + "_" + VMHostId + "_" + VMHost + "_" + VMHostUid + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class TrapTargetImpl : TrapTarget, IEquatable<TrapTargetImpl>
    {
        public string Community { get; set; }

        public string HostName { get; set; }

        public int Port { get; set; }

        public string Uid { get; set; }

        public bool Equals(TrapTargetImpl trapTargetImpl)
        {
            return (trapTargetImpl != null && this.Community == trapTargetImpl.Community && this.HostName == trapTargetImpl.HostName && this.Port == trapTargetImpl.Port && this.Uid == trapTargetImpl.Uid);
        }

        public override bool Equals(object trapTargetImpl)
        {
            return Equals(trapTargetImpl as TrapTargetImpl);
        }

        public override int GetHashCode()
        {
            return (Community + "_" + HostName + "_" + Port + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostAuthenticationImpl : VMHostAuthentication, IEquatable<VMHostAuthenticationImpl>
    {
        public VMHost VMHost { get; set; }

        public string Domain { get; set; }

        public string[] TrustedDomains { get; set; }

        public DomainMembershipStatus? DomainMembershipStatus { get; set; }

        public object ExtensionData { get; set; }

        public string Id { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostAuthenticationImpl vMHostAuthenticationImpl)
        {
            return (vMHostAuthenticationImpl != null && ((this.VMHost == null && vMHostAuthenticationImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostAuthenticationImpl.VMHost))) && this.Domain == vMHostAuthenticationImpl.Domain && ((this.TrustedDomains == null && vMHostAuthenticationImpl.TrustedDomains == null) || (this.TrustedDomains != null && vMHostAuthenticationImpl.TrustedDomains != null && Enumerable.SequenceEqual(this.TrustedDomains, vMHostAuthenticationImpl.TrustedDomains))) && ((this.DomainMembershipStatus == null && vMHostAuthenticationImpl.DomainMembershipStatus == null) || (this.DomainMembershipStatus != null && this.DomainMembershipStatus.Equals(vMHostAuthenticationImpl.DomainMembershipStatus))) && ((this.ExtensionData == null && vMHostAuthenticationImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostAuthenticationImpl.ExtensionData))) && this.Id == vMHostAuthenticationImpl.Id && this.Name == vMHostAuthenticationImpl.Name && this.Uid == vMHostAuthenticationImpl.Uid);
        }

        public override bool Equals(object vMHostAuthenticationImpl)
        {
            return Equals(vMHostAuthenticationImpl as VMHostAuthenticationImpl);
        }

        public override int GetHashCode()
        {
            return (VMHost + "_" + Domain + "_" + TrustedDomains + "_" + DomainMembershipStatus + "_" + ExtensionData + "_" + Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostDiagnosticPartitionImpl : VMHostDiagnosticPartition, IEquatable<VMHostDiagnosticPartitionImpl>
    {
        public string HostId { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string HostUid { get; set; }

        public string CanonicalName { get; set; }

        public string DiagnosticType { get; set; }

        public int SlotCount { get; set; }

        public string StorageType { get; set; }

        public bool Active { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostDiagnosticPartitionImpl vMHostDiagnosticPartitionImpl)
        {
            return (vMHostDiagnosticPartitionImpl != null && this.HostId == vMHostDiagnosticPartitionImpl.HostId && this.VMHostId == vMHostDiagnosticPartitionImpl.VMHostId && ((this.VMHost == null && vMHostDiagnosticPartitionImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostDiagnosticPartitionImpl.VMHost))) && this.HostUid == vMHostDiagnosticPartitionImpl.HostUid && this.CanonicalName == vMHostDiagnosticPartitionImpl.CanonicalName && this.DiagnosticType == vMHostDiagnosticPartitionImpl.DiagnosticType && this.SlotCount == vMHostDiagnosticPartitionImpl.SlotCount && this.StorageType == vMHostDiagnosticPartitionImpl.StorageType && this.Active == vMHostDiagnosticPartitionImpl.Active && this.Uid == vMHostDiagnosticPartitionImpl.Uid && ((this.ExtensionData == null && vMHostDiagnosticPartitionImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostDiagnosticPartitionImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostDiagnosticPartitionImpl)
        {
            return Equals(vMHostDiagnosticPartitionImpl as VMHostDiagnosticPartitionImpl);
        }

        public override int GetHashCode()
        {
            return (HostId + "_" + VMHostId + "_" + VMHost + "_" + HostUid + "_" + CanonicalName + "_" + DiagnosticType + "_" + SlotCount + "_" + StorageType + "_" + Active + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostHardwareImpl : VMHostHardware, IEquatable<VMHostHardwareImpl>
    {
        public VMHost VMHost { get; set; }

        public string Manufacturer { get; set; }

        public string Model { get; set; }

        public string SerialNumber { get; set; }

        public string AssetTag { get; set; }

        public string BiosVersion { get; set; }

        public string CpuModel { get; set; }

        public int CpuCount { get; set; }

        public int CpuCoreCountTotal { get; set; }

        public int MhzPerCpu { get; set; }

        public int MemorySlotCount { get; set; }

        public VMHostMemoryModule[] MemoryModules { get; set; }

        public VMHostPowerSupply[] PowerSupplies { get; set; }

        public int NicCount { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostHardwareImpl vMHostHardwareImpl)
        {
            return (vMHostHardwareImpl != null && ((this.VMHost == null && vMHostHardwareImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostHardwareImpl.VMHost))) && this.Manufacturer == vMHostHardwareImpl.Manufacturer && this.Model == vMHostHardwareImpl.Model && this.SerialNumber == vMHostHardwareImpl.SerialNumber && this.AssetTag == vMHostHardwareImpl.AssetTag && this.BiosVersion == vMHostHardwareImpl.BiosVersion && this.CpuModel == vMHostHardwareImpl.CpuModel && this.CpuCount == vMHostHardwareImpl.CpuCount && this.CpuCoreCountTotal == vMHostHardwareImpl.CpuCoreCountTotal && this.MhzPerCpu == vMHostHardwareImpl.MhzPerCpu && this.MemorySlotCount == vMHostHardwareImpl.MemorySlotCount && ((this.MemoryModules == null && vMHostHardwareImpl.MemoryModules == null) || (this.MemoryModules != null && vMHostHardwareImpl.MemoryModules != null && Enumerable.SequenceEqual(this.MemoryModules, vMHostHardwareImpl.MemoryModules))) && ((this.PowerSupplies == null && vMHostHardwareImpl.PowerSupplies == null) || (this.PowerSupplies != null && vMHostHardwareImpl.PowerSupplies != null && Enumerable.SequenceEqual(this.PowerSupplies, vMHostHardwareImpl.PowerSupplies))) && this.NicCount == vMHostHardwareImpl.NicCount && this.Uid == vMHostHardwareImpl.Uid);
        }

        public override bool Equals(object vMHostHardwareImpl)
        {
            return Equals(vMHostHardwareImpl as VMHostHardwareImpl);
        }

        public override int GetHashCode()
        {
            return (VMHost + "_" + Manufacturer + "_" + Model + "_" + SerialNumber + "_" + AssetTag + "_" + BiosVersion + "_" + CpuModel + "_" + CpuCount + "_" + CpuCoreCountTotal + "_" + MhzPerCpu + "_" + MemorySlotCount + "_" + MemoryModules + "_" + PowerSupplies + "_" + NicCount + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostMemoryModuleImpl : VMHostMemoryModule, IEquatable<VMHostMemoryModuleImpl>
    {
        public string Name { get; set; }

        public decimal CapacityGB { get; set; }

        public string Manufacturer { get; set; }

        public string Model { get; set; }

        public string SerialNumber { get; set; }

        public bool Equals(VMHostMemoryModuleImpl vMHostMemoryModuleImpl)
        {
            return (vMHostMemoryModuleImpl != null && this.Name == vMHostMemoryModuleImpl.Name && this.CapacityGB == vMHostMemoryModuleImpl.CapacityGB && this.Manufacturer == vMHostMemoryModuleImpl.Manufacturer && this.Model == vMHostMemoryModuleImpl.Model && this.SerialNumber == vMHostMemoryModuleImpl.SerialNumber);
        }

        public override bool Equals(object vMHostMemoryModuleImpl)
        {
            return Equals(vMHostMemoryModuleImpl as VMHostMemoryModuleImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + CapacityGB + "_" + Manufacturer + "_" + Model + "_" + SerialNumber).GetHashCode();
        }
    }

    public class VmHostModuleImpl : VmHostModule, IEquatable<VmHostModuleImpl>
    {
        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Name { get; set; }

        public string Options { get; set; }

        public string Uid { get; set; }

        public VMHost VMHost { get; set; }

        public bool Equals(VmHostModuleImpl vmHostModuleImpl)
        {
            return (vmHostModuleImpl != null && this.ServerId == vmHostModuleImpl.ServerId && ((this.Server == null && vmHostModuleImpl.Server == null) || (this.Server != null && this.Server.Equals(vmHostModuleImpl.Server))) && this.Name == vmHostModuleImpl.Name && this.Options == vmHostModuleImpl.Options && this.Uid == vmHostModuleImpl.Uid && ((this.VMHost == null && vmHostModuleImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vmHostModuleImpl.VMHost))));
        }

        public override bool Equals(object vmHostModuleImpl)
        {
            return Equals(vmHostModuleImpl as VmHostModuleImpl);
        }

        public override int GetHashCode()
        {
            return (ServerId + "_" + Server + "_" + Name + "_" + Options + "_" + Uid + "_" + VMHost).GetHashCode();
        }
    }

    public class VMHostPatchImpl : VMHostPatch, IEquatable<VMHostPatchImpl>
    {
        public string Id { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public DateTime? InstallDate { get; set; }

        public string Description { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostPatchImpl vMHostPatchImpl)
        {
            return (vMHostPatchImpl != null && this.Id == vMHostPatchImpl.Id && this.VMHostId == vMHostPatchImpl.VMHostId && ((this.VMHost == null && vMHostPatchImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostPatchImpl.VMHost))) && this.InstallDate == vMHostPatchImpl.InstallDate && this.Description == vMHostPatchImpl.Description && this.Uid == vMHostPatchImpl.Uid);
        }

        public override bool Equals(object vMHostPatchImpl)
        {
            return Equals(vMHostPatchImpl as VMHostPatchImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + VMHostId + "_" + VMHost + "_" + InstallDate + "_" + Description + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostPatchResultImpl : VMHostPatchResult, IEquatable<VMHostPatchResultImpl>
    {
        public string Id { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public bool IsApplicable { get; set; }

        public bool IsInstalled { get; set; }

        public bool NeedsReconnect { get; set; }

        public bool NeedsRestart { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostPatchResultImpl vMHostPatchResultImpl)
        {
            return (vMHostPatchResultImpl != null && this.Id == vMHostPatchResultImpl.Id && this.VMHostId == vMHostPatchResultImpl.VMHostId && ((this.VMHost == null && vMHostPatchResultImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostPatchResultImpl.VMHost))) && this.IsApplicable == vMHostPatchResultImpl.IsApplicable && this.IsInstalled == vMHostPatchResultImpl.IsInstalled && this.NeedsReconnect == vMHostPatchResultImpl.NeedsReconnect && this.NeedsRestart == vMHostPatchResultImpl.NeedsRestart && this.Uid == vMHostPatchResultImpl.Uid);
        }

        public override bool Equals(object vMHostPatchResultImpl)
        {
            return Equals(vMHostPatchResultImpl as VMHostPatchResultImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + VMHostId + "_" + VMHost + "_" + IsApplicable + "_" + IsInstalled + "_" + NeedsReconnect + "_" + NeedsRestart + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostPciDeviceImpl : VMHostPciDevice, IEquatable<VMHostPciDeviceImpl>
    {
        public string Uid { get; set; }

        public string Id { get; set; }

        public string Name { get; set; }

        public VMHost VMHost { get; set; }

        public string DeviceName { get; set; }

        public string VendorName { get; set; }

        public PciDeviceClass DeviceClass { get; set; }

        public short DeviceId { get; set; }

        public short SubDeviceId { get; set; }

        public short ClassId { get; set; }

        public short VendorId { get; set; }

        public short SubVendorId { get; set; }

        public bool Equals(VMHostPciDeviceImpl vMHostPciDeviceImpl)
        {
            return (vMHostPciDeviceImpl != null && this.Uid == vMHostPciDeviceImpl.Uid && this.Id == vMHostPciDeviceImpl.Id && this.Name == vMHostPciDeviceImpl.Name && ((this.VMHost == null && vMHostPciDeviceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostPciDeviceImpl.VMHost))) && this.DeviceName == vMHostPciDeviceImpl.DeviceName && this.VendorName == vMHostPciDeviceImpl.VendorName && this.DeviceClass == vMHostPciDeviceImpl.DeviceClass && this.DeviceId == vMHostPciDeviceImpl.DeviceId && this.SubDeviceId == vMHostPciDeviceImpl.SubDeviceId && this.ClassId == vMHostPciDeviceImpl.ClassId && this.VendorId == vMHostPciDeviceImpl.VendorId && this.SubVendorId == vMHostPciDeviceImpl.SubVendorId);
        }

        public override bool Equals(object vMHostPciDeviceImpl)
        {
            return Equals(vMHostPciDeviceImpl as VMHostPciDeviceImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + Id + "_" + Name + "_" + VMHost + "_" + DeviceName + "_" + VendorName + "_" + DeviceClass + "_" + DeviceId + "_" + SubDeviceId + "_" + ClassId + "_" + VendorId + "_" + SubVendorId).GetHashCode();
        }
    }

    public class VMHostPowerSupplyImpl : VMHostPowerSupply, IEquatable<VMHostPowerSupplyImpl>
    {
        public string Name { get; set; }

        public int HealthState { get; set; }

        public string HealthStateText { get; set; }

        public int OperationalStatus { get; set; }

        public string OperationalStatusText { get; set; }

        public bool Equals(VMHostPowerSupplyImpl vMHostPowerSupplyImpl)
        {
            return (vMHostPowerSupplyImpl != null && this.Name == vMHostPowerSupplyImpl.Name && this.HealthState == vMHostPowerSupplyImpl.HealthState && this.HealthStateText == vMHostPowerSupplyImpl.HealthStateText && this.OperationalStatus == vMHostPowerSupplyImpl.OperationalStatus && this.OperationalStatusText == vMHostPowerSupplyImpl.OperationalStatusText);
        }

        public override bool Equals(object vMHostPowerSupplyImpl)
        {
            return Equals(vMHostPowerSupplyImpl as VMHostPowerSupplyImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + HealthState + "_" + HealthStateText + "_" + OperationalStatus + "_" + OperationalStatusText).GetHashCode();
        }
    }

    public class VMHostRouteImpl : VMHostRoute, IEquatable<VMHostRouteImpl>
    {
        public IPAddress Destination { get; set; }

        public IPAddress Gateway { get; set; }

        public int PrefixLength { get; set; }

        public IPVersion IPVersion { get; set; }

        public string VMHostId { get; set; }

        public string Uid { get; set; }

        public VMHost VMHost { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostRouteImpl vMHostRouteImpl)
        {
            return (vMHostRouteImpl != null && ((this.Destination == null && vMHostRouteImpl.Destination == null) || (this.Destination != null && this.Destination.Equals(vMHostRouteImpl.Destination))) && ((this.Gateway == null && vMHostRouteImpl.Gateway == null) || (this.Gateway != null && this.Gateway.Equals(vMHostRouteImpl.Gateway))) && this.PrefixLength == vMHostRouteImpl.PrefixLength && this.IPVersion == vMHostRouteImpl.IPVersion && this.VMHostId == vMHostRouteImpl.VMHostId && this.Uid == vMHostRouteImpl.Uid && ((this.VMHost == null && vMHostRouteImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostRouteImpl.VMHost))) && ((this.ExtensionData == null && vMHostRouteImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostRouteImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostRouteImpl)
        {
            return Equals(vMHostRouteImpl as VMHostRouteImpl);
        }

        public override int GetHashCode()
        {
            return (Destination + "_" + Gateway + "_" + PrefixLength + "_" + IPVersion + "_" + VMHostId + "_" + Uid + "_" + VMHost + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VmHostSnmpImpl : VmHostSnmp, IEquatable<VmHostSnmpImpl>
    {
        public bool Enabled { get; set; }

        public int Port { get; set; }

        public string[] ReadOnlyCommunities { get; set; }

        public string VmHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VmHostUid { get; set; }

        public TrapTarget[] TrapTargets { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VmHostSnmpImpl vmHostSnmpImpl)
        {
            return (vmHostSnmpImpl != null && this.Enabled == vmHostSnmpImpl.Enabled && this.Port == vmHostSnmpImpl.Port && ((this.ReadOnlyCommunities == null && vmHostSnmpImpl.ReadOnlyCommunities == null) || (this.ReadOnlyCommunities != null && vmHostSnmpImpl.ReadOnlyCommunities != null && Enumerable.SequenceEqual(this.ReadOnlyCommunities, vmHostSnmpImpl.ReadOnlyCommunities))) && this.VmHostId == vmHostSnmpImpl.VmHostId && ((this.VMHost == null && vmHostSnmpImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vmHostSnmpImpl.VMHost))) && this.VmHostUid == vmHostSnmpImpl.VmHostUid && ((this.TrapTargets == null && vmHostSnmpImpl.TrapTargets == null) || (this.TrapTargets != null && vmHostSnmpImpl.TrapTargets != null && Enumerable.SequenceEqual(this.TrapTargets, vmHostSnmpImpl.TrapTargets))) && this.Uid == vmHostSnmpImpl.Uid && ((this.ExtensionData == null && vmHostSnmpImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vmHostSnmpImpl.ExtensionData))));
        }

        public override bool Equals(object vmHostSnmpImpl)
        {
            return Equals(vmHostSnmpImpl as VmHostSnmpImpl);
        }

        public override int GetHashCode()
        {
            return (Enabled + "_" + Port + "_" + ReadOnlyCommunities + "_" + VmHostId + "_" + VMHost + "_" + VmHostUid + "_" + TrapTargets + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostTimeZoneImpl : VMHostTimeZone, IEquatable<VMHostTimeZoneImpl>
    {
        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string Description { get; set; }

        public int GmtOffset { get; set; }

        public string Key { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostTimeZoneImpl vMHostTimeZoneImpl)
        {
            return (vMHostTimeZoneImpl != null && this.VMHostId == vMHostTimeZoneImpl.VMHostId && ((this.VMHost == null && vMHostTimeZoneImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostTimeZoneImpl.VMHost))) && this.Description == vMHostTimeZoneImpl.Description && this.GmtOffset == vMHostTimeZoneImpl.GmtOffset && this.Key == vMHostTimeZoneImpl.Key && this.Name == vMHostTimeZoneImpl.Name && this.Uid == vMHostTimeZoneImpl.Uid);
        }

        public override bool Equals(object vMHostTimeZoneImpl)
        {
            return Equals(vMHostTimeZoneImpl as VMHostTimeZoneImpl);
        }

        public override int GetHashCode()
        {
            return (VMHostId + "_" + VMHost + "_" + Description + "_" + GmtOffset + "_" + Key + "_" + Name + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Account
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Account;
    using VMware.VimAutomation.ViCore.Types.V1.PermissionManagement;

    public class HostGroupAccountImpl : HostGroupAccount, IEquatable<HostGroupAccountImpl>
    {
        public string[] Users { get; set; }

        public string Id { get; set; }

        public string Description { get; set; }

        public string Domain { get; set; }

        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HostGroupAccountImpl hostGroupAccountImpl)
        {
            return (hostGroupAccountImpl != null && ((this.Users == null && hostGroupAccountImpl.Users == null) || (this.Users != null && hostGroupAccountImpl.Users != null && Enumerable.SequenceEqual(this.Users, hostGroupAccountImpl.Users))) && this.Id == hostGroupAccountImpl.Id && this.Description == hostGroupAccountImpl.Description && this.Domain == hostGroupAccountImpl.Domain && this.ServerId == hostGroupAccountImpl.ServerId && ((this.Server == null && hostGroupAccountImpl.Server == null) || (this.Server != null && this.Server.Equals(hostGroupAccountImpl.Server))) && this.Name == hostGroupAccountImpl.Name && this.Uid == hostGroupAccountImpl.Uid && ((this.ExtensionData == null && hostGroupAccountImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostGroupAccountImpl.ExtensionData))));
        }

        public override bool Equals(object hostGroupAccountImpl)
        {
            return Equals(hostGroupAccountImpl as HostGroupAccountImpl);
        }

        public override int GetHashCode()
        {
            return (Users + "_" + Id + "_" + Description + "_" + Domain + "_" + ServerId + "_" + Server + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HostUserAccountImpl : HostUserAccount, IEquatable<HostUserAccountImpl>
    {
        public string[] Groups { get; set; }

        public string Id { get; set; }

        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Description { get; set; }

        public string Domain { get; set; }

        public bool ShellAccessEnabled { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HostUserAccountImpl hostUserAccountImpl)
        {
            return (hostUserAccountImpl != null && ((this.Groups == null && hostUserAccountImpl.Groups == null) || (this.Groups != null && hostUserAccountImpl.Groups != null && Enumerable.SequenceEqual(this.Groups, hostUserAccountImpl.Groups))) && this.Id == hostUserAccountImpl.Id && this.ServerId == hostUserAccountImpl.ServerId && ((this.Server == null && hostUserAccountImpl.Server == null) || (this.Server != null && this.Server.Equals(hostUserAccountImpl.Server))) && this.Description == hostUserAccountImpl.Description && this.Domain == hostUserAccountImpl.Domain && this.ShellAccessEnabled == hostUserAccountImpl.ShellAccessEnabled && this.Name == hostUserAccountImpl.Name && this.Uid == hostUserAccountImpl.Uid && ((this.ExtensionData == null && hostUserAccountImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostUserAccountImpl.ExtensionData))));
        }

        public override bool Equals(object hostUserAccountImpl)
        {
            return Equals(hostUserAccountImpl as HostUserAccountImpl);
        }

        public override int GetHashCode()
        {
            return (Groups + "_" + Id + "_" + ServerId + "_" + Server + "_" + Description + "_" + Domain + "_" + ShellAccessEnabled + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Networking
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking.Nic;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;

    public class DistributedPortGroupImpl : DistributedPortGroup, IEquatable<DistributedPortGroupImpl>
    {
        public VirtualSwitchBase VirtualSwitch { get; set; }

        public string Name { get; set; }

        public string Key { get; set; }

        public string Notes { get; set; }

        public int NumPorts { get; set; }

        public Datacenter Datacenter { get; set; }

        public DistributedPortGroupPortBinding PortBinding { get; set; }

        public object ExtensionData { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public bool Equals(DistributedPortGroupImpl distributedPortGroupImpl)
        {
            return (distributedPortGroupImpl != null && ((this.VirtualSwitch == null && distributedPortGroupImpl.VirtualSwitch == null) || (this.VirtualSwitch != null && this.VirtualSwitch.Equals(distributedPortGroupImpl.VirtualSwitch))) && this.Name == distributedPortGroupImpl.Name && this.Key == distributedPortGroupImpl.Key && this.Notes == distributedPortGroupImpl.Notes && this.NumPorts == distributedPortGroupImpl.NumPorts && ((this.Datacenter == null && distributedPortGroupImpl.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(distributedPortGroupImpl.Datacenter))) && this.PortBinding == distributedPortGroupImpl.PortBinding && ((this.ExtensionData == null && distributedPortGroupImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(distributedPortGroupImpl.ExtensionData))) && this.Id == distributedPortGroupImpl.Id && this.Uid == distributedPortGroupImpl.Uid);
        }

        public override bool Equals(object distributedPortGroupImpl)
        {
            return Equals(distributedPortGroupImpl as DistributedPortGroupImpl);
        }

        public override int GetHashCode()
        {
            return (VirtualSwitch + "_" + Name + "_" + Key + "_" + Notes + "_" + NumPorts + "_" + Datacenter + "_" + PortBinding + "_" + ExtensionData + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class DistributedSwitchImpl : DistributedSwitch, IEquatable<DistributedSwitchImpl>
    {
        public string Key { get; set; }

        public int NumPorts { get; set; }

        public int? Mtu { get; set; }

        public string Notes { get; set; }

        public Datacenter Datacenter { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public bool Equals(DistributedSwitchImpl distributedSwitchImpl)
        {
            return (distributedSwitchImpl != null && this.Key == distributedSwitchImpl.Key && this.NumPorts == distributedSwitchImpl.NumPorts && ((this.Mtu == null && distributedSwitchImpl.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(distributedSwitchImpl.Mtu))) && this.Notes == distributedSwitchImpl.Notes && ((this.Datacenter == null && distributedSwitchImpl.Datacenter == null) || (this.Datacenter != null && this.Datacenter.Equals(distributedSwitchImpl.Datacenter))) && this.Name == distributedSwitchImpl.Name && ((this.ExtensionData == null && distributedSwitchImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(distributedSwitchImpl.ExtensionData))) && this.Id == distributedSwitchImpl.Id && this.Uid == distributedSwitchImpl.Uid);
        }

        public override bool Equals(object distributedSwitchImpl)
        {
            return Equals(distributedSwitchImpl as DistributedSwitchImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + NumPorts + "_" + Mtu + "_" + Notes + "_" + Datacenter + "_" + Name + "_" + ExtensionData + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class NicTeamingVirtualPortGroupPolicyImpl : NicTeamingVirtualPortGroupPolicy, IEquatable<NicTeamingVirtualPortGroupPolicyImpl>
    {
        public string VirtualPortGroupId { get; set; }

        public VirtualPortGroup VirtualPortGroup { get; set; }

        public string VirtualPortGroupUid { get; set; }

        public bool IsLoadBalancingInherited { get; set; }

        public bool IsNetworkFailoverDetectionInherited { get; set; }

        public bool IsNotifySwitchesInherited { get; set; }

        public bool IsFailbackInherited { get; set; }

        public bool IsFailoverOrderInherited { get; set; }

        public bool IsCheckBeaconInherited { get; set; }

        public LoadBalancingPolicy LoadBalancingPolicy { get; set; }

        public NetworkFailoverDetectionPolicy NetworkFailoverDetectionPolicy { get; set; }

        public bool NotifySwitches { get; set; }

        public bool FailbackEnabled { get; set; }

        public string[] ActiveNic { get; set; }

        public string[] StandbyNic { get; set; }

        public string[] UnusedNic { get; set; }

        public bool CheckBeacon { get; set; }

        public string VmHostId { get; set; }

        public object ExtensionData { get; set; }

        public string Uid { get; set; }

        public bool Equals(NicTeamingVirtualPortGroupPolicyImpl nicTeamingVirtualPortGroupPolicyImpl)
        {
            return (nicTeamingVirtualPortGroupPolicyImpl != null && this.VirtualPortGroupId == nicTeamingVirtualPortGroupPolicyImpl.VirtualPortGroupId && ((this.VirtualPortGroup == null && nicTeamingVirtualPortGroupPolicyImpl.VirtualPortGroup == null) || (this.VirtualPortGroup != null && this.VirtualPortGroup.Equals(nicTeamingVirtualPortGroupPolicyImpl.VirtualPortGroup))) && this.VirtualPortGroupUid == nicTeamingVirtualPortGroupPolicyImpl.VirtualPortGroupUid && this.IsLoadBalancingInherited == nicTeamingVirtualPortGroupPolicyImpl.IsLoadBalancingInherited && this.IsNetworkFailoverDetectionInherited == nicTeamingVirtualPortGroupPolicyImpl.IsNetworkFailoverDetectionInherited && this.IsNotifySwitchesInherited == nicTeamingVirtualPortGroupPolicyImpl.IsNotifySwitchesInherited && this.IsFailbackInherited == nicTeamingVirtualPortGroupPolicyImpl.IsFailbackInherited && this.IsFailoverOrderInherited == nicTeamingVirtualPortGroupPolicyImpl.IsFailoverOrderInherited && this.IsCheckBeaconInherited == nicTeamingVirtualPortGroupPolicyImpl.IsCheckBeaconInherited && this.LoadBalancingPolicy == nicTeamingVirtualPortGroupPolicyImpl.LoadBalancingPolicy && this.NetworkFailoverDetectionPolicy == nicTeamingVirtualPortGroupPolicyImpl.NetworkFailoverDetectionPolicy && this.NotifySwitches == nicTeamingVirtualPortGroupPolicyImpl.NotifySwitches && this.FailbackEnabled == nicTeamingVirtualPortGroupPolicyImpl.FailbackEnabled && ((this.ActiveNic == null && nicTeamingVirtualPortGroupPolicyImpl.ActiveNic == null) || (this.ActiveNic != null && nicTeamingVirtualPortGroupPolicyImpl.ActiveNic != null && Enumerable.SequenceEqual(this.ActiveNic, nicTeamingVirtualPortGroupPolicyImpl.ActiveNic))) && ((this.StandbyNic == null && nicTeamingVirtualPortGroupPolicyImpl.StandbyNic == null) || (this.StandbyNic != null && nicTeamingVirtualPortGroupPolicyImpl.StandbyNic != null && Enumerable.SequenceEqual(this.StandbyNic, nicTeamingVirtualPortGroupPolicyImpl.StandbyNic))) && ((this.UnusedNic == null && nicTeamingVirtualPortGroupPolicyImpl.UnusedNic == null) || (this.UnusedNic != null && nicTeamingVirtualPortGroupPolicyImpl.UnusedNic != null && Enumerable.SequenceEqual(this.UnusedNic, nicTeamingVirtualPortGroupPolicyImpl.UnusedNic))) && this.CheckBeacon == nicTeamingVirtualPortGroupPolicyImpl.CheckBeacon && this.VmHostId == nicTeamingVirtualPortGroupPolicyImpl.VmHostId && ((this.ExtensionData == null && nicTeamingVirtualPortGroupPolicyImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(nicTeamingVirtualPortGroupPolicyImpl.ExtensionData))) && this.Uid == nicTeamingVirtualPortGroupPolicyImpl.Uid);
        }

        public override bool Equals(object nicTeamingVirtualPortGroupPolicyImpl)
        {
            return Equals(nicTeamingVirtualPortGroupPolicyImpl as NicTeamingVirtualPortGroupPolicyImpl);
        }

        public override int GetHashCode()
        {
            return (VirtualPortGroupId + "_" + VirtualPortGroup + "_" + VirtualPortGroupUid + "_" + IsLoadBalancingInherited + "_" + IsNetworkFailoverDetectionInherited + "_" + IsNotifySwitchesInherited + "_" + IsFailbackInherited + "_" + IsFailoverOrderInherited + "_" + IsCheckBeaconInherited + "_" + LoadBalancingPolicy + "_" + NetworkFailoverDetectionPolicy + "_" + NotifySwitches + "_" + FailbackEnabled + "_" + ActiveNic + "_" + StandbyNic + "_" + UnusedNic + "_" + CheckBeacon + "_" + VmHostId + "_" + ExtensionData + "_" + Uid).GetHashCode();
        }
    }

    public class PortGroupPortImpl : PortGroupPort, IEquatable<PortGroupPortImpl>
    {
        public string Key { get; set; }

        public string[] Mac { get; set; }

        public string Type { get; set; }

        public bool Equals(PortGroupPortImpl portGroupPortImpl)
        {
            return (portGroupPortImpl != null && this.Key == portGroupPortImpl.Key && ((this.Mac == null && portGroupPortImpl.Mac == null) || (this.Mac != null && portGroupPortImpl.Mac != null && Enumerable.SequenceEqual(this.Mac, portGroupPortImpl.Mac))) && this.Type == portGroupPortImpl.Type);
        }

        public override bool Equals(object portGroupPortImpl)
        {
            return Equals(portGroupPortImpl as PortGroupPortImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Mac + "_" + Type).GetHashCode();
        }
    }

    public class VirtualPortGroupImpl : VirtualPortGroup, IEquatable<VirtualPortGroupImpl>
    {
        public string Name { get; set; }

        public string VirtualSwitchId { get; set; }

        public string VirtualSwitchUid { get; set; }

        public VirtualSwitchBase VirtualSwitch { get; set; }

        public string Key { get; set; }

        public PortGroupPort[] Port { get; set; }

        public int VLanId { get; set; }

        public string VirtualSwitchName { get; set; }

        public string VMHostId { get; set; }

        public string VMHostUid { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Host.Networking.VirtualSwitchBase> ToVirtualSwitch()
        {
            return default(IEnumerable<VMware.VimAutomation.ViCore.Types.V1.Host.Networking.VirtualSwitchBase>);
        }

        public bool Equals(VirtualPortGroupImpl virtualPortGroupImpl)
        {
            return (virtualPortGroupImpl != null && this.Name == virtualPortGroupImpl.Name && this.VirtualSwitchId == virtualPortGroupImpl.VirtualSwitchId && this.VirtualSwitchUid == virtualPortGroupImpl.VirtualSwitchUid && ((this.VirtualSwitch == null && virtualPortGroupImpl.VirtualSwitch == null) || (this.VirtualSwitch != null && this.VirtualSwitch.Equals(virtualPortGroupImpl.VirtualSwitch))) && this.Key == virtualPortGroupImpl.Key && ((this.Port == null && virtualPortGroupImpl.Port == null) || (this.Port != null && virtualPortGroupImpl.Port != null && Enumerable.SequenceEqual(this.Port, virtualPortGroupImpl.Port))) && this.VLanId == virtualPortGroupImpl.VLanId && this.VirtualSwitchName == virtualPortGroupImpl.VirtualSwitchName && this.VMHostId == virtualPortGroupImpl.VMHostId && this.VMHostUid == virtualPortGroupImpl.VMHostUid && this.Uid == virtualPortGroupImpl.Uid && ((this.ExtensionData == null && virtualPortGroupImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(virtualPortGroupImpl.ExtensionData))));
        }

        public override bool Equals(object virtualPortGroupImpl)
        {
            return Equals(virtualPortGroupImpl as VirtualPortGroupImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + VirtualSwitchId + "_" + VirtualSwitchUid + "_" + VirtualSwitch + "_" + Key + "_" + Port + "_" + VLanId + "_" + VirtualSwitchName + "_" + VMHostId + "_" + VMHostUid + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VirtualSwitchImpl : VirtualSwitch, IEquatable<VirtualSwitchImpl>
    {
        public string Id { get; set; }

        public string Key { get; set; }

        public string Name { get; set; }

        public int NumPorts { get; set; }

        public int NumPortsAvailable { get; set; }

        public string[] Nic { get; set; }

        public int? Mtu { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VMHostUid { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VirtualSwitchImpl virtualSwitchImpl)
        {
            return (virtualSwitchImpl != null && this.Id == virtualSwitchImpl.Id && this.Key == virtualSwitchImpl.Key && this.Name == virtualSwitchImpl.Name && this.NumPorts == virtualSwitchImpl.NumPorts && this.NumPortsAvailable == virtualSwitchImpl.NumPortsAvailable && ((this.Nic == null && virtualSwitchImpl.Nic == null) || (this.Nic != null && virtualSwitchImpl.Nic != null && Enumerable.SequenceEqual(this.Nic, virtualSwitchImpl.Nic))) && ((this.Mtu == null && virtualSwitchImpl.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(virtualSwitchImpl.Mtu))) && this.VMHostId == virtualSwitchImpl.VMHostId && ((this.VMHost == null && virtualSwitchImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(virtualSwitchImpl.VMHost))) && this.VMHostUid == virtualSwitchImpl.VMHostUid && this.Uid == virtualSwitchImpl.Uid && ((this.ExtensionData == null && virtualSwitchImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(virtualSwitchImpl.ExtensionData))));
        }

        public override bool Equals(object virtualSwitchImpl)
        {
            return Equals(virtualSwitchImpl as VirtualSwitchImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Key + "_" + Name + "_" + NumPorts + "_" + NumPortsAvailable + "_" + Nic + "_" + Mtu + "_" + VMHostId + "_" + VMHost + "_" + VMHostUid + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostNetworkInfoImpl : VMHostNetworkInfo, IEquatable<VMHostNetworkInfoImpl>
    {
        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VMKernelGateway { get; set; }

        public string VMKernelGatewayDevice { get; set; }

        public string ConsoleGateway { get; set; }

        public string ConsoleGatewayDevice { get; set; }

        public string[] DnsAddress { get; set; }

        public bool DnsFromDhcp { get; set; }

        public string DnsDhcpDevice { get; set; }

        public string DomainName { get; set; }

        public string HostName { get; set; }

        public string[] SearchDomain { get; set; }

        public VirtualSwitch[] VirtualSwitch { get; set; }

        public PhysicalNic[] PhysicalNic { get; set; }

        public HostVirtualNic[] ConsoleNic { get; set; }

        public HostVirtualNic[] VirtualNic { get; set; }

        public string Uid { get; set; }

        public bool? IPv6Enabled { get; set; }

        public string ConsoleV6Gateway { get; set; }

        public string ConsoleV6GatewayDevice { get; set; }

        public string VMKernelV6Gateway { get; set; }

        public string VMKernelV6GatewayDevice { get; set; }

        public object ExtensionData { get; set; }

        public object ExtensionData2 { get; set; }

        public string Name { get; set; }

        public string Id { get; set; }

        public bool Equals(VMHostNetworkInfoImpl vMHostNetworkInfoImpl)
        {
            return (vMHostNetworkInfoImpl != null && this.VMHostId == vMHostNetworkInfoImpl.VMHostId && ((this.VMHost == null && vMHostNetworkInfoImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostNetworkInfoImpl.VMHost))) && this.VMKernelGateway == vMHostNetworkInfoImpl.VMKernelGateway && this.VMKernelGatewayDevice == vMHostNetworkInfoImpl.VMKernelGatewayDevice && this.ConsoleGateway == vMHostNetworkInfoImpl.ConsoleGateway && this.ConsoleGatewayDevice == vMHostNetworkInfoImpl.ConsoleGatewayDevice && ((this.DnsAddress == null && vMHostNetworkInfoImpl.DnsAddress == null) || (this.DnsAddress != null && vMHostNetworkInfoImpl.DnsAddress != null && Enumerable.SequenceEqual(this.DnsAddress, vMHostNetworkInfoImpl.DnsAddress))) && this.DnsFromDhcp == vMHostNetworkInfoImpl.DnsFromDhcp && this.DnsDhcpDevice == vMHostNetworkInfoImpl.DnsDhcpDevice && this.DomainName == vMHostNetworkInfoImpl.DomainName && this.HostName == vMHostNetworkInfoImpl.HostName && ((this.SearchDomain == null && vMHostNetworkInfoImpl.SearchDomain == null) || (this.SearchDomain != null && vMHostNetworkInfoImpl.SearchDomain != null && Enumerable.SequenceEqual(this.SearchDomain, vMHostNetworkInfoImpl.SearchDomain))) && ((this.VirtualSwitch == null && vMHostNetworkInfoImpl.VirtualSwitch == null) || (this.VirtualSwitch != null && vMHostNetworkInfoImpl.VirtualSwitch != null && Enumerable.SequenceEqual(this.VirtualSwitch, vMHostNetworkInfoImpl.VirtualSwitch))) && ((this.PhysicalNic == null && vMHostNetworkInfoImpl.PhysicalNic == null) || (this.PhysicalNic != null && vMHostNetworkInfoImpl.PhysicalNic != null && Enumerable.SequenceEqual(this.PhysicalNic, vMHostNetworkInfoImpl.PhysicalNic))) && ((this.ConsoleNic == null && vMHostNetworkInfoImpl.ConsoleNic == null) || (this.ConsoleNic != null && vMHostNetworkInfoImpl.ConsoleNic != null && Enumerable.SequenceEqual(this.ConsoleNic, vMHostNetworkInfoImpl.ConsoleNic))) && ((this.VirtualNic == null && vMHostNetworkInfoImpl.VirtualNic == null) || (this.VirtualNic != null && vMHostNetworkInfoImpl.VirtualNic != null && Enumerable.SequenceEqual(this.VirtualNic, vMHostNetworkInfoImpl.VirtualNic))) && this.Uid == vMHostNetworkInfoImpl.Uid && ((this.IPv6Enabled == null && vMHostNetworkInfoImpl.IPv6Enabled == null) || (this.IPv6Enabled != null && this.IPv6Enabled.Equals(vMHostNetworkInfoImpl.IPv6Enabled))) && this.ConsoleV6Gateway == vMHostNetworkInfoImpl.ConsoleV6Gateway && this.ConsoleV6GatewayDevice == vMHostNetworkInfoImpl.ConsoleV6GatewayDevice && this.VMKernelV6Gateway == vMHostNetworkInfoImpl.VMKernelV6Gateway && this.VMKernelV6GatewayDevice == vMHostNetworkInfoImpl.VMKernelV6GatewayDevice && ((this.ExtensionData == null && vMHostNetworkInfoImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostNetworkInfoImpl.ExtensionData))) && ((this.ExtensionData2 == null && vMHostNetworkInfoImpl.ExtensionData2 == null) || (this.ExtensionData2 != null && this.ExtensionData2.Equals(vMHostNetworkInfoImpl.ExtensionData2))) && this.Name == vMHostNetworkInfoImpl.Name && this.Id == vMHostNetworkInfoImpl.Id);
        }

        public override bool Equals(object vMHostNetworkInfoImpl)
        {
            return Equals(vMHostNetworkInfoImpl as VMHostNetworkInfoImpl);
        }

        public override int GetHashCode()
        {
            return (VMHostId + "_" + VMHost + "_" + VMKernelGateway + "_" + VMKernelGatewayDevice + "_" + ConsoleGateway + "_" + ConsoleGatewayDevice + "_" + DnsAddress + "_" + DnsFromDhcp + "_" + DnsDhcpDevice + "_" + DomainName + "_" + HostName + "_" + SearchDomain + "_" + VirtualSwitch + "_" + PhysicalNic + "_" + ConsoleNic + "_" + VirtualNic + "_" + Uid + "_" + IPv6Enabled + "_" + ConsoleV6Gateway + "_" + ConsoleV6GatewayDevice + "_" + VMKernelV6Gateway + "_" + VMKernelV6GatewayDevice + "_" + ExtensionData + "_" + ExtensionData2 + "_" + Name + "_" + Id).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Networking.Nic
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking.Nic;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class HostConsoleVirtualNicImpl : HostVirtualNicImpl, HostConsoleVirtualNic, IEquatable<HostConsoleVirtualNicImpl>
    {
        public IPv6Address[] IPv6 { get; set; }

        public bool? AutomaticIPv6 { get; set; }

        public bool? IPv6ThroughDhcp { get; set; }

        public bool? IPv6Enabled { get; set; }

        public bool Equals(HostConsoleVirtualNicImpl hostConsoleVirtualNicImpl)
        {
            return (hostConsoleVirtualNicImpl != null && ((this.IPv6 == null && hostConsoleVirtualNicImpl.IPv6 == null) || (this.IPv6 != null && hostConsoleVirtualNicImpl.IPv6 != null && Enumerable.SequenceEqual(this.IPv6, hostConsoleVirtualNicImpl.IPv6))) && ((this.AutomaticIPv6 == null && hostConsoleVirtualNicImpl.AutomaticIPv6 == null) || (this.AutomaticIPv6 != null && this.AutomaticIPv6.Equals(hostConsoleVirtualNicImpl.AutomaticIPv6))) && ((this.IPv6ThroughDhcp == null && hostConsoleVirtualNicImpl.IPv6ThroughDhcp == null) || (this.IPv6ThroughDhcp != null && this.IPv6ThroughDhcp.Equals(hostConsoleVirtualNicImpl.IPv6ThroughDhcp))) && ((this.IPv6Enabled == null && hostConsoleVirtualNicImpl.IPv6Enabled == null) || (this.IPv6Enabled != null && this.IPv6Enabled.Equals(hostConsoleVirtualNicImpl.IPv6Enabled))) && this.Uid == hostConsoleVirtualNicImpl.Uid && this.Name == hostConsoleVirtualNicImpl.Name && this.Id == hostConsoleVirtualNicImpl.Id && this.VMHostId == hostConsoleVirtualNicImpl.VMHostId && ((this.VMHost == null && hostConsoleVirtualNicImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostConsoleVirtualNicImpl.VMHost))) && this.DeviceName == hostConsoleVirtualNicImpl.DeviceName && this.Mac == hostConsoleVirtualNicImpl.Mac && this.DhcpEnabled == hostConsoleVirtualNicImpl.DhcpEnabled && this.IP == hostConsoleVirtualNicImpl.IP && this.SubnetMask == hostConsoleVirtualNicImpl.SubnetMask && ((this.ExtensionData == null && hostConsoleVirtualNicImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostConsoleVirtualNicImpl.ExtensionData))) && this.PortGroupName == hostConsoleVirtualNicImpl.PortGroupName);
        }

        public override bool Equals(object hostConsoleVirtualNicImpl)
        {
            return Equals(hostConsoleVirtualNicImpl as HostConsoleVirtualNicImpl);
        }

        public override int GetHashCode()
        {
            return (IPv6 + "_" + AutomaticIPv6 + "_" + IPv6ThroughDhcp + "_" + IPv6Enabled + "_" + Uid + "_" + Name + "_" + Id + "_" + VMHostId + "_" + VMHost + "_" + DeviceName + "_" + Mac + "_" + DhcpEnabled + "_" + IP + "_" + SubnetMask + "_" + ExtensionData + "_" + PortGroupName).GetHashCode();
        }
    }

    public class HostNicImpl : HostNic, IEquatable<HostNicImpl>
    {
        public string Id { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VMHostUid { get; set; }

        public string DeviceName { get; set; }

        public string Mac { get; set; }

        public bool DhcpEnabled { get; set; }

        public string IP { get; set; }

        public string SubnetMask { get; set; }

        public string Uid { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HostNicImpl hostNicImpl)
        {
            return (hostNicImpl != null && this.Id == hostNicImpl.Id && this.VMHostId == hostNicImpl.VMHostId && ((this.VMHost == null && hostNicImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostNicImpl.VMHost))) && this.VMHostUid == hostNicImpl.VMHostUid && this.DeviceName == hostNicImpl.DeviceName && this.Mac == hostNicImpl.Mac && this.DhcpEnabled == hostNicImpl.DhcpEnabled && this.IP == hostNicImpl.IP && this.SubnetMask == hostNicImpl.SubnetMask && this.Uid == hostNicImpl.Uid && this.Name == hostNicImpl.Name && ((this.ExtensionData == null && hostNicImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostNicImpl.ExtensionData))));
        }

        public override bool Equals(object hostNicImpl)
        {
            return Equals(hostNicImpl as HostNicImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + VMHostId + "_" + VMHost + "_" + VMHostUid + "_" + DeviceName + "_" + Mac + "_" + DhcpEnabled + "_" + IP + "_" + SubnetMask + "_" + Uid + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HostVirtualNicImpl : HostNicImpl, HostVirtualNic, IEquatable<HostVirtualNicImpl>
    {
        public string PortGroupName { get; set; }

        public bool Equals(HostVirtualNicImpl hostVirtualNicImpl)
        {
            return (hostVirtualNicImpl != null && this.PortGroupName == hostVirtualNicImpl.PortGroupName && this.Uid == hostVirtualNicImpl.Uid && this.Name == hostVirtualNicImpl.Name && this.Id == hostVirtualNicImpl.Id && this.VMHostId == hostVirtualNicImpl.VMHostId && ((this.VMHost == null && hostVirtualNicImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostVirtualNicImpl.VMHost))) && this.DeviceName == hostVirtualNicImpl.DeviceName && this.Mac == hostVirtualNicImpl.Mac && this.DhcpEnabled == hostVirtualNicImpl.DhcpEnabled && this.IP == hostVirtualNicImpl.IP && this.SubnetMask == hostVirtualNicImpl.SubnetMask && ((this.ExtensionData == null && hostVirtualNicImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostVirtualNicImpl.ExtensionData))));
        }

        public override bool Equals(object hostVirtualNicImpl)
        {
            return Equals(hostVirtualNicImpl as HostVirtualNicImpl);
        }

        public override int GetHashCode()
        {
            return (PortGroupName + "_" + Uid + "_" + Name + "_" + Id + "_" + VMHostId + "_" + VMHost + "_" + DeviceName + "_" + Mac + "_" + DhcpEnabled + "_" + IP + "_" + SubnetMask + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HostVMKernelVirtualNicImpl : HostVirtualNicImpl, HostVMKernelVirtualNic, IEquatable<HostVMKernelVirtualNicImpl>
    {
        public bool VMotionEnabled { get; set; }

        public bool? FaultToleranceLoggingEnabled { get; set; }

        public bool? ManagementTrafficEnabled { get; set; }

        public IPv6Address[] IPv6 { get; set; }

        public bool? AutomaticIPv6 { get; set; }

        public bool? IPv6ThroughDhcp { get; set; }

        public bool? IPv6Enabled { get; set; }

        public int? Mtu { get; set; }

        public bool? VsanTrafficEnabled { get; set; }

        public bool Equals(HostVMKernelVirtualNicImpl hostVMKernelVirtualNicImpl)
        {
            return (hostVMKernelVirtualNicImpl != null && this.VMotionEnabled == hostVMKernelVirtualNicImpl.VMotionEnabled && ((this.FaultToleranceLoggingEnabled == null && hostVMKernelVirtualNicImpl.FaultToleranceLoggingEnabled == null) || (this.FaultToleranceLoggingEnabled != null && this.FaultToleranceLoggingEnabled.Equals(hostVMKernelVirtualNicImpl.FaultToleranceLoggingEnabled))) && ((this.ManagementTrafficEnabled == null && hostVMKernelVirtualNicImpl.ManagementTrafficEnabled == null) || (this.ManagementTrafficEnabled != null && this.ManagementTrafficEnabled.Equals(hostVMKernelVirtualNicImpl.ManagementTrafficEnabled))) && ((this.IPv6 == null && hostVMKernelVirtualNicImpl.IPv6 == null) || (this.IPv6 != null && hostVMKernelVirtualNicImpl.IPv6 != null && Enumerable.SequenceEqual(this.IPv6, hostVMKernelVirtualNicImpl.IPv6))) && ((this.AutomaticIPv6 == null && hostVMKernelVirtualNicImpl.AutomaticIPv6 == null) || (this.AutomaticIPv6 != null && this.AutomaticIPv6.Equals(hostVMKernelVirtualNicImpl.AutomaticIPv6))) && ((this.IPv6ThroughDhcp == null && hostVMKernelVirtualNicImpl.IPv6ThroughDhcp == null) || (this.IPv6ThroughDhcp != null && this.IPv6ThroughDhcp.Equals(hostVMKernelVirtualNicImpl.IPv6ThroughDhcp))) && ((this.IPv6Enabled == null && hostVMKernelVirtualNicImpl.IPv6Enabled == null) || (this.IPv6Enabled != null && this.IPv6Enabled.Equals(hostVMKernelVirtualNicImpl.IPv6Enabled))) && ((this.Mtu == null && hostVMKernelVirtualNicImpl.Mtu == null) || (this.Mtu != null && this.Mtu.Equals(hostVMKernelVirtualNicImpl.Mtu))) && ((this.VsanTrafficEnabled == null && hostVMKernelVirtualNicImpl.VsanTrafficEnabled == null) || (this.VsanTrafficEnabled != null && this.VsanTrafficEnabled.Equals(hostVMKernelVirtualNicImpl.VsanTrafficEnabled))) && this.Uid == hostVMKernelVirtualNicImpl.Uid && this.Name == hostVMKernelVirtualNicImpl.Name && this.Id == hostVMKernelVirtualNicImpl.Id && this.VMHostId == hostVMKernelVirtualNicImpl.VMHostId && ((this.VMHost == null && hostVMKernelVirtualNicImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hostVMKernelVirtualNicImpl.VMHost))) && this.DeviceName == hostVMKernelVirtualNicImpl.DeviceName && this.Mac == hostVMKernelVirtualNicImpl.Mac && this.DhcpEnabled == hostVMKernelVirtualNicImpl.DhcpEnabled && this.IP == hostVMKernelVirtualNicImpl.IP && this.SubnetMask == hostVMKernelVirtualNicImpl.SubnetMask && ((this.ExtensionData == null && hostVMKernelVirtualNicImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hostVMKernelVirtualNicImpl.ExtensionData))) && this.PortGroupName == hostVMKernelVirtualNicImpl.PortGroupName);
        }

        public override bool Equals(object hostVMKernelVirtualNicImpl)
        {
            return Equals(hostVMKernelVirtualNicImpl as HostVMKernelVirtualNicImpl);
        }

        public override int GetHashCode()
        {
            return (VMotionEnabled + "_" + FaultToleranceLoggingEnabled + "_" + ManagementTrafficEnabled + "_" + IPv6 + "_" + AutomaticIPv6 + "_" + IPv6ThroughDhcp + "_" + IPv6Enabled + "_" + Mtu + "_" + VsanTrafficEnabled + "_" + Uid + "_" + Name + "_" + Id + "_" + VMHostId + "_" + VMHost + "_" + DeviceName + "_" + Mac + "_" + DhcpEnabled + "_" + IP + "_" + SubnetMask + "_" + ExtensionData + "_" + PortGroupName).GetHashCode();
        }
    }

    public class PhysicalNicImpl : HostNicImpl, PhysicalNic, IEquatable<PhysicalNicImpl>
    {
        public long BitRatePerSec { get; set; }

        public bool FullDuplex { get; set; }

        public bool? WakeOnLanSupported { get; set; }

        public bool Equals(PhysicalNicImpl physicalNicImpl)
        {
            return (physicalNicImpl != null && this.BitRatePerSec == physicalNicImpl.BitRatePerSec && this.FullDuplex == physicalNicImpl.FullDuplex && ((this.WakeOnLanSupported == null && physicalNicImpl.WakeOnLanSupported == null) || (this.WakeOnLanSupported != null && this.WakeOnLanSupported.Equals(physicalNicImpl.WakeOnLanSupported))) && this.Uid == physicalNicImpl.Uid && this.Name == physicalNicImpl.Name && this.Id == physicalNicImpl.Id && this.VMHostId == physicalNicImpl.VMHostId && ((this.VMHost == null && physicalNicImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(physicalNicImpl.VMHost))) && this.DeviceName == physicalNicImpl.DeviceName && this.Mac == physicalNicImpl.Mac && this.DhcpEnabled == physicalNicImpl.DhcpEnabled && this.IP == physicalNicImpl.IP && this.SubnetMask == physicalNicImpl.SubnetMask && ((this.ExtensionData == null && physicalNicImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(physicalNicImpl.ExtensionData))));
        }

        public override bool Equals(object physicalNicImpl)
        {
            return Equals(physicalNicImpl as PhysicalNicImpl);
        }

        public override int GetHashCode()
        {
            return (BitRatePerSec + "_" + FullDuplex + "_" + WakeOnLanSupported + "_" + Uid + "_" + Name + "_" + Id + "_" + VMHostId + "_" + VMHost + "_" + DeviceName + "_" + Mac + "_" + DhcpEnabled + "_" + IP + "_" + SubnetMask + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Profile
{
    using System;
    using System.Linq;
    using System.Security;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Profile;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class VMHostProfileImageCacheConfigurationImpl : VMHostProfileImageCacheConfiguration, IEquatable<VMHostProfileImageCacheConfigurationImpl>
    {
        public VMHostProfileInstallationDevice InstallationDevice { get; set; }

        public VMHostProfileInstallationType InstallationType { get; set; }

        public string DiskArguments { get; set; }

        public bool? IgnoreSsd { get; set; }

        public bool? OverwriteVmfs { get; set; }

        public VMHostProfile HostProfile { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileImageCacheConfigurationImpl vMHostProfileImageCacheConfigurationImpl)
        {
            return (vMHostProfileImageCacheConfigurationImpl != null && this.InstallationDevice == vMHostProfileImageCacheConfigurationImpl.InstallationDevice && this.InstallationType == vMHostProfileImageCacheConfigurationImpl.InstallationType && this.DiskArguments == vMHostProfileImageCacheConfigurationImpl.DiskArguments && this.IgnoreSsd == vMHostProfileImageCacheConfigurationImpl.IgnoreSsd && this.OverwriteVmfs == vMHostProfileImageCacheConfigurationImpl.OverwriteVmfs && ((this.HostProfile == null && vMHostProfileImageCacheConfigurationImpl.HostProfile == null) || (this.HostProfile != null && this.HostProfile.Equals(vMHostProfileImageCacheConfigurationImpl.HostProfile))) && this.Uid == vMHostProfileImageCacheConfigurationImpl.Uid);
        }

        public override bool Equals(object vMHostProfileImageCacheConfigurationImpl)
        {
            return Equals(vMHostProfileImageCacheConfigurationImpl as VMHostProfileImageCacheConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (InstallationDevice + "_" + InstallationType + "_" + DiskArguments + "_" + IgnoreSsd + "_" + OverwriteVmfs + "_" + HostProfile + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostProfileImpl : VMHostProfile, IEquatable<VMHostProfileImpl>
    {
        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Description { get; set; }

        public string ReferenceHostId { get; set; }

        public VMHost ReferenceHost { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileImpl vMHostProfileImpl)
        {
            return (vMHostProfileImpl != null && this.ServerId == vMHostProfileImpl.ServerId && ((this.Server == null && vMHostProfileImpl.Server == null) || (this.Server != null && this.Server.Equals(vMHostProfileImpl.Server))) && this.Description == vMHostProfileImpl.Description && this.ReferenceHostId == vMHostProfileImpl.ReferenceHostId && ((this.ReferenceHost == null && vMHostProfileImpl.ReferenceHost == null) || (this.ReferenceHost != null && this.ReferenceHost.Equals(vMHostProfileImpl.ReferenceHost))) && this.Name == vMHostProfileImpl.Name && ((this.ExtensionData == null && vMHostProfileImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostProfileImpl.ExtensionData))) && this.Id == vMHostProfileImpl.Id && this.Uid == vMHostProfileImpl.Uid);
        }

        public override bool Equals(object vMHostProfileImpl)
        {
            return Equals(vMHostProfileImpl as VMHostProfileImpl);
        }

        public override int GetHashCode()
        {
            return (ServerId + "_" + Server + "_" + Description + "_" + ReferenceHostId + "_" + ReferenceHost + "_" + Name + "_" + ExtensionData + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostProfileIncomplianceElementImpl : VMHostProfileIncomplianceElement, IEquatable<VMHostProfileIncomplianceElementImpl>
    {
        public string PropertyName { get; set; }

        public string Description { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileIncomplianceElementImpl vMHostProfileIncomplianceElementImpl)
        {
            return (vMHostProfileIncomplianceElementImpl != null && this.PropertyName == vMHostProfileIncomplianceElementImpl.PropertyName && this.Description == vMHostProfileIncomplianceElementImpl.Description && this.Uid == vMHostProfileIncomplianceElementImpl.Uid);
        }

        public override bool Equals(object vMHostProfileIncomplianceElementImpl)
        {
            return Equals(vMHostProfileIncomplianceElementImpl as VMHostProfileIncomplianceElementImpl);
        }

        public override int GetHashCode()
        {
            return (PropertyName + "_" + Description + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostProfileIncomplianceImpl : VMHostProfileIncompliance, IEquatable<VMHostProfileIncomplianceImpl>
    {
        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string VMHostUid { get; set; }

        public string VMHostProfileId { get; set; }

        public VMHostProfile VMHostProfile { get; set; }

        public string VMHostProfileUid { get; set; }

        public VMHostProfileIncomplianceElement[] IncomplianceElementList { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostProfileIncomplianceImpl vMHostProfileIncomplianceImpl)
        {
            return (vMHostProfileIncomplianceImpl != null && this.VMHostId == vMHostProfileIncomplianceImpl.VMHostId && ((this.VMHost == null && vMHostProfileIncomplianceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostProfileIncomplianceImpl.VMHost))) && this.VMHostUid == vMHostProfileIncomplianceImpl.VMHostUid && this.VMHostProfileId == vMHostProfileIncomplianceImpl.VMHostProfileId && ((this.VMHostProfile == null && vMHostProfileIncomplianceImpl.VMHostProfile == null) || (this.VMHostProfile != null && this.VMHostProfile.Equals(vMHostProfileIncomplianceImpl.VMHostProfile))) && this.VMHostProfileUid == vMHostProfileIncomplianceImpl.VMHostProfileUid && ((this.IncomplianceElementList == null && vMHostProfileIncomplianceImpl.IncomplianceElementList == null) || (this.IncomplianceElementList != null && vMHostProfileIncomplianceImpl.IncomplianceElementList != null && Enumerable.SequenceEqual(this.IncomplianceElementList, vMHostProfileIncomplianceImpl.IncomplianceElementList))) && this.Uid == vMHostProfileIncomplianceImpl.Uid && ((this.ExtensionData == null && vMHostProfileIncomplianceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostProfileIncomplianceImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostProfileIncomplianceImpl)
        {
            return Equals(vMHostProfileIncomplianceImpl as VMHostProfileIncomplianceImpl);
        }

        public override int GetHashCode()
        {
            return (VMHostId + "_" + VMHost + "_" + VMHostUid + "_" + VMHostProfileId + "_" + VMHostProfile + "_" + VMHostProfileUid + "_" + IncomplianceElementList + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostProfileInputImpl : VMHostProfileInput, IEquatable<VMHostProfileInputImpl>
    {
        public string Key { get; set; }

        public VMHostProfileInputType Type { get; set; }

        public VMHost VMHost { get; set; }

        public VMHostProfile VMHostProfile { get; set; }

        public bool Equals(VMHostProfileInputImpl vMHostProfileInputImpl)
        {
            return (vMHostProfileInputImpl != null && this.Key == vMHostProfileInputImpl.Key && this.Type == vMHostProfileInputImpl.Type && ((this.VMHost == null && vMHostProfileInputImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostProfileInputImpl.VMHost))) && ((this.VMHostProfile == null && vMHostProfileInputImpl.VMHostProfile == null) || (this.VMHostProfile != null && this.VMHostProfile.Equals(vMHostProfileInputImpl.VMHostProfile))));
        }

        public override bool Equals(object vMHostProfileInputImpl)
        {
            return Equals(vMHostProfileInputImpl as VMHostProfileInputImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Type + "_" + VMHost + "_" + VMHostProfile).GetHashCode();
        }
    }

    public class VMHostProfileStorageDeviceConfigurationImpl : VMHostProfileStorageDeviceConfiguration, IEquatable<VMHostProfileStorageDeviceConfigurationImpl>
    {
        public string DeviceName { get; set; }

        public bool IsSharedClusterwide { get; set; }

        public bool IsPerenniallyReserved { get; set; }

        public bool DeviceStateOn { get; set; }

        public int QueueFullThreshold { get; set; }

        public int QueueFullSampleSize { get; set; }

        public int NumReqOutstanding { get; set; }

        public string PspName { get; set; }

        public string ConfigInfo { get; set; }

        public VMHostProfile HostProfile { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileStorageDeviceConfigurationImpl vMHostProfileStorageDeviceConfigurationImpl)
        {
            return (vMHostProfileStorageDeviceConfigurationImpl != null && this.DeviceName == vMHostProfileStorageDeviceConfigurationImpl.DeviceName && this.IsSharedClusterwide == vMHostProfileStorageDeviceConfigurationImpl.IsSharedClusterwide && this.IsPerenniallyReserved == vMHostProfileStorageDeviceConfigurationImpl.IsPerenniallyReserved && this.DeviceStateOn == vMHostProfileStorageDeviceConfigurationImpl.DeviceStateOn && this.QueueFullThreshold == vMHostProfileStorageDeviceConfigurationImpl.QueueFullThreshold && this.QueueFullSampleSize == vMHostProfileStorageDeviceConfigurationImpl.QueueFullSampleSize && this.NumReqOutstanding == vMHostProfileStorageDeviceConfigurationImpl.NumReqOutstanding && this.PspName == vMHostProfileStorageDeviceConfigurationImpl.PspName && this.ConfigInfo == vMHostProfileStorageDeviceConfigurationImpl.ConfigInfo && ((this.HostProfile == null && vMHostProfileStorageDeviceConfigurationImpl.HostProfile == null) || (this.HostProfile != null && this.HostProfile.Equals(vMHostProfileStorageDeviceConfigurationImpl.HostProfile))) && this.Uid == vMHostProfileStorageDeviceConfigurationImpl.Uid);
        }

        public override bool Equals(object vMHostProfileStorageDeviceConfigurationImpl)
        {
            return Equals(vMHostProfileStorageDeviceConfigurationImpl as VMHostProfileStorageDeviceConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (DeviceName + "_" + IsSharedClusterwide + "_" + IsPerenniallyReserved + "_" + DeviceStateOn + "_" + QueueFullThreshold + "_" + QueueFullSampleSize + "_" + NumReqOutstanding + "_" + PspName + "_" + ConfigInfo + "_" + HostProfile + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostProfileUserConfigurationImpl : VMHostProfileUserConfiguration, IEquatable<VMHostProfileUserConfigurationImpl>
    {
        public string UserName { get; set; }

        public string Role { get; set; }

        public string Description { get; set; }

        public VMHostProfilePasswordPolicy PasswordPolicy { get; set; }

        public SecureString Password { get; set; }

        public VMHostProfile HostProfile { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileUserConfigurationImpl vMHostProfileUserConfigurationImpl)
        {
            return (vMHostProfileUserConfigurationImpl != null && this.UserName == vMHostProfileUserConfigurationImpl.UserName && this.Role == vMHostProfileUserConfigurationImpl.Role && this.Description == vMHostProfileUserConfigurationImpl.Description && this.PasswordPolicy == vMHostProfileUserConfigurationImpl.PasswordPolicy && this.Password == vMHostProfileUserConfigurationImpl.Password && ((this.HostProfile == null && vMHostProfileUserConfigurationImpl.HostProfile == null) || (this.HostProfile != null && this.HostProfile.Equals(vMHostProfileUserConfigurationImpl.HostProfile))) && this.Uid == vMHostProfileUserConfigurationImpl.Uid);
        }

        public override bool Equals(object vMHostProfileUserConfigurationImpl)
        {
            return Equals(vMHostProfileUserConfigurationImpl as VMHostProfileUserConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (UserName + "_" + Role + "_" + Description + "_" + PasswordPolicy + "_" + Password + "_" + HostProfile + "_" + Uid).GetHashCode();
        }
    }

    public class VMHostProfileVmPortGroupConfigurationImpl : VMHostProfileVmPortGroupConfiguration, IEquatable<VMHostProfileVmPortGroupConfigurationImpl>
    {
        public string PortGroupName { get; set; }

        public string VSwitchName { get; set; }

        public int VLanId { get; set; }

        public VMHostProfile HostProfile { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMHostProfileVmPortGroupConfigurationImpl vMHostProfileVmPortGroupConfigurationImpl)
        {
            return (vMHostProfileVmPortGroupConfigurationImpl != null && this.PortGroupName == vMHostProfileVmPortGroupConfigurationImpl.PortGroupName && this.VSwitchName == vMHostProfileVmPortGroupConfigurationImpl.VSwitchName && this.VLanId == vMHostProfileVmPortGroupConfigurationImpl.VLanId && ((this.HostProfile == null && vMHostProfileVmPortGroupConfigurationImpl.HostProfile == null) || (this.HostProfile != null && this.HostProfile.Equals(vMHostProfileVmPortGroupConfigurationImpl.HostProfile))) && this.Uid == vMHostProfileVmPortGroupConfigurationImpl.Uid);
        }

        public override bool Equals(object vMHostProfileVmPortGroupConfigurationImpl)
        {
            return Equals(vMHostProfileVmPortGroupConfigurationImpl as VMHostProfileVmPortGroupConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (PortGroupName + "_" + VSwitchName + "_" + VLanId + "_" + HostProfile + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Storage
{
    using System;
    using System.Linq;
    using System.Runtime.Serialization;
    using VMware.Vim;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class FibreChannelHbaImpl : HbaImpl, FibreChannelHba, IEquatable<FibreChannelHbaImpl>
    {
        public long NodeWorldWideName { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Host.Storage.FibreChannelPortType PortType { get; set; }

        public long PortWorldWideName { get; set; }

        public long Speed { get; set; }

        public bool Equals(FibreChannelHbaImpl fibreChannelHbaImpl)
        {
            return (fibreChannelHbaImpl != null && this.NodeWorldWideName == fibreChannelHbaImpl.NodeWorldWideName && this.PortType == fibreChannelHbaImpl.PortType && this.PortWorldWideName == fibreChannelHbaImpl.PortWorldWideName && this.Speed == fibreChannelHbaImpl.Speed && this.Uid == fibreChannelHbaImpl.Uid && this.Device == fibreChannelHbaImpl.Device && this.Key == fibreChannelHbaImpl.Key && this.Model == fibreChannelHbaImpl.Model && this.Pci == fibreChannelHbaImpl.Pci && this.Driver == fibreChannelHbaImpl.Driver && this.Bus == fibreChannelHbaImpl.Bus && this.VMHostId == fibreChannelHbaImpl.VMHostId && ((this.VMHost == null && fibreChannelHbaImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(fibreChannelHbaImpl.VMHost))) && this.Status == fibreChannelHbaImpl.Status && this.Type == fibreChannelHbaImpl.Type && ((this.ScsiLunUids == null && fibreChannelHbaImpl.ScsiLunUids == null) || (this.ScsiLunUids != null && fibreChannelHbaImpl.ScsiLunUids != null && Enumerable.SequenceEqual(this.ScsiLunUids, fibreChannelHbaImpl.ScsiLunUids))) && this.Name == fibreChannelHbaImpl.Name && ((this.ExtensionData == null && fibreChannelHbaImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(fibreChannelHbaImpl.ExtensionData))));
        }

        public override bool Equals(object fibreChannelHbaImpl)
        {
            return Equals(fibreChannelHbaImpl as FibreChannelHbaImpl);
        }

        public override int GetHashCode()
        {
            return (NodeWorldWideName + "_" + PortType + "_" + PortWorldWideName + "_" + Speed + "_" + Uid + "_" + Device + "_" + Key + "_" + Model + "_" + Pci + "_" + Driver + "_" + Bus + "_" + VMHostId + "_" + VMHost + "_" + Status + "_" + Type + "_" + ScsiLunUids + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HbaImpl : Hba, IEquatable<HbaImpl>
    {
        public string Device { get; set; }

        public string Key { get; set; }

        public string Model { get; set; }

        public string Pci { get; set; }

        public string Driver { get; set; }

        public int Bus { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string Status { get; set; }

        public HbaType Type { get; set; }

        public string[] ScsiLunUids { get; set; }

        public string Uid { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(HbaImpl hbaImpl)
        {
            return (hbaImpl != null && this.Device == hbaImpl.Device && this.Key == hbaImpl.Key && this.Model == hbaImpl.Model && this.Pci == hbaImpl.Pci && this.Driver == hbaImpl.Driver && this.Bus == hbaImpl.Bus && this.VMHostId == hbaImpl.VMHostId && ((this.VMHost == null && hbaImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(hbaImpl.VMHost))) && this.Status == hbaImpl.Status && this.Type == hbaImpl.Type && ((this.ScsiLunUids == null && hbaImpl.ScsiLunUids == null) || (this.ScsiLunUids != null && hbaImpl.ScsiLunUids != null && Enumerable.SequenceEqual(this.ScsiLunUids, hbaImpl.ScsiLunUids))) && this.Uid == hbaImpl.Uid && this.Name == hbaImpl.Name && ((this.ExtensionData == null && hbaImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(hbaImpl.ExtensionData))));
        }

        public override bool Equals(object hbaImpl)
        {
            return Equals(hbaImpl as HbaImpl);
        }

        public override int GetHashCode()
        {
            return (Device + "_" + Key + "_" + Model + "_" + Pci + "_" + Driver + "_" + Bus + "_" + VMHostId + "_" + VMHost + "_" + Status + "_" + Type + "_" + ScsiLunUids + "_" + Uid + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class HostFileSystemVolumeInfoImpl : IEquatable<HostFileSystemVolumeInfoImpl>
    {
        public string AccessMode { get; set; }

        public string Path { get; set; }

        public long Capacity { get; set; }

        public decimal CapacityGB { get; set; }

        public string Name { get; set; }

        public string Type { get; set; }

        public string Uid { get; set; }

        public bool Equals(HostFileSystemVolumeInfoImpl hostFileSystemVolumeInfoImpl)
        {
            return (hostFileSystemVolumeInfoImpl != null && this.AccessMode == hostFileSystemVolumeInfoImpl.AccessMode && this.Path == hostFileSystemVolumeInfoImpl.Path && this.Capacity == hostFileSystemVolumeInfoImpl.Capacity && this.CapacityGB == hostFileSystemVolumeInfoImpl.CapacityGB && this.Name == hostFileSystemVolumeInfoImpl.Name && this.Type == hostFileSystemVolumeInfoImpl.Type && this.Uid == hostFileSystemVolumeInfoImpl.Uid);
        }

        public override bool Equals(object hostFileSystemVolumeInfoImpl)
        {
            return Equals(hostFileSystemVolumeInfoImpl as HostFileSystemVolumeInfoImpl);
        }

        public override int GetHashCode()
        {
            return (AccessMode + "_" + Path + "_" + Capacity + "_" + CapacityGB + "_" + Name + "_" + Type + "_" + Uid).GetHashCode();
        }
    }

    public class IScsiHbaAuthenticationCapabilityImpl : IScsiHbaAuthenticationCapability, IEquatable<IScsiHbaAuthenticationCapabilityImpl>
    {
        public bool Chap { get; set; }

        public bool Krb5 { get; set; }

        public bool? MutualChap { get; set; }

        public bool Spkm { get; set; }

        public bool Srp { get; set; }

        public bool? TargetChap { get; set; }

        public bool? TargetMutualChap { get; set; }

        public string Uid { get; set; }

        public bool Equals(IScsiHbaAuthenticationCapabilityImpl iScsiHbaAuthenticationCapabilityImpl)
        {
            return (iScsiHbaAuthenticationCapabilityImpl != null && this.Chap == iScsiHbaAuthenticationCapabilityImpl.Chap && this.Krb5 == iScsiHbaAuthenticationCapabilityImpl.Krb5 && this.MutualChap == iScsiHbaAuthenticationCapabilityImpl.MutualChap && this.Spkm == iScsiHbaAuthenticationCapabilityImpl.Spkm && this.Srp == iScsiHbaAuthenticationCapabilityImpl.Srp && this.TargetChap == iScsiHbaAuthenticationCapabilityImpl.TargetChap && this.TargetMutualChap == iScsiHbaAuthenticationCapabilityImpl.TargetMutualChap && this.Uid == iScsiHbaAuthenticationCapabilityImpl.Uid);
        }

        public override bool Equals(object iScsiHbaAuthenticationCapabilityImpl)
        {
            return Equals(iScsiHbaAuthenticationCapabilityImpl as IScsiHbaAuthenticationCapabilityImpl);
        }

        public override int GetHashCode()
        {
            return (Chap + "_" + Krb5 + "_" + MutualChap + "_" + Spkm + "_" + Srp + "_" + TargetChap + "_" + TargetMutualChap + "_" + Uid).GetHashCode();
        }
    }

    public class IScsiHbaAuthenticationPropertiesImpl : IScsiHbaAuthenticationProperties, IEquatable<IScsiHbaAuthenticationPropertiesImpl>
    {
        public ChapType? ChapType { get; set; }

        public bool? ChapInherited { get; set; }

        public string ChapName { get; set; }

        public bool? MutualChapEnabled { get; set; }

        public bool? MutualChapInherited { get; set; }

        public string MutualChapName { get; set; }

        public string Uid { get; set; }

        public bool Equals(IScsiHbaAuthenticationPropertiesImpl iScsiHbaAuthenticationPropertiesImpl)
        {
            return (iScsiHbaAuthenticationPropertiesImpl != null && this.ChapType == iScsiHbaAuthenticationPropertiesImpl.ChapType && this.ChapInherited == iScsiHbaAuthenticationPropertiesImpl.ChapInherited && this.ChapName == iScsiHbaAuthenticationPropertiesImpl.ChapName && this.MutualChapEnabled == iScsiHbaAuthenticationPropertiesImpl.MutualChapEnabled && this.MutualChapInherited == iScsiHbaAuthenticationPropertiesImpl.MutualChapInherited && this.MutualChapName == iScsiHbaAuthenticationPropertiesImpl.MutualChapName && this.Uid == iScsiHbaAuthenticationPropertiesImpl.Uid);
        }

        public override bool Equals(object iScsiHbaAuthenticationPropertiesImpl)
        {
            return Equals(iScsiHbaAuthenticationPropertiesImpl as IScsiHbaAuthenticationPropertiesImpl);
        }

        public override int GetHashCode()
        {
            return (ChapType + "_" + ChapInherited + "_" + ChapName + "_" + MutualChapEnabled + "_" + MutualChapInherited + "_" + MutualChapName + "_" + Uid).GetHashCode();
        }
    }

    public class IScsiHbaSendTargetImpl : IScsiHbaTarget, IEquatable<IScsiHbaSendTargetImpl>
    {
        public string VmHostId { get; set; }

        public string HostStorageSystemId { get; set; }

        public string Uid { get; set; }

        public string Address { get; set; }

        public int? Port { get; set; }

        public string IScsiHbaKey { get; set; }

        public IScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        public IScsiHbaTargetType Type { get; set; }

        public string IScsiHbaName { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(IScsiHbaSendTargetImpl iScsiHbaSendTargetImpl)
        {
            return (iScsiHbaSendTargetImpl != null && this.VmHostId == iScsiHbaSendTargetImpl.VmHostId && this.HostStorageSystemId == iScsiHbaSendTargetImpl.HostStorageSystemId && this.Uid == iScsiHbaSendTargetImpl.Uid && this.Address == iScsiHbaSendTargetImpl.Address && ((this.Port == null && iScsiHbaSendTargetImpl.Port == null) || (this.Port != null && this.Port.Equals(iScsiHbaSendTargetImpl.Port))) && this.IScsiHbaKey == iScsiHbaSendTargetImpl.IScsiHbaKey && ((this.AuthenticationProperties == null && iScsiHbaSendTargetImpl.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(iScsiHbaSendTargetImpl.AuthenticationProperties))) && this.Type == iScsiHbaSendTargetImpl.Type && this.IScsiHbaName == iScsiHbaSendTargetImpl.IScsiHbaName && this.Name == iScsiHbaSendTargetImpl.Name && ((this.ExtensionData == null && iScsiHbaSendTargetImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(iScsiHbaSendTargetImpl.ExtensionData))));
        }

        public override bool Equals(object iScsiHbaSendTargetImpl)
        {
            return Equals(iScsiHbaSendTargetImpl as IScsiHbaSendTargetImpl);
        }

        public override int GetHashCode()
        {
            return (VmHostId + "_" + HostStorageSystemId + "_" + Uid + "_" + Address + "_" + Port + "_" + IScsiHbaKey + "_" + AuthenticationProperties + "_" + Type + "_" + IScsiHbaName + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class IScsiHbaStaticTargetImpl : IScsiHbaTargetImpl, IScsiHbaStaticTarget, IEquatable<IScsiHbaStaticTargetImpl>
    {
        public string IScsiName { get; set; }

        public bool Equals(IScsiHbaStaticTargetImpl iScsiHbaStaticTargetImpl)
        {
            return (iScsiHbaStaticTargetImpl != null && this.IScsiName == iScsiHbaStaticTargetImpl.IScsiName && this.VmHostId == iScsiHbaStaticTargetImpl.VmHostId && this.HostStorageSystemId == iScsiHbaStaticTargetImpl.HostStorageSystemId && this.Uid == iScsiHbaStaticTargetImpl.Uid && this.Address == iScsiHbaStaticTargetImpl.Address && ((this.Port == null && iScsiHbaStaticTargetImpl.Port == null) || (this.Port != null && this.Port.Equals(iScsiHbaStaticTargetImpl.Port))) && this.IScsiHbaKey == iScsiHbaStaticTargetImpl.IScsiHbaKey && ((this.AuthenticationProperties == null && iScsiHbaStaticTargetImpl.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(iScsiHbaStaticTargetImpl.AuthenticationProperties))) && this.Type == iScsiHbaStaticTargetImpl.Type && this.IScsiHbaName == iScsiHbaStaticTargetImpl.IScsiHbaName && this.Name == iScsiHbaStaticTargetImpl.Name && ((this.ExtensionData == null && iScsiHbaStaticTargetImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(iScsiHbaStaticTargetImpl.ExtensionData))));
        }

        public override bool Equals(object iScsiHbaStaticTargetImpl)
        {
            return Equals(iScsiHbaStaticTargetImpl as IScsiHbaStaticTargetImpl);
        }

        public override int GetHashCode()
        {
            return (IScsiName + "_" + VmHostId + "_" + HostStorageSystemId + "_" + Uid + "_" + Address + "_" + Port + "_" + IScsiHbaKey + "_" + AuthenticationProperties + "_" + Type + "_" + IScsiHbaName + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class IScsiHbaTargetImpl : IScsiHbaTarget, IEquatable<IScsiHbaTargetImpl>
    {
        public string Uid { get; set; }

        public string Address { get; set; }

        public int? Port { get; set; }

        public string IScsiHbaKey { get; set; }

        public IScsiHbaAuthenticationProperties AuthenticationProperties { get; set; }

        public IScsiHbaTargetType Type { get; set; }

        public string IScsiHbaName { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public string VmHostId { get; set; }

        public string HostStorageSystemId { get; set; }

        public bool Equals(IScsiHbaTargetImpl iScsiHbaTargetImpl)
        {
            return (iScsiHbaTargetImpl != null && this.Address == iScsiHbaTargetImpl.Address && ((this.Port == null && iScsiHbaTargetImpl.Port == null) || (this.Port != null && this.Port.Equals(iScsiHbaTargetImpl.Port))) && this.IScsiHbaKey == iScsiHbaTargetImpl.IScsiHbaKey && ((this.AuthenticationProperties == null && iScsiHbaTargetImpl.AuthenticationProperties == null) || (this.AuthenticationProperties != null && this.AuthenticationProperties.Equals(iScsiHbaTargetImpl.AuthenticationProperties))) && this.Type == iScsiHbaTargetImpl.Type && this.Uid == iScsiHbaTargetImpl.Uid && this.Name == iScsiHbaTargetImpl.Name && this.IScsiHbaName == iScsiHbaTargetImpl.IScsiHbaName && ((this.ExtensionData == null && iScsiHbaTargetImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(iScsiHbaTargetImpl.ExtensionData))) && this.VmHostId == iScsiHbaTargetImpl.VmHostId && this.HostStorageSystemId == iScsiHbaTargetImpl.HostStorageSystemId);
        }

        public override bool Equals(object iScsiHbaTargetImpl)
        {
            return Equals(iScsiHbaTargetImpl as IScsiHbaTargetImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + Address + "_" + Port + "_" + IScsiHbaKey + "_" + AuthenticationProperties + "_" + Type + "_" + IScsiHbaName + "_" + Name + "_" + ExtensionData + "_" + VmHostId + "_" + HostStorageSystemId).GetHashCode();
        }
    }

    public class VMHostDiskImpl : VMHostDisk, IEquatable<VMHostDiskImpl>
    {
        public string Id { get; set; }

        public string DeviceName { get; set; }

        public long Cylinders { get; set; }

        public int Heads { get; set; }

        public int Sectors { get; set; }

        public long TotalSectors { get; set; }

        public VMHost VMHost { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi.ScsiLun ScsiLun { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostDiskImpl vMHostDiskImpl)
        {
            return (vMHostDiskImpl != null && this.Id == vMHostDiskImpl.Id && this.DeviceName == vMHostDiskImpl.DeviceName && this.Cylinders == vMHostDiskImpl.Cylinders && this.Heads == vMHostDiskImpl.Heads && this.Sectors == vMHostDiskImpl.Sectors && this.TotalSectors == vMHostDiskImpl.TotalSectors && ((this.VMHost == null && vMHostDiskImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostDiskImpl.VMHost))) && ((this.ScsiLun == null && vMHostDiskImpl.ScsiLun == null) || (this.ScsiLun != null && this.ScsiLun.Equals(vMHostDiskImpl.ScsiLun))) && this.Uid == vMHostDiskImpl.Uid && ((this.ExtensionData == null && vMHostDiskImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostDiskImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostDiskImpl)
        {
            return Equals(vMHostDiskImpl as VMHostDiskImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + DeviceName + "_" + Cylinders + "_" + Heads + "_" + Sectors + "_" + TotalSectors + "_" + VMHost + "_" + ScsiLun + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostDiskPartitionImpl : VMHostDiskPartition, IEquatable<VMHostDiskPartitionImpl>
    {
        public string Id { get; set; }

        public int PartitionNumber { get; set; }

        public sbyte Attributes { get; set; }

        public bool Logical { get; set; }

        public long StartSector { get; set; }

        public long EndSector { get; set; }

        public VMHostDiskPartitionType Type { get; set; }

        public VMHostDisk VMHostDisk { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostDiskPartitionImpl vMHostDiskPartitionImpl)
        {
            return (vMHostDiskPartitionImpl != null && this.Id == vMHostDiskPartitionImpl.Id && this.PartitionNumber == vMHostDiskPartitionImpl.PartitionNumber && this.Attributes == vMHostDiskPartitionImpl.Attributes && this.Logical == vMHostDiskPartitionImpl.Logical && this.StartSector == vMHostDiskPartitionImpl.StartSector && this.EndSector == vMHostDiskPartitionImpl.EndSector && this.Type == vMHostDiskPartitionImpl.Type && ((this.VMHostDisk == null && vMHostDiskPartitionImpl.VMHostDisk == null) || (this.VMHostDisk != null && this.VMHostDisk.Equals(vMHostDiskPartitionImpl.VMHostDisk))) && this.Uid == vMHostDiskPartitionImpl.Uid && ((this.ExtensionData == null && vMHostDiskPartitionImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostDiskPartitionImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostDiskPartitionImpl)
        {
            return Equals(vMHostDiskPartitionImpl as VMHostDiskPartitionImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + PartitionNumber + "_" + Attributes + "_" + Logical + "_" + StartSector + "_" + EndSector + "_" + Type + "_" + VMHostDisk + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostStorageInfoImpl : VMHostStorageInfo, IEquatable<VMHostStorageInfoImpl>
    {
        public VMHost VMHost { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Host.Storage.HostFileSystemVolumeInfo[] FileSystemVolumeInfo { get; set; }

        public bool SoftwareIScsiEnabled { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi.ScsiLun[] ScsiLun { get; set; }

        public string Id { get; set; }

        public string VMHostId { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public string Name { get; set; }

        public bool Equals(VMHostStorageInfoImpl vMHostStorageInfoImpl)
        {
            return (vMHostStorageInfoImpl != null && ((this.VMHost == null && vMHostStorageInfoImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(vMHostStorageInfoImpl.VMHost))) && ((this.FileSystemVolumeInfo == null && vMHostStorageInfoImpl.FileSystemVolumeInfo == null) || (this.FileSystemVolumeInfo != null && vMHostStorageInfoImpl.FileSystemVolumeInfo != null && Enumerable.SequenceEqual(this.FileSystemVolumeInfo, vMHostStorageInfoImpl.FileSystemVolumeInfo))) && this.SoftwareIScsiEnabled == vMHostStorageInfoImpl.SoftwareIScsiEnabled && ((this.ScsiLun == null && vMHostStorageInfoImpl.ScsiLun == null) || (this.ScsiLun != null && vMHostStorageInfoImpl.ScsiLun != null && Enumerable.SequenceEqual(this.ScsiLun, vMHostStorageInfoImpl.ScsiLun))) && this.Id == vMHostStorageInfoImpl.Id && this.VMHostId == vMHostStorageInfoImpl.VMHostId && this.Uid == vMHostStorageInfoImpl.Uid && ((this.ExtensionData == null && vMHostStorageInfoImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostStorageInfoImpl.ExtensionData))) && this.Name == vMHostStorageInfoImpl.Name);
        }

        public override bool Equals(object vMHostStorageInfoImpl)
        {
            return Equals(vMHostStorageInfoImpl as VMHostStorageInfoImpl);
        }

        public override int GetHashCode()
        {
            return (VMHost + "_" + FileSystemVolumeInfo + "_" + SoftwareIScsiEnabled + "_" + ScsiLun + "_" + Id + "_" + VMHostId + "_" + Uid + "_" + ExtensionData + "_" + Name).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.Storage.Scsi
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage.Scsi;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class ScsiLunImpl : ScsiLun, IEquatable<ScsiLunImpl>
    {
        public string Id { get; set; }

        public string CanonicalName { get; set; }

        public string RuntimeName { get; set; }

        public string Key { get; set; }

        public string LunType { get; set; }

        public string Model { get; set; }

        public string SerialNumber { get; set; }

        public string Vendor { get; set; }

        public string ConsoleDeviceName { get; set; }

        public long? CapacityMB { get; set; }

        public decimal? CapacityGB { get; set; }

        public ScsiLunMultipathPolicy MultipathPolicy { get; set; }

        public int? CommandsToSwitchPath { get; set; }

        public int? BlocksToSwitchPath { get; set; }

        public string HostId { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public string Uid { get; set; }

        public bool IsLocal { get; set; }

        public bool? IsSsd { get; set; }

        public ScsiDiskVsanStatus VsanStatus { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(ScsiLunImpl scsiLunImpl)
        {
            return (scsiLunImpl != null && this.Id == scsiLunImpl.Id && this.CanonicalName == scsiLunImpl.CanonicalName && this.RuntimeName == scsiLunImpl.RuntimeName && this.Key == scsiLunImpl.Key && this.LunType == scsiLunImpl.LunType && this.Model == scsiLunImpl.Model && this.SerialNumber == scsiLunImpl.SerialNumber && this.Vendor == scsiLunImpl.Vendor && this.ConsoleDeviceName == scsiLunImpl.ConsoleDeviceName && ((this.CapacityMB == null && scsiLunImpl.CapacityMB == null) || (this.CapacityMB != null && this.CapacityMB.Equals(scsiLunImpl.CapacityMB))) && ((this.CapacityGB == null && scsiLunImpl.CapacityGB == null) || (this.CapacityGB != null && this.CapacityGB.Equals(scsiLunImpl.CapacityGB))) && this.MultipathPolicy == scsiLunImpl.MultipathPolicy && ((this.CommandsToSwitchPath == null && scsiLunImpl.CommandsToSwitchPath == null) || (this.CommandsToSwitchPath != null && this.CommandsToSwitchPath.Equals(scsiLunImpl.CommandsToSwitchPath))) && ((this.BlocksToSwitchPath == null && scsiLunImpl.BlocksToSwitchPath == null) || (this.BlocksToSwitchPath != null && this.BlocksToSwitchPath.Equals(scsiLunImpl.BlocksToSwitchPath))) && this.HostId == scsiLunImpl.HostId && this.VMHostId == scsiLunImpl.VMHostId && ((this.VMHost == null && scsiLunImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(scsiLunImpl.VMHost))) && this.Uid == scsiLunImpl.Uid && this.IsLocal == scsiLunImpl.IsLocal && ((this.IsSsd == null && scsiLunImpl.IsSsd == null) || (this.IsSsd != null && this.IsSsd.Equals(scsiLunImpl.IsSsd))) && this.VsanStatus == scsiLunImpl.VsanStatus && ((this.ExtensionData == null && scsiLunImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(scsiLunImpl.ExtensionData))));
        }

        public override bool Equals(object scsiLunImpl)
        {
            return Equals(scsiLunImpl as ScsiLunImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + CanonicalName + "_" + RuntimeName + "_" + Key + "_" + LunType + "_" + Model + "_" + SerialNumber + "_" + Vendor + "_" + ConsoleDeviceName + "_" + CapacityMB + "_" + CapacityGB + "_" + MultipathPolicy + "_" + CommandsToSwitchPath + "_" + BlocksToSwitchPath + "_" + HostId + "_" + VMHostId + "_" + VMHost + "_" + Uid + "_" + IsLocal + "_" + IsSsd + "_" + VsanStatus + "_" + ExtensionData).GetHashCode();
        }
    }

    public class ScsiLunPathImpl : ScsiLunPath, IEquatable<ScsiLunPathImpl>
    {
        public string Name { get; set; }

        public string ScsiLunId { get; set; }

        public ScsiLun ScsiLun { get; set; }

        public string LunPath { get; set; }

        public string SanId { get; set; }

        public ScsiLunPathState State { get; set; }

        public bool Preferred { get; set; }

        public string ScsiCanonicalName { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(ScsiLunPathImpl scsiLunPathImpl)
        {
            return (scsiLunPathImpl != null && this.Name == scsiLunPathImpl.Name && this.ScsiLunId == scsiLunPathImpl.ScsiLunId && ((this.ScsiLun == null && scsiLunPathImpl.ScsiLun == null) || (this.ScsiLun != null && this.ScsiLun.Equals(scsiLunPathImpl.ScsiLun))) && this.LunPath == scsiLunPathImpl.LunPath && this.SanId == scsiLunPathImpl.SanId && this.State == scsiLunPathImpl.State && this.Preferred == scsiLunPathImpl.Preferred && this.ScsiCanonicalName == scsiLunPathImpl.ScsiCanonicalName && this.Uid == scsiLunPathImpl.Uid && ((this.ExtensionData == null && scsiLunPathImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(scsiLunPathImpl.ExtensionData))));
        }

        public override bool Equals(object scsiLunPathImpl)
        {
            return Equals(scsiLunPathImpl as ScsiLunPathImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + ScsiLunId + "_" + ScsiLun + "_" + LunPath + "_" + SanId + "_" + State + "_" + Preferred + "_" + ScsiCanonicalName + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Host.VMStartPolicy
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Host.VMStartPolicy;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;

    public class VMHostStartPolicyImpl : VMHostStartPolicy, IEquatable<VMHostStartPolicyImpl>
    {
        public string VMHostId { get; set; }

        public string VMHostUid { get; set; }

        public bool Enabled { get; set; }

        public int StartDelay { get; set; }

        public VmStopAction StopAction { get; set; }

        public int StopDelay { get; set; }

        public bool WaitForHeartbeat { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMHostStartPolicyImpl vMHostStartPolicyImpl)
        {
            return (vMHostStartPolicyImpl != null && this.VMHostId == vMHostStartPolicyImpl.VMHostId && this.VMHostUid == vMHostStartPolicyImpl.VMHostUid && this.Enabled == vMHostStartPolicyImpl.Enabled && this.StartDelay == vMHostStartPolicyImpl.StartDelay && this.StopAction == vMHostStartPolicyImpl.StopAction && this.StopDelay == vMHostStartPolicyImpl.StopDelay && this.WaitForHeartbeat == vMHostStartPolicyImpl.WaitForHeartbeat && this.Uid == vMHostStartPolicyImpl.Uid && ((this.ExtensionData == null && vMHostStartPolicyImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostStartPolicyImpl.ExtensionData))));
        }

        public override bool Equals(object vMHostStartPolicyImpl)
        {
            return Equals(vMHostStartPolicyImpl as VMHostStartPolicyImpl);
        }

        public override int GetHashCode()
        {
            return (VMHostId + "_" + VMHostUid + "_" + Enabled + "_" + StartDelay + "_" + StopAction + "_" + StopDelay + "_" + WaitForHeartbeat + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMStartPolicyImpl : VMStartPolicy, IEquatable<VMStartPolicyImpl>
    {
        public string VirtualMachineId { get; set; }

        public string VMId { get; set; }

        public VirtualMachine VM { get; set; }

        public string VirtualMachineName { get; set; }

        public string VmHostId { get; set; }

        public VmStartAction StartAction { get; set; }

        public int StartDelay { get; set; }

        public int? StartOrder { get; set; }

        public VmStopAction StopAction { get; set; }

        public int StopDelay { get; set; }

        public bool WaitForHeartbeat { get; set; }

        public bool IsStartDelayInherited { get; set; }

        public bool IsStopActionInherited { get; set; }

        public bool IsStopDelayInherited { get; set; }

        public bool IsWaitForHeartbeatInherited { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMStartPolicyImpl vMStartPolicyImpl)
        {
            return (vMStartPolicyImpl != null && this.VirtualMachineId == vMStartPolicyImpl.VirtualMachineId && this.VMId == vMStartPolicyImpl.VMId && ((this.VM == null && vMStartPolicyImpl.VM == null) || (this.VM != null && this.VM.Equals(vMStartPolicyImpl.VM))) && this.VirtualMachineName == vMStartPolicyImpl.VirtualMachineName && this.VmHostId == vMStartPolicyImpl.VmHostId && this.StartAction == vMStartPolicyImpl.StartAction && this.StartDelay == vMStartPolicyImpl.StartDelay && ((this.StartOrder == null && vMStartPolicyImpl.StartOrder == null) || (this.StartOrder != null && this.StartOrder.Equals(vMStartPolicyImpl.StartOrder))) && this.StopAction == vMStartPolicyImpl.StopAction && this.StopDelay == vMStartPolicyImpl.StopDelay && this.WaitForHeartbeat == vMStartPolicyImpl.WaitForHeartbeat && this.IsStartDelayInherited == vMStartPolicyImpl.IsStartDelayInherited && this.IsStopActionInherited == vMStartPolicyImpl.IsStopActionInherited && this.IsStopDelayInherited == vMStartPolicyImpl.IsStopDelayInherited && this.IsWaitForHeartbeatInherited == vMStartPolicyImpl.IsWaitForHeartbeatInherited && this.Uid == vMStartPolicyImpl.Uid && ((this.ExtensionData == null && vMStartPolicyImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMStartPolicyImpl.ExtensionData))));
        }

        public override bool Equals(object vMStartPolicyImpl)
        {
            return Equals(vMStartPolicyImpl as VMStartPolicyImpl);
        }

        public override int GetHashCode()
        {
            return (VirtualMachineId + "_" + VMId + "_" + VM + "_" + VirtualMachineName + "_" + VmHostId + "_" + StartAction + "_" + StartDelay + "_" + StartOrder + "_" + StopAction + "_" + StopDelay + "_" + WaitForHeartbeat + "_" + IsStartDelayInherited + "_" + IsStopActionInherited + "_" + IsStopDelayInherited + "_" + IsWaitForHeartbeatInherited + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Inventory
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using VMware.Vim;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement;
    using VMware.VimAutomation.ViCore.Types.V1.Host;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Networking;
    using VMware.VimAutomation.ViCore.Types.V1.Host.Storage;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VM;
    using VMware.VimAutomation.ViCore.Types.V1.VM.Guest;
    using VMware.VimAutomation.ViCore.Types.V1.Vsan;

    public class ClusterImpl : ComputeResourceImpl, Cluster, IEquatable<ClusterImpl>
    {
        public bool? VsanEnabled { get; set; }

        public VsanDiskClaimMode? VsanDiskClaimMode { get; set; }

        public int? HATotalSlots { get; set; }

        public int? HAUsedSlots { get; set; }

        public int? HAAvailableSlots { get; set; }

        public int? HASlotCpuMHz { get; set; }

        public int? HASlotMemoryMb { get; set; }

        public decimal? HASlotMemoryGB { get; set; }

        public int? HASlotNumVCpus { get; set; }

        public string ParentId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder ParentFolder { get; set; }

        public bool HAEnabled { get; set; }

        public bool HAAdmissionControlEnabled { get; set; }

        public int HAFailoverLevel { get; set; }

        public HARestartPriority? HARestartPriority { get; set; }

        public HAIsolationResponse? HAIsolationResponse { get; set; }

        public VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        public bool DrsEnabled { get; set; }

        public DrsMode DrsMode { get; set; }

        public DrsAutomationLevel DrsAutomationLevel { get; set; }

        public string EVCMode { get; set; }

        public bool Equals(ClusterImpl clusterImpl)
        {
            return (clusterImpl != null && ((this.VsanEnabled == null && clusterImpl.VsanEnabled == null) || (this.VsanEnabled != null && this.VsanEnabled.Equals(clusterImpl.VsanEnabled))) && ((this.VsanDiskClaimMode == null && clusterImpl.VsanDiskClaimMode == null) || (this.VsanDiskClaimMode != null && this.VsanDiskClaimMode.Equals(clusterImpl.VsanDiskClaimMode))) && ((this.HATotalSlots == null && clusterImpl.HATotalSlots == null) || (this.HATotalSlots != null && this.HATotalSlots.Equals(clusterImpl.HATotalSlots))) && ((this.HAUsedSlots == null && clusterImpl.HAUsedSlots == null) || (this.HAUsedSlots != null && this.HAUsedSlots.Equals(clusterImpl.HAUsedSlots))) && ((this.HAAvailableSlots == null && clusterImpl.HAAvailableSlots == null) || (this.HAAvailableSlots != null && this.HAAvailableSlots.Equals(clusterImpl.HAAvailableSlots))) && ((this.HASlotCpuMHz == null && clusterImpl.HASlotCpuMHz == null) || (this.HASlotCpuMHz != null && this.HASlotCpuMHz.Equals(clusterImpl.HASlotCpuMHz))) && ((this.HASlotMemoryMb == null && clusterImpl.HASlotMemoryMb == null) || (this.HASlotMemoryMb != null && this.HASlotMemoryMb.Equals(clusterImpl.HASlotMemoryMb))) && ((this.HASlotMemoryGB == null && clusterImpl.HASlotMemoryGB == null) || (this.HASlotMemoryGB != null && this.HASlotMemoryGB.Equals(clusterImpl.HASlotMemoryGB))) && ((this.HASlotNumVCpus == null && clusterImpl.HASlotNumVCpus == null) || (this.HASlotNumVCpus != null && this.HASlotNumVCpus.Equals(clusterImpl.HASlotNumVCpus))) && this.ParentId == clusterImpl.ParentId && ((this.ParentFolder == null && clusterImpl.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(clusterImpl.ParentFolder))) && this.HAEnabled == clusterImpl.HAEnabled && this.HAAdmissionControlEnabled == clusterImpl.HAAdmissionControlEnabled && this.HAFailoverLevel == clusterImpl.HAFailoverLevel && ((this.HARestartPriority == null && clusterImpl.HARestartPriority == null) || (this.HARestartPriority != null && this.HARestartPriority.Equals(clusterImpl.HARestartPriority))) && ((this.HAIsolationResponse == null && clusterImpl.HAIsolationResponse == null) || (this.HAIsolationResponse != null && this.HAIsolationResponse.Equals(clusterImpl.HAIsolationResponse))) && ((this.VMSwapfilePolicy == null && clusterImpl.VMSwapfilePolicy == null) || (this.VMSwapfilePolicy != null && this.VMSwapfilePolicy.Equals(clusterImpl.VMSwapfilePolicy))) && this.DrsEnabled == clusterImpl.DrsEnabled && this.DrsMode == clusterImpl.DrsMode && this.DrsAutomationLevel == clusterImpl.DrsAutomationLevel && this.EVCMode == clusterImpl.EVCMode && this.Id == clusterImpl.Id && this.Name == clusterImpl.Name && this.Uid == clusterImpl.Uid && ((this.ExtensionData == null && clusterImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(clusterImpl.ExtensionData))));
        }

        public override bool Equals(object clusterImpl)
        {
            return Equals(clusterImpl as ClusterImpl);
        }

        public override int GetHashCode()
        {
            return (VsanEnabled + "_" + VsanDiskClaimMode + "_" + HATotalSlots + "_" + HAUsedSlots + "_" + HAAvailableSlots + "_" + HASlotCpuMHz + "_" + HASlotMemoryMb + "_" + HASlotMemoryGB + "_" + HASlotNumVCpus + "_" + ParentId + "_" + ParentFolder + "_" + HAEnabled + "_" + HAAdmissionControlEnabled + "_" + HAFailoverLevel + "_" + HARestartPriority + "_" + HAIsolationResponse + "_" + VMSwapfilePolicy + "_" + DrsEnabled + "_" + DrsMode + "_" + DrsAutomationLevel + "_" + EVCMode + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class ComputeResourceImpl : InventoryItemImpl, InventoryItem, IEquatable<ComputeResourceImpl>
    {
        public bool Equals(ComputeResourceImpl computeResourceImpl)
        {
            return (computeResourceImpl != null && this.Id == computeResourceImpl.Id && this.Name == computeResourceImpl.Name && this.Uid == computeResourceImpl.Uid && ((this.ExtensionData == null && computeResourceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(computeResourceImpl.ExtensionData))));
        }

        public override bool Equals(object computeResourceImpl)
        {
            return Equals(computeResourceImpl as ComputeResourceImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class DatacenterImpl : InventoryItemImpl, VMware.VimAutomation.ViCore.Types.V1.Inventory.Datacenter, IEquatable<DatacenterImpl>
    {
        public string ParentFolderId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder ParentFolder { get; set; }

        public string DatastoreFolderId { get; set; }

        public bool Equals(DatacenterImpl datacenterImpl)
        {
            return (datacenterImpl != null && this.ParentFolderId == datacenterImpl.ParentFolderId && ((this.ParentFolder == null && datacenterImpl.ParentFolder == null) || (this.ParentFolder != null && this.ParentFolder.Equals(datacenterImpl.ParentFolder))) && this.Id == datacenterImpl.Id && this.Name == datacenterImpl.Name && this.Uid == datacenterImpl.Uid && ((this.ExtensionData == null && datacenterImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(datacenterImpl.ExtensionData))) && this.DatastoreFolderId == datacenterImpl.DatastoreFolderId);
        }

        public override bool Equals(object datacenterImpl)
        {
            return Equals(datacenterImpl as DatacenterImpl);
        }

        public override int GetHashCode()
        {
            return (ParentFolderId + "_" + ParentFolder + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData + "_" + DatastoreFolderId).GetHashCode();
        }
    }

    public class FolderImpl : InventoryItemImpl, VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder, IEquatable<FolderImpl>
    {
        public string ParentId { get; set; }

        public InventoryItem Parent { get; set; }

        public bool IsChildTypeVm { get; set; }

        public bool IsChildTypeComputeResource { get; set; }

        public bool IsChildTypeDatacenter { get; set; }

        public bool IsChildTypeDatastore { get; set; }

        public FolderType Type { get; set; }

        public bool Equals(FolderImpl folderImpl)
        {
            return (folderImpl != null && this.ParentId == folderImpl.ParentId && ((this.Parent == null && folderImpl.Parent == null) || (this.Parent != null && this.Parent.Equals(folderImpl.Parent))) && this.IsChildTypeVm == folderImpl.IsChildTypeVm && this.IsChildTypeComputeResource == folderImpl.IsChildTypeComputeResource && this.IsChildTypeDatacenter == folderImpl.IsChildTypeDatacenter && this.IsChildTypeDatastore == folderImpl.IsChildTypeDatastore && this.Type == folderImpl.Type && this.Id == folderImpl.Id && this.Name == folderImpl.Name && this.Uid == folderImpl.Uid && ((this.ExtensionData == null && folderImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(folderImpl.ExtensionData))));
        }

        public override bool Equals(object folderImpl)
        {
            return Equals(folderImpl as FolderImpl);
        }

        public override int GetHashCode()
        {
            return (ParentId + "_" + Parent + "_" + IsChildTypeVm + "_" + IsChildTypeComputeResource + "_" + IsChildTypeDatacenter + "_" + IsChildTypeDatastore + "_" + Type + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public abstract class InventoryItemImpl : VIObjectImpl, InventoryItem, IEquatable<InventoryItemImpl>
    {
        public IDictionary<string, string> CustomFields { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(InventoryItemImpl inventoryItemImpl)
        {
            return (inventoryItemImpl != null && this.Name == inventoryItemImpl.Name && ((this.CustomFields == null && inventoryItemImpl.CustomFields == null) || (this.CustomFields != null && inventoryItemImpl.CustomFields != null && Enumerable.SequenceEqual(this.CustomFields, inventoryItemImpl.CustomFields))) && ((this.ExtensionData == null && inventoryItemImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(inventoryItemImpl.ExtensionData))) && this.Id == inventoryItemImpl.Id && this.Uid == inventoryItemImpl.Uid);
        }

        public override bool Equals(object inventoryItemImpl)
        {
            return Equals(inventoryItemImpl as InventoryItemImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + CustomFields + "_" + ExtensionData + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class ResourcePoolImpl : InventoryItemImpl, VMware.VimAutomation.ViCore.Types.V1.Inventory.ResourcePool, IEquatable<ResourcePoolImpl>
    {
        public string ParentId { get; set; }

        public InventoryItem Parent { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel CpuSharesLevel { get; set; }

        public int NumCpuShares { get; set; }

        public long CpuReservationMHz { get; set; }

        public bool CpuExpandableReservation { get; set; }

        public long CpuLimitMHz { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel MemSharesLevel { get; set; }

        public int NumMemShares { get; set; }

        public decimal MemReservationMB { get; set; }

        public decimal MemReservationGB { get; set; }

        public bool MemExpandableReservation { get; set; }

        public decimal MemLimitMB { get; set; }

        public decimal MemLimitGB { get; set; }

        public bool Equals(ResourcePoolImpl resourcePoolImpl)
        {
            return (resourcePoolImpl != null && this.ParentId == resourcePoolImpl.ParentId && ((this.Parent == null && resourcePoolImpl.Parent == null) || (this.Parent != null && this.Parent.Equals(resourcePoolImpl.Parent))) && this.CpuSharesLevel == resourcePoolImpl.CpuSharesLevel && this.NumCpuShares == resourcePoolImpl.NumCpuShares && this.CpuReservationMHz == resourcePoolImpl.CpuReservationMHz && this.CpuExpandableReservation == resourcePoolImpl.CpuExpandableReservation && this.CpuLimitMHz == resourcePoolImpl.CpuLimitMHz && this.MemSharesLevel == resourcePoolImpl.MemSharesLevel && this.NumMemShares == resourcePoolImpl.NumMemShares && this.MemReservationMB == resourcePoolImpl.MemReservationMB && this.MemReservationGB == resourcePoolImpl.MemReservationGB && this.MemExpandableReservation == resourcePoolImpl.MemExpandableReservation && this.MemLimitMB == resourcePoolImpl.MemLimitMB && this.MemLimitGB == resourcePoolImpl.MemLimitGB && this.Id == resourcePoolImpl.Id && this.Name == resourcePoolImpl.Name && this.Uid == resourcePoolImpl.Uid && ((this.ExtensionData == null && resourcePoolImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(resourcePoolImpl.ExtensionData))));
        }

        public override bool Equals(object resourcePoolImpl)
        {
            return Equals(resourcePoolImpl as ResourcePoolImpl);
        }

        public override int GetHashCode()
        {
            return (ParentId + "_" + Parent + "_" + CpuSharesLevel + "_" + NumCpuShares + "_" + CpuReservationMHz + "_" + CpuExpandableReservation + "_" + CpuLimitMHz + "_" + MemSharesLevel + "_" + NumMemShares + "_" + MemReservationMB + "_" + MemReservationGB + "_" + MemExpandableReservation + "_" + MemLimitMB + "_" + MemLimitGB + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class TemplateImpl : InventoryItemImpl, Template, IEquatable<TemplateImpl>
    {
        public string FolderId { get; set; }

        public string[] DatastoreIdList { get; set; }

        public string HostId { get; set; }

        public bool Equals(TemplateImpl templateImpl)
        {
            return (templateImpl != null && this.FolderId == templateImpl.FolderId && ((this.DatastoreIdList == null && templateImpl.DatastoreIdList == null) || (this.DatastoreIdList != null && templateImpl.DatastoreIdList != null && Enumerable.SequenceEqual(this.DatastoreIdList, templateImpl.DatastoreIdList))) && this.Id == templateImpl.Id && this.Name == templateImpl.Name && this.Uid == templateImpl.Uid && ((this.ExtensionData == null && templateImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(templateImpl.ExtensionData))) && this.HostId == templateImpl.HostId);
        }

        public override bool Equals(object templateImpl)
        {
            return Equals(templateImpl as TemplateImpl);
        }

        public override int GetHashCode()
        {
            return (FolderId + "_" + DatastoreIdList + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData + "_" + HostId).GetHashCode();
        }
    }

    public class VAppImpl : InventoryItemImpl, VApp, IEquatable<VAppImpl>
    {
        public string ParentId { get; set; }

        public InventoryItem Parent { get; set; }

        public VAppStatus Status { get; set; }

        public int NumCpuShares { get; set; }

        public long CpuReservationMhz { get; set; }

        public bool CpuExpandableReservation { get; set; }

        public long CpuLimitMhz { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel CpuSharesLevel { get; set; }

        public int NumMemShares { get; set; }

        public long MemReservationMB { get; set; }

        public decimal MemReservationGB { get; set; }

        public bool MemExpandableReservation { get; set; }

        public long MemLimitMB { get; set; }

        public decimal MemLimitGB { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel MemSharesLevel { get; set; }

        public ManagedObjectReference ObtainExportLease()
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(VAppImpl vAppImpl)
        {
            return (vAppImpl != null && this.ParentId == vAppImpl.ParentId && ((this.Parent == null && vAppImpl.Parent == null) || (this.Parent != null && this.Parent.Equals(vAppImpl.Parent))) && this.Status == vAppImpl.Status && this.NumCpuShares == vAppImpl.NumCpuShares && this.CpuReservationMhz == vAppImpl.CpuReservationMhz && this.CpuExpandableReservation == vAppImpl.CpuExpandableReservation && this.CpuLimitMhz == vAppImpl.CpuLimitMhz && this.CpuSharesLevel == vAppImpl.CpuSharesLevel && this.NumMemShares == vAppImpl.NumMemShares && this.MemReservationMB == vAppImpl.MemReservationMB && this.MemReservationGB == vAppImpl.MemReservationGB && this.MemExpandableReservation == vAppImpl.MemExpandableReservation && this.MemLimitMB == vAppImpl.MemLimitMB && this.MemLimitGB == vAppImpl.MemLimitGB && this.MemSharesLevel == vAppImpl.MemSharesLevel && this.Id == vAppImpl.Id && this.Name == vAppImpl.Name && this.Uid == vAppImpl.Uid && ((this.ExtensionData == null && vAppImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vAppImpl.ExtensionData))));
        }

        public override bool Equals(object vAppImpl)
        {
            return Equals(vAppImpl as VAppImpl);
        }

        public override int GetHashCode()
        {
            return (ParentId + "_" + Parent + "_" + Status + "_" + NumCpuShares + "_" + CpuReservationMhz + "_" + CpuExpandableReservation + "_" + CpuLimitMhz + "_" + CpuSharesLevel + "_" + NumMemShares + "_" + MemReservationMB + "_" + MemReservationGB + "_" + MemExpandableReservation + "_" + MemLimitMB + "_" + MemLimitGB + "_" + MemSharesLevel + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VirtualMachineImpl : InventoryItemImpl, VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine, IEquatable<VirtualMachineImpl>
    {
        public PowerState PowerState { get; set; }

        public VMVersion Version { get; set; }

        public string HardwareVersion { get; set; }

        public string Notes { get; set; }

        public VMGuest Guest { get; set; }

        public int NumCpu { get; set; }

        public int CoresPerSocket { get; set; }

        public decimal MemoryMB { get; set; }

        public decimal MemoryGB { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public VApp VApp { get; set; }

        public string FolderId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder Folder { get; set; }

        public string ResourcePoolId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.ResourcePool ResourcePool { get; set; }

        public string PersistentId { get; set; }

        public decimal UsedSpaceGB { get; set; }

        public decimal ProvisionedSpaceGB { get; set; }

        public string[] DatastoreIdList { get; set; }

        public HARestartPriority? HARestartPriority { get; set; }

        public HAIsolationResponse? HAIsolationResponse { get; set; }

        public DrsAutomationLevel? DrsAutomationLevel { get; set; }

        public VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        public VMResourceConfiguration VMResourceConfiguration { get; set; }

        public string GuestId { get; set; }

        public ManagedObjectReference ObtainExportLease()
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(VirtualMachineImpl virtualMachineImpl)
        {
            return (virtualMachineImpl != null && this.PowerState == virtualMachineImpl.PowerState && this.Version == virtualMachineImpl.Version && this.HardwareVersion == virtualMachineImpl.HardwareVersion && this.Notes == virtualMachineImpl.Notes && ((this.Guest == null && virtualMachineImpl.Guest == null) || (this.Guest != null && this.Guest.Equals(virtualMachineImpl.Guest))) && this.NumCpu == virtualMachineImpl.NumCpu && this.CoresPerSocket == virtualMachineImpl.CoresPerSocket && this.MemoryMB == virtualMachineImpl.MemoryMB && this.MemoryGB == virtualMachineImpl.MemoryGB && this.VMHostId == virtualMachineImpl.VMHostId && ((this.VMHost == null && virtualMachineImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(virtualMachineImpl.VMHost))) && ((this.VApp == null && virtualMachineImpl.VApp == null) || (this.VApp != null && this.VApp.Equals(virtualMachineImpl.VApp))) && this.FolderId == virtualMachineImpl.FolderId && ((this.Folder == null && virtualMachineImpl.Folder == null) || (this.Folder != null && this.Folder.Equals(virtualMachineImpl.Folder))) && this.ResourcePoolId == virtualMachineImpl.ResourcePoolId && ((this.ResourcePool == null && virtualMachineImpl.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(virtualMachineImpl.ResourcePool))) && this.PersistentId == virtualMachineImpl.PersistentId && this.UsedSpaceGB == virtualMachineImpl.UsedSpaceGB && this.ProvisionedSpaceGB == virtualMachineImpl.ProvisionedSpaceGB && ((this.DatastoreIdList == null && virtualMachineImpl.DatastoreIdList == null) || (this.DatastoreIdList != null && virtualMachineImpl.DatastoreIdList != null && Enumerable.SequenceEqual(this.DatastoreIdList, virtualMachineImpl.DatastoreIdList))) && ((this.HARestartPriority == null && virtualMachineImpl.HARestartPriority == null) || (this.HARestartPriority != null && this.HARestartPriority.Equals(virtualMachineImpl.HARestartPriority))) && ((this.HAIsolationResponse == null && virtualMachineImpl.HAIsolationResponse == null) || (this.HAIsolationResponse != null && this.HAIsolationResponse.Equals(virtualMachineImpl.HAIsolationResponse))) && ((this.DrsAutomationLevel == null && virtualMachineImpl.DrsAutomationLevel == null) || (this.DrsAutomationLevel != null && this.DrsAutomationLevel.Equals(virtualMachineImpl.DrsAutomationLevel))) && ((this.VMSwapfilePolicy == null && virtualMachineImpl.VMSwapfilePolicy == null) || (this.VMSwapfilePolicy != null && this.VMSwapfilePolicy.Equals(virtualMachineImpl.VMSwapfilePolicy))) && ((this.VMResourceConfiguration == null && virtualMachineImpl.VMResourceConfiguration == null) || (this.VMResourceConfiguration != null && this.VMResourceConfiguration.Equals(virtualMachineImpl.VMResourceConfiguration))) && this.GuestId == virtualMachineImpl.GuestId && this.Id == virtualMachineImpl.Id && this.Name == virtualMachineImpl.Name && this.Uid == virtualMachineImpl.Uid && ((this.ExtensionData == null && virtualMachineImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(virtualMachineImpl.ExtensionData))));
        }

        public override bool Equals(object virtualMachineImpl)
        {
            return Equals(virtualMachineImpl as VirtualMachineImpl);
        }

        public override int GetHashCode()
        {
            return (PowerState + "_" + Version + "_" + HardwareVersion + "_" + Notes + "_" + Guest + "_" + NumCpu + "_" + CoresPerSocket + "_" + MemoryMB + "_" + MemoryGB + "_" + VMHostId + "_" + VMHost + "_" + VApp + "_" + FolderId + "_" + Folder + "_" + ResourcePoolId + "_" + ResourcePool + "_" + PersistentId + "_" + UsedSpaceGB + "_" + ProvisionedSpaceGB + "_" + DatastoreIdList + "_" + HARestartPriority + "_" + HAIsolationResponse + "_" + DrsAutomationLevel + "_" + VMSwapfilePolicy + "_" + VMResourceConfiguration + "_" + GuestId + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMHostImpl : InventoryItemImpl, VMHost, IEquatable<VMHostImpl>
    {
        public VMHostState State { get; set; }

        public VMHostState ConnectionState { get; set; }

        public VMHostPowerState PowerState { get; set; }

        public string VMSwapfileDatastoreId { get; set; }

        public VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        public string ParentId { get; set; }

        public bool IsStandalone { get; set; }

        public string Manufacturer { get; set; }

        public string Model { get; set; }

        public int NumCpu { get; set; }

        public int CpuTotalMhz { get; set; }

        public int CpuUsageMhz { get; set; }

        public string LicenseKey { get; set; }

        public decimal MemoryTotalMB { get; set; }

        public decimal MemoryTotalGB { get; set; }

        public decimal MemoryUsageMB { get; set; }

        public decimal MemoryUsageGB { get; set; }

        public string ProcessorType { get; set; }

        public bool HyperthreadingActive { get; set; }

        public VMHostTimeZone TimeZone { get; set; }

        public string Version { get; set; }

        public string Build { get; set; }

        public InventoryItem Parent { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement.Datastore VMSwapfileDatastore { get; set; }

        public VMHostStorageInfo StorageInfo { get; set; }

        public VMHostNetworkInfo NetworkInfo { get; set; }

        public VMHostDiagnosticPartition DiagnosticPartition { get; set; }

        public VMHostFirewallDefaultPolicy FirewallDefaultPolicy { get; set; }

        public string ApiVersion { get; set; }

        public string MaxEVCMode { get; set; }

        public string[] DatastoreIdList { get; set; }

        public bool Equals(VMHostImpl vMHostImpl)
        {
            return (vMHostImpl != null && this.State == vMHostImpl.State && this.ConnectionState == vMHostImpl.ConnectionState && this.PowerState == vMHostImpl.PowerState && this.VMSwapfileDatastoreId == vMHostImpl.VMSwapfileDatastoreId && ((this.VMSwapfilePolicy == null && vMHostImpl.VMSwapfilePolicy == null) || (this.VMSwapfilePolicy != null && this.VMSwapfilePolicy.Equals(vMHostImpl.VMSwapfilePolicy))) && this.ParentId == vMHostImpl.ParentId && this.IsStandalone == vMHostImpl.IsStandalone && this.Manufacturer == vMHostImpl.Manufacturer && this.Model == vMHostImpl.Model && this.NumCpu == vMHostImpl.NumCpu && this.CpuTotalMhz == vMHostImpl.CpuTotalMhz && this.CpuUsageMhz == vMHostImpl.CpuUsageMhz && this.LicenseKey == vMHostImpl.LicenseKey && this.MemoryTotalMB == vMHostImpl.MemoryTotalMB && this.MemoryTotalGB == vMHostImpl.MemoryTotalGB && this.MemoryUsageMB == vMHostImpl.MemoryUsageMB && this.MemoryUsageGB == vMHostImpl.MemoryUsageGB && this.ProcessorType == vMHostImpl.ProcessorType && this.HyperthreadingActive == vMHostImpl.HyperthreadingActive && ((this.TimeZone == null && vMHostImpl.TimeZone == null) || (this.TimeZone != null && this.TimeZone.Equals(vMHostImpl.TimeZone))) && this.Version == vMHostImpl.Version && this.Build == vMHostImpl.Build && ((this.Parent == null && vMHostImpl.Parent == null) || (this.Parent != null && this.Parent.Equals(vMHostImpl.Parent))) && ((this.VMSwapfileDatastore == null && vMHostImpl.VMSwapfileDatastore == null) || (this.VMSwapfileDatastore != null && this.VMSwapfileDatastore.Equals(vMHostImpl.VMSwapfileDatastore))) && ((this.StorageInfo == null && vMHostImpl.StorageInfo == null) || (this.StorageInfo != null && this.StorageInfo.Equals(vMHostImpl.StorageInfo))) && ((this.NetworkInfo == null && vMHostImpl.NetworkInfo == null) || (this.NetworkInfo != null && this.NetworkInfo.Equals(vMHostImpl.NetworkInfo))) && ((this.DiagnosticPartition == null && vMHostImpl.DiagnosticPartition == null) || (this.DiagnosticPartition != null && this.DiagnosticPartition.Equals(vMHostImpl.DiagnosticPartition))) && ((this.FirewallDefaultPolicy == null && vMHostImpl.FirewallDefaultPolicy == null) || (this.FirewallDefaultPolicy != null && this.FirewallDefaultPolicy.Equals(vMHostImpl.FirewallDefaultPolicy))) && this.ApiVersion == vMHostImpl.ApiVersion && this.MaxEVCMode == vMHostImpl.MaxEVCMode && this.Id == vMHostImpl.Id && this.Name == vMHostImpl.Name && this.Uid == vMHostImpl.Uid && ((this.ExtensionData == null && vMHostImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMHostImpl.ExtensionData))) && ((this.DatastoreIdList == null && vMHostImpl.DatastoreIdList == null) || (this.DatastoreIdList != null && vMHostImpl.DatastoreIdList != null && Enumerable.SequenceEqual(this.DatastoreIdList, vMHostImpl.DatastoreIdList))));
        }

        public override bool Equals(object vMHostImpl)
        {
            return Equals(vMHostImpl as VMHostImpl);
        }

        public override int GetHashCode()
        {
            return (State + "_" + ConnectionState + "_" + PowerState + "_" + VMSwapfileDatastoreId + "_" + VMSwapfilePolicy + "_" + ParentId + "_" + IsStandalone + "_" + Manufacturer + "_" + Model + "_" + NumCpu + "_" + CpuTotalMhz + "_" + CpuUsageMhz + "_" + LicenseKey + "_" + MemoryTotalMB + "_" + MemoryTotalGB + "_" + MemoryUsageMB + "_" + MemoryUsageGB + "_" + ProcessorType + "_" + HyperthreadingActive + "_" + TimeZone + "_" + Version + "_" + Build + "_" + Parent + "_" + VMSwapfileDatastore + "_" + StorageInfo + "_" + NetworkInfo + "_" + DiagnosticPartition + "_" + FirewallDefaultPolicy + "_" + ApiVersion + "_" + MaxEVCMode + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData + "_" + DatastoreIdList).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.OSCustomization
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.OSCustomization;

    public class OSCustomizationSpecImpl : VIObjectImpl, OSCustomizationSpec, IEquatable<OSCustomizationSpecImpl>
    {
        public OSCustomizationSpecType Type { get; set; }

        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public DateTime? LastUpdate { get; set; }

        public string DomainAdminUsername { get; set; }

        public string DomainUsername { get; set; }

        public string Description { get; set; }

        public int? AutoLogonCount { get; set; }

        public bool? ChangeSid { get; set; }

        public bool? DeleteAccounts { get; set; }

        public string[] DnsServer { get; set; }

        public string[] DnsSuffix { get; set; }

        public string Domain { get; set; }

        public string FullName { get; set; }

        public string[] GuiRunOnce { get; set; }

        public string NamingPrefix { get; set; }

        public NamingScheme? NamingScheme { get; set; }

        public string OrgName { get; set; }

        public OSType? OSType { get; set; }

        public string ProductKey { get; set; }

        public string TimeZone { get; set; }

        public string Workgroup { get; set; }

        public LicenseMode? LicenseMode { get; set; }

        public int? LicenseMaxConnections { get; set; }

        public sbyte[] EncryptionKey { get; set; }

        public object ExtensionData { get; set; }

        public string AdminPassword { get; set; }

        public string DomainAdminPassword { get; set; }

        public string DomainPassword { get; set; }

        public bool Equals(OSCustomizationSpecImpl oSCustomizationSpecImpl)
        {
            return (oSCustomizationSpecImpl != null && this.Name == oSCustomizationSpecImpl.Name && this.Type == oSCustomizationSpecImpl.Type && this.ServerId == oSCustomizationSpecImpl.ServerId && ((this.Server == null && oSCustomizationSpecImpl.Server == null) || (this.Server != null && this.Server.Equals(oSCustomizationSpecImpl.Server))) && ((this.LastUpdate == null && oSCustomizationSpecImpl.LastUpdate == null) || (this.LastUpdate != null && this.LastUpdate.Equals(oSCustomizationSpecImpl.LastUpdate))) && this.DomainAdminUsername == oSCustomizationSpecImpl.DomainAdminUsername && this.DomainUsername == oSCustomizationSpecImpl.DomainUsername && this.Description == oSCustomizationSpecImpl.Description && ((this.AutoLogonCount == null && oSCustomizationSpecImpl.AutoLogonCount == null) || (this.AutoLogonCount != null && this.AutoLogonCount.Equals(oSCustomizationSpecImpl.AutoLogonCount))) && ((this.ChangeSid == null && oSCustomizationSpecImpl.ChangeSid == null) || (this.ChangeSid != null && this.ChangeSid.Equals(oSCustomizationSpecImpl.ChangeSid))) && ((this.DeleteAccounts == null && oSCustomizationSpecImpl.DeleteAccounts == null) || (this.DeleteAccounts != null && this.DeleteAccounts.Equals(oSCustomizationSpecImpl.DeleteAccounts))) && ((this.DnsServer == null && oSCustomizationSpecImpl.DnsServer == null) || (this.DnsServer != null && oSCustomizationSpecImpl.DnsServer != null && Enumerable.SequenceEqual(this.DnsServer, oSCustomizationSpecImpl.DnsServer))) && ((this.DnsSuffix == null && oSCustomizationSpecImpl.DnsSuffix == null) || (this.DnsSuffix != null && oSCustomizationSpecImpl.DnsSuffix != null && Enumerable.SequenceEqual(this.DnsSuffix, oSCustomizationSpecImpl.DnsSuffix))) && this.Domain == oSCustomizationSpecImpl.Domain && this.FullName == oSCustomizationSpecImpl.FullName && ((this.GuiRunOnce == null && oSCustomizationSpecImpl.GuiRunOnce == null) || (this.GuiRunOnce != null && oSCustomizationSpecImpl.GuiRunOnce != null && Enumerable.SequenceEqual(this.GuiRunOnce, oSCustomizationSpecImpl.GuiRunOnce))) && this.NamingPrefix == oSCustomizationSpecImpl.NamingPrefix && ((this.NamingScheme == null && oSCustomizationSpecImpl.NamingScheme == null) || (this.NamingScheme != null && this.NamingScheme.Equals(oSCustomizationSpecImpl.NamingScheme))) && this.OrgName == oSCustomizationSpecImpl.OrgName && ((this.OSType == null && oSCustomizationSpecImpl.OSType == null) || (this.OSType != null && this.OSType.Equals(oSCustomizationSpecImpl.OSType))) && this.ProductKey == oSCustomizationSpecImpl.ProductKey && this.TimeZone == oSCustomizationSpecImpl.TimeZone && this.Workgroup == oSCustomizationSpecImpl.Workgroup && ((this.LicenseMode == null && oSCustomizationSpecImpl.LicenseMode == null) || (this.LicenseMode != null && this.LicenseMode.Equals(oSCustomizationSpecImpl.LicenseMode))) && ((this.LicenseMaxConnections == null && oSCustomizationSpecImpl.LicenseMaxConnections == null) || (this.LicenseMaxConnections != null && this.LicenseMaxConnections.Equals(oSCustomizationSpecImpl.LicenseMaxConnections))) && ((this.EncryptionKey == null && oSCustomizationSpecImpl.EncryptionKey == null) || (this.EncryptionKey != null && oSCustomizationSpecImpl.EncryptionKey != null && Enumerable.SequenceEqual(this.EncryptionKey, oSCustomizationSpecImpl.EncryptionKey))) && ((this.ExtensionData == null && oSCustomizationSpecImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(oSCustomizationSpecImpl.ExtensionData))) && this.Id == oSCustomizationSpecImpl.Id && this.Uid == oSCustomizationSpecImpl.Uid && this.AdminPassword == oSCustomizationSpecImpl.AdminPassword && this.DomainAdminPassword == oSCustomizationSpecImpl.DomainAdminPassword && this.DomainPassword == oSCustomizationSpecImpl.DomainPassword);
        }

        public override bool Equals(object oSCustomizationSpecImpl)
        {
            return Equals(oSCustomizationSpecImpl as OSCustomizationSpecImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + Type + "_" + ServerId + "_" + Server + "_" + LastUpdate + "_" + DomainAdminUsername + "_" + DomainUsername + "_" + Description + "_" + AutoLogonCount + "_" + ChangeSid + "_" + DeleteAccounts + "_" + DnsServer + "_" + DnsSuffix + "_" + Domain + "_" + FullName + "_" + GuiRunOnce + "_" + NamingPrefix + "_" + NamingScheme + "_" + OrgName + "_" + OSType + "_" + ProductKey + "_" + TimeZone + "_" + Workgroup + "_" + LicenseMode + "_" + LicenseMaxConnections + "_" + EncryptionKey + "_" + ExtensionData + "_" + Id + "_" + Uid + "_" + AdminPassword + "_" + DomainAdminPassword + "_" + DomainPassword).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Ovf
{
    using System;
    using System.Collections;
    using System.Linq;
    using VMware.VimAutomation.ViCore.Types.V1.Ovf;

    public class OvfConfigurationImpl : OvfConfiguration, IEquatable<OvfConfigurationImpl>
    {
        public string Source { get; set; }

        public Hashtable ToHashTable()
        {
            return default(Hashtable);
        }

        public bool Equals(OvfConfigurationImpl ovfConfigurationImpl)
        {
            return (ovfConfigurationImpl != null && this.Source == ovfConfigurationImpl.Source);
        }

        public override bool Equals(object ovfConfigurationImpl)
        {
            return Equals(ovfConfigurationImpl as OvfConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (Source).GetHashCode();
        }
    }

    public class OvfPropertyImpl : OvfProperty, IEquatable<OvfPropertyImpl>
    {
        public string Key { get; set; }

        public object Value { get; set; }

        public object DefaultValue { get; set; }

        public string OvfTypeDescription { get; set; }

        public string Description { get; set; }

        public string GetPropertyPath()
        {
            return default(string);
        }

        public bool Equals(OvfPropertyImpl ovfPropertyImpl)
        {
            return (ovfPropertyImpl != null && this.Key == ovfPropertyImpl.Key && ((this.Value == null && ovfPropertyImpl.Value == null) || (this.Value != null && this.Value.Equals(ovfPropertyImpl.Value))) && ((this.DefaultValue == null && ovfPropertyImpl.DefaultValue == null) || (this.DefaultValue != null && this.DefaultValue.Equals(ovfPropertyImpl.DefaultValue))) && this.OvfTypeDescription == ovfPropertyImpl.OvfTypeDescription && this.Description == ovfPropertyImpl.Description);
        }

        public override bool Equals(object ovfPropertyImpl)
        {
            return Equals(ovfPropertyImpl as OvfPropertyImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + Value + "_" + DefaultValue + "_" + OvfTypeDescription + "_" + Description).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.PermissionManagement
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.PermissionManagement;

    public class PermissionImpl : IEquatable<PermissionImpl>
    {
        public string EntityId { get; set; }

        public VIObject Entity { get; set; }

        public int RoleId { get; set; }

        public string Role { get; set; }

        public string Principal { get; set; }

        public bool Propagate { get; set; }

        public bool IsGroup { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(PermissionImpl permissionImpl)
        {
            return (permissionImpl != null && this.EntityId == permissionImpl.EntityId && ((this.Entity == null && permissionImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(permissionImpl.Entity))) && this.RoleId == permissionImpl.RoleId && this.Role == permissionImpl.Role && this.Principal == permissionImpl.Principal && this.Propagate == permissionImpl.Propagate && this.IsGroup == permissionImpl.IsGroup && this.Uid == permissionImpl.Uid && ((this.ExtensionData == null && permissionImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(permissionImpl.ExtensionData))));
        }

        public override bool Equals(object permissionImpl)
        {
            return this.Equals(permissionImpl as PermissionImpl);
        }

        public override int GetHashCode()
        {
            return (EntityId + "_" + Entity + "_" + RoleId + "_" + Role + "_" + Principal + "_" + Propagate + "_" + IsGroup + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class PrivilegeImpl : Privilege, IEquatable<PrivilegeImpl>
    {
        public string Description { get; set; }

        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Id { get; set; }

        public string Uid { get; set; }

        public string Name { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(PrivilegeImpl privilegeImpl)
        {
            return (privilegeImpl != null && this.Description == privilegeImpl.Description && this.ServerId == privilegeImpl.ServerId && ((this.Server == null && privilegeImpl.Server == null) || (this.Server != null && this.Server.Equals(privilegeImpl.Server))) && this.Id == privilegeImpl.Id && this.Uid == privilegeImpl.Uid && this.Name == privilegeImpl.Name && ((this.ExtensionData == null && privilegeImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(privilegeImpl.ExtensionData))));
        }

        public override bool Equals(object privilegeImpl)
        {
            return Equals(privilegeImpl as PrivilegeImpl);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + ServerId + "_" + Server + "_" + Id + "_" + Uid + "_" + Name + "_" + ExtensionData).GetHashCode();
        }
    }

    public class RoleImpl : Role, IEquatable<RoleImpl>
    {
        public string Description { get; set; }

        public bool IsSystem { get; set; }

        public string[] PrivilegeList { get; set; }

        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public int Id { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(RoleImpl roleImpl)
        {
            return (roleImpl != null && this.Description == roleImpl.Description && this.IsSystem == roleImpl.IsSystem && ((this.PrivilegeList == null && roleImpl.PrivilegeList == null) || (this.PrivilegeList != null && roleImpl.PrivilegeList != null && Enumerable.SequenceEqual(this.PrivilegeList, roleImpl.PrivilegeList))) && this.ServerId == roleImpl.ServerId && ((this.Server == null && roleImpl.Server == null) || (this.Server != null && this.Server.Equals(roleImpl.Server))) && this.Id == roleImpl.Id && this.Name == roleImpl.Name && this.Uid == roleImpl.Uid && ((this.ExtensionData == null && roleImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(roleImpl.ExtensionData))));
        }

        public override bool Equals(object roleImpl)
        {
            return Equals(roleImpl as RoleImpl);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + IsSystem + "_" + PrivilegeList + "_" + ServerId + "_" + Server + "_" + Id + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VIGroupAccountImpl : VIGroupAccount, IEquatable<VIGroupAccountImpl>
    {
        public string Id { get; set; }

        public VIServer Server { get; set; }

        public string Description { get; set; }

        public string Domain { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VIGroupAccountImpl vIGroupAccountImpl)
        {
            return (vIGroupAccountImpl != null && this.Id == vIGroupAccountImpl.Id && ((this.Server == null && vIGroupAccountImpl.Server == null) || (this.Server != null && this.Server.Equals(vIGroupAccountImpl.Server))) && this.Description == vIGroupAccountImpl.Description && this.Domain == vIGroupAccountImpl.Domain && this.Name == vIGroupAccountImpl.Name && this.Uid == vIGroupAccountImpl.Uid && ((this.ExtensionData == null && vIGroupAccountImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vIGroupAccountImpl.ExtensionData))));
        }

        public override bool Equals(object vIGroupAccountImpl)
        {
            return Equals(vIGroupAccountImpl as VIGroupAccountImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Server + "_" + Description + "_" + Domain + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VIUserAccountImpl : VIUserAccount, IEquatable<VIUserAccountImpl>
    {
        public string Id { get; set; }

        public VIServer Server { get; set; }

        public string Description { get; set; }

        public string Domain { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VIUserAccountImpl vIUserAccountImpl)
        {
            return (vIUserAccountImpl != null && this.Id == vIUserAccountImpl.Id && ((this.Server == null && vIUserAccountImpl.Server == null) || (this.Server != null && this.Server.Equals(vIUserAccountImpl.Server))) && this.Description == vIUserAccountImpl.Description && this.Domain == vIUserAccountImpl.Domain && this.Name == vIUserAccountImpl.Name && this.Uid == vIUserAccountImpl.Uid && ((this.ExtensionData == null && vIUserAccountImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vIUserAccountImpl.ExtensionData))));
        }

        public override bool Equals(object vIUserAccountImpl)
        {
            return Equals(vIUserAccountImpl as VIUserAccountImpl);
        }

        public override int GetHashCode()
        {
            return (Id + "_" + Server + "_" + Description + "_" + Domain + "_" + Name + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Stat
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Stat;

    public class FloatSampleImpl : SampleImpl, FloatSample, IEquatable<FloatSampleImpl>
    {
        public float Value { get; set; }

        public bool Equals(FloatSampleImpl floatSampleImpl)
        {
            return (floatSampleImpl != null && this.Value == floatSampleImpl.Value && this.Timestamp == floatSampleImpl.Timestamp && this.MetricId == floatSampleImpl.MetricId && this.Description == floatSampleImpl.Description && this.Unit == floatSampleImpl.Unit && ((this.Entity == null && floatSampleImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(floatSampleImpl.Entity))) && this.EntityId == floatSampleImpl.EntityId && this.IntervalSecs == floatSampleImpl.IntervalSecs && this.Instance == floatSampleImpl.Instance && this.Uid == floatSampleImpl.Uid);
        }

        public override bool Equals(object floatSampleImpl)
        {
            return Equals(floatSampleImpl as FloatSampleImpl);
        }

        public override int GetHashCode()
        {
            return (Value + "_" + Timestamp + "_" + MetricId + "_" + Description + "_" + Unit + "_" + Entity + "_" + EntityId + "_" + IntervalSecs + "_" + Instance + "_" + Uid).GetHashCode();
        }
    }

    public class LongSampleImpl : SampleImpl, LongSample, IEquatable<LongSampleImpl>
    {
        public long Value { get; set; }

        public bool Equals(LongSampleImpl longSampleImpl)
        {
            return (longSampleImpl != null && this.Value == longSampleImpl.Value && this.Timestamp == longSampleImpl.Timestamp && this.MetricId == longSampleImpl.MetricId && this.Description == longSampleImpl.Description && this.Unit == longSampleImpl.Unit && ((this.Entity == null && longSampleImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(longSampleImpl.Entity))) && this.EntityId == longSampleImpl.EntityId && this.IntervalSecs == longSampleImpl.IntervalSecs && this.Instance == longSampleImpl.Instance && this.Uid == longSampleImpl.Uid);
        }

        public override bool Equals(object longSampleImpl)
        {
            return Equals(longSampleImpl as LongSampleImpl);
        }

        public override int GetHashCode()
        {
            return (Value + "_" + Timestamp + "_" + MetricId + "_" + Description + "_" + Unit + "_" + Entity + "_" + EntityId + "_" + IntervalSecs + "_" + Instance + "_" + Uid).GetHashCode();
        }
    }

    public abstract class SampleImpl : Sample, IEquatable<SampleImpl>
    {
        public DateTime Timestamp { get; set; }

        public string MetricId { get; set; }

        public string Unit { get; set; }

        public string Description { get; set; }

        public VIObject Entity { get; set; }

        public string EntityId { get; set; }

        public int IntervalSecs { get; set; }

        public string Instance { get; set; }

        public string Uid { get; set; }

        public bool Equals(SampleImpl sampleImpl)
        {
            return (sampleImpl != null && this.Timestamp == sampleImpl.Timestamp && this.MetricId == sampleImpl.MetricId && this.Unit == sampleImpl.Unit && this.Description == sampleImpl.Description && ((this.Entity == null && sampleImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(sampleImpl.Entity))) && this.EntityId == sampleImpl.EntityId && this.IntervalSecs == sampleImpl.IntervalSecs && this.Instance == sampleImpl.Instance && this.Uid == sampleImpl.Uid);
        }

        public override bool Equals(object sampleImpl)
        {
            return Equals(sampleImpl as SampleImpl);
        }

        public override int GetHashCode()
        {
            return (Timestamp + "_" + MetricId + "_" + Unit + "_" + Description + "_" + Entity + "_" + EntityId + "_" + IntervalSecs + "_" + Instance + "_" + Uid).GetHashCode();
        }
    }

    public class StatIntervalImpl : StatInterval, IEquatable<StatIntervalImpl>
    {
        public string ServerId { get; set; }

        public VIServer Server { get; set; }

        public string Name { get; set; }

        public int SamplingPeriodSecs { get; set; }

        public int StorageTimeSecs { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(StatIntervalImpl statIntervalImpl)
        {
            return (statIntervalImpl != null && this.ServerId == statIntervalImpl.ServerId && ((this.Server == null && statIntervalImpl.Server == null) || (this.Server != null && this.Server.Equals(statIntervalImpl.Server))) && this.Name == statIntervalImpl.Name && this.SamplingPeriodSecs == statIntervalImpl.SamplingPeriodSecs && this.StorageTimeSecs == statIntervalImpl.StorageTimeSecs && this.Uid == statIntervalImpl.Uid && ((this.ExtensionData == null && statIntervalImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(statIntervalImpl.ExtensionData))));
        }

        public override bool Equals(object statIntervalImpl)
        {
            return Equals(statIntervalImpl as StatIntervalImpl);
        }

        public override int GetHashCode()
        {
            return (ServerId + "_" + Server + "_" + Name + "_" + SamplingPeriodSecs + "_" + StorageTimeSecs + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Tagging
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Tagging;

    public class TagAssignmentImpl : TagAssignment, IEquatable<TagAssignmentImpl>
    {
        public string Uid { get; set; }

        public Tag Tag { get; set; }

        public VIObjectCore Entity { get; set; }

        public bool Equals(TagAssignmentImpl tagAssignmentImpl)
        {
            return (tagAssignmentImpl != null && this.Uid == tagAssignmentImpl.Uid && ((this.Tag == null && tagAssignmentImpl.Tag == null) || (this.Tag != null && this.Tag.Equals(tagAssignmentImpl.Tag))) && ((this.Entity == null && tagAssignmentImpl.Entity == null) || (this.Entity != null && this.Entity.Equals(tagAssignmentImpl.Entity))));
        }

        public override bool Equals(object tagAssignmentImpl)
        {
            return Equals(tagAssignmentImpl as TagAssignmentImpl);
        }

        public override int GetHashCode()
        {
            return (Uid + "_" + Tag + "_" + Entity).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.Task
{
    using System;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;

    public class TaskImpl : VMware.VimAutomation.ViCore.Types.V1.Task, VIObject, ExtensionData, IEquatable<TaskImpl>
    {
        public string ServerId { get; set; }

        public TaskState State { get; set; }

        public bool IsCancelable { get; set; }

        public float PercentComplete { get; set; }

        public DateTime StartTime { get; set; }

        public DateTime? FinishTime { get; set; }

        public string ObjectId { get; set; }

        public object Result { get; set; }

        public string Description { get; set; }

        public object ExtensionData { get; set; }

        public string Id { get; set; }

        public string Name { get; set; }

        public string Uid { get; set; }

        public bool Equals(TaskImpl taskImpl)
        {
            return (taskImpl != null && this.ServerId == taskImpl.ServerId && this.State == taskImpl.State && this.IsCancelable == taskImpl.IsCancelable && this.PercentComplete == taskImpl.PercentComplete && this.StartTime == taskImpl.StartTime && this.FinishTime == taskImpl.FinishTime && this.ObjectId == taskImpl.ObjectId && ((this.Result == null && taskImpl.Result == null) || (this.Result != null && this.Result.Equals(taskImpl.Result))) && this.Description == taskImpl.Description && ((this.ExtensionData == null && taskImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(taskImpl.ExtensionData))) && this.Id == taskImpl.Id && this.Name == taskImpl.Name && this.Uid == taskImpl.Uid);
        }

        public override bool Equals(object taskImpl)
        {
            return Equals(taskImpl as TaskImpl);
        }

        public override int GetHashCode()
        {
            return (ServerId + "_" + State + "_" + IsCancelable + "_" + PercentComplete + "_" + StartTime + "_" + FinishTime + "_" + ObjectId + "_" + Result + "_" + Description + "_" + ExtensionData + "_" + Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.VirtualDevice
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;

    public class PassThroughDeviceImpl : PassThroughDevice, IEquatable<PassThroughDeviceImpl>
    {
        public string VendorName { get; set; }

        public string Name { get; set; }

        public string VMId { get; set; }

        public VirtualMachine VM { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public int? Key { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(PassThroughDeviceImpl passThroughDeviceImpl)
        {
            return (passThroughDeviceImpl != null && this.VendorName == passThroughDeviceImpl.VendorName && this.Name == passThroughDeviceImpl.Name && this.VMId == passThroughDeviceImpl.VMId && ((this.VM == null && passThroughDeviceImpl.VM == null) || (this.VM != null && this.VM.Equals(passThroughDeviceImpl.VM))) && this.VMHostId == passThroughDeviceImpl.VMHostId && ((this.VMHost == null && passThroughDeviceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(passThroughDeviceImpl.VMHost))) && ((this.Key == null && passThroughDeviceImpl.Key == null) || (this.Key != null && this.Key.Equals(passThroughDeviceImpl.Key))) && this.Uid == passThroughDeviceImpl.Uid && ((this.ExtensionData == null && passThroughDeviceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(passThroughDeviceImpl.ExtensionData))));
        }

        public override bool Equals(object passThroughDeviceImpl)
        {
            return Equals(passThroughDeviceImpl as PassThroughDeviceImpl);
        }

        public override int GetHashCode()
        {
            return (VendorName + "_" + Name + "_" + VMId + "_" + VM + "_" + VMHostId + "_" + VMHost + "_" + Key + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class PciPassthroughDeviceImpl : PassThroughDeviceImpl, PciPassthroughDevice, IEquatable<PciPassthroughDeviceImpl>
    {
        public int Bus { get; set; }

        public int ClassId { get; set; }

        public int DeviceId { get; set; }

        public int Function { get; set; }

        public int Slot { get; set; }

        public PciPassthroughDeviceState State { get; set; }

        public int VendorId { get; set; }

        public bool Equals(PciPassthroughDeviceImpl pciPassthroughDeviceImpl)
        {
            return (pciPassthroughDeviceImpl != null && this.Bus == pciPassthroughDeviceImpl.Bus && this.ClassId == pciPassthroughDeviceImpl.ClassId && this.DeviceId == pciPassthroughDeviceImpl.DeviceId && this.Function == pciPassthroughDeviceImpl.Function && this.Slot == pciPassthroughDeviceImpl.Slot && this.State == pciPassthroughDeviceImpl.State && this.VendorId == pciPassthroughDeviceImpl.VendorId && this.Uid == pciPassthroughDeviceImpl.Uid && ((this.Key == null && pciPassthroughDeviceImpl.Key == null) || (this.Key != null && this.Key.Equals(pciPassthroughDeviceImpl.Key))) && this.Name == pciPassthroughDeviceImpl.Name && this.VendorName == pciPassthroughDeviceImpl.VendorName && this.VMId == pciPassthroughDeviceImpl.VMId && ((this.VM == null && pciPassthroughDeviceImpl.VM == null) || (this.VM != null && this.VM.Equals(pciPassthroughDeviceImpl.VM))) && this.VMHostId == pciPassthroughDeviceImpl.VMHostId && ((this.VMHost == null && pciPassthroughDeviceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(pciPassthroughDeviceImpl.VMHost))) && ((this.ExtensionData == null && pciPassthroughDeviceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(pciPassthroughDeviceImpl.ExtensionData))));
        }

        public override bool Equals(object pciPassthroughDeviceImpl)
        {
            return Equals(pciPassthroughDeviceImpl as PciPassthroughDeviceImpl);
        }

        public override int GetHashCode()
        {
            return (Bus + "_" + ClassId + "_" + DeviceId + "_" + Function + "_" + Slot + "_" + State + "_" + VendorId + "_" + Uid + "_" + Key + "_" + Name + "_" + VendorName + "_" + VMId + "_" + VM + "_" + VMHostId + "_" + VMHost + "_" + ExtensionData).GetHashCode();
        }
    }

    public class ScsiPassthroughDeviceImpl : PassThroughDeviceImpl, ScsiPassthroughDevice, IEquatable<ScsiPassthroughDeviceImpl>
    {
        public int ControllerKey { get; set; }

        public string Class { get; set; }

        public int UnitNumber { get; set; }

        public bool Equals(ScsiPassthroughDeviceImpl scsiPassthroughDeviceImpl)
        {
            return (scsiPassthroughDeviceImpl != null && this.ControllerKey == scsiPassthroughDeviceImpl.ControllerKey && this.Class == scsiPassthroughDeviceImpl.Class && this.UnitNumber == scsiPassthroughDeviceImpl.UnitNumber && ((this.Key == null && scsiPassthroughDeviceImpl.Key == null) || (this.Key != null && this.Key.Equals(scsiPassthroughDeviceImpl.Key))) && this.Name == scsiPassthroughDeviceImpl.Name && this.VendorName == scsiPassthroughDeviceImpl.VendorName && this.VMId == scsiPassthroughDeviceImpl.VMId && ((this.VM == null && scsiPassthroughDeviceImpl.VM == null) || (this.VM != null && this.VM.Equals(scsiPassthroughDeviceImpl.VM))) && this.VMHostId == scsiPassthroughDeviceImpl.VMHostId && ((this.VMHost == null && scsiPassthroughDeviceImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(scsiPassthroughDeviceImpl.VMHost))) && this.Uid == scsiPassthroughDeviceImpl.Uid && ((this.ExtensionData == null && scsiPassthroughDeviceImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(scsiPassthroughDeviceImpl.ExtensionData))));
        }

        public override bool Equals(object scsiPassthroughDeviceImpl)
        {
            return Equals(scsiPassthroughDeviceImpl as ScsiPassthroughDeviceImpl);
        }

        public override int GetHashCode()
        {
            return (ControllerKey + "_" + Class + "_" + UnitNumber + "_" + Key + "_" + Name + "_" + VendorName + "_" + VMId + "_" + VM + "_" + VMHostId + "_" + VMHost + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.VM
{
    using System;
    using System.Linq;
    using VMware.Vim;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Impl.V1;
    using VMware.VimAutomation.ViCore.Impl.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Cluster;
    using VMware.VimAutomation.ViCore.Types.V1.DatastoreManagement;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.RelatedObject;
    using VMware.VimAutomation.ViCore.Types.V1.VM;
    using VMware.VimAutomation.ViCore.Types.V1.VM.Guest;

    public class SnapshotImpl : VIObjectImpl, Snapshot, IEquatable<SnapshotImpl>
    {
        public string Description { get; set; }

        public DateTime Created { get; set; }

        public bool Quiesced { get; set; }

        public PowerState PowerState { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine VM { get; set; }

        public string VMId { get; set; }

        public Snapshot Parent { get; set; }

        public string ParentSnapshotId { get; set; }

        public Snapshot ParentSnapshot { get; set; }

        public Snapshot[] Children { get; set; }

        public decimal SizeMB { get; set; }

        public decimal? SizeGB { get; set; }

        public bool IsCurrent { get; set; }

        public bool IsReplaySupported { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(SnapshotImpl snapshotImpl)
        {
            return (snapshotImpl != null && this.Description == snapshotImpl.Description && this.Created == snapshotImpl.Created && this.Quiesced == snapshotImpl.Quiesced && this.PowerState == snapshotImpl.PowerState && ((this.VM == null && snapshotImpl.VM == null) || (this.VM != null && this.VM.Equals(snapshotImpl.VM))) && this.VMId == snapshotImpl.VMId && ((this.Parent == null && snapshotImpl.Parent == null) || (this.Parent != null && this.Parent.Equals(snapshotImpl.Parent))) && this.ParentSnapshotId == snapshotImpl.ParentSnapshotId && ((this.ParentSnapshot == null && snapshotImpl.ParentSnapshot == null) || (this.ParentSnapshot != null && this.ParentSnapshot.Equals(snapshotImpl.ParentSnapshot))) && ((this.Children == null && snapshotImpl.Children == null) || (this.Children != null && snapshotImpl.Children != null && Enumerable.SequenceEqual(this.Children, snapshotImpl.Children))) && this.SizeMB == snapshotImpl.SizeMB && ((this.SizeGB == null && snapshotImpl.SizeGB == null) || (this.SizeGB != null && this.SizeGB.Equals(snapshotImpl.SizeGB))) && this.IsCurrent == snapshotImpl.IsCurrent && this.IsReplaySupported == snapshotImpl.IsReplaySupported && ((this.ExtensionData == null && snapshotImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(snapshotImpl.ExtensionData))) && this.Id == snapshotImpl.Id && this.Name == snapshotImpl.Name && this.Uid == snapshotImpl.Uid);
        }

        public override bool Equals(object snapshotImpl)
        {
            return Equals(snapshotImpl as SnapshotImpl);
        }

        public override int GetHashCode()
        {
            return (Description + "_" + Created + "_" + Quiesced + "_" + PowerState + "_" + VM + "_" + VMId + "_" + Parent + "_" + ParentSnapshotId + "_" + ParentSnapshot + "_" + Children + "_" + SizeMB + "_" + SizeGB + "_" + IsCurrent + "_" + IsReplaySupported + "_" + ExtensionData + "_" + Id + "_" + Name + "_" + Uid).GetHashCode();
        }
    }

    public class UniversalVirtualMachineImpl : InventoryItemImpl, IEquatable<UniversalVirtualMachineImpl>
    {
        public PowerState PowerState { get; set; }

        public string Notes { get; set; }

        public VMGuest Guest { get; set; }

        public int NumCpu { get; set; }

        public int CoresPerSocket { get; set; }

        public decimal MemoryMB { get; set; }

        public decimal MemoryGB { get; set; }

        public string VMHostId { get; set; }

        public VMHost VMHost { get; set; }

        public VApp VApp { get; set; }

        public string FolderId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.Folder Folder { get; set; }

        public string ResourcePoolId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.ResourcePool ResourcePool { get; set; }

        public HARestartPriority? HARestartPriority { get; set; }

        public HAIsolationResponse? HAIsolationResponse { get; set; }

        public DrsAutomationLevel? DrsAutomationLevel { get; set; }

        public VMSwapfilePolicy? VMSwapfilePolicy { get; set; }

        public VMResourceConfiguration VMResourceConfiguration { get; set; }

        public VMVersion Version { get; set; }

        public string HardwareVersion { get; set; }

        public string PersistentId { get; set; }

        public string GuestId { get; set; }

        public decimal UsedSpaceGB { get; set; }

        public decimal ProvisionedSpaceGB { get; set; }

        public string[] DatastoreIdList { get; set; }

        public ManagedObjectReference ObtainExportLease()
        {
            return default(ManagedObjectReference);
        }

        public bool Equals(UniversalVirtualMachineImpl universalVirtualMachineImpl)
        {
            return (universalVirtualMachineImpl != null && this.Name == universalVirtualMachineImpl.Name && this.PowerState == universalVirtualMachineImpl.PowerState && this.Notes == universalVirtualMachineImpl.Notes && ((this.Guest == null && universalVirtualMachineImpl.Guest == null) || (this.Guest != null && this.Guest.Equals(universalVirtualMachineImpl.Guest))) && this.NumCpu == universalVirtualMachineImpl.NumCpu && this.CoresPerSocket == universalVirtualMachineImpl.CoresPerSocket && this.MemoryMB == universalVirtualMachineImpl.MemoryMB && this.MemoryGB == universalVirtualMachineImpl.MemoryGB && this.VMHostId == universalVirtualMachineImpl.VMHostId && ((this.VMHost == null && universalVirtualMachineImpl.VMHost == null) || (this.VMHost != null && this.VMHost.Equals(universalVirtualMachineImpl.VMHost))) && ((this.VApp == null && universalVirtualMachineImpl.VApp == null) || (this.VApp != null && this.VApp.Equals(universalVirtualMachineImpl.VApp))) && this.FolderId == universalVirtualMachineImpl.FolderId && ((this.Folder == null && universalVirtualMachineImpl.Folder == null) || (this.Folder != null && this.Folder.Equals(universalVirtualMachineImpl.Folder))) && this.ResourcePoolId == universalVirtualMachineImpl.ResourcePoolId && ((this.ResourcePool == null && universalVirtualMachineImpl.ResourcePool == null) || (this.ResourcePool != null && this.ResourcePool.Equals(universalVirtualMachineImpl.ResourcePool))) && ((this.HARestartPriority == null && universalVirtualMachineImpl.HARestartPriority == null) || (this.HARestartPriority != null && this.HARestartPriority.Equals(universalVirtualMachineImpl.HARestartPriority))) && ((this.HAIsolationResponse == null && universalVirtualMachineImpl.HAIsolationResponse == null) || (this.HAIsolationResponse != null && this.HAIsolationResponse.Equals(universalVirtualMachineImpl.HAIsolationResponse))) && ((this.DrsAutomationLevel == null && universalVirtualMachineImpl.DrsAutomationLevel == null) || (this.DrsAutomationLevel != null && this.DrsAutomationLevel.Equals(universalVirtualMachineImpl.DrsAutomationLevel))) && ((this.VMSwapfilePolicy == null && universalVirtualMachineImpl.VMSwapfilePolicy == null) || (this.VMSwapfilePolicy != null && this.VMSwapfilePolicy.Equals(universalVirtualMachineImpl.VMSwapfilePolicy))) && ((this.VMResourceConfiguration == null && universalVirtualMachineImpl.VMResourceConfiguration == null) || (this.VMResourceConfiguration != null && this.VMResourceConfiguration.Equals(universalVirtualMachineImpl.VMResourceConfiguration))) && this.Version == universalVirtualMachineImpl.Version && this.HardwareVersion == universalVirtualMachineImpl.HardwareVersion && this.PersistentId == universalVirtualMachineImpl.PersistentId && this.GuestId == universalVirtualMachineImpl.GuestId && this.UsedSpaceGB == universalVirtualMachineImpl.UsedSpaceGB && this.ProvisionedSpaceGB == universalVirtualMachineImpl.ProvisionedSpaceGB && ((this.DatastoreIdList == null && universalVirtualMachineImpl.DatastoreIdList == null) || (this.DatastoreIdList != null && universalVirtualMachineImpl.DatastoreIdList != null && Enumerable.SequenceEqual(this.DatastoreIdList, universalVirtualMachineImpl.DatastoreIdList))) && ((this.ExtensionData == null && universalVirtualMachineImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(universalVirtualMachineImpl.ExtensionData))) && this.Id == universalVirtualMachineImpl.Id && this.Uid == universalVirtualMachineImpl.Uid);
        }

        public override bool Equals(object universalVirtualMachineImpl)
        {
            return Equals(universalVirtualMachineImpl as UniversalVirtualMachineImpl);
        }

        public override int GetHashCode()
        {
            return (Name + "_" + PowerState + "_" + Notes + "_" + Guest + "_" + NumCpu + "_" + CoresPerSocket + "_" + MemoryMB + "_" + MemoryGB + "_" + VMHostId + "_" + VMHost + "_" + VApp + "_" + FolderId + "_" + Folder + "_" + ResourcePoolId + "_" + ResourcePool + "_" + HARestartPriority + "_" + HAIsolationResponse + "_" + DrsAutomationLevel + "_" + VMSwapfilePolicy + "_" + VMResourceConfiguration + "_" + Version + "_" + HardwareVersion + "_" + PersistentId + "_" + GuestId + "_" + UsedSpaceGB + "_" + ProvisionedSpaceGB + "_" + DatastoreIdList + "_" + ExtensionData + "_" + Id + "_" + Uid).GetHashCode();
        }
    }

    public class VMDiskResourceConfigurationImpl : VMDiskResourceConfiguration, IEquatable<VMDiskResourceConfigurationImpl>
    {
        public int Key { get; set; }

        public int NumDiskShares { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel DiskSharesLevel { get; set; }

        public long? DiskLimitIOPerSecond { get; set; }

        public bool Equals(VMDiskResourceConfigurationImpl vMDiskResourceConfigurationImpl)
        {
            return (vMDiskResourceConfigurationImpl != null && this.Key == vMDiskResourceConfigurationImpl.Key && this.NumDiskShares == vMDiskResourceConfigurationImpl.NumDiskShares && this.DiskSharesLevel == vMDiskResourceConfigurationImpl.DiskSharesLevel && ((this.DiskLimitIOPerSecond == null && vMDiskResourceConfigurationImpl.DiskLimitIOPerSecond == null) || (this.DiskLimitIOPerSecond != null && this.DiskLimitIOPerSecond.Equals(vMDiskResourceConfigurationImpl.DiskLimitIOPerSecond))));
        }

        public override bool Equals(object vMDiskResourceConfigurationImpl)
        {
            return Equals(vMDiskResourceConfigurationImpl as VMDiskResourceConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (Key + "_" + NumDiskShares + "_" + DiskSharesLevel + "_" + DiskLimitIOPerSecond).GetHashCode();
        }
    }

    public class VMQuestionImpl : VMQuestion, IEquatable<VMQuestionImpl>
    {
        public string VMId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine VM { get; set; }

        public string QuestionId { get; set; }

        public string Text { get; set; }

        public VMQuestionOption[] Options { get; set; }

        public VMQuestionOption DefaultOption { get; set; }

        public string Uid { get; set; }

        public object ExtensionData { get; set; }

        public bool Equals(VMQuestionImpl vMQuestionImpl)
        {
            return (vMQuestionImpl != null && this.VMId == vMQuestionImpl.VMId && ((this.VM == null && vMQuestionImpl.VM == null) || (this.VM != null && this.VM.Equals(vMQuestionImpl.VM))) && this.QuestionId == vMQuestionImpl.QuestionId && this.Text == vMQuestionImpl.Text && ((this.Options == null && vMQuestionImpl.Options == null) || (this.Options != null && vMQuestionImpl.Options != null && Enumerable.SequenceEqual(this.Options, vMQuestionImpl.Options))) && ((this.DefaultOption == null && vMQuestionImpl.DefaultOption == null) || (this.DefaultOption != null && this.DefaultOption.Equals(vMQuestionImpl.DefaultOption))) && this.Uid == vMQuestionImpl.Uid && ((this.ExtensionData == null && vMQuestionImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMQuestionImpl.ExtensionData))));
        }

        public override bool Equals(object vMQuestionImpl)
        {
            return Equals(vMQuestionImpl as VMQuestionImpl);
        }

        public override int GetHashCode()
        {
            return (VMId + "_" + VM + "_" + QuestionId + "_" + Text + "_" + Options + "_" + DefaultOption + "_" + Uid + "_" + ExtensionData).GetHashCode();
        }
    }

    public class VMQuestionOptionImpl : VMQuestionOption, IEquatable<VMQuestionOptionImpl>
    {
        public string QuestionId { get; set; }

        public VMQuestion Question { get; set; }

        public string OptionId { get; set; }

        public string Label { get; set; }

        public string Summary { get; set; }

        public bool Equals(VMQuestionOptionImpl vMQuestionOptionImpl)
        {
            return (vMQuestionOptionImpl != null && this.QuestionId == vMQuestionOptionImpl.QuestionId && ((this.Question == null && vMQuestionOptionImpl.Question == null) || (this.Question != null && this.Question.Equals(vMQuestionOptionImpl.Question))) && this.OptionId == vMQuestionOptionImpl.OptionId && this.Label == vMQuestionOptionImpl.Label && this.Summary == vMQuestionOptionImpl.Summary);
        }

        public override bool Equals(object vMQuestionOptionImpl)
        {
            return Equals(vMQuestionOptionImpl as VMQuestionOptionImpl);
        }

        public override int GetHashCode()
        {
            return (QuestionId + "_" + Question + "_" + OptionId + "_" + Label + "_" + Summary).GetHashCode();
        }
    }

    public class VMResourceConfigurationImpl : VMResourceConfiguration, IEquatable<VMResourceConfigurationImpl>
    {
        public string VirtualMachineId { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine VM { get; set; }

        public string VMId { get; set; }

        public int NumCpuShares { get; set; }

        public long CpuReservationMhz { get; set; }

        public long? CpuLimitMhz { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel CpuSharesLevel { get; set; }

        public int NumMemShares { get; set; }

        public long MemReservationMB { get; set; }

        public decimal MemReservationGB { get; set; }

        public long? MemLimitMB { get; set; }

        public decimal? MemLimitGB { get; set; }

        public VMware.VimAutomation.ViCore.Types.V1.SharesLevel MemSharesLevel { get; set; }

        public VMDiskResourceConfiguration[] DiskResourceConfiguration { get; set; }

        public HTCoreSharing HTCoreSharing { get; set; }

        public CpuAffinity CpuAffinity { get; set; }

        public int[] CpuAffinityList { get; set; }

        public string Uid { get; set; }

        public bool Equals(VMResourceConfigurationImpl vMResourceConfigurationImpl)
        {
            return (vMResourceConfigurationImpl != null && this.VirtualMachineId == vMResourceConfigurationImpl.VirtualMachineId && ((this.VM == null && vMResourceConfigurationImpl.VM == null) || (this.VM != null && this.VM.Equals(vMResourceConfigurationImpl.VM))) && this.VMId == vMResourceConfigurationImpl.VMId && this.NumCpuShares == vMResourceConfigurationImpl.NumCpuShares && this.CpuReservationMhz == vMResourceConfigurationImpl.CpuReservationMhz && ((this.CpuLimitMhz == null && vMResourceConfigurationImpl.CpuLimitMhz == null) || (this.CpuLimitMhz != null && this.CpuLimitMhz.Equals(vMResourceConfigurationImpl.CpuLimitMhz))) && this.CpuSharesLevel == vMResourceConfigurationImpl.CpuSharesLevel && this.NumMemShares == vMResourceConfigurationImpl.NumMemShares && this.MemReservationMB == vMResourceConfigurationImpl.MemReservationMB && this.MemReservationGB == vMResourceConfigurationImpl.MemReservationGB && ((this.MemLimitMB == null && vMResourceConfigurationImpl.MemLimitMB == null) || (this.MemLimitMB != null && this.MemLimitMB.Equals(vMResourceConfigurationImpl.MemLimitMB))) && ((this.MemLimitGB == null && vMResourceConfigurationImpl.MemLimitGB == null) || (this.MemLimitGB != null && this.MemLimitGB.Equals(vMResourceConfigurationImpl.MemLimitGB))) && this.MemSharesLevel == vMResourceConfigurationImpl.MemSharesLevel && ((this.DiskResourceConfiguration == null && vMResourceConfigurationImpl.DiskResourceConfiguration == null) || (this.DiskResourceConfiguration != null && vMResourceConfigurationImpl.DiskResourceConfiguration != null && Enumerable.SequenceEqual(this.DiskResourceConfiguration, vMResourceConfigurationImpl.DiskResourceConfiguration))) && this.HTCoreSharing == vMResourceConfigurationImpl.HTCoreSharing && this.CpuAffinity == vMResourceConfigurationImpl.CpuAffinity && ((this.CpuAffinityList == null && vMResourceConfigurationImpl.CpuAffinityList == null) || (this.CpuAffinityList != null && vMResourceConfigurationImpl.CpuAffinityList != null && Enumerable.SequenceEqual(this.CpuAffinityList, vMResourceConfigurationImpl.CpuAffinityList))) && this.Uid == vMResourceConfigurationImpl.Uid);
        }

        public override bool Equals(object vMResourceConfigurationImpl)
        {
            return Equals(vMResourceConfigurationImpl as VMResourceConfigurationImpl);
        }

        public override int GetHashCode()
        {
            return (VirtualMachineId + "_" + VM + "_" + VMId + "_" + NumCpuShares + "_" + CpuReservationMhz + "_" + CpuLimitMhz + "_" + CpuSharesLevel + "_" + NumMemShares + "_" + MemReservationMB + "_" + MemReservationGB + "_" + MemLimitMB + "_" + MemLimitGB + "_" + MemSharesLevel + "_" + DiskResourceConfiguration + "_" + HTCoreSharing + "_" + CpuAffinity + "_" + CpuAffinityList + "_" + Uid).GetHashCode();
        }
    }
}

namespace VMware.VimAutomation.ViCore.Impl.V1.VM.Guest
{
    using System;
    using System.Linq;
    using VMware.VimAutomation.Sdk.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1;
    using VMware.VimAutomation.ViCore.Types.V1.Inventory;
    using VMware.VimAutomation.ViCore.Types.V1.VirtualDevice;
    using VMware.VimAutomation.ViCore.Types.V1.VM.Guest;

    public class DiskInfoImpl : DiskInfo, IEquatable<DiskInfoImpl>
    {
        public string Path { get; set; }

        public long Capacity { get; set; }

        public decimal CapacityGB { get; set; }

        public long FreeSpace { get; set; }

        public decimal FreeSpaceGB { get; set; }

        public bool Equals(DiskInfoImpl diskInfoImpl)
        {
            return (diskInfoImpl != null && this.Path == diskInfoImpl.Path && this.Capacity == diskInfoImpl.Capacity && this.CapacityGB == diskInfoImpl.CapacityGB && this.FreeSpace == diskInfoImpl.FreeSpace && this.FreeSpaceGB == diskInfoImpl.FreeSpaceGB);
        }

        public override bool Equals(object diskInfoImpl)
        {
            return Equals(diskInfoImpl as DiskInfoImpl);
        }

        public override int GetHashCode()
        {
            return (Path + "_" + Capacity + "_" + CapacityGB + "_" + FreeSpace + "_" + FreeSpaceGB).GetHashCode();
        }
    }

    public class NicInfoImpl : NicInfo, IEquatable<NicInfoImpl>
    {
        public bool Connected { get; set; }

        public NetworkAdapter Device { get; set; }

        public string[] IPAddress { get; set; }

        public string MacAddress { get; set; }

        public string NetworkName { get; set; }

        public bool Equals(NicInfoImpl nicInfoImpl)
        {
            return (nicInfoImpl != null && this.Connected == nicInfoImpl.Connected && ((this.Device == null && nicInfoImpl.Device == null) || (this.Device != null && this.Device.Equals(nicInfoImpl.Device))) && ((this.IPAddress == null && nicInfoImpl.IPAddress == null) || (this.IPAddress != null && nicInfoImpl.IPAddress != null && Enumerable.SequenceEqual(this.IPAddress, nicInfoImpl.IPAddress))) && this.MacAddress == nicInfoImpl.MacAddress && this.NetworkName == nicInfoImpl.NetworkName);
        }

        public override bool Equals(object nicInfoImpl)
        {
            return Equals(nicInfoImpl as NicInfoImpl);
        }

        public override int GetHashCode()
        {
            return (Connected + "_" + Device + "_" + IPAddress + "_" + MacAddress + "_" + NetworkName).GetHashCode();
        }
    }

    public class VMGuestImpl : VMGuest, IEquatable<VMGuestImpl>
    {
        public string OSFullName { get; set; }

        public string[] IPAddress { get; set; }

        public GuestState State { get; set; }

        public DiskInfo[] Disks { get; set; }

        public string HostName { get; set; }

        public NicInfo[] Nics { get; set; }

        public string VmId { get; set; }

        public VirtualMachine VM { get; set; }

        public string VmUid { get; set; }

        public string VmName { get; set; }

        public string Uid { get; set; }

        public string GuestId { get; set; }

        public string ConfiguredGuestId { get; set; }

        public string RuntimeGuestId { get; set; }

        public string ToolsVersion { get; set; }

        public object ExtensionData { get; set; }

        public string GuestFamily { get; set; }

        public bool Equals(VMGuestImpl vMGuestImpl)
        {
            return (vMGuestImpl != null && this.OSFullName == vMGuestImpl.OSFullName && ((this.IPAddress == null && vMGuestImpl.IPAddress == null) || (this.IPAddress != null && vMGuestImpl.IPAddress != null && Enumerable.SequenceEqual(this.IPAddress, vMGuestImpl.IPAddress))) && this.State == vMGuestImpl.State && ((this.Disks == null && vMGuestImpl.Disks == null) || (this.Disks != null && vMGuestImpl.Disks != null && Enumerable.SequenceEqual(this.Disks, vMGuestImpl.Disks))) && this.HostName == vMGuestImpl.HostName && ((this.Nics == null && vMGuestImpl.Nics == null) || (this.Nics != null && vMGuestImpl.Nics != null && Enumerable.SequenceEqual(this.Nics, vMGuestImpl.Nics))) && this.VmId == vMGuestImpl.VmId && ((this.VM == null && vMGuestImpl.VM == null) || (this.VM != null && this.VM.Equals(vMGuestImpl.VM))) && this.VmUid == vMGuestImpl.VmUid && this.VmName == vMGuestImpl.VmName && this.Uid == vMGuestImpl.Uid && this.GuestId == vMGuestImpl.GuestId && this.ConfiguredGuestId == vMGuestImpl.ConfiguredGuestId && this.RuntimeGuestId == vMGuestImpl.RuntimeGuestId && this.ToolsVersion == vMGuestImpl.ToolsVersion && ((this.ExtensionData == null && vMGuestImpl.ExtensionData == null) || (this.ExtensionData != null && this.ExtensionData.Equals(vMGuestImpl.ExtensionData))) && this.GuestFamily == vMGuestImpl.GuestFamily);
        }

        public override bool Equals(object vMGuestImpl)
        {
            return Equals(vMGuestImpl as VMGuestImpl);
        }

        public override int GetHashCode()
        {
            return (OSFullName + "_" + IPAddress + "_" + State + "_" + Disks + "_" + HostName + "_" + Nics + "_" + VmId + "_" + VM + "_" + VmUid + "_" + VmName + "_" + Uid + "_" + GuestId + "_" + ConfiguredGuestId + "_" + RuntimeGuestId + "_" + ToolsVersion + "_" + ExtensionData + "_" + GuestFamily).GetHashCode();
        }
    }
}
